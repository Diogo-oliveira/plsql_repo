/*-- Last Change Revision: $Rev: 2028208 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:29 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_icnp_cplan_stand_compo
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Agosto 19, 2011 14:53:54
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_cplan_stand_compo_in  IN icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE,
        id_cplan_stand_in        IN icnp_cplan_stand_compo.id_cplan_stand%TYPE DEFAULT NULL,
        id_composition_in        IN icnp_cplan_stand_compo.id_composition%TYPE DEFAULT NULL,
        id_composition_parent_in IN icnp_cplan_stand_compo.id_composition_parent%TYPE DEFAULT NULL,
        flg_status_in            IN icnp_cplan_stand_compo.flg_status%TYPE DEFAULT NULL,
        flg_compo_type_in        IN icnp_cplan_stand_compo.flg_compo_type%TYPE DEFAULT NULL,
        flg_freq_in              IN icnp_cplan_stand_compo.flg_freq%TYPE DEFAULT NULL,
        num_take_in              IN icnp_cplan_stand_compo.num_take%TYPE DEFAULT NULL,
        flg_type_in              IN icnp_cplan_stand_compo.flg_type%TYPE DEFAULT NULL,
        interval_in              IN icnp_cplan_stand_compo.interval%TYPE DEFAULT NULL,
        flg_interval_unit_in     IN icnp_cplan_stand_compo.flg_interval_unit%TYPE DEFAULT NULL,
        flg_duration_unit_in     IN icnp_cplan_stand_compo.flg_duration_unit%TYPE DEFAULT NULL,
        duration_in              IN icnp_cplan_stand_compo.duration%TYPE DEFAULT NULL,
        flg_time_in              IN icnp_cplan_stand_compo.flg_time%TYPE DEFAULT NULL,
        create_user_in           IN icnp_cplan_stand_compo.create_user%TYPE DEFAULT NULL,
        create_time_in           IN icnp_cplan_stand_compo.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN icnp_cplan_stand_compo.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN icnp_cplan_stand_compo.update_user%TYPE DEFAULT NULL,
        update_time_in           IN icnp_cplan_stand_compo.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN icnp_cplan_stand_compo.update_institution%TYPE DEFAULT NULL,
        id_order_recurr_plan_in  IN icnp_cplan_stand_compo.id_order_recurr_plan%TYPE DEFAULT NULL,
        flg_prn_in               IN icnp_cplan_stand_compo.flg_prn%TYPE DEFAULT NULL,
        prn_notes_in             IN icnp_cplan_stand_compo.prn_notes%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO icnp_cplan_stand_compo
            (id_cplan_stand_compo,
             id_cplan_stand,
             id_composition,
             id_composition_parent,
             flg_status,
             flg_compo_type,
             flg_freq,
             num_take,
             flg_type,
             INTERVAL,
             flg_interval_unit,
             flg_duration_unit,
             duration,
             flg_time,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_order_recurr_plan,
             flg_prn,
             prn_notes)
        VALUES
            (id_cplan_stand_compo_in,
             id_cplan_stand_in,
             id_composition_in,
             id_composition_parent_in,
             flg_status_in,
             flg_compo_type_in,
             flg_freq_in,
             num_take_in,
             flg_type_in,
             interval_in,
             flg_interval_unit_in,
             flg_duration_unit_in,
             duration_in,
             flg_time_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_order_recurr_plan_in,
             flg_prn_in,
             prn_notes_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'ICSC_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "ICSC_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'ICNP_CPLAN_STAND_COMPO',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CPLAN_STAND',
                                                        value_in           => id_cplan_stand_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COMPOSITION',
                                                        value_in           => id_composition_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COMPOSITION_PARENT',
                                                        value_in           => id_composition_parent_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    IF l_name = 'ICSC_ICN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COMPOSITION',
                                                        value_in           => id_composition_in);
                    END IF;
                    IF l_name = 'ICSC_ICN_PARENT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COMPOSITION_PARENT',
                                                        value_in           => id_composition_parent_in);
                    END IF;
                    IF l_name = 'ICSC_ICS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CPLAN_STAND',
                                                        value_in           => id_cplan_stand_in);
                    END IF;
                    IF l_name = 'ICSC_ORP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ORDER_RECURR_PLAN',
                                                        value_in           => id_order_recurr_plan_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_cplan_stand_compo_in  IN icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE,
        id_cplan_stand_in        IN icnp_cplan_stand_compo.id_cplan_stand%TYPE DEFAULT NULL,
        id_composition_in        IN icnp_cplan_stand_compo.id_composition%TYPE DEFAULT NULL,
        id_composition_parent_in IN icnp_cplan_stand_compo.id_composition_parent%TYPE DEFAULT NULL,
        flg_status_in            IN icnp_cplan_stand_compo.flg_status%TYPE DEFAULT NULL,
        flg_compo_type_in        IN icnp_cplan_stand_compo.flg_compo_type%TYPE DEFAULT NULL,
        flg_freq_in              IN icnp_cplan_stand_compo.flg_freq%TYPE DEFAULT NULL,
        num_take_in              IN icnp_cplan_stand_compo.num_take%TYPE DEFAULT NULL,
        flg_type_in              IN icnp_cplan_stand_compo.flg_type%TYPE DEFAULT NULL,
        interval_in              IN icnp_cplan_stand_compo.interval%TYPE DEFAULT NULL,
        flg_interval_unit_in     IN icnp_cplan_stand_compo.flg_interval_unit%TYPE DEFAULT NULL,
        flg_duration_unit_in     IN icnp_cplan_stand_compo.flg_duration_unit%TYPE DEFAULT NULL,
        duration_in              IN icnp_cplan_stand_compo.duration%TYPE DEFAULT NULL,
        flg_time_in              IN icnp_cplan_stand_compo.flg_time%TYPE DEFAULT NULL,
        create_user_in           IN icnp_cplan_stand_compo.create_user%TYPE DEFAULT NULL,
        create_time_in           IN icnp_cplan_stand_compo.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN icnp_cplan_stand_compo.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN icnp_cplan_stand_compo.update_user%TYPE DEFAULT NULL,
        update_time_in           IN icnp_cplan_stand_compo.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN icnp_cplan_stand_compo.update_institution%TYPE DEFAULT NULL,
        id_order_recurr_plan_in  IN icnp_cplan_stand_compo.id_order_recurr_plan%TYPE DEFAULT NULL,
        flg_prn_in               IN icnp_cplan_stand_compo.flg_prn%TYPE DEFAULT NULL,
        prn_notes_in             IN icnp_cplan_stand_compo.prn_notes%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_cplan_stand_compo_in  => id_cplan_stand_compo_in,
            id_cplan_stand_in        => id_cplan_stand_in,
            id_composition_in        => id_composition_in,
            id_composition_parent_in => id_composition_parent_in,
            flg_status_in            => flg_status_in,
            flg_compo_type_in        => flg_compo_type_in,
            flg_freq_in              => flg_freq_in,
            num_take_in              => num_take_in,
            flg_type_in              => flg_type_in,
            interval_in              => interval_in,
            flg_interval_unit_in     => flg_interval_unit_in,
            flg_duration_unit_in     => flg_duration_unit_in,
            duration_in              => duration_in,
            flg_time_in              => flg_time_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            id_order_recurr_plan_in  => id_order_recurr_plan_in,
            flg_prn_in               => flg_prn_in,
            prn_notes_in             => prn_notes_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    /*
    START Special logic for handling LOB columns....
    */

    PROCEDURE n_ins_clobs_in_chunks
    (
        id_cplan_stand_compo_in  IN icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE,
        id_cplan_stand_in        IN icnp_cplan_stand_compo.id_cplan_stand%TYPE DEFAULT NULL,
        id_composition_in        IN icnp_cplan_stand_compo.id_composition%TYPE DEFAULT NULL,
        id_composition_parent_in IN icnp_cplan_stand_compo.id_composition_parent%TYPE DEFAULT NULL,
        flg_status_in            IN icnp_cplan_stand_compo.flg_status%TYPE DEFAULT NULL,
        flg_compo_type_in        IN icnp_cplan_stand_compo.flg_compo_type%TYPE DEFAULT NULL,
        flg_freq_in              IN icnp_cplan_stand_compo.flg_freq%TYPE DEFAULT NULL,
        num_take_in              IN icnp_cplan_stand_compo.num_take%TYPE DEFAULT NULL,
        flg_type_in              IN icnp_cplan_stand_compo.flg_type%TYPE DEFAULT NULL,
        interval_in              IN icnp_cplan_stand_compo.interval%TYPE DEFAULT NULL,
        flg_interval_unit_in     IN icnp_cplan_stand_compo.flg_interval_unit%TYPE DEFAULT NULL,
        flg_duration_unit_in     IN icnp_cplan_stand_compo.flg_duration_unit%TYPE DEFAULT NULL,
        duration_in              IN icnp_cplan_stand_compo.duration%TYPE DEFAULT NULL,
        flg_time_in              IN icnp_cplan_stand_compo.flg_time%TYPE DEFAULT NULL,
        create_user_in           IN icnp_cplan_stand_compo.create_user%TYPE DEFAULT NULL,
        create_time_in           IN icnp_cplan_stand_compo.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN icnp_cplan_stand_compo.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN icnp_cplan_stand_compo.update_user%TYPE DEFAULT NULL,
        update_time_in           IN icnp_cplan_stand_compo.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN icnp_cplan_stand_compo.update_institution%TYPE DEFAULT NULL,
        id_order_recurr_plan_in  IN icnp_cplan_stand_compo.id_order_recurr_plan%TYPE DEFAULT NULL,
        flg_prn_in               IN icnp_cplan_stand_compo.flg_prn%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        clob_columns_in          IN varchar2_t,
        clob_pieces_in           IN varchar2_t
    ) IS
        l_prn_notes    CLOB;
        i              PLS_INTEGER;
        current_column VARCHAR2(30) := '';
    BEGIN
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.first .. clob_columns_in.last
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'prn_notes_in' THEN
                            IF l_prn_notes IS NULL
                            THEN
                                dbms_lob.createtemporary(l_prn_notes, TRUE, dbms_lob.call);
                            END IF;
                    END CASE;
                END IF;
            
                CASE current_column
                    WHEN 'prn_notes_in' THEN
                        dbms_lob.writeappend(l_prn_notes, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE;
            END IF;
        END LOOP;
    
        ins(id_cplan_stand_compo_in  => id_cplan_stand_compo_in,
            id_cplan_stand_in        => id_cplan_stand_in,
            id_composition_in        => id_composition_in,
            id_composition_parent_in => id_composition_parent_in,
            flg_status_in            => flg_status_in,
            flg_compo_type_in        => flg_compo_type_in,
            flg_freq_in              => flg_freq_in,
            num_take_in              => num_take_in,
            flg_type_in              => flg_type_in,
            interval_in              => interval_in,
            flg_interval_unit_in     => flg_interval_unit_in,
            flg_duration_unit_in     => flg_duration_unit_in,
            duration_in              => duration_in,
            flg_time_in              => flg_time_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            id_order_recurr_plan_in  => id_order_recurr_plan_in,
            flg_prn_in               => flg_prn_in,
            prn_notes_in             => l_prn_notes,
            handle_error_in          => handle_error_in);
    
    END n_ins_clobs_in_chunks;

    PROCEDURE n_upd_clobs_in_chunks
    (
        id_cplan_stand_compo_in  IN icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE,
        id_cplan_stand_in        IN icnp_cplan_stand_compo.id_cplan_stand%TYPE DEFAULT NULL,
        id_composition_in        IN icnp_cplan_stand_compo.id_composition%TYPE DEFAULT NULL,
        id_composition_parent_in IN icnp_cplan_stand_compo.id_composition_parent%TYPE DEFAULT NULL,
        flg_status_in            IN icnp_cplan_stand_compo.flg_status%TYPE DEFAULT NULL,
        flg_compo_type_in        IN icnp_cplan_stand_compo.flg_compo_type%TYPE DEFAULT NULL,
        flg_freq_in              IN icnp_cplan_stand_compo.flg_freq%TYPE DEFAULT NULL,
        num_take_in              IN icnp_cplan_stand_compo.num_take%TYPE DEFAULT NULL,
        flg_type_in              IN icnp_cplan_stand_compo.flg_type%TYPE DEFAULT NULL,
        interval_in              IN icnp_cplan_stand_compo.interval%TYPE DEFAULT NULL,
        flg_interval_unit_in     IN icnp_cplan_stand_compo.flg_interval_unit%TYPE DEFAULT NULL,
        flg_duration_unit_in     IN icnp_cplan_stand_compo.flg_duration_unit%TYPE DEFAULT NULL,
        duration_in              IN icnp_cplan_stand_compo.duration%TYPE DEFAULT NULL,
        flg_time_in              IN icnp_cplan_stand_compo.flg_time%TYPE DEFAULT NULL,
        create_user_in           IN icnp_cplan_stand_compo.create_user%TYPE DEFAULT NULL,
        create_time_in           IN icnp_cplan_stand_compo.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN icnp_cplan_stand_compo.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN icnp_cplan_stand_compo.update_user%TYPE DEFAULT NULL,
        update_time_in           IN icnp_cplan_stand_compo.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN icnp_cplan_stand_compo.update_institution%TYPE DEFAULT NULL,
        id_order_recurr_plan_in  IN icnp_cplan_stand_compo.id_order_recurr_plan%TYPE DEFAULT NULL,
        flg_prn_in               IN icnp_cplan_stand_compo.flg_prn%TYPE DEFAULT NULL,
        ignore_if_null_in        IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE,
        clob_columns_in          IN varchar2_t,
        clob_pieces_in           IN varchar2_t
    ) IS
        l_prn_notes    CLOB;
        i              PLS_INTEGER;
        current_column VARCHAR2(30) := '';
        l_rows         PLS_INTEGER;
    BEGIN
    
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.first .. clob_columns_in.last
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'prn_notes_in' THEN
                            IF l_prn_notes IS NULL
                            THEN
                                dbms_lob.createtemporary(l_prn_notes, TRUE, dbms_lob.call);
                            END IF;
                    END CASE;
                END IF;
            
                CASE current_column
                    WHEN 'prn_notes_in' THEN
                        dbms_lob.writeappend(l_prn_notes, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE;
            END IF;
        END LOOP;
    
        upd(id_cplan_stand_compo_in  => id_cplan_stand_compo_in,
            id_cplan_stand_in        => id_cplan_stand_in,
            id_composition_in        => id_composition_in,
            id_composition_parent_in => id_composition_parent_in,
            flg_status_in            => flg_status_in,
            flg_compo_type_in        => flg_compo_type_in,
            flg_freq_in              => flg_freq_in,
            num_take_in              => num_take_in,
            flg_type_in              => flg_type_in,
            interval_in              => interval_in,
            flg_interval_unit_in     => flg_interval_unit_in,
            flg_duration_unit_in     => flg_duration_unit_in,
            duration_in              => duration_in,
            flg_time_in              => flg_time_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            id_order_recurr_plan_in  => id_order_recurr_plan_in,
            flg_prn_in               => flg_prn_in,
            prn_notes_in             => l_prn_notes,
            handle_error_in          => handle_error_in);
    END n_upd_clobs_in_chunks;

    PROCEDURE n_upd_ins_clobs_in_chunks
    (
        id_cplan_stand_compo_in  IN icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE,
        id_cplan_stand_in        IN icnp_cplan_stand_compo.id_cplan_stand%TYPE DEFAULT NULL,
        id_composition_in        IN icnp_cplan_stand_compo.id_composition%TYPE DEFAULT NULL,
        id_composition_parent_in IN icnp_cplan_stand_compo.id_composition_parent%TYPE DEFAULT NULL,
        flg_status_in            IN icnp_cplan_stand_compo.flg_status%TYPE DEFAULT NULL,
        flg_compo_type_in        IN icnp_cplan_stand_compo.flg_compo_type%TYPE DEFAULT NULL,
        flg_freq_in              IN icnp_cplan_stand_compo.flg_freq%TYPE DEFAULT NULL,
        num_take_in              IN icnp_cplan_stand_compo.num_take%TYPE DEFAULT NULL,
        flg_type_in              IN icnp_cplan_stand_compo.flg_type%TYPE DEFAULT NULL,
        interval_in              IN icnp_cplan_stand_compo.interval%TYPE DEFAULT NULL,
        flg_interval_unit_in     IN icnp_cplan_stand_compo.flg_interval_unit%TYPE DEFAULT NULL,
        flg_duration_unit_in     IN icnp_cplan_stand_compo.flg_duration_unit%TYPE DEFAULT NULL,
        duration_in              IN icnp_cplan_stand_compo.duration%TYPE DEFAULT NULL,
        flg_time_in              IN icnp_cplan_stand_compo.flg_time%TYPE DEFAULT NULL,
        create_user_in           IN icnp_cplan_stand_compo.create_user%TYPE DEFAULT NULL,
        create_time_in           IN icnp_cplan_stand_compo.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN icnp_cplan_stand_compo.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN icnp_cplan_stand_compo.update_user%TYPE DEFAULT NULL,
        update_time_in           IN icnp_cplan_stand_compo.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN icnp_cplan_stand_compo.update_institution%TYPE DEFAULT NULL,
        id_order_recurr_plan_in  IN icnp_cplan_stand_compo.id_order_recurr_plan%TYPE DEFAULT NULL,
        flg_prn_in               IN icnp_cplan_stand_compo.flg_prn%TYPE DEFAULT NULL,
        ignore_if_null_in        IN BOOLEAN DEFAULT TRUE,
        handle_error_in          IN BOOLEAN DEFAULT TRUE,
        clob_columns_in          IN varchar2_t,
        clob_pieces_in           IN varchar2_t
    ) IS
    BEGIN
        n_upd_clobs_in_chunks(id_cplan_stand_compo_in  => id_cplan_stand_compo_in,
                              id_cplan_stand_in        => id_cplan_stand_in,
                              id_composition_in        => id_composition_in,
                              id_composition_parent_in => id_composition_parent_in,
                              flg_status_in            => flg_status_in,
                              flg_compo_type_in        => flg_compo_type_in,
                              flg_freq_in              => flg_freq_in,
                              num_take_in              => num_take_in,
                              flg_type_in              => flg_type_in,
                              interval_in              => interval_in,
                              flg_interval_unit_in     => flg_interval_unit_in,
                              flg_duration_unit_in     => flg_duration_unit_in,
                              duration_in              => duration_in,
                              flg_time_in              => flg_time_in,
                              create_user_in           => create_user_in,
                              create_time_in           => create_time_in,
                              create_institution_in    => create_institution_in,
                              update_user_in           => update_user_in,
                              update_time_in           => update_time_in,
                              update_institution_in    => update_institution_in,
                              id_order_recurr_plan_in  => id_order_recurr_plan_in,
                              flg_prn_in               => flg_prn_in,
                              clob_columns_in          => clob_columns_in,
                              clob_pieces_in           => clob_pieces_in,
                              ignore_if_null_in        => ignore_if_null_in,
                              handle_error_in          => handle_error_in);
    
        IF SQL%ROWCOUNT = 0
        THEN
            n_ins_clobs_in_chunks(id_cplan_stand_compo_in  => id_cplan_stand_compo_in,
                                  id_cplan_stand_in        => id_cplan_stand_in,
                                  id_composition_in        => id_composition_in,
                                  id_composition_parent_in => id_composition_parent_in,
                                  flg_status_in            => flg_status_in,
                                  flg_compo_type_in        => flg_compo_type_in,
                                  flg_freq_in              => flg_freq_in,
                                  num_take_in              => num_take_in,
                                  flg_type_in              => flg_type_in,
                                  interval_in              => interval_in,
                                  flg_interval_unit_in     => flg_interval_unit_in,
                                  flg_duration_unit_in     => flg_duration_unit_in,
                                  duration_in              => duration_in,
                                  flg_time_in              => flg_time_in,
                                  create_user_in           => create_user_in,
                                  create_time_in           => create_time_in,
                                  create_institution_in    => create_institution_in,
                                  update_user_in           => update_user_in,
                                  update_time_in           => update_time_in,
                                  update_institution_in    => update_institution_in,
                                  id_order_recurr_plan_in  => id_order_recurr_plan_in,
                                  flg_prn_in               => flg_prn_in,
                                  clob_columns_in          => clob_columns_in,
                                  clob_pieces_in           => clob_pieces_in,
                                  handle_error_in          => handle_error_in);
        END IF;
    END n_upd_ins_clobs_in_chunks;

    /*
    END Special logic for handling LOB columns.
    */

    PROCEDURE ins
    (
        rec_in          IN icnp_cplan_stand_compo%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec icnp_cplan_stand_compo%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_cplan_stand_compo := next_key(sequence_in);
        END IF;
        ins(id_cplan_stand_compo_in  => l_rec.id_cplan_stand_compo,
            id_cplan_stand_in        => l_rec.id_cplan_stand,
            id_composition_in        => l_rec.id_composition,
            id_composition_parent_in => l_rec.id_composition_parent,
            flg_status_in            => l_rec.flg_status,
            flg_compo_type_in        => l_rec.flg_compo_type,
            flg_freq_in              => l_rec.flg_freq,
            num_take_in              => l_rec.num_take,
            flg_type_in              => l_rec.flg_type,
            interval_in              => l_rec.interval,
            flg_interval_unit_in     => l_rec.flg_interval_unit,
            flg_duration_unit_in     => l_rec.flg_duration_unit,
            duration_in              => l_rec.duration,
            flg_time_in              => l_rec.flg_time,
            create_user_in           => l_rec.create_user,
            create_time_in           => l_rec.create_time,
            create_institution_in    => l_rec.create_institution,
            update_user_in           => l_rec.update_user,
            update_time_in           => l_rec.update_time,
            update_institution_in    => l_rec.update_institution,
            id_order_recurr_plan_in  => l_rec.id_order_recurr_plan,
            flg_prn_in               => l_rec.flg_prn,
            prn_notes_in             => l_rec.prn_notes,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN icnp_cplan_stand_compo%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE
    
     IS
        retval icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_icnp_cplan_stand_compo.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_ICNP_CPLAN_STAND_COMPO'));
    END next_key;

    PROCEDURE ins
    (
        id_cplan_stand_in        IN icnp_cplan_stand_compo.id_cplan_stand%TYPE DEFAULT NULL,
        id_composition_in        IN icnp_cplan_stand_compo.id_composition%TYPE DEFAULT NULL,
        id_composition_parent_in IN icnp_cplan_stand_compo.id_composition_parent%TYPE DEFAULT NULL,
        flg_status_in            IN icnp_cplan_stand_compo.flg_status%TYPE DEFAULT NULL,
        flg_compo_type_in        IN icnp_cplan_stand_compo.flg_compo_type%TYPE DEFAULT NULL,
        flg_freq_in              IN icnp_cplan_stand_compo.flg_freq%TYPE DEFAULT NULL,
        num_take_in              IN icnp_cplan_stand_compo.num_take%TYPE DEFAULT NULL,
        flg_type_in              IN icnp_cplan_stand_compo.flg_type%TYPE DEFAULT NULL,
        interval_in              IN icnp_cplan_stand_compo.interval%TYPE DEFAULT NULL,
        flg_interval_unit_in     IN icnp_cplan_stand_compo.flg_interval_unit%TYPE DEFAULT NULL,
        flg_duration_unit_in     IN icnp_cplan_stand_compo.flg_duration_unit%TYPE DEFAULT NULL,
        duration_in              IN icnp_cplan_stand_compo.duration%TYPE DEFAULT NULL,
        flg_time_in              IN icnp_cplan_stand_compo.flg_time%TYPE DEFAULT NULL,
        create_user_in           IN icnp_cplan_stand_compo.create_user%TYPE DEFAULT NULL,
        create_time_in           IN icnp_cplan_stand_compo.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN icnp_cplan_stand_compo.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN icnp_cplan_stand_compo.update_user%TYPE DEFAULT NULL,
        update_time_in           IN icnp_cplan_stand_compo.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN icnp_cplan_stand_compo.update_institution%TYPE DEFAULT NULL,
        id_order_recurr_plan_in  IN icnp_cplan_stand_compo.id_order_recurr_plan%TYPE DEFAULT NULL,
        flg_prn_in               IN icnp_cplan_stand_compo.flg_prn%TYPE DEFAULT NULL,
        prn_notes_in             IN icnp_cplan_stand_compo.prn_notes%TYPE DEFAULT NULL,
        id_cplan_stand_compo_out IN OUT icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
        l_pky icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE := next_key;
    BEGIN
        ins(id_cplan_stand_compo_in  => l_pky,
            id_cplan_stand_in        => id_cplan_stand_in,
            id_composition_in        => id_composition_in,
            id_composition_parent_in => id_composition_parent_in,
            flg_status_in            => flg_status_in,
            flg_compo_type_in        => flg_compo_type_in,
            flg_freq_in              => flg_freq_in,
            num_take_in              => num_take_in,
            flg_type_in              => flg_type_in,
            interval_in              => interval_in,
            flg_interval_unit_in     => flg_interval_unit_in,
            flg_duration_unit_in     => flg_duration_unit_in,
            duration_in              => duration_in,
            flg_time_in              => flg_time_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            id_order_recurr_plan_in  => id_order_recurr_plan_in,
            flg_prn_in               => flg_prn_in,
            prn_notes_in             => prn_notes_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        id_cplan_stand_compo_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_cplan_stand_in        IN icnp_cplan_stand_compo.id_cplan_stand%TYPE DEFAULT NULL,
        id_composition_in        IN icnp_cplan_stand_compo.id_composition%TYPE DEFAULT NULL,
        id_composition_parent_in IN icnp_cplan_stand_compo.id_composition_parent%TYPE DEFAULT NULL,
        flg_status_in            IN icnp_cplan_stand_compo.flg_status%TYPE DEFAULT NULL,
        flg_compo_type_in        IN icnp_cplan_stand_compo.flg_compo_type%TYPE DEFAULT NULL,
        flg_freq_in              IN icnp_cplan_stand_compo.flg_freq%TYPE DEFAULT NULL,
        num_take_in              IN icnp_cplan_stand_compo.num_take%TYPE DEFAULT NULL,
        flg_type_in              IN icnp_cplan_stand_compo.flg_type%TYPE DEFAULT NULL,
        interval_in              IN icnp_cplan_stand_compo.interval%TYPE DEFAULT NULL,
        flg_interval_unit_in     IN icnp_cplan_stand_compo.flg_interval_unit%TYPE DEFAULT NULL,
        flg_duration_unit_in     IN icnp_cplan_stand_compo.flg_duration_unit%TYPE DEFAULT NULL,
        duration_in              IN icnp_cplan_stand_compo.duration%TYPE DEFAULT NULL,
        flg_time_in              IN icnp_cplan_stand_compo.flg_time%TYPE DEFAULT NULL,
        create_user_in           IN icnp_cplan_stand_compo.create_user%TYPE DEFAULT NULL,
        create_time_in           IN icnp_cplan_stand_compo.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN icnp_cplan_stand_compo.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN icnp_cplan_stand_compo.update_user%TYPE DEFAULT NULL,
        update_time_in           IN icnp_cplan_stand_compo.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN icnp_cplan_stand_compo.update_institution%TYPE DEFAULT NULL,
        id_order_recurr_plan_in  IN icnp_cplan_stand_compo.id_order_recurr_plan%TYPE DEFAULT NULL,
        flg_prn_in               IN icnp_cplan_stand_compo.flg_prn%TYPE DEFAULT NULL,
        prn_notes_in             IN icnp_cplan_stand_compo.prn_notes%TYPE DEFAULT NULL,
        id_cplan_stand_compo_out IN OUT icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_cplan_stand_in        => id_cplan_stand_in,
            id_composition_in        => id_composition_in,
            id_composition_parent_in => id_composition_parent_in,
            flg_status_in            => flg_status_in,
            flg_compo_type_in        => flg_compo_type_in,
            flg_freq_in              => flg_freq_in,
            num_take_in              => num_take_in,
            flg_type_in              => flg_type_in,
            interval_in              => interval_in,
            flg_interval_unit_in     => flg_interval_unit_in,
            flg_duration_unit_in     => flg_duration_unit_in,
            duration_in              => duration_in,
            flg_time_in              => flg_time_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            id_order_recurr_plan_in  => id_order_recurr_plan_in,
            flg_prn_in               => flg_prn_in,
            prn_notes_in             => prn_notes_in,
            id_cplan_stand_compo_out => id_cplan_stand_compo_out,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    FUNCTION ins
    (
        id_cplan_stand_in        IN icnp_cplan_stand_compo.id_cplan_stand%TYPE DEFAULT NULL,
        id_composition_in        IN icnp_cplan_stand_compo.id_composition%TYPE DEFAULT NULL,
        id_composition_parent_in IN icnp_cplan_stand_compo.id_composition_parent%TYPE DEFAULT NULL,
        flg_status_in            IN icnp_cplan_stand_compo.flg_status%TYPE DEFAULT NULL,
        flg_compo_type_in        IN icnp_cplan_stand_compo.flg_compo_type%TYPE DEFAULT NULL,
        flg_freq_in              IN icnp_cplan_stand_compo.flg_freq%TYPE DEFAULT NULL,
        num_take_in              IN icnp_cplan_stand_compo.num_take%TYPE DEFAULT NULL,
        flg_type_in              IN icnp_cplan_stand_compo.flg_type%TYPE DEFAULT NULL,
        interval_in              IN icnp_cplan_stand_compo.interval%TYPE DEFAULT NULL,
        flg_interval_unit_in     IN icnp_cplan_stand_compo.flg_interval_unit%TYPE DEFAULT NULL,
        flg_duration_unit_in     IN icnp_cplan_stand_compo.flg_duration_unit%TYPE DEFAULT NULL,
        duration_in              IN icnp_cplan_stand_compo.duration%TYPE DEFAULT NULL,
        flg_time_in              IN icnp_cplan_stand_compo.flg_time%TYPE DEFAULT NULL,
        create_user_in           IN icnp_cplan_stand_compo.create_user%TYPE DEFAULT NULL,
        create_time_in           IN icnp_cplan_stand_compo.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN icnp_cplan_stand_compo.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN icnp_cplan_stand_compo.update_user%TYPE DEFAULT NULL,
        update_time_in           IN icnp_cplan_stand_compo.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN icnp_cplan_stand_compo.update_institution%TYPE DEFAULT NULL,
        id_order_recurr_plan_in  IN icnp_cplan_stand_compo.id_order_recurr_plan%TYPE DEFAULT NULL,
        flg_prn_in               IN icnp_cplan_stand_compo.flg_prn%TYPE DEFAULT NULL,
        prn_notes_in             IN icnp_cplan_stand_compo.prn_notes%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) RETURN icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE IS
        l_pky icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE := next_key;
    BEGIN
        ins(id_cplan_stand_compo_in  => l_pky,
            id_cplan_stand_in        => id_cplan_stand_in,
            id_composition_in        => id_composition_in,
            id_composition_parent_in => id_composition_parent_in,
            flg_status_in            => flg_status_in,
            flg_compo_type_in        => flg_compo_type_in,
            flg_freq_in              => flg_freq_in,
            num_take_in              => num_take_in,
            flg_type_in              => flg_type_in,
            interval_in              => interval_in,
            flg_interval_unit_in     => flg_interval_unit_in,
            flg_duration_unit_in     => flg_duration_unit_in,
            duration_in              => duration_in,
            flg_time_in              => flg_time_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            id_order_recurr_plan_in  => id_order_recurr_plan_in,
            flg_prn_in               => flg_prn_in,
            prn_notes_in             => prn_notes_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_cplan_stand_in        IN icnp_cplan_stand_compo.id_cplan_stand%TYPE DEFAULT NULL,
        id_composition_in        IN icnp_cplan_stand_compo.id_composition%TYPE DEFAULT NULL,
        id_composition_parent_in IN icnp_cplan_stand_compo.id_composition_parent%TYPE DEFAULT NULL,
        flg_status_in            IN icnp_cplan_stand_compo.flg_status%TYPE DEFAULT NULL,
        flg_compo_type_in        IN icnp_cplan_stand_compo.flg_compo_type%TYPE DEFAULT NULL,
        flg_freq_in              IN icnp_cplan_stand_compo.flg_freq%TYPE DEFAULT NULL,
        num_take_in              IN icnp_cplan_stand_compo.num_take%TYPE DEFAULT NULL,
        flg_type_in              IN icnp_cplan_stand_compo.flg_type%TYPE DEFAULT NULL,
        interval_in              IN icnp_cplan_stand_compo.interval%TYPE DEFAULT NULL,
        flg_interval_unit_in     IN icnp_cplan_stand_compo.flg_interval_unit%TYPE DEFAULT NULL,
        flg_duration_unit_in     IN icnp_cplan_stand_compo.flg_duration_unit%TYPE DEFAULT NULL,
        duration_in              IN icnp_cplan_stand_compo.duration%TYPE DEFAULT NULL,
        flg_time_in              IN icnp_cplan_stand_compo.flg_time%TYPE DEFAULT NULL,
        create_user_in           IN icnp_cplan_stand_compo.create_user%TYPE DEFAULT NULL,
        create_time_in           IN icnp_cplan_stand_compo.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN icnp_cplan_stand_compo.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN icnp_cplan_stand_compo.update_user%TYPE DEFAULT NULL,
        update_time_in           IN icnp_cplan_stand_compo.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN icnp_cplan_stand_compo.update_institution%TYPE DEFAULT NULL,
        id_order_recurr_plan_in  IN icnp_cplan_stand_compo.id_order_recurr_plan%TYPE DEFAULT NULL,
        flg_prn_in               IN icnp_cplan_stand_compo.flg_prn%TYPE DEFAULT NULL,
        prn_notes_in             IN icnp_cplan_stand_compo.prn_notes%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) RETURN icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE IS
        l_pky    icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_cplan_stand_compo_in  => l_pky,
            id_cplan_stand_in        => id_cplan_stand_in,
            id_composition_in        => id_composition_in,
            id_composition_parent_in => id_composition_parent_in,
            flg_status_in            => flg_status_in,
            flg_compo_type_in        => flg_compo_type_in,
            flg_freq_in              => flg_freq_in,
            num_take_in              => num_take_in,
            flg_type_in              => flg_type_in,
            interval_in              => interval_in,
            flg_interval_unit_in     => flg_interval_unit_in,
            flg_duration_unit_in     => flg_duration_unit_in,
            duration_in              => duration_in,
            flg_time_in              => flg_time_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            id_order_recurr_plan_in  => id_order_recurr_plan_in,
            flg_prn_in               => flg_prn_in,
            prn_notes_in             => prn_notes_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_cplan_stand_in        IN icnp_cplan_stand_compo.id_cplan_stand%TYPE DEFAULT NULL,
        id_composition_in        IN icnp_cplan_stand_compo.id_composition%TYPE DEFAULT NULL,
        id_composition_parent_in IN icnp_cplan_stand_compo.id_composition_parent%TYPE DEFAULT NULL,
        flg_status_in            IN icnp_cplan_stand_compo.flg_status%TYPE DEFAULT NULL,
        flg_compo_type_in        IN icnp_cplan_stand_compo.flg_compo_type%TYPE DEFAULT NULL,
        flg_freq_in              IN icnp_cplan_stand_compo.flg_freq%TYPE DEFAULT NULL,
        num_take_in              IN icnp_cplan_stand_compo.num_take%TYPE DEFAULT NULL,
        flg_type_in              IN icnp_cplan_stand_compo.flg_type%TYPE DEFAULT NULL,
        interval_in              IN icnp_cplan_stand_compo.interval%TYPE DEFAULT NULL,
        flg_interval_unit_in     IN icnp_cplan_stand_compo.flg_interval_unit%TYPE DEFAULT NULL,
        flg_duration_unit_in     IN icnp_cplan_stand_compo.flg_duration_unit%TYPE DEFAULT NULL,
        duration_in              IN icnp_cplan_stand_compo.duration%TYPE DEFAULT NULL,
        flg_time_in              IN icnp_cplan_stand_compo.flg_time%TYPE DEFAULT NULL,
        create_user_in           IN icnp_cplan_stand_compo.create_user%TYPE DEFAULT NULL,
        create_time_in           IN icnp_cplan_stand_compo.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN icnp_cplan_stand_compo.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN icnp_cplan_stand_compo.update_user%TYPE DEFAULT NULL,
        update_time_in           IN icnp_cplan_stand_compo.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN icnp_cplan_stand_compo.update_institution%TYPE DEFAULT NULL,
        id_order_recurr_plan_in  IN icnp_cplan_stand_compo.id_order_recurr_plan%TYPE DEFAULT NULL,
        flg_prn_in               IN icnp_cplan_stand_compo.flg_prn%TYPE DEFAULT NULL,
        prn_notes_in             IN icnp_cplan_stand_compo.prn_notes%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
        l_pky icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE := next_key;
    BEGIN
        ins(id_cplan_stand_compo_in  => l_pky,
            id_cplan_stand_in        => id_cplan_stand_in,
            id_composition_in        => id_composition_in,
            id_composition_parent_in => id_composition_parent_in,
            flg_status_in            => flg_status_in,
            flg_compo_type_in        => flg_compo_type_in,
            flg_freq_in              => flg_freq_in,
            num_take_in              => num_take_in,
            flg_type_in              => flg_type_in,
            interval_in              => interval_in,
            flg_interval_unit_in     => flg_interval_unit_in,
            flg_duration_unit_in     => flg_duration_unit_in,
            duration_in              => duration_in,
            flg_time_in              => flg_time_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            id_order_recurr_plan_in  => id_order_recurr_plan_in,
            flg_prn_in               => flg_prn_in,
            prn_notes_in             => prn_notes_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_cplan_stand_in        IN icnp_cplan_stand_compo.id_cplan_stand%TYPE DEFAULT NULL,
        id_composition_in        IN icnp_cplan_stand_compo.id_composition%TYPE DEFAULT NULL,
        id_composition_parent_in IN icnp_cplan_stand_compo.id_composition_parent%TYPE DEFAULT NULL,
        flg_status_in            IN icnp_cplan_stand_compo.flg_status%TYPE DEFAULT NULL,
        flg_compo_type_in        IN icnp_cplan_stand_compo.flg_compo_type%TYPE DEFAULT NULL,
        flg_freq_in              IN icnp_cplan_stand_compo.flg_freq%TYPE DEFAULT NULL,
        num_take_in              IN icnp_cplan_stand_compo.num_take%TYPE DEFAULT NULL,
        flg_type_in              IN icnp_cplan_stand_compo.flg_type%TYPE DEFAULT NULL,
        interval_in              IN icnp_cplan_stand_compo.interval%TYPE DEFAULT NULL,
        flg_interval_unit_in     IN icnp_cplan_stand_compo.flg_interval_unit%TYPE DEFAULT NULL,
        flg_duration_unit_in     IN icnp_cplan_stand_compo.flg_duration_unit%TYPE DEFAULT NULL,
        duration_in              IN icnp_cplan_stand_compo.duration%TYPE DEFAULT NULL,
        flg_time_in              IN icnp_cplan_stand_compo.flg_time%TYPE DEFAULT NULL,
        create_user_in           IN icnp_cplan_stand_compo.create_user%TYPE DEFAULT NULL,
        create_time_in           IN icnp_cplan_stand_compo.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN icnp_cplan_stand_compo.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN icnp_cplan_stand_compo.update_user%TYPE DEFAULT NULL,
        update_time_in           IN icnp_cplan_stand_compo.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN icnp_cplan_stand_compo.update_institution%TYPE DEFAULT NULL,
        id_order_recurr_plan_in  IN icnp_cplan_stand_compo.id_order_recurr_plan%TYPE DEFAULT NULL,
        flg_prn_in               IN icnp_cplan_stand_compo.flg_prn%TYPE DEFAULT NULL,
        prn_notes_in             IN icnp_cplan_stand_compo.prn_notes%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        l_pky    icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_cplan_stand_compo_in  => l_pky,
            id_cplan_stand_in        => id_cplan_stand_in,
            id_composition_in        => id_composition_in,
            id_composition_parent_in => id_composition_parent_in,
            flg_status_in            => flg_status_in,
            flg_compo_type_in        => flg_compo_type_in,
            flg_freq_in              => flg_freq_in,
            num_take_in              => num_take_in,
            flg_type_in              => flg_type_in,
            interval_in              => interval_in,
            flg_interval_unit_in     => flg_interval_unit_in,
            flg_duration_unit_in     => flg_duration_unit_in,
            duration_in              => duration_in,
            flg_time_in              => flg_time_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            id_order_recurr_plan_in  => id_order_recurr_plan_in,
            flg_prn_in               => flg_prn_in,
            prn_notes_in             => prn_notes_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN icnp_cplan_stand_compo_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO icnp_cplan_stand_compo
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CPLAN_STAND_COMPO _' || indx,
                                                        value_in           => rows_in(indx).id_cplan_stand_compo,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CPLAN_STAND _' || indx,
                                                        value_in           => rows_in(indx).id_cplan_stand,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COMPOSITION _' || indx,
                                                        value_in           => rows_in(indx).id_composition,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COMPOSITION_PARENT _' || indx,
                                                        value_in           => rows_in(indx).id_composition_parent,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_COMPO_TYPE _' || indx,
                                                        value_in           => rows_in(indx).flg_compo_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_FREQ _' || indx,
                                                        value_in           => rows_in(indx).flg_freq,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NUM_TAKE _' || indx,
                                                        value_in           => rows_in(indx).num_take,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TYPE _' || indx,
                                                        value_in           => rows_in(indx).flg_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'INTERVAL _' || indx,
                                                        value_in           => rows_in(indx).interval,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_INTERVAL_UNIT _' || indx,
                                                        value_in           => rows_in(indx).flg_interval_unit,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_DURATION_UNIT _' || indx,
                                                        value_in           => rows_in(indx).flg_duration_unit,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DURATION _' || indx,
                                                        value_in           => rows_in(indx).duration,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TIME _' || indx,
                                                        value_in           => rows_in(indx).flg_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ORDER_RECURR_PLAN _' || indx,
                                                        value_in           => rows_in(indx).id_order_recurr_plan,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_PRN _' || indx,
                                                        value_in           => rows_in(indx).flg_prn,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'ICNP_CPLAN_STAND_COMPO',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN icnp_cplan_stand_compo_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_cplan_stand_compo_in   IN icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE,
        id_cplan_stand_in         IN icnp_cplan_stand_compo.id_cplan_stand%TYPE DEFAULT NULL,
        id_cplan_stand_nin        IN BOOLEAN := TRUE,
        id_composition_in         IN icnp_cplan_stand_compo.id_composition%TYPE DEFAULT NULL,
        id_composition_nin        IN BOOLEAN := TRUE,
        id_composition_parent_in  IN icnp_cplan_stand_compo.id_composition_parent%TYPE DEFAULT NULL,
        id_composition_parent_nin IN BOOLEAN := TRUE,
        flg_status_in             IN icnp_cplan_stand_compo.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        flg_compo_type_in         IN icnp_cplan_stand_compo.flg_compo_type%TYPE DEFAULT NULL,
        flg_compo_type_nin        IN BOOLEAN := TRUE,
        flg_freq_in               IN icnp_cplan_stand_compo.flg_freq%TYPE DEFAULT NULL,
        flg_freq_nin              IN BOOLEAN := TRUE,
        num_take_in               IN icnp_cplan_stand_compo.num_take%TYPE DEFAULT NULL,
        num_take_nin              IN BOOLEAN := TRUE,
        flg_type_in               IN icnp_cplan_stand_compo.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        interval_in               IN icnp_cplan_stand_compo.interval%TYPE DEFAULT NULL,
        interval_nin              IN BOOLEAN := TRUE,
        flg_interval_unit_in      IN icnp_cplan_stand_compo.flg_interval_unit%TYPE DEFAULT NULL,
        flg_interval_unit_nin     IN BOOLEAN := TRUE,
        flg_duration_unit_in      IN icnp_cplan_stand_compo.flg_duration_unit%TYPE DEFAULT NULL,
        flg_duration_unit_nin     IN BOOLEAN := TRUE,
        duration_in               IN icnp_cplan_stand_compo.duration%TYPE DEFAULT NULL,
        duration_nin              IN BOOLEAN := TRUE,
        flg_time_in               IN icnp_cplan_stand_compo.flg_time%TYPE DEFAULT NULL,
        flg_time_nin              IN BOOLEAN := TRUE,
        create_user_in            IN icnp_cplan_stand_compo.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN icnp_cplan_stand_compo.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN icnp_cplan_stand_compo.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN icnp_cplan_stand_compo.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN icnp_cplan_stand_compo.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN icnp_cplan_stand_compo.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        id_order_recurr_plan_in   IN icnp_cplan_stand_compo.id_order_recurr_plan%TYPE DEFAULT NULL,
        id_order_recurr_plan_nin  IN BOOLEAN := TRUE,
        flg_prn_in                IN icnp_cplan_stand_compo.flg_prn%TYPE DEFAULT NULL,
        flg_prn_nin               IN BOOLEAN := TRUE,
        prn_notes_in              IN icnp_cplan_stand_compo.prn_notes%TYPE DEFAULT NULL,
        prn_notes_nin             IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_rows_out                table_varchar;
        l_id_cplan_stand_n        NUMBER(1);
        l_id_composition_n        NUMBER(1);
        l_id_composition_parent_n NUMBER(1);
        l_flg_status_n            NUMBER(1);
        l_flg_compo_type_n        NUMBER(1);
        l_flg_freq_n              NUMBER(1);
        l_num_take_n              NUMBER(1);
        l_flg_type_n              NUMBER(1);
        l_interval_n              NUMBER(1);
        l_flg_interval_unit_n     NUMBER(1);
        l_flg_duration_unit_n     NUMBER(1);
        l_duration_n              NUMBER(1);
        l_flg_time_n              NUMBER(1);
        l_create_user_n           NUMBER(1);
        l_create_time_n           NUMBER(1);
        l_create_institution_n    NUMBER(1);
        l_update_user_n           NUMBER(1);
        l_update_time_n           NUMBER(1);
        l_update_institution_n    NUMBER(1);
        l_id_order_recurr_plan_n  NUMBER(1);
        l_flg_prn_n               NUMBER(1);
        l_prn_notes_n             NUMBER(1);
    BEGIN
    
        l_id_cplan_stand_n        := sys.diutil.bool_to_int(id_cplan_stand_nin);
        l_id_composition_n        := sys.diutil.bool_to_int(id_composition_nin);
        l_id_composition_parent_n := sys.diutil.bool_to_int(id_composition_parent_nin);
        l_flg_status_n            := sys.diutil.bool_to_int(flg_status_nin);
        l_flg_compo_type_n        := sys.diutil.bool_to_int(flg_compo_type_nin);
        l_flg_freq_n              := sys.diutil.bool_to_int(flg_freq_nin);
        l_num_take_n              := sys.diutil.bool_to_int(num_take_nin);
        l_flg_type_n              := sys.diutil.bool_to_int(flg_type_nin);
        l_interval_n              := sys.diutil.bool_to_int(interval_nin);
        l_flg_interval_unit_n     := sys.diutil.bool_to_int(flg_interval_unit_nin);
        l_flg_duration_unit_n     := sys.diutil.bool_to_int(flg_duration_unit_nin);
        l_duration_n              := sys.diutil.bool_to_int(duration_nin);
        l_flg_time_n              := sys.diutil.bool_to_int(flg_time_nin);
        l_create_user_n           := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n           := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    := sys.diutil.bool_to_int(update_institution_nin);
        l_id_order_recurr_plan_n  := sys.diutil.bool_to_int(id_order_recurr_plan_nin);
        l_flg_prn_n               := sys.diutil.bool_to_int(flg_prn_nin);
        l_prn_notes_n             := sys.diutil.bool_to_int(prn_notes_nin);
    
        UPDATE icnp_cplan_stand_compo
           SET id_cplan_stand        = decode(l_id_cplan_stand_n,
                                              0,
                                              id_cplan_stand_in,
                                              nvl(id_cplan_stand_in, id_cplan_stand)),
               id_composition        = decode(l_id_composition_n,
                                              0,
                                              id_composition_in,
                                              nvl(id_composition_in, id_composition)),
               id_composition_parent = decode(l_id_composition_parent_n,
                                              0,
                                              id_composition_parent_in,
                                              nvl(id_composition_parent_in, id_composition_parent)),
               flg_status            = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               flg_compo_type        = decode(l_flg_compo_type_n,
                                              0,
                                              flg_compo_type_in,
                                              nvl(flg_compo_type_in, flg_compo_type)),
               flg_freq              = decode(l_flg_freq_n, 0, flg_freq_in, nvl(flg_freq_in, flg_freq)),
               num_take              = decode(l_num_take_n, 0, num_take_in, nvl(num_take_in, num_take)),
               flg_type              = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               INTERVAL              = decode(l_interval_n, 0, interval_in, nvl(interval_in, INTERVAL)),
               flg_interval_unit     = decode(l_flg_interval_unit_n,
                                              0,
                                              flg_interval_unit_in,
                                              nvl(flg_interval_unit_in, flg_interval_unit)),
               flg_duration_unit     = decode(l_flg_duration_unit_n,
                                              0,
                                              flg_duration_unit_in,
                                              nvl(flg_duration_unit_in, flg_duration_unit)),
               duration              = decode(l_duration_n, 0, duration_in, nvl(duration_in, duration)),
               flg_time              = decode(l_flg_time_n, 0, flg_time_in, nvl(flg_time_in, flg_time)),
               create_user           = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time           = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution    = decode(l_create_institution_n,
                                              0,
                                              create_institution_in,
                                              nvl(create_institution_in, create_institution)),
               update_user           = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time           = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution    = decode(l_update_institution_n,
                                              0,
                                              update_institution_in,
                                              nvl(update_institution_in, update_institution)),
               id_order_recurr_plan  = decode(l_id_order_recurr_plan_n,
                                              0,
                                              id_order_recurr_plan_in,
                                              nvl(id_order_recurr_plan_in, id_order_recurr_plan)),
               flg_prn               = decode(l_flg_prn_n, 0, flg_prn_in, nvl(flg_prn_in, flg_prn)),
               prn_notes             = decode(l_prn_notes_n, 0, prn_notes_in, nvl(prn_notes_in, prn_notes))
         WHERE id_cplan_stand_compo = id_cplan_stand_compo_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'ICSC_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "ICSC_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'ICNP_CPLAN_STAND_COMPO',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CPLAN_STAND',
                                                        value_in           => id_cplan_stand_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COMPOSITION',
                                                        value_in           => id_composition_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COMPOSITION_PARENT',
                                                        value_in           => id_composition_parent_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    IF l_name = 'ICSC_ICN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COMPOSITION',
                                                        value_in           => id_composition_in);
                    END IF;
                    IF l_name = 'ICSC_ICN_PARENT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COMPOSITION_PARENT',
                                                        value_in           => id_composition_parent_in);
                    END IF;
                    IF l_name = 'ICSC_ICS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CPLAN_STAND',
                                                        value_in           => id_cplan_stand_in);
                    END IF;
                    IF l_name = 'ICSC_ORP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ORDER_RECURR_PLAN',
                                                        value_in           => id_order_recurr_plan_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_cplan_stand_compo_in   IN icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE,
        id_cplan_stand_in         IN icnp_cplan_stand_compo.id_cplan_stand%TYPE DEFAULT NULL,
        id_cplan_stand_nin        IN BOOLEAN := TRUE,
        id_composition_in         IN icnp_cplan_stand_compo.id_composition%TYPE DEFAULT NULL,
        id_composition_nin        IN BOOLEAN := TRUE,
        id_composition_parent_in  IN icnp_cplan_stand_compo.id_composition_parent%TYPE DEFAULT NULL,
        id_composition_parent_nin IN BOOLEAN := TRUE,
        flg_status_in             IN icnp_cplan_stand_compo.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        flg_compo_type_in         IN icnp_cplan_stand_compo.flg_compo_type%TYPE DEFAULT NULL,
        flg_compo_type_nin        IN BOOLEAN := TRUE,
        flg_freq_in               IN icnp_cplan_stand_compo.flg_freq%TYPE DEFAULT NULL,
        flg_freq_nin              IN BOOLEAN := TRUE,
        num_take_in               IN icnp_cplan_stand_compo.num_take%TYPE DEFAULT NULL,
        num_take_nin              IN BOOLEAN := TRUE,
        flg_type_in               IN icnp_cplan_stand_compo.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        interval_in               IN icnp_cplan_stand_compo.interval%TYPE DEFAULT NULL,
        interval_nin              IN BOOLEAN := TRUE,
        flg_interval_unit_in      IN icnp_cplan_stand_compo.flg_interval_unit%TYPE DEFAULT NULL,
        flg_interval_unit_nin     IN BOOLEAN := TRUE,
        flg_duration_unit_in      IN icnp_cplan_stand_compo.flg_duration_unit%TYPE DEFAULT NULL,
        flg_duration_unit_nin     IN BOOLEAN := TRUE,
        duration_in               IN icnp_cplan_stand_compo.duration%TYPE DEFAULT NULL,
        duration_nin              IN BOOLEAN := TRUE,
        flg_time_in               IN icnp_cplan_stand_compo.flg_time%TYPE DEFAULT NULL,
        flg_time_nin              IN BOOLEAN := TRUE,
        create_user_in            IN icnp_cplan_stand_compo.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN icnp_cplan_stand_compo.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN icnp_cplan_stand_compo.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN icnp_cplan_stand_compo.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN icnp_cplan_stand_compo.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN icnp_cplan_stand_compo.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        id_order_recurr_plan_in   IN icnp_cplan_stand_compo.id_order_recurr_plan%TYPE DEFAULT NULL,
        id_order_recurr_plan_nin  IN BOOLEAN := TRUE,
        flg_prn_in                IN icnp_cplan_stand_compo.flg_prn%TYPE DEFAULT NULL,
        flg_prn_nin               IN BOOLEAN := TRUE,
        prn_notes_in              IN icnp_cplan_stand_compo.prn_notes%TYPE DEFAULT NULL,
        prn_notes_nin             IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_cplan_stand_compo_in   => id_cplan_stand_compo_in,
            id_cplan_stand_in         => id_cplan_stand_in,
            id_cplan_stand_nin        => id_cplan_stand_nin,
            id_composition_in         => id_composition_in,
            id_composition_nin        => id_composition_nin,
            id_composition_parent_in  => id_composition_parent_in,
            id_composition_parent_nin => id_composition_parent_nin,
            flg_status_in             => flg_status_in,
            flg_status_nin            => flg_status_nin,
            flg_compo_type_in         => flg_compo_type_in,
            flg_compo_type_nin        => flg_compo_type_nin,
            flg_freq_in               => flg_freq_in,
            flg_freq_nin              => flg_freq_nin,
            num_take_in               => num_take_in,
            num_take_nin              => num_take_nin,
            flg_type_in               => flg_type_in,
            flg_type_nin              => flg_type_nin,
            interval_in               => interval_in,
            interval_nin              => interval_nin,
            flg_interval_unit_in      => flg_interval_unit_in,
            flg_interval_unit_nin     => flg_interval_unit_nin,
            flg_duration_unit_in      => flg_duration_unit_in,
            flg_duration_unit_nin     => flg_duration_unit_nin,
            duration_in               => duration_in,
            duration_nin              => duration_nin,
            flg_time_in               => flg_time_in,
            flg_time_nin              => flg_time_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            id_order_recurr_plan_in   => id_order_recurr_plan_in,
            id_order_recurr_plan_nin  => id_order_recurr_plan_nin,
            flg_prn_in                => flg_prn_in,
            flg_prn_nin               => flg_prn_nin,
            prn_notes_in              => prn_notes_in,
            prn_notes_nin             => prn_notes_nin,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_cplan_stand_in         IN icnp_cplan_stand_compo.id_cplan_stand%TYPE DEFAULT NULL,
        id_cplan_stand_nin        IN BOOLEAN := TRUE,
        id_composition_in         IN icnp_cplan_stand_compo.id_composition%TYPE DEFAULT NULL,
        id_composition_nin        IN BOOLEAN := TRUE,
        id_composition_parent_in  IN icnp_cplan_stand_compo.id_composition_parent%TYPE DEFAULT NULL,
        id_composition_parent_nin IN BOOLEAN := TRUE,
        flg_status_in             IN icnp_cplan_stand_compo.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        flg_compo_type_in         IN icnp_cplan_stand_compo.flg_compo_type%TYPE DEFAULT NULL,
        flg_compo_type_nin        IN BOOLEAN := TRUE,
        flg_freq_in               IN icnp_cplan_stand_compo.flg_freq%TYPE DEFAULT NULL,
        flg_freq_nin              IN BOOLEAN := TRUE,
        num_take_in               IN icnp_cplan_stand_compo.num_take%TYPE DEFAULT NULL,
        num_take_nin              IN BOOLEAN := TRUE,
        flg_type_in               IN icnp_cplan_stand_compo.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        interval_in               IN icnp_cplan_stand_compo.interval%TYPE DEFAULT NULL,
        interval_nin              IN BOOLEAN := TRUE,
        flg_interval_unit_in      IN icnp_cplan_stand_compo.flg_interval_unit%TYPE DEFAULT NULL,
        flg_interval_unit_nin     IN BOOLEAN := TRUE,
        flg_duration_unit_in      IN icnp_cplan_stand_compo.flg_duration_unit%TYPE DEFAULT NULL,
        flg_duration_unit_nin     IN BOOLEAN := TRUE,
        duration_in               IN icnp_cplan_stand_compo.duration%TYPE DEFAULT NULL,
        duration_nin              IN BOOLEAN := TRUE,
        flg_time_in               IN icnp_cplan_stand_compo.flg_time%TYPE DEFAULT NULL,
        flg_time_nin              IN BOOLEAN := TRUE,
        create_user_in            IN icnp_cplan_stand_compo.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN icnp_cplan_stand_compo.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN icnp_cplan_stand_compo.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN icnp_cplan_stand_compo.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN icnp_cplan_stand_compo.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN icnp_cplan_stand_compo.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        id_order_recurr_plan_in   IN icnp_cplan_stand_compo.id_order_recurr_plan%TYPE DEFAULT NULL,
        id_order_recurr_plan_nin  IN BOOLEAN := TRUE,
        flg_prn_in                IN icnp_cplan_stand_compo.flg_prn%TYPE DEFAULT NULL,
        flg_prn_nin               IN BOOLEAN := TRUE,
        prn_notes_in              IN icnp_cplan_stand_compo.prn_notes%TYPE DEFAULT NULL,
        prn_notes_nin             IN BOOLEAN := TRUE,
        where_in                  VARCHAR2 DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_sql                     VARCHAR2(32767);
        l_rows_out                table_varchar;
        l_id_cplan_stand_n        NUMBER(1);
        l_id_composition_n        NUMBER(1);
        l_id_composition_parent_n NUMBER(1);
        l_flg_status_n            NUMBER(1);
        l_flg_compo_type_n        NUMBER(1);
        l_flg_freq_n              NUMBER(1);
        l_num_take_n              NUMBER(1);
        l_flg_type_n              NUMBER(1);
        l_interval_n              NUMBER(1);
        l_flg_interval_unit_n     NUMBER(1);
        l_flg_duration_unit_n     NUMBER(1);
        l_duration_n              NUMBER(1);
        l_flg_time_n              NUMBER(1);
        l_create_user_n           NUMBER(1);
        l_create_time_n           NUMBER(1);
        l_create_institution_n    NUMBER(1);
        l_update_user_n           NUMBER(1);
        l_update_time_n           NUMBER(1);
        l_update_institution_n    NUMBER(1);
        l_id_order_recurr_plan_n  NUMBER(1);
        l_flg_prn_n               NUMBER(1);
        l_prn_notes_n             NUMBER(1);
        id_cplan_stand_compo_in   icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE;
    BEGIN
    
        l_id_cplan_stand_n        := sys.diutil.bool_to_int(id_cplan_stand_nin);
        l_id_composition_n        := sys.diutil.bool_to_int(id_composition_nin);
        l_id_composition_parent_n := sys.diutil.bool_to_int(id_composition_parent_nin);
        l_flg_status_n            := sys.diutil.bool_to_int(flg_status_nin);
        l_flg_compo_type_n        := sys.diutil.bool_to_int(flg_compo_type_nin);
        l_flg_freq_n              := sys.diutil.bool_to_int(flg_freq_nin);
        l_num_take_n              := sys.diutil.bool_to_int(num_take_nin);
        l_flg_type_n              := sys.diutil.bool_to_int(flg_type_nin);
        l_interval_n              := sys.diutil.bool_to_int(interval_nin);
        l_flg_interval_unit_n     := sys.diutil.bool_to_int(flg_interval_unit_nin);
        l_flg_duration_unit_n     := sys.diutil.bool_to_int(flg_duration_unit_nin);
        l_duration_n              := sys.diutil.bool_to_int(duration_nin);
        l_flg_time_n              := sys.diutil.bool_to_int(flg_time_nin);
        l_create_user_n           := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n           := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    := sys.diutil.bool_to_int(update_institution_nin);
        l_id_order_recurr_plan_n  := sys.diutil.bool_to_int(id_order_recurr_plan_nin);
        l_flg_prn_n               := sys.diutil.bool_to_int(flg_prn_nin);
        l_prn_notes_n             := sys.diutil.bool_to_int(prn_notes_nin);
    
        l_sql := 'UPDATE ICNP_CPLAN_STAND_COMPO SET ' || ' ID_CPLAN_STAND = decode (' || l_id_cplan_stand_n ||
                 ',0,:id_cplan_stand_in, NVL (:id_cplan_stand_in, ID_CPLAN_STAND)) ' || ',' ||
                 ' ID_COMPOSITION = decode (' || l_id_composition_n ||
                 ',0,:id_composition_in, NVL (:id_composition_in, ID_COMPOSITION)) ' || ',' ||
                 ' ID_COMPOSITION_PARENT = decode (' || l_id_composition_parent_n ||
                 ',0,:id_composition_parent_in, NVL (:id_composition_parent_in, ID_COMPOSITION_PARENT)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' FLG_COMPO_TYPE = decode (' || l_flg_compo_type_n ||
                 ',0,:flg_compo_type_in, NVL (:flg_compo_type_in, FLG_COMPO_TYPE)) ' || ',' || ' FLG_FREQ = decode (' ||
                 l_flg_freq_n || ',0,:flg_freq_in, NVL (:flg_freq_in, FLG_FREQ)) ' || ',' || ' NUM_TAKE = decode (' ||
                 l_num_take_n || ',0,:num_take_in, NVL (:num_take_in, NUM_TAKE)) ' || ',' || ' FLG_TYPE = decode (' ||
                 l_flg_type_n || ',0,:flg_type_in, NVL (:flg_type_in, FLG_TYPE)) ' || ',' || ' INTERVAL = decode (' ||
                 l_interval_n || ',0,:interval_in, NVL (:interval_in, INTERVAL)) ' || ',' ||
                 ' FLG_INTERVAL_UNIT = decode (' || l_flg_interval_unit_n ||
                 ',0,:flg_interval_unit_in, NVL (:flg_interval_unit_in, FLG_INTERVAL_UNIT)) ' || ',' ||
                 ' FLG_DURATION_UNIT = decode (' || l_flg_duration_unit_n ||
                 ',0,:flg_duration_unit_in, NVL (:flg_duration_unit_in, FLG_DURATION_UNIT)) ' || ',' ||
                 ' DURATION = decode (' || l_duration_n || ',0,:duration_in, NVL (:duration_in, DURATION)) ' || ',' ||
                 ' FLG_TIME = decode (' || l_flg_time_n || ',0,:flg_time_in, NVL (:flg_time_in, FLG_TIME)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' ID_ORDER_RECURR_PLAN = decode (' || l_id_order_recurr_plan_n ||
                 ',0,:id_order_recurr_plan_in, NVL (:id_order_recurr_plan_in, ID_ORDER_RECURR_PLAN)) ' || ',' ||
                 ' FLG_PRN = decode (' || l_flg_prn_n || ',0,:flg_prn_in, NVL (:flg_prn_in, FLG_PRN)) ' || ',' ||
                 ' PRN_NOTES = decode (' || l_prn_notes_n || ',0,:prn_notes_in, NVL (:prn_notes_in, PRN_NOTES)) ' ||
                 ' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_cplan_stand_in, id_composition_in, id_composition_parent_in, flg_status_in, flg_compo_type_in, flg_freq_in, num_take_in, flg_type_in, interval_in, flg_interval_unit_in, flg_duration_unit_in, duration_in, flg_time_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_order_recurr_plan_in, flg_prn_in, prn_notes_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'ICSC_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "ICSC_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'ICNP_CPLAN_STAND_COMPO',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CPLAN_STAND',
                                                        value_in           => id_cplan_stand_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COMPOSITION',
                                                        value_in           => id_composition_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_COMPOSITION_PARENT',
                                                        value_in           => id_composition_parent_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    IF l_name = 'ICSC_ICN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COMPOSITION',
                                                        value_in           => id_composition_in);
                    END IF;
                    IF l_name = 'ICSC_ICN_PARENT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_COMPOSITION_PARENT',
                                                        value_in           => id_composition_parent_in);
                    END IF;
                    IF l_name = 'ICSC_ICS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CPLAN_STAND',
                                                        value_in           => id_cplan_stand_in);
                    END IF;
                    IF l_name = 'ICSC_ORP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ORDER_RECURR_PLAN',
                                                        value_in           => id_order_recurr_plan_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_cplan_stand_in         IN icnp_cplan_stand_compo.id_cplan_stand%TYPE DEFAULT NULL,
        id_cplan_stand_nin        IN BOOLEAN := TRUE,
        id_composition_in         IN icnp_cplan_stand_compo.id_composition%TYPE DEFAULT NULL,
        id_composition_nin        IN BOOLEAN := TRUE,
        id_composition_parent_in  IN icnp_cplan_stand_compo.id_composition_parent%TYPE DEFAULT NULL,
        id_composition_parent_nin IN BOOLEAN := TRUE,
        flg_status_in             IN icnp_cplan_stand_compo.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        flg_compo_type_in         IN icnp_cplan_stand_compo.flg_compo_type%TYPE DEFAULT NULL,
        flg_compo_type_nin        IN BOOLEAN := TRUE,
        flg_freq_in               IN icnp_cplan_stand_compo.flg_freq%TYPE DEFAULT NULL,
        flg_freq_nin              IN BOOLEAN := TRUE,
        num_take_in               IN icnp_cplan_stand_compo.num_take%TYPE DEFAULT NULL,
        num_take_nin              IN BOOLEAN := TRUE,
        flg_type_in               IN icnp_cplan_stand_compo.flg_type%TYPE DEFAULT NULL,
        flg_type_nin              IN BOOLEAN := TRUE,
        interval_in               IN icnp_cplan_stand_compo.interval%TYPE DEFAULT NULL,
        interval_nin              IN BOOLEAN := TRUE,
        flg_interval_unit_in      IN icnp_cplan_stand_compo.flg_interval_unit%TYPE DEFAULT NULL,
        flg_interval_unit_nin     IN BOOLEAN := TRUE,
        flg_duration_unit_in      IN icnp_cplan_stand_compo.flg_duration_unit%TYPE DEFAULT NULL,
        flg_duration_unit_nin     IN BOOLEAN := TRUE,
        duration_in               IN icnp_cplan_stand_compo.duration%TYPE DEFAULT NULL,
        duration_nin              IN BOOLEAN := TRUE,
        flg_time_in               IN icnp_cplan_stand_compo.flg_time%TYPE DEFAULT NULL,
        flg_time_nin              IN BOOLEAN := TRUE,
        create_user_in            IN icnp_cplan_stand_compo.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN icnp_cplan_stand_compo.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN icnp_cplan_stand_compo.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN icnp_cplan_stand_compo.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN icnp_cplan_stand_compo.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN icnp_cplan_stand_compo.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        id_order_recurr_plan_in   IN icnp_cplan_stand_compo.id_order_recurr_plan%TYPE DEFAULT NULL,
        id_order_recurr_plan_nin  IN BOOLEAN := TRUE,
        flg_prn_in                IN icnp_cplan_stand_compo.flg_prn%TYPE DEFAULT NULL,
        flg_prn_nin               IN BOOLEAN := TRUE,
        prn_notes_in              IN icnp_cplan_stand_compo.prn_notes%TYPE DEFAULT NULL,
        prn_notes_nin             IN BOOLEAN := TRUE,
        where_in                  VARCHAR2 DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_cplan_stand_in         => id_cplan_stand_in,
            id_cplan_stand_nin        => id_cplan_stand_nin,
            id_composition_in         => id_composition_in,
            id_composition_nin        => id_composition_nin,
            id_composition_parent_in  => id_composition_parent_in,
            id_composition_parent_nin => id_composition_parent_nin,
            flg_status_in             => flg_status_in,
            flg_status_nin            => flg_status_nin,
            flg_compo_type_in         => flg_compo_type_in,
            flg_compo_type_nin        => flg_compo_type_nin,
            flg_freq_in               => flg_freq_in,
            flg_freq_nin              => flg_freq_nin,
            num_take_in               => num_take_in,
            num_take_nin              => num_take_nin,
            flg_type_in               => flg_type_in,
            flg_type_nin              => flg_type_nin,
            interval_in               => interval_in,
            interval_nin              => interval_nin,
            flg_interval_unit_in      => flg_interval_unit_in,
            flg_interval_unit_nin     => flg_interval_unit_nin,
            flg_duration_unit_in      => flg_duration_unit_in,
            flg_duration_unit_nin     => flg_duration_unit_nin,
            duration_in               => duration_in,
            duration_nin              => duration_nin,
            flg_time_in               => flg_time_in,
            flg_time_nin              => flg_time_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            id_order_recurr_plan_in   => id_order_recurr_plan_in,
            id_order_recurr_plan_nin  => id_order_recurr_plan_nin,
            flg_prn_in                => flg_prn_in,
            flg_prn_nin               => flg_prn_nin,
            prn_notes_in              => prn_notes_in,
            prn_notes_nin             => prn_notes_nin,
            where_in                  => where_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN icnp_cplan_stand_compo%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_cplan_stand_compo_in  => rec_in.id_cplan_stand_compo,
            id_cplan_stand_in        => rec_in.id_cplan_stand,
            id_composition_in        => rec_in.id_composition,
            id_composition_parent_in => rec_in.id_composition_parent,
            flg_status_in            => rec_in.flg_status,
            flg_compo_type_in        => rec_in.flg_compo_type,
            flg_freq_in              => rec_in.flg_freq,
            num_take_in              => rec_in.num_take,
            flg_type_in              => rec_in.flg_type,
            interval_in              => rec_in.interval,
            flg_interval_unit_in     => rec_in.flg_interval_unit,
            flg_duration_unit_in     => rec_in.flg_duration_unit,
            duration_in              => rec_in.duration,
            flg_time_in              => rec_in.flg_time,
            create_user_in           => rec_in.create_user,
            create_time_in           => rec_in.create_time,
            create_institution_in    => rec_in.create_institution,
            update_user_in           => rec_in.update_user,
            update_time_in           => rec_in.update_time,
            update_institution_in    => rec_in.update_institution,
            id_order_recurr_plan_in  => rec_in.id_order_recurr_plan,
            flg_prn_in               => rec_in.flg_prn,
            prn_notes_in             => rec_in.prn_notes
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN icnp_cplan_stand_compo%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_cplan_stand_compo_in  => rec_in.id_cplan_stand_compo,
            id_cplan_stand_in        => rec_in.id_cplan_stand,
            id_composition_in        => rec_in.id_composition,
            id_composition_parent_in => rec_in.id_composition_parent,
            flg_status_in            => rec_in.flg_status,
            flg_compo_type_in        => rec_in.flg_compo_type,
            flg_freq_in              => rec_in.flg_freq,
            num_take_in              => rec_in.num_take,
            flg_type_in              => rec_in.flg_type,
            interval_in              => rec_in.interval,
            flg_interval_unit_in     => rec_in.flg_interval_unit,
            flg_duration_unit_in     => rec_in.flg_duration_unit,
            duration_in              => rec_in.duration,
            flg_time_in              => rec_in.flg_time,
            create_user_in           => rec_in.create_user,
            create_time_in           => rec_in.create_time,
            create_institution_in    => rec_in.create_institution,
            update_user_in           => rec_in.update_user,
            update_time_in           => rec_in.update_time,
            update_institution_in    => rec_in.update_institution,
            id_order_recurr_plan_in  => rec_in.id_order_recurr_plan,
            flg_prn_in               => rec_in.flg_prn,
            prn_notes_in             => rec_in.prn_notes
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_cplan_stand_compo_in  IN icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE,
        id_cplan_stand_in        IN icnp_cplan_stand_compo.id_cplan_stand%TYPE DEFAULT NULL,
        id_composition_in        IN icnp_cplan_stand_compo.id_composition%TYPE DEFAULT NULL,
        id_composition_parent_in IN icnp_cplan_stand_compo.id_composition_parent%TYPE DEFAULT NULL,
        flg_status_in            IN icnp_cplan_stand_compo.flg_status%TYPE DEFAULT NULL,
        flg_compo_type_in        IN icnp_cplan_stand_compo.flg_compo_type%TYPE DEFAULT NULL,
        flg_freq_in              IN icnp_cplan_stand_compo.flg_freq%TYPE DEFAULT NULL,
        num_take_in              IN icnp_cplan_stand_compo.num_take%TYPE DEFAULT NULL,
        flg_type_in              IN icnp_cplan_stand_compo.flg_type%TYPE DEFAULT NULL,
        interval_in              IN icnp_cplan_stand_compo.interval%TYPE DEFAULT NULL,
        flg_interval_unit_in     IN icnp_cplan_stand_compo.flg_interval_unit%TYPE DEFAULT NULL,
        flg_duration_unit_in     IN icnp_cplan_stand_compo.flg_duration_unit%TYPE DEFAULT NULL,
        duration_in              IN icnp_cplan_stand_compo.duration%TYPE DEFAULT NULL,
        flg_time_in              IN icnp_cplan_stand_compo.flg_time%TYPE DEFAULT NULL,
        create_user_in           IN icnp_cplan_stand_compo.create_user%TYPE DEFAULT NULL,
        create_time_in           IN icnp_cplan_stand_compo.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN icnp_cplan_stand_compo.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN icnp_cplan_stand_compo.update_user%TYPE DEFAULT NULL,
        update_time_in           IN icnp_cplan_stand_compo.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN icnp_cplan_stand_compo.update_institution%TYPE DEFAULT NULL,
        id_order_recurr_plan_in  IN icnp_cplan_stand_compo.id_order_recurr_plan%TYPE DEFAULT NULL,
        flg_prn_in               IN icnp_cplan_stand_compo.flg_prn%TYPE DEFAULT NULL,
        prn_notes_in             IN icnp_cplan_stand_compo.prn_notes%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        upd(id_cplan_stand_compo_in  => id_cplan_stand_compo_in,
            id_cplan_stand_in        => id_cplan_stand_in,
            id_composition_in        => id_composition_in,
            id_composition_parent_in => id_composition_parent_in,
            flg_status_in            => flg_status_in,
            flg_compo_type_in        => flg_compo_type_in,
            flg_freq_in              => flg_freq_in,
            num_take_in              => num_take_in,
            flg_type_in              => flg_type_in,
            interval_in              => interval_in,
            flg_interval_unit_in     => flg_interval_unit_in,
            flg_duration_unit_in     => flg_duration_unit_in,
            duration_in              => duration_in,
            flg_time_in              => flg_time_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            id_order_recurr_plan_in  => id_order_recurr_plan_in,
            flg_prn_in               => flg_prn_in,
            prn_notes_in             => prn_notes_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_cplan_stand_compo_in  => id_cplan_stand_compo_in,
                id_cplan_stand_in        => id_cplan_stand_in,
                id_composition_in        => id_composition_in,
                id_composition_parent_in => id_composition_parent_in,
                flg_status_in            => flg_status_in,
                flg_compo_type_in        => flg_compo_type_in,
                flg_freq_in              => flg_freq_in,
                num_take_in              => num_take_in,
                flg_type_in              => flg_type_in,
                interval_in              => interval_in,
                flg_interval_unit_in     => flg_interval_unit_in,
                flg_duration_unit_in     => flg_duration_unit_in,
                duration_in              => duration_in,
                flg_time_in              => flg_time_in,
                create_user_in           => create_user_in,
                create_time_in           => create_time_in,
                create_institution_in    => create_institution_in,
                update_user_in           => update_user_in,
                update_time_in           => update_time_in,
                update_institution_in    => update_institution_in,
                id_order_recurr_plan_in  => id_order_recurr_plan_in,
                flg_prn_in               => flg_prn_in,
                prn_notes_in             => prn_notes_in,
                handle_error_in          => handle_error_in,
                rows_out                 => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_cplan_stand_compo_in  IN icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE,
        id_cplan_stand_in        IN icnp_cplan_stand_compo.id_cplan_stand%TYPE DEFAULT NULL,
        id_composition_in        IN icnp_cplan_stand_compo.id_composition%TYPE DEFAULT NULL,
        id_composition_parent_in IN icnp_cplan_stand_compo.id_composition_parent%TYPE DEFAULT NULL,
        flg_status_in            IN icnp_cplan_stand_compo.flg_status%TYPE DEFAULT NULL,
        flg_compo_type_in        IN icnp_cplan_stand_compo.flg_compo_type%TYPE DEFAULT NULL,
        flg_freq_in              IN icnp_cplan_stand_compo.flg_freq%TYPE DEFAULT NULL,
        num_take_in              IN icnp_cplan_stand_compo.num_take%TYPE DEFAULT NULL,
        flg_type_in              IN icnp_cplan_stand_compo.flg_type%TYPE DEFAULT NULL,
        interval_in              IN icnp_cplan_stand_compo.interval%TYPE DEFAULT NULL,
        flg_interval_unit_in     IN icnp_cplan_stand_compo.flg_interval_unit%TYPE DEFAULT NULL,
        flg_duration_unit_in     IN icnp_cplan_stand_compo.flg_duration_unit%TYPE DEFAULT NULL,
        duration_in              IN icnp_cplan_stand_compo.duration%TYPE DEFAULT NULL,
        flg_time_in              IN icnp_cplan_stand_compo.flg_time%TYPE DEFAULT NULL,
        create_user_in           IN icnp_cplan_stand_compo.create_user%TYPE DEFAULT NULL,
        create_time_in           IN icnp_cplan_stand_compo.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN icnp_cplan_stand_compo.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN icnp_cplan_stand_compo.update_user%TYPE DEFAULT NULL,
        update_time_in           IN icnp_cplan_stand_compo.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN icnp_cplan_stand_compo.update_institution%TYPE DEFAULT NULL,
        id_order_recurr_plan_in  IN icnp_cplan_stand_compo.id_order_recurr_plan%TYPE DEFAULT NULL,
        flg_prn_in               IN icnp_cplan_stand_compo.flg_prn%TYPE DEFAULT NULL,
        prn_notes_in             IN icnp_cplan_stand_compo.prn_notes%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_cplan_stand_compo_in,
                id_cplan_stand_in,
                id_composition_in,
                id_composition_parent_in,
                flg_status_in,
                flg_compo_type_in,
                flg_freq_in,
                num_take_in,
                flg_type_in,
                interval_in,
                flg_interval_unit_in,
                flg_duration_unit_in,
                duration_in,
                flg_time_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_order_recurr_plan_in,
                flg_prn_in,
                prn_notes_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN icnp_cplan_stand_compo_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_cplan_stand_compo  id_cplan_stand_compo_cc;
        l_id_cplan_stand        id_cplan_stand_cc;
        l_id_composition        id_composition_cc;
        l_id_composition_parent id_composition_parent_cc;
        l_flg_status            flg_status_cc;
        l_flg_compo_type        flg_compo_type_cc;
        l_flg_freq              flg_freq_cc;
        l_num_take              num_take_cc;
        l_flg_type              flg_type_cc;
        l_interval              interval_cc;
        l_flg_interval_unit     flg_interval_unit_cc;
        l_flg_duration_unit     flg_duration_unit_cc;
        l_duration              duration_cc;
        l_flg_time              flg_time_cc;
        l_create_user           create_user_cc;
        l_create_time           create_time_cc;
        l_create_institution    create_institution_cc;
        l_update_user           update_user_cc;
        l_update_time           update_time_cc;
        l_update_institution    update_institution_cc;
        l_id_order_recurr_plan  id_order_recurr_plan_cc;
        l_flg_prn               flg_prn_cc;
        l_prn_notes             prn_notes_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_cplan_stand_compo(i) := col_in(i).id_cplan_stand_compo;
            l_id_cplan_stand(i) := col_in(i).id_cplan_stand;
            l_id_composition(i) := col_in(i).id_composition;
            l_id_composition_parent(i) := col_in(i).id_composition_parent;
            l_flg_status(i) := col_in(i).flg_status;
            l_flg_compo_type(i) := col_in(i).flg_compo_type;
            l_flg_freq(i) := col_in(i).flg_freq;
            l_num_take(i) := col_in(i).num_take;
            l_flg_type(i) := col_in(i).flg_type;
            l_interval(i) := col_in(i).interval;
            l_flg_interval_unit(i) := col_in(i).flg_interval_unit;
            l_flg_duration_unit(i) := col_in(i).flg_duration_unit;
            l_duration(i) := col_in(i).duration;
            l_flg_time(i) := col_in(i).flg_time;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_order_recurr_plan(i) := col_in(i).id_order_recurr_plan;
            l_flg_prn(i) := col_in(i).flg_prn;
            l_prn_notes(i) := col_in(i).prn_notes;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE icnp_cplan_stand_compo
                   SET id_cplan_stand        = nvl(l_id_cplan_stand(i), id_cplan_stand),
                       id_composition        = nvl(l_id_composition(i), id_composition),
                       id_composition_parent = nvl(l_id_composition_parent(i), id_composition_parent),
                       flg_status            = nvl(l_flg_status(i), flg_status),
                       flg_compo_type        = nvl(l_flg_compo_type(i), flg_compo_type),
                       flg_freq              = nvl(l_flg_freq(i), flg_freq),
                       num_take              = nvl(l_num_take(i), num_take),
                       flg_type              = nvl(l_flg_type(i), flg_type),
                       INTERVAL              = nvl(l_interval(i), INTERVAL),
                       flg_interval_unit     = nvl(l_flg_interval_unit(i), flg_interval_unit),
                       flg_duration_unit     = nvl(l_flg_duration_unit(i), flg_duration_unit),
                       duration              = nvl(l_duration(i), duration),
                       flg_time              = nvl(l_flg_time(i), flg_time),
                       create_user           = nvl(l_create_user(i), create_user),
                       create_time           = nvl(l_create_time(i), create_time),
                       create_institution    = nvl(l_create_institution(i), create_institution),
                       update_user           = nvl(l_update_user(i), update_user),
                       update_time           = nvl(l_update_time(i), update_time),
                       update_institution    = nvl(l_update_institution(i), update_institution),
                       id_order_recurr_plan  = nvl(l_id_order_recurr_plan(i), id_order_recurr_plan),
                       flg_prn               = nvl(l_flg_prn(i), flg_prn),
                       prn_notes             = nvl(l_prn_notes(i), prn_notes)
                 WHERE id_cplan_stand_compo = l_id_cplan_stand_compo(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE icnp_cplan_stand_compo
                   SET id_cplan_stand        = l_id_cplan_stand(i),
                       id_composition        = l_id_composition(i),
                       id_composition_parent = l_id_composition_parent(i),
                       flg_status            = l_flg_status(i),
                       flg_compo_type        = l_flg_compo_type(i),
                       flg_freq              = l_flg_freq(i),
                       num_take              = l_num_take(i),
                       flg_type              = l_flg_type(i),
                       INTERVAL              = l_interval(i),
                       flg_interval_unit     = l_flg_interval_unit(i),
                       flg_duration_unit     = l_flg_duration_unit(i),
                       duration              = l_duration(i),
                       flg_time              = l_flg_time(i),
                       create_user           = l_create_user(i),
                       create_time           = l_create_time(i),
                       create_institution    = l_create_institution(i),
                       update_user           = l_update_user(i),
                       update_time           = l_update_time(i),
                       update_institution    = l_update_institution(i),
                       id_order_recurr_plan  = l_id_order_recurr_plan(i),
                       flg_prn               = l_flg_prn(i),
                       prn_notes             = l_prn_notes(i)
                 WHERE id_cplan_stand_compo = l_id_cplan_stand_compo(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN icnp_cplan_stand_compo_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE ICNP_CPLAN_STAND_COMPO
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE ICNP_CPLAN_STAND_COMPO
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE ICNP_CPLAN_STAND_COMPO set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE ICNP_CPLAN_STAND_COMPO set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_cplan_stand_compo_in IN icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_cplan_stand_compo
         WHERE id_cplan_stand_compo = id_cplan_stand_compo_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_cplan_stand_compo_in IN icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_cplan_stand_compo_in => id_cplan_stand_compo_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_CPLAN_STAND_COMPO
    PROCEDURE del_id_cplan_stand_compo
    (
        id_cplan_stand_compo_in IN icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_cplan_stand_compo
         WHERE id_cplan_stand_compo = id_cplan_stand_compo_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_cplan_stand_compo;

    -- Delete all rows for primary key column ID_CPLAN_STAND_COMPO
    PROCEDURE del_id_cplan_stand_compo
    (
        id_cplan_stand_compo_in IN icnp_cplan_stand_compo.id_cplan_stand_compo%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_cplan_stand_compo(id_cplan_stand_compo_in => id_cplan_stand_compo_in,
                                 handle_error_in         => handle_error_in,
                                 rows_out                => rows_out);
    END del_id_cplan_stand_compo;

    -- Delete for unique value of ICSC_UK
    PROCEDURE del_icsc_uk
    (
        id_cplan_stand_in        IN icnp_cplan_stand_compo.id_cplan_stand%TYPE,
        id_composition_in        IN icnp_cplan_stand_compo.id_composition%TYPE,
        id_composition_parent_in IN icnp_cplan_stand_compo.id_composition_parent%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_cplan_stand_compo
         WHERE id_cplan_stand = id_cplan_stand_in
           AND id_composition = id_composition_in
           AND id_composition_parent = id_composition_parent_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_icsc_uk;

    -- Delete for unique value of ICSC_UK
    PROCEDURE del_icsc_uk
    (
        id_cplan_stand_in        IN icnp_cplan_stand_compo.id_cplan_stand%TYPE,
        id_composition_in        IN icnp_cplan_stand_compo.id_composition%TYPE,
        id_composition_parent_in IN icnp_cplan_stand_compo.id_composition_parent%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_icsc_uk(id_cplan_stand_in        => id_cplan_stand_in,
                    id_composition_in        => id_composition_in,
                    id_composition_parent_in => id_composition_parent_in,
                    handle_error_in          => handle_error_in,
                    rows_out                 => rows_out);
    END del_icsc_uk;

    PROCEDURE del_icsc_icn_fk
    (
        id_composition_in IN icnp_cplan_stand_compo.id_composition%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_cplan_stand_compo
         WHERE id_composition = del_icsc_icn_fk.id_composition_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_icsc_icn_fk;

    PROCEDURE del_icsc_icn_fk
    (
        id_composition_in IN icnp_cplan_stand_compo.id_composition%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_icsc_icn_fk(id_composition_in => id_composition_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_icsc_icn_fk;

    PROCEDURE del_icsc_icn_parent_fk
    (
        id_composition_parent_in IN icnp_cplan_stand_compo.id_composition_parent%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_cplan_stand_compo
         WHERE id_composition_parent = del_icsc_icn_parent_fk.id_composition_parent_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_icsc_icn_parent_fk;

    PROCEDURE del_icsc_icn_parent_fk
    (
        id_composition_parent_in IN icnp_cplan_stand_compo.id_composition_parent%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_icsc_icn_parent_fk(id_composition_parent_in => id_composition_parent_in,
                               handle_error_in          => handle_error_in,
                               rows_out                 => rows_out);
    END del_icsc_icn_parent_fk;

    PROCEDURE del_icsc_ics_fk
    (
        id_cplan_stand_in IN icnp_cplan_stand_compo.id_cplan_stand%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_cplan_stand_compo
         WHERE id_cplan_stand = del_icsc_ics_fk.id_cplan_stand_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_icsc_ics_fk;

    PROCEDURE del_icsc_ics_fk
    (
        id_cplan_stand_in IN icnp_cplan_stand_compo.id_cplan_stand%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_icsc_ics_fk(id_cplan_stand_in => id_cplan_stand_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_icsc_ics_fk;

    PROCEDURE del_icsc_orp_fk
    (
        id_order_recurr_plan_in IN icnp_cplan_stand_compo.id_order_recurr_plan%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM icnp_cplan_stand_compo
         WHERE id_order_recurr_plan = del_icsc_orp_fk.id_order_recurr_plan_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_icsc_orp_fk;

    PROCEDURE del_icsc_orp_fk
    (
        id_order_recurr_plan_in IN icnp_cplan_stand_compo.id_order_recurr_plan%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_icsc_orp_fk(id_order_recurr_plan_in => id_order_recurr_plan_in,
                        handle_error_in         => handle_error_in,
                        rows_out                => rows_out);
    END del_icsc_orp_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM ICNP_CPLAN_STAND_COMPO';
        ELSE
            RETURN 'DELETE FROM ICNP_CPLAN_STAND_COMPO WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ICNP_CPLAN_STAND_COMPO');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ICNP_CPLAN_STAND_COMPO');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(icnp_cplan_stand_compo_inout IN OUT icnp_cplan_stand_compo%ROWTYPE) IS
    BEGIN
        icnp_cplan_stand_compo_inout.id_cplan_stand_compo  := NULL;
        icnp_cplan_stand_compo_inout.id_cplan_stand        := NULL;
        icnp_cplan_stand_compo_inout.id_composition        := NULL;
        icnp_cplan_stand_compo_inout.id_composition_parent := NULL;
        icnp_cplan_stand_compo_inout.flg_status            := NULL;
        icnp_cplan_stand_compo_inout.flg_compo_type        := NULL;
        icnp_cplan_stand_compo_inout.flg_freq              := NULL;
        icnp_cplan_stand_compo_inout.num_take              := NULL;
        icnp_cplan_stand_compo_inout.flg_type              := NULL;
        icnp_cplan_stand_compo_inout.interval              := NULL;
        icnp_cplan_stand_compo_inout.flg_interval_unit     := NULL;
        icnp_cplan_stand_compo_inout.flg_duration_unit     := NULL;
        icnp_cplan_stand_compo_inout.duration              := NULL;
        icnp_cplan_stand_compo_inout.flg_time              := NULL;
        icnp_cplan_stand_compo_inout.create_user           := NULL;
        icnp_cplan_stand_compo_inout.create_time           := NULL;
        icnp_cplan_stand_compo_inout.create_institution    := NULL;
        icnp_cplan_stand_compo_inout.update_user           := NULL;
        icnp_cplan_stand_compo_inout.update_time           := NULL;
        icnp_cplan_stand_compo_inout.update_institution    := NULL;
        icnp_cplan_stand_compo_inout.id_order_recurr_plan  := NULL;
        icnp_cplan_stand_compo_inout.flg_prn               := NULL;
        icnp_cplan_stand_compo_inout.prn_notes             := NULL;
    END initrec;

    FUNCTION initrec RETURN icnp_cplan_stand_compo%ROWTYPE IS
        l_icnp_cplan_stand_compo icnp_cplan_stand_compo%ROWTYPE;
    BEGIN
        RETURN l_icnp_cplan_stand_compo;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN icnp_cplan_stand_compo_tc IS
        data icnp_cplan_stand_compo_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM icnp_cplan_stand_compo
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN icnp_cplan_stand_compo_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data icnp_cplan_stand_compo_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_icnp_cplan_stand_compo;
/
