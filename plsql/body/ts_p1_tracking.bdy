/*-- Last Change Revision: $Rev: 2028287 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:52 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_p1_tracking
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: December 16, 2013 15:57:44
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_tracking_in         IN p1_tracking.id_tracking%TYPE,
        ext_req_status_in      IN p1_tracking.ext_req_status%TYPE DEFAULT NULL,
        id_external_request_in IN p1_tracking.id_external_request%TYPE DEFAULT NULL,
        id_institution_in      IN p1_tracking.id_institution%TYPE DEFAULT NULL,
        id_professional_in     IN p1_tracking.id_professional%TYPE DEFAULT NULL,
        flg_type_in            IN p1_tracking.flg_type%TYPE DEFAULT NULL,
        id_prof_dest_in        IN p1_tracking.id_prof_dest%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN p1_tracking.id_dep_clin_serv%TYPE DEFAULT NULL,
        round_id_in            IN p1_tracking.round_id%TYPE DEFAULT NULL,
        reason_code_in         IN p1_tracking.reason_code%TYPE DEFAULT NULL,
        flg_reschedule_in      IN p1_tracking.flg_reschedule%TYPE DEFAULT NULL,
        flg_subtype_in         IN p1_tracking.flg_subtype%TYPE DEFAULT NULL,
        decision_urg_level_in  IN p1_tracking.decision_urg_level%TYPE DEFAULT NULL,
        dt_tracking_tstz_in    IN p1_tracking.dt_tracking_tstz%TYPE DEFAULT NULL,
        id_reason_code_in      IN p1_tracking.id_reason_code%TYPE DEFAULT NULL,
        id_schedule_in         IN p1_tracking.id_schedule%TYPE DEFAULT NULL,
        id_inst_dest_in        IN p1_tracking.id_inst_dest%TYPE DEFAULT NULL,
        create_user_in         IN p1_tracking.create_user%TYPE DEFAULT NULL,
        create_time_in         IN p1_tracking.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN p1_tracking.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN p1_tracking.update_user%TYPE DEFAULT NULL,
        update_time_in         IN p1_tracking.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN p1_tracking.update_institution%TYPE DEFAULT NULL,
        id_workflow_action_in  IN p1_tracking.id_workflow_action%TYPE DEFAULT NULL,
        id_speciality_in       IN p1_tracking.id_speciality%TYPE DEFAULT NULL,
        dt_create_in           IN p1_tracking.dt_create%TYPE DEFAULT NULL,
        id_workflow_in         IN p1_tracking.id_workflow%TYPE DEFAULT NULL,
        id_inst_orig_in        IN p1_tracking.id_inst_orig%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO p1_tracking
            (id_tracking,
             ext_req_status,
             id_external_request,
             id_institution,
             id_professional,
             flg_type,
             id_prof_dest,
             id_dep_clin_serv,
             round_id,
             reason_code,
             flg_reschedule,
             flg_subtype,
             decision_urg_level,
             dt_tracking_tstz,
             id_reason_code,
             id_schedule,
             id_inst_dest,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_workflow_action,
             id_speciality,
             dt_create,
             id_workflow,
             id_inst_orig)
        VALUES
            (id_tracking_in,
             ext_req_status_in,
             id_external_request_in,
             id_institution_in,
             id_professional_in,
             flg_type_in,
             id_prof_dest_in,
             id_dep_clin_serv_in,
             round_id_in,
             reason_code_in,
             flg_reschedule_in,
             flg_subtype_in,
             decision_urg_level_in,
             dt_tracking_tstz_in,
             id_reason_code_in,
             id_schedule_in,
             id_inst_dest_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_workflow_action_in,
             id_speciality_in,
             dt_create_in,
             id_workflow_in,
             id_inst_orig_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'P1_TRACKING');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    IF l_name = 'ERT_DCS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV',
                                                        value_in           => id_dep_clin_serv_in);
                    END IF;
                    IF l_name = 'ERT_ERTX_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXTERNAL_REQUEST',
                                                        value_in           => id_external_request_in);
                    END IF;
                    IF l_name = 'ERT_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'ERT_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'ERT_PROF_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_DEST',
                                                        value_in           => id_prof_dest_in);
                    END IF;
                    IF l_name = 'PTG_INN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INST_DEST',
                                                        value_in           => id_inst_dest_in);
                    END IF;
                    IF l_name = 'PTG_PRE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_REASON_CODE',
                                                        value_in           => id_reason_code_in);
                    END IF;
                    IF l_name = 'PTG_PSY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SPECIALITY',
                                                        value_in           => id_speciality_in);
                    END IF;
                    IF l_name = 'PTG_SCE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE',
                                                        value_in           => id_schedule_in);
                    END IF;
                    IF l_name = 'PTG_WWN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WORKFLOW_ACTION',
                                                        value_in           => id_workflow_action_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_tracking_in         IN p1_tracking.id_tracking%TYPE,
        ext_req_status_in      IN p1_tracking.ext_req_status%TYPE DEFAULT NULL,
        id_external_request_in IN p1_tracking.id_external_request%TYPE DEFAULT NULL,
        id_institution_in      IN p1_tracking.id_institution%TYPE DEFAULT NULL,
        id_professional_in     IN p1_tracking.id_professional%TYPE DEFAULT NULL,
        flg_type_in            IN p1_tracking.flg_type%TYPE DEFAULT NULL,
        id_prof_dest_in        IN p1_tracking.id_prof_dest%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN p1_tracking.id_dep_clin_serv%TYPE DEFAULT NULL,
        round_id_in            IN p1_tracking.round_id%TYPE DEFAULT NULL,
        reason_code_in         IN p1_tracking.reason_code%TYPE DEFAULT NULL,
        flg_reschedule_in      IN p1_tracking.flg_reschedule%TYPE DEFAULT NULL,
        flg_subtype_in         IN p1_tracking.flg_subtype%TYPE DEFAULT NULL,
        decision_urg_level_in  IN p1_tracking.decision_urg_level%TYPE DEFAULT NULL,
        dt_tracking_tstz_in    IN p1_tracking.dt_tracking_tstz%TYPE DEFAULT NULL,
        id_reason_code_in      IN p1_tracking.id_reason_code%TYPE DEFAULT NULL,
        id_schedule_in         IN p1_tracking.id_schedule%TYPE DEFAULT NULL,
        id_inst_dest_in        IN p1_tracking.id_inst_dest%TYPE DEFAULT NULL,
        create_user_in         IN p1_tracking.create_user%TYPE DEFAULT NULL,
        create_time_in         IN p1_tracking.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN p1_tracking.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN p1_tracking.update_user%TYPE DEFAULT NULL,
        update_time_in         IN p1_tracking.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN p1_tracking.update_institution%TYPE DEFAULT NULL,
        id_workflow_action_in  IN p1_tracking.id_workflow_action%TYPE DEFAULT NULL,
        id_speciality_in       IN p1_tracking.id_speciality%TYPE DEFAULT NULL,
        dt_create_in           IN p1_tracking.dt_create%TYPE DEFAULT NULL,
        id_workflow_in         IN p1_tracking.id_workflow%TYPE DEFAULT NULL,
        id_inst_orig_in        IN p1_tracking.id_inst_orig%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_tracking_in         => id_tracking_in,
            ext_req_status_in      => ext_req_status_in,
            id_external_request_in => id_external_request_in,
            id_institution_in      => id_institution_in,
            id_professional_in     => id_professional_in,
            flg_type_in            => flg_type_in,
            id_prof_dest_in        => id_prof_dest_in,
            id_dep_clin_serv_in    => id_dep_clin_serv_in,
            round_id_in            => round_id_in,
            reason_code_in         => reason_code_in,
            flg_reschedule_in      => flg_reschedule_in,
            flg_subtype_in         => flg_subtype_in,
            decision_urg_level_in  => decision_urg_level_in,
            dt_tracking_tstz_in    => dt_tracking_tstz_in,
            id_reason_code_in      => id_reason_code_in,
            id_schedule_in         => id_schedule_in,
            id_inst_dest_in        => id_inst_dest_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_workflow_action_in  => id_workflow_action_in,
            id_speciality_in       => id_speciality_in,
            dt_create_in           => dt_create_in,
            id_workflow_in         => id_workflow_in,
            id_inst_orig_in        => id_inst_orig_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN p1_tracking%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec p1_tracking%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_tracking := next_key(sequence_in);
        END IF;
        ins(id_tracking_in         => l_rec.id_tracking,
            ext_req_status_in      => l_rec.ext_req_status,
            id_external_request_in => l_rec.id_external_request,
            id_institution_in      => l_rec.id_institution,
            id_professional_in     => l_rec.id_professional,
            flg_type_in            => l_rec.flg_type,
            id_prof_dest_in        => l_rec.id_prof_dest,
            id_dep_clin_serv_in    => l_rec.id_dep_clin_serv,
            round_id_in            => l_rec.round_id,
            reason_code_in         => l_rec.reason_code,
            flg_reschedule_in      => l_rec.flg_reschedule,
            flg_subtype_in         => l_rec.flg_subtype,
            decision_urg_level_in  => l_rec.decision_urg_level,
            dt_tracking_tstz_in    => l_rec.dt_tracking_tstz,
            id_reason_code_in      => l_rec.id_reason_code,
            id_schedule_in         => l_rec.id_schedule,
            id_inst_dest_in        => l_rec.id_inst_dest,
            create_user_in         => l_rec.create_user,
            create_time_in         => l_rec.create_time,
            create_institution_in  => l_rec.create_institution,
            update_user_in         => l_rec.update_user,
            update_time_in         => l_rec.update_time,
            update_institution_in  => l_rec.update_institution,
            id_workflow_action_in  => l_rec.id_workflow_action,
            id_speciality_in       => l_rec.id_speciality,
            dt_create_in           => l_rec.dt_create,
            id_workflow_in         => l_rec.id_workflow,
            id_inst_orig_in        => l_rec.id_inst_orig,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN p1_tracking%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN p1_tracking.id_tracking%TYPE
    
     IS
        retval p1_tracking.id_tracking%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_p1_tracking.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_P1_TRACKING'));
    END next_key;

    PROCEDURE ins
    (
        ext_req_status_in      IN p1_tracking.ext_req_status%TYPE DEFAULT NULL,
        id_external_request_in IN p1_tracking.id_external_request%TYPE DEFAULT NULL,
        id_institution_in      IN p1_tracking.id_institution%TYPE DEFAULT NULL,
        id_professional_in     IN p1_tracking.id_professional%TYPE DEFAULT NULL,
        flg_type_in            IN p1_tracking.flg_type%TYPE DEFAULT NULL,
        id_prof_dest_in        IN p1_tracking.id_prof_dest%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN p1_tracking.id_dep_clin_serv%TYPE DEFAULT NULL,
        round_id_in            IN p1_tracking.round_id%TYPE DEFAULT NULL,
        reason_code_in         IN p1_tracking.reason_code%TYPE DEFAULT NULL,
        flg_reschedule_in      IN p1_tracking.flg_reschedule%TYPE DEFAULT NULL,
        flg_subtype_in         IN p1_tracking.flg_subtype%TYPE DEFAULT NULL,
        decision_urg_level_in  IN p1_tracking.decision_urg_level%TYPE DEFAULT NULL,
        dt_tracking_tstz_in    IN p1_tracking.dt_tracking_tstz%TYPE DEFAULT NULL,
        id_reason_code_in      IN p1_tracking.id_reason_code%TYPE DEFAULT NULL,
        id_schedule_in         IN p1_tracking.id_schedule%TYPE DEFAULT NULL,
        id_inst_dest_in        IN p1_tracking.id_inst_dest%TYPE DEFAULT NULL,
        create_user_in         IN p1_tracking.create_user%TYPE DEFAULT NULL,
        create_time_in         IN p1_tracking.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN p1_tracking.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN p1_tracking.update_user%TYPE DEFAULT NULL,
        update_time_in         IN p1_tracking.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN p1_tracking.update_institution%TYPE DEFAULT NULL,
        id_workflow_action_in  IN p1_tracking.id_workflow_action%TYPE DEFAULT NULL,
        id_speciality_in       IN p1_tracking.id_speciality%TYPE DEFAULT NULL,
        dt_create_in           IN p1_tracking.dt_create%TYPE DEFAULT NULL,
        id_workflow_in         IN p1_tracking.id_workflow%TYPE DEFAULT NULL,
        id_inst_orig_in        IN p1_tracking.id_inst_orig%TYPE DEFAULT NULL,
        id_tracking_out        IN OUT p1_tracking.id_tracking%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky p1_tracking.id_tracking%TYPE := next_key;
    BEGIN
        ins(id_tracking_in         => l_pky,
            ext_req_status_in      => ext_req_status_in,
            id_external_request_in => id_external_request_in,
            id_institution_in      => id_institution_in,
            id_professional_in     => id_professional_in,
            flg_type_in            => flg_type_in,
            id_prof_dest_in        => id_prof_dest_in,
            id_dep_clin_serv_in    => id_dep_clin_serv_in,
            round_id_in            => round_id_in,
            reason_code_in         => reason_code_in,
            flg_reschedule_in      => flg_reschedule_in,
            flg_subtype_in         => flg_subtype_in,
            decision_urg_level_in  => decision_urg_level_in,
            dt_tracking_tstz_in    => dt_tracking_tstz_in,
            id_reason_code_in      => id_reason_code_in,
            id_schedule_in         => id_schedule_in,
            id_inst_dest_in        => id_inst_dest_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_workflow_action_in  => id_workflow_action_in,
            id_speciality_in       => id_speciality_in,
            dt_create_in           => dt_create_in,
            id_workflow_in         => id_workflow_in,
            id_inst_orig_in        => id_inst_orig_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        id_tracking_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        ext_req_status_in      IN p1_tracking.ext_req_status%TYPE DEFAULT NULL,
        id_external_request_in IN p1_tracking.id_external_request%TYPE DEFAULT NULL,
        id_institution_in      IN p1_tracking.id_institution%TYPE DEFAULT NULL,
        id_professional_in     IN p1_tracking.id_professional%TYPE DEFAULT NULL,
        flg_type_in            IN p1_tracking.flg_type%TYPE DEFAULT NULL,
        id_prof_dest_in        IN p1_tracking.id_prof_dest%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN p1_tracking.id_dep_clin_serv%TYPE DEFAULT NULL,
        round_id_in            IN p1_tracking.round_id%TYPE DEFAULT NULL,
        reason_code_in         IN p1_tracking.reason_code%TYPE DEFAULT NULL,
        flg_reschedule_in      IN p1_tracking.flg_reschedule%TYPE DEFAULT NULL,
        flg_subtype_in         IN p1_tracking.flg_subtype%TYPE DEFAULT NULL,
        decision_urg_level_in  IN p1_tracking.decision_urg_level%TYPE DEFAULT NULL,
        dt_tracking_tstz_in    IN p1_tracking.dt_tracking_tstz%TYPE DEFAULT NULL,
        id_reason_code_in      IN p1_tracking.id_reason_code%TYPE DEFAULT NULL,
        id_schedule_in         IN p1_tracking.id_schedule%TYPE DEFAULT NULL,
        id_inst_dest_in        IN p1_tracking.id_inst_dest%TYPE DEFAULT NULL,
        create_user_in         IN p1_tracking.create_user%TYPE DEFAULT NULL,
        create_time_in         IN p1_tracking.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN p1_tracking.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN p1_tracking.update_user%TYPE DEFAULT NULL,
        update_time_in         IN p1_tracking.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN p1_tracking.update_institution%TYPE DEFAULT NULL,
        id_workflow_action_in  IN p1_tracking.id_workflow_action%TYPE DEFAULT NULL,
        id_speciality_in       IN p1_tracking.id_speciality%TYPE DEFAULT NULL,
        dt_create_in           IN p1_tracking.dt_create%TYPE DEFAULT NULL,
        id_workflow_in         IN p1_tracking.id_workflow%TYPE DEFAULT NULL,
        id_inst_orig_in        IN p1_tracking.id_inst_orig%TYPE DEFAULT NULL,
        id_tracking_out        IN OUT p1_tracking.id_tracking%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(ext_req_status_in      => ext_req_status_in,
            id_external_request_in => id_external_request_in,
            id_institution_in      => id_institution_in,
            id_professional_in     => id_professional_in,
            flg_type_in            => flg_type_in,
            id_prof_dest_in        => id_prof_dest_in,
            id_dep_clin_serv_in    => id_dep_clin_serv_in,
            round_id_in            => round_id_in,
            reason_code_in         => reason_code_in,
            flg_reschedule_in      => flg_reschedule_in,
            flg_subtype_in         => flg_subtype_in,
            decision_urg_level_in  => decision_urg_level_in,
            dt_tracking_tstz_in    => dt_tracking_tstz_in,
            id_reason_code_in      => id_reason_code_in,
            id_schedule_in         => id_schedule_in,
            id_inst_dest_in        => id_inst_dest_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_workflow_action_in  => id_workflow_action_in,
            id_speciality_in       => id_speciality_in,
            dt_create_in           => dt_create_in,
            id_workflow_in         => id_workflow_in,
            id_inst_orig_in        => id_inst_orig_in,
            id_tracking_out        => id_tracking_out,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    FUNCTION ins
    (
        ext_req_status_in      IN p1_tracking.ext_req_status%TYPE DEFAULT NULL,
        id_external_request_in IN p1_tracking.id_external_request%TYPE DEFAULT NULL,
        id_institution_in      IN p1_tracking.id_institution%TYPE DEFAULT NULL,
        id_professional_in     IN p1_tracking.id_professional%TYPE DEFAULT NULL,
        flg_type_in            IN p1_tracking.flg_type%TYPE DEFAULT NULL,
        id_prof_dest_in        IN p1_tracking.id_prof_dest%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN p1_tracking.id_dep_clin_serv%TYPE DEFAULT NULL,
        round_id_in            IN p1_tracking.round_id%TYPE DEFAULT NULL,
        reason_code_in         IN p1_tracking.reason_code%TYPE DEFAULT NULL,
        flg_reschedule_in      IN p1_tracking.flg_reschedule%TYPE DEFAULT NULL,
        flg_subtype_in         IN p1_tracking.flg_subtype%TYPE DEFAULT NULL,
        decision_urg_level_in  IN p1_tracking.decision_urg_level%TYPE DEFAULT NULL,
        dt_tracking_tstz_in    IN p1_tracking.dt_tracking_tstz%TYPE DEFAULT NULL,
        id_reason_code_in      IN p1_tracking.id_reason_code%TYPE DEFAULT NULL,
        id_schedule_in         IN p1_tracking.id_schedule%TYPE DEFAULT NULL,
        id_inst_dest_in        IN p1_tracking.id_inst_dest%TYPE DEFAULT NULL,
        create_user_in         IN p1_tracking.create_user%TYPE DEFAULT NULL,
        create_time_in         IN p1_tracking.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN p1_tracking.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN p1_tracking.update_user%TYPE DEFAULT NULL,
        update_time_in         IN p1_tracking.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN p1_tracking.update_institution%TYPE DEFAULT NULL,
        id_workflow_action_in  IN p1_tracking.id_workflow_action%TYPE DEFAULT NULL,
        id_speciality_in       IN p1_tracking.id_speciality%TYPE DEFAULT NULL,
        dt_create_in           IN p1_tracking.dt_create%TYPE DEFAULT NULL,
        id_workflow_in         IN p1_tracking.id_workflow%TYPE DEFAULT NULL,
        id_inst_orig_in        IN p1_tracking.id_inst_orig%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) RETURN p1_tracking.id_tracking%TYPE IS
        l_pky p1_tracking.id_tracking%TYPE := next_key;
    BEGIN
        ins(id_tracking_in         => l_pky,
            ext_req_status_in      => ext_req_status_in,
            id_external_request_in => id_external_request_in,
            id_institution_in      => id_institution_in,
            id_professional_in     => id_professional_in,
            flg_type_in            => flg_type_in,
            id_prof_dest_in        => id_prof_dest_in,
            id_dep_clin_serv_in    => id_dep_clin_serv_in,
            round_id_in            => round_id_in,
            reason_code_in         => reason_code_in,
            flg_reschedule_in      => flg_reschedule_in,
            flg_subtype_in         => flg_subtype_in,
            decision_urg_level_in  => decision_urg_level_in,
            dt_tracking_tstz_in    => dt_tracking_tstz_in,
            id_reason_code_in      => id_reason_code_in,
            id_schedule_in         => id_schedule_in,
            id_inst_dest_in        => id_inst_dest_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_workflow_action_in  => id_workflow_action_in,
            id_speciality_in       => id_speciality_in,
            dt_create_in           => dt_create_in,
            id_workflow_in         => id_workflow_in,
            id_inst_orig_in        => id_inst_orig_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        ext_req_status_in      IN p1_tracking.ext_req_status%TYPE DEFAULT NULL,
        id_external_request_in IN p1_tracking.id_external_request%TYPE DEFAULT NULL,
        id_institution_in      IN p1_tracking.id_institution%TYPE DEFAULT NULL,
        id_professional_in     IN p1_tracking.id_professional%TYPE DEFAULT NULL,
        flg_type_in            IN p1_tracking.flg_type%TYPE DEFAULT NULL,
        id_prof_dest_in        IN p1_tracking.id_prof_dest%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN p1_tracking.id_dep_clin_serv%TYPE DEFAULT NULL,
        round_id_in            IN p1_tracking.round_id%TYPE DEFAULT NULL,
        reason_code_in         IN p1_tracking.reason_code%TYPE DEFAULT NULL,
        flg_reschedule_in      IN p1_tracking.flg_reschedule%TYPE DEFAULT NULL,
        flg_subtype_in         IN p1_tracking.flg_subtype%TYPE DEFAULT NULL,
        decision_urg_level_in  IN p1_tracking.decision_urg_level%TYPE DEFAULT NULL,
        dt_tracking_tstz_in    IN p1_tracking.dt_tracking_tstz%TYPE DEFAULT NULL,
        id_reason_code_in      IN p1_tracking.id_reason_code%TYPE DEFAULT NULL,
        id_schedule_in         IN p1_tracking.id_schedule%TYPE DEFAULT NULL,
        id_inst_dest_in        IN p1_tracking.id_inst_dest%TYPE DEFAULT NULL,
        create_user_in         IN p1_tracking.create_user%TYPE DEFAULT NULL,
        create_time_in         IN p1_tracking.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN p1_tracking.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN p1_tracking.update_user%TYPE DEFAULT NULL,
        update_time_in         IN p1_tracking.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN p1_tracking.update_institution%TYPE DEFAULT NULL,
        id_workflow_action_in  IN p1_tracking.id_workflow_action%TYPE DEFAULT NULL,
        id_speciality_in       IN p1_tracking.id_speciality%TYPE DEFAULT NULL,
        dt_create_in           IN p1_tracking.dt_create%TYPE DEFAULT NULL,
        id_workflow_in         IN p1_tracking.id_workflow%TYPE DEFAULT NULL,
        id_inst_orig_in        IN p1_tracking.id_inst_orig%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) RETURN p1_tracking.id_tracking%TYPE IS
        l_pky    p1_tracking.id_tracking%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_tracking_in         => l_pky,
            ext_req_status_in      => ext_req_status_in,
            id_external_request_in => id_external_request_in,
            id_institution_in      => id_institution_in,
            id_professional_in     => id_professional_in,
            flg_type_in            => flg_type_in,
            id_prof_dest_in        => id_prof_dest_in,
            id_dep_clin_serv_in    => id_dep_clin_serv_in,
            round_id_in            => round_id_in,
            reason_code_in         => reason_code_in,
            flg_reschedule_in      => flg_reschedule_in,
            flg_subtype_in         => flg_subtype_in,
            decision_urg_level_in  => decision_urg_level_in,
            dt_tracking_tstz_in    => dt_tracking_tstz_in,
            id_reason_code_in      => id_reason_code_in,
            id_schedule_in         => id_schedule_in,
            id_inst_dest_in        => id_inst_dest_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_workflow_action_in  => id_workflow_action_in,
            id_speciality_in       => id_speciality_in,
            dt_create_in           => dt_create_in,
            id_workflow_in         => id_workflow_in,
            id_inst_orig_in        => id_inst_orig_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        ext_req_status_in      IN p1_tracking.ext_req_status%TYPE DEFAULT NULL,
        id_external_request_in IN p1_tracking.id_external_request%TYPE DEFAULT NULL,
        id_institution_in      IN p1_tracking.id_institution%TYPE DEFAULT NULL,
        id_professional_in     IN p1_tracking.id_professional%TYPE DEFAULT NULL,
        flg_type_in            IN p1_tracking.flg_type%TYPE DEFAULT NULL,
        id_prof_dest_in        IN p1_tracking.id_prof_dest%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN p1_tracking.id_dep_clin_serv%TYPE DEFAULT NULL,
        round_id_in            IN p1_tracking.round_id%TYPE DEFAULT NULL,
        reason_code_in         IN p1_tracking.reason_code%TYPE DEFAULT NULL,
        flg_reschedule_in      IN p1_tracking.flg_reschedule%TYPE DEFAULT NULL,
        flg_subtype_in         IN p1_tracking.flg_subtype%TYPE DEFAULT NULL,
        decision_urg_level_in  IN p1_tracking.decision_urg_level%TYPE DEFAULT NULL,
        dt_tracking_tstz_in    IN p1_tracking.dt_tracking_tstz%TYPE DEFAULT NULL,
        id_reason_code_in      IN p1_tracking.id_reason_code%TYPE DEFAULT NULL,
        id_schedule_in         IN p1_tracking.id_schedule%TYPE DEFAULT NULL,
        id_inst_dest_in        IN p1_tracking.id_inst_dest%TYPE DEFAULT NULL,
        create_user_in         IN p1_tracking.create_user%TYPE DEFAULT NULL,
        create_time_in         IN p1_tracking.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN p1_tracking.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN p1_tracking.update_user%TYPE DEFAULT NULL,
        update_time_in         IN p1_tracking.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN p1_tracking.update_institution%TYPE DEFAULT NULL,
        id_workflow_action_in  IN p1_tracking.id_workflow_action%TYPE DEFAULT NULL,
        id_speciality_in       IN p1_tracking.id_speciality%TYPE DEFAULT NULL,
        dt_create_in           IN p1_tracking.dt_create%TYPE DEFAULT NULL,
        id_workflow_in         IN p1_tracking.id_workflow%TYPE DEFAULT NULL,
        id_inst_orig_in        IN p1_tracking.id_inst_orig%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky p1_tracking.id_tracking%TYPE := next_key;
    BEGIN
        ins(id_tracking_in         => l_pky,
            ext_req_status_in      => ext_req_status_in,
            id_external_request_in => id_external_request_in,
            id_institution_in      => id_institution_in,
            id_professional_in     => id_professional_in,
            flg_type_in            => flg_type_in,
            id_prof_dest_in        => id_prof_dest_in,
            id_dep_clin_serv_in    => id_dep_clin_serv_in,
            round_id_in            => round_id_in,
            reason_code_in         => reason_code_in,
            flg_reschedule_in      => flg_reschedule_in,
            flg_subtype_in         => flg_subtype_in,
            decision_urg_level_in  => decision_urg_level_in,
            dt_tracking_tstz_in    => dt_tracking_tstz_in,
            id_reason_code_in      => id_reason_code_in,
            id_schedule_in         => id_schedule_in,
            id_inst_dest_in        => id_inst_dest_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_workflow_action_in  => id_workflow_action_in,
            id_speciality_in       => id_speciality_in,
            dt_create_in           => dt_create_in,
            id_workflow_in         => id_workflow_in,
            id_inst_orig_in        => id_inst_orig_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        ext_req_status_in      IN p1_tracking.ext_req_status%TYPE DEFAULT NULL,
        id_external_request_in IN p1_tracking.id_external_request%TYPE DEFAULT NULL,
        id_institution_in      IN p1_tracking.id_institution%TYPE DEFAULT NULL,
        id_professional_in     IN p1_tracking.id_professional%TYPE DEFAULT NULL,
        flg_type_in            IN p1_tracking.flg_type%TYPE DEFAULT NULL,
        id_prof_dest_in        IN p1_tracking.id_prof_dest%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN p1_tracking.id_dep_clin_serv%TYPE DEFAULT NULL,
        round_id_in            IN p1_tracking.round_id%TYPE DEFAULT NULL,
        reason_code_in         IN p1_tracking.reason_code%TYPE DEFAULT NULL,
        flg_reschedule_in      IN p1_tracking.flg_reschedule%TYPE DEFAULT NULL,
        flg_subtype_in         IN p1_tracking.flg_subtype%TYPE DEFAULT NULL,
        decision_urg_level_in  IN p1_tracking.decision_urg_level%TYPE DEFAULT NULL,
        dt_tracking_tstz_in    IN p1_tracking.dt_tracking_tstz%TYPE DEFAULT NULL,
        id_reason_code_in      IN p1_tracking.id_reason_code%TYPE DEFAULT NULL,
        id_schedule_in         IN p1_tracking.id_schedule%TYPE DEFAULT NULL,
        id_inst_dest_in        IN p1_tracking.id_inst_dest%TYPE DEFAULT NULL,
        create_user_in         IN p1_tracking.create_user%TYPE DEFAULT NULL,
        create_time_in         IN p1_tracking.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN p1_tracking.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN p1_tracking.update_user%TYPE DEFAULT NULL,
        update_time_in         IN p1_tracking.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN p1_tracking.update_institution%TYPE DEFAULT NULL,
        id_workflow_action_in  IN p1_tracking.id_workflow_action%TYPE DEFAULT NULL,
        id_speciality_in       IN p1_tracking.id_speciality%TYPE DEFAULT NULL,
        dt_create_in           IN p1_tracking.dt_create%TYPE DEFAULT NULL,
        id_workflow_in         IN p1_tracking.id_workflow%TYPE DEFAULT NULL,
        id_inst_orig_in        IN p1_tracking.id_inst_orig%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        l_pky    p1_tracking.id_tracking%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_tracking_in         => l_pky,
            ext_req_status_in      => ext_req_status_in,
            id_external_request_in => id_external_request_in,
            id_institution_in      => id_institution_in,
            id_professional_in     => id_professional_in,
            flg_type_in            => flg_type_in,
            id_prof_dest_in        => id_prof_dest_in,
            id_dep_clin_serv_in    => id_dep_clin_serv_in,
            round_id_in            => round_id_in,
            reason_code_in         => reason_code_in,
            flg_reschedule_in      => flg_reschedule_in,
            flg_subtype_in         => flg_subtype_in,
            decision_urg_level_in  => decision_urg_level_in,
            dt_tracking_tstz_in    => dt_tracking_tstz_in,
            id_reason_code_in      => id_reason_code_in,
            id_schedule_in         => id_schedule_in,
            id_inst_dest_in        => id_inst_dest_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_workflow_action_in  => id_workflow_action_in,
            id_speciality_in       => id_speciality_in,
            dt_create_in           => dt_create_in,
            id_workflow_in         => id_workflow_in,
            id_inst_orig_in        => id_inst_orig_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN p1_tracking_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO p1_tracking
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TRACKING _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_tracking,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'EXT_REQ_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .ext_req_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EXTERNAL_REQUEST _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_external_request,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_DEST _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_dest,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_dep_clin_serv,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ROUND_ID _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .round_id,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'REASON_CODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .reason_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_RESCHEDULE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_reschedule,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_SUBTYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_subtype,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DECISION_URG_LEVEL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .decision_urg_level,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_TRACKING_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_tracking_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_REASON_CODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_reason_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCHEDULE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_schedule,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INST_DEST _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_inst_dest,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_WORKFLOW_ACTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_workflow_action,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SPECIALITY _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_speciality,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CREATE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_create,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_WORKFLOW _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_workflow,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INST_ORIG _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_inst_orig,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'P1_TRACKING',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN p1_tracking_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_tracking_in          IN p1_tracking.id_tracking%TYPE,
        ext_req_status_in       IN p1_tracking.ext_req_status%TYPE DEFAULT NULL,
        ext_req_status_nin      IN BOOLEAN := TRUE,
        id_external_request_in  IN p1_tracking.id_external_request%TYPE DEFAULT NULL,
        id_external_request_nin IN BOOLEAN := TRUE,
        id_institution_in       IN p1_tracking.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        id_professional_in      IN p1_tracking.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        flg_type_in             IN p1_tracking.flg_type%TYPE DEFAULT NULL,
        flg_type_nin            IN BOOLEAN := TRUE,
        id_prof_dest_in         IN p1_tracking.id_prof_dest%TYPE DEFAULT NULL,
        id_prof_dest_nin        IN BOOLEAN := TRUE,
        id_dep_clin_serv_in     IN p1_tracking.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin    IN BOOLEAN := TRUE,
        round_id_in             IN p1_tracking.round_id%TYPE DEFAULT NULL,
        round_id_nin            IN BOOLEAN := TRUE,
        reason_code_in          IN p1_tracking.reason_code%TYPE DEFAULT NULL,
        reason_code_nin         IN BOOLEAN := TRUE,
        flg_reschedule_in       IN p1_tracking.flg_reschedule%TYPE DEFAULT NULL,
        flg_reschedule_nin      IN BOOLEAN := TRUE,
        flg_subtype_in          IN p1_tracking.flg_subtype%TYPE DEFAULT NULL,
        flg_subtype_nin         IN BOOLEAN := TRUE,
        decision_urg_level_in   IN p1_tracking.decision_urg_level%TYPE DEFAULT NULL,
        decision_urg_level_nin  IN BOOLEAN := TRUE,
        dt_tracking_tstz_in     IN p1_tracking.dt_tracking_tstz%TYPE DEFAULT NULL,
        dt_tracking_tstz_nin    IN BOOLEAN := TRUE,
        id_reason_code_in       IN p1_tracking.id_reason_code%TYPE DEFAULT NULL,
        id_reason_code_nin      IN BOOLEAN := TRUE,
        id_schedule_in          IN p1_tracking.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin         IN BOOLEAN := TRUE,
        id_inst_dest_in         IN p1_tracking.id_inst_dest%TYPE DEFAULT NULL,
        id_inst_dest_nin        IN BOOLEAN := TRUE,
        create_user_in          IN p1_tracking.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN p1_tracking.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN p1_tracking.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN p1_tracking.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN p1_tracking.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN p1_tracking.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_workflow_action_in   IN p1_tracking.id_workflow_action%TYPE DEFAULT NULL,
        id_workflow_action_nin  IN BOOLEAN := TRUE,
        id_speciality_in        IN p1_tracking.id_speciality%TYPE DEFAULT NULL,
        id_speciality_nin       IN BOOLEAN := TRUE,
        dt_create_in            IN p1_tracking.dt_create%TYPE DEFAULT NULL,
        dt_create_nin           IN BOOLEAN := TRUE,
        id_workflow_in          IN p1_tracking.id_workflow%TYPE DEFAULT NULL,
        id_workflow_nin         IN BOOLEAN := TRUE,
        id_inst_orig_in         IN p1_tracking.id_inst_orig%TYPE DEFAULT NULL,
        id_inst_orig_nin        IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_ext_req_status_n      NUMBER(1);
        l_id_external_request_n NUMBER(1);
        l_id_institution_n      NUMBER(1);
        l_id_professional_n     NUMBER(1);
        l_flg_type_n            NUMBER(1);
        l_id_prof_dest_n        NUMBER(1);
        l_id_dep_clin_serv_n    NUMBER(1);
        l_round_id_n            NUMBER(1);
        l_reason_code_n         NUMBER(1);
        l_flg_reschedule_n      NUMBER(1);
        l_flg_subtype_n         NUMBER(1);
        l_decision_urg_level_n  NUMBER(1);
        l_dt_tracking_tstz_n    NUMBER(1);
        l_id_reason_code_n      NUMBER(1);
        l_id_schedule_n         NUMBER(1);
        l_id_inst_dest_n        NUMBER(1);
        l_create_user_n         NUMBER(1);
        l_create_time_n         NUMBER(1);
        l_create_institution_n  NUMBER(1);
        l_update_user_n         NUMBER(1);
        l_update_time_n         NUMBER(1);
        l_update_institution_n  NUMBER(1);
        l_id_workflow_action_n  NUMBER(1);
        l_id_speciality_n       NUMBER(1);
        l_dt_create_n           NUMBER(1);
        l_id_workflow_n         NUMBER(1);
        l_id_inst_orig_n        NUMBER(1);
    BEGIN
    
        l_ext_req_status_n      := sys.diutil.bool_to_int(ext_req_status_nin);
        l_id_external_request_n := sys.diutil.bool_to_int(id_external_request_nin);
        l_id_institution_n      := sys.diutil.bool_to_int(id_institution_nin);
        l_id_professional_n     := sys.diutil.bool_to_int(id_professional_nin);
        l_flg_type_n            := sys.diutil.bool_to_int(flg_type_nin);
        l_id_prof_dest_n        := sys.diutil.bool_to_int(id_prof_dest_nin);
        l_id_dep_clin_serv_n    := sys.diutil.bool_to_int(id_dep_clin_serv_nin);
        l_round_id_n            := sys.diutil.bool_to_int(round_id_nin);
        l_reason_code_n         := sys.diutil.bool_to_int(reason_code_nin);
        l_flg_reschedule_n      := sys.diutil.bool_to_int(flg_reschedule_nin);
        l_flg_subtype_n         := sys.diutil.bool_to_int(flg_subtype_nin);
        l_decision_urg_level_n  := sys.diutil.bool_to_int(decision_urg_level_nin);
        l_dt_tracking_tstz_n    := sys.diutil.bool_to_int(dt_tracking_tstz_nin);
        l_id_reason_code_n      := sys.diutil.bool_to_int(id_reason_code_nin);
        l_id_schedule_n         := sys.diutil.bool_to_int(id_schedule_nin);
        l_id_inst_dest_n        := sys.diutil.bool_to_int(id_inst_dest_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_id_workflow_action_n  := sys.diutil.bool_to_int(id_workflow_action_nin);
        l_id_speciality_n       := sys.diutil.bool_to_int(id_speciality_nin);
        l_dt_create_n           := sys.diutil.bool_to_int(dt_create_nin);
        l_id_workflow_n         := sys.diutil.bool_to_int(id_workflow_nin);
        l_id_inst_orig_n        := sys.diutil.bool_to_int(id_inst_orig_nin);
    
        UPDATE p1_tracking
           SET ext_req_status      = decode(l_ext_req_status_n,
                                            0,
                                            ext_req_status_in,
                                            nvl(ext_req_status_in, ext_req_status)),
               id_external_request = decode(l_id_external_request_n,
                                            0,
                                            id_external_request_in,
                                            nvl(id_external_request_in, id_external_request)),
               id_institution      = decode(l_id_institution_n,
                                            0,
                                            id_institution_in,
                                            nvl(id_institution_in, id_institution)),
               id_professional     = decode(l_id_professional_n,
                                            0,
                                            id_professional_in,
                                            nvl(id_professional_in, id_professional)),
               flg_type            = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               id_prof_dest        = decode(l_id_prof_dest_n, 0, id_prof_dest_in, nvl(id_prof_dest_in, id_prof_dest)),
               id_dep_clin_serv    = decode(l_id_dep_clin_serv_n,
                                            0,
                                            id_dep_clin_serv_in,
                                            nvl(id_dep_clin_serv_in, id_dep_clin_serv)),
               round_id            = decode(l_round_id_n, 0, round_id_in, nvl(round_id_in, round_id)),
               reason_code         = decode(l_reason_code_n, 0, reason_code_in, nvl(reason_code_in, reason_code)),
               flg_reschedule      = decode(l_flg_reschedule_n,
                                            0,
                                            flg_reschedule_in,
                                            nvl(flg_reschedule_in, flg_reschedule)),
               flg_subtype         = decode(l_flg_subtype_n, 0, flg_subtype_in, nvl(flg_subtype_in, flg_subtype)),
               decision_urg_level  = decode(l_decision_urg_level_n,
                                            0,
                                            decision_urg_level_in,
                                            nvl(decision_urg_level_in, decision_urg_level)),
               dt_tracking_tstz    = decode(l_dt_tracking_tstz_n,
                                            0,
                                            dt_tracking_tstz_in,
                                            nvl(dt_tracking_tstz_in, dt_tracking_tstz)),
               id_reason_code      = decode(l_id_reason_code_n,
                                            0,
                                            id_reason_code_in,
                                            nvl(id_reason_code_in, id_reason_code)),
               id_schedule         = decode(l_id_schedule_n, 0, id_schedule_in, nvl(id_schedule_in, id_schedule)),
               id_inst_dest        = decode(l_id_inst_dest_n, 0, id_inst_dest_in, nvl(id_inst_dest_in, id_inst_dest)),
               create_user         = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time         = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution  = decode(l_create_institution_n,
                                            0,
                                            create_institution_in,
                                            nvl(create_institution_in, create_institution)),
               update_user         = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time         = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution  = decode(l_update_institution_n,
                                            0,
                                            update_institution_in,
                                            nvl(update_institution_in, update_institution)),
               id_workflow_action  = decode(l_id_workflow_action_n,
                                            0,
                                            id_workflow_action_in,
                                            nvl(id_workflow_action_in, id_workflow_action)),
               id_speciality       = decode(l_id_speciality_n, 0, id_speciality_in, nvl(id_speciality_in, id_speciality)),
               dt_create           = decode(l_dt_create_n, 0, dt_create_in, nvl(dt_create_in, dt_create)),
               id_workflow         = decode(l_id_workflow_n, 0, id_workflow_in, nvl(id_workflow_in, id_workflow)),
               id_inst_orig        = decode(l_id_inst_orig_n, 0, id_inst_orig_in, nvl(id_inst_orig_in, id_inst_orig))
         WHERE id_tracking = id_tracking_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'P1_TRACKING');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    IF l_name = 'ERT_DCS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV',
                                                        value_in           => id_dep_clin_serv_in);
                    END IF;
                    IF l_name = 'ERT_ERTX_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXTERNAL_REQUEST',
                                                        value_in           => id_external_request_in);
                    END IF;
                    IF l_name = 'ERT_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'ERT_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'ERT_PROF_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_DEST',
                                                        value_in           => id_prof_dest_in);
                    END IF;
                    IF l_name = 'PTG_INN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INST_DEST',
                                                        value_in           => id_inst_dest_in);
                    END IF;
                    IF l_name = 'PTG_PRE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_REASON_CODE',
                                                        value_in           => id_reason_code_in);
                    END IF;
                    IF l_name = 'PTG_PSY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SPECIALITY',
                                                        value_in           => id_speciality_in);
                    END IF;
                    IF l_name = 'PTG_SCE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE',
                                                        value_in           => id_schedule_in);
                    END IF;
                    IF l_name = 'PTG_WWN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WORKFLOW_ACTION',
                                                        value_in           => id_workflow_action_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_tracking_in          IN p1_tracking.id_tracking%TYPE,
        ext_req_status_in       IN p1_tracking.ext_req_status%TYPE DEFAULT NULL,
        ext_req_status_nin      IN BOOLEAN := TRUE,
        id_external_request_in  IN p1_tracking.id_external_request%TYPE DEFAULT NULL,
        id_external_request_nin IN BOOLEAN := TRUE,
        id_institution_in       IN p1_tracking.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        id_professional_in      IN p1_tracking.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        flg_type_in             IN p1_tracking.flg_type%TYPE DEFAULT NULL,
        flg_type_nin            IN BOOLEAN := TRUE,
        id_prof_dest_in         IN p1_tracking.id_prof_dest%TYPE DEFAULT NULL,
        id_prof_dest_nin        IN BOOLEAN := TRUE,
        id_dep_clin_serv_in     IN p1_tracking.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin    IN BOOLEAN := TRUE,
        round_id_in             IN p1_tracking.round_id%TYPE DEFAULT NULL,
        round_id_nin            IN BOOLEAN := TRUE,
        reason_code_in          IN p1_tracking.reason_code%TYPE DEFAULT NULL,
        reason_code_nin         IN BOOLEAN := TRUE,
        flg_reschedule_in       IN p1_tracking.flg_reschedule%TYPE DEFAULT NULL,
        flg_reschedule_nin      IN BOOLEAN := TRUE,
        flg_subtype_in          IN p1_tracking.flg_subtype%TYPE DEFAULT NULL,
        flg_subtype_nin         IN BOOLEAN := TRUE,
        decision_urg_level_in   IN p1_tracking.decision_urg_level%TYPE DEFAULT NULL,
        decision_urg_level_nin  IN BOOLEAN := TRUE,
        dt_tracking_tstz_in     IN p1_tracking.dt_tracking_tstz%TYPE DEFAULT NULL,
        dt_tracking_tstz_nin    IN BOOLEAN := TRUE,
        id_reason_code_in       IN p1_tracking.id_reason_code%TYPE DEFAULT NULL,
        id_reason_code_nin      IN BOOLEAN := TRUE,
        id_schedule_in          IN p1_tracking.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin         IN BOOLEAN := TRUE,
        id_inst_dest_in         IN p1_tracking.id_inst_dest%TYPE DEFAULT NULL,
        id_inst_dest_nin        IN BOOLEAN := TRUE,
        create_user_in          IN p1_tracking.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN p1_tracking.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN p1_tracking.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN p1_tracking.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN p1_tracking.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN p1_tracking.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_workflow_action_in   IN p1_tracking.id_workflow_action%TYPE DEFAULT NULL,
        id_workflow_action_nin  IN BOOLEAN := TRUE,
        id_speciality_in        IN p1_tracking.id_speciality%TYPE DEFAULT NULL,
        id_speciality_nin       IN BOOLEAN := TRUE,
        dt_create_in            IN p1_tracking.dt_create%TYPE DEFAULT NULL,
        dt_create_nin           IN BOOLEAN := TRUE,
        id_workflow_in          IN p1_tracking.id_workflow%TYPE DEFAULT NULL,
        id_workflow_nin         IN BOOLEAN := TRUE,
        id_inst_orig_in         IN p1_tracking.id_inst_orig%TYPE DEFAULT NULL,
        id_inst_orig_nin        IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_tracking_in          => id_tracking_in,
            ext_req_status_in       => ext_req_status_in,
            ext_req_status_nin      => ext_req_status_nin,
            id_external_request_in  => id_external_request_in,
            id_external_request_nin => id_external_request_nin,
            id_institution_in       => id_institution_in,
            id_institution_nin      => id_institution_nin,
            id_professional_in      => id_professional_in,
            id_professional_nin     => id_professional_nin,
            flg_type_in             => flg_type_in,
            flg_type_nin            => flg_type_nin,
            id_prof_dest_in         => id_prof_dest_in,
            id_prof_dest_nin        => id_prof_dest_nin,
            id_dep_clin_serv_in     => id_dep_clin_serv_in,
            id_dep_clin_serv_nin    => id_dep_clin_serv_nin,
            round_id_in             => round_id_in,
            round_id_nin            => round_id_nin,
            reason_code_in          => reason_code_in,
            reason_code_nin         => reason_code_nin,
            flg_reschedule_in       => flg_reschedule_in,
            flg_reschedule_nin      => flg_reschedule_nin,
            flg_subtype_in          => flg_subtype_in,
            flg_subtype_nin         => flg_subtype_nin,
            decision_urg_level_in   => decision_urg_level_in,
            decision_urg_level_nin  => decision_urg_level_nin,
            dt_tracking_tstz_in     => dt_tracking_tstz_in,
            dt_tracking_tstz_nin    => dt_tracking_tstz_nin,
            id_reason_code_in       => id_reason_code_in,
            id_reason_code_nin      => id_reason_code_nin,
            id_schedule_in          => id_schedule_in,
            id_schedule_nin         => id_schedule_nin,
            id_inst_dest_in         => id_inst_dest_in,
            id_inst_dest_nin        => id_inst_dest_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            id_workflow_action_in   => id_workflow_action_in,
            id_workflow_action_nin  => id_workflow_action_nin,
            id_speciality_in        => id_speciality_in,
            id_speciality_nin       => id_speciality_nin,
            dt_create_in            => dt_create_in,
            dt_create_nin           => dt_create_nin,
            id_workflow_in          => id_workflow_in,
            id_workflow_nin         => id_workflow_nin,
            id_inst_orig_in         => id_inst_orig_in,
            id_inst_orig_nin        => id_inst_orig_nin,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        ext_req_status_in       IN p1_tracking.ext_req_status%TYPE DEFAULT NULL,
        ext_req_status_nin      IN BOOLEAN := TRUE,
        id_external_request_in  IN p1_tracking.id_external_request%TYPE DEFAULT NULL,
        id_external_request_nin IN BOOLEAN := TRUE,
        id_institution_in       IN p1_tracking.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        id_professional_in      IN p1_tracking.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        flg_type_in             IN p1_tracking.flg_type%TYPE DEFAULT NULL,
        flg_type_nin            IN BOOLEAN := TRUE,
        id_prof_dest_in         IN p1_tracking.id_prof_dest%TYPE DEFAULT NULL,
        id_prof_dest_nin        IN BOOLEAN := TRUE,
        id_dep_clin_serv_in     IN p1_tracking.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin    IN BOOLEAN := TRUE,
        round_id_in             IN p1_tracking.round_id%TYPE DEFAULT NULL,
        round_id_nin            IN BOOLEAN := TRUE,
        reason_code_in          IN p1_tracking.reason_code%TYPE DEFAULT NULL,
        reason_code_nin         IN BOOLEAN := TRUE,
        flg_reschedule_in       IN p1_tracking.flg_reschedule%TYPE DEFAULT NULL,
        flg_reschedule_nin      IN BOOLEAN := TRUE,
        flg_subtype_in          IN p1_tracking.flg_subtype%TYPE DEFAULT NULL,
        flg_subtype_nin         IN BOOLEAN := TRUE,
        decision_urg_level_in   IN p1_tracking.decision_urg_level%TYPE DEFAULT NULL,
        decision_urg_level_nin  IN BOOLEAN := TRUE,
        dt_tracking_tstz_in     IN p1_tracking.dt_tracking_tstz%TYPE DEFAULT NULL,
        dt_tracking_tstz_nin    IN BOOLEAN := TRUE,
        id_reason_code_in       IN p1_tracking.id_reason_code%TYPE DEFAULT NULL,
        id_reason_code_nin      IN BOOLEAN := TRUE,
        id_schedule_in          IN p1_tracking.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin         IN BOOLEAN := TRUE,
        id_inst_dest_in         IN p1_tracking.id_inst_dest%TYPE DEFAULT NULL,
        id_inst_dest_nin        IN BOOLEAN := TRUE,
        create_user_in          IN p1_tracking.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN p1_tracking.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN p1_tracking.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN p1_tracking.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN p1_tracking.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN p1_tracking.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_workflow_action_in   IN p1_tracking.id_workflow_action%TYPE DEFAULT NULL,
        id_workflow_action_nin  IN BOOLEAN := TRUE,
        id_speciality_in        IN p1_tracking.id_speciality%TYPE DEFAULT NULL,
        id_speciality_nin       IN BOOLEAN := TRUE,
        dt_create_in            IN p1_tracking.dt_create%TYPE DEFAULT NULL,
        dt_create_nin           IN BOOLEAN := TRUE,
        id_workflow_in          IN p1_tracking.id_workflow%TYPE DEFAULT NULL,
        id_workflow_nin         IN BOOLEAN := TRUE,
        id_inst_orig_in         IN p1_tracking.id_inst_orig%TYPE DEFAULT NULL,
        id_inst_orig_nin        IN BOOLEAN := TRUE,
        where_in                VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                   VARCHAR2(32767);
        l_rows_out              table_varchar;
        l_ext_req_status_n      NUMBER(1);
        l_id_external_request_n NUMBER(1);
        l_id_institution_n      NUMBER(1);
        l_id_professional_n     NUMBER(1);
        l_flg_type_n            NUMBER(1);
        l_id_prof_dest_n        NUMBER(1);
        l_id_dep_clin_serv_n    NUMBER(1);
        l_round_id_n            NUMBER(1);
        l_reason_code_n         NUMBER(1);
        l_flg_reschedule_n      NUMBER(1);
        l_flg_subtype_n         NUMBER(1);
        l_decision_urg_level_n  NUMBER(1);
        l_dt_tracking_tstz_n    NUMBER(1);
        l_id_reason_code_n      NUMBER(1);
        l_id_schedule_n         NUMBER(1);
        l_id_inst_dest_n        NUMBER(1);
        l_create_user_n         NUMBER(1);
        l_create_time_n         NUMBER(1);
        l_create_institution_n  NUMBER(1);
        l_update_user_n         NUMBER(1);
        l_update_time_n         NUMBER(1);
        l_update_institution_n  NUMBER(1);
        l_id_workflow_action_n  NUMBER(1);
        l_id_speciality_n       NUMBER(1);
        l_dt_create_n           NUMBER(1);
        l_id_workflow_n         NUMBER(1);
        l_id_inst_orig_n        NUMBER(1);
        id_tracking_in          p1_tracking.id_tracking%TYPE;
    BEGIN
    
        l_ext_req_status_n      := sys.diutil.bool_to_int(ext_req_status_nin);
        l_id_external_request_n := sys.diutil.bool_to_int(id_external_request_nin);
        l_id_institution_n      := sys.diutil.bool_to_int(id_institution_nin);
        l_id_professional_n     := sys.diutil.bool_to_int(id_professional_nin);
        l_flg_type_n            := sys.diutil.bool_to_int(flg_type_nin);
        l_id_prof_dest_n        := sys.diutil.bool_to_int(id_prof_dest_nin);
        l_id_dep_clin_serv_n    := sys.diutil.bool_to_int(id_dep_clin_serv_nin);
        l_round_id_n            := sys.diutil.bool_to_int(round_id_nin);
        l_reason_code_n         := sys.diutil.bool_to_int(reason_code_nin);
        l_flg_reschedule_n      := sys.diutil.bool_to_int(flg_reschedule_nin);
        l_flg_subtype_n         := sys.diutil.bool_to_int(flg_subtype_nin);
        l_decision_urg_level_n  := sys.diutil.bool_to_int(decision_urg_level_nin);
        l_dt_tracking_tstz_n    := sys.diutil.bool_to_int(dt_tracking_tstz_nin);
        l_id_reason_code_n      := sys.diutil.bool_to_int(id_reason_code_nin);
        l_id_schedule_n         := sys.diutil.bool_to_int(id_schedule_nin);
        l_id_inst_dest_n        := sys.diutil.bool_to_int(id_inst_dest_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_id_workflow_action_n  := sys.diutil.bool_to_int(id_workflow_action_nin);
        l_id_speciality_n       := sys.diutil.bool_to_int(id_speciality_nin);
        l_dt_create_n           := sys.diutil.bool_to_int(dt_create_nin);
        l_id_workflow_n         := sys.diutil.bool_to_int(id_workflow_nin);
        l_id_inst_orig_n        := sys.diutil.bool_to_int(id_inst_orig_nin);
    
        l_sql := 'UPDATE P1_TRACKING SET ' || ' EXT_REQ_STATUS = decode (' || l_ext_req_status_n ||
                 ',0,:ext_req_status_in, NVL (:ext_req_status_in, EXT_REQ_STATUS)) ' || ',' ||
                 ' ID_EXTERNAL_REQUEST = decode (' || l_id_external_request_n ||
                 ',0,:id_external_request_in, NVL (:id_external_request_in, ID_EXTERNAL_REQUEST)) ' || ',' ||
                 ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                 ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' ||
                 ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                 ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) ' || ',' ||
                 ' FLG_TYPE = decode (' || l_flg_type_n || ',0,:flg_type_in, NVL (:flg_type_in, FLG_TYPE)) ' || ',' ||
                 ' ID_PROF_DEST = decode (' || l_id_prof_dest_n ||
                 ',0,:id_prof_dest_in, NVL (:id_prof_dest_in, ID_PROF_DEST)) ' || ',' || ' ID_DEP_CLIN_SERV = decode (' ||
                 l_id_dep_clin_serv_n || ',0,:id_dep_clin_serv_in, NVL (:id_dep_clin_serv_in, ID_DEP_CLIN_SERV)) ' || ',' ||
                 ' ROUND_ID = decode (' || l_round_id_n || ',0,:round_id_in, NVL (:round_id_in, ROUND_ID)) ' || ',' ||
                 ' REASON_CODE = decode (' || l_reason_code_n ||
                 ',0,:reason_code_in, NVL (:reason_code_in, REASON_CODE)) ' || ',' || ' FLG_RESCHEDULE = decode (' ||
                 l_flg_reschedule_n || ',0,:flg_reschedule_in, NVL (:flg_reschedule_in, FLG_RESCHEDULE)) ' || ',' ||
                 ' FLG_SUBTYPE = decode (' || l_flg_subtype_n ||
                 ',0,:flg_subtype_in, NVL (:flg_subtype_in, FLG_SUBTYPE)) ' || ',' || ' DECISION_URG_LEVEL = decode (' ||
                 l_decision_urg_level_n ||
                 ',0,:decision_urg_level_in, NVL (:decision_urg_level_in, DECISION_URG_LEVEL)) ' || ',' ||
                 ' DT_TRACKING_TSTZ = decode (' || l_dt_tracking_tstz_n ||
                 ',0,:dt_tracking_tstz_in, NVL (:dt_tracking_tstz_in, DT_TRACKING_TSTZ)) ' || ',' ||
                 ' ID_REASON_CODE = decode (' || l_id_reason_code_n ||
                 ',0,:id_reason_code_in, NVL (:id_reason_code_in, ID_REASON_CODE)) ' || ',' ||
                 ' ID_SCHEDULE = decode (' || l_id_schedule_n ||
                 ',0,:id_schedule_in, NVL (:id_schedule_in, ID_SCHEDULE)) ' || ',' || ' ID_INST_DEST = decode (' ||
                 l_id_inst_dest_n || ',0,:id_inst_dest_in, NVL (:id_inst_dest_in, ID_INST_DEST)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' ID_WORKFLOW_ACTION = decode (' || l_id_workflow_action_n ||
                 ',0,:id_workflow_action_in, NVL (:id_workflow_action_in, ID_WORKFLOW_ACTION)) ' || ',' ||
                 ' ID_SPECIALITY = decode (' || l_id_speciality_n ||
                 ',0,:id_speciality_in, NVL (:id_speciality_in, ID_SPECIALITY)) ' || ',' || ' DT_CREATE = decode (' ||
                 l_dt_create_n || ',0,:dt_create_in, NVL (:dt_create_in, DT_CREATE)) ' || ',' ||
                 ' ID_WORKFLOW = decode (' || l_id_workflow_n ||
                 ',0,:id_workflow_in, NVL (:id_workflow_in, ID_WORKFLOW)) ' || ',' || ' ID_INST_ORIG = decode (' ||
                 l_id_inst_orig_n || ',0,:id_inst_orig_in, NVL (:id_inst_orig_in, ID_INST_ORIG)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN ext_req_status_in, id_external_request_in, id_institution_in, id_professional_in, flg_type_in, id_prof_dest_in, id_dep_clin_serv_in, round_id_in, reason_code_in, flg_reschedule_in, flg_subtype_in, decision_urg_level_in, dt_tracking_tstz_in, id_reason_code_in, id_schedule_in, id_inst_dest_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_workflow_action_in, id_speciality_in, dt_create_in, id_workflow_in, id_inst_orig_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'P1_TRACKING');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    IF l_name = 'ERT_DCS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV',
                                                        value_in           => id_dep_clin_serv_in);
                    END IF;
                    IF l_name = 'ERT_ERTX_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXTERNAL_REQUEST',
                                                        value_in           => id_external_request_in);
                    END IF;
                    IF l_name = 'ERT_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'ERT_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'ERT_PROF_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_DEST',
                                                        value_in           => id_prof_dest_in);
                    END IF;
                    IF l_name = 'PTG_INN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INST_DEST',
                                                        value_in           => id_inst_dest_in);
                    END IF;
                    IF l_name = 'PTG_PRE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_REASON_CODE',
                                                        value_in           => id_reason_code_in);
                    END IF;
                    IF l_name = 'PTG_PSY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SPECIALITY',
                                                        value_in           => id_speciality_in);
                    END IF;
                    IF l_name = 'PTG_SCE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE',
                                                        value_in           => id_schedule_in);
                    END IF;
                    IF l_name = 'PTG_WWN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WORKFLOW_ACTION',
                                                        value_in           => id_workflow_action_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        ext_req_status_in       IN p1_tracking.ext_req_status%TYPE DEFAULT NULL,
        ext_req_status_nin      IN BOOLEAN := TRUE,
        id_external_request_in  IN p1_tracking.id_external_request%TYPE DEFAULT NULL,
        id_external_request_nin IN BOOLEAN := TRUE,
        id_institution_in       IN p1_tracking.id_institution%TYPE DEFAULT NULL,
        id_institution_nin      IN BOOLEAN := TRUE,
        id_professional_in      IN p1_tracking.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        flg_type_in             IN p1_tracking.flg_type%TYPE DEFAULT NULL,
        flg_type_nin            IN BOOLEAN := TRUE,
        id_prof_dest_in         IN p1_tracking.id_prof_dest%TYPE DEFAULT NULL,
        id_prof_dest_nin        IN BOOLEAN := TRUE,
        id_dep_clin_serv_in     IN p1_tracking.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin    IN BOOLEAN := TRUE,
        round_id_in             IN p1_tracking.round_id%TYPE DEFAULT NULL,
        round_id_nin            IN BOOLEAN := TRUE,
        reason_code_in          IN p1_tracking.reason_code%TYPE DEFAULT NULL,
        reason_code_nin         IN BOOLEAN := TRUE,
        flg_reschedule_in       IN p1_tracking.flg_reschedule%TYPE DEFAULT NULL,
        flg_reschedule_nin      IN BOOLEAN := TRUE,
        flg_subtype_in          IN p1_tracking.flg_subtype%TYPE DEFAULT NULL,
        flg_subtype_nin         IN BOOLEAN := TRUE,
        decision_urg_level_in   IN p1_tracking.decision_urg_level%TYPE DEFAULT NULL,
        decision_urg_level_nin  IN BOOLEAN := TRUE,
        dt_tracking_tstz_in     IN p1_tracking.dt_tracking_tstz%TYPE DEFAULT NULL,
        dt_tracking_tstz_nin    IN BOOLEAN := TRUE,
        id_reason_code_in       IN p1_tracking.id_reason_code%TYPE DEFAULT NULL,
        id_reason_code_nin      IN BOOLEAN := TRUE,
        id_schedule_in          IN p1_tracking.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin         IN BOOLEAN := TRUE,
        id_inst_dest_in         IN p1_tracking.id_inst_dest%TYPE DEFAULT NULL,
        id_inst_dest_nin        IN BOOLEAN := TRUE,
        create_user_in          IN p1_tracking.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN p1_tracking.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN p1_tracking.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN p1_tracking.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN p1_tracking.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN p1_tracking.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_workflow_action_in   IN p1_tracking.id_workflow_action%TYPE DEFAULT NULL,
        id_workflow_action_nin  IN BOOLEAN := TRUE,
        id_speciality_in        IN p1_tracking.id_speciality%TYPE DEFAULT NULL,
        id_speciality_nin       IN BOOLEAN := TRUE,
        dt_create_in            IN p1_tracking.dt_create%TYPE DEFAULT NULL,
        dt_create_nin           IN BOOLEAN := TRUE,
        id_workflow_in          IN p1_tracking.id_workflow%TYPE DEFAULT NULL,
        id_workflow_nin         IN BOOLEAN := TRUE,
        id_inst_orig_in         IN p1_tracking.id_inst_orig%TYPE DEFAULT NULL,
        id_inst_orig_nin        IN BOOLEAN := TRUE,
        where_in                VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(ext_req_status_in       => ext_req_status_in,
            ext_req_status_nin      => ext_req_status_nin,
            id_external_request_in  => id_external_request_in,
            id_external_request_nin => id_external_request_nin,
            id_institution_in       => id_institution_in,
            id_institution_nin      => id_institution_nin,
            id_professional_in      => id_professional_in,
            id_professional_nin     => id_professional_nin,
            flg_type_in             => flg_type_in,
            flg_type_nin            => flg_type_nin,
            id_prof_dest_in         => id_prof_dest_in,
            id_prof_dest_nin        => id_prof_dest_nin,
            id_dep_clin_serv_in     => id_dep_clin_serv_in,
            id_dep_clin_serv_nin    => id_dep_clin_serv_nin,
            round_id_in             => round_id_in,
            round_id_nin            => round_id_nin,
            reason_code_in          => reason_code_in,
            reason_code_nin         => reason_code_nin,
            flg_reschedule_in       => flg_reschedule_in,
            flg_reschedule_nin      => flg_reschedule_nin,
            flg_subtype_in          => flg_subtype_in,
            flg_subtype_nin         => flg_subtype_nin,
            decision_urg_level_in   => decision_urg_level_in,
            decision_urg_level_nin  => decision_urg_level_nin,
            dt_tracking_tstz_in     => dt_tracking_tstz_in,
            dt_tracking_tstz_nin    => dt_tracking_tstz_nin,
            id_reason_code_in       => id_reason_code_in,
            id_reason_code_nin      => id_reason_code_nin,
            id_schedule_in          => id_schedule_in,
            id_schedule_nin         => id_schedule_nin,
            id_inst_dest_in         => id_inst_dest_in,
            id_inst_dest_nin        => id_inst_dest_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            id_workflow_action_in   => id_workflow_action_in,
            id_workflow_action_nin  => id_workflow_action_nin,
            id_speciality_in        => id_speciality_in,
            id_speciality_nin       => id_speciality_nin,
            dt_create_in            => dt_create_in,
            dt_create_nin           => dt_create_nin,
            id_workflow_in          => id_workflow_in,
            id_workflow_nin         => id_workflow_nin,
            id_inst_orig_in         => id_inst_orig_in,
            id_inst_orig_nin        => id_inst_orig_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN p1_tracking%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_tracking_in         => rec_in.id_tracking,
            ext_req_status_in      => rec_in.ext_req_status,
            id_external_request_in => rec_in.id_external_request,
            id_institution_in      => rec_in.id_institution,
            id_professional_in     => rec_in.id_professional,
            flg_type_in            => rec_in.flg_type,
            id_prof_dest_in        => rec_in.id_prof_dest,
            id_dep_clin_serv_in    => rec_in.id_dep_clin_serv,
            round_id_in            => rec_in.round_id,
            reason_code_in         => rec_in.reason_code,
            flg_reschedule_in      => rec_in.flg_reschedule,
            flg_subtype_in         => rec_in.flg_subtype,
            decision_urg_level_in  => rec_in.decision_urg_level,
            dt_tracking_tstz_in    => rec_in.dt_tracking_tstz,
            id_reason_code_in      => rec_in.id_reason_code,
            id_schedule_in         => rec_in.id_schedule,
            id_inst_dest_in        => rec_in.id_inst_dest,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            id_workflow_action_in  => rec_in.id_workflow_action,
            id_speciality_in       => rec_in.id_speciality,
            dt_create_in           => rec_in.dt_create,
            id_workflow_in         => rec_in.id_workflow,
            id_inst_orig_in        => rec_in.id_inst_orig
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN p1_tracking%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_tracking_in         => rec_in.id_tracking,
            ext_req_status_in      => rec_in.ext_req_status,
            id_external_request_in => rec_in.id_external_request,
            id_institution_in      => rec_in.id_institution,
            id_professional_in     => rec_in.id_professional,
            flg_type_in            => rec_in.flg_type,
            id_prof_dest_in        => rec_in.id_prof_dest,
            id_dep_clin_serv_in    => rec_in.id_dep_clin_serv,
            round_id_in            => rec_in.round_id,
            reason_code_in         => rec_in.reason_code,
            flg_reschedule_in      => rec_in.flg_reschedule,
            flg_subtype_in         => rec_in.flg_subtype,
            decision_urg_level_in  => rec_in.decision_urg_level,
            dt_tracking_tstz_in    => rec_in.dt_tracking_tstz,
            id_reason_code_in      => rec_in.id_reason_code,
            id_schedule_in         => rec_in.id_schedule,
            id_inst_dest_in        => rec_in.id_inst_dest,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            id_workflow_action_in  => rec_in.id_workflow_action,
            id_speciality_in       => rec_in.id_speciality,
            dt_create_in           => rec_in.dt_create,
            id_workflow_in         => rec_in.id_workflow,
            id_inst_orig_in        => rec_in.id_inst_orig
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_tracking_in         IN p1_tracking.id_tracking%TYPE,
        ext_req_status_in      IN p1_tracking.ext_req_status%TYPE DEFAULT NULL,
        id_external_request_in IN p1_tracking.id_external_request%TYPE DEFAULT NULL,
        id_institution_in      IN p1_tracking.id_institution%TYPE DEFAULT NULL,
        id_professional_in     IN p1_tracking.id_professional%TYPE DEFAULT NULL,
        flg_type_in            IN p1_tracking.flg_type%TYPE DEFAULT NULL,
        id_prof_dest_in        IN p1_tracking.id_prof_dest%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN p1_tracking.id_dep_clin_serv%TYPE DEFAULT NULL,
        round_id_in            IN p1_tracking.round_id%TYPE DEFAULT NULL,
        reason_code_in         IN p1_tracking.reason_code%TYPE DEFAULT NULL,
        flg_reschedule_in      IN p1_tracking.flg_reschedule%TYPE DEFAULT NULL,
        flg_subtype_in         IN p1_tracking.flg_subtype%TYPE DEFAULT NULL,
        decision_urg_level_in  IN p1_tracking.decision_urg_level%TYPE DEFAULT NULL,
        dt_tracking_tstz_in    IN p1_tracking.dt_tracking_tstz%TYPE DEFAULT NULL,
        id_reason_code_in      IN p1_tracking.id_reason_code%TYPE DEFAULT NULL,
        id_schedule_in         IN p1_tracking.id_schedule%TYPE DEFAULT NULL,
        id_inst_dest_in        IN p1_tracking.id_inst_dest%TYPE DEFAULT NULL,
        create_user_in         IN p1_tracking.create_user%TYPE DEFAULT NULL,
        create_time_in         IN p1_tracking.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN p1_tracking.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN p1_tracking.update_user%TYPE DEFAULT NULL,
        update_time_in         IN p1_tracking.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN p1_tracking.update_institution%TYPE DEFAULT NULL,
        id_workflow_action_in  IN p1_tracking.id_workflow_action%TYPE DEFAULT NULL,
        id_speciality_in       IN p1_tracking.id_speciality%TYPE DEFAULT NULL,
        dt_create_in           IN p1_tracking.dt_create%TYPE DEFAULT NULL,
        id_workflow_in         IN p1_tracking.id_workflow%TYPE DEFAULT NULL,
        id_inst_orig_in        IN p1_tracking.id_inst_orig%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        upd(id_tracking_in         => id_tracking_in,
            ext_req_status_in      => ext_req_status_in,
            id_external_request_in => id_external_request_in,
            id_institution_in      => id_institution_in,
            id_professional_in     => id_professional_in,
            flg_type_in            => flg_type_in,
            id_prof_dest_in        => id_prof_dest_in,
            id_dep_clin_serv_in    => id_dep_clin_serv_in,
            round_id_in            => round_id_in,
            reason_code_in         => reason_code_in,
            flg_reschedule_in      => flg_reschedule_in,
            flg_subtype_in         => flg_subtype_in,
            decision_urg_level_in  => decision_urg_level_in,
            dt_tracking_tstz_in    => dt_tracking_tstz_in,
            id_reason_code_in      => id_reason_code_in,
            id_schedule_in         => id_schedule_in,
            id_inst_dest_in        => id_inst_dest_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_workflow_action_in  => id_workflow_action_in,
            id_speciality_in       => id_speciality_in,
            dt_create_in           => dt_create_in,
            id_workflow_in         => id_workflow_in,
            id_inst_orig_in        => id_inst_orig_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_tracking_in         => id_tracking_in,
                ext_req_status_in      => ext_req_status_in,
                id_external_request_in => id_external_request_in,
                id_institution_in      => id_institution_in,
                id_professional_in     => id_professional_in,
                flg_type_in            => flg_type_in,
                id_prof_dest_in        => id_prof_dest_in,
                id_dep_clin_serv_in    => id_dep_clin_serv_in,
                round_id_in            => round_id_in,
                reason_code_in         => reason_code_in,
                flg_reschedule_in      => flg_reschedule_in,
                flg_subtype_in         => flg_subtype_in,
                decision_urg_level_in  => decision_urg_level_in,
                dt_tracking_tstz_in    => dt_tracking_tstz_in,
                id_reason_code_in      => id_reason_code_in,
                id_schedule_in         => id_schedule_in,
                id_inst_dest_in        => id_inst_dest_in,
                create_user_in         => create_user_in,
                create_time_in         => create_time_in,
                create_institution_in  => create_institution_in,
                update_user_in         => update_user_in,
                update_time_in         => update_time_in,
                update_institution_in  => update_institution_in,
                id_workflow_action_in  => id_workflow_action_in,
                id_speciality_in       => id_speciality_in,
                dt_create_in           => dt_create_in,
                id_workflow_in         => id_workflow_in,
                id_inst_orig_in        => id_inst_orig_in,
                handle_error_in        => handle_error_in,
                rows_out               => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_tracking_in         IN p1_tracking.id_tracking%TYPE,
        ext_req_status_in      IN p1_tracking.ext_req_status%TYPE DEFAULT NULL,
        id_external_request_in IN p1_tracking.id_external_request%TYPE DEFAULT NULL,
        id_institution_in      IN p1_tracking.id_institution%TYPE DEFAULT NULL,
        id_professional_in     IN p1_tracking.id_professional%TYPE DEFAULT NULL,
        flg_type_in            IN p1_tracking.flg_type%TYPE DEFAULT NULL,
        id_prof_dest_in        IN p1_tracking.id_prof_dest%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN p1_tracking.id_dep_clin_serv%TYPE DEFAULT NULL,
        round_id_in            IN p1_tracking.round_id%TYPE DEFAULT NULL,
        reason_code_in         IN p1_tracking.reason_code%TYPE DEFAULT NULL,
        flg_reschedule_in      IN p1_tracking.flg_reschedule%TYPE DEFAULT NULL,
        flg_subtype_in         IN p1_tracking.flg_subtype%TYPE DEFAULT NULL,
        decision_urg_level_in  IN p1_tracking.decision_urg_level%TYPE DEFAULT NULL,
        dt_tracking_tstz_in    IN p1_tracking.dt_tracking_tstz%TYPE DEFAULT NULL,
        id_reason_code_in      IN p1_tracking.id_reason_code%TYPE DEFAULT NULL,
        id_schedule_in         IN p1_tracking.id_schedule%TYPE DEFAULT NULL,
        id_inst_dest_in        IN p1_tracking.id_inst_dest%TYPE DEFAULT NULL,
        create_user_in         IN p1_tracking.create_user%TYPE DEFAULT NULL,
        create_time_in         IN p1_tracking.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN p1_tracking.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN p1_tracking.update_user%TYPE DEFAULT NULL,
        update_time_in         IN p1_tracking.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN p1_tracking.update_institution%TYPE DEFAULT NULL,
        id_workflow_action_in  IN p1_tracking.id_workflow_action%TYPE DEFAULT NULL,
        id_speciality_in       IN p1_tracking.id_speciality%TYPE DEFAULT NULL,
        dt_create_in           IN p1_tracking.dt_create%TYPE DEFAULT NULL,
        id_workflow_in         IN p1_tracking.id_workflow%TYPE DEFAULT NULL,
        id_inst_orig_in        IN p1_tracking.id_inst_orig%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_tracking_in,
                ext_req_status_in,
                id_external_request_in,
                id_institution_in,
                id_professional_in,
                flg_type_in,
                id_prof_dest_in,
                id_dep_clin_serv_in,
                round_id_in,
                reason_code_in,
                flg_reschedule_in,
                flg_subtype_in,
                decision_urg_level_in,
                dt_tracking_tstz_in,
                id_reason_code_in,
                id_schedule_in,
                id_inst_dest_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_workflow_action_in,
                id_speciality_in,
                dt_create_in,
                id_workflow_in,
                id_inst_orig_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN p1_tracking_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_tracking         id_tracking_cc;
        l_ext_req_status      ext_req_status_cc;
        l_id_external_request id_external_request_cc;
        l_id_institution      id_institution_cc;
        l_id_professional     id_professional_cc;
        l_flg_type            flg_type_cc;
        l_id_prof_dest        id_prof_dest_cc;
        l_id_dep_clin_serv    id_dep_clin_serv_cc;
        l_round_id            round_id_cc;
        l_reason_code         reason_code_cc;
        l_flg_reschedule      flg_reschedule_cc;
        l_flg_subtype         flg_subtype_cc;
        l_decision_urg_level  decision_urg_level_cc;
        l_dt_tracking_tstz    dt_tracking_tstz_cc;
        l_id_reason_code      id_reason_code_cc;
        l_id_schedule         id_schedule_cc;
        l_id_inst_dest        id_inst_dest_cc;
        l_create_user         create_user_cc;
        l_create_time         create_time_cc;
        l_create_institution  create_institution_cc;
        l_update_user         update_user_cc;
        l_update_time         update_time_cc;
        l_update_institution  update_institution_cc;
        l_id_workflow_action  id_workflow_action_cc;
        l_id_speciality       id_speciality_cc;
        l_dt_create           dt_create_cc;
        l_id_workflow         id_workflow_cc;
        l_id_inst_orig        id_inst_orig_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_tracking(i) := col_in(i).id_tracking;
            l_ext_req_status(i) := col_in(i).ext_req_status;
            l_id_external_request(i) := col_in(i).id_external_request;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_professional(i) := col_in(i).id_professional;
            l_flg_type(i) := col_in(i).flg_type;
            l_id_prof_dest(i) := col_in(i).id_prof_dest;
            l_id_dep_clin_serv(i) := col_in(i).id_dep_clin_serv;
            l_round_id(i) := col_in(i).round_id;
            l_reason_code(i) := col_in(i).reason_code;
            l_flg_reschedule(i) := col_in(i).flg_reschedule;
            l_flg_subtype(i) := col_in(i).flg_subtype;
            l_decision_urg_level(i) := col_in(i).decision_urg_level;
            l_dt_tracking_tstz(i) := col_in(i).dt_tracking_tstz;
            l_id_reason_code(i) := col_in(i).id_reason_code;
            l_id_schedule(i) := col_in(i).id_schedule;
            l_id_inst_dest(i) := col_in(i).id_inst_dest;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_workflow_action(i) := col_in(i).id_workflow_action;
            l_id_speciality(i) := col_in(i).id_speciality;
            l_dt_create(i) := col_in(i).dt_create;
            l_id_workflow(i) := col_in(i).id_workflow;
            l_id_inst_orig(i) := col_in(i).id_inst_orig;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE p1_tracking
                   SET ext_req_status      = nvl(l_ext_req_status(i), ext_req_status),
                       id_external_request = nvl(l_id_external_request(i), id_external_request),
                       id_institution      = nvl(l_id_institution(i), id_institution),
                       id_professional     = nvl(l_id_professional(i), id_professional),
                       flg_type            = nvl(l_flg_type(i), flg_type),
                       id_prof_dest        = nvl(l_id_prof_dest(i), id_prof_dest),
                       id_dep_clin_serv    = nvl(l_id_dep_clin_serv(i), id_dep_clin_serv),
                       round_id            = nvl(l_round_id(i), round_id),
                       reason_code         = nvl(l_reason_code(i), reason_code),
                       flg_reschedule      = nvl(l_flg_reschedule(i), flg_reschedule),
                       flg_subtype         = nvl(l_flg_subtype(i), flg_subtype),
                       decision_urg_level  = nvl(l_decision_urg_level(i), decision_urg_level),
                       dt_tracking_tstz    = nvl(l_dt_tracking_tstz(i), dt_tracking_tstz),
                       id_reason_code      = nvl(l_id_reason_code(i), id_reason_code),
                       id_schedule         = nvl(l_id_schedule(i), id_schedule),
                       id_inst_dest        = nvl(l_id_inst_dest(i), id_inst_dest),
                       create_user         = nvl(l_create_user(i), create_user),
                       create_time         = nvl(l_create_time(i), create_time),
                       create_institution  = nvl(l_create_institution(i), create_institution),
                       update_user         = nvl(l_update_user(i), update_user),
                       update_time         = nvl(l_update_time(i), update_time),
                       update_institution  = nvl(l_update_institution(i), update_institution),
                       id_workflow_action  = nvl(l_id_workflow_action(i), id_workflow_action),
                       id_speciality       = nvl(l_id_speciality(i), id_speciality),
                       dt_create           = nvl(l_dt_create(i), dt_create),
                       id_workflow         = nvl(l_id_workflow(i), id_workflow),
                       id_inst_orig        = nvl(l_id_inst_orig(i), id_inst_orig)
                 WHERE id_tracking = l_id_tracking(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE p1_tracking
                   SET ext_req_status      = l_ext_req_status(i),
                       id_external_request = l_id_external_request(i),
                       id_institution      = l_id_institution(i),
                       id_professional     = l_id_professional(i),
                       flg_type            = l_flg_type(i),
                       id_prof_dest        = l_id_prof_dest(i),
                       id_dep_clin_serv    = l_id_dep_clin_serv(i),
                       round_id            = l_round_id(i),
                       reason_code         = l_reason_code(i),
                       flg_reschedule      = l_flg_reschedule(i),
                       flg_subtype         = l_flg_subtype(i),
                       decision_urg_level  = l_decision_urg_level(i),
                       dt_tracking_tstz    = l_dt_tracking_tstz(i),
                       id_reason_code      = l_id_reason_code(i),
                       id_schedule         = l_id_schedule(i),
                       id_inst_dest        = l_id_inst_dest(i),
                       create_user         = l_create_user(i),
                       create_time         = l_create_time(i),
                       create_institution  = l_create_institution(i),
                       update_user         = l_update_user(i),
                       update_time         = l_update_time(i),
                       update_institution  = l_update_institution(i),
                       id_workflow_action  = l_id_workflow_action(i),
                       id_speciality       = l_id_speciality(i),
                       dt_create           = l_dt_create(i),
                       id_workflow         = l_id_workflow(i),
                       id_inst_orig        = l_id_inst_orig(i)
                 WHERE id_tracking = l_id_tracking(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN p1_tracking_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE P1_TRACKING
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE P1_TRACKING
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE P1_TRACKING set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE P1_TRACKING set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_tracking_in  IN p1_tracking.id_tracking%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM p1_tracking
         WHERE id_tracking = id_tracking_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_tracking_in  IN p1_tracking.id_tracking%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_tracking_in => id_tracking_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_TRACKING
    PROCEDURE del_id_tracking
    (
        id_tracking_in  IN p1_tracking.id_tracking%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM p1_tracking
         WHERE id_tracking = id_tracking_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_tracking;

    -- Delete all rows for primary key column ID_TRACKING
    PROCEDURE del_id_tracking
    (
        id_tracking_in  IN p1_tracking.id_tracking%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_tracking(id_tracking_in => id_tracking_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_id_tracking;

    PROCEDURE del_ert_dcs_fk
    (
        id_dep_clin_serv_in IN p1_tracking.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM p1_tracking
         WHERE id_dep_clin_serv = del_ert_dcs_fk.id_dep_clin_serv_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ert_dcs_fk;

    PROCEDURE del_ert_dcs_fk
    (
        id_dep_clin_serv_in IN p1_tracking.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ert_dcs_fk(id_dep_clin_serv_in => id_dep_clin_serv_in,
                       handle_error_in     => handle_error_in,
                       rows_out            => rows_out);
    END del_ert_dcs_fk;

    PROCEDURE del_ert_ertx_fk
    (
        id_external_request_in IN p1_tracking.id_external_request%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM p1_tracking
         WHERE id_external_request = del_ert_ertx_fk.id_external_request_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ert_ertx_fk;

    PROCEDURE del_ert_ertx_fk
    (
        id_external_request_in IN p1_tracking.id_external_request%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ert_ertx_fk(id_external_request_in => id_external_request_in,
                        handle_error_in        => handle_error_in,
                        rows_out               => rows_out);
    END del_ert_ertx_fk;

    PROCEDURE del_ert_inst_fk
    (
        id_institution_in IN p1_tracking.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM p1_tracking
         WHERE id_institution = del_ert_inst_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ert_inst_fk;

    PROCEDURE del_ert_inst_fk
    (
        id_institution_in IN p1_tracking.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ert_inst_fk(id_institution_in => id_institution_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_ert_inst_fk;

    PROCEDURE del_ert_prof_fk
    (
        id_professional_in IN p1_tracking.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM p1_tracking
         WHERE id_professional = del_ert_prof_fk.id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ert_prof_fk;

    PROCEDURE del_ert_prof_fk
    (
        id_professional_in IN p1_tracking.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ert_prof_fk(id_professional_in => id_professional_in,
                        handle_error_in    => handle_error_in,
                        rows_out           => rows_out);
    END del_ert_prof_fk;

    PROCEDURE del_ert_prof_fk2
    (
        id_prof_dest_in IN p1_tracking.id_prof_dest%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM p1_tracking
         WHERE id_prof_dest = del_ert_prof_fk2.id_prof_dest_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ert_prof_fk2;

    PROCEDURE del_ert_prof_fk2
    (
        id_prof_dest_in IN p1_tracking.id_prof_dest%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ert_prof_fk2(id_prof_dest_in => id_prof_dest_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ert_prof_fk2;

    PROCEDURE del_ptg_inn_fk
    (
        id_inst_dest_in IN p1_tracking.id_inst_dest%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM p1_tracking
         WHERE id_inst_dest = del_ptg_inn_fk.id_inst_dest_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptg_inn_fk;

    PROCEDURE del_ptg_inn_fk
    (
        id_inst_dest_in IN p1_tracking.id_inst_dest%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptg_inn_fk(id_inst_dest_in => id_inst_dest_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ptg_inn_fk;

    PROCEDURE del_ptg_pre_fk
    (
        id_reason_code_in IN p1_tracking.id_reason_code%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM p1_tracking
         WHERE id_reason_code = del_ptg_pre_fk.id_reason_code_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptg_pre_fk;

    PROCEDURE del_ptg_pre_fk
    (
        id_reason_code_in IN p1_tracking.id_reason_code%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptg_pre_fk(id_reason_code_in => id_reason_code_in,
                       handle_error_in   => handle_error_in,
                       rows_out          => rows_out);
    END del_ptg_pre_fk;

    PROCEDURE del_ptg_psy_fk
    (
        id_speciality_in IN p1_tracking.id_speciality%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM p1_tracking
         WHERE id_speciality = del_ptg_psy_fk.id_speciality_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptg_psy_fk;

    PROCEDURE del_ptg_psy_fk
    (
        id_speciality_in IN p1_tracking.id_speciality%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptg_psy_fk(id_speciality_in => id_speciality_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ptg_psy_fk;

    PROCEDURE del_ptg_sce_fk
    (
        id_schedule_in  IN p1_tracking.id_schedule%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM p1_tracking
         WHERE id_schedule = del_ptg_sce_fk.id_schedule_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptg_sce_fk;

    PROCEDURE del_ptg_sce_fk
    (
        id_schedule_in  IN p1_tracking.id_schedule%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptg_sce_fk(id_schedule_in => id_schedule_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ptg_sce_fk;

    PROCEDURE del_ptg_wwn_fk
    (
        id_workflow_action_in IN p1_tracking.id_workflow_action%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM p1_tracking
         WHERE id_workflow_action = del_ptg_wwn_fk.id_workflow_action_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ptg_wwn_fk;

    PROCEDURE del_ptg_wwn_fk
    (
        id_workflow_action_in IN p1_tracking.id_workflow_action%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ptg_wwn_fk(id_workflow_action_in => id_workflow_action_in,
                       handle_error_in       => handle_error_in,
                       rows_out              => rows_out);
    END del_ptg_wwn_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM P1_TRACKING';
        ELSE
            RETURN 'DELETE FROM P1_TRACKING WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'P1_TRACKING');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'P1_TRACKING');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(p1_tracking_inout IN OUT p1_tracking%ROWTYPE) IS
    BEGIN
        p1_tracking_inout.id_tracking         := NULL;
        p1_tracking_inout.ext_req_status      := NULL;
        p1_tracking_inout.id_external_request := NULL;
        p1_tracking_inout.id_institution      := NULL;
        p1_tracking_inout.id_professional     := NULL;
        p1_tracking_inout.flg_type            := NULL;
        p1_tracking_inout.id_prof_dest        := NULL;
        p1_tracking_inout.id_dep_clin_serv    := NULL;
        p1_tracking_inout.round_id            := NULL;
        p1_tracking_inout.reason_code         := NULL;
        p1_tracking_inout.flg_reschedule      := NULL;
        p1_tracking_inout.flg_subtype         := NULL;
        p1_tracking_inout.decision_urg_level  := NULL;
        p1_tracking_inout.dt_tracking_tstz    := NULL;
        p1_tracking_inout.id_reason_code      := NULL;
        p1_tracking_inout.id_schedule         := NULL;
        p1_tracking_inout.id_inst_dest        := NULL;
        p1_tracking_inout.create_user         := NULL;
        p1_tracking_inout.create_time         := NULL;
        p1_tracking_inout.create_institution  := NULL;
        p1_tracking_inout.update_user         := NULL;
        p1_tracking_inout.update_time         := NULL;
        p1_tracking_inout.update_institution  := NULL;
        p1_tracking_inout.id_workflow_action  := NULL;
        p1_tracking_inout.id_speciality       := NULL;
        p1_tracking_inout.dt_create           := NULL;
        p1_tracking_inout.id_workflow         := NULL;
        p1_tracking_inout.id_inst_orig        := NULL;
    END initrec;

    FUNCTION initrec RETURN p1_tracking%ROWTYPE IS
        l_p1_tracking p1_tracking%ROWTYPE;
    BEGIN
        RETURN l_p1_tracking;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN p1_tracking_tc IS
        data p1_tracking_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM p1_tracking
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN p1_tracking_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data p1_tracking_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_p1_tracking;
/
