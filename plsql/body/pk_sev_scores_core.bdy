/*-- Last Change Revision: $Rev: 2050537 $*/
/*-- Last Change by: $Author: elisabete.bugalho $*/
/*-- Date of last change: $Date: 2022-11-18 11:47:36 +0000 (sex, 18 nov 2022) $*/

CREATE OR REPLACE PACKAGE BODY pk_sev_scores_core IS

    -- Private variable declarations

    /* CAN'T TOUCH THIS */
    g_error   VARCHAR2(1000 CHAR);
    g_owner   VARCHAR2(30 CHAR);
    g_package VARCHAR2(30 CHAR);

    -- Function and procedure implementations
    PROCEDURE open_my_cursor(i_cursor IN OUT pk_sev_scores_core.p_sev_scores_param_cur) IS
    BEGIN
        IF i_cursor%ISOPEN
        THEN
            CLOSE i_cursor;
        END IF;
    
        OPEN i_cursor FOR
            SELECT 0 doc_area,
                   NULL translated_code,
                   NULL screen_name,
                   NULL flg_score_type,
                   NULL flg_write,
                   0 height,
                   'N' flg_viewer
              FROM dual
             WHERE 1 = 0;
    END;

    ----
    FUNCTION get_pat_info(i_id_episode IN NUMBER) RETURN patient%ROWTYPE IS
        l_pat patient%ROWTYPE;
    BEGIN
    
        SELECT t.id_patient, t.dt_birth
          INTO l_pat.id_patient, l_pat.dt_birth
          FROM episode e
          JOIN visit v
            ON v.id_visit = e.id_visit
          JOIN patient t
            ON t.id_patient = v.id_patient
         WHERE e.id_episode = i_id_episode;
    
        RETURN l_pat;
    
    END get_pat_info;

    /**********************************************************************************************
    **********************************************************************************************/
    FUNCTION get_epis_mtos_score_patient
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_id_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE
    ) RETURN patient.id_patient%TYPE IS
        l_id_patient patient.id_patient%TYPE;
    BEGIN
        SELECT pk_episode.get_epis_patient(i_lang => i_lang, i_prof => i_prof, i_episode => ems.id_episode)
          INTO l_id_patient
          FROM epis_mtos_score ems
         WHERE ems.id_epis_mtos_score = i_id_epis_mtos_score;
    
        RETURN l_id_patient;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_epis_mtos_score_patient;

    /**
    * Gets the configuration variables: inst, soft, department and dept
    *
    * @param   i_lang                      Professional preferred language
    * @param   i_prof                      Professional identification and its context (institution and software)
    * @param   i_episode                   Episode id
    * @param   o_inst                      institution id
    * @param   o_soft                      software id
    * @param   o_market                market id
    * @param   o_error                     Error information
    *
    * @return  TRUE if sucess, FALSE otherwise
    *
    * @author  José Silva
    * @version v2.6.0.3
    * @since   06-09-2010
    */
    FUNCTION get_cfg_vars
    (
        i_lang    IN language.id_language%TYPE,
        i_prof    IN profissional,
        o_inst    OUT institution.id_institution%TYPE,
        o_soft    OUT software.id_software%TYPE,
        o_profile OUT profile_template.id_profile_template%TYPE,
        o_market  OUT market.id_market%TYPE,
        o_error   OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(30) := 'GET_CFG_VARS';
        --
    
        e_cfg_vars_not_defined EXCEPTION;
    
        l_id_market  market.id_market%TYPE;
        l_id_profile profile_template.id_profile_template%TYPE;
    
    BEGIN
        g_error := 'Init';
        pk_alertlog.log_info(text => g_error, object_name => g_package, sub_object_name => l_func_name);
    
        g_error := 'GET ID_MARKET';
        pk_alertlog.log_info(text => g_error, object_name => g_package, sub_object_name => l_func_name);
        l_id_market := pk_utils.get_institution_market(i_lang => i_lang, i_id_institution => i_prof.institution);
    
        g_error := 'GET PROFILE TEMPLATE';
        pk_alertlog.log_info(text => g_error, object_name => g_package, sub_object_name => l_func_name);
        l_id_profile := pk_prof_utils.get_prof_profile_template(i_prof => i_prof);
    
        BEGIN
            g_error := 'GET SCORES CFG_VARS';
            pk_alertlog.log_info(text => g_error, object_name => g_package, sub_object_name => l_func_name);
        
            SELECT id_institution, id_software, id_profile_template, id_market
              INTO o_inst, o_soft, o_profile, o_market
              FROM (SELECT msi.id_institution,
                           nvl(msi.id_software, mk.id_software) id_software,
                           msi.id_profile_template,
                           mk.id_market,
                           row_number() over(ORDER BY decode(msi.id_institution, i_prof.institution, 1, 2), decode(msi.id_software, i_prof.software, 1, decode(mk.id_software, i_prof.software, 1, 2)), decode(msi.id_profile_template, l_id_profile, 1, 2), decode(nvl(mk.id_market, 0), l_id_market, 1, 2)) line_number
                      FROM mtos_score m
                      LEFT JOIN mtos_score_market mk
                        ON m.id_mtos_score = mk.id_mtos_score
                       AND mk.id_market IN (l_id_market, 0)
                       AND mk.id_software IN (i_prof.software, 0)
                      LEFT JOIN mtos_score_soft_inst msi
                        ON m.id_mtos_score = msi.id_mtos_score
                       AND msi.id_institution IN (i_prof.institution, 0)
                       AND msi.id_software IN (i_prof.software, 0)
                       AND msi.id_profile_template IN (l_id_profile, 0)
                     WHERE mk.id_market IS NOT NULL
                        OR msi.id_institution IS NOT NULL)
             WHERE line_number = 1;
        
        EXCEPTION
            WHEN no_data_found THEN
                g_error := l_func_name || ' - CFG_VAR NOT DEFINED - ' || ' ID_INST: ' || i_prof.institution ||
                           '; ID_SOFT: ' || i_prof.software || '; ID_MARKET: ' || l_id_market;
                pk_alertlog.log_debug(g_error);
                RAISE e_cfg_vars_not_defined;
        END;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang     => i_lang,
                                              i_sqlcode  => SQLCODE,
                                              i_sqlerrm  => SQLERRM,
                                              i_message  => g_error,
                                              i_owner    => g_owner,
                                              i_package  => g_package,
                                              i_function => l_func_name,
                                              o_error    => o_error);
            RETURN FALSE;
    END get_cfg_vars;

    /**
    * Gets the score description
    *
    * @param   i_lang                  Professional preferred language
    * @param   i_prof                  Professional identification and its context (institution and software)
    * @param   i_id_score              Score id
    * @param   i_code_trans            Code used for score translation
    * @param   i_code_abbrev           Code used for abbreviated translation
    * @param   i_id_score_group        Score group id
    *
    * @return  Score description
    *
    * @author  José Silva
    * @version v2.6.0.3
    * @since   07-09-2010
    */
    FUNCTION get_desc_score
    (
        i_lang           IN language.id_language%TYPE,
        i_prof           IN profissional,
        i_id_score       IN mtos_score.id_mtos_score%TYPE,
        i_code_trans     IN mtos_score.code_mtos_score%TYPE DEFAULT NULL,
        i_code_abbrev    IN mtos_score.code_mtos_score_abbrev%TYPE DEFAULT NULL,
        i_id_score_group IN mtos_score_group.id_mtos_score_group%TYPE DEFAULT NULL
    ) RETURN VARCHAR2 IS
        l_func_name VARCHAR2(30) := 'GET_DESC_SCORE';
        l_error     t_error_out;
        --
        l_desc_score  pk_translation.t_desc_translation;
        l_desc_abbrev pk_translation.t_desc_translation;
    
    BEGIN
        g_error := 'Init';
        pk_alertlog.log_info(text => g_error, object_name => g_package, sub_object_name => l_func_name);
    
        g_error := 'GET DESC_SCORE';
        pk_alertlog.log_info(text => g_error, object_name => g_package, sub_object_name => l_func_name);
        IF i_id_score_group IS NOT NULL
        THEN
            SELECT pk_translation.get_translation(i_lang, m.code_mtos_score_group)
              INTO l_desc_score
              FROM mtos_score_group m
             WHERE m.id_mtos_score_group = i_id_score_group;
        ELSIF i_id_score IS NOT NULL
        THEN
            SELECT pk_translation.get_translation(i_lang, m.code_mtos_score),
                   pk_translation.get_translation(i_lang, m.code_mtos_score_abbrev)
              INTO l_desc_score, l_desc_abbrev
              FROM mtos_score m
             WHERE m.id_mtos_score = i_id_score;
        ELSE
            l_desc_score  := pk_translation.get_translation(i_lang, i_code_trans);
            l_desc_abbrev := pk_translation.get_translation(i_lang, i_code_abbrev);
        END IF;
    
        IF l_desc_abbrev IS NOT NULL
        THEN
            l_desc_score := l_desc_score || ' (' || l_desc_abbrev || ')';
        END IF;
    
        RETURN l_desc_score;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang     => i_lang,
                                              i_sqlcode  => SQLCODE,
                                              i_sqlerrm  => SQLERRM,
                                              i_message  => g_error,
                                              i_owner    => g_owner,
                                              i_package  => g_package,
                                              i_function => l_func_name,
                                              o_error    => l_error);
            RETURN '###ERROR###';
    END get_desc_score;

    /**********************************************************************************************
    * Check if episode has any saved score in EPIS_MTOS_SCORE.
    * If so, the DETAIL button is activated.
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_id_episode         Episode ID
    * @param o_flg_detail         (Y) Activate detail button  (N) Inactivate
    * @param o_error              Error message
    *                        
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            José Brito
    * @version           1.0  
    * @since             2009/07/08
    **********************************************************************************************/
    FUNCTION check_flg_detail
    (
        i_lang       IN language.id_language%TYPE,
        i_prof       IN profissional,
        i_id_episode IN episode.id_episode%TYPE,
        o_flg_detail OUT VARCHAR2,
        o_error      OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200) := 'CHECK_FLG_DETAIL';
    BEGIN
        g_error := 'CHECK EXISTING SCORES'; -- If the episode has saved scores, activate the DETAIL button
        pk_alertlog.log_debug(g_error);
        SELECT decode(COUNT(*), 0, 'N', 'Y')
          INTO o_flg_detail
          FROM epis_mtos_score ems
         WHERE ems.id_episode = i_id_episode;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
    END check_flg_detail;

    /**********************************************************************************************
    * Formats a given total value according to the rules of the specified score in 'internal_name'.
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_value              Score value
    * @param i_internal_name      Score internal name
    * @param i_epis_mtos_score    Score evaluation id
    *                        
    * @return            Formatted string
    *
    * @author            José Brito
    * @version           1.0  
    * @since             2009/07/08
    **********************************************************************************************/
    FUNCTION get_formatted_total
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_value           IN NUMBER,
        i_internal_name   IN mtos_param.internal_name%TYPE,
        i_epis_mtos_score IN epis_mtos_param.id_epis_mtos_score%TYPE DEFAULT NULL,
        i_id_mtos_param   IN mtos_param.id_mtos_param%TYPE DEFAULT NULL
    ) RETURN VARCHAR2 IS
        l_formatted_total VARCHAR2(2000);
        l_value           NUMBER;
    
        l_score_unit            VARCHAR2(400);
        l_score_color           VARCHAR2(400);
        l_registered_value_desc VARCHAR2(2000);
    BEGIN
    
        IF i_value IS NULL
        THEN
            RETURN NULL;
        ELSE
            CASE i_internal_name
                WHEN pk_sev_scores_constant.g_param_type_msts THEN
                    l_formatted_total := TRIM(pk_utils.to_str(i_value,
                                                              i_prof,
                                                              pk_sev_scores_constant.g_format_decimal1_mask));
                WHEN pk_sev_scores_constant.g_param_type_triss_total_p THEN
                    l_formatted_total := TRIM(pk_utils.to_str(i_value,
                                                              i_prof,
                                                              pk_sev_scores_constant.g_format_decimal1_mask)) || '%';
                WHEN pk_sev_scores_constant.g_param_type_triss_total_b THEN
                    l_formatted_total := TRIM(pk_utils.to_str(i_value,
                                                              i_prof,
                                                              pk_sev_scores_constant.g_format_decimal1_mask)) || '%';
                WHEN pk_sev_scores_constant.g_param_type_rts_total THEN
                    l_formatted_total := TRIM(pk_utils.to_str(i_value,
                                                              i_prof,
                                                              pk_sev_scores_constant.g_format_decimal3_mask));
                WHEN pk_sev_scores_constant.g_param_type_tiss28_total THEN
                    CASE
                        WHEN (trunc(i_value) BETWEEN 1 AND 19) THEN
                            l_formatted_total := (to_char(i_value) || ' (' ||
                                                 pk_message.get_message(i_lang, 'TRAUMA_T030')) || ')';
                        WHEN (trunc(i_value) BETWEEN 20 AND 34) THEN
                            l_formatted_total := (to_char(i_value) || ' (' ||
                                                 pk_message.get_message(i_lang, 'TRAUMA_T031')) || ')';
                        WHEN (trunc(i_value) BETWEEN 35 AND 60) THEN
                            l_formatted_total := (to_char(i_value) || ' (' ||
                                                 pk_message.get_message(i_lang, 'TRAUMA_T032')) || ')';
                        ELSE
                            l_formatted_total := (to_char(i_value) || ' (' ||
                                                 pk_message.get_message(i_lang, 'TRAUMA_T033')) || ')';
                    END CASE;
                
                WHEN pk_sev_scores_constant.g_param_type_tiss28_nc THEN
                    l_formatted_total := pk_utils.to_str(i_value) || ' ' ||
                                         pk_vital_sign_core.get_um_desc(i_lang, pk_sev_scores_constant.g_nurse_care_um);
                
                WHEN pk_sev_scores_constant.g_param_type_tiss76_total THEN
                    SELECT decode(trunc((i_value) / 10),
                                  0,
                                  (to_char(i_value) || ' (' || pk_message.get_message(i_lang, 'TRAUMA_T034')) || ')',
                                  1,
                                  (to_char(i_value) || ' (' || pk_message.get_message(i_lang, 'TRAUMA_T035')) || ')',
                                  2,
                                  (to_char(i_value) || ' (' || pk_message.get_message(i_lang, 'TRAUMA_T036')) || ')',
                                  (to_char(i_value) || ' (' || pk_message.get_message(i_lang, 'TRAUMA_T037')) || ')')
                      INTO l_formatted_total
                      FROM dual;
                
                WHEN pk_sev_scores_constant.g_param_type_aldrete_total THEN
                    CASE
                        WHEN (trunc(i_value) BETWEEN 1 AND 7) THEN
                            l_formatted_total := (to_char(i_value) || ' (' ||
                                                 pk_message.get_message(i_lang, 'TRAUMA_T038') || ')');
                        ELSE
                            l_formatted_total := (to_char(i_value) || ' (' ||
                                                 pk_message.get_message(i_lang, 'TRAUMA_T039') || ')');
                    END CASE;
                
                WHEN pk_sev_scores_constant.g_param_type_crib2_dr THEN
                    l_formatted_total := TRIM(pk_utils.to_str(i_value,
                                                              i_prof,
                                                              pk_sev_scores_constant.g_format_decimal1_mask)) || '%';
                
                WHEN 'FIO2_O2_APACHE_II' THEN
                    SELECT emp.registered_value
                      INTO l_value
                      FROM epis_mtos_param emp
                     WHERE emp.id_mtos_param = pk_sev_scores_constant.g_id_apache2_o2gr_fio2
                       AND emp.id_epis_mtos_score = i_epis_mtos_score;
                
                    IF l_value >= 0.5
                    THEN
                        SELECT pk_translation.get_translation(i_lang, mpv.code_mtos_param_value)
                          INTO l_formatted_total
                          FROM mtos_param_value mpv
                         WHERE mpv.id_mtos_param = pk_sev_scores_constant.g_id_apache2_fio2
                           AND mpv.value = i_value
                           AND mpv.id_mtos_param_value IN
                               (pk_sev_scores_constant.g_o2grd_fio2_1,
                                pk_sev_scores_constant.g_o2grd_fio2_2,
                                pk_sev_scores_constant.g_o2grd_fio2_3,
                                pk_sev_scores_constant.g_o2grd_fio2_4);
                    ELSE
                        SELECT pk_translation.get_translation(i_lang, mpv.code_mtos_param_value)
                          INTO l_formatted_total
                          FROM mtos_param_value mpv
                         WHERE mpv.id_mtos_param = pk_sev_scores_constant.g_id_apache2_fio2
                           AND mpv.value = i_value
                           AND mpv.id_mtos_param_value IN
                               (pk_sev_scores_constant.g_o2grd_fio2_5,
                                pk_sev_scores_constant.g_o2grd_fio2_6,
                                pk_sev_scores_constant.g_o2grd_fio2_7,
                                pk_sev_scores_constant.g_o2grd_fio2_8);
                    END IF;
                
                WHEN 'DEATH_RATE_APACHE_II' THEN
                    l_formatted_total := TRIM(pk_utils.to_str(i_value,
                                                              i_prof,
                                                              pk_sev_scores_constant.g_format_decimal1_mask)) || '%';
                
                WHEN pk_sev_scores_constant.g_param_type_sofa_tw_mr THEN
                    l_formatted_total := pk_translation.get_translation(i_lang      => i_lang,
                                                                        i_code_mess => 'MTOS_SOFA_TW.MORTALITY_RATE.' ||
                                                                                       i_value);
                
                WHEN pk_sev_scores_constant.g_param_type_timi_risk THEN
                    --l_formatted_total := i_value || ' %';
                    l_formatted_total := to_char(get_stemi_tot_item(i_value => i_value)) || ' %';
                    --l_formatted_total := to_char(i_value) || ' %';
            
                WHEN 'NSTEMI_TOT_RISK_SCORE' THEN
                    --pk_sev_scores_constant.g_param_type_timi_risk THEN
                    l_formatted_total := i_value;
                WHEN 'NSTEMI_TOT_RISK_DEATH_01' THEN
                    --pk_sev_scores_constant.g_param_type_timi_risk THEN
                    --l_formatted_total := i_value || ' %';
                    l_formatted_total := get_nstemi_tot_item(i_value => i_value, i_idx => 2);
                WHEN 'NSTEMI_TOT_RISK_DEATH_02' THEN
                    --pk_sev_scores_constant.g_param_type_timi_risk THEN
                    l_formatted_total := get_nstemi_tot_item(i_value => i_value, i_idx => 3);
                WHEN 'NSTEMI_TOT_RISK_DEATH_03' THEN
                    --pk_sev_scores_constant.g_param_type_timi_risk THEN
                    l_formatted_total := get_nstemi_tot_item(i_value => i_value, i_idx => 4);
                WHEN pk_sev_scores_constant.g_param_apache_tw_total THEN
                    l_formatted_total := to_char(i_value) || ' - ' || pk_message.get_message(i_lang, 'TRAUMA_T041');
                ELSE
                    ------------------------------------------------------------------------------------------------------------------------------                    
                    -- ALERT-255254 - GENERAL - + NEWS SCORES / PEWS -                 
                    ------------------------------------------------------------------------------------------------------------------------------
                
                    -- GET TOTAL VALUE
                    BEGIN
                    
                        SELECT mpe.value,
                               mpe.color,
                               pk_translation.get_translation(i_lang, mpe.code_mtos_param_value) registered_value_desc
                          INTO l_score_unit, l_score_color, l_registered_value_desc
                          FROM mtos_param_value mpe
                          LEFT JOIN mtos_param_value_task mpvt
                            ON mpvt.id_mtos_param_value = mpe.id_mtos_param_value
                           AND mpvt.flg_available = pk_alert_constant.g_yes
                         WHERE mpe.id_mtos_param = i_id_mtos_param
                           AND decode(mpvt.flg_param_task_type,
                                      pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                      mpvt.min_val,
                                      NULL) <= i_value
                           AND ((decode(mpvt.flg_param_task_type,
                                        pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                        mpvt.max_val,
                                        NULL) >= i_value) OR decode(mpvt.flg_param_task_type,
                                                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                     mpvt.max_val,
                                                                     NULL) IS NULL)
                           AND mpe.flg_available = pk_alert_constant.g_yes;
                    
                        -- Specify for a individual score of 3 - RED on NEWS
                        IF i_internal_name = pk_sev_scores_constant.g_param_type_news
                           AND i_value = -1
                        THEN
                            l_formatted_total := 3 || l_registered_value_desc;
                        ELSE
                            l_formatted_total := i_value || l_registered_value_desc;
                        END IF;
                    EXCEPTION
                        WHEN OTHERS THEN
                            l_formatted_total := pk_utils.to_str(i_value, i_prof);
                    END;
                
            END CASE;
        END IF;
        RETURN l_formatted_total;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END;

    /**********************************************************************************************
    * Auxilliary method. Get the registered age in a given previously saved score.
    *
    * @param i_id_epis_mtos_score               Score ID
    *                        
    * @return            Registered Age
    *
    * @author            José Brito
    * @version           1.0  
    * @since             2009/09/21
    **********************************************************************************************/
    FUNCTION get_registered_age(i_id_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE) RETURN NUMBER IS
        l_registered_age epis_mtos_param.registered_value%TYPE;
    BEGIN
        g_error := 'GET REGISTERED AGE';
        pk_alertlog.log_debug(g_error);
        SELECT DISTINCT e2.registered_value
          INTO l_registered_age
          FROM epis_mtos_param e2, mtos_param mpm2
         WHERE e2.id_epis_mtos_score = i_id_epis_mtos_score
           AND e2.id_mtos_param = mpm2.id_mtos_param
           AND mpm2.internal_name = 'PAT_AGE';
    
        RETURN l_registered_age;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_registered_age;

    /**********************************************************************************************
    * Checks if the patient age and gender matches the score configuration
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_pat_age            Patient age
    * @param i_pat_gender         Patient gender
    * @param i_age_min            Score minimum age
    * @param i_age_max            Score maximum age
    * @param i_gender             Score gender
    *                        
    * @return            Score is within patient gender and age: Y - Yes, N - No
    *
    * @author            José Silva
    * @version           1.0  
    * @since             2010/09/09
    **********************************************************************************************/
    FUNCTION check_age_and_gender
    (
        i_lang       IN language.id_language%TYPE,
        i_prof       IN profissional,
        i_pat_age    IN NUMBER,
        i_pat_gender IN patient.gender%TYPE,
        i_age_min    IN mtos_score_soft_inst.age_min%TYPE,
        i_age_max    IN mtos_score_soft_inst.age_max%TYPE,
        i_gender     IN mtos_score_soft_inst.gender%TYPE
    ) RETURN VARCHAR2 IS
    
        l_ret VARCHAR2(1 CHAR) := pk_alert_constant.g_no;
    
    BEGIN
    
        IF (i_pat_age BETWEEN nvl(i_age_min, 0) AND nvl(i_age_max, 9999))
           OR i_pat_age IS NULL
        THEN
            l_ret := pk_alert_constant.g_yes;
        END IF;
    
        IF (i_pat_gender = i_gender OR i_gender IS NULL OR i_pat_gender IS NULL OR
           upper(i_pat_gender) NOT IN ('M', 'F') OR upper(i_gender) NOT IN ('M', 'F'))
           AND l_ret = pk_alert_constant.g_yes
        THEN
            l_ret := pk_alert_constant.g_yes;
        ELSE
            l_ret := pk_alert_constant.g_no;
        END IF;
    
        RETURN l_ret;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END check_age_and_gender;

    /**********************************************************************************************
    * Returns the patient age in years. 
    * E.g.:
    *       1) if 2 days old returns 0;
    *       2) if 16 months old returns 1;
    *       3) if 3 years old returns... 3.
    *
    * @param i_lang        Language ID
    * @param i_prof        Professional info
    * @param i_age         Patient age as shown in ALERT?
    * @param o_age         Patient age (in years)
    * @param o_error       Error message
    *                        
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            José Brito
    * @version           1.0  
    * @since             2009/07/08
    **********************************************************************************************/
    FUNCTION get_pat_age_years
    (
        i_lang  IN language.id_language%TYPE,
        i_prof  IN profissional,
        i_age   IN VARCHAR2,
        o_age   OUT NUMBER,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200) := 'GET_PAT_AGE_YEARS';
        --
        l_pat_age_years NUMBER(6);
        l_months        NUMBER(6);
        l_days_sign     sys_config.value%TYPE;
        l_months_sign   sys_config.value%TYPE;
    BEGIN
    
        IF i_age IS NULL
        THEN
            o_age := NULL;
            RETURN TRUE;
        END IF;
    
        g_error := 'GET CONFIGURATIONS';
        pk_alertlog.log_debug(g_error);
        l_days_sign   := pk_sysconfig.get_config('DAYS_SIGN', i_prof.institution, i_prof.software);
        l_months_sign := pk_sysconfig.get_config('MONTHS_SIGN', i_prof.institution, i_prof.software);
    
        g_error := 'GET PATIENT AGE (YEARS)';
        pk_alertlog.log_debug(g_error);
        IF instr(i_age, l_days_sign) <> 0
        THEN
            -- If the patient is a newborn, then it is 0 years old.
            l_pat_age_years := 0;
        
        ELSIF instr(i_age, l_months_sign) <> 0
        THEN
            -- Extract number of months of age
            l_months := to_number(substr(i_age, 1, instr(i_age, l_months_sign) - 1));
            IF l_months < 12
            THEN
                l_pat_age_years := 0;
            ELSE
                l_pat_age_years := trunc(l_months / 12);
            END IF;
        
        ELSE
            l_pat_age_years := to_number(i_age);
        END IF;
    
        o_age := l_pat_age_years;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
    END get_pat_age_years;

    /**
    * Returns all scores to be listed in the summary page
    *
    * @param   i_lang         Professional preferred language
    * @param   i_prof         Professional identification and its context (institution and software)
    * @param   i_patient      Patient ID
    * @param   i_id_episode   Episode ID
    *
    * @param   o_scores       Scores list
    *
    * @param   o_error        Error information
    *
    * @return  TRUE if sucess, FALSE otherwise
    *
    * @author  JOSE.SILVA
    * @version 2.6.0.4
    * @since   06-09-2010
    */
    FUNCTION get_sev_scores_list
    (
        i_lang       IN language.id_language%TYPE,
        i_prof       IN profissional,
        i_patient    IN patient.id_patient%TYPE,
        i_id_episode IN episode.id_episode%TYPE,
        o_scores     OUT p_sev_scores_param_cur,
        o_error      OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(30) := 'GET_SEV_SCORES_LIST';
    
        l_inst    institution.id_institution%TYPE;
        l_soft    software.id_software%TYPE;
        l_profile profile_template.id_profile_template%TYPE;
        l_market  market.id_market%TYPE;
    
        l_gender   patient.gender%TYPE;
        l_age      NUMBER;
        l_dt_birth patient.dt_birth%TYPE;
    
        l_count NUMBER := 0;
        l_height CONSTANT mtos_score_market.height%TYPE := 128;
    
    BEGIN
        g_error := 'Init';
        pk_alertlog.log_info(text => g_error, object_name => g_package, sub_object_name => l_func_name);
    
/*        IF i_id_episode IS NULL
        THEN
            SELECT COUNT(*)
              INTO l_count
              FROM epis_mtos_score ems
              JOIN episode e
                ON e.id_episode = ems.id_episode
             WHERE e.id_patient = i_patient
               AND ems.flg_status IN (pk_sev_scores_constant.g_flg_status_a, pk_sev_scores_constant.g_flg_status_c);
        END IF;*/
    
 --       IF i_id_episode IS NOT NULL
  --         OR l_count = 0
  --      THEN
            g_error := 'GET CFG_VARS';
            pk_alertlog.log_info(text => g_error, object_name => g_package, sub_object_name => l_func_name);
            IF NOT (get_cfg_vars(i_lang    => i_lang,
                                 i_prof    => i_prof,
                                 o_inst    => l_inst,
                                 o_soft    => l_soft,
                                 o_profile => l_profile,
                                 o_market  => l_market,
                                 o_error   => o_error))
            THEN
                RETURN FALSE;
            END IF;
        
            SELECT nvl(p.dt_birth, SYSDATE)
              INTO l_dt_birth
              FROM patient p
             WHERE p.id_patient = i_patient;
        
            g_error := 'GET PATIENT INFO';
            pk_alertlog.log_info(text => g_error, object_name => g_package, sub_object_name => l_func_name);
            l_gender := pk_patient.get_pat_gender(i_patient);
            l_age    := pk_patient.get_pat_age(i_lang       => i_lang,
                                               i_dt_birth   => l_dt_birth,
                                               i_age        => NULL,
                                               i_age_format => pk_sev_scores_constant.g_age_months,
                                               i_patient    => i_patient);
        
            g_error := 'GET SCORES LIST';
            pk_alertlog.log_info(text => g_error, object_name => g_package, sub_object_name => l_func_name);
            OPEN o_scores FOR
                SELECT m.id_mtos_score doc_area,
                       get_desc_score(i_lang, i_prof, NULL, m.code_mtos_score, m.code_mtos_score_abbrev) translated_code,
                       m.screen_name,
                       m.flg_score_type,
                       t_param.flg_write,
                       t_param.height,
                       nvl(m.flg_viewer, 'N') flg_viewer
                  FROM mtos_score m
                  JOIN (SELECT mk.id_mtos_score, pk_alert_constant.g_yes flg_write, mk.height
                          FROM mtos_score_market mk
                         WHERE mk.id_market = l_market
                           AND mk.id_software IN (l_soft, 0)
                           AND l_inst IS NULL
                           AND check_age_and_gender(i_lang, i_prof, l_age, l_gender, mk.age_min, mk.age_max, mk.gender) =
                               pk_alert_constant.g_yes
                        
                        UNION ALL
                        
                        SELECT msi.id_mtos_score, msi.flg_write, msi.height
                          FROM mtos_score_soft_inst msi
                         WHERE msi.id_institution = l_inst
                           AND msi.id_software = l_soft
                           AND msi.id_profile_template = l_profile
                           AND check_age_and_gender(i_lang,
                                                    i_prof,
                                                    l_age,
                                                    l_gender,
                                                    msi.age_min,
                                                    msi.age_max,
                                                    msi.gender) = pk_alert_constant.g_yes) t_param
                    ON t_param.id_mtos_score = m.id_mtos_score
                 WHERE m.flg_available = pk_alert_constant.g_yes
                 ORDER BY m.rank, translated_code;
/*        ELSE
            l_market := pk_utils.get_institution_market(i_lang, i_prof.institution);
        
            g_error := 'GET EPIS SCORES LIST';
            pk_alertlog.log_info(text => g_error, object_name => g_package, sub_object_name => l_func_name);
            OPEN o_scores FOR
                SELECT m.id_mtos_score doc_area,
                       get_desc_score(i_lang, i_prof, NULL, m.code_mtos_score, m.code_mtos_score_abbrev) translated_code,
                       m.screen_name,
                       m.flg_score_type,
                       pk_alert_constant.g_no flg_write,
                       l_height height,
                       nvl(m.flg_viewer, 'N') flg_viewer
                  FROM mtos_score m
                 WHERE EXISTS
                 (SELECT 0
                          FROM epis_mtos_score ems
                          JOIN episode e
                            ON e.id_episode = ems.id_episode
                         WHERE e.id_patient = i_patient
                           AND ems.id_mtos_score = m.id_mtos_score
                           AND ems.flg_status IN
                               (pk_sev_scores_constant.g_flg_status_a, pk_sev_scores_constant.g_flg_status_c))
                \*AND EXISTS (SELECT 0
                  FROM mtos_score_market mk
                 WHERE mk.id_market = l_market
                   AND mk.id_mtos_score = m.id_mtos_score
                UNION ALL
                SELECT 0
                  FROM mtos_score_soft_inst msi
                 WHERE msi.id_institution = i_prof.institution
                            AND msi.id_mtos_score = m.id_mtos_score)*\
                ORDER BY m.rank, translated_code;
        END IF;*/
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang     => i_lang,
                                              i_sqlcode  => SQLCODE,
                                              i_sqlerrm  => SQLERRM,
                                              i_message  => g_error,
                                              i_owner    => g_owner,
                                              i_package  => g_package,
                                              i_function => l_func_name,
                                              o_error    => o_error);
            pk_types.open_my_cursor(o_scores);
            RETURN FALSE;
    END get_sev_scores_list;

    FUNCTION get_sev_scores_list
    (
        i_lang       IN language.id_language%TYPE,
        i_prof       IN profissional,
        i_patient    IN patient.id_patient%TYPE,
        i_mtos_score IN table_number,
        i_id_episode IN episode.id_episode%TYPE,
        o_scores     OUT p_sev_scores_param_cur,
        o_error      OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(30) := 'GET_SEV_SCORES_LIST';
    
        l_inst    institution.id_institution%TYPE;
        l_soft    software.id_software%TYPE;
        l_profile profile_template.id_profile_template%TYPE;
        l_market  market.id_market%TYPE;
    
        l_gender   patient.gender%TYPE;
        l_age      NUMBER;
        l_dt_birth patient.dt_birth%TYPE;
    
    BEGIN
        g_error := 'GET CFG_VARS';
        pk_alertlog.log_info(text => g_error, object_name => g_package, sub_object_name => l_func_name);
        IF NOT (get_cfg_vars(i_lang    => i_lang,
                             i_prof    => i_prof,
                             o_inst    => l_inst,
                             o_soft    => l_soft,
                             o_profile => l_profile,
                             o_market  => l_market,
                             o_error   => o_error))
        THEN
            RETURN FALSE;
        END IF;
    
        SELECT nvl(p.dt_birth, SYSDATE)
          INTO l_dt_birth
          FROM patient p
         WHERE p.id_patient = i_patient;
    
        g_error := 'GET PATIENT INFO';
        pk_alertlog.log_info(text => g_error, object_name => g_package, sub_object_name => l_func_name);
        l_gender := pk_patient.get_pat_gender(i_patient);
        l_age    := pk_patient.get_pat_age(i_lang       => i_lang,
                                           i_dt_birth   => l_dt_birth,
                                           i_age        => NULL,
                                           i_age_format => pk_sev_scores_constant.g_age_months,
                                           i_patient    => i_patient);
    
        g_error := 'GET SCORES LIST';
        pk_alertlog.log_info(text => g_error, object_name => g_package, sub_object_name => l_func_name);
        OPEN o_scores FOR
            SELECT m.id_mtos_score doc_area,
                   get_desc_score(i_lang, i_prof, NULL, m.code_mtos_score, m.code_mtos_score_abbrev) translated_code,
                   m.screen_name,
                   m.flg_score_type,
                   t_param.flg_write,
                   t_param.height,
                   nvl(m.flg_viewer, 'N') flg_viewer
              FROM mtos_score m
              JOIN (SELECT mk.id_mtos_score, pk_alert_constant.g_yes flg_write, mk.height
                      FROM mtos_score_market mk
                     WHERE mk.id_market = l_market
                       AND mk.id_software IN (l_soft, 0)
                       AND l_inst IS NULL
                       AND check_age_and_gender(i_lang, i_prof, l_age, l_gender, mk.age_min, mk.age_max, mk.gender) =
                           pk_alert_constant.g_yes
                    
                    UNION ALL
                    
                    SELECT msi.id_mtos_score, msi.flg_write, msi.height
                      FROM mtos_score_soft_inst msi
                     WHERE msi.id_institution = l_inst
                       AND msi.id_software = l_soft
                       AND msi.id_profile_template = l_profile
                       AND check_age_and_gender(i_lang, i_prof, l_age, l_gender, msi.age_min, msi.age_max, msi.gender) =
                           pk_alert_constant.g_yes) t_param
                ON t_param.id_mtos_score = m.id_mtos_score
             WHERE m.flg_available = pk_alert_constant.g_yes
               AND m.id_mtos_score IN (SELECT /*+ opt_estimate(table t rows=0.00000000001)*/
                                        column_value
                                         FROM TABLE(i_mtos_score))
             ORDER BY m.rank, translated_code;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang     => i_lang,
                                              i_sqlcode  => SQLCODE,
                                              i_sqlerrm  => SQLERRM,
                                              i_message  => g_error,
                                              i_owner    => g_owner,
                                              i_package  => g_package,
                                              i_function => l_func_name,
                                              o_error    => o_error);
            pk_types.open_my_cursor(o_scores);
            RETURN FALSE;
    END get_sev_scores_list;

    /**
    * Returns all scores to be listed in the summary page
    *
    * @param   i_lang         Professional preferred language
    * @param   i_prof         Professional identification and its context (institution and software)
    * @param   i_patient      Patient ID
    *
    * @return  Scores list
    *
    * @author  JOSE.SILVA
    * @version 2.6.0.4
    * @since   09-09-2010
    */
    FUNCTION get_sev_scores
    (
        i_lang    IN language.id_language%TYPE,
        i_prof    IN profissional,
        i_patient IN patient.id_patient%TYPE
    ) RETURN table_number IS
        l_func_name VARCHAR2(30) := 'GET_SEV_SCORES';
        l_error     t_error_out;
        l_internal_error EXCEPTION;
    
        l_score_params table_number;
        l_num_scores   NUMBER;
        l_rec_param    p_sev_scores_param_rec;
        l_cur_param    p_sev_scores_param_cur;
    
    BEGIN
    
        l_score_params := table_number();
        l_num_scores   := 1;
    
        g_error := 'CALL TO GET_SEV_SCORES_LIST';
        pk_alertlog.log_debug(g_error);
        IF NOT get_sev_scores_list(i_lang       => i_lang,
                                   i_prof       => i_prof,
                                   i_patient    => i_patient,
                                   i_id_episode => NULL,
                                   o_scores     => l_cur_param,
                                   o_error      => l_error)
        THEN
            RAISE l_internal_error;
        END IF;
    
        g_error := 'GET CONFIGURED SCORES';
        pk_alertlog.log_debug(g_error);
        LOOP
            FETCH l_cur_param
                INTO l_rec_param;
        
            EXIT WHEN l_cur_param%NOTFOUND;
        
            l_score_params.extend;
            l_score_params(l_num_scores) := l_rec_param.doc_area;
            l_num_scores := l_num_scores + 1;
        END LOOP;
    
        RETURN l_score_params;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang     => i_lang,
                                              i_sqlcode  => SQLCODE,
                                              i_sqlerrm  => SQLERRM,
                                              i_message  => g_error,
                                              i_owner    => g_owner,
                                              i_package  => g_package,
                                              i_function => l_func_name,
                                              o_error    => l_error);
            RETURN NULL;
    END get_sev_scores;

    /**********************************************************************************************
    * Database internal function. Used to return the total value of a given score.
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_id_patient         Patient ID
    * @param i_id_mtos_param      ID's of the score parameters
    * @param i_value              Registered values for each parameter
    * @param i_flg_score_type     Type of score
    * @param i_calculate_age      (Y) Calculate patient age in years (N) Do not calculate
    * @param i_pat_age_years      Patient age (in years)
    * @param o_score_a            Total score value
    * @param o_score_b            Total score second value, if applicable (only for TRISS)
    * @param o_error              Error message
    *                        
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            José Brito
    * @version           1.0  
    * @since             2009/07/08
    **********************************************************************************************/
    FUNCTION get_total_score_internal
    (
        i_lang           IN language.id_language%TYPE,
        i_prof           IN profissional,
        i_id_patient     IN patient.id_patient%TYPE,
        i_id_mtos_param  IN table_number,
        i_value          IN table_number,
        i_flg_score_type IN mtos_score.flg_score_type%TYPE,
        i_calculate_age  IN VARCHAR2,
        i_pat_age_years  IN NUMBER,
        o_score_a        OUT NUMBER,
        o_score_b        OUT NUMBER,
        o_total          OUT pk_types.cursor_type,
        o_error          OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_TOTAL_SCORE_INTERNAL';
        l_common_error   EXCEPTION;
        l_internal_error EXCEPTION;
        l_error_msg VARCHAR2(200);
        -- Aux: Used only in ISS
        l_assign_max_value BOOLEAN := FALSE;
        l_iss_score_val    table_number := table_number();
        l_counter          NUMBER(6) := 1;
        -- Aux: Used only on CRIB II
        l_birthweight     NUMBER := 0;
        l_gestation_weeks NUMBER := 0;
        l_pat_gender      patient.gender%TYPE;
        --Aux: Used only on O2 Gradient
        l_grad_total_aux NUMBER := 0;
        -- Aux: Used only on APACHE III
        l_eyes_apache3   NUMBER(6) := 0;
        l_verbal_apache3 NUMBER(6) := 0;
        l_motor_apache3  NUMBER(6) := 0;
        l_pco2_apache3   NUMBER(6) := 0;
        l_ph_apache3     NUMBER(6, 2) := 0;
        -- Aux: Used in SI/IT/IS
        l_sev_illnes  NUMBER := 0;
        l_int_treat   NUMBER := 0;
        l_int_service NUMBER := 0;
        --Aux: Used in APACHE II TW
        l_id_mtos_param           mtos_param.id_mtos_param%TYPE;
        l_score_param             mtos_param_value.value%TYPE;
        l_id_mtos_param_exclusion mtos_param.id_mtos_param%TYPE;
        l_score_param_exclusion   mtos_param_value.value%TYPE;
        l_bp_low_score            NUMBER(5, 2) := NULL;
        l_bp_high_score           NUMBER(5, 2) := NULL;
        l_oxi_value               NUMBER(6, 2) := NULL;
        l_oxi_score               table_number := table_number();
        l_chronic                 BOOLEAN := FALSE;
        l_chronic_score           INTEGER := 0;
        l_sr_score                INTEGER := 0;
        l_risk                    NUMBER(7, 4) := NULL;
        l_diag_score              NUMBER(5, 3) := NULL;
        l_e                       NUMBER(7, 4) := NULL;
    
        -- Aux
        l_total_a NUMBER;
        l_total_b NUMBER;
    
        l_total_aux_a NUMBER(12, 4) := 0;
        l_total_aux_b NUMBER(12, 4) := 0;
        l_total_aux_c NUMBER(12, 4) := 0;
        l_score_value NUMBER := 0; --NUMBER(6) := 0;
        l_total_b_aux VARCHAR2(24 CHAR);
        l_total_c     VARCHAR2(24 CHAR);
        l_total_d     VARCHAR2(24 CHAR);
        l_coefficient mtos_multiplier.multiplier_value%TYPE := 0;
        --
        l_age_index     NUMBER(6);
        l_pat_age_years NUMBER(6);
        l_flg_parameter mtos_multiplier.flg_parameter%TYPE;
        --
        l_id_vital_sign         vital_sign.id_vital_sign%TYPE;
        l_id_content_vital_sign vital_sign.id_content%TYPE;
        l_flg_fill_type         mtos_param.flg_fill_type%TYPE;
        l_internal_name         mtos_param.internal_name%TYPE;
        l_id_unit_measure       unit_measure.id_unit_measure%TYPE;
    
        l_flg_mandatory VARCHAR2(1 CHAR);
    
        l_id_mtos_group mtos_param.id_mtos_score_group%TYPE;
    
        l_tbl_varchar table_varchar;
        tbl_param     table_number := table_number();
    
        l_id_mtos_score mtos_score.id_mtos_score%TYPE;
    
    BEGIN
    
        IF i_id_mtos_param.exists(1)
        THEN
        
            -- Check if parameters have same size
            g_error := 'CHECK ARRAY SIZES';
            IF i_id_mtos_param.count <> i_value.count
            THEN
                l_error_msg := 'INVALID ARRAY SIZES';
                RAISE l_common_error;
            END IF;
        
            IF i_flg_score_type = pk_sev_scores_constant.g_flg_score_gcs
            THEN
                ---------------------------------------------------
                -- Glasgow
                ---------------------------------------------------
                g_error := 'GET GLASGOW TOTAL';
                pk_alertlog.log_debug(g_error);
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        g_error := 'GET MTOS_PARAM INFO';
                        pk_alertlog.log_debug(g_error);
                        SELECT CASE
                                    WHEN mpt.flg_param_task_type = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                                     mpt.id_param_task
                                    ELSE
                                     NULL
                                END AS id_vital_sign,
                               mpm.flg_fill_type
                          INTO l_id_vital_sign, l_flg_fill_type
                          FROM mtos_param mpm
                          LEFT JOIN mtos_param_task mpt
                            ON mpt.id_mtos_param = mpm.id_mtos_param
                           AND mpt.flg_available = pk_alert_constant.g_yes
                         WHERE mpm.id_mtos_param = i_id_mtos_param(i);
                    
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_error_msg := 'MTOS PARAM NOT FOUND ';
                            RAISE l_common_error;
                    END;
                
                    -- If exists vital sign, get score value (except if it's the parameter with the total value).
                    -- If doesn't exists vital sign, then the parameter is 'Age',
                    -- which is not relevant to calculate the score value.
                    IF l_id_vital_sign IS NOT NULL
                       AND l_flg_fill_type <> pk_sev_scores_constant.g_flg_fill_type_t
                    THEN
                        -- For the Glasgow Coma Scale, the score values are obtained from VITAL_SIGN_DESC.
                        BEGIN
                            g_error := 'GET SCORE VALUE - GLASGOW';
                            pk_alertlog.log_debug(g_error);
                            SELECT to_number(vsd.value)
                              INTO l_score_value
                              FROM vital_sign_desc vsd
                             WHERE vsd.id_vital_sign_desc = i_value(i)
                               AND vsd.id_vital_sign = l_id_vital_sign
                               AND vsd.flg_available = pk_alert_constant.g_yes;
                        EXCEPTION
                            WHEN no_data_found THEN
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                        END;
                    
                        l_total_aux_a := l_total_aux_a + l_score_value;
                    
                    END IF;
                END LOOP;
            
                l_total_a := l_total_aux_a;
            
                -- Assign total score values
                o_score_a := l_total_a;
                o_score_b := l_total_b;
            
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_pts
            THEN
                ---------------------------------------------------
                -- Pediatric Trauma Score
                ---------------------------------------------------
                g_error := 'GET PTS TOTAL';
                pk_alertlog.log_debug(g_error);
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        g_error := 'GET MTOS_PARAM INFO';
                        pk_alertlog.log_debug(g_error);
                        SELECT CASE
                                    WHEN mpt.flg_param_task_type = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                                     mpt.id_param_task
                                    ELSE
                                     NULL
                                END AS id_vital_sign,
                               mpm.flg_fill_type
                          INTO l_id_vital_sign, l_flg_fill_type
                          FROM mtos_param mpm
                          LEFT JOIN mtos_param_task mpt
                            ON mpt.id_mtos_param = mpm.id_mtos_param
                           AND mpt.flg_available = pk_alert_constant.g_yes
                         WHERE mpm.id_mtos_param = i_id_mtos_param(i);
                    
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_error_msg := 'MTOS PARAM NOT FOUND';
                            RAISE l_common_error;
                    END;
                
                    IF l_flg_fill_type <> pk_sev_scores_constant.g_flg_fill_type_t
                       AND l_id_vital_sign IS NULL
                    THEN
                        -- Parameters with no vital sign (selected by multichoice)
                        BEGIN
                            g_error := 'GET SCORE VALUE - PTS (1)';
                            pk_alertlog.log_debug(g_error);
                            SELECT mpe.value
                              INTO l_score_value
                              FROM mtos_param_value mpe
                             WHERE mpe.id_mtos_param_value = i_value(i)
                               AND mpe.id_mtos_param = i_id_mtos_param(i)
                               AND mpe.flg_available = pk_alert_constant.g_yes;
                        EXCEPTION
                            WHEN no_data_found THEN
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                        END;
                    
                        l_total_aux_a := l_total_aux_a + l_score_value;
                    
                    ELSIF l_flg_fill_type <> pk_sev_scores_constant.g_flg_fill_type_t
                          AND l_id_vital_sign IS NOT NULL
                    THEN
                        -- Parameters that are vital signs
                        BEGIN
                            g_error := 'GET SCORE VALUE - PTS (2)';
                            pk_alertlog.log_debug(g_error);
                            SELECT mpe.value
                              INTO l_score_value
                              FROM mtos_param_value mpe
                              LEFT JOIN mtos_param_value_task mpvt
                                ON mpvt.id_mtos_param_value = mpe.id_mtos_param_value
                               AND mpvt.flg_available = pk_alert_constant.g_yes
                             WHERE mpe.id_mtos_param = i_id_mtos_param(i)
                               AND decode(mpvt.flg_param_task_type,
                                          pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                          mpvt.min_val,
                                          NULL) <= i_value(i)
                               AND ((decode(mpvt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpvt.max_val,
                                            NULL) >= i_value(i)) OR
                                   decode(mpvt.flg_param_task_type,
                                           pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                           mpvt.max_val,
                                           NULL) IS NULL)
                               AND mpe.flg_available = pk_alert_constant.g_yes;
                        EXCEPTION
                            WHEN no_data_found THEN
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                        END;
                    
                        l_total_aux_a := l_total_aux_a + l_score_value;
                    
                    END IF;
                END LOOP;
            
                l_total_a := l_total_aux_a;
            
                -- Assign total score values
                o_score_a := l_total_a;
                o_score_b := l_total_b;
            
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_rts
            THEN
                ---------------------------------------------------
                -- Revised Trauma Score
                ---------------------------------------------------
                g_error := 'GET RTS TOTAL';
                pk_alertlog.log_debug(g_error);
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        g_error := 'GET MTOS_PARAM INFO';
                        pk_alertlog.log_debug(g_error);
                        SELECT CASE
                                    WHEN mpt.flg_param_task_type = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                                     mpt.id_param_task
                                    ELSE
                                     NULL
                                END id_vital_sign,
                               mpm.flg_fill_type
                          INTO l_id_vital_sign, l_flg_fill_type
                          FROM mtos_param mpm
                          LEFT JOIN mtos_param_task mpt
                            ON mpt.id_mtos_param = mpm.id_mtos_param
                           AND mpt.flg_available = pk_alert_constant.g_yes
                         WHERE mpm.id_mtos_param = i_id_mtos_param(i);
                    
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_error_msg := 'MTOS PARAM NOT FOUND';
                            RAISE l_common_error;
                    END;
                
                    IF l_flg_fill_type <> pk_sev_scores_constant.g_flg_fill_type_t
                       AND l_id_vital_sign IS NOT NULL
                    THEN
                        BEGIN
                            -- Get score value and multiplier (coefficient) for each parameter.
                            g_error := 'GET SCORE VALUE - RTS';
                            pk_alertlog.log_debug(g_error);
                            SELECT mpe.value, mtm.multiplier_value
                              INTO l_score_value, l_coefficient
                              FROM mtos_param_value mpe, mtos_multiplier mtm, mtos_param_value_task mpvt
                             WHERE mpe.id_mtos_param = mtm.id_mtos_param
                               AND mpe.id_mtos_param = i_id_mtos_param(i)
                               AND mpvt.id_mtos_param_value(+) = mpe.id_mtos_param_value
                               AND mpvt.flg_available = pk_alert_constant.g_yes
                               AND decode(mpvt.flg_param_task_type,
                                          pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                          mpvt.min_val,
                                          NULL) <= i_value(i)
                               AND ((decode(mpvt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpvt.max_val,
                                            NULL) >= i_value(i)) OR
                                   decode(mpvt.flg_param_task_type,
                                           pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                           mpvt.max_val,
                                           NULL) IS NULL)
                               AND mtm.flg_multiplier_type = pk_sev_scores_constant.g_multiplier_normal
                               AND mpe.flg_available = pk_alert_constant.g_yes
                               AND mtm.flg_available = pk_alert_constant.g_yes;
                        EXCEPTION
                            WHEN no_data_found THEN
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                        END;
                    
                        -- RTS FORMULA:
                        -- RTS_TOTAL = <GLASGOW_COEFFICIENT> * <GLASGOW_SCORE_VALUE>
                        --           + <BloodPressureSystolic_COEFFICIENT> * <BloodPressureSystolic_SCORE_VALUE>
                        --           + <RespiratoryRate_COEFFICIENT> * <RespiratoryRate_SCORE_VALUE>
                        l_total_aux_a := l_total_aux_a + (l_coefficient * l_score_value);
                    
                    END IF;
                END LOOP;
            
                -- Save total with 3 decimal places
                l_total_a := round(l_total_aux_a, 3);
            
                -- Assign total score values
                o_score_a := l_total_a;
                o_score_b := l_total_b;
            
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_iss
            THEN
                ---------------------------------------------------
                -- Injury Severity Score
                ---------------------------------------------------
                g_error := 'GET ISS TOTAL';
                pk_alertlog.log_debug(g_error);
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        g_error := 'GET MTOS_PARAM INFO';
                        pk_alertlog.log_debug(g_error);
                        SELECT CASE
                                    WHEN mpt.flg_param_task_type = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                                     mpt.id_param_task
                                    ELSE
                                     NULL
                                END id_vital_sign,
                               mpm.flg_fill_type
                          INTO l_id_vital_sign, l_flg_fill_type
                          FROM mtos_param mpm
                          LEFT JOIN mtos_param_task mpt
                            ON mpt.id_mtos_param = mpm.id_mtos_param
                           AND mpt.flg_available = pk_alert_constant.g_yes
                         WHERE mpm.id_mtos_param = i_id_mtos_param(i);
                    
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_error_msg := 'MTOS PARAM NOT FOUND';
                            RAISE l_common_error;
                    END;
                
                    IF l_flg_fill_type <> pk_sev_scores_constant.g_flg_fill_type_t
                       AND l_id_vital_sign IS NULL
                       AND i_value(i) IS NOT NULL
                    THEN
                        -- Parameters selected by multichoice
                        BEGIN
                            g_error := 'GET SCORE VALUE - ISS';
                            pk_alertlog.log_debug(g_error);
                            SELECT mpe.value
                              INTO l_score_value
                              FROM mtos_param_value mpe
                             WHERE mpe.id_mtos_param_value = i_value(i)
                               AND mpe.id_mtos_param = i_id_mtos_param(i)
                               AND mpe.flg_available = pk_alert_constant.g_yes;
                        EXCEPTION
                            WHEN no_data_found THEN
                                l_error_msg := 'PARAMETER SCORE VALUE NOT FOUND';
                                RAISE l_common_error;
                        END;
                    
                        -- ISS FORMULA:
                        -- ISS score takes values from 0 to 75.
                        -- If score values are less then 6, the 3 highest score values are squared and added together.
                        -- If one score value is 6, the score is automatically assigned to 75.
                        IF l_score_value < pk_sev_scores_constant.g_iss_max_score_value
                        THEN
                            g_error := 'CALCULATE ISS SCORE VALUE (1)';
                            pk_alertlog.log_debug(g_error);
                            l_iss_score_val.extend;
                            l_iss_score_val(l_counter) := power(l_score_value, 2); -- Square the score value
                            l_counter := l_counter + 1; -- Increment aux counter
                        ELSIF l_score_value = pk_sev_scores_constant.g_iss_max_score_value
                        THEN
                            -- If found a value of 6, break the loop and exit.
                            g_error := 'CALCULATE ISS SCORE VALUE (2)';
                            pk_alertlog.log_debug(g_error);
                            l_assign_max_value := TRUE;
                            EXIT;
                        ELSE
                            l_error_msg := 'INVALID SCORE VALUE IN ISS';
                            RAISE l_common_error;
                        END IF;
                    END IF;
                END LOOP;
            
                IF NOT l_assign_max_value
                   AND l_iss_score_val.count >= 3
                THEN
                    -- Sum the 3 highest score values (already squared)
                    g_error := 'GET ISS TOTAL';
                    pk_alertlog.log_debug(g_error);
                    SELECT SUM(val)
                      INTO l_total_aux_a
                      FROM (SELECT column_value val
                              FROM TABLE(l_iss_score_val)
                             ORDER BY 1 DESC)
                     WHERE rownum <= 3;
                
                ELSIF l_assign_max_value
                THEN
                    g_error := 'ASSIGN MAX ISS VALUE';
                    pk_alertlog.log_debug(g_error);
                    l_total_aux_a := pk_sev_scores_constant.g_iss_max_total_value; -- Found a score value of 6, therefore assign maximum value.
                ELSE
                    l_total_aux_a := NULL; -- There aren't sufficient parameters to calculate the score
                END IF;
            
                l_total_a := l_total_aux_a;
            
                -- Assign total score values
                o_score_a := l_total_a;
                o_score_b := l_total_b;
            
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_triss
            THEN
                ---------------------------------------------------
                -- Trauma Injury Severity Score
                ---------------------------------------------------
                -- TRISS FORMULA:
                --
                -- TRISS TOTAL = 1 / (1+e^-b) , where 'b' is:
                --
                --           b = b0 + b1*(RTS_TOTAL) + b2*(ISS_TOTAL) + b3*(Age Index)
                --
                -- "Age Index" = 0 (patient < 54 years old)
                -- "Age Index" = 1 (patient >= 55 years old)
                --
                -- b0/b1/b2/b3 are coefficients with different values according to the injury mechanism (BLUNT or PENETRATING).
                -- If the patient is less than 15, BLUNT coefficients are always used.
            
                l_total_aux_a := 0;
                l_total_aux_b := 0;
            
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        g_error := 'GET MTOS_PARAM INFO';
                        pk_alertlog.log_debug(g_error);
                        SELECT mpm.flg_fill_type
                          INTO l_flg_fill_type
                          FROM mtos_param mpm
                         WHERE mpm.id_mtos_param = i_id_mtos_param(i);
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_error_msg := 'MTOS PARAM NOT FOUND';
                            RAISE l_common_error;
                    END;
                
                    IF l_flg_fill_type <> pk_sev_scores_constant.g_flg_fill_type_t
                    THEN
                        g_error := 'GET PARAM MULTIPLIER (B)';
                        pk_alertlog.log_debug(g_error);
                        SELECT mtm.multiplier_value, mtm.flg_parameter
                          INTO l_coefficient, l_flg_parameter
                          FROM mtos_multiplier mtm
                         WHERE mtm.id_mtos_param = i_id_mtos_param(i)
                           AND mtm.flg_multiplier_type = pk_sev_scores_constant.g_multiplier_blunt; -- BLUNT
                    
                        -- Process patient age:
                        -- 1) Get patient age (in years), if applicable;
                        -- 2) Calculate "Age Index"
                        IF l_flg_parameter = pk_sev_scores_constant.g_parameter_ai
                        THEN
                            IF i_calculate_age = pk_alert_constant.g_yes
                            THEN
                                g_error := 'GET PATIENT AGE (YEARS)';
                                pk_alertlog.log_debug(g_error);
                                IF NOT get_pat_age_years(i_lang  => i_lang,
                                                         i_prof  => i_prof,
                                                         i_age   => i_value(i),
                                                         o_age   => l_pat_age_years,
                                                         o_error => o_error)
                                THEN
                                    RAISE l_internal_error;
                                END IF;
                            ELSE
                                l_pat_age_years := i_pat_age_years;
                            END IF;
                        
                            IF l_pat_age_years IS NULL
                            THEN
                                -- AGE must be specified to calculate TRISS
                                l_total_aux_a := NULL;
                                l_total_aux_b := NULL;
                                EXIT; -- Exit LOOP and terminate execution
                            ELSIF l_pat_age_years < 54 -- Calculate "Age Index"
                            THEN
                                l_age_index := 0;
                            ELSE
                                l_age_index := 1;
                            END IF;
                        
                            l_total_aux_a := l_total_aux_a + (l_coefficient * l_age_index);
                        ELSE
                            l_total_aux_a := l_total_aux_a + (l_coefficient * i_value(i));
                        END IF;
                    
                        IF l_pat_age_years < 15
                        THEN
                            l_total_aux_b := l_total_aux_a; -- If patient is less than 15yo, use BLUNT coefficients
                        ELSE
                            g_error := 'GET PARAM MULTIPLIER (P)';
                            pk_alertlog.log_debug(g_error);
                            SELECT mtm.multiplier_value, mtm.flg_parameter
                              INTO l_coefficient, l_flg_parameter
                              FROM mtos_multiplier mtm
                             WHERE mtm.id_mtos_param = i_id_mtos_param(i)
                               AND mtm.flg_multiplier_type = pk_sev_scores_constant.g_multiplier_penetrating; -- PENETRATING
                        
                            IF l_flg_parameter = pk_sev_scores_constant.g_parameter_ai
                            THEN
                                l_total_aux_b := l_total_aux_b + (l_coefficient * l_age_index);
                            ELSE
                                l_total_aux_b := l_total_aux_b + (l_coefficient * i_value(i));
                            END IF;
                        END IF;
                    END IF;
                
                END LOOP;
            
                -- PROCESS B0 COEFFICIENT
                -- Get 'b0' value for BLUNT mechanism of injury
                g_error := 'GET B0 MULTIPLIER (B)';
                pk_alertlog.log_debug(g_error);
                SELECT mtm.multiplier_value + l_total_aux_a -- Sum B0 multiplier with current value
                  INTO l_total_aux_a
                  FROM mtos_multiplier mtm
                 WHERE mtm.flg_parameter = pk_sev_scores_constant.g_parameter_bz
                   AND mtm.flg_multiplier_type = pk_sev_scores_constant.g_multiplier_blunt;
            
                -- Get 'b0' value for PENETRATING mechanism of injury
                IF l_pat_age_years < 15
                THEN
                    l_total_aux_b := l_total_aux_a; -- If patient is less than 15yo, use BLUNT coefficients
                ELSE
                    g_error := 'GET B0 MULTIPLIER (P)';
                    pk_alertlog.log_debug(g_error);
                    SELECT mtm.multiplier_value + l_total_aux_b -- Sum B0 multiplier with current value
                      INTO l_total_aux_b
                      FROM mtos_multiplier mtm
                     WHERE mtm.flg_parameter = pk_sev_scores_constant.g_parameter_bz
                       AND mtm.flg_multiplier_type = pk_sev_scores_constant.g_multiplier_penetrating;
                END IF;
            
                -- PROCESS TOTAL RESULT
                l_total_a := (1 / (1 + exp(-l_total_aux_a))) * 100; -- Final score: BLUNT
                l_total_b := (1 / (1 + exp(-l_total_aux_b))) * 100; -- Final score: PENETRATING
                -- Save total with one decimal place
                l_total_a := round(l_total_a, 1);
                l_total_b := round(l_total_b, 1);
            
                -- Assign total score values
                o_score_a := l_total_a;
                o_score_b := l_total_b;
            
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_sofa
            THEN
                ---------------------------------------------------
                -- Sofa
                ---------------------------------------------------
                g_error := 'GET SOFA TOTAL';
                pk_alertlog.log_debug(g_error);
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        g_error := 'GET MTOS_PARAM INFO';
                        pk_alertlog.log_debug(g_error);
                        SELECT CASE
                                    WHEN mpt.flg_param_task_type = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                                     mpt.id_param_task
                                    ELSE
                                     NULL
                                END id_vital_sign,
                               mpm.flg_fill_type
                          INTO l_id_vital_sign, l_flg_fill_type
                          FROM mtos_param mpm
                          LEFT JOIN mtos_param_task mpt
                            ON mpt.id_mtos_param = mpm.id_mtos_param
                           AND mpt.flg_available = pk_alert_constant.g_yes
                         WHERE mpm.id_mtos_param = i_id_mtos_param(i);
                    
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_error_msg := 'MTOS PARAM NOT FOUND';
                            RAISE l_common_error;
                    END;
                
                    IF l_flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_m
                       AND l_id_vital_sign IS NULL
                    THEN
                        -- Parameters with no vital sign (selected by multichoice)
                        BEGIN
                            g_error := 'GET SCORE VALUE';
                            pk_alertlog.log_debug(g_error);
                            SELECT mpe.value
                              INTO l_score_value
                              FROM mtos_param_value mpe
                             WHERE mpe.id_mtos_param_value = i_value(i)
                               AND mpe.id_mtos_param = i_id_mtos_param(i)
                               AND mpe.flg_available = pk_alert_constant.g_yes;
                        EXCEPTION
                            WHEN no_data_found THEN
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                            
                        END;
                    
                        l_total_aux_a := l_total_aux_a + l_score_value;
                    
                    ELSIF l_id_vital_sign IS NOT NULL
                          AND l_flg_fill_type <> pk_sev_scores_constant.g_flg_fill_type_t
                    THEN
                        -- For the Glasgow Coma Scale
                        BEGIN
                        
                            g_error := 'GET SCORE VALUE - GLASGOW';
                            pk_alertlog.log_debug(g_error);
                            SELECT mpe.value
                              INTO l_score_value
                              FROM mtos_param_value mpe
                              LEFT JOIN mtos_param_value_task mpvt
                                ON mpvt.id_mtos_param_value = mpe.id_mtos_param_value
                               AND mpvt.flg_available = pk_alert_constant.g_yes
                             WHERE mpe.id_mtos_param = i_id_mtos_param(i)
                               AND decode(mpvt.flg_param_task_type,
                                          pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                          mpvt.min_val,
                                          NULL) <= i_value(i)
                               AND ((decode(mpvt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpvt.max_val,
                                            NULL) >= i_value(i)) OR
                                   decode(mpvt.flg_param_task_type,
                                           pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                           mpvt.max_val,
                                           NULL) IS NULL)
                               AND mpe.flg_available = pk_alert_constant.g_yes;
                        EXCEPTION
                            WHEN no_data_found THEN
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                        END;
                    
                        l_total_aux_a := l_total_aux_a + l_score_value;
                    
                    END IF;
                END LOOP;
            
                l_total_a := l_total_aux_a;
            
                -- Assign total score values
                o_score_a := l_total_a;
                o_score_b := l_total_b;
            
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_aldrete
            THEN
                ---------------------------------------------------
                -- Aldrete
                ---------------------------------------------------
                g_error := 'GET ALDRETE TOTAL';
                pk_alertlog.log_debug(g_error);
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        g_error := 'GET MTOS_PARAM INFO';
                        pk_alertlog.log_debug(g_error);
                        SELECT CASE
                                    WHEN mpt.flg_param_task_type = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                                     mpt.id_param_task
                                    ELSE
                                     NULL
                                END id_vital_sign,
                               mpm.flg_fill_type
                          INTO l_id_vital_sign, l_flg_fill_type
                          FROM mtos_param mpm
                          LEFT JOIN mtos_param_task mpt
                            ON mpt.id_mtos_param = mpm.id_mtos_param
                           AND mpt.flg_available = pk_alert_constant.g_yes
                         WHERE mpm.id_mtos_param = i_id_mtos_param(i);
                    
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_error_msg := 'MTOS PARAM NOT FOUND';
                            RAISE l_common_error;
                    END;
                
                    IF l_flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_m
                       AND l_id_vital_sign IS NULL
                    THEN
                        -- Parameters with no vital sign (selected by multichoice)
                        BEGIN
                            g_error := 'GET SCORE VALUE';
                            pk_alertlog.log_debug(g_error);
                            SELECT mpe.value
                              INTO l_score_value
                              FROM mtos_param_value mpe
                             WHERE mpe.id_mtos_param_value = i_value(i)
                               AND mpe.id_mtos_param = i_id_mtos_param(i)
                               AND mpe.flg_available = pk_alert_constant.g_yes;
                        EXCEPTION
                            WHEN no_data_found THEN
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                        END;
                    
                        l_total_aux_a := l_total_aux_a + l_score_value;
                    
                    END IF;
                END LOOP;
            
                l_total_a := l_total_aux_a;
            
                -- Assign total score values
                o_score_a := l_total_a;
                o_score_b := l_total_b;
            
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_si_it_is
            THEN
                ---------------------------------------------------
                -- SI/IT/IS
                ---------------------------------------------------    
                g_error := 'GET SI/IT/IS TOTAL';
                pk_alertlog.log_debug(g_error);
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        SELECT m.id_mtos_score_group
                          INTO l_id_mtos_group
                          FROM mtos_param m
                         WHERE m.id_mtos_param = i_id_mtos_param(i);
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_id_mtos_group := NULL;
                    END;
                
                    IF l_id_mtos_group = pk_sev_scores_constant.g_mtos_group_sev_illness
                    THEN
                        BEGIN
                            g_error := 'GET SCORE VALUE';
                            pk_alertlog.log_debug(g_error);
                            SELECT mpe.value
                              INTO l_score_value
                              FROM mtos_param_value mpe
                             WHERE mpe.id_mtos_param_value = i_value(i)
                               AND mpe.id_mtos_param = i_id_mtos_param(i)
                               AND mpe.flg_available = pk_alert_constant.g_yes;
                        EXCEPTION
                            WHEN no_data_found THEN
                                l_score_value := 0;
                        END;
                    
                        IF l_score_value > l_sev_illnes
                        THEN
                            l_sev_illnes := l_score_value;
                        END IF;
                    END IF;
                
                    IF l_id_mtos_group = pk_sev_scores_constant.g_mtos_group_int_treatment
                    THEN
                        BEGIN
                            g_error := 'GET SCORE VALUE';
                            pk_alertlog.log_debug(g_error);
                            SELECT mpe.value
                              INTO l_score_value
                              FROM mtos_param_value mpe
                             WHERE mpe.id_mtos_param_value = i_value(i)
                               AND mpe.id_mtos_param = i_id_mtos_param(i)
                               AND mpe.flg_available = pk_alert_constant.g_yes;
                        EXCEPTION
                            WHEN no_data_found THEN
                                l_score_value := 0;
                        END;
                    
                        IF l_score_value <> 0
                        THEN
                            l_int_treat := l_score_value;
                        END IF;
                    
                    END IF;
                
                    IF l_id_mtos_group = pk_sev_scores_constant.g_mtos_group_int_service
                    THEN
                        BEGIN
                            g_error := 'GET SCORE VALUE';
                            pk_alertlog.log_debug(g_error);
                            SELECT mpe.value
                              INTO l_score_value
                              FROM mtos_param_value mpe
                             WHERE mpe.id_mtos_param_value = i_value(i)
                               AND mpe.id_mtos_param = i_id_mtos_param(i)
                               AND mpe.flg_available = pk_alert_constant.g_yes;
                        EXCEPTION
                            WHEN no_data_found THEN
                                l_score_value := 0;
                        END;
                        l_int_service := l_int_service + l_score_value;
                    END IF;
                END LOOP;
            
                l_total_aux_a := l_sev_illnes + l_int_treat + l_int_service;
            
                -- Assign total score values
                o_score_a := l_total_aux_a;
                o_score_b := l_total_b;
            
            ELSIF i_flg_score_type IN
                  (pk_sev_scores_constant.g_flg_score_prism, pk_sev_scores_constant.g_flg_score_vte)
            THEN
                ---------------------------------------------------
                -- PRISM / VTE
                ---------------------------------------------------    
                g_error := 'GET PRISM/VTE TOTAL';
                pk_alertlog.log_debug(g_error);
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        g_error := 'GET SCORE VALUE';
                        pk_alertlog.log_debug(g_error);
                        SELECT mpe.value
                          INTO l_score_value
                          FROM mtos_param_value mpe
                         WHERE mpe.id_mtos_param_value = i_value(i)
                           AND mpe.id_mtos_param = i_id_mtos_param(i)
                           AND mpe.flg_available = pk_alert_constant.g_yes;
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_score_value := 0;
                    END;
                
                    l_total_aux_a := l_total_aux_a + l_score_value;
                
                END LOOP;
            
                -- Assign total score values
                o_score_a := l_total_aux_a;
                o_score_b := l_total_b;
            
            ELSIF i_flg_score_type IN (pk_sev_scores_constant.g_flg_score_apache_tw)
            THEN
                ---------------------------------------------------
                -- APACHE_II_TW
                ---------------------------------------------------    
                g_error := 'GET PAPACHE_II_TW TOTAL';
                pk_alertlog.log_debug(g_error);
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    l_score_param := 0;
                
                    BEGIN
                        SELECT m.id_mtos_score_group
                          INTO l_id_mtos_group
                          FROM mtos_param m
                         WHERE m.id_mtos_param = i_id_mtos_param(i);
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_id_mtos_group := NULL;
                    END;
                
                    IF l_id_mtos_group = pk_sev_scores_constant.g_mtos_group_physio
                    THEN
                        IF (i_value(i) IS NOT NULL AND
                           i_id_mtos_param(i) NOT IN
                           (pk_sev_scores_constant.g_apache_sisto_min, pk_sev_scores_constant.g_apache_sisto_max))
                        THEN
                            IF i < i_id_mtos_param.last
                            THEN
                                BEGIN
                                    g_error := 'GET SCORE VALUE';
                                    pk_alertlog.log_debug(g_error);
                                    IF l_id_mtos_param_exclusion IS NULL
                                       AND i_id_mtos_param(i) NOT IN
                                       (pk_sev_scores_constant.g_apache_diast_min,
                                            pk_sev_scores_constant.g_apache_diast_max)
                                    THEN
                                        SELECT mpv.value, mpv.id_mtos_param, mpv_e.value, mpv_e.id_mtos_param
                                          INTO l_score_param,
                                               l_id_mtos_param,
                                               l_score_param_exclusion,
                                               l_id_mtos_param_exclusion
                                          FROM mtos_param_value mpv
                                          JOIN mtos_param_value_task mpvt
                                            ON mpvt.id_mtos_param_value = mpv.id_mtos_param_value
                                          JOIN mtos_param_exclusions mpe
                                            ON mpe.id_mtos_param = mpv.id_mtos_param
                                          JOIN mtos_param_value mpv_e
                                            ON mpv_e.id_mtos_param = mpe.id_mtos_param_exclude
                                          JOIN mtos_param_value_task mpvt_e
                                            ON mpvt_e.id_mtos_param_value = mpv_e.id_mtos_param_value
                                           AND ((mpvt_e.min_val IS NOT NULL AND i_value(i + 1) >= mpvt_e.min_val) OR
                                               (mpvt_e.min_val IS NULL))
                                           AND ((mpvt_e.max_val IS NOT NULL AND i_value(i + 1) <= mpvt_e.max_val) OR
                                               (mpvt_e.max_val IS NULL))
                                         WHERE mpv.id_mtos_param = i_id_mtos_param(i)
                                           AND ((mpvt.min_val IS NOT NULL AND i_value(i) >= mpvt.min_val) OR
                                               (mpvt.min_val IS NULL))
                                           AND ((mpvt.max_val IS NOT NULL AND i_value(i) <= mpvt.max_val) OR
                                               (mpvt.max_val IS NULL));
                                    ELSIF l_id_mtos_param_exclusion IS NOT NULL
                                    THEN
                                        l_score_param             := 0;
                                        l_id_mtos_param           := NULL;
                                        l_score_param_exclusion   := NULL;
                                        l_id_mtos_param_exclusion := NULL;
                                    
                                    ELSIF i_id_mtos_param(i) = pk_sev_scores_constant.g_apache_diast_min
                                          AND i_value(i - 1) IS NOT NULL
                                    THEN
                                    
                                        l_bp_low_score := i_value(i) + ((i_value(i - 1) - i_value(i)) / 3);
                                    
                                    ELSIF i_id_mtos_param(i) = pk_sev_scores_constant.g_apache_diast_max
                                          AND i_value(i - 1) IS NOT NULL
                                    THEN
                                    
                                        l_bp_high_score := i_value(i) + ((i_value(i - 1) - i_value(i)) / 3);
                                    
                                    END IF;
                                EXCEPTION
                                    WHEN no_data_found THEN
                                        BEGIN
                                            SELECT *
                                              INTO l_score_param,
                                                   
                                                   l_id_mtos_param,
                                                   l_score_param_exclusion,
                                                   l_id_mtos_param_exclusion
                                              FROM (SELECT mpv.value,
                                                           NULL      AS id_mtos_param,
                                                           NULL      AS score_param_exclusion,
                                                           NULL      AS id_mtos_param_exclusion
                                                      FROM mtos_param_value mpv
                                                      JOIN mtos_param_value_task mpvt
                                                        ON mpvt.id_mtos_param_value = mpv.id_mtos_param_value
                                                     WHERE mpv.id_mtos_param = i_id_mtos_param(i)
                                                       AND ((mpvt.min_val IS NOT NULL AND i_value(i) >= mpvt.min_val) OR
                                                           (mpvt.min_val IS NULL))
                                                       AND ((mpvt.max_val IS NOT NULL AND i_value(i) <= mpvt.max_val) OR
                                                           (mpvt.max_val IS NULL))
                                                       AND mpv.id_mtos_param <> pk_sev_scores_constant.g_apache_gcs
                                                    
                                                    UNION
                                                    
                                                    SELECT (mpv.value - i_value(i)) AS VALUE,
                                                           NULL AS id_mtos_param,
                                                           NULL AS score_param_exclusion,
                                                           NULL AS id_mtos_param_exclusion
                                                      FROM mtos_param_value mpv
                                                      LEFT JOIN mtos_param_value_task mpvt
                                                        ON mpvt.id_mtos_param_value = mpv.id_mtos_param_value
                                                       AND ((mpvt.min_val IS NOT NULL AND i_value(i) >= mpvt.min_val) OR
                                                           (mpvt.min_val IS NULL))
                                                       AND ((mpvt.max_val IS NOT NULL AND i_value(i) <= mpvt.max_val) OR
                                                           (mpvt.max_val IS NULL))
                                                     WHERE mpv.id_mtos_param = i_id_mtos_param(i)
                                                       AND mpv.id_mtos_param = pk_sev_scores_constant.g_apache_gcs
                                                       AND i_value(i) IS NOT NULL);
                                        EXCEPTION
                                            WHEN no_data_found THEN
                                                l_score_param             := 0;
                                                l_id_mtos_param           := 0;
                                                l_score_param_exclusion   := 0;
                                                l_id_mtos_param_exclusion := 0;
                                        END;
                                END;
                            ELSE
                                BEGIN
                                    SELECT mpv.value, NULL, NULL, NULL
                                      INTO l_score_param,
                                           l_id_mtos_param,
                                           l_score_param_exclusion,
                                           l_id_mtos_param_exclusion
                                      FROM mtos_param_value mpv
                                      JOIN mtos_param_value_task mpvt
                                        ON mpvt.id_mtos_param_value = mpv.id_mtos_param_value
                                     WHERE mpv.id_mtos_param = i_id_mtos_param(i)
                                       AND ((mpvt.min_val IS NOT NULL AND i_value(i) >= mpvt.min_val) OR
                                           (mpvt.min_val IS NULL))
                                       AND ((mpvt.max_val IS NOT NULL AND i_value(i) <= mpvt.max_val) OR
                                           (mpvt.max_val IS NULL));
                                EXCEPTION
                                    WHEN no_data_found THEN
                                        l_score_param             := 0;
                                        l_id_mtos_param           := 0;
                                        l_score_param_exclusion   := 0;
                                        l_id_mtos_param_exclusion := 0;
                                END;
                            END IF;
                        ELSE
                            l_score_param := 0;
                        END IF;
                        IF l_score_param_exclusion IS NOT NULL
                           AND l_score_param_exclusion > l_score_param
                        THEN
                            l_score_value := l_score_param_exclusion;
                        ELSIF l_score_param_exclusion IS NULL
                        THEN
                            l_score_value := l_score_param;
                        ELSE
                            l_score_value := l_score_param;
                        END IF;
                    
                        l_total_aux_a := l_total_aux_a + l_score_value;
                    
                        --calculo do grupo oxigenation
                    ELSIF l_id_mtos_group = pk_sev_scores_constant.g_mtos_group_oxigenation
                    THEN
                        IF i_id_mtos_param(i) IN (pk_sev_scores_constant.g_apache_fio2_1,
                                                  pk_sev_scores_constant.g_apache_fio2_2,
                                                  pk_sev_scores_constant.g_apache_fio2_3,
                                                  pk_sev_scores_constant.g_apache_fio2_4,
                                                  pk_sev_scores_constant.g_apache_fio2_5)
                           AND i_value(i) >= 50
                           AND i_value(i + 1) IS NOT NULL
                           AND i_value(i + 2) IS NOT NULL
                        THEN
                        
                            l_oxi_value := (713 * (i_value(i) / 100)) - i_value(i + 1) - i_value(i + 2);
                        
                            l_oxi_score.extend();
                        
                            BEGIN
                                SELECT mpv.value
                                  INTO l_oxi_score(l_oxi_score.count)
                                  FROM mtos_param_value mpv
                                  JOIN mtos_param_value_task mpvt
                                    ON mpvt.id_mtos_param_value = mpv.id_mtos_param_value
                                 WHERE mpv.id_mtos_param = pk_sev_scores_constant.g_apache_fio2_1
                                   AND ((mpvt.min_val IS NOT NULL AND l_oxi_value >= mpvt.min_val) OR
                                       (mpvt.min_val IS NULL))
                                   AND ((mpvt.max_val IS NOT NULL AND l_oxi_value <= mpvt.max_val) OR
                                       (mpvt.max_val IS NULL));
                            EXCEPTION
                                WHEN no_data_found THEN
                                    l_oxi_score(l_oxi_score.count) := 0;
                            END;
                        
                        ELSIF i_id_mtos_param(i) IN (pk_sev_scores_constant.g_apache_fio2_1,
                                                     pk_sev_scores_constant.g_apache_fio2_2,
                                                     pk_sev_scores_constant.g_apache_fio2_3,
                                                     pk_sev_scores_constant.g_apache_fio2_4,
                                                     pk_sev_scores_constant.g_apache_fio2_5)
                              AND i_value(i) < 50
                              AND i_value(i + 1) IS NOT NULL
                        THEN
                            l_oxi_value := i_value(i + 1);
                            l_oxi_score.extend();
                        
                            BEGIN
                                SELECT mpv.value
                                  INTO l_oxi_score(l_oxi_score.count)
                                  FROM mtos_param_value mpv
                                  JOIN mtos_param_value_task mpvt
                                    ON mpvt.id_mtos_param_value = mpv.id_mtos_param_value
                                 WHERE mpv.id_mtos_param = pk_sev_scores_constant.g_apache_fio2_2
                                   AND ((mpvt.min_val IS NOT NULL AND l_oxi_value >= mpvt.min_val) OR
                                       (mpvt.min_val IS NULL))
                                   AND ((mpvt.max_val IS NOT NULL AND l_oxi_value <= mpvt.max_val) OR
                                       (mpvt.max_val IS NULL));
                            EXCEPTION
                                WHEN no_data_found THEN
                                    l_oxi_score(l_oxi_score.count) := 0;
                            END;
                        
                        END IF;
                    
                    ELSIF l_id_mtos_group = pk_sev_scores_constant.g_mtos_group_chronic
                          AND i_value(i) IS NOT NULL --CHRONICAL
                    THEN
                        l_chronic := TRUE;
                    ELSIF l_id_mtos_group = pk_sev_scores_constant.g_mtos_group_apache_sr
                          AND i_value(i) IS NOT NULL
                    THEN
                        IF l_chronic = TRUE
                           AND i_id_mtos_param(i) <> 1137
                        THEN
                            SELECT mpv.value
                              INTO l_chronic_score
                              FROM mtos_param_value mpv
                             WHERE mpv.id_mtos_param = i_id_mtos_param(i)
                               AND mpv.id_mtos_param_value = i_value(i)
                               AND mpv.flg_available = pk_alert_constant.g_yes
                               AND mpv.internal_name = 'SURGICAL_CONDITION';
                        END IF;
                    
                        IF i_value(i) = pk_sev_scores_constant.g_apache_planned_surgery
                        THEN
                            l_sr_score := 1;
                        END IF;
                    
                    ELSIF l_id_mtos_group = pk_sev_scores_constant.g_mtos_group_apache_diagnosis
                          AND i_value(i) IS NOT NULL
                    THEN
                        SELECT mm.multiplier_value
                          INTO l_diag_score
                          FROM mtos_multiplier mm
                         WHERE mm.flg_available = pk_alert_constant.g_yes
                           AND mm.id_mtos_param = i_id_mtos_param(i)
                           AND mm.flg_param_task_type = 'D'
                           AND mm.id_param_task = i_value(i);
                    END IF;
                END LOOP;
            
                IF (l_bp_low_score IS NOT NULL OR l_bp_high_score IS NOT NULL)
                THEN
                    SELECT mpv.value, mpv_e.value
                      INTO l_score_param, l_score_param_exclusion
                      FROM mtos_param_value mpv
                      JOIN mtos_param_value_task mpvt
                        ON mpvt.id_mtos_param_value = mpv.id_mtos_param_value
                      JOIN mtos_param_exclusions mpe
                        ON mpe.id_mtos_param = mpv.id_mtos_param
                      JOIN mtos_param_value mpv_e
                        ON mpv_e.id_mtos_param = mpe.id_mtos_param_exclude
                      JOIN mtos_param_value_task mpvt_e
                        ON mpvt_e.id_mtos_param_value = mpv_e.id_mtos_param_value
                       AND ((mpvt_e.min_val IS NOT NULL AND nvl(l_bp_high_score, l_bp_low_score) >= mpvt_e.min_val) OR
                           (mpvt_e.min_val IS NULL))
                       AND ((mpvt_e.max_val IS NOT NULL AND nvl(l_bp_high_score, l_bp_low_score) <= mpvt_e.max_val) OR
                           (mpvt_e.max_val IS NULL))
                     WHERE mpv.id_mtos_param = 1109
                       AND ((mpvt.min_val IS NOT NULL AND nvl(l_bp_low_score, l_bp_high_score) >= mpvt.min_val) OR
                           (mpvt.min_val IS NULL))
                       AND ((mpvt.max_val IS NOT NULL AND nvl(l_bp_low_score, l_bp_high_score) <= mpvt.max_val) OR
                           (mpvt.max_val IS NULL));
                
                    IF l_score_param >= l_score_param_exclusion
                    THEN
                        l_total_aux_a := l_total_aux_a + l_score_param;
                    ELSE
                        l_total_aux_a := l_total_aux_a + l_score_param_exclusion;
                    END IF;
                
                END IF;
            
                IF l_oxi_score.exists(1)
                THEN
                
                    SELECT *
                      INTO l_score_param
                      FROM (SELECT *
                              FROM TABLE(l_oxi_score)
                             ORDER BY 1 DESC)
                     WHERE rownum = 1;
                
                    l_total_aux_a := l_total_aux_a + l_score_param;
                
                END IF;
            
                l_total_aux_a := l_total_aux_a + l_chronic_score;
            
                IF l_diag_score IS NOT NULL
                   AND l_sr_score IS NOT NULL
                THEN
                    l_e    := exp(-3.517 + (l_total_aux_a * 0.146) + (0.603 * l_sr_score) + l_diag_score);
                    l_risk := (l_e / (1 + l_e)) * 100;
                END IF;
            
                -- Assign total score values
                o_score_a := l_total_aux_a;
                o_score_b := l_risk;
            
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_sofa_tw
            THEN
                ---------------------------------------------------
                -- SOFA_TW
                ---------------------------------------------------    
                g_error := 'GET SOFA_TW TOTAL';
                pk_alertlog.log_debug(g_error);
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        g_error := 'GET SCORE VALUE';
                        pk_alertlog.log_debug(g_error);
                        SELECT mpe.value
                          INTO l_score_value
                          FROM mtos_param_value mpe
                         WHERE mpe.id_mtos_param_value = i_value(i)
                           AND mpe.id_mtos_param = i_id_mtos_param(i)
                           AND mpe.flg_available = pk_alert_constant.g_yes;
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_score_value := 0;
                    END;
                
                    l_total_aux_a := l_total_aux_a + l_score_value;
                
                END LOOP;
            
                CASE
                    WHEN l_total_aux_a >= 0
                         AND l_total_aux_a <= 1 THEN
                        l_total_b := 0;
                    WHEN l_total_aux_a >= 2
                         AND l_total_aux_a <= 3 THEN
                        l_total_b := 7;
                    WHEN l_total_aux_a >= 4
                         AND l_total_aux_a <= 5 THEN
                        l_total_b := 20;
                    WHEN l_total_aux_a >= 6
                         AND l_total_aux_a <= 7 THEN
                        l_total_b := 22;
                    WHEN l_total_aux_a >= 8
                         AND l_total_aux_a <= 9 THEN
                        l_total_b := 33;
                    WHEN l_total_aux_a >= 10
                         AND l_total_aux_a <= 11 THEN
                        l_total_b := 50;
                    WHEN l_total_aux_a >= 11 THEN
                        l_total_b := 95;
                    
                END CASE;
            
                -- Assign total score values
                o_score_a := l_total_aux_a;
                o_score_b := l_total_b;
            
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_stemi
            THEN
                ---------------------------------------------------
                -- STEMI
                ---------------------------------------------------    
                g_error := 'GET STEMI TOTAL';
                pk_alertlog.log_debug(g_error);
                l_total_aux_a := 0;
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        g_error := 'GET SCORE VALUE';
                        pk_alertlog.log_debug(g_error);
                        SELECT mpe.value
                          INTO l_score_value
                          FROM mtos_param_value mpe
                         WHERE mpe.id_mtos_param_value = i_value(i)
                           AND mpe.id_mtos_param = i_id_mtos_param(i)
                           AND mpe.flg_available = pk_alert_constant.g_yes;
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_score_value := 0;
                    END;
                
                    l_total_aux_a := l_total_aux_a + nvl(l_score_value, 0);
                
                END LOOP;
            
                l_total_b := get_stemi_tot_item(i_value => l_total_aux_a);
                /*
                CASE
                    WHEN l_total_aux_a = 0 THEN
                        l_total_b := 0.8;
                    WHEN l_total_aux_a = 1 THEN
                        l_total_b := 1.6;
                    WHEN l_total_aux_a = 2 THEN
                        l_total_b := 2.2;
                    WHEN l_total_aux_a = 3 THEN
                        l_total_b := 4.4;
                    WHEN l_total_aux_a = 4 THEN
                        l_total_b := 7.3;
                    WHEN l_total_aux_a = 5 THEN
                        l_total_b := 12.4;
                    WHEN l_total_aux_a = 6 THEN
                        l_total_b := 16.1;
                    WHEN l_total_aux_a = 7 THEN
                        l_total_b := 23.4;
                    WHEN l_total_aux_a = 8 THEN
                        l_total_b := 26.8;
                    WHEN l_total_aux_a > 8 THEN
                        l_total_b := 35.9;
                END CASE;
                */
            
                -- Assign total score values
                o_score_a := l_total_aux_a;
                o_score_b := l_total_b;
            
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_nstemi
            THEN
            
                ---------------------------------------------------
                -- NSTEMI
                ---------------------------------------------------   
                get_score_nstemi(i_id_mtos_param => i_id_mtos_param, i_value => i_value, o_total => o_total);
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_crib
            THEN
                ---------------------------------------------------
                -- Crib
                ---------------------------------------------------
                g_error := 'GET CRIB TOTAL';
                pk_alertlog.log_debug(g_error);
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        g_error := 'GET MTOS_PARAM INFO';
                        pk_alertlog.log_debug(g_error);
                        SELECT CASE
                                    WHEN mpt.flg_param_task_type = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                                     mpt.id_param_task
                                    ELSE
                                     NULL
                                END id_vital_sign,
                               mpm.flg_fill_type
                          INTO l_id_vital_sign, l_flg_fill_type
                          FROM mtos_param mpm
                          LEFT JOIN mtos_param_task mpt
                            ON mpt.id_mtos_param = mpm.id_mtos_param
                           AND mpt.flg_available = pk_alert_constant.g_yes
                         WHERE mpm.id_mtos_param = i_id_mtos_param(i);
                    
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_error_msg := 'MTOS PARAM NOT FOUND';
                            RAISE l_common_error;
                    END;
                
                    IF l_flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_m
                       AND l_id_vital_sign IS NULL
                    THEN
                        -- Parameters with no vital sign (selected by multichoice)
                        BEGIN
                            g_error := 'GET SCORE VALUE';
                            pk_alertlog.log_debug(g_error);
                            SELECT mpe.value
                              INTO l_score_value
                              FROM mtos_param_value mpe
                             WHERE mpe.id_mtos_param_value = i_value(i)
                               AND mpe.id_mtos_param = i_id_mtos_param(i)
                               AND mpe.flg_available = pk_alert_constant.g_yes;
                        EXCEPTION
                            WHEN no_data_found THEN
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                        END;
                    
                        l_total_aux_a := l_total_aux_a + l_score_value;
                    
                    END IF;
                END LOOP;
            
                l_total_a := l_total_aux_a;
            
                -- Assign total score values
                o_score_a := l_total_a;
                o_score_b := l_total_b;
            
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_crib2
            THEN
                ---------------------------------------------------
                -- Crib II
                ---------------------------------------------------
                -- CRIB II FORMULA:
                --
                -- CRIB II = e^c / (1+e^c) , where 'c' is:
                --
                --           c = c0 + c1*(CRIB_II_TOTAL)
                --
            
                l_total_aux_a := 0;
                l_total_aux_b := 0;
            
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        g_error := 'GET MTOS_PARAM INFO';
                        pk_alertlog.log_debug(g_error);
                        SELECT mpm.flg_fill_type, mpm.internal_name
                          INTO l_flg_fill_type, l_internal_name
                          FROM mtos_param mpm
                         WHERE mpm.id_mtos_param = i_id_mtos_param(i);
                    
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_error_msg := 'MTOS PARAM NOT FOUND';
                            RAISE l_common_error;
                    END;
                
                    IF l_flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_m
                       AND l_id_vital_sign IS NULL
                    THEN
                        -- Parameters with no vital sign (selected by multichoice)
                        BEGIN
                            g_error := 'GET SCORE VALUE';
                            pk_alertlog.log_debug(g_error);
                            SELECT mpe.value
                              INTO l_score_value
                              FROM mtos_param_value mpe
                             WHERE mpe.id_mtos_param_value = i_value(i)
                               AND mpe.id_mtos_param = i_id_mtos_param(i)
                               AND mpe.flg_available = pk_alert_constant.g_yes;
                        EXCEPTION
                            WHEN no_data_found THEN
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                        END;
                    
                        l_total_aux_a := l_total_aux_a + l_score_value;
                    
                    ELSIF l_flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_n
                          AND l_id_vital_sign IS NULL
                    THEN
                    
                        IF l_internal_name = 'BIRTHWEIGHT_CRIB_II'
                        THEN
                        
                            IF i_value(i) IS NOT NULL
                            THEN
                                l_birthweight := i_value(i);
                            ELSE
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                            END IF;
                        
                        ELSIF l_internal_name = 'GESTATION_CRIB_II'
                        THEN
                        
                            IF i_value(i) IS NOT NULL
                            THEN
                                l_gestation_weeks := i_value(i);
                            ELSE
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                            END IF;
                        
                        END IF;
                    
                    END IF;
                
                END LOOP;
            
                --PROCESS Birthweight and gestation values based on child gender
                SELECT pk_patient.get_pat_gender(i_id_patient)
                  INTO l_pat_gender
                  FROM dual;
            
                l_score_value := get_crib_weight_gest_aux(l_pat_gender, l_birthweight, l_gestation_weeks);
            
                l_total_aux_a := l_total_aux_a + l_score_value;
            
                -- PROCESS C1 COEFIFICIENT
                g_error := 'GET PARAM MULTIPLIER (P)';
                pk_alertlog.log_debug(g_error);
                SELECT mtm.multiplier_value, mtm.flg_parameter
                  INTO l_coefficient, l_flg_parameter
                  FROM mtos_multiplier mtm
                 WHERE mtm.id_mtos_param = pk_sev_scores_constant.g_id_crib2_total;
            
                l_total_aux_b := l_total_aux_b + (l_coefficient * l_total_aux_a);
            
                -- PROCESS C0 COEFFICIENT
                -- Get 'c0' value
                g_error := 'GET C0 MULTIPLIER (B)';
                pk_alertlog.log_debug(g_error);
                SELECT mtm.multiplier_value + l_total_aux_b -- Sum C0 multiplier with current value
                  INTO l_total_aux_b
                  FROM mtos_multiplier mtm
                 WHERE mtm.flg_parameter = pk_sev_scores_constant.g_parameter_cz;
            
                -- PROCESS TOTAL RESULT
                l_total_a := l_total_aux_a;
                l_total_b := (exp(l_total_aux_b) / (1 + exp(l_total_aux_b))) * 100;
                -- Save total with one decimal place
                l_total_b := round(l_total_b, 1);
            
                -- Assign total score values
                o_score_a := l_total_a;
                o_score_b := l_total_b;
            
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_snap
            THEN
                ---------------------------------------------------
                -- SNAP
                ---------------------------------------------------
                g_error := 'GET SNAP_INDEX TOTAL';
                pk_alertlog.log_debug(g_error);
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        g_error := 'GET MTOS_PARAM INFO';
                        pk_alertlog.log_debug(g_error);
                        SELECT CASE
                                    WHEN mpt.flg_param_task_type = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                                     mpt.id_param_task
                                    ELSE
                                     NULL
                                END AS id_vital_sign,
                               mpm.flg_fill_type,
                               mpm.internal_name
                          INTO l_id_vital_sign, l_flg_fill_type, l_internal_name
                          FROM mtos_param mpm
                          LEFT JOIN mtos_param_task mpt
                            ON mpt.id_mtos_param = mpm.id_mtos_param
                           AND mpt.flg_available = pk_alert_constant.g_yes
                         WHERE mpm.id_mtos_param = i_id_mtos_param(i);
                    
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_error_msg := 'MTOS PARAM NOT FOUND';
                            RAISE l_common_error;
                    END;
                
                    IF l_flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_l
                       AND l_id_vital_sign IS NULL
                    THEN
                    
                        IF l_internal_name = pk_sev_scores_constant.g_param_type_snap_oi
                        THEN
                        
                            l_score_value := i_value(i);
                        
                        END IF;
                    
                        l_total_aux_a := l_total_aux_a + l_score_value;
                    
                    ELSIF l_flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_m
                    THEN
                        -- Parameters with no vital sign (selected by multichoice)
                        BEGIN
                            g_error := 'GET SCORE VALUE';
                            pk_alertlog.log_debug(g_error);
                            SELECT mpe.value
                              INTO l_score_value
                              FROM mtos_param_value mpe
                             WHERE mpe.id_mtos_param_value = i_value(i)
                               AND mpe.id_mtos_param = i_id_mtos_param(i)
                               AND mpe.flg_available = pk_alert_constant.g_yes;
                        EXCEPTION
                            WHEN no_data_found THEN
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                        END;
                    
                        l_total_aux_a := l_total_aux_a + l_score_value;
                    
                    END IF;
                
                END LOOP;
            
                l_total_a := l_total_aux_a;
            
                -- Assign total score values
                o_score_a := l_total_a;
                o_score_b := l_total_b;
            
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_tiss_28
            THEN
                ---------------------------------------------------
                -- TISS 28
                ---------------------------------------------------
                g_error := 'GET OXIGEN_INDEX TOTAL';
                pk_alertlog.log_debug(g_error);
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        g_error := 'GET MTOS_PARAM INFO';
                        pk_alertlog.log_debug(g_error);
                        SELECT CASE
                                    WHEN mpt.flg_param_task_type = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                                     mpt.id_param_task
                                    ELSE
                                     NULL
                                END AS id_vital_sign,
                               mpm.flg_fill_type,
                               mpm.internal_name
                          INTO l_id_vital_sign, l_flg_fill_type, l_internal_name
                          FROM mtos_param mpm
                          LEFT JOIN mtos_param_task mpt
                            ON mpt.id_mtos_param = mpm.id_mtos_param
                           AND mpt.flg_available = pk_alert_constant.g_yes
                         WHERE mpm.id_mtos_param = i_id_mtos_param(i);
                    
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_error_msg := 'MTOS PARAM NOT FOUND';
                            RAISE l_common_error;
                    END;
                
                    IF l_internal_name = pk_sev_scores_constant.g_param_type_tiss28_nc
                    THEN
                    
                        l_total_aux_b := l_total_aux_a * pk_sev_scores_constant.g_nurse_care_multiplier;
                    ELSE
                        l_total_aux_a := i_value(i);
                    END IF;
                
                END LOOP;
            
                l_total_a := l_total_aux_a;
                l_total_b := round(l_total_aux_b, 1);
            
                -- Assign total score values
                o_score_a := l_total_a;
                o_score_b := l_total_b;
            
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_saps2
            THEN
                ---------------------------------------------------
                -- SAPS II
                ---------------------------------------------------
                g_error := 'GET SAPS_II_INDEX TOTAL';
                pk_alertlog.log_debug(g_error);
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        g_error := 'GET MTOS_PARAM INFO';
                        pk_alertlog.log_debug(g_error);
                        SELECT CASE
                                    WHEN mpt.flg_param_task_type = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                                     mpt.id_param_task
                                    ELSE
                                     NULL
                                END AS id_vital_sign,
                               mpm.flg_fill_type,
                               mpm.internal_name
                          INTO l_id_vital_sign, l_flg_fill_type, l_internal_name
                          FROM mtos_param mpm
                          LEFT JOIN mtos_param_task mpt
                            ON mpt.id_mtos_param = mpm.id_mtos_param
                           AND mpt.flg_available = pk_alert_constant.g_yes
                         WHERE mpm.id_mtos_param = i_id_mtos_param(i);
                    
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_error_msg := 'MTOS PARAM NOT FOUND';
                            RAISE l_common_error;
                            NULL;
                    END;
                
                    IF l_flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_l
                       AND l_id_vital_sign IS NULL
                    THEN
                    
                        IF l_internal_name = pk_sev_scores_constant.g_param_type_age
                        THEN
                        
                            CASE
                                WHEN (i_value(i) < 40 AND i_value(i) >= 0) THEN
                                    l_score_value := 0;
                                
                                WHEN (i_value(i) BETWEEN 40 AND 59) THEN
                                    l_score_value := 7;
                                
                                WHEN (i_value(i) BETWEEN 60 AND 69) THEN
                                    l_score_value := 12;
                                
                                WHEN (i_value(i) BETWEEN 70 AND 74) THEN
                                    l_score_value := 15;
                                
                                WHEN (i_value(i) BETWEEN 75 AND 79) THEN
                                    l_score_value := 16;
                                
                                WHEN (i_value(i) >= 80) THEN
                                    l_score_value := 18;
                                
                                ELSE
                                    l_score_value := 0;
                                
                            END CASE;
                        
                        END IF;
                    
                        l_total_aux_a := l_total_aux_a + l_score_value;
                    
                    ELSIF l_flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_m
                          AND l_id_vital_sign IS NULL
                    THEN
                        -- Parameters with no vital sign (selected by multichoice)
                        BEGIN
                            g_error := 'GET SCORE VALUE';
                            pk_alertlog.log_debug(g_error);
                            SELECT mpe.value
                              INTO l_score_value
                              FROM mtos_param_value mpe
                             WHERE mpe.id_mtos_param_value = i_value(i)
                               AND mpe.id_mtos_param = i_id_mtos_param(i)
                               AND mpe.flg_available = pk_alert_constant.g_yes;
                        EXCEPTION
                            WHEN no_data_found THEN
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                        END;
                    
                        l_total_aux_a := l_total_aux_a + l_score_value;
                    
                    ELSIF l_flg_fill_type <> pk_sev_scores_constant.g_flg_fill_type_t
                          AND l_id_vital_sign IS NOT NULL
                    THEN
                        -- Parameters that are vital signs
                        BEGIN
                            g_error := 'GET SCORE VALUE';
                            pk_alertlog.log_debug(g_error);
                            SELECT mpe.value
                              INTO l_score_value
                              FROM mtos_param_value mpe
                              LEFT JOIN mtos_param_value_task mpvt
                                ON mpvt.id_mtos_param_value = mpe.id_mtos_param_value
                               AND mpvt.flg_available = pk_alert_constant.g_yes
                             WHERE mpe.id_mtos_param = i_id_mtos_param(i)
                               AND decode(mpvt.flg_param_task_type,
                                          pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                          mpvt.min_val,
                                          NULL) <= i_value(i)
                               AND ((decode(mpvt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpvt.max_val,
                                            NULL) >= i_value(i)) OR
                                   decode(mpvt.flg_param_task_type,
                                           pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                           mpvt.max_val,
                                           NULL) IS NULL)
                               AND mpe.flg_available = pk_alert_constant.g_yes;
                        EXCEPTION
                            WHEN no_data_found THEN
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                        END;
                    
                        l_total_aux_a := l_total_aux_a + l_score_value;
                    
                    END IF;
                
                END LOOP;
            
                l_total_a := l_total_aux_a;
            
                -- Assign total score values
                o_score_a := l_total_a;
                o_score_b := l_total_b;
            
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_o2grd
            THEN
                ---------------------------------------------------
                -- (A-a) O2 Gradient
                ---------------------------------------------------
                g_error := 'GET O2 GRADIENT TOTAL';
                pk_alertlog.log_debug(g_error);
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        g_error := 'GET MTOS_PARAM INFO';
                        pk_alertlog.log_debug(g_error);
                        SELECT CASE
                                    WHEN mpt.flg_param_task_type = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                                     mpt.id_param_task
                                    ELSE
                                     NULL
                                END AS id_vital_sign,
                               mpm.flg_fill_type
                          INTO l_id_vital_sign, l_flg_fill_type
                          FROM mtos_param mpm
                          LEFT JOIN mtos_param_task mpt
                            ON mpt.id_mtos_param = mpm.id_mtos_param
                           AND mpt.flg_available = pk_alert_constant.g_yes
                         WHERE mpm.id_mtos_param = i_id_mtos_param(i);
                    
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_error_msg := 'MTOS PARAM NOT FOUND';
                            RAISE l_common_error;
                    END;
                
                    IF l_flg_fill_type <> pk_sev_scores_constant.g_flg_fill_type_t
                       AND l_id_vital_sign IS NOT NULL
                    THEN
                    
                        SELECT nvl((SELECT mtm.multiplier_value
                                     FROM mtos_multiplier mtm
                                    WHERE mtm.id_mtos_param = i_id_mtos_param(i)),
                                   0)
                          INTO l_coefficient
                          FROM dual;
                    
                        IF l_coefficient != 0
                        THEN
                            l_grad_total_aux := l_grad_total_aux + (l_coefficient * i_value(i));
                        ELSE
                            l_grad_total_aux := l_grad_total_aux - i_value(i);
                        END IF;
                    
                    END IF;
                END LOOP;
            
                -- Assign total score values
                o_score_a := l_grad_total_aux;
                o_score_b := l_total_b;
            
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_apache2
            THEN
                ---------------------------------------------------
                -- APACHE II
                ---------------------------------------------------
                -- APACHE II FORMULA:
                --
                -- APACHE II = e^d / (1+e^d) , where 'd' is:
                --
                --           d = d0 + (APACHE_II_TOTAL)*d1
                --
            
                l_total_aux_a := 0;
                l_total_aux_b := 0;
            
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        g_error := 'GET MTOS_PARAM INFO';
                        pk_alertlog.log_debug(g_error);
                        SELECT CASE
                                    WHEN mpt.flg_param_task_type = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                                     mpt.id_param_task
                                    ELSE
                                     NULL
                                END AS id_vital_sign,
                               mpm.flg_fill_type,
                               mpm.internal_name
                          INTO l_id_vital_sign, l_flg_fill_type, l_internal_name
                          FROM mtos_param mpm
                          LEFT JOIN mtos_param_task mpt
                            ON mpt.id_mtos_param = mpm.id_mtos_param
                           AND mpt.flg_available = pk_alert_constant.g_yes
                         WHERE mpm.id_mtos_param = i_id_mtos_param(i);
                    
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_error_msg := 'MTOS PARAM NOT FOUND';
                            RAISE l_common_error;
                    END;
                
                    IF l_flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_m
                       AND l_id_vital_sign IS NULL
                    THEN
                    
                        -- Parameters with no vital sign (selected by multichoice)
                        BEGIN
                            g_error := 'GET SCORE VALUE';
                            pk_alertlog.log_debug(g_error);
                            SELECT mpe.value
                              INTO l_score_value
                              FROM mtos_param_value mpe
                             WHERE mpe.id_mtos_param_value = i_value(i)
                               AND mpe.id_mtos_param = i_id_mtos_param(i)
                               AND mpe.flg_available = pk_alert_constant.g_yes;
                        EXCEPTION
                            WHEN no_data_found THEN
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                        END;
                    
                        l_total_aux_a := l_total_aux_a + l_score_value;
                    
                    ELSIF l_flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_n
                          AND l_id_vital_sign IS NOT NULL
                    THEN
                    
                        IF i_id_mtos_param(i) = pk_sev_scores_constant.g_id_apache2_temp
                        THEN
                        
                            -- Parameters that are vital signs
                            BEGIN
                                g_error := 'GET SCORE VALUE';
                                pk_alertlog.log_debug(g_error);
                                SELECT mpe.value
                                  INTO l_score_value
                                  FROM mtos_param_value mpe
                                  LEFT JOIN mtos_param_value_task mpvt
                                    ON mpvt.id_mtos_param_value = mpe.id_mtos_param_value
                                   AND mpvt.flg_available = pk_alert_constant.g_yes
                                 WHERE mpe.id_mtos_param = i_id_mtos_param(i)
                                   AND decode(mpvt.flg_param_task_type,
                                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                              mpvt.min_val,
                                              NULL) <= i_value(i)
                                   AND ((decode(mpvt.flg_param_task_type,
                                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                mpvt.max_val,
                                                NULL) >= i_value(i)) OR
                                       decode(mpvt.flg_param_task_type,
                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                               mpvt.max_val,
                                               NULL) IS NULL)
                                   AND mpe.id_unit_measure =
                                       get_vs_um_inst_um(l_id_vital_sign, i_prof.institution, i_prof.software)
                                   AND mpe.flg_available = pk_alert_constant.g_yes;
                            EXCEPTION
                                WHEN no_data_found THEN
                                    -- All parameters must be filled to return a score
                                    l_total_aux_a := NULL;
                                    EXIT;
                            END;
                        
                        ELSE
                        
                            -- Parameters that are vital signs
                            BEGIN
                                g_error := 'GET SCORE VALUE';
                                pk_alertlog.log_debug(g_error);
                                SELECT mpe.value
                                  INTO l_score_value
                                  FROM mtos_param_value mpe
                                  LEFT JOIN mtos_param_value_task mpvt
                                    ON mpvt.id_mtos_param_value = mpe.id_mtos_param_value
                                   AND mpvt.flg_available = pk_alert_constant.g_yes
                                 WHERE mpe.id_mtos_param = i_id_mtos_param(i)
                                   AND decode(mpvt.flg_param_task_type,
                                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                              mpvt.min_val,
                                              NULL) <= i_value(i)
                                   AND ((decode(mpvt.flg_param_task_type,
                                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                mpvt.max_val,
                                                NULL) >= i_value(i)) OR
                                       decode(mpvt.flg_param_task_type,
                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                               mpvt.max_val,
                                               NULL) IS NULL)
                                   AND mpe.flg_available = pk_alert_constant.g_yes;
                            EXCEPTION
                                WHEN no_data_found THEN
                                    -- All parameters must be filled to return a score
                                    l_total_aux_a := NULL;
                                    EXIT;
                            END;
                        
                        END IF;
                    
                        l_total_aux_a := l_total_aux_a + l_score_value;
                    
                    ELSIF l_flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_l
                    THEN
                    
                        IF l_internal_name = pk_sev_scores_constant.g_param_type_apache2_oxi
                        THEN
                        
                            l_total_aux_a := l_total_aux_a + i_value(i);
                        
                        ELSE
                        
                            BEGIN
                                g_error := 'GET SCORE VALUE';
                                pk_alertlog.log_debug(g_error);
                                SELECT mpe.value
                                  INTO l_score_value
                                  FROM mtos_param_value mpe
                                  LEFT JOIN mtos_param_value_task mpvt
                                    ON mpvt.id_mtos_param_value = mpe.id_mtos_param_value
                                   AND mpvt.flg_available = pk_alert_constant.g_yes
                                 WHERE mpe.id_mtos_param = i_id_mtos_param(i)
                                   AND decode(mpvt.flg_param_task_type,
                                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                              mpvt.min_val,
                                              NULL) <= i_value(i)
                                   AND ((decode(mpvt.flg_param_task_type,
                                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                mpvt.max_val,
                                                NULL) >= i_value(i)) OR
                                       decode(mpvt.flg_param_task_type,
                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                               mpvt.max_val,
                                               NULL) IS NULL)
                                   AND mpe.flg_available = pk_alert_constant.g_yes;
                            EXCEPTION
                                WHEN no_data_found THEN
                                    -- All parameters must be filled to return a score
                                    l_total_aux_a := NULL;
                                    EXIT;
                            END;
                        
                            l_total_aux_a := l_total_aux_a + l_score_value;
                        
                        END IF;
                    
                    END IF;
                
                END LOOP;
            
                -- PROCESS D1 COEFIFICIENT
                g_error := 'GET PARAM MULTIPLIER (P)';
                pk_alertlog.log_debug(g_error);
                SELECT mtm.multiplier_value, mtm.flg_parameter
                  INTO l_coefficient, l_flg_parameter
                  FROM mtos_multiplier mtm
                 WHERE mtm.id_mtos_param = pk_sev_scores_constant.g_id_apache2_total;
            
                l_total_aux_b := l_total_aux_b + (l_coefficient * l_total_aux_a);
            
                -- PROCESS D0 COEFFICIENT
                -- Get 'd0' value
                g_error := 'GET C0 MULTIPLIER (B)';
                pk_alertlog.log_debug(g_error);
                SELECT mtm.multiplier_value + l_total_aux_b -- Sum D0 multiplier with current value
                  INTO l_total_aux_b
                  FROM mtos_multiplier mtm
                 WHERE mtm.flg_parameter = pk_sev_scores_constant.g_parameter_dz;
            
                -- PROCESS TOTAL RESULT
                l_total_a := l_total_aux_a;
                l_total_b := (exp(l_total_aux_b) / (1 + exp(l_total_aux_b))) * 100;
                -- Save total with one decimal place
                l_total_b := round(l_total_b, 1);
            
                -- Assign total score values
                o_score_a := l_total_a;
                o_score_b := l_total_b;
            
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_apache3
            THEN
                ---------------------------------------------------
                -- APACHE III
                ---------------------------------------------------
                g_error := 'GET APACHE_III_INDEX TOTAL';
                pk_alertlog.log_debug(g_error);
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        g_error := 'GET MTOS_PARAM INFO';
                        pk_alertlog.log_debug(g_error);
                        SELECT CASE
                                    WHEN mpt.flg_param_task_type = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                                     mpt.id_param_task
                                    ELSE
                                     NULL
                                END AS id_vital_sign,
                               mpm.flg_fill_type,
                               mpm.internal_name
                          INTO l_id_vital_sign, l_flg_fill_type, l_internal_name
                          FROM mtos_param mpm
                          LEFT JOIN mtos_param_task mpt
                            ON mpt.id_mtos_param = mpm.id_mtos_param
                           AND mpt.flg_available = pk_alert_constant.g_yes
                         WHERE mpm.id_mtos_param = i_id_mtos_param(i);
                    
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_error_msg := 'MTOS PARAM NOT FOUND';
                            RAISE l_common_error;
                    END;
                
                    IF l_flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_l
                       AND l_id_vital_sign IS NULL
                    THEN
                    
                        IF l_internal_name = pk_sev_scores_constant.g_param_type_age
                        THEN
                        
                            CASE
                                WHEN (i_value(i) < 44 AND i_value(i) >= 0) THEN
                                    l_score_value := 0;
                                
                                WHEN (i_value(i) BETWEEN 45 AND 59) THEN
                                    l_score_value := 5;
                                
                                WHEN (i_value(i) BETWEEN 60 AND 64) THEN
                                    l_score_value := 11;
                                
                                WHEN (i_value(i) BETWEEN 65 AND 69) THEN
                                    l_score_value := 13;
                                
                                WHEN (i_value(i) BETWEEN 70 AND 74) THEN
                                    l_score_value := 16;
                                
                                WHEN (i_value(i) BETWEEN 75 AND 84) THEN
                                    l_score_value := 17;
                                
                                WHEN (i_value(i) >= 85) THEN
                                    l_score_value := 24;
                                
                                ELSE
                                    -- All parameters must be filled to return a score
                                    l_total_aux_a := NULL;
                                    EXIT;
                                
                            END CASE;
                        
                        END IF;
                    
                        l_total_aux_a := l_total_aux_a + l_score_value;
                    
                    ELSIF l_flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_m
                          AND l_id_vital_sign IS NULL
                    THEN
                    
                        IF l_internal_name = pk_sev_scores_constant.g_param_type_apache3_eyes
                        THEN
                        
                            IF i_value(i) IS NOT NULL
                            THEN
                                l_eyes_apache3 := i_value(i);
                            ELSE
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                            END IF;
                        
                        ELSIF l_internal_name = pk_sev_scores_constant.g_param_type_apache3_verb
                        THEN
                        
                            IF i_value(i) IS NOT NULL
                            THEN
                                l_verbal_apache3 := i_value(i);
                            ELSE
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                            END IF;
                        
                        ELSIF l_internal_name = pk_sev_scores_constant.g_param_type_apache3_motor
                        THEN
                        
                            IF i_value(i) IS NOT NULL
                            THEN
                                l_motor_apache3 := i_value(i);
                            ELSE
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                            END IF;
                        
                        ELSE
                        
                            -- Parameters with no vital sign (selected by multichoice)
                            BEGIN
                                g_error := 'GET SCORE VALUE';
                                pk_alertlog.log_debug(g_error);
                                SELECT mpe.value
                                  INTO l_score_value
                                  FROM mtos_param_value mpe
                                 WHERE mpe.id_mtos_param_value = i_value(i)
                                   AND mpe.id_mtos_param = i_id_mtos_param(i)
                                   AND mpe.flg_available = pk_alert_constant.g_yes;
                            EXCEPTION
                                WHEN no_data_found THEN
                                    -- All parameters must be filled to return a score
                                    l_total_aux_a := NULL;
                                    EXIT;
                            END;
                        
                            l_total_aux_a := l_total_aux_a + l_score_value;
                        
                        END IF;
                    
                    ELSIF l_flg_fill_type <> pk_sev_scores_constant.g_flg_fill_type_t
                          AND l_id_vital_sign IS NOT NULL
                    THEN
                    
                        IF l_internal_name = pk_sev_scores_constant.g_param_type_apache3_pco2
                        THEN
                        
                            IF i_value(i) IS NOT NULL
                            THEN
                                l_pco2_apache3 := i_value(i);
                            ELSE
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                            END IF;
                        
                        ELSIF l_internal_name = pk_sev_scores_constant.g_param_type_apache3_ph
                        THEN
                        
                            IF i_value(i) IS NOT NULL
                            THEN
                                l_ph_apache3 := i_value(i);
                            ELSE
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                            END IF;
                        
                        ELSIF l_internal_name = pk_sev_scores_constant.g_param_type_apache3_temp
                        THEN
                        
                            CASE
                                WHEN (i_value(i) BETWEEN 0 AND 32.9) THEN
                                    l_score_value := 20;
                                
                                WHEN (i_value(i) BETWEEN 33 AND 33.4) THEN
                                    l_score_value := 16;
                                
                                WHEN (i_value(i) BETWEEN 33.5 AND 33.9) THEN
                                    l_score_value := 13;
                                
                                WHEN (i_value(i) BETWEEN 34 AND 34.9) THEN
                                    l_score_value := 8;
                                
                                WHEN (i_value(i) BETWEEN 35 AND 35.9) THEN
                                    l_score_value := 2;
                                
                                WHEN (i_value(i) BETWEEN 36 AND 39.9) THEN
                                    l_score_value := 0;
                                
                                WHEN (i_value(i) >= 40) THEN
                                    l_score_value := 4;
                                
                                ELSE
                                    -- All parameters must be filled to return a score
                                    l_total_aux_a := NULL;
                                    EXIT;
                                
                            END CASE;
                        
                            l_total_aux_a := l_total_aux_a + l_score_value;
                        
                        ELSE
                        
                            -- Parameters that are vital signs
                            BEGIN
                                g_error := 'GET SCORE VALUE';
                                pk_alertlog.log_debug(g_error);
                                SELECT mpe.value
                                  INTO l_score_value
                                  FROM mtos_param_value mpe
                                  LEFT JOIN mtos_param_value_task mpvt
                                    ON mpvt.id_mtos_param_value = mpe.id_mtos_param_value
                                   AND mpvt.flg_available = pk_alert_constant.g_yes
                                 WHERE mpe.id_mtos_param = i_id_mtos_param(i)
                                   AND decode(mpvt.flg_param_task_type,
                                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                              mpvt.min_val,
                                              NULL) <= i_value(i)
                                   AND ((decode(mpvt.flg_param_task_type,
                                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                mpvt.max_val,
                                                NULL) >= i_value(i)) OR
                                       decode(mpvt.flg_param_task_type,
                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                               mpvt.max_val,
                                               NULL) IS NULL)
                                   AND mpe.flg_available = pk_alert_constant.g_yes;
                            EXCEPTION
                                WHEN no_data_found THEN
                                    -- All parameters must be filled to return a score
                                    l_total_aux_a := NULL;
                                    EXIT;
                            END;
                        
                            l_total_aux_a := l_total_aux_a + l_score_value;
                        
                        END IF;
                    
                    END IF;
                
                END LOOP;
            
                l_total_aux_b := get_neuro_abnormalty_total(i_lang,
                                                            i_prof,
                                                            l_eyes_apache3,
                                                            l_motor_apache3,
                                                            l_verbal_apache3);
                l_total_aux_c := get_acute_physiology_total(i_lang, i_prof, l_pco2_apache3, l_ph_apache3);
                l_total_a     := l_total_aux_a + l_total_aux_b + l_total_aux_c;
            
                -- Assign total score values
                o_score_a := l_total_a;
                o_score_b := l_total_b;
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_curb65
            THEN
            
                ---------------------------------------------------
                -- CURB65
                ---------------------------------------------------
                g_error := 'GET SNAP_INDEX TOTAL';
                pk_alertlog.log_debug(g_error);
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        g_error := 'GET MTOS_PARAM INFO';
                        pk_alertlog.log_debug(g_error);
                        SELECT CASE
                                    WHEN mpt.flg_param_task_type = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                                     mpt.id_param_task
                                    ELSE
                                     NULL
                                END AS id_vital_sign,
                               mpm.flg_fill_type,
                               mpm.internal_name
                          INTO l_id_vital_sign, l_flg_fill_type, l_internal_name
                          FROM mtos_param mpm
                          LEFT JOIN mtos_param_task mpt
                            ON mpt.id_mtos_param = mpm.id_mtos_param
                           AND mpt.flg_available = pk_alert_constant.g_yes
                         WHERE mpm.id_mtos_param = i_id_mtos_param(i);
                    
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_error_msg := 'MTOS PARAM NOT FOUND';
                            RAISE l_common_error;
                    END;
                    IF l_flg_fill_type = 'T'
                    THEN
                        l_score_value := 0;
                    ELSE
                    
                        -- Parameters with no vital sign (selected by multichoice)
                        BEGIN
                            g_error := 'GET SCORE VALUE';
                            pk_alertlog.log_debug(g_error);
                            SELECT mpe.value
                              INTO l_score_value
                              FROM mtos_param_value mpe
                             WHERE mpe.id_mtos_param_value = i_value(i)
                               AND mpe.id_mtos_param = i_id_mtos_param(i)
                               AND mpe.flg_available = pk_alert_constant.g_yes;
                        EXCEPTION
                            WHEN no_data_found THEN
                                -- All parameters must be filled to return a score
                                l_total_aux_a := NULL;
                                EXIT;
                        END;
                    END IF;
                    l_total_aux_a := l_total_aux_a + l_score_value;
                
                END LOOP;
            
                l_total_a := l_total_aux_a;
            
                -- Assign total score values
                o_score_a := l_total_a;
                o_score_b := l_total_b;
            
            ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_parkland
            THEN
                ------------------------------------------------------------------------------------------------------------------------
                -- ALERT-263204 PARKLAND
                ------------------------------------------------------------------------------------------------------------------------                
                -- Get unit measure 
                BEGIN
                
                    SELECT CASE
                                WHEN mpt.flg_param_task_type = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                                 mpt.id_param_task
                                ELSE
                                 NULL
                            END AS id_vital_sign,
                           pk_vital_sign.get_vs_um_inst(CASE
                                                             WHEN mpt.flg_param_task_type = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                                                              mpt.id_param_task
                                                             ELSE
                                                              NULL
                                                         END,
                                                         i_prof.institution,
                                                         i_prof.software)
                      INTO l_id_vital_sign, l_id_unit_measure
                      FROM mtos_param mpm
                      LEFT JOIN mtos_param_task mpt
                        ON mpt.id_mtos_param = mpm.id_mtos_param
                       AND mpt.flg_available = pk_alert_constant.g_yes
                     WHERE mpm.id_mtos_param = i_id_mtos_param(1);
                
                    IF l_id_unit_measure != pk_sev_scores_constant.g_id_unit_measure_kg
                    THEN
                        l_total_aux_a := pk_unit_measure.get_unit_mea_conversion(i_value(1),
                                                                                 l_id_unit_measure,
                                                                                 pk_sev_scores_constant.g_id_unit_measure_kg);
                    ELSE
                        l_total_aux_a := pk_unit_measure.get_unit_mea_conversion(i_value(1),
                                                                                 pk_sev_scores_constant.g_id_unit_measure_kg,
                                                                                 l_id_unit_measure);
                    END IF;
                
                EXCEPTION
                    WHEN OTHERS THEN
                        l_total_aux_a := i_value(1);
                END;
            
                l_total_a := round(l_total_aux_a * i_value(2) * 4 / 1000, 1);
                l_total_b := round((l_total_aux_a * i_value(2) * 4 / 1000) / 2, 1);
            
                o_score_a := l_total_a;
                o_score_b := l_total_b;
            
            ELSE
                ------------------------------------------------------------------------------------------------------------------------
                -- ALERT-255254 Get GENERAL SCORE without specifications and multiplier (+NEWS & +PEWS)
                ------------------------------------------------------------------------------------------------------------------------                
            
                l_total_b := 0;
                FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
                LOOP
                    BEGIN
                        SELECT CASE
                                   WHEN mpt.flg_param_task_type = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                                    mpt.id_param_task
                                   ELSE
                                    NULL
                               END id_vital_sign,
                               mpm.flg_fill_type,
                               mpm.internal_name,
                               mpm.flg_mandatory
                          INTO l_id_vital_sign, l_flg_fill_type, l_internal_name, l_flg_mandatory
                          FROM mtos_param mpm
                          LEFT JOIN (SELECT t.*
                                       FROM mtos_param_task t
                                      WHERE t.id_mtos_param = i_id_mtos_param(i)
                                        AND t.flg_available = pk_alert_constant.g_yes
                                        AND rownum = 1) mpt
                            ON mpt.id_mtos_param = mpm.id_mtos_param
                           AND mpt.flg_available = pk_alert_constant.g_yes
                         WHERE mpm.id_mtos_param = i_id_mtos_param(i);
                    
                    EXCEPTION
                        WHEN no_data_found THEN
                            l_error_msg := 'MTOS PARAM NOT FOUND';
                            RAISE l_common_error;
                    END;
                
                    IF l_flg_fill_type = 'T'
                    THEN
                        l_score_value := 0;
                    ELSE
                    
                        BEGIN
                            g_error := 'GET SCORE VALUE';
                            pk_alertlog.log_debug(g_error);
                            SELECT mpe.value
                              INTO l_score_value
                              FROM mtos_param_value mpe
                              LEFT JOIN mtos_param_value_task mpvt
                                ON mpvt.id_mtos_param_value = mpe.id_mtos_param_value
                               AND mpvt.flg_available = pk_alert_constant.g_yes
                             WHERE mpe.id_mtos_param = i_id_mtos_param(i)
                               AND decode(mpvt.flg_param_task_type,
                                          pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                          mpvt.min_val,
                                          NULL) <= i_value(i)
                               AND ((decode(mpvt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpvt.max_val,
                                            NULL) >= i_value(i)) OR
                                   decode(mpvt.flg_param_task_type,
                                           pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                           mpvt.max_val,
                                           NULL) IS NULL)
                               AND mpe.flg_available = pk_alert_constant.g_yes;
                        
                            -- NEWS - Specify case for a unit individual score of 3 
                            IF i_flg_score_type = pk_sev_scores_constant.g_flg_score_news
                            THEN
                                IF l_score_value = 3
                                THEN
                                    l_total_b := l_total_b + 1;
                                END IF;
                            END IF;
                        
                        EXCEPTION
                            WHEN no_data_found THEN
                                l_score_value := 0;
                        END;
                    
                        -- ALERT-255254 - All values must be filled to return a score         
                        -- ALERT-266704 - V.2 - All mandatory must be filled to return a score                                       
                        IF i_value(i) IS NULL
                           AND l_flg_mandatory = 'Y'
                        THEN
                            l_total_aux_a := NULL;
                        END IF;
                    
                        l_total_aux_a := l_total_aux_a + l_score_value;
                    END IF;
                
                END LOOP;
            
                -- Assign total score values
                l_total_a := l_total_aux_a;
                o_score_a := l_total_a;
                o_score_b := l_total_b;
            
            END IF;
        
        ELSE
            l_error_msg := 'INVALID PARAM - I_ID_MTOS_PARAM';
            RAISE l_common_error;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN l_internal_error THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
        WHEN l_common_error THEN
            pk_alert_exceptions.process_error(i_lang,
                                              'T_COMMON_ERROR',
                                              l_error_msg,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
    END get_total_score_internal;
    --
    /**********************************************************************************************
    * Database internal function. Used to return the total value of a given score.
    * This function is used during the screen loading, so the scores are correctly shown.
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_id_episode         Episode ID
    * @param i_id_patient         Patient ID
    * @param i_flg_score_type     Type of score   
    * @param i_total_glasgow      Glasgow total score (needed for RTS)
    * @param i_total_rts          RTS total score (needed for TRISS)
    * @param i_total_iss          ISS total score (needed for TRISS)
    * @param i_pat_age_years      Patient age (in years)
    * @param o_score_a            Total score value
    * @param o_score_b            Total score second value, if applicable (only for TRISS)
    * @param o_error              Error message
    *                        
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            José Brito
    * @version           1.0  
    * @since             2009/07/08
    **********************************************************************************************/
    FUNCTION get_total_score_aux
    (
        i_lang           IN language.id_language%TYPE,
        i_prof           IN profissional,
        i_id_episode     IN episode.id_episode%TYPE,
        i_id_patient     IN patient.id_patient%TYPE,
        i_flg_score_type IN mtos_score.flg_score_type%TYPE,
        i_total_glasgow  IN NUMBER, -- Needed for RTS
        i_total_rts      IN NUMBER, -- Needed for TRISS
        i_total_iss      IN NUMBER, -- Needed for TRISS
        i_pat_age_years  IN NUMBER,
        o_score_a        OUT NUMBER,
        o_score_b        OUT NUMBER,
        o_error          OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200) := 'GET_TOTAL_SCORE_AUX';
        l_exception EXCEPTION;
        --
        l_params table_number := table_number();
        l_values table_number := table_number();
        --
        l_counter   NUMBER(6) := 1;
        l_cur_value epis_mtos_param.registered_value%TYPE;
        --
    
        o_total pk_types.cursor_type;
    
        CURSOR c_params IS
            SELECT mpm.id_mtos_param,
                   CASE
                        WHEN mpt.flg_param_task_type = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                         mpt.id_param_task
                        ELSE
                         NULL
                    END AS id_vital_sign,
                   mpm.flg_fill_type,
                   mpm.internal_name
              FROM mtos_param mpm
              JOIN mtos_score mse
                ON mse.id_mtos_score = mpm.id_mtos_score
              LEFT JOIN mtos_param_task mpt
                ON mpt.id_mtos_param = mpm.id_mtos_param
               AND mpt.flg_available = pk_alert_constant.g_yes
             WHERE mse.flg_score_type = i_flg_score_type
               AND mpm.flg_fill_type <> pk_sev_scores_constant.g_flg_fill_type_t
               AND mpm.flg_available = pk_alert_constant.g_yes
             ORDER BY mpm.rank;
    
    BEGIN
    
        -- Get current parameter values, which can be 1) already saved values for the assessment in EPIS_MTOS_PARAM,
        -- or 2) the most recent registered value in the vital signs screen (VITAL_SIGN_READ).
        g_error := 'GET PARAM ID/VALUES';
        pk_alertlog.log_debug(g_error);
        FOR r IN c_params
        LOOP
            l_params.extend;
            l_values.extend;
        
            IF r.id_vital_sign IS NOT NULL
               AND
               r.flg_fill_type IN (pk_sev_scores_constant.g_flg_fill_type_n, pk_sev_scores_constant.g_flg_fill_type_m) -- Vital signs: numerical
            THEN
                BEGIN
                    g_error := 'GET VS PARAM VALUE';
                    pk_alertlog.log_debug(g_error);
                    SELECT decode(r.flg_fill_type,
                                  pk_sev_scores_constant.g_flg_fill_type_n,
                                  t.value,
                                  t.id_vital_sign_desc)
                      INTO l_cur_value
                      FROM (SELECT vsr.value,
                                   vsr.id_vital_sign_desc,
                                   vsr.id_episode,
                                   row_number() over(PARTITION BY id_episode ORDER BY dt_vital_sign_read_tstz DESC) row_number
                              FROM vital_sign_read vsr
                             WHERE vsr.id_vital_sign = r.id_vital_sign
                               AND vsr.flg_state = pk_alert_constant.g_active
                               AND pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0) t
                     WHERE t.id_episode = i_id_episode
                       AND row_number = 1;
                EXCEPTION
                    WHEN no_data_found THEN
                        l_cur_value := NULL;
                END;
            
            ELSIF r.flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_l
            THEN
                -- Locked parameters (should already be calculated)
                IF r.internal_name = 'G_TOTAL'
                THEN
                    l_cur_value := i_total_glasgow;
                ELSIF r.internal_name = 'RTS_TOTAL'
                THEN
                    l_cur_value := i_total_rts;
                ELSIF r.internal_name = 'ISS_TOTAL'
                THEN
                    l_cur_value := i_total_iss;
                ELSIF r.internal_name = 'PAT_AGE'
                THEN
                    l_cur_value := i_pat_age_years;
                END IF;
            
            ELSE
                -- Other parameters
                BEGIN
                    g_error := 'GET OTHER PARAM VALUE';
                    pk_alertlog.log_debug(g_error);
                    SELECT t.val
                      INTO l_cur_value
                      FROM (SELECT emp.registered_value val
                              FROM epis_mtos_score ems, epis_mtos_param emp
                             WHERE ems.id_epis_mtos_score = emp.id_epis_mtos_score
                               AND emp.id_mtos_param = r.id_mtos_param
                               AND ems.id_episode = i_id_episode
                               AND ems.flg_status = pk_sev_scores_constant.g_flg_status_a
                             ORDER BY emp.dt_create DESC) t
                     WHERE rownum = 1;
                EXCEPTION
                    WHEN no_data_found THEN
                        l_cur_value := NULL;
                END;
            END IF;
        
            --
            l_params(l_counter) := r.id_mtos_param;
            l_values(l_counter) := l_cur_value;
            l_counter := l_counter + 1;
        END LOOP;
    
        g_error := 'CALL TO GET_TOTAL_SCORE_INTERNAL';
        pk_alertlog.log_debug(g_error);
        IF NOT get_total_score_internal(i_lang => i_lang,
                                        
                                        i_prof           => i_prof,
                                        i_id_patient     => i_id_patient,
                                        i_id_mtos_param  => l_params,
                                        i_value          => l_values,
                                        i_flg_score_type => i_flg_score_type,
                                        i_calculate_age  => pk_alert_constant.g_no,
                                        i_pat_age_years  => i_pat_age_years,
                                        o_score_a        => o_score_a,
                                        o_score_b        => o_score_b,
                                        o_total          => o_total,
                                        o_error          => o_error)
        THEN
            RAISE l_exception;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN l_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
    END get_total_score_aux;
    --
    /**********************************************************************************************
    * Returns the total value for a given score.
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_id_patient         Patient ID
    * @param i_id_mtos_param      ID's of the score parameters
    * @param i_value              Registered values for each parameter
    * @param i_flg_score_type     Type of score
    * @param o_total              Cursor with the results
    * @param o_error              Error message
    *                        
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            José Brito
    * @version           1.0  
    * @since             2009/07/08
    **********************************************************************************************/
    FUNCTION get_total_score
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_id_patient         IN patient.id_patient%TYPE,
        i_id_mtos_param      IN table_number,
        i_value              IN table_number,
        i_flg_score_type     IN mtos_score.flg_score_type%TYPE,
        i_id_mtos_score      IN mtos_score.id_mtos_score%TYPE DEFAULT NULL,
        i_vs_scales_elements IN table_number,
        o_total              OUT pk_types.cursor_type,
        o_viewer             OUT pk_types.cursor_type,
        o_error              OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200 CHAR) := 'GET_TOTAL_SCORE';
        l_common_error EXCEPTION;
        --
        l_total_a    NUMBER(6, 4) := 0;
        l_total_b    NUMBER(6, 4) := 0;
        l_total_a_np NUMBER := 0;
        l_total_b_np NUMBER := 0;
        --
        l_pat_age       VARCHAR2(30 CHAR);
        l_pat_age_years NUMBER(6);
    
        l_id_mtos_score NUMBER;
    
        l_news_score3_count NUMBER;
        l_flg_viewer        VARCHAR2(1 CHAR);
    
    BEGIN
    
        g_error := 'GET PATIENT AGE (YEARS) - ID_PATIENT = ' || i_id_patient;
        pk_alertlog.log_debug(g_error);
        IF NOT get_pat_age_years(i_lang  => i_lang,
                                 i_prof  => i_prof,
                                 i_age   => l_pat_age,
                                 o_age   => l_pat_age_years,
                                 o_error => o_error)
        THEN
            RAISE l_common_error;
        END IF;
    
        IF i_flg_score_type = pk_sev_scores_constant.g_flg_score_triss
        THEN
        
            g_error := 'CALL TO GET_TOTAL_SCORE_INTERNAL';
            pk_alertlog.log_debug(g_error);
            IF NOT get_total_score_internal(i_lang           => i_lang,
                                            i_prof           => i_prof,
                                            i_id_patient     => i_id_patient,
                                            i_id_mtos_param  => i_id_mtos_param,
                                            i_value          => i_value,
                                            i_flg_score_type => i_flg_score_type,
                                            i_calculate_age  => pk_alert_constant.g_yes,
                                            i_pat_age_years  => l_pat_age_years,
                                            o_score_a        => l_total_a,
                                            o_score_b        => l_total_b,
                                            o_total          => o_total,
                                            o_error          => o_error)
            THEN
                RAISE l_common_error;
            END IF;
        
            -- Total score values
            g_error := 'GET TOTAL SCORE ID/VALUES';
            pk_alertlog.log_debug(g_error);
            OPEN o_total FOR
                SELECT mse.id_mtos_score,
                       mpm.id_mtos_param,
                       decode(mpm.internal_name,
                              pk_sev_scores_constant.g_param_type_triss_total_p,
                              get_formatted_total(i_lang, i_prof, l_total_b, mpm.internal_name),
                              
                              get_formatted_total(i_lang, i_prof, l_total_a, mpm.internal_name)
                              
                              ) total_score_desc,
                       decode(mpm.internal_name,
                              pk_sev_scores_constant.g_param_type_triss_total_p,
                              l_total_b,
                              l_total_a) total_score
                  FROM mtos_param mpm, mtos_score mse
                 WHERE mpm.id_mtos_score = mse.id_mtos_score
                   AND mse.flg_score_type = i_flg_score_type
                   AND mpm.flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_t
                   AND mpm.flg_available = pk_alert_constant.g_yes
                 ORDER BY mpm.rank;
        
        ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_o2grd
        THEN
        
            IF NOT get_o2_grd_total(i_lang          => i_lang,
                                    i_prof          => i_prof,
                                    i_id_patient    => i_id_patient,
                                    i_id_mtos_param => i_id_mtos_param,
                                    i_value         => i_value,
                                    o_total         => o_total,
                                    o_error         => o_error)
            THEN
                RAISE l_common_error;
            END IF;
        
        ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_oi
        THEN
        
            IF NOT get_oi_total(i_lang          => i_lang,
                                i_prof          => i_prof,
                                i_id_mtos_param => i_id_mtos_param,
                                i_value         => i_value,
                                o_total         => o_total,
                                o_error         => o_error)
            THEN
                RAISE l_common_error;
            END IF;
        
        ELSIF i_flg_score_type = pk_sev_scores_constant.g_flg_score_nstemi
        THEN
        
            IF NOT get_total_score_internal(i_lang           => i_lang,
                                            i_prof           => i_prof,
                                            i_id_patient     => i_id_patient,
                                            i_id_mtos_param  => i_id_mtos_param,
                                            i_value          => i_value,
                                            i_flg_score_type => i_flg_score_type,
                                            i_calculate_age  => pk_alert_constant.g_yes,
                                            i_pat_age_years  => l_pat_age_years,
                                            o_score_a        => l_total_a_np,
                                            o_score_b        => l_total_b_np,
                                            o_total          => o_total,
                                            o_error          => o_error)
            THEN
                RAISE l_common_error;
            END IF;
        
        ELSE
            ------------------------------------------------------------------------------------------------------------------------                       
            -- ALERT-255254 For now on new templates always go for a General CASE     (+NEWS & PEWS)      
            ------------------------------------------------------------------------------------------------------------------------            
        
            g_error := 'CALL TO GET_TOTAL_SCORE_INTERNAL';
            pk_alertlog.log_debug(g_error);
            IF NOT get_total_score_internal(i_lang           => i_lang,
                                            i_prof           => i_prof,
                                            i_id_patient     => i_id_patient,
                                            i_id_mtos_param  => i_id_mtos_param,
                                            i_value          => i_value,
                                            i_flg_score_type => i_flg_score_type,
                                            i_calculate_age  => pk_alert_constant.g_yes,
                                            i_pat_age_years  => l_pat_age_years,
                                            o_score_a        => l_total_a_np,
                                            o_score_b        => l_total_b_np,
                                            o_total          => o_total,
                                            o_error          => o_error)
            THEN
                RAISE l_common_error;
            END IF;
        
            -- Special case NEWS - individual score 3
            IF i_flg_score_type = pk_sev_scores_constant.g_flg_score_news
            THEN
                IF l_total_a_np <= 4
                   AND l_total_b_np >= 1
                THEN
                    l_total_a_np := -1;
                END IF;
            
            END IF;
        
            -- Total score values
            g_error := 'GET TOTAL SCORE ID/VALUES';
            pk_alertlog.log_debug(g_error);
            OPEN o_total FOR
                SELECT CASE
                            WHEN mse.id_mtos_score IN (pk_sev_scores_constant.g_id_score_si_it_is,
                                                       pk_sev_scores_constant.g_id_score_prism,
                                                       pk_sev_scores_constant.g_id_score_vte,
                                                       pk_sev_scores_constant.g_id_score_apache_tw) THEN
                             to_number(to_char(mse.id_mtos_score) || to_char(mpm.id_mtos_score_group))
                            ELSE
                             mse.id_mtos_score
                        END AS id_mtos_score,
                       mpm.id_mtos_param,
                       decode(mpm.internal_name,
                              'TOTAL_B',
                              get_formatted_total(i_lang, i_prof, l_total_b_np, mpm.internal_name),
                              pk_sev_scores_constant.g_param_type_tiss28_nc,
                              get_formatted_total(i_lang, i_prof, l_total_b_np, mpm.internal_name),
                              pk_sev_scores_constant.g_param_type_crib2_dr,
                              get_formatted_total(i_lang, i_prof, l_total_b_np, mpm.internal_name),
                              pk_sev_scores_constant.g_param_type_apache2_dr,
                              get_formatted_total(i_lang, i_prof, l_total_b_np, mpm.internal_name),
                              pk_sev_scores_constant.g_param_type_sofa_tw_mr,
                              get_formatted_total(i_lang, i_prof, l_total_b_np, mpm.internal_name),
                              --pk_sev_scores_constant.g_param_type_timi_risk,
                              --get_formatted_total(i_lang, i_prof, l_total_b_np, mpm.internal_name),
                              pk_sev_scores_constant.g_param_type_news,
                              get_formatted_total(i_lang,
                                                  i_prof,
                                                  l_total_a_np,
                                                  mpm.internal_name,
                                                  NULL,
                                                  mpm.id_mtos_param),
                              pk_sev_scores_constant.g_param_type_apache_tw,
                              to_char(l_total_b_np, 'FM9990d999'),
                              get_formatted_total(i_lang,
                                                  i_prof,
                                                  l_total_a_np,
                                                  mpm.internal_name,
                                                  NULL,
                                                  mpm.id_mtos_param)) total_score_desc,
                       decode(mpm.internal_name,
                              'TOTAL_B',
                              l_total_b_np,
                              pk_sev_scores_constant.g_param_type_tiss28_nc,
                              l_total_b_np,
                              pk_sev_scores_constant.g_param_type_crib2_dr,
                              l_total_b_np,
                              pk_sev_scores_constant.g_param_type_apache2_dr,
                              l_total_b_np,
                              pk_sev_scores_constant.g_param_type_cur65_total,
                              l_total_b_np,
                              pk_sev_scores_constant.g_param_type_sofa_tw_mr,
                              l_total_b_np,
                              pk_sev_scores_constant.g_param_type_timi_risk,
                              l_total_a_np,
                              pk_sev_scores_constant.g_param_type_cur65_total_1,
                              l_total_a_np,
                              pk_sev_scores_constant.g_param_type_apache_tw,
                              l_total_b_np,
                              l_total_a_np) total_score
                  FROM mtos_param mpm, mtos_score mse
                 WHERE mpm.id_mtos_score = mse.id_mtos_score
                   AND mse.flg_score_type = i_flg_score_type
                   AND mpm.flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_t
                   AND mpm.flg_available = pk_alert_constant.g_yes
                 ORDER BY mpm.rank;
        
        END IF;
    
        -- GET FLG VIEWER (to show the viewer Y/N)
        BEGIN
            SELECT mse.flg_viewer
              INTO l_flg_viewer
              FROM mtos_score mse
             WHERE mse.id_mtos_score = i_id_mtos_score;
        EXCEPTION
            WHEN OTHERS THEN
                l_flg_viewer := pk_alert_constant.get_no;
        END;
    
        IF l_flg_viewer = pk_alert_constant.get_yes
        THEN
            IF NOT pk_sev_scores_core.get_sev_score_viewer_wtotals(i_lang               => i_lang,
                                                                   i_prof               => i_prof,
                                                                   i_mtos_score         => i_id_mtos_score,
                                                                   i_id_mtos_param      => i_id_mtos_param,
                                                                   i_value              => i_value,
                                                                   i_vs_scales_elements => i_vs_scales_elements,
                                                                   o_list               => o_viewer,
                                                                   o_error              => o_error)
            
            THEN
                RAISE l_common_error;
            END IF;
        ELSE
            -- NOT DONE
            pk_types.open_my_cursor(o_viewer);
        END IF;
        RETURN TRUE;
    
    EXCEPTION
        WHEN l_common_error THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_total);
            pk_types.open_my_cursor(o_viewer);
        
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_total);
            pk_types.open_my_cursor(o_viewer);
            RETURN FALSE;
    END get_total_score;

    /**********************************************************************************************
    * Returns the available scores. Used by Flash to know how many blocks must be shown, 
    * one block for each score.
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_id_episode         Episode ID for each parameter
    * @param i_mtos_score         Score ID
    * @param o_score              Cursor with the available scores
    * @param o_flg_detail         Activate the DETAIL button: (Y)es (N)o
    * @param o_error              Error message
    *                        
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            José Brito
    * @version           1.0  
    * @since             2009/07/08
    **********************************************************************************************/
    FUNCTION get_mtos_score
    (
        i_lang       IN language.id_language%TYPE,
        i_prof       IN profissional,
        i_id_episode IN episode.id_episode%TYPE,
        i_mtos_score IN mtos_score.id_mtos_score%TYPE,
        o_score      OUT pk_types.cursor_type,
        o_flg_detail OUT VARCHAR2,
        o_error      OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200) := 'GET_MTOS_SCORE';
        l_internal_error EXCEPTION;
    BEGIN
    
        g_error := 'OPEN CURSOR O_SCORE';
        pk_alertlog.log_debug(g_error);
        OPEN o_score FOR
            SELECT mse.id_mtos_score,
                   nvl(sc_rel.id_mtos_score_group, mse.id_mtos_score) id_group,
                   get_desc_score(i_lang,
                                  i_prof,
                                  NULL,
                                  mse.code_mtos_score,
                                  mse.code_mtos_score_abbrev,
                                  sc_rel.id_mtos_score_group) score_title,
                   mse.flg_score_type,
                   mse.rank
              FROM mtos_score mse
              JOIN (SELECT mr.id_mtos_score_rel, NULL id_mtos_score_group
                      FROM mtos_score_relation mr
                     WHERE mr.flg_relation = pk_sev_scores_constant.g_score_rel_parent
                       AND mr.id_mtos_score = i_mtos_score
                    UNION ALL
                    SELECT mse2.id_mtos_score id_mtos_score_rel, NULL id_mtos_score_group
                      FROM mtos_score mse2
                     WHERE mse2.id_mtos_score = i_mtos_score
                    UNION ALL
                    SELECT msg.id_mtos_score id_mtos_score_rel, msg.id_mtos_score_group
                      FROM mtos_score_group msg
                     WHERE msg.id_mtos_score = i_mtos_score) sc_rel
                ON sc_rel.id_mtos_score_rel = mse.id_mtos_score
             WHERE mse.flg_available = pk_alert_constant.g_yes
             ORDER BY mse.rank;
    
        g_error := 'CALL TO CHECK_FLG_DETAIL';
        pk_alertlog.log_debug(g_error);
        IF NOT check_flg_detail(i_lang       => i_lang,
                                i_prof       => i_prof,
                                i_id_episode => i_id_episode,
                                o_flg_detail => o_flg_detail,
                                o_error      => o_error)
        THEN
            RAISE l_internal_error;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN l_internal_error THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_score);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_score);
            RETURN FALSE;
    END get_mtos_score;

    /**********************************************************************************************
    * Returns score groups to be displayed in the summary page
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_id_patient         Patient ID for each parameter
    * @param i_id_episode         Episode ID for each parameter
    * @param o_groups             Cursor with the available groups
    * @param o_error              Error message
    *                        
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            José Silva
    * @version           1.0  
    * @since             2010/09/09
    **********************************************************************************************/
    FUNCTION get_score_groups
    (
        i_lang       IN language.id_language%TYPE,
        i_prof       IN profissional,
        i_id_patient IN patient.id_patient%TYPE,
        i_id_episode IN episode.id_episode%TYPE,
        o_groups     OUT pk_types.cursor_type,
        o_error      OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200) := 'GET_SCORE_GROUPS';
    
        l_score_params table_number;
    
    BEGIN
    
        g_error := 'GET SCORE PARAMS';
        pk_alertlog.log_debug(g_error);
        l_score_params := get_sev_scores(i_lang, i_prof, i_id_patient);
    
        IF i_id_episode IS NOT NULL
        THEN
        
            g_error := 'OPEN CURSOR O_SCORE';
            pk_alertlog.log_debug(g_error);
            OPEN o_groups FOR
                SELECT get_epis_mtos_score(i_lang, i_prof, i_id_patient, i_id_episode, NULL, mse.id_mtos_score) id_mtos_score,
                       nvl(epis_sc.id_mtos_score_group, mse.id_mtos_score) id_group,
                       get_desc_score(i_lang,
                                      i_prof,
                                      NULL,
                                      mse.code_mtos_score,
                                      mse.code_mtos_score_abbrev,
                                      epis_sc.id_mtos_score_group) desc_group
                  FROM mtos_score mse
                  JOIN (SELECT mr.id_mtos_score_rel, NULL id_mtos_score_group
                          FROM mtos_score_relation mr
                          JOIN TABLE(l_score_params) t
                            ON t.column_value = mr.id_mtos_score
                         WHERE mr.flg_relation = pk_sev_scores_constant.g_score_rel_parent
                        UNION ALL
                        SELECT mse2.id_mtos_score id_mtos_score_rel, NULL id_mtos_score_group
                          FROM mtos_score mse2
                          JOIN TABLE(l_score_params) t
                            ON t.column_value = mse2.id_mtos_score) sc_rel
                    ON sc_rel.id_mtos_score_rel = mse.id_mtos_score
                  JOIN (SELECT DISTINCT mp.id_mtos_score, mp.id_mtos_score_group, mg.rank
                          FROM epis_mtos_score em
                          JOIN epis_mtos_param ep
                            ON ep.id_epis_mtos_score = em.id_epis_mtos_score
                          JOIN mtos_param mp
                            ON mp.id_mtos_param = ep.id_mtos_param
                          LEFT JOIN mtos_score_group mg
                            ON mp.id_mtos_score_group = mg.id_mtos_score_group
                         WHERE em.id_episode = i_id_episode) epis_sc
                    ON epis_sc.id_mtos_score = mse.id_mtos_score
                 ORDER BY mse.rank, epis_sc.rank;
        
        ELSE
        
            g_error := 'OPEN CURSOR O_SCORE';
            pk_alertlog.log_debug(g_error);
            OPEN o_groups FOR
                SELECT get_epis_mtos_score(i_lang, i_prof, i_id_patient, i_id_episode, NULL, mse.id_mtos_score) id_mtos_score,
                       nvl(epis_sc.id_mtos_score_group, mse.id_mtos_score) id_group,
                       get_desc_score(i_lang,
                                      i_prof,
                                      NULL,
                                      mse.code_mtos_score,
                                      mse.code_mtos_score_abbrev,
                                      epis_sc.id_mtos_score_group) desc_group
                  FROM mtos_score mse
                  JOIN (SELECT mr.id_mtos_score_rel, NULL id_mtos_score_group
                          FROM mtos_score_relation mr
                          JOIN TABLE(l_score_params) t
                            ON t.column_value = mr.id_mtos_score
                         WHERE mr.flg_relation = pk_sev_scores_constant.g_score_rel_parent
                        UNION ALL
                        SELECT mse2.id_mtos_score id_mtos_score_rel, NULL id_mtos_score_group
                          FROM mtos_score mse2
                          JOIN TABLE(l_score_params) t
                            ON t.column_value = mse2.id_mtos_score) sc_rel
                    ON sc_rel.id_mtos_score_rel = mse.id_mtos_score
                  JOIN (SELECT DISTINCT mp.id_mtos_score, mp.id_mtos_score_group, mg.rank
                          FROM epis_mtos_score em
                          JOIN episode e
                            ON e.id_episode = em.id_episode
                          JOIN epis_mtos_param ep
                            ON ep.id_epis_mtos_score = em.id_epis_mtos_score
                          JOIN mtos_param mp
                            ON mp.id_mtos_param = ep.id_mtos_param
                          LEFT JOIN mtos_score_group mg
                            ON mp.id_mtos_score_group = mg.id_mtos_score_group
                         WHERE e.id_patient = i_id_patient) epis_sc
                    ON epis_sc.id_mtos_score = mse.id_mtos_score
                 ORDER BY mse.rank, epis_sc.rank;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_groups);
            RETURN FALSE;
    END get_score_groups;

    /**********************************************************************************************
    * Shows all parameters for all scores.
    * Returns the parameters properties and current value.
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_episode            Episode ID
    * @param i_mtos_score         Score ID
    * @param i_id_epis_mtos_score Score ID (currently not needed)
    * @param o_list               Cursor with the parameters
    * @param o_error              Error message
    *                        
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            José Brito
    * @version           1.0  
    * @since             2009/07/08
    **********************************************************************************************/
    FUNCTION get_mtos_param_list
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_episode            IN episode.id_episode%TYPE,
        i_mtos_score         IN mtos_score.id_mtos_score%TYPE,
        i_id_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_list               OUT pk_types.cursor_type,
        o_error              OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200) := 'GET_MTOS_PARAM_LIST';
        l_internal_error EXCEPTION;
        --
        l_id_patient         patient.id_patient%TYPE;
        l_id_epis_mtos_score epis_mtos_score.id_epis_mtos_score%TYPE;
        l_total_gcs          NUMBER(6, 4);
        l_total_pts          NUMBER(6, 4);
        l_total_rts          NUMBER(6, 4);
        l_total_iss          NUMBER(6, 4);
        l_total_triss_b      NUMBER(6, 4);
        l_total_triss_p      NUMBER(6, 4);
        l_pat_age            VARCHAR2(30);
        l_pat_age_years      NUMBER(6);
        l_age                vital_sign_unit_measure.age_min%TYPE;
    
    BEGIN
    
        g_error := 'GET PATIENT ID';
        pk_alertlog.log_debug(g_error);
        SELECT e.id_patient, pk_patient.get_pat_age(i_lang, e.id_patient, i_prof)
          INTO l_id_patient, l_pat_age
          FROM episode e
         WHERE e.id_episode = i_episode;
    
        g_error := 'GET PATIENT AGE (YEARS)';
        pk_alertlog.log_debug(g_error);
        IF NOT get_pat_age_years(i_lang  => i_lang,
                                 i_prof  => i_prof,
                                 i_age   => l_pat_age,
                                 o_age   => l_pat_age_years,
                                 o_error => o_error)
        THEN
            RAISE l_internal_error;
        END IF;
    
        l_age := pk_patient.get_pat_age(i_lang, NULL, NULL, NULL, 'MONTHS', l_id_patient);
    
        IF i_id_epis_mtos_score IS NULL
        THEN
            -- Get most recent saved SCORE
            BEGIN
                g_error := 'GET LATEST SCORE';
                pk_alertlog.log_debug(g_error);
                SELECT t.id_epis_mtos_score
                  INTO l_id_epis_mtos_score
                  FROM (SELECT ems.id_epis_mtos_score,
                               ems.id_episode,
                               row_number() over(PARTITION BY id_episode ORDER BY ems.dt_create DESC) row_number
                          FROM epis_mtos_score ems
                          JOIN epis_mtos_param ep
                            ON ep.id_epis_mtos_score = ems.id_epis_mtos_score
                          JOIN mtos_param mp
                            ON mp.id_mtos_param = ep.id_mtos_param
                         WHERE ems.flg_status = pk_sev_scores_constant.g_flg_status_a
                           AND mp.id_mtos_score = i_mtos_score) t
                 WHERE t.id_episode = i_episode
                   AND row_number = 1;
            EXCEPTION
                WHEN no_data_found THEN
                    l_id_epis_mtos_score := NULL;
            END;
        
            g_error := 'CALL TO GET_TOTAL_TRISS';
            pk_alertlog.log_debug(g_error);
            IF i_mtos_score = pk_trauma_core.get_triss_id_score(i_lang)
            THEN
                IF NOT pk_trauma_core.get_total_triss(i_lang          => i_lang,
                                                      i_prof          => i_prof,
                                                      i_episode       => i_episode,
                                                      i_id_patient    => l_id_patient,
                                                      i_pat_age_years => l_pat_age_years,
                                                      o_total_glasgow => l_total_gcs,
                                                      o_total_rts     => l_total_rts,
                                                      o_total_iss     => l_total_iss,
                                                      o_total_pts     => l_total_pts,
                                                      o_total_triss_b => l_total_triss_b,
                                                      o_total_triss_p => l_total_triss_p,
                                                      o_error         => o_error)
                THEN
                    RAISE l_internal_error;
                END IF;
            END IF;
        
            -- It's a new record. Load only the parameters and the most recent registered vital signs, if they exist.
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              l_total_gcs,
                              'PTS_TOTAL',
                              l_total_pts,
                              'RTS_TOTAL',
                              l_total_rts,
                              'ISS_TOTAL',
                              l_total_iss,
                              'TRISS_TOTAL_B',
                              l_total_triss_b,
                              'TRISS_TOTAL_P',
                              l_total_triss_p,
                              'PAT_AGE',
                              l_pat_age_years,
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     emp.registered_value,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            vsr.value,
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            vsr.id_vital_sign_desc,
                                            NULL))) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              pk_utils.to_str(l_total_gcs, i_prof),
                              'PTS_TOTAL',
                              pk_utils.to_str(l_total_pts, i_prof),
                              'RTS_TOTAL',
                              get_formatted_total(i_lang, i_prof, l_total_rts, mpm.internal_name),
                              'ISS_TOTAL',
                              pk_utils.to_str(l_total_iss, i_prof),
                              'TRISS_TOTAL_B',
                              get_formatted_total(i_lang, i_prof, l_total_triss_b, mpm.internal_name),
                              'TRISS_TOTAL_P',
                              get_formatted_total(i_lang, i_prof, l_total_triss_p, mpm.internal_name),
                              'PAT_AGE',
                              pk_utils.to_str(l_pat_age, i_prof),
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT decode(mse.flg_score_type,
                                                           pk_sev_scores_constant.g_flg_score_iss, -- ISS Score should include the score value
                                                           pk_utils.to_str(mpe.value, i_prof) || '-',
                                                           to_char(NULL)) ||
                                                    pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                               FROM mtos_param_value mpe
                                              WHERE mpe.id_mtos_param_value = emp.registered_value),
                                            to_char(emp.registered_value)),
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            nvl((SELECT pk_utils.to_str(vsr.value, i_prof) || ' ' ||
                                                       pk_translation.get_translation(i_lang, um.code_unit_measure)
                                                  FROM unit_measure um
                                                 WHERE um.id_unit_measure = vsr.id_unit_measure),
                                                pk_utils.to_str(vsr.value, i_prof)),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT pk_vital_sign.get_vs_alias(i_lang,
                                                                               l_id_patient,
                                                                               vsd2.code_vital_sign_desc)
                                               FROM vital_sign_desc vsd2
                                              WHERE vsd2.id_vital_sign_desc = vsr.id_vital_sign_desc),
                                            NULL))) registered_value_desc,
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              pk_vital_sign.get_vital_sign_unit_measure(i_lang,
                                                                        (SELECT pk_vital_sign.get_vs_um_inst(mpt.id_param_task,
                                                                                                             i_prof.institution,
                                                                                                             i_prof.software)
                                                                           FROM dual),
                                                                        NULL)) unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                               --
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_triss)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_triss),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       (SELECT pk_vital_sign.get_vs_um_inst(decode(mpt.flg_param_task_type,
                                                                   pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                   mpt.id_param_task,
                                                                   NULL),
                                                            i_prof.institution,
                                                            i_prof.software)
                          FROM dual) id_unit_measure,
                       (SELECT pk_vital_sign_core.get_vsum_val_min(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT pk_vital_sign.get_vs_um_inst(decode(mpt.flg_param_task_type,
                                                                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                                    mpt.id_param_task,
                                                                                                                                    NULL),
                                                                                                                             i_prof.institution,
                                                                                                                             i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_min,
                       (SELECT pk_vital_sign_core.get_vsum_val_max(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT pk_vital_sign.get_vs_um_inst(decode(mpt.flg_param_task_type,
                                                                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                                    mpt.id_param_task,
                                                                                                                                    NULL),
                                                                                                                             i_prof.institution,
                                                                                                                             i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_max,
                       (SELECT pk_vital_sign_core.get_vsum_format_num(i_lang            => i_lang,
                                                                      i_prof            => i_prof,
                                                                      i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                  mpt.id_param_task,
                                                                                                  NULL),
                                                                      i_id_unit_measure => (SELECT pk_vital_sign.get_vs_um_inst(decode(mpt.flg_param_task_type,
                                                                                                                                       pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                                       mpt.id_param_task,
                                                                                                                                       NULL),
                                                                                                                                i_prof.institution,
                                                                                                                                i_prof.software)
                                                                                              FROM dual),
                                                                      i_id_institution  => i_prof.institution,
                                                                      i_id_software     => i_prof.software,
                                                                      i_age             => l_age)
                          FROM dual) format_num,
                       vsr.id_vital_sign_read
                  FROM mtos_score mse, mtos_param mpm, vital_sign_read vsr, epis_mtos_param emp, mtos_param_task mpt
                 WHERE mse.id_mtos_score IN
                       (SELECT mtr.id_mtos_score_rel
                          FROM mtos_score_relation mtr
                         WHERE mtr.id_mtos_score = pk_sev_scores_constant.g_id_score_triss)
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND emp.id_epis_mtos_score(+) = nvl(l_id_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND vsr.id_episode(+) = i_episode
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                --ORDER BY mse.rank, mpm.rank;
                UNION
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              l_total_gcs,
                              'PTS_TOTAL',
                              l_total_pts,
                              'RTS_TOTAL',
                              l_total_rts,
                              'ISS_TOTAL',
                              l_total_iss,
                              'TRISS_TOTAL_B',
                              l_total_triss_b,
                              'TRISS_TOTAL_P',
                              l_total_triss_p,
                              'PAT_AGE',
                              l_pat_age_years,
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     emp.registered_value,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            vsr.value,
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            vsr.id_vital_sign_desc,
                                            NULL))) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              pk_utils.to_str(l_total_gcs, i_prof),
                              'PTS_TOTAL',
                              pk_utils.to_str(l_total_pts, i_prof),
                              'RTS_TOTAL',
                              get_formatted_total(i_lang, i_prof, l_total_rts, mpm.internal_name),
                              'ISS_TOTAL',
                              pk_utils.to_str(l_total_iss, i_prof),
                              'TRISS_TOTAL_B',
                              get_formatted_total(i_lang, i_prof, l_total_triss_b, mpm.internal_name),
                              'TRISS_TOTAL_P',
                              get_formatted_total(i_lang, i_prof, l_total_triss_p, mpm.internal_name),
                              'PAT_AGE',
                              pk_utils.to_str(l_pat_age, i_prof),
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT decode(mse.flg_score_type,
                                                           pk_sev_scores_constant.g_flg_score_iss, -- ISS Score should include the score value
                                                           pk_utils.to_str(mpe.value, i_prof) || '-',
                                                           to_char(NULL)) ||
                                                    pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                               FROM mtos_param_value mpe
                                              WHERE mpe.id_mtos_param_value = emp.registered_value),
                                            to_char(emp.registered_value)),
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            nvl((SELECT pk_utils.to_str(vsr.value, i_prof) || ' ' ||
                                                       pk_translation.get_translation(i_lang, um.code_unit_measure)
                                                  FROM unit_measure um
                                                 WHERE um.id_unit_measure = vsr.id_unit_measure),
                                                pk_utils.to_str(vsr.value, i_prof)),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT pk_vital_sign.get_vs_alias(i_lang,
                                                                               l_id_patient,
                                                                               vsd2.code_vital_sign_desc)
                                               FROM vital_sign_desc vsd2
                                              WHERE vsd2.id_vital_sign_desc = vsr.id_vital_sign_desc),
                                            NULL))) registered_value_desc,
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              pk_vital_sign.get_vital_sign_unit_measure(i_lang,
                                                                        (SELECT pk_vital_sign.get_vs_um_inst(decode(mpt.flg_param_task_type,
                                                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                    mpt.id_param_task,
                                                                                                                    NULL),
                                                                                                             i_prof.institution,
                                                                                                             i_prof.software)
                                                                           FROM dual),
                                                                        NULL)) unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                               --
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_triss)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_triss),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       (SELECT pk_vital_sign.get_vs_um_inst(decode(mpt.flg_param_task_type,
                                                                   pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                   mpt.id_param_task,
                                                                   NULL),
                                                            i_prof.institution,
                                                            i_prof.software)
                          FROM dual) id_unit_measure,
                       (SELECT pk_vital_sign_core.get_vsum_val_min(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT pk_vital_sign.get_vs_um_inst(decode(mpt.flg_param_task_type,
                                                                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                                    mpt.id_param_task,
                                                                                                                                    NULL),
                                                                                                                             i_prof.institution,
                                                                                                                             i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_min,
                       (SELECT pk_vital_sign_core.get_vsum_val_max(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT pk_vital_sign.get_vs_um_inst(decode(mpt.flg_param_task_type,
                                                                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                                    mpt.id_param_task,
                                                                                                                                    NULL),
                                                                                                                             i_prof.institution,
                                                                                                                             i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_max,
                       (SELECT pk_vital_sign_core.get_vsum_format_num(i_lang            => i_lang,
                                                                      i_prof            => i_prof,
                                                                      i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                  mpt.id_param_task,
                                                                                                  NULL),
                                                                      i_id_unit_measure => (SELECT pk_vital_sign.get_vs_um_inst(decode(mpt.flg_param_task_type,
                                                                                                                                       pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                                       mpt.id_param_task,
                                                                                                                                       NULL),
                                                                                                                                i_prof.institution,
                                                                                                                                i_prof.software)
                                                                                              FROM dual),
                                                                      i_id_institution  => i_prof.institution,
                                                                      i_id_software     => i_prof.software,
                                                                      i_age             => l_age)
                          FROM dual) format_num,
                       vsr.id_vital_sign_read
                  FROM mtos_score mse, mtos_param mpm, vital_sign_read vsr, epis_mtos_param emp, mtos_param_task mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_triss
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND emp.id_epis_mtos_score(+) = nvl(l_id_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND vsr.id_episode(+) = i_episode
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                --
                 ORDER BY score_rank, param_rank;
        
        ELSE
            -- NOT DONE
            pk_types.open_my_cursor(o_list);
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN l_internal_error THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_mtos_param_list;

    /**********************************************************************************************
    * Returns the score in which the record was made
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_patient            Patient ID
    * @param i_episode            Episode ID
    * @param i_epis_mtos_score    Episode score record ID
    * @param i_mtos_score         Score ID (it can be a child score)
    *                        
    * @return            Score ID
    *
    * @author            José Silva
    * @version           1.0  
    * @since             2010/09/09
    **********************************************************************************************/
    FUNCTION get_epis_mtos_score
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_patient         IN patient.id_patient%TYPE,
        i_episode         IN episode.id_episode%TYPE,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        i_mtos_score      IN mtos_score.id_mtos_score%TYPE
    ) RETURN NUMBER IS
        l_mtos_score mtos_score.id_mtos_score%TYPE;
    
        l_score_params table_number;
    
        l_internal_error EXCEPTION;
        l_error t_error_out;
    
        CURSOR c_epis_score IS
            SELECT nvl(mr.id_mtos_score, mp.id_mtos_score)
              FROM epis_mtos_score es
              JOIN epis_mtos_param em
                ON em.id_epis_mtos_score = es.id_epis_mtos_score
              JOIN mtos_param mp
                ON mp.id_mtos_param = em.id_mtos_param
              LEFT JOIN mtos_score_relation mr
                ON mp.id_mtos_score = mr.id_mtos_score_rel
               AND mr.flg_relation = pk_sev_scores_constant.g_score_rel_parent
             WHERE es.id_epis_mtos_score = i_epis_mtos_score
               AND mp.id_mtos_score != pk_sev_scores_constant.g_id_score_isstw
               AND nvl(mr.id_mtos_score, mp.id_mtos_score) IN
                   (SELECT column_value
                      FROM TABLE(l_score_params));
    
        CURSOR c_epis_score2 IS
            SELECT
            --nvl(mr.id_mtos_score, ms.id_mtos_score)
             decode(mr.id_mtos_score,
                    pk_sev_scores_constant.g_id_score_timi,
                    ms.id_mtos_score,
                    nvl(mr.id_mtos_score, ms.id_mtos_score))
              FROM mtos_score ms
              LEFT JOIN mtos_score_relation mr
                ON ms.id_mtos_score = mr.id_mtos_score_rel
               AND mr.flg_relation = pk_sev_scores_constant.g_score_rel_parent
             WHERE ms.id_mtos_score = i_mtos_score
               AND ms.id_mtos_score != pk_sev_scores_constant.g_id_score_isstw;
    
    BEGIN
    
        IF i_mtos_score IS NULL
        THEN
        
            SELECT nvl((SELECT ems.id_mtos_score
                         FROM epis_mtos_score ems
                        WHERE ems.id_epis_mtos_score = i_epis_mtos_score),
                       NULL)
              INTO l_mtos_score
              FROM dual;
        
            IF l_mtos_score IS NULL
            THEN
                g_error := 'GET SCORE PARAM';
                pk_alertlog.log_debug(g_error);
                l_score_params := get_sev_scores(i_lang, i_prof, i_patient);
            
                g_error := 'GET SCORE ID';
                pk_alertlog.log_debug(g_error);
                OPEN c_epis_score;
                FETCH c_epis_score
                    INTO l_mtos_score;
                CLOSE c_epis_score;
            END IF;
        ELSE
            g_error := 'GET SCORE ID';
            pk_alertlog.log_debug(g_error);
            OPEN c_epis_score2;
            FETCH c_epis_score2
                INTO l_mtos_score;
            CLOSE c_epis_score2;
        END IF;
    
        RETURN l_mtos_score;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_epis_mtos_score;

    /**********************************************************************************************
    * Returns the total score(s) of a record
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_patient            Patient ID
    * @param i_epis_mtos_score    Episode score record ID
    *                        
    * @return            Score totals
    *
    * @author            José Silva
    * @version           1.0  
    * @since             2010/09/09
    **********************************************************************************************/
    FUNCTION get_epis_mtos_total
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_patient         IN patient.id_patient%TYPE,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE
    ) RETURN table_varchar IS
        l_mtos_total table_varchar;
    
        l_score_params table_number;
    
        CURSOR c_epis_total IS
            SELECT CAST(MULTISET (SELECT get_formatted_total(i_lang,
                                                    i_prof,
                                                    em.registered_value,
                                                    mp.internal_name,
                                                    NULL,
                                                    mp.id_mtos_param)
                           FROM epis_mtos_param em
                           JOIN mtos_param mp
                             ON mp.id_mtos_param = em.id_mtos_param
                           JOIN TABLE(l_score_params) t
                             ON t.column_value = mp.id_mtos_score
                          WHERE em.id_epis_mtos_score = es.id_epis_mtos_score
                            AND mp.id_mtos_score != pk_sev_scores_constant.g_id_score_isstw
                            AND mp.flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_t
                          ORDER BY em.id_mtos_param) AS table_varchar) score_total
              FROM epis_mtos_score es
             WHERE es.id_epis_mtos_score = i_epis_mtos_score;
    
    BEGIN
    
        g_error := 'GET SCORE PARAMS';
        pk_alertlog.log_debug(g_error);
        l_score_params := get_sev_scores(i_lang, i_prof, i_patient);
    
        g_error := 'GET SCORE ID';
        pk_alertlog.log_debug(g_error);
        OPEN c_epis_total;
        FETCH c_epis_total
            INTO l_mtos_total;
        CLOSE c_epis_total;
    
        RETURN l_mtos_total;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_epis_mtos_total;

    /**********************************************************************************************
    * Returns the total score(s) of a record
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_patient            Patient ID
    * @param i_epis_mtos_score    Episode score record ID
    *                        
    * @return            Score totals
    *
    * @author            José Silva
    * @version           1.0  
    * @since             2010/09/09
    **********************************************************************************************/
    FUNCTION get_epis_mtos_total_desc
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_patient         IN patient.id_patient%TYPE,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE
    ) RETURN table_varchar IS
        l_mtos_total table_varchar;
    
        l_score_params table_number;
    
        CURSOR c_epis_total IS
            SELECT CAST(MULTISET (SELECT pk_translation.get_translation(i_lang, mp.code_mtos_param)
                           FROM epis_mtos_param em
                           JOIN mtos_param mp
                             ON mp.id_mtos_param = em.id_mtos_param
                           JOIN TABLE(l_score_params) t
                             ON t.column_value = mp.id_mtos_score
                          WHERE em.id_epis_mtos_score = es.id_epis_mtos_score
                            AND mp.id_mtos_score != pk_sev_scores_constant.g_id_score_isstw
                            AND mp.flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_t
                          ORDER BY em.id_mtos_param) AS table_varchar) desc_total
              FROM epis_mtos_score es
             WHERE es.id_epis_mtos_score = i_epis_mtos_score;
    
    BEGIN
    
        g_error := 'GET SCORE PARAMS';
        pk_alertlog.log_debug(g_error);
        l_score_params := get_sev_scores(i_lang, i_prof, i_patient);
    
        g_error := 'GET SCORE ID';
        pk_alertlog.log_debug(g_error);
        OPEN c_epis_total;
        FETCH c_epis_total
            INTO l_mtos_total;
        CLOSE c_epis_total;
    
        RETURN l_mtos_total;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_epis_mtos_total_desc;

    FUNCTION get_mto_score_parent(i_id_mtos_score IN NUMBER) RETURN NUMBER IS
        l_score  table_number;
        l_return NUMBER;
    BEGIN
    
        SELECT id_mtos_score
          BULK COLLECT
          INTO l_score
          FROM mtos_score_relation x
         WHERE x.id_mtos_score_rel = i_id_mtos_score
           AND flg_relation = pk_sev_scores_constant.g_score_rel_parent;
    
        IF l_score.count = 1
        THEN
            l_return := l_score(1);
        ELSE
            l_return := NULL;
        END IF;
    
        RETURN l_return;
    
    END get_mto_score_parent;

    /**********************************************************************************************
    * Returns all scores registered in a given episode
    *
    * @param   i_lang              Professional preferred language
    * @param   i_prof              Professional identification and its context (institution and software)
    * @param   i_id_patient        Patient ID
    * @param   i_id_episode        Episode ID
    * @param   i_mtos_score        Score ID
    * @param   i_epis_mtos_score   Score evaluation ID
    * @param   o_reg               Records general information
    * @param   o_groups            List of groups inside the score records
    * @param   o_values            Score values
    * @param   o_cancel            Score cancellation data
    * @param   o_error             Error information
    *
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            Tércio Soares
    * @version           2.6.0.4
    * @since             2010/09/27
    **********************************************************************************************/
    FUNCTION get_score_det_dest
    (
        i_lang     IN NUMBER,
        i_code     IN VARCHAR2,
        i_code_abb IN VARCHAR2
    ) RETURN VARCHAR2 IS
        l_desc   VARCHAR2(4000);
        l_abbrv  VARCHAR2(4000);
        l_return VARCHAR2(4000);
    BEGIN
    
        l_desc  := pk_translation.get_translation(i_lang, i_code);
        l_abbrv := pk_translation.get_translation(i_lang, i_code_abb);
    
        IF l_abbrv IS NOT NULL
        THEN
            l_abbrv := chr(32) || '(' || l_abbrv || ')';
        END IF;
    
        l_return := l_desc || l_abbrv;
    
        RETURN l_return;
    
    END get_score_det_dest;

    FUNCTION get_sev_scores_values
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_patient      IN patient.id_patient%TYPE,
        i_id_episode      IN episode.id_episode%TYPE,
        i_mtos_score      IN mtos_score.id_mtos_score%TYPE,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_reg             OUT pk_types.cursor_type,
        o_groups          OUT pk_types.cursor_type,
        o_values          OUT pk_types.cursor_type,
        o_cancel          OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200) := 'GET_SEV_SCORES_VALUES';
    
        l_internal_error EXCEPTION;
    
        l_epis_mtos_score epis_mtos_score.id_epis_mtos_score%TYPE;
    
    BEGIN
    
        IF i_id_episode IS NULL
        THEN
            -- GRELHA DOS SCORES DO EPISÓDIO
            g_error := 'GET ALL REGISTERED SCORES - ID_PATIENT = ' || i_id_patient || ', ID_EPISODE = ' || i_id_episode;
        
            OPEN o_reg FOR
                SELECT id_epis_mtos_score,
                       id_mtos_score,
                       id_mtos_score_parent,
                       desc_total_scores,
                       total_scores,
                       id_prof_create,
                       prof_name,
                       desc_speciality,
                       dt_create,
                       flg_status,
                       desc_status,
                       flg_cancel,
                       prof_name || ' (' || desc_speciality || '); ' || dt_create signature
                  FROM (SELECT ems.id_epis_mtos_score,
                               get_epis_mtos_score(i_lang,
                                                   i_prof,
                                                   i_id_patient,
                                                   i_id_episode,
                                                   ems.id_epis_mtos_score,
                                                   NULL) id_mtos_score,
                               CASE
                                    WHEN ems.id_mtos_score IN (50, 51) THEN
                                     get_mto_score_parent(ems.id_mtos_score)
                                    ELSE
                                     NULL
                                END id_mtos_score_parent,
                               get_epis_mtos_total_desc(i_lang, i_prof, i_id_patient, ems.id_epis_mtos_score) desc_total_scores,
                               get_epis_mtos_total(i_lang, i_prof, i_id_patient, ems.id_epis_mtos_score) total_scores,
                               ems.id_prof_create,
                               pk_prof_utils.get_name_signature(i_lang, i_prof, ems.id_prof_create) prof_name,
                               pk_prof_utils.get_spec_signature(i_lang,
                                                                i_prof,
                                                                ems.id_prof_create,
                                                                ems.dt_create,
                                                                ems.id_episode) desc_speciality,
                               pk_date_utils.date_char_tsz(i_lang, ems.dt_create, i_prof.institution, i_prof.software) dt_create,
                               ems.flg_status,
                               decode(ems.flg_status,
                                      pk_sev_scores_constant.g_flg_status_a,
                                      pk_message.get_message(i_lang, 'TRAUMA_T020'),
                                      pk_sev_scores_constant.g_flg_status_o,
                                      pk_message.get_message(i_lang, 'TRAUMA_T021'),
                                      pk_sysdomain.get_domain('EPIS_MTOS_SCORE.FLG_STATUS', ems.flg_status, i_lang)) desc_status,
                               chk_flg_cancel(i_lang, i_prof, ems.id_episode, ems.id_epis_mtos_score, ems.id_prof_create) flg_cancel
                          FROM epis_mtos_score ems
                          JOIN episode e
                            ON e.id_episode = ems.id_episode
                         WHERE e.id_patient = i_id_patient
                           AND i_mtos_score IS NULL
                           AND ems.flg_status IN
                               (pk_sev_scores_constant.g_flg_status_a, pk_sev_scores_constant.g_flg_status_c)
                         ORDER BY ems.dt_create DESC);
        
            g_error := 'GET ALL REGISTERED SCORE GROUPS - ID_PATIENT = ' || i_id_patient || ', ID_EPISODE = ' ||
                       i_id_episode;
        
            IF NOT get_score_groups(i_lang       => i_lang,
                                    i_prof       => i_prof,
                                    i_id_patient => i_id_patient,
                                    i_id_episode => i_id_episode,
                                    o_groups     => o_groups,
                                    o_error      => o_error)
            THEN
                RAISE l_internal_error;
            END IF;
        
            g_error := 'GET DATA FOR ALL REGISTERED SCORES - ID_PATIENT = ' || i_id_patient;
        
            OPEN o_values FOR
                SELECT id_epis_mtos_score,
                       id_mtos_score,
                       id_mtos_score_parent,
                       id_group,
                       id_mtos_param,
                       flg_score_type,
                       flg_fill_type,
                       score_desc,
                       param_desc,
                       score_rank,
                       param_rank,
                       registered_value_desc
                
                  FROM (SELECT DISTINCT ems.id_epis_mtos_score,
                                        decode(i_mtos_score,
                                               NULL,
                                               get_epis_mtos_score(i_lang,
                                                                   i_prof,
                                                                   i_id_patient,
                                                                   i_id_episode,
                                                                   ems.id_epis_mtos_score,
                                                                   NULL),
                                               nvl(mg.id_mtos_score_group, mse.id_mtos_score)) id_mtos_score, -- support for the old detail screen
                                        CASE
                                             WHEN ems.id_mtos_score IN (50, 51) THEN
                                              get_mto_score_parent(ems.id_mtos_score)
                                             ELSE
                                              NULL
                                         END id_mtos_score_parent,
                                        nvl(mg.id_mtos_score_group, mse.id_mtos_score) id_group,
                                        mpm.id_mtos_param,
                                        mse.flg_score_type,
                                        mpm.flg_fill_type,
                                        decode(mg.id_mtos_score_group,
                                               NULL,
                                               (SELECT pk_sev_scores_core.get_score_det_dest(i_lang,
                                                                                             mse.code_mtos_score,
                                                                                             mse.code_mtos_score_abbrev)
                                                  FROM dual),
                                               pk_translation.get_translation(i_lang, mg.code_mtos_score_group)) score_desc,
                                        (SELECT pk_translation.get_translation(i_lang, mpm.code_mtos_param)
                                           FROM dual) param_desc,
                                        mse.rank score_rank,
                                        mpm.rank param_rank,
                                        get_registered_value_desc(i_lang,
                                                                  i_prof,
                                                                  emp.id_epis_mtos_score,
                                                                  mpm.id_mtos_param,
                                                                  emp.extra_score) registered_value_desc,
                                        ems.dt_create
                          FROM epis_mtos_score ems
                          JOIN episode e
                            ON e.id_episode = ems.id_episode
                          JOIN epis_mtos_param emp
                            ON ems.id_epis_mtos_score = emp.id_epis_mtos_score
                          JOIN mtos_param mpm
                            ON mpm.id_mtos_param = emp.id_mtos_param
                          JOIN mtos_score mse
                            ON mse.id_mtos_score = mpm.id_mtos_score
                          LEFT JOIN vital_sign_read vsr
                            ON decode(emp.flg_param_task_type,
                                      pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                      emp.id_task_refid,
                                      NULL) = vsr.id_vital_sign_read
                          LEFT JOIN mtos_score_group mg
                            ON mpm.id_mtos_score_group = mg.id_mtos_score_group
                         WHERE e.id_patient = i_id_patient
                           AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                               vsr.id_vital_sign_read IS NULL)
                           AND i_mtos_score IS NULL
                           AND ems.flg_status IN
                               (pk_sev_scores_constant.g_flg_status_a, pk_sev_scores_constant.g_flg_status_c))
                 ORDER BY dt_create DESC, score_rank ASC, id_group, param_rank ASC;
        
            pk_types.open_my_cursor(o_cancel);
        ELSE
        
            IF i_mtos_score IS NULL
            THEN
                -- GRELHA DOS SCORES DO EPISÓDIO
                g_error := 'GET ALL REGISTERED SCORES - ID_PATIENT = ' || i_id_patient || ', ID_EPISODE = ' ||
                           i_id_episode;
            
                OPEN o_reg FOR
                    SELECT xsql.id_epis_mtos_score,
                           xsql.id_mtos_score,
                           xsql.id_mtos_score_parent,
                           xsql.desc_total_scores,
                           xsql.total_scores,
                           xsql.id_prof_create,
                           xsql.prof_name,
                           xsql.desc_speciality,
                           xsql.dt_create,
                           xsql.flg_status,
                           xsql.desc_status,
                           xsql.flg_cancel,
                           sco.flg_title_visible flg_title_visible,
                           pk_sev_scores_core.get_desc_score(i_lang, i_prof, xsql.id_mtos_score) desc_score,
                           sco.rank,
                           prof_name || ' (' || desc_speciality || '); ' || dt_create signature
                      FROM (SELECT ems.id_epis_mtos_score,
                                   get_epis_mtos_score(i_lang,
                                                       i_prof,
                                                       i_id_patient,
                                                       i_id_episode,
                                                       ems.id_epis_mtos_score,
                                                       NULL) id_mtos_score,
                                   CASE
                                        WHEN ems.id_mtos_score IN (50, 51) THEN
                                         get_mto_score_parent(ems.id_mtos_score)
                                        ELSE
                                         NULL
                                    END id_mtos_score_parent,
                                   get_epis_mtos_total_desc(i_lang, i_prof, i_id_patient, ems.id_epis_mtos_score) desc_total_scores,
                                   get_epis_mtos_total(i_lang, i_prof, i_id_patient, ems.id_epis_mtos_score) total_scores,
                                   ems.id_prof_create,
                                   ems.dt_create dt_create_time,
                                   pk_prof_utils.get_name_signature(i_lang, i_prof, ems.id_prof_create) prof_name,
                                   pk_prof_utils.get_spec_signature(i_lang,
                                                                    i_prof,
                                                                    ems.id_prof_create,
                                                                    ems.dt_create,
                                                                    ems.id_episode) desc_speciality,
                                   pk_date_utils.date_char_tsz(i_lang,
                                                               ems.dt_create,
                                                               i_prof.institution,
                                                               i_prof.software) dt_create,
                                   ems.flg_status,
                                   decode(ems.flg_status,
                                          pk_sev_scores_constant.g_flg_status_a,
                                          pk_message.get_message(i_lang, 'TRAUMA_T020'),
                                          pk_sev_scores_constant.g_flg_status_o,
                                          pk_message.get_message(i_lang, 'TRAUMA_T021'),
                                          pk_sysdomain.get_domain('EPIS_MTOS_SCORE.FLG_STATUS', ems.flg_status, i_lang)) desc_status,
                                   chk_flg_cancel(i_lang,
                                                  i_prof,
                                                  ems.id_episode,
                                                  ems.id_epis_mtos_score,
                                                  ems.id_prof_create) flg_cancel
                              FROM epis_mtos_score ems
                             WHERE ems.id_episode = i_id_episode
                               AND i_mtos_score IS NULL
                               AND ems.flg_status IN
                                   (pk_sev_scores_constant.g_flg_status_a, pk_sev_scores_constant.g_flg_status_c)) xsql
                      JOIN mtos_score sco
                        ON xsql.id_mtos_score = sco.id_mtos_score
                     ORDER BY xsql.dt_create_time DESC;
            
                g_error := 'GET ALL REGISTERED SCORE GROUPS - ID_PATIENT = ' || i_id_patient || ', ID_EPISODE = ' ||
                           i_id_episode;
            
                IF NOT get_score_groups(i_lang       => i_lang,
                                        i_prof       => i_prof,
                                        i_id_patient => i_id_patient,
                                        i_id_episode => i_id_episode,
                                        o_groups     => o_groups,
                                        o_error      => o_error)
                THEN
                    RAISE l_internal_error;
                END IF;
            
                g_error := 'GET DATA FOR ALL REGISTERED SCORES - ID_PATIENT = ' || i_id_patient || ', ID_EPISODE = ' ||
                           i_id_episode;
            
                OPEN o_values FOR
                    SELECT DISTINCT ems.id_epis_mtos_score,
                                    decode(i_mtos_score,
                                           NULL,
                                           get_epis_mtos_score(i_lang,
                                                               i_prof,
                                                               i_id_patient,
                                                               i_id_episode,
                                                               ems.id_epis_mtos_score,
                                                               NULL),
                                           nvl(mg.id_mtos_score_group, mse.id_mtos_score)) id_mtos_score, -- support for the old detail screen
                                    nvl(mg.id_mtos_score_group, mse.id_mtos_score) id_group,
                                    CASE
                                         WHEN ems.id_mtos_score IN (50, 51) THEN
                                          get_mto_score_parent(ems.id_mtos_score)
                                         ELSE
                                          NULL
                                     END id_mtos_score_parent,
                                    mpm.id_mtos_param,
                                    mse.flg_score_type,
                                    mpm.flg_fill_type,
                                    decode(mg.id_mtos_score_group,
                                           NULL,
                                           decode(mse.id_mtos_score,
                                                  pk_sev_scores_constant.g_id_score_tw_head,
                                                  pk_translation.get_translation(i_lang, mse.code_mtos_score),
                                                  pk_sev_scores_constant.g_id_score_tw_face,
                                                  pk_translation.get_translation(i_lang, mse.code_mtos_score),
                                                  pk_sev_scores_constant.g_id_score_tw_chest,
                                                  pk_translation.get_translation(i_lang, mse.code_mtos_score),
                                                  pk_sev_scores_constant.g_id_score_tw_abdomen,
                                                  pk_translation.get_translation(i_lang, mse.code_mtos_score),
                                                  pk_sev_scores_constant.g_id_score_tw_extremities,
                                                  pk_translation.get_translation(i_lang, mse.code_mtos_score),
                                                  pk_sev_scores_constant.g_id_score_tw_external,
                                                  pk_translation.get_translation(i_lang, mse.code_mtos_score),
                                                  pk_sev_scores_constant.g_id_score_tw_dao,
                                                  pk_translation.get_translation(i_lang, mse.code_mtos_score),
                                                  pk_sev_scores_constant.g_id_score_isstw,
                                                  pk_translation.get_translation(i_lang, mse.code_mtos_score),
                                                  (SELECT pk_sev_scores_core.get_score_det_dest(i_lang,
                                                                                                mse.code_mtos_score,
                                                                                                mse.code_mtos_score_abbrev)
                                                     FROM dual)),
                                           pk_translation.get_translation(i_lang, mg.code_mtos_score_group)) score_desc,
                                    mse.flg_title_visible flg_title_visible,
                                    (SELECT pk_translation.get_translation(i_lang, mpm.code_mtos_param)
                                       FROM dual) AS param_desc,
                                    mse.rank score_rank,
                                    mg.rank group_rank,
                                    mpm.rank param_rank,
                                    get_registered_value_desc(i_lang,
                                                              i_prof,
                                                              emp.id_epis_mtos_score,
                                                              mpm.id_mtos_param,
                                                              emp.extra_score) registered_value_desc
                      FROM epis_mtos_score ems
                      JOIN epis_mtos_param emp
                        ON ems.id_epis_mtos_score = emp.id_epis_mtos_score
                      JOIN mtos_param mpm
                        ON mpm.id_mtos_param = emp.id_mtos_param
                      JOIN mtos_score mse
                        ON mse.id_mtos_score = mpm.id_mtos_score
                      LEFT JOIN vital_sign_read vsr
                        ON decode(emp.flg_param_task_type,
                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                  emp.id_task_refid,
                                  NULL) = vsr.id_vital_sign_read
                      LEFT JOIN mtos_score_group mg
                        ON mpm.id_mtos_score_group = mg.id_mtos_score_group
                     WHERE ems.id_episode = i_id_episode
                       AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                           vsr.id_vital_sign_read IS NULL)
                       AND (emp.registered_value IS NOT NULL OR to_char(emp.notes) IS NOT NULL)
                       AND i_mtos_score IS NULL
                       AND ems.flg_status IN
                           (pk_sev_scores_constant.g_flg_status_a, pk_sev_scores_constant.g_flg_status_c)
                     ORDER BY mse.rank, mg.rank, mpm.rank ASC, mpm.id_mtos_param;
            
                pk_types.open_my_cursor(o_cancel);
            
            ELSIF i_epis_mtos_score IS NULL
            THEN
            
                -- DETALHE TRAUMA
                g_error := 'TRAUMA DETAIL: GET_SEV_SCORE ACTIVE EVALUATION ID';
                SELECT ems.id_epis_mtos_score
                  INTO l_epis_mtos_score
                  FROM epis_mtos_score ems
                 WHERE ems.id_mtos_score = i_mtos_score
                   AND ems.id_episode = i_id_episode
                   AND ems.flg_status = pk_sev_scores_constant.g_flg_status_a;
            
                g_error := 'TRAUMA DETAIL: CALL TO GET_SEV_SCORE_EVALUATION DETAIL';
                IF NOT get_sev_scores_values(i_lang,
                                             i_prof,
                                             i_id_patient,
                                             i_id_episode,
                                             i_mtos_score,
                                             l_epis_mtos_score,
                                             o_reg,
                                             o_groups,
                                             o_values,
                                             o_cancel,
                                             o_error)
                THEN
                    RAISE l_internal_error;
                END IF;
            
            ELSE
                -- DETALHE DE UMA AVALIAÇÃO
                g_error := 'GET REGISTERED SCORE FOR AN EVALUATION - ID_EPIS_MTOS_SCORE = ' || i_epis_mtos_score;
            
                OPEN o_reg FOR
                    SELECT xsql.id_epis_mtos_score,
                           xsql.id_mtos_score,
                           xsql.desc_total_scores,
                           xsql.total_scores,
                           xsql.id_prof_create,
                           xsql.prof_name,
                           xsql.desc_speciality,
                           xsql.dt_create,
                           xsql.flg_status,
                           xsql.desc_status,
                           xsql.flg_cancel,
                           xsql.dt_create_t,
                           pk_sev_scores_core.get_desc_score(i_lang, i_prof, xsql.id_mtos_score) desc_scores,
                           prof_name || ' (' || desc_speciality || '); ' || dt_create signature
                      FROM (SELECT ems.id_epis_mtos_score,
                                   get_epis_mtos_score(i_lang,
                                                       i_prof,
                                                       i_id_patient,
                                                       i_id_episode,
                                                       ems.id_epis_mtos_score,
                                                       NULL) id_mtos_score,
                                   get_epis_mtos_total_desc(i_lang, i_prof, i_id_patient, ems.id_epis_mtos_score) desc_total_scores,
                                   get_epis_mtos_total(i_lang, i_prof, i_id_patient, ems.id_epis_mtos_score) total_scores,
                                   ems.id_prof_create id_prof_create,
                                   pk_prof_utils.get_name_signature(i_lang, i_prof, ems.id_prof_create) prof_name,
                                   pk_prof_utils.get_spec_signature(i_lang,
                                                                    i_prof,
                                                                    ems.id_prof_create,
                                                                    ems.dt_create,
                                                                    ems.id_episode) desc_speciality,
                                   pk_date_utils.date_char_tsz(i_lang,
                                                               ems.dt_create,
                                                               i_prof.institution,
                                                               i_prof.software) dt_create,
                                   pk_sev_scores_constant.g_flg_status_o flg_status,
                                   pk_message.get_message(i_lang, 'TRAUMA_T021') desc_status,
                                   pk_alert_constant.get_no flg_cancel,
                                   ems.dt_create dt_create_t
                              FROM epis_mtos_score ems
                             WHERE ems.id_epis_mtos_score IN
                                   (SELECT column_value
                                      FROM TABLE(get_sev_score_detail_ids(i_lang, i_prof, i_epis_mtos_score, 'Y')))
                            UNION ALL
                            SELECT ems.id_epis_mtos_score,
                                   get_epis_mtos_score(i_lang,
                                                       i_prof,
                                                       i_id_patient,
                                                       i_id_episode,
                                                       ems.id_epis_mtos_score,
                                                       NULL) id_mtos_score,
                                   get_epis_mtos_total_desc(i_lang, i_prof, i_id_patient, ems.id_epis_mtos_score) desc_total_scores,
                                   get_epis_mtos_total(i_lang, i_prof, i_id_patient, ems.id_epis_mtos_score) total_scores,
                                   decode(ems.flg_status,
                                          pk_sev_scores_constant.g_flg_status_c,
                                          ems.id_prof_cancel,
                                          ems.id_prof_create) id_prof_create,
                                   decode(ems.flg_status,
                                          pk_sev_scores_constant.g_flg_status_c,
                                          pk_prof_utils.get_name_signature(i_lang, i_prof, ems.id_prof_cancel),
                                          pk_prof_utils.get_name_signature(i_lang, i_prof, ems.id_prof_create)) prof_name,
                                   decode(ems.flg_status,
                                          pk_sev_scores_constant.g_flg_status_c,
                                          pk_prof_utils.get_spec_signature(i_lang,
                                                                           i_prof,
                                                                           ems.id_prof_cancel,
                                                                           ems.dt_cancel,
                                                                           ems.id_episode),
                                          pk_prof_utils.get_spec_signature(i_lang,
                                                                           i_prof,
                                                                           ems.id_prof_create,
                                                                           ems.dt_create,
                                                                           ems.id_episode)) desc_speciality,
                                   decode(ems.flg_status,
                                          pk_sev_scores_constant.g_flg_status_c,
                                          pk_date_utils.date_char_tsz(i_lang,
                                                                      ems.dt_cancel,
                                                                      i_prof.institution,
                                                                      i_prof.software),
                                          pk_date_utils.date_char_tsz(i_lang,
                                                                      ems.dt_create,
                                                                      i_prof.institution,
                                                                      i_prof.software)) dt_create,
                                   ems.flg_status,
                                   decode(ems.flg_status,
                                          pk_sev_scores_constant.g_flg_status_a,
                                          pk_message.get_message(i_lang, 'TRAUMA_T020'),
                                          pk_sev_scores_constant.g_flg_status_o,
                                          pk_message.get_message(i_lang, 'TRAUMA_T021'),
                                          pk_sysdomain.get_domain('EPIS_MTOS_SCORE.FLG_STATUS', ems.flg_status, i_lang)) desc_status,
                                   chk_flg_cancel(i_lang,
                                                  i_prof,
                                                  ems.id_episode,
                                                  ems.id_epis_mtos_score,
                                                  ems.id_prof_create) flg_cancel,
                                   decode(ems.flg_status,
                                          pk_sev_scores_constant.g_flg_status_c,
                                          ems.dt_cancel,
                                          ems.dt_create) dt_create_t
                              FROM epis_mtos_score ems
                             WHERE ems.id_epis_mtos_score IN
                                   (SELECT column_value
                                      FROM TABLE(get_sev_score_detail_ids(i_lang, i_prof, i_epis_mtos_score, 'N')))
                             ORDER BY dt_create_t DESC) xsql;
            
                pk_types.open_my_cursor(o_groups);
            
                g_error := 'GET DATA FOR ALL REGISTERED SCORES FOR AN EVALUATION - ID_EPIS_MTOS_SCORE = ' ||
                           i_epis_mtos_score;
            
                OPEN o_values FOR
                    SELECT t.id_epis_mtos_score,
                           t.id_mtos_score,
                           t.id_group,
                           t.group_desc,
                           t.id_mtos_param,
                           t.flg_score_type,
                           t.flg_fill_type,
                           t.score_desc,
                           t.param_desc,
                           t.score_rank,
                           t.group_rank,
                           t.param_rank,
                           t.registered_value_desc
                      FROM (SELECT DISTINCT ems.id_epis_mtos_score,
                                            decode(i_mtos_score,
                                                   NULL,
                                                   get_epis_mtos_score(i_lang,
                                                                       i_prof,
                                                                       i_id_patient,
                                                                       i_id_episode,
                                                                       ems.id_epis_mtos_score,
                                                                       NULL),
                                                   mse.id_mtos_score) id_mtos_score, -- support for the old detail screen
                                            nvl(mg.id_mtos_score_group, mse.id_mtos_score) id_group,
                                            decode(mg.id_mtos_score_group,
                                                   NULL,
                                                   NULL,
                                                   pk_translation.get_translation(i_lang, mg.code_mtos_score_group)) group_desc,
                                            mpm.id_mtos_param,
                                            mse.flg_score_type,
                                            mpm.flg_fill_type,
                                            (SELECT pk_sev_scores_core.get_score_det_dest(i_lang,
                                                                                          mse.code_mtos_score,
                                                                                          mse.code_mtos_score_abbrev)
                                               FROM dual) score_desc,
                                            (SELECT pk_translation.get_translation(i_lang, mpm.code_mtos_param)
                                               FROM dual) param_desc,
                                            mse.rank score_rank,
                                            mpm.rank param_rank,
                                            get_registered_value_desc(i_lang,
                                                                      i_prof,
                                                                      emp.id_epis_mtos_score,
                                                                      mpm.id_mtos_param,
                                                                      emp.extra_score) registered_value_desc,
                                            ems.dt_create,
                                            mg.rank group_rank
                              FROM epis_mtos_score ems
                              JOIN epis_mtos_param emp
                                ON ems.id_epis_mtos_score = emp.id_epis_mtos_score
                              JOIN mtos_param mpm
                                ON mpm.id_mtos_param = emp.id_mtos_param
                              JOIN mtos_score mse
                                ON mse.id_mtos_score = mpm.id_mtos_score
                              LEFT JOIN vital_sign_read vsr
                                ON decode(emp.flg_param_task_type,
                                          pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                          emp.id_task_refid,
                                          NULL) = vsr.id_vital_sign_read
                              LEFT JOIN mtos_score_group mg
                                ON mpm.id_mtos_score_group = mg.id_mtos_score_group
                             WHERE ems.id_epis_mtos_score IN
                                   (SELECT column_value
                                      FROM TABLE(get_sev_score_detail_ids(i_lang, i_prof, i_epis_mtos_score, 'N')))
                               AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                                   vsr.id_vital_sign_read IS NULL)
                               AND (emp.registered_value IS NOT NULL OR to_char(emp.notes) IS NOT NULL)) t
                     ORDER BY t.dt_create DESC, t.score_rank ASC, t.group_rank, t.id_group, t.param_rank ASC;
            
                g_error := 'GET CANCEL DATA';
                OPEN o_cancel FOR
                    SELECT ems.id_epis_mtos_score,
                           pk_translation.get_translation(i_lang, cr.code_cancel_reason) cancel_reason,
                           ems.notes_cancel cancel_notes
                      FROM epis_mtos_score ems
                      LEFT JOIN cancel_reason cr
                        ON (ems.id_cancel_reason = cr.id_cancel_reason)
                     WHERE ems.id_epis_mtos_score IN
                           (SELECT column_value
                              FROM TABLE(get_sev_score_detail_ids(i_lang, i_prof, i_epis_mtos_score, 'N')))
                       AND ems.flg_status = pk_sev_scores_constant.g_flg_status_c
                     ORDER BY ems.dt_create DESC;
            END IF;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang     => i_lang,
                                              i_sqlcode  => SQLCODE,
                                              i_sqlerrm  => SQLERRM,
                                              i_message  => g_error,
                                              i_owner    => g_owner,
                                              i_package  => g_package,
                                              i_function => l_func_name,
                                              o_error    => o_error);
            pk_types.open_my_cursor(o_reg);
            pk_types.open_my_cursor(o_groups);
            pk_types.open_my_cursor(o_values);
            pk_types.open_my_cursor(o_cancel);
            RETURN FALSE;
    END get_sev_scores_values;

    /**********************************************************************************************
    * Check if severity score evaluation can be canceled.
    * If so, the CANCEL button is activated.
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_episode            Episode ID
    * @param i_epis_mtos_score    Episode score record ID
    * @param i_prof_create        Professional ID
    *                        
    * @return            Flag for cancel button - Y - active; N - inactive
    *
    * @author            Tércio Soares
    * @version           2.6.0.4  
    * @since             2010/09/20
    **********************************************************************************************/
    FUNCTION chk_flg_cancel
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_episode         IN episode.id_episode%TYPE,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        i_prof_create     IN epis_mtos_score.id_prof_create%TYPE
    ) RETURN VARCHAR2 IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'CHK_FLG_CANCEL';
        l_error t_error_out;
    
        l_inst    institution.id_institution%TYPE;
        l_soft    software.id_software%TYPE;
        l_profile profile_template.id_profile_template%TYPE;
        l_market  market.id_market%TYPE;
    
        l_id_profile_template_pc profile_template.id_profile_template%TYPE;
    
        l_flg_cancel VARCHAR2(1 CHAR) := pk_alert_constant.get_no;
        l_flg_status VARCHAR2(1 CHAR);
    
    BEGIN
    
        SELECT ems.flg_status
          INTO l_flg_status
          FROM epis_mtos_score ems
         WHERE ems.id_epis_mtos_score = i_epis_mtos_score;
    
        g_error := 'GET CFG_VARS';
        pk_alertlog.log_info(text => g_error, object_name => g_package, sub_object_name => l_func_name);
        IF NOT (get_cfg_vars(i_lang    => i_lang,
                             i_prof    => i_prof,
                             o_inst    => l_inst,
                             o_soft    => l_soft,
                             o_profile => l_profile,
                             o_market  => l_market,
                             o_error   => l_error))
        THEN
            RETURN NULL;
        END IF;
    
        g_error := 'GET PROFESSIONAL PROFILE: i_id_prof_create = ' || i_prof_create;
        pk_alertlog.log_debug(g_error);
        l_id_profile_template_pc := pk_prof_utils.get_prof_profile_template(i_prof => profissional(i_prof_create,
                                                                                                   l_inst,
                                                                                                   l_soft));
    
        g_error := 'GET FLG_CANCEL value';
        pk_alertlog.log_debug(g_error);
        IF l_id_profile_template_pc IS NOT NULL
        THEN
            IF l_profile = l_id_profile_template_pc
               AND l_flg_status = pk_sev_scores_constant.g_flg_status_a
            THEN
            
                l_flg_cancel := pk_alert_constant.get_yes;
            
            ELSIF i_prof.id = i_prof_create
                  AND l_flg_status = pk_sev_scores_constant.g_flg_status_a
            THEN
                l_flg_cancel := pk_alert_constant.get_yes;
            
            END IF;
        ELSIF i_prof.id = i_prof_create
              AND l_flg_status = pk_sev_scores_constant.g_flg_status_a
        THEN
            l_flg_cancel := pk_alert_constant.get_yes;
        
        ELSE
        
            l_flg_cancel := pk_alert_constant.get_no;
        
        END IF;
    
        RETURN l_flg_cancel;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END chk_flg_cancel;

    /**********************************************************************************************
    * Returns the score parameter to be displayed in the evaluation screen
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_epis_mtos_score    Episode score record ID
    * @param i_id_mtos_param      Score parameter ID
    *                        
    * @return            Score parameter evaluation
    *
    * @author            Tércio Soares
    * @version           2.6.0.4
    * @since             2010/09/21
    **********************************************************************************************/
    FUNCTION get_registered_value_desc
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        i_id_mtos_param   IN epis_mtos_param.id_mtos_param%TYPE,
        i_id_extra_score  IN epis_mtos_param.extra_score%TYPE
    ) RETURN VARCHAR2 IS
        l_func_name CONSTANT VARCHAR2(200) := 'GET_REGISTERED_VALUE_DESC';
    
        l_mtos_param_desc      VARCHAR2(1000 CHAR);
        l_mtos_param_desc_bulk table_varchar := table_varchar();
    
        l_internal_error EXCEPTION;
        l_error t_error_out;
    
    BEGIN
    
        IF i_epis_mtos_score IS NOT NULL
           AND i_id_mtos_param IS NOT NULL
        THEN
            g_error := 'GET SCORE PARAM';
            pk_alertlog.log_debug(g_error);
            SELECT DISTINCT decode(mpm.flg_fill_type,
                                    pk_sev_scores_constant.g_flg_fill_type_f,
                                    to_char(emp.notes),
                                    decode(mpm.internal_name,
                                           pk_sev_scores_constant.g_param_type_msts,
                                           get_formatted_total(i_lang, i_prof, emp.registered_value, mpm.internal_name),
                                           pk_sev_scores_constant.g_param_type_triss_total_p,
                                           get_formatted_total(i_lang, i_prof, emp.registered_value, mpm.internal_name),
                                           pk_sev_scores_constant.g_param_type_triss_total_b,
                                           get_formatted_total(i_lang, i_prof, emp.registered_value, mpm.internal_name),
                                           pk_sev_scores_constant.g_param_type_rts_total,
                                           pk_sev_scores_core.get_formatted_total(i_lang,
                                                                                  i_prof,
                                                                                  emp.registered_value,
                                                                                  mpm.internal_name),
                                           pk_sev_scores_constant.g_param_type_age,
                                           decode(emp.registered_value,
                                                  NULL,
                                                  NULL,
                                                  -- Age is shown in years
                                                  TRIM(emp.registered_value) || ' (' ||
                                                  pk_message.get_message(i_lang, 'COMMON_M050') || ')'),
                                           pk_sev_scores_constant.g_param_type_tiss28_nc,
                                           get_formatted_total(i_lang, i_prof, emp.registered_value, mpm.internal_name),
                                           pk_sev_scores_constant.g_param_type_aldrete_total,
                                           get_formatted_total(i_lang, i_prof, emp.registered_value, mpm.internal_name),
                                           pk_sev_scores_constant.g_param_type_apache2_oxi,
                                           get_formatted_total(i_lang,
                                                               i_prof,
                                                               emp.registered_value,
                                                               mpm.internal_name,
                                                               i_epis_mtos_score),
                                           pk_sev_scores_constant.g_param_type_apache2_dr,
                                           get_formatted_total(i_lang, i_prof, emp.registered_value, mpm.internal_name),
                                           pk_sev_scores_constant.g_param_type_crib2_dr,
                                           get_formatted_total(i_lang, i_prof, emp.registered_value, mpm.internal_name),
                                           pk_sev_scores_constant.g_param_type_cur65_total_1,
                                           get_formatted_total(i_lang, i_prof, emp.registered_value, mpm.internal_name),
                                           decode(decode(mpt.flg_param_task_type,
                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                         mpt.id_param_task,
                                                         NULL),
                                                  NULL,
                                                  decode(mpm.flg_fill_type,
                                                         pk_sev_scores_constant.g_flg_fill_type_m,
                                                         (SELECT decode(mse.flg_score_type,
                                                                        pk_sev_scores_constant.g_flg_score_iss, -- ISS Score should include the score value
                                                                        mpe.value || ' - ',
                                                                        pk_sev_scores_constant.g_flg_score_head_tw,
                                                                        mpe.value || ' - ',
                                                                        pk_sev_scores_constant.g_flg_score_face_tw,
                                                                        mpe.value || ' - ',
                                                                        pk_sev_scores_constant.g_flg_score_chest_tw,
                                                                        mpe.value || ' - ',
                                                                        pk_sev_scores_constant.g_flg_score_abdomen_tw,
                                                                        mpe.value || ' - ',
                                                                        pk_sev_scores_constant.g_flg_score_extre_tw,
                                                                        mpe.value || ' - ',
                                                                        pk_sev_scores_constant.g_flg_score_exter_tw,
                                                                        mpe.value || ' - ',
                                                                        pk_sev_scores_constant.g_flg_score_doa_tw,
                                                                        mpe.value || ' - ',
                                                                        to_char(NULL)) ||
                                                                 pk_translation.get_translation(i_lang,
                                                                                                mpe.code_mtos_param_value) ||
                                                                 decode(i_id_extra_score,
                                                                        NULL,
                                                                        NULL,
                                                                        '.' ||
                                                                        (pk_message.get_message(i_lang,
                                                                                                i_prof,
                                                                                                'SEV_CODES_TW.EXTRA') || ' ' ||
                                                                        pk_sysdomain.get_domain(i_code_dom => 'YES_NO',
                                                                                                 i_val      => i_id_extra_score,
                                                                                                 i_lang     => i_lang)))
                                                            FROM mtos_param_value mpe
                                                           WHERE mpe.id_mtos_param_value = emp.registered_value),
                                                         pk_sev_scores_constant.g_flg_fill_type_l,
                                                         CASE
                                                             WHEN mpm.id_mtos_score = pk_sev_scores_constant.g_id_score_apache_tw THEN
                                                              to_char(emp.registered_value)
                                                             ELSE
                                                              (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value) ||
                                                                      decode(i_id_extra_score,
                                                                             NULL,
                                                                             NULL,
                                                                             '.' || (pk_message.get_message(i_lang, i_prof, 'SEV_CODES_TW.EXTRA') || ' ' ||
                                                                             pk_sysdomain.get_domain(i_code_dom => 'YES_NO',
                                                                                                             i_val      => i_id_extra_score,
                                                                                                             i_lang     => i_lang)))
                                                                 FROM mtos_param_value mpe
                                                                WHERE mpe.id_mtos_param_value = emp.registered_value)
                                                         END,
                                                         pk_sev_scores_constant.g_flg_fill_type_s,
                                                         (SELECT decode(mse.flg_score_type,
                                                                        pk_sev_scores_constant.g_flg_score_iss, -- ISS Score should include the score value
                                                                        mpe.value || ' - ',
                                                                        pk_sev_scores_constant.g_flg_score_head_tw,
                                                                        mpe.value || ' - ',
                                                                        pk_sev_scores_constant.g_flg_score_face_tw,
                                                                        mpe.value || ' - ',
                                                                        pk_sev_scores_constant.g_flg_score_chest_tw,
                                                                        mpe.value || ' - ',
                                                                        pk_sev_scores_constant.g_flg_score_abdomen_tw,
                                                                        mpe.value || ' - ',
                                                                        pk_sev_scores_constant.g_flg_score_extre_tw,
                                                                        mpe.value || ' - ',
                                                                        pk_sev_scores_constant.g_flg_score_exter_tw,
                                                                        mpe.value || ' - ',
                                                                        pk_sev_scores_constant.g_flg_score_doa_tw,
                                                                        mpe.value || ' - ',
                                                                        to_char(NULL)) ||
                                                                 pk_translation.get_translation(i_lang,
                                                                                                mpe.code_mtos_param_value) ||
                                                                 decode(i_id_extra_score,
                                                                        NULL,
                                                                        NULL,
                                                                        '.' ||
                                                                        (pk_message.get_message(i_lang,
                                                                                                i_prof,
                                                                                                'SEV_CODES_TW.EXTRA') || ' ' ||
                                                                        pk_sysdomain.get_domain(i_code_dom => 'YES_NO',
                                                                                                 i_val      => i_id_extra_score,
                                                                                                 i_lang     => i_lang)))
                                                            FROM mtos_param_value mpe
                                                           WHERE mpe.id_mtos_param_value = emp.registered_value),
                                                         --TISS
                                                         pk_sev_scores_constant.g_flg_fill_type_r,
                                                         (SELECT pk_translation.get_translation(i_lang,
                                                                                                mpv.code_mtos_param_value)
                                                            FROM mtos_param_value mpv
                                                           WHERE mpv.id_mtos_param = mpm.id_mtos_param
                                                             AND mpv.value = emp.registered_value),
                                                         --emp.registered_value),
                                                         --pk_utils.number_to_char(i_prof, emp.registered_value)),
                                                         get_formatted_total(i_lang,
                                                                             i_prof,
                                                                             emp.registered_value,
                                                                             mpm.internal_name)),
                                                  decode(mpm.flg_fill_type,
                                                         pk_sev_scores_constant.g_flg_fill_type_p,
                                                         to_char(emp.registered_value) || ' ' ||
                                                         pk_vital_sign.get_vital_sign_unit_measure(i_lang,
                                                                                                   vsr.id_unit_measure,
                                                                                                   vsr.id_vs_scales_element),
                                                         pk_sev_scores_constant.g_flg_fill_type_n,
                                                         decode(decode(emp.flg_param_task_type,
                                                                       pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                       emp.id_task_refid,
                                                                       NULL),
                                                                NULL,
                                                                decode(get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                mpt.id_param_task,
                                                                                                NULL),
                                                                                         i_prof.institution,
                                                                                         i_prof.software),
                                                                       NULL,
                                                                       to_char(emp.registered_value),
                                                                       (SELECT CASE
                                                                                    WHEN emp.registered_value < 1 THEN
                                                                                     to_char(emp.registered_value, 'FM9990d999')
                                                                                    ELSE
                                                                                     to_char(emp.registered_value)
                                                                                END || ' ' ||
                                                                                pk_translation.get_translation(i_lang,
                                                                                                               um.code_unit_measure)
                                                                          FROM unit_measure um
                                                                         WHERE um.id_unit_measure =
                                                                               get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                        pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                        mpt.id_param_task,
                                                                                                        NULL),
                                                                                                 i_prof.institution,
                                                                                                 i_prof.software))),
                                                                (SELECT pk_utils.to_str(get_vital_sign_info(i_lang,
                                                                                                            i_prof,
                                                                                                            vsr.id_vital_sign,
                                                                                                            vsr.id_unit_measure,
                                                                                                            vsr.value,
                                                                                                            pk_sev_scores_constant.g_vital_sign_info_value),
                                                                                        i_prof) || ' ' ||
                                                                        pk_translation.get_translation(i_lang,
                                                                                                       um.code_unit_measure)
                                                                   FROM unit_measure um
                                                                  WHERE um.id_unit_measure =
                                                                        get_vital_sign_info(i_lang,
                                                                                            i_prof,
                                                                                            vsr.id_vital_sign,
                                                                                            vsr.id_unit_measure,
                                                                                            vsr.value,
                                                                                            pk_sev_scores_constant.g_vital_sign_info_um))),
                                                         pk_sev_scores_constant.g_flg_fill_type_m,
                                                         decode(decode(emp.flg_param_task_type,
                                                                       pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                       emp.id_task_refid,
                                                                       NULL),
                                                                NULL,
                                                                (SELECT pk_vital_sign.get_vs_alias(i_lang,
                                                                                                   NULL,
                                                                                                   -- Get registered age at the moment,
                                                                                                   -- not the current age.
                                                                                                   get_registered_age(ems.id_epis_mtos_score),
                                                                                                   vsd2.code_vital_sign_desc)
                                                                   FROM vital_sign_desc vsd2
                                                                  WHERE vsd2.id_vital_sign_desc = emp.registered_value),
                                                                (SELECT pk_vital_sign.get_vs_alias(i_lang,
                                                                                                   NULL,
                                                                                                   -- Get registered age at the moment,
                                                                                                   -- not the current age.
                                                                                                   get_registered_age(ems.id_epis_mtos_score),
                                                                                                   vsd2.code_vital_sign_desc)
                                                                   FROM vital_sign_desc vsd2
                                                                  WHERE vsd2.id_vital_sign_desc = vsr.id_vital_sign_desc)),
                                                         pk_sev_scores_constant.g_flg_fill_type_t,
                                                         get_formatted_total(i_lang,
                                                                             i_prof,
                                                                             emp.registered_value,
                                                                             mpm.internal_name,
                                                                             NULL,
                                                                             mpm.id_mtos_param),
                                                         to_char(emp.registered_value))))) AS registered_value_desc
              BULK COLLECT
              INTO l_mtos_param_desc_bulk
              FROM epis_mtos_score ems
              JOIN epis_mtos_param emp
                ON ems.id_epis_mtos_score = emp.id_epis_mtos_score
              JOIN mtos_param mpm
                ON mpm.id_mtos_param = emp.id_mtos_param
              LEFT JOIN mtos_param_task mpt
                ON mpt.id_mtos_param = mpm.id_mtos_param
               AND mpt.flg_available = pk_alert_constant.g_yes
              JOIN mtos_score mse
                ON mse.id_mtos_score = mpm.id_mtos_score
              LEFT JOIN vital_sign_read vsr
                ON decode(emp.flg_param_task_type,
                          pk_sev_scores_constant.g_flg_param_task_vital_sign,
                          emp.id_task_refid,
                          NULL) = vsr.id_vital_sign_read
            
             WHERE ems.id_epis_mtos_score = i_epis_mtos_score
               AND emp.id_mtos_param = i_id_mtos_param;
        
        ELSE
            l_mtos_param_desc := NULL;
        END IF;
    
        IF l_mtos_param_desc_bulk.exists(1)
        THEN
            FOR i IN l_mtos_param_desc_bulk.first .. l_mtos_param_desc_bulk.last
            LOOP
                IF l_mtos_param_desc_bulk(i) IS NOT NULL
                   AND l_mtos_param_desc_bulk(i) <> ' '
                THEN
                    IF i < l_mtos_param_desc_bulk.last
                    THEN
                        l_mtos_param_desc := l_mtos_param_desc || l_mtos_param_desc_bulk(i) || '; ';
                    ELSE
                        l_mtos_param_desc := l_mtos_param_desc || l_mtos_param_desc_bulk(i) || '.';
                    END IF;
                END IF;
            END LOOP;
        END IF;
    
        RETURN l_mtos_param_desc;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang     => i_lang,
                                              i_sqlcode  => SQLCODE,
                                              i_sqlerrm  => SQLERRM,
                                              i_message  => g_error,
                                              i_owner    => g_owner,
                                              i_package  => g_package,
                                              i_function => l_func_name,
                                              o_error    => l_error);
            RAISE l_internal_error;
    END get_registered_value_desc;

    FUNCTION get_icu_dt_admission
    (
        i_lang    IN language.id_language%TYPE,
        i_prof    IN profissional,
        i_episode IN episode.id_episode%TYPE
    ) RETURN TIMESTAMP
        WITH LOCAL TIME ZONE IS
        l_exception EXCEPTION;
        l_icu_dt_admission bmng_allocation_bed.dt_creation%TYPE;
    BEGIN
    
        SELECT dt_creation
          INTO l_icu_dt_admission
          FROM (SELECT bab.*
                  FROM bmng_allocation_bed bab
                  JOIN room r
                    ON r.id_room = bab.id_room
                 WHERE bab.id_episode = i_episode
                   AND r.flg_icu = pk_alert_constant.g_yes
                 ORDER BY bab.create_time DESC)
         WHERE rownum = 1;
    
        RETURN l_icu_dt_admission;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_icu_dt_admission;

    /********************************************************************************************
    * Shows all parameters for a specific score.
    * Returns the parameters properties and current value.
    *
    * @param i_lang                   Preferred language ID for this professional 
    * @param i_prof                   Object (professional ID, institution ID, software ID)
    * @param i_episode                Episode ID 
    * @param i_mtos_score             Severity score ID 
    * @param i_epis_mtos_score        Severity score evaluation ID
    * @param o_list                   Parameter list
    * @param o_error                  Error
    *
    * @return                         true or false on success or error
    *
    * @author                         Tércio Soares
    * @version                        2.6.0.4
    * @since                          2010/09/16
    **********************************************************************************************/
    FUNCTION get_sev_score_param_list
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_episode         IN episode.id_episode%TYPE,
        i_mtos_score      IN mtos_score.id_mtos_score%TYPE,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_SEV_SCORES_PARAM_LIST';
        l_internal_error EXCEPTION;
    
        l_id_patient    patient.id_patient%TYPE;
        l_pat_age       VARCHAR2(30);
        l_pat_age_years NUMBER(6);
    
    BEGIN
    
        g_error := 'GET PATIENT ID - ID_EPISODE = ' || i_episode;
        pk_alertlog.log_debug(g_error);
        SELECT e.id_patient, pk_patient.get_pat_age(i_lang, e.id_patient, i_prof)
          INTO l_id_patient, l_pat_age
          FROM episode e
         WHERE e.id_episode = i_episode;
    
        g_error := 'GET PATIENT AGE (YEARS) - ID_PATIENT = ' || l_id_patient;
        pk_alertlog.log_debug(g_error);
        IF NOT get_pat_age_years(i_lang  => i_lang,
                                 i_prof  => i_prof,
                                 i_age   => l_pat_age,
                                 o_age   => l_pat_age_years,
                                 o_error => o_error)
        THEN
            RAISE l_internal_error;
        END IF;
    
        CASE i_mtos_score
            WHEN pk_sev_scores_constant.g_id_score_triss THEN
                -- 5
                g_error := 'GET TRISS PARAMETER LIST FOR A NEW TRISS EVALUATION';
                pk_alertlog.log_debug(g_error);
                IF NOT get_triss_param_list(i_lang            => i_lang,
                                            i_prof            => i_prof,
                                            i_episode         => i_episode,
                                            i_id_patient      => l_id_patient,
                                            i_pat_age_years   => l_pat_age_years,
                                            i_epis_mtos_score => i_epis_mtos_score,
                                            o_list            => o_list,
                                            o_error           => o_error)
                
                THEN
                    RAISE l_internal_error;
                END IF;
            
            WHEN pk_sev_scores_constant.g_id_score_sofa THEN
                -- 11
                g_error := 'GET TRISS PARAMETER LIST FOR A NEW TRISS EVALUATION';
                pk_alertlog.log_debug(g_error);
                IF NOT get_sofa_param_list(i_lang            => i_lang,
                                           i_prof            => i_prof,
                                           i_episode         => i_episode,
                                           i_id_patient      => l_id_patient,
                                           i_pat_age_years   => l_pat_age_years,
                                           i_epis_mtos_score => i_epis_mtos_score,
                                           o_list            => o_list,
                                           o_error           => o_error)
                
                THEN
                    RAISE l_internal_error;
                END IF;
            
            WHEN pk_sev_scores_constant.g_id_score_tiss_28 THEN
                -- 12
                g_error := 'GET TISS PARAMETER LIST FOR A NEW TISS EVALUATION';
                pk_alertlog.log_debug(g_error);
                IF NOT get_tiss_param_list(i_lang            => i_lang,
                                           i_prof            => i_prof,
                                           i_episode         => i_episode,
                                           i_id_patient      => l_id_patient,
                                           i_pat_age_years   => l_pat_age_years,
                                           i_mtos_score      => pk_sev_scores_constant.g_id_score_tiss_28,
                                           i_epis_mtos_score => i_epis_mtos_score,
                                           o_list            => o_list,
                                           o_error           => o_error)
                
                THEN
                    RAISE l_internal_error;
                END IF;
            
            WHEN pk_sev_scores_constant.g_id_score_tiss_76 THEN
                -- 13
                g_error := 'GET TISS PARAMETER LIST FOR A NEW TISS EVALUATION';
                pk_alertlog.log_debug(g_error);
                IF NOT get_tiss_param_list(i_lang            => i_lang,
                                           i_prof            => i_prof,
                                           i_episode         => i_episode,
                                           i_id_patient      => l_id_patient,
                                           i_pat_age_years   => l_pat_age_years,
                                           i_mtos_score      => pk_sev_scores_constant.g_id_score_tiss_76,
                                           i_epis_mtos_score => i_epis_mtos_score,
                                           o_list            => o_list,
                                           o_error           => o_error)
                
                THEN
                    RAISE l_internal_error;
                END IF;
            
            WHEN pk_sev_scores_constant.g_id_score_aldrete THEN
                -- 16
                g_error := 'GET TRISS PARAMETER LIST FOR A NEW ALDRETE EVALUATION';
                pk_alertlog.log_debug(g_error);
                IF NOT get_aldrete_param_list(i_lang            => i_lang,
                                              i_prof            => i_prof,
                                              i_episode         => i_episode,
                                              i_id_patient      => l_id_patient,
                                              i_epis_mtos_score => i_epis_mtos_score,
                                              o_list            => o_list,
                                              o_error           => o_error)
                
                THEN
                    RAISE l_internal_error;
                END IF;
            
            WHEN pk_sev_scores_constant.g_id_score_crib THEN
                -- 8
                g_error := 'GET CRIB PARAMETER LIST FOR A NEW CRIB EVALUATION';
                pk_alertlog.log_debug(g_error);
                IF NOT get_crib_param_list(i_lang            => i_lang,
                                           i_prof            => i_prof,
                                           i_episode         => i_episode,
                                           i_id_patient      => l_id_patient,
                                           i_mtos_score      => pk_sev_scores_constant.g_id_score_crib,
                                           i_epis_mtos_score => i_epis_mtos_score,
                                           o_list            => o_list,
                                           o_error           => o_error)
                
                THEN
                    RAISE l_internal_error;
                END IF;
            
            WHEN pk_sev_scores_constant.g_id_score_crib2 THEN
                -- 17
                g_error := 'GET CRIB II PARAMETER LIST FOR A NEW CRIB II EVALUATION';
                pk_alertlog.log_debug(g_error);
                IF NOT get_crib_param_list(i_lang            => i_lang,
                                           i_prof            => i_prof,
                                           i_episode         => i_episode,
                                           i_id_patient      => l_id_patient,
                                           i_mtos_score      => pk_sev_scores_constant.g_id_score_crib2,
                                           i_epis_mtos_score => i_epis_mtos_score,
                                           o_list            => o_list,
                                           o_error           => o_error)
                
                THEN
                    RAISE l_internal_error;
                END IF;
            
            WHEN pk_sev_scores_constant.g_id_score_snap THEN
                -- 10
                g_error := 'GET SNAP PARAMETER LIST FOR A NEW SNAP EVALUATION';
                pk_alertlog.log_debug(g_error);
                IF NOT get_snap_param_list(i_lang            => i_lang,
                                           i_prof            => i_prof,
                                           i_episode         => i_episode,
                                           i_id_patient      => l_id_patient,
                                           i_epis_mtos_score => i_epis_mtos_score,
                                           o_list            => o_list,
                                           o_error           => o_error)
                
                THEN
                    RAISE l_internal_error;
                END IF;
            
            WHEN pk_sev_scores_constant.g_id_score_saps2 THEN
                -- 9
                g_error := 'GET SAPS II PARAMETER LIST FOR A NEW SAPS II EVALUATION';
                pk_alertlog.log_debug(g_error);
                IF NOT get_saps_param_list(i_lang            => i_lang,
                                           i_prof            => i_prof,
                                           i_episode         => i_episode,
                                           i_id_patient      => l_id_patient,
                                           i_pat_age_years   => l_pat_age_years,
                                           i_epis_mtos_score => i_epis_mtos_score,
                                           o_list            => o_list,
                                           o_error           => o_error)
                
                THEN
                    RAISE l_internal_error;
                END IF;
            
            WHEN pk_sev_scores_constant.g_id_score_apache2 THEN
                -- 14
                g_error := 'GET APACHE II PARAMETER LIST FOR A NEW APACHE II EVALUATION';
                pk_alertlog.log_debug(g_error);
                IF NOT get_apache2_param_list(i_lang            => i_lang,
                                              i_prof            => i_prof,
                                              i_episode         => i_episode,
                                              i_id_patient      => l_id_patient,
                                              i_pat_age_years   => l_pat_age_years,
                                              i_epis_mtos_score => i_epis_mtos_score,
                                              o_list            => o_list,
                                              o_error           => o_error)
                
                THEN
                    RAISE l_internal_error;
                END IF;
            
            WHEN pk_sev_scores_constant.g_id_score_apache3 THEN
                -- 15
                g_error := 'GET APACHE III PARAMETER LIST FOR A NEW APACHE III EVALUATION';
                pk_alertlog.log_debug(g_error);
                IF NOT get_apache3_param_list(i_lang            => i_lang,
                                              i_prof            => i_prof,
                                              i_episode         => i_episode,
                                              i_id_patient      => l_id_patient,
                                              i_pat_age_years   => l_pat_age_years,
                                              i_epis_mtos_score => i_epis_mtos_score,
                                              o_list            => o_list,
                                              o_error           => o_error)
                
                THEN
                    RAISE l_internal_error;
                END IF;
            
            WHEN pk_sev_scores_constant.g_id_score_si_it_is THEN
                g_error := 'GET SI/IT/IS PARAMETER LIST FOR A NEW SI/IT/IS EVALUATION';
                pk_alertlog.log_debug(g_error);
                IF NOT get_si_it_is_param_list(i_lang            => i_lang,
                                               i_prof            => i_prof,
                                               i_episode         => i_episode,
                                               i_id_patient      => l_id_patient,
                                               i_pat_age_years   => l_pat_age_years,
                                               i_epis_mtos_score => i_epis_mtos_score,
                                               o_list            => o_list,
                                               o_error           => o_error)
                
                THEN
                    RAISE l_internal_error;
                END IF;
            
            WHEN pk_sev_scores_constant.g_id_score_prism THEN
                g_error := 'GET PRISM PARAMETER LIST FOR A NEW PRISM EVALUATION';
                pk_alertlog.log_debug(g_error);
                IF NOT get_prism_param_list(i_lang            => i_lang,
                                            i_prof            => i_prof,
                                            i_episode         => i_episode,
                                            i_id_patient      => l_id_patient,
                                            i_pat_age_years   => l_pat_age_years,
                                            i_epis_mtos_score => i_epis_mtos_score,
                                            o_list            => o_list,
                                            o_error           => o_error)
                
                THEN
                    RAISE l_internal_error;
                END IF;
            WHEN pk_sev_scores_constant.g_id_score_sofa_tw THEN
            
                IF NOT get_sofa_tw_param_list(i_lang            => i_lang,
                                              i_prof            => i_prof,
                                              i_id_patient      => l_id_patient,
                                              i_episode         => i_episode,
                                              i_pat_age_years   => l_pat_age_years,
                                              i_epis_mtos_score => i_epis_mtos_score,
                                              o_list            => o_list,
                                              o_error           => o_error)
                THEN
                    RAISE l_internal_error;
                END IF;
            
            WHEN pk_sev_scores_constant.g_id_score_apache_tw THEN
                g_error := 'GET PRISM PARAMETER LIST FOR A NEW APACHE_II_TW EVALUATION';
                pk_alertlog.log_debug(g_error);
                IF NOT get_apache_tw_param_list(i_lang            => i_lang,
                                                i_prof            => i_prof,
                                                i_episode         => i_episode,
                                                i_id_patient      => l_id_patient,
                                                i_pat_age_years   => l_pat_age_years,
                                                i_epis_mtos_score => i_epis_mtos_score,
                                                o_list            => o_list,
                                                o_error           => o_error)
                
                THEN
                    RAISE l_internal_error;
                END IF;
            
            WHEN pk_sev_scores_constant.g_id_score_vte THEN
                g_error := 'GET PRISM PARAMETER LIST FOR A NEW PRISM EVALUATION';
                pk_alertlog.log_debug(g_error);
                IF NOT get_vte_param_list(i_lang            => i_lang,
                                          i_prof            => i_prof,
                                          i_episode         => i_episode,
                                          i_id_patient      => l_id_patient,
                                          i_pat_age_years   => l_pat_age_years,
                                          i_epis_mtos_score => i_epis_mtos_score,
                                          o_list            => o_list,
                                          o_error           => o_error)
                
                THEN
                    RAISE l_internal_error;
                END IF;
            
            WHEN pk_sev_scores_constant.g_id_score_curb65 THEN
                -- 18
                g_error := 'GET CURB65 PARAMETER LIST FOR A NEW CURB65 EVALUATION';
                pk_alertlog.log_debug(g_error);
                IF NOT get_curb65_param_list(i_lang            => i_lang,
                                             i_prof            => i_prof,
                                             i_episode         => i_episode,
                                             i_id_patient      => l_id_patient,
                                             i_epis_mtos_score => i_epis_mtos_score,
                                             i_mtos_score      => i_mtos_score,
                                             o_list            => o_list,
                                             o_error           => o_error)
                
                THEN
                    RAISE l_internal_error;
                END IF;
            WHEN pk_sev_scores_constant.g_id_score_isstw THEN
                g_error := 'GET CURB65 PARAMETER LIST FOR A NEW ISS TW';
                pk_alertlog.log_debug(g_error);
                IF NOT get_isstw_param_list(i_lang            => i_lang,
                                            i_prof            => i_prof,
                                            i_episode         => i_episode,
                                            i_id_patient      => l_id_patient,
                                            i_pat_age_years   => l_pat_age_years,
                                            i_mtos_score      => pk_sev_scores_constant.g_id_score_isstw,
                                            i_epis_mtos_score => i_epis_mtos_score,
                                            o_list            => o_list,
                                            o_error           => o_error)
                
                THEN
                    RAISE l_internal_error;
                END IF;
            
            WHEN pk_sev_scores_constant.g_id_score_timi THEN
                -- cmf 
                -- OPEN o_score FOR SELECT * FROM TABLE(pk_sev_scores_core_cmf.get_timi_group(i_lang, i_prof, i_mtos_score));
                get_timi_group(i_lang, i_prof, i_episode, i_mtos_score, i_epis_mtos_score, o_list);
            
        -- ALERT-255254 - now on any new scores goes for a general "configuration"
            ELSE
                IF NOT get_general_param_list(i_lang            => i_lang,
                                              i_prof            => i_prof,
                                              i_episode         => i_episode,
                                              i_id_patient      => l_id_patient,
                                              i_epis_mtos_score => i_epis_mtos_score,
                                              i_mtos_score      => i_mtos_score,
                                              o_list            => o_list,
                                              o_error           => o_error)
                
                THEN
                    g_error := 'INVALID SCORE';
                    pk_alertlog.log_debug(g_error);
                    pk_types.open_my_cursor(o_list);
                    RAISE l_internal_error;
                END IF;
            
        END CASE;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN l_internal_error THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_sev_score_param_list;

    /********************************************************************************************
    * Shows all parameters for TRISS score.
    * Returns the parameters properties and current value.
    *
    * @param i_lang                   Preferred language ID for this professional 
    * @param i_prof                   Object (professional ID, institution ID, software ID)
    * @param i_id_patient             Patient ID
    * @param i_episode                Episode ID 
    * @param i_pat_age_years          Patient age
    * @param i_epis_mtos_score        Severity score evaluation ID
    * @param o_list                   Parameter list
    * @param o_error                  Error
    *
    * @return                         true or false on success or error
    *
    * @author                         Tércio Soares
    * @version                        2.6.0.4
    * @since                          2010/12/09
    **********************************************************************************************/
    FUNCTION get_triss_param_list
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_patient      IN patient.id_patient%TYPE,
        i_episode         IN episode.id_episode%TYPE,
        i_pat_age_years   IN NUMBER,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_TRISS_PARAM_LIST';
        l_internal_error EXCEPTION;
    
        l_total_gcs     NUMBER(6, 4);
        l_total_pts     NUMBER(6, 4);
        l_total_rts     NUMBER(6, 4);
        l_total_iss     NUMBER(6, 4);
        l_total_triss_b NUMBER(6, 4);
        l_total_triss_p NUMBER(6, 4);
    
        l_gcs_eyes        NUMBER;
        l_gcs_verbal      NUMBER;
        l_gcs_motor       NUMBER;
        l_gcs_eyes_desc   pk_translation.t_desc_translation;
        l_gcs_verbal_desc pk_translation.t_desc_translation;
        l_gcs_motor_desc  pk_translation.t_desc_translation;
        l_gcs_total       NUMBER(6, 4);
        l_age             vital_sign_unit_measure.age_min%TYPE;
    
    BEGIN
    
        l_age := pk_patient.get_pat_age(i_lang, NULL, NULL, NULL, 'MONTHS', i_id_patient);
    
        g_error := 'CALL TO GET_GLASGOW_SCORE_VALUES';
        pk_alertlog.log_debug(g_error);
        IF NOT get_glasgow_score_aux(i_lang            => i_lang,
                                     i_prof            => i_prof,
                                     i_id_episode      => i_episode,
                                     i_id_patient      => i_id_patient,
                                     i_pat_age_years   => i_pat_age_years,
                                     o_gcs_eyes        => l_gcs_eyes,
                                     o_gcs_verbal      => l_gcs_verbal,
                                     o_gcs_motor       => l_gcs_motor,
                                     o_gcs_eyes_desc   => l_gcs_eyes_desc,
                                     o_gcs_verbal_desc => l_gcs_verbal_desc,
                                     o_gcs_motor_desc  => l_gcs_motor_desc,
                                     o_gcs_total       => l_gcs_total,
                                     o_error           => o_error)
        THEN
            RAISE l_internal_error;
        END IF;
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
            g_error := 'CALL TO GET_TOTAL_TRISS';
            pk_alertlog.log_debug(g_error);
            IF NOT pk_trauma_core.get_total_triss(i_lang          => i_lang,
                                                  i_prof          => i_prof,
                                                  i_episode       => i_episode,
                                                  i_id_patient    => i_id_patient,
                                                  i_pat_age_years => i_pat_age_years,
                                                  o_total_glasgow => l_total_gcs,
                                                  o_total_rts     => l_total_rts,
                                                  o_total_iss     => l_total_iss,
                                                  o_total_pts     => l_total_pts,
                                                  o_total_triss_b => l_total_triss_b,
                                                  o_total_triss_p => l_total_triss_p,
                                                  o_error         => o_error)
            THEN
                RAISE l_internal_error;
            END IF;
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       mse.id_mtos_score id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              l_total_gcs,
                              'PTS_TOTAL',
                              l_total_pts,
                              'RTS_TOTAL',
                              l_total_rts,
                              'ISS_TOTAL',
                              l_total_iss,
                              'TRISS_TOTAL_B',
                              l_total_triss_b,
                              'TRISS_TOTAL_P',
                              l_total_triss_p,
                              'PAT_AGE',
                              i_pat_age_years,
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     emp.registered_value,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   NULL,
                                                   get_vital_sign_info(i_lang,
                                                                       i_prof,
                                                                       vsr.id_vital_sign,
                                                                       vsr.id_unit_measure,
                                                                       vsr.value,
                                                                       pk_sev_scores_constant.g_vital_sign_info_value)),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            vsr.id_vital_sign_desc,
                                            pk_sev_scores_constant.g_flg_fill_type_s,
                                            vsr.id_vital_sign_desc,
                                            NULL))) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              pk_utils.to_str(l_total_gcs, i_prof),
                              'PTS_TOTAL',
                              pk_utils.to_str(l_total_pts, i_prof),
                              'RTS_TOTAL',
                              get_formatted_total(i_lang, i_prof, l_total_rts, mpm.internal_name),
                              'ISS_TOTAL',
                              pk_utils.to_str(l_total_iss, i_prof),
                              'TRISS_TOTAL_B',
                              get_formatted_total(i_lang, i_prof, l_total_triss_b, mpm.internal_name),
                              'TRISS_TOTAL_P',
                              get_formatted_total(i_lang, i_prof, l_total_triss_p, mpm.internal_name),
                              'PAT_AGE',
                              pk_utils.to_str(i_pat_age_years, i_prof),
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT decode(mse.flg_score_type,
                                                           pk_sev_scores_constant.g_flg_score_iss, -- ISS Score should include the score value
                                                           pk_utils.to_str(mpe.value, i_prof) || '-',
                                                           to_char(NULL)) ||
                                                    pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                               FROM mtos_param_value mpe
                                              WHERE mpe.id_mtos_param_value = emp.registered_value),
                                            pk_sev_scores_constant.g_flg_fill_type_s,
                                            (SELECT decode(mse.flg_score_type,
                                                           pk_sev_scores_constant.g_flg_score_iss, -- ISS Score should include the score value
                                                           pk_utils.to_str(mpe.value, i_prof) || '-',
                                                           to_char(NULL)) ||
                                                    pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                               FROM mtos_param_value mpe
                                              WHERE mpe.id_mtos_param_value = emp.registered_value),
                                            to_char(emp.registered_value)),
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   NULL,
                                                   (SELECT pk_utils.to_str(get_vital_sign_info(i_lang,
                                                                                               i_prof,
                                                                                               vsr.id_vital_sign,
                                                                                               vsr.id_unit_measure,
                                                                                               vsr.value,
                                                                                               pk_sev_scores_constant.g_vital_sign_info_value),
                                                                           i_prof) || ' ' ||
                                                           pk_translation.get_translation(i_lang, um.code_unit_measure)
                                                      FROM unit_measure um
                                                     WHERE um.id_unit_measure =
                                                           get_vital_sign_info(i_lang,
                                                                               i_prof,
                                                                               vsr.id_vital_sign,
                                                                               vsr.id_unit_measure,
                                                                               vsr.value,
                                                                               pk_sev_scores_constant.g_vital_sign_info_um))),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT pk_vital_sign.get_vs_alias(i_lang,
                                                                               i_id_patient,
                                                                               vsd2.code_vital_sign_desc)
                                               FROM vital_sign_desc vsd2
                                              WHERE vsd2.id_vital_sign_desc = vsr.id_vital_sign_desc),
                                            pk_sev_scores_constant.g_flg_fill_type_s,
                                            (SELECT pk_vital_sign.get_vs_alias(i_lang,
                                                                               i_id_patient,
                                                                               vsd2.code_vital_sign_desc)
                                               FROM vital_sign_desc vsd2
                                              WHERE vsd2.id_vital_sign_desc = vsr.id_vital_sign_desc),
                                            NULL))) registered_value_desc,
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              (SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                                 FROM unit_measure um
                                WHERE um.id_unit_measure = get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                    mpt.id_param_task,
                                                                                    NULL),
                                                                             i_prof.institution,
                                                                             i_prof.software))) unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_triss)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_triss),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                        pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                        mpt.id_param_task,
                                                        NULL),
                                                 i_prof.institution,
                                                 i_prof.software)
                          FROM dual) id_unit_measure,
                       (SELECT pk_vital_sign_core.get_vsum_val_min(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_min,
                       (SELECT pk_vital_sign_core.get_vsum_val_max(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_max,
                       (SELECT pk_vital_sign_core.get_vsum_format_num(i_lang            => i_lang,
                                                                      i_prof            => i_prof,
                                                                      i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                  mpt.id_param_task,
                                                                                                  NULL),
                                                                      i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                            mpt.id_param_task,
                                                                                                                            NULL),
                                                                                                                     i_prof.institution,
                                                                                                                     i_prof.software)
                                                                                              FROM dual),
                                                                      i_id_institution  => i_prof.institution,
                                                                      i_id_software     => i_prof.software,
                                                                      i_age             => l_age)
                          FROM dual) format_num,
                       vsr.id_vital_sign_read
                  FROM mtos_score mse, mtos_param mpm, vital_sign_read vsr, epis_mtos_param emp, mtos_param_task mpt
                 WHERE mse.id_mtos_score IN
                       (SELECT mtr.id_mtos_score_rel
                          FROM mtos_score_relation mtr
                         WHERE mtr.id_mtos_score = pk_sev_scores_constant.g_id_score_triss)
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND vsr.id_episode(+) = i_episode
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                UNION
                SELECT mse.id_mtos_score,
                       mse.id_mtos_score id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              l_total_gcs,
                              'PTS_TOTAL',
                              l_total_pts,
                              'RTS_TOTAL',
                              l_total_rts,
                              'ISS_TOTAL',
                              l_total_iss,
                              'TRISS_TOTAL_B',
                              l_total_triss_b,
                              'TRISS_TOTAL_P',
                              l_total_triss_p,
                              'PAT_AGE',
                              i_pat_age_years,
                              nvl(decode(mpt.flg_param_task_type,
                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                         mpt.id_param_task,
                                         NULL),
                                  emp.registered_value)) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              pk_utils.to_str(l_total_gcs, i_prof),
                              'PTS_TOTAL',
                              pk_utils.to_str(l_total_pts, i_prof),
                              'RTS_TOTAL',
                              get_formatted_total(i_lang, i_prof, l_total_rts, mpm.internal_name),
                              'ISS_TOTAL',
                              pk_utils.to_str(l_total_iss, i_prof),
                              'TRISS_TOTAL_B',
                              get_formatted_total(i_lang, i_prof, l_total_triss_b, mpm.internal_name),
                              'TRISS_TOTAL_P',
                              get_formatted_total(i_lang, i_prof, l_total_triss_p, mpm.internal_name),
                              'PAT_AGE',
                              pk_utils.to_str(i_pat_age_years, i_prof),
                              nvl(decode(mpt.flg_param_task_type,
                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                         mpt.id_param_task,
                                         NULL),
                                  decode(mpm.flg_fill_type,
                                         pk_sev_scores_constant.g_flg_fill_type_m,
                                         (SELECT decode(mse.flg_score_type,
                                                        pk_sev_scores_constant.g_flg_score_iss, -- ISS Score should include the score value
                                                        pk_utils.to_str(mpe.value, i_prof) || '-',
                                                        to_char(NULL)) ||
                                                 pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                            FROM mtos_param_value mpe
                                           WHERE mpe.id_mtos_param_value = emp.registered_value),
                                         pk_sev_scores_constant.g_flg_fill_type_s,
                                         (SELECT decode(mse.flg_score_type,
                                                        pk_sev_scores_constant.g_flg_score_iss, -- ISS Score should include the score value
                                                        pk_utils.to_str(mpe.value, i_prof) || '-',
                                                        to_char(NULL)) ||
                                                 pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                            FROM mtos_param_value mpe
                                           WHERE mpe.id_mtos_param_value = emp.registered_value),
                                         to_char(emp.registered_value)))) registered_value_desc,
                       NULL unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_triss)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_triss),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       NULL id_unit_measure,
                       NULL val_min,
                       NULL val_max,
                       NULL format_num,
                       vsr.id_vital_sign_read
                  FROM mtos_score mse, mtos_param mpm, vital_sign_read vsr, epis_mtos_param emp, mtos_param_task mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_triss
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND vsr.id_episode(+) = i_episode
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                 ORDER BY score_rank, param_rank;
        ELSE
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       mse.id_mtos_score id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              l_gcs_total,
                              'PAT_AGE',
                              i_pat_age_years,
                              'G_EYES',
                              l_gcs_eyes,
                              'G_VERBAL',
                              l_gcs_verbal,
                              'G_MOTOR',
                              l_gcs_motor,
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   NULL,
                                                   get_vital_sign_info(i_lang,
                                                                       i_prof,
                                                                       vsr.id_vital_sign,
                                                                       vsr.id_unit_measure,
                                                                       vsr.value,
                                                                       pk_sev_scores_constant.g_vital_sign_info_value)),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            vsr.id_vital_sign_desc,
                                            pk_sev_scores_constant.g_flg_fill_type_s,
                                            vsr.id_vital_sign_desc,
                                            NULL))) registered_value,
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              pk_utils.to_str(l_gcs_total, i_prof),
                              'PAT_AGE',
                              pk_utils.to_str(i_pat_age_years, i_prof),
                              'G_EYES',
                              l_gcs_eyes_desc,
                              'G_VERBAL',
                              l_gcs_verbal_desc,
                              'G_MOTOR',
                              l_gcs_motor_desc,
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   NULL,
                                                   (SELECT pk_utils.to_str(get_vital_sign_info(i_lang,
                                                                                               i_prof,
                                                                                               vsr.id_vital_sign,
                                                                                               vsr.id_unit_measure,
                                                                                               vsr.value,
                                                                                               pk_sev_scores_constant.g_vital_sign_info_value),
                                                                           i_prof) || ' ' ||
                                                           pk_translation.get_translation(i_lang, um.code_unit_measure)
                                                      FROM unit_measure um
                                                     WHERE um.id_unit_measure =
                                                           get_vital_sign_info(i_lang,
                                                                               i_prof,
                                                                               vsr.id_vital_sign,
                                                                               vsr.id_unit_measure,
                                                                               vsr.value,
                                                                               pk_sev_scores_constant.g_vital_sign_info_um))),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT pk_vital_sign.get_vs_alias(i_lang,
                                                                               i_id_patient,
                                                                               vsd2.code_vital_sign_desc)
                                               FROM vital_sign_desc vsd2
                                              WHERE vsd2.id_vital_sign_desc = vsr.id_vital_sign_desc),
                                            NULL))) registered_value_desc,
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              (SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                                 FROM unit_measure um
                                WHERE um.id_unit_measure = get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                    mpt.id_param_task,
                                                                                    NULL),
                                                                             i_prof.institution,
                                                                             i_prof.software))) unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_triss)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_triss),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                        pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                        mpt.id_param_task,
                                                        NULL),
                                                 i_prof.institution,
                                                 i_prof.software)
                          FROM dual) id_unit_measure,
                       (SELECT pk_vital_sign_core.get_vsum_val_min(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_min,
                       (SELECT pk_vital_sign_core.get_vsum_val_max(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_max,
                       (SELECT pk_vital_sign_core.get_vsum_format_num(i_lang            => i_lang,
                                                                      i_prof            => i_prof,
                                                                      i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                  mpt.id_param_task,
                                                                                                  NULL),
                                                                      i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                            mpt.id_param_task,
                                                                                                                            NULL),
                                                                                                                     i_prof.institution,
                                                                                                                     i_prof.software)
                                                                                              FROM dual),
                                                                      i_id_institution  => i_prof.institution,
                                                                      i_id_software     => i_prof.software,
                                                                      i_age             => l_age)
                          FROM dual) format_num,
                       vsr.id_vital_sign_read
                  FROM mtos_score mse, mtos_param mpm, vital_sign_read vsr, mtos_param_task mpt
                 WHERE mse.id_mtos_score IN
                       (SELECT mtr.id_mtos_score_rel
                          FROM mtos_score_relation mtr
                         WHERE mtr.id_mtos_score = pk_sev_scores_constant.g_id_score_triss)
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND vsr.id_episode(+) = i_episode
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                UNION
                SELECT mse.id_mtos_score,
                       mse.id_mtos_score id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name, 'PAT_AGE', i_pat_age_years, NULL) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name, 'PAT_AGE', pk_utils.to_str(i_pat_age_years, i_prof), NULL) registered_value_desc,
                       NULL unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_triss)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_triss),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       NULL id_unit_measure,
                       NULL val_min,
                       NULL val_max,
                       NULL format_num,
                       vsr.id_vital_sign_read
                  FROM mtos_score mse, mtos_param mpm, vital_sign_read vsr, mtos_param_task mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_triss
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND vsr.id_episode(+) = i_episode
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                 ORDER BY score_rank, param_rank;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_triss_param_list;

    /**********************************************************************************************
    * Returns the history of score evaluation for the current episode. Results shown in the detail screen.
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_id_episode         Episode ID
    * @param i_epis_mtos_score    Severity score evaluation ID
    * @param o_reg                Cursor with the score
    * @param o_value              Cursor with the parameters and registered values
    * @param o_cancel             Cursor with the cencelled registered data
    * @param o_error              Error message
    *                        
    * @return                     true or false on success or error
    *
    * @author                     Tércio Soares
    * @version                    2.6.0.4
    * @since                      2010/09/22
    **********************************************************************************************/
    FUNCTION get_sev_score_detail
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_episode      IN episode.id_episode%TYPE,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_reg             OUT pk_types.cursor_type,
        o_value           OUT pk_types.cursor_type,
        o_cancel          OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_SEV_SCORE_DETAIL';
    
        l_id_mtos_score mtos_score.id_mtos_score%TYPE;
        l_groups        pk_types.cursor_type;
    
    BEGIN
    
        g_error := 'GET_SEV_SCORE OF EVALUATION: ID_EPIS_MTOS_SCORE = ' || i_epis_mtos_score;
        SELECT ems.id_mtos_score
          INTO l_id_mtos_score
          FROM epis_mtos_score ems
         WHERE ems.id_epis_mtos_score = i_epis_mtos_score;
    
        g_error := 'GET_SEV_SCORE_DETAIL: i_id_episode = ' || i_id_episode || ', ID_EPIS_MTOS_SCORE = ' ||
                   i_epis_mtos_score;
        pk_alertlog.log_debug(g_error);
        RETURN pk_sev_scores_core.get_sev_scores_values(i_lang            => i_lang,
                                                        i_prof            => i_prof,
                                                        i_id_patient      => pk_episode.get_id_patient(i_id_episode),
                                                        i_id_episode      => i_id_episode,
                                                        i_mtos_score      => l_id_mtos_score,
                                                        i_epis_mtos_score => i_epis_mtos_score,
                                                        o_reg             => o_reg,
                                                        o_groups          => l_groups,
                                                        o_values          => o_value,
                                                        o_cancel          => o_cancel,
                                                        o_error           => o_error);
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_reg);
            pk_types.open_my_cursor(o_value);
            pk_types.open_my_cursor(o_cancel);
            RETURN FALSE;
        
    END get_sev_score_detail;

    /**********************************************************************************************
    * Cancelation of a score evaluation for the current episode.
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_id_episode         Episode ID
    * @param i_epis_mtos_score    Severity score evaluation ID
    * @param id_cancel_reason     Cancel reason ID
    * @param notes_cancel         Cancel notes
    * @param o_error              Error message
    *                        
    * @return                     true or false on success or error
    *
    * @author                     Tércio Soares
    * @version                    2.6.0.4
    * @since                      2010/09/22
    **********************************************************************************************/
    FUNCTION cancel_sev_score
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_episode      IN episode.id_episode%TYPE,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        id_cancel_reason  IN epis_mtos_score.id_cancel_reason%TYPE,
        notes_cancel      IN epis_mtos_score.notes_cancel%TYPE,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'CANCEL_SEV_SCORE';
    
        --created/updated rows
        l_rows_out table_varchar := table_varchar();
    
    BEGIN
    
        IF i_epis_mtos_score IS NULL
        THEN
            raise_application_error(-20100, 'Invalid Input Parameters');
        ELSE
            g_error := 'CANCEL_SEV_SCORE EVALUATION: i_id_episode = ' || i_id_episode || ', ID_EPIS_MTOS_SCORE = ' ||
                       i_epis_mtos_score;
            pk_alertlog.log_debug(g_error);
            --
        
            ts_epis_mtos_score.upd(id_epis_mtos_score_in => i_epis_mtos_score,
                                   id_episode_in         => i_id_episode,
                                   flg_status_in         => pk_sev_scores_constant.g_flg_status_c,
                                   id_cancel_reason_in   => id_cancel_reason,
                                   notes_cancel_in       => notes_cancel,
                                   dt_cancel_in          => current_timestamp,
                                   id_prof_cancel_in     => i_prof.id,
                                   rows_out              => l_rows_out);
        
            g_error := 'CALL t_data_gov_mnt.process_update';
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EPIS_MTOS_SCORE',
                                          i_rowids     => l_rows_out,
                                          o_error      => o_error);
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_utils.undo_changes;
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
        
    END cancel_sev_score;

    /********************************************************************************************
    * Shows all parameters for TISS score.
    * Returns the parameters properties and current value.
    *
    * @param i_lang                   Preferred language ID for this professional 
    * @param i_prof                   Object (professional ID, institution ID, software ID)
    * @param i_id_patient             Patient ID
    * @param i_episode                Episode ID 
    * @param i_pat_age_years          Patient age
    * @param i_mtos_score             Severity score ID
    * @param i_epis_mtos_score        Severity score evaluation ID
    * @param o_list                   Parameter list
    * @param o_error                  Error
    *
    * @return                         true or false on success or error
    *
    * @author                         Tércio Soares
    * @version                        2.6.0.4
    * @since                          2010/09/23
    **********************************************************************************************/
    FUNCTION get_tiss_param_list
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_patient      IN patient.id_patient%TYPE,
        i_episode         IN episode.id_episode%TYPE,
        i_pat_age_years   IN NUMBER,
        i_mtos_score      IN mtos_score.id_mtos_score%TYPE,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_TRISS_PARAM_LIST';
        l_internal_error EXCEPTION;
    
        l_pat_age       VARCHAR2(30);
        l_pat_age_years NUMBER(6);
        l_total_gcs     NUMBER(6, 4);
        l_total_pts     NUMBER(6, 4);
        l_total_rts     NUMBER(6, 4);
        l_total_iss     NUMBER(6, 4);
        l_total_triss_b NUMBER(6, 4);
        l_total_triss_p NUMBER(6, 4);
    
    BEGIN
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       nvl(msg.id_mtos_score_group, mse.id_mtos_score) id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       emp.registered_value registered_value,
                       decode(mpm.flg_fill_type,
                              pk_sev_scores_constant.g_flg_fill_type_r,
                              (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                 FROM mtos_param_value mpe
                                WHERE mpe.value = emp.registered_value
                                  AND mpe.id_mtos_param = mpm.id_mtos_param),
                              get_registered_value_desc(i_lang,
                                                        i_prof,
                                                        emp.id_epis_mtos_score,
                                                        mpm.id_mtos_param,
                                                        emp.extra_score)) registered_value_desc,
                       -- Parameters values
                       pk_utils.concat_table(CAST(MULTISET (SELECT mpv.value
                                                     FROM mtos_param_value mpv
                                                    WHERE mpv.id_mtos_param = mpm.id_mtos_param
                                                    ORDER BY rank) AS table_varchar),
                                             '|') param_value,
                       -- Parameters exclusions
                       get_param_exclusions(i_lang, i_prof, mpm.id_mtos_param) param_exclusions
                  FROM mtos_score mse
                  JOIN mtos_param mpm
                    ON mpm.id_mtos_score = mse.id_mtos_score
                  LEFT JOIN mtos_score_group msg
                    ON msg.id_mtos_score_group = mpm.id_mtos_score_group
                  LEFT JOIN epis_mtos_param emp
                    ON (emp.id_mtos_param = mpm.id_mtos_param AND emp.id_epis_mtos_score = i_epis_mtos_score)
                 WHERE mse.id_mtos_score = i_mtos_score
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                 ORDER BY score_rank, param_rank;
        ELSE
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       nvl(msg.id_mtos_score_group, mse.id_mtos_score) id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       NULL registered_value,
                       NULL registered_value_desc,
                       -- Parameters values
                       pk_utils.concat_table(CAST(MULTISET (SELECT mpv.value
                                                     FROM mtos_param_value mpv
                                                    WHERE mpv.id_mtos_param = mpm.id_mtos_param
                                                    ORDER BY rank) AS table_varchar),
                                             '|') param_value,
                       -- Parameters exclusions
                       get_param_exclusions(i_lang, i_prof, mpm.id_mtos_param) param_exclusions
                  FROM mtos_score mse
                  JOIN mtos_param mpm
                    ON mpm.id_mtos_score = mse.id_mtos_score
                  LEFT JOIN mtos_score_group msg
                    ON msg.id_mtos_score_group = mpm.id_mtos_score_group
                 WHERE mse.id_mtos_score = i_mtos_score
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                 ORDER BY score_rank, param_rank;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_tiss_param_list;

    FUNCTION get_isstw_param_list
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_patient      IN patient.id_patient%TYPE,
        i_episode         IN episode.id_episode%TYPE,
        i_pat_age_years   IN NUMBER,
        i_mtos_score      IN mtos_score.id_mtos_score%TYPE,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_TRISS_PARAM_LIST';
        l_internal_error EXCEPTION;
    
        l_pat_age       VARCHAR2(30);
        l_pat_age_years NUMBER(6);
        l_total_gcs     NUMBER(6, 4);
        l_total_pts     NUMBER(6, 4);
        l_total_rts     NUMBER(6, 4);
        l_total_iss     NUMBER(6, 4);
        l_total_triss_b NUMBER(6, 4);
        l_total_triss_p NUMBER(6, 4);
    
    BEGIN
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
            RETURN NULL;
        ELSE
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       --nvl(msg.id_mtos_score_group, mse.id_mtos_score) id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       NULL registered_value,
                       NULL registered_value_desc,
                       -- Parameters values
                       decode(mpm.flg_fill_type,
                              'R',
                              pk_utils.concat_table(CAST(MULTISET (SELECT mpv.value
                                                            FROM mtos_param_value mpv
                                                           WHERE mpv.id_mtos_param = mpm.id_mtos_param
                                                           ORDER BY rank) AS table_varchar),
                                                    '|'),
                              NULL) param_value,
                       -- Parameters exclusions
                       decode(mpm.flg_fill_type, 'R', get_param_exclusions(i_lang, i_prof, mpm.id_mtos_param), NULL) param_exclusions
                  FROM mtos_score mse
                  JOIN mtos_param mpm
                    ON mpm.id_mtos_score = mse.id_mtos_score
                /*                  LEFT JOIN mtos_score_group msg
                ON msg.id_mtos_score_group = mpm.id_mtos_score_group*/
                 WHERE mse.id_mtos_score = i_mtos_score
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                 ORDER BY score_rank, param_rank;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_isstw_param_list;

    /**********************************************************************************************
    * Returns the score groups to fill. Used by Flash to know how many blocks must be shown, 
    * one block for each group.
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_id_episode         Episode ID for each parameter
    * @param i_mtos_score         Score ID
    * @param i_epis_mtos_score    Severity score evaluation ID
    * @param o_score              Cursor with the available score groups
    * @param o_error              Error message
    *                        
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            Tércio Soares
    * @version           2.6.0.4
    * @since             2010/09/23
    **********************************************************************************************/
    FUNCTION get_sev_score
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_episode      IN episode.id_episode%TYPE,
        i_mtos_score      IN mtos_score.id_mtos_score%TYPE,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_score           OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200) := 'GET_SEV_SCORE';
    
    BEGIN
    
        IF i_mtos_score = pk_sev_scores_constant.g_id_score_apache3
        THEN
        
            g_error := 'OPEN CURSOR O_SCORE';
            pk_alertlog.log_debug(g_error);
            OPEN o_score FOR
                SELECT mse.id_mtos_score,
                       nvl(sc_rel.id_mtos_score_group, mse.id_mtos_score) id_group,
                       get_desc_score(i_lang,
                                      i_prof,
                                      NULL,
                                      mse.code_mtos_score,
                                      mse.code_mtos_score_abbrev,
                                      sc_rel.id_mtos_score_group) score_title,
                       mse.flg_score_type,
                       mse.rank,
                       sc_rel.rank,
                       mse.flg_viewer
                  FROM mtos_score mse
                  JOIN (SELECT mr.id_mtos_score_rel, NULL id_mtos_score_group, NULL rank
                          FROM mtos_score_relation mr
                         WHERE mr.flg_relation = pk_sev_scores_constant.g_score_rel_parent
                           AND mr.id_mtos_score = i_mtos_score
                        UNION ALL
                        SELECT mse2.id_mtos_score id_mtos_score_rel, NULL id_mtos_score_group, NULL rank
                          FROM mtos_score mse2
                         WHERE mse2.id_mtos_score = i_mtos_score
                        UNION ALL
                        SELECT msg.id_mtos_score id_mtos_score_rel, msg.id_mtos_score_group, msg.rank
                          FROM mtos_score_group msg
                         WHERE msg.id_mtos_score = i_mtos_score) sc_rel
                    ON sc_rel.id_mtos_score_rel = mse.id_mtos_score
                 WHERE mse.flg_available = pk_alert_constant.g_yes
                 ORDER BY mse.rank, sc_rel.rank;
        
        ELSIF i_mtos_score = pk_sev_scores_constant.g_id_score_timi
        THEN
        
            g_error := 'OPEN CURSOR O_SCORE';
            pk_alertlog.log_debug(g_error);
            OPEN o_score FOR
                SELECT mse.id_mtos_score,
                       nvl(sc_rel.id_mtos_score_group, mse.id_mtos_score) id_group,
                       get_desc_score(i_lang,
                                      i_prof,
                                      NULL,
                                      mse.code_mtos_score,
                                      mse.code_mtos_score_abbrev,
                                      sc_rel.id_mtos_score_group) score_title,
                       mse.flg_score_type,
                       mse.rank,
                       sc_rel.rank,
                       mse.flg_viewer
                  FROM mtos_score mse
                  JOIN (SELECT mr.id_mtos_score_rel, NULL id_mtos_score_group, NULL rank
                          FROM mtos_score_relation mr
                         WHERE mr.flg_relation = pk_sev_scores_constant.g_score_rel_parent
                           AND mr.id_mtos_score = i_mtos_score
                        UNION ALL
                        SELECT mse2.id_mtos_score id_mtos_score_rel, NULL id_mtos_score_group, NULL rank
                          FROM mtos_score mse2
                         WHERE mse2.id_mtos_score = i_mtos_score) sc_rel
                    ON sc_rel.id_mtos_score_rel = mse.id_mtos_score
                 WHERE mse.flg_available = pk_alert_constant.g_yes
                 ORDER BY mse.rank, sc_rel.rank;
        
        ELSIF i_mtos_score IN (pk_sev_scores_constant.g_id_score_si_it_is,
                               pk_sev_scores_constant.g_id_score_prism,
                               pk_sev_scores_constant.g_id_score_vte,
                               pk_sev_scores_constant.g_id_score_apache_tw)
        THEN
            g_error := 'OPEN CURSOR O_SCORE';
            pk_alertlog.log_debug(g_error);
            OPEN o_score FOR
                SELECT mse.id_mtos_score,
                       nvl(sc_rel.id_mtos_score_group, mse.id_mtos_score) id_group,
                       get_desc_score(i_lang,
                                      i_prof,
                                      NULL,
                                      mse.code_mtos_score,
                                      mse.code_mtos_score_abbrev,
                                      sc_rel.id_mtos_score_group) score_title,
                       mse.flg_score_type,
                       (mse.rank * sc_rel.rank) AS rank,
                       sc_rel.rank,
                       mse.flg_viewer,
                       sc_rel.flg_mandatory,
                       sc_rel.flg_exclusive_parameters
                  FROM mtos_score mse
                  JOIN (SELECT mr.id_mtos_score_rel,
                               NULL                 id_mtos_score_group,
                               NULL                 rank,
                               NULL                 flg_mandatory,
                               NULL                 flg_exclusive_parameters
                          FROM mtos_score_relation mr
                         WHERE mr.flg_relation = pk_sev_scores_constant.g_score_rel_parent
                           AND mr.id_mtos_score = i_mtos_score
                        UNION ALL
                        SELECT mse2.id_mtos_score id_mtos_score_rel,
                               NULL               id_mtos_score_group,
                               NULL               rank,
                               NULL               flg_mandatory,
                               NULL               flg_exclusive_parameters
                          FROM mtos_score mse2
                         WHERE mse2.id_mtos_score = i_mtos_score
                        UNION ALL
                        SELECT msg.id_mtos_score id_mtos_score_rel,
                               msg.id_mtos_score_group,
                               msg.rank,
                               msg.flg_mandatory,
                               msg.flg_exclusive_parameters
                          FROM mtos_score_group msg
                         WHERE msg.id_mtos_score = i_mtos_score) sc_rel
                    ON sc_rel.id_mtos_score_rel = mse.id_mtos_score
                 WHERE mse.flg_available = pk_alert_constant.g_yes
                   AND nvl(sc_rel.id_mtos_score_group, mse.id_mtos_score) NOT IN
                       (pk_sev_scores_constant.g_id_score_si_it_is,
                        pk_sev_scores_constant.g_id_score_prism,
                        pk_sev_scores_constant.g_id_score_vte,
                        pk_sev_scores_constant.g_id_score_apache_tw)
                 ORDER BY mse.rank, sc_rel.rank;
        
        ELSE
        
            g_error := 'OPEN CURSOR O_SCORE';
            pk_alertlog.log_debug(g_error);
            OPEN o_score FOR
                SELECT mse.id_mtos_score,
                       nvl(sc_rel.id_mtos_score_group, mse.id_mtos_score) id_group,
                       get_desc_score(i_lang,
                                      i_prof,
                                      NULL,
                                      mse.code_mtos_score,
                                      mse.code_mtos_score_abbrev,
                                      sc_rel.id_mtos_score_group) score_title,
                       mse.flg_score_type,
                       mse.rank,
                       sc_rel.rank,
                       mse.flg_viewer
                  FROM mtos_score mse
                  JOIN (SELECT mr.id_mtos_score_rel, NULL id_mtos_score_group, NULL rank
                          FROM mtos_score_relation mr
                         WHERE mr.flg_relation = pk_sev_scores_constant.g_score_rel_parent
                           AND mr.id_mtos_score = i_mtos_score
                        UNION ALL
                        SELECT mse2.id_mtos_score id_mtos_score_rel, NULL id_mtos_score_group, NULL rank
                          FROM mtos_score mse2
                         WHERE mse2.id_mtos_score = i_mtos_score
                        UNION ALL
                        SELECT msg.id_mtos_score id_mtos_score_rel, msg.id_mtos_score_group, msg.rank
                          FROM mtos_score_group msg
                         WHERE msg.id_mtos_score = i_mtos_score
                           AND i_mtos_score != pk_sev_scores_constant.g_id_score_timi) sc_rel
                    ON sc_rel.id_mtos_score_rel = mse.id_mtos_score
                 WHERE mse.flg_available = pk_alert_constant.g_yes
                 ORDER BY mse.rank, sc_rel.rank;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_score);
            RETURN FALSE;
    END get_sev_score;

    /**********************************************************************************************
    * Returns the score outdated evaluation id's used in detail screen.
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_id_episode         Episode ID for each parameter
    * @param i_epis_mtos_score    Score evaluation ID
    * @param flg_cancelled        'Y' - cancelled records only, 'N' - Outdated records
    *                        
    * @return            List of evaluation 
    *
    * @author            Tércio Soares
    * @version           2.6.0.4
    * @since             2010/09/23
    **********************************************************************************************/
    FUNCTION get_sev_score_detail_ids
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        flg_cancelled     IN VARCHAR2
    ) RETURN table_number IS
        l_func_name CONSTANT VARCHAR2(200) := 'GET_SEV_SCORE_OUTDATED_ID';
    
        l_ids           table_number := table_number();
        l_index         NUMBER := 1;
        l_id_ems        NUMBER;
        l_id_ems_parent NUMBER;
    
        l_flg_status epis_mtos_score.flg_status%TYPE;
    
    BEGIN
    
        IF flg_cancelled = 'Y'
        THEN
            SELECT ems.flg_status
              INTO l_flg_status
              FROM epis_mtos_score ems
             WHERE ems.id_epis_mtos_score = i_epis_mtos_score;
        
            IF l_flg_status = 'C'
            THEN
                l_ids.extend;
                l_ids(l_index) := i_epis_mtos_score;
            
            END IF;
        
        ELSE
            l_id_ems := i_epis_mtos_score;
        
            WHILE l_id_ems != 0
            LOOP
            
                l_ids.extend;
                l_ids(l_index) := l_id_ems;
                l_index := l_index + 1;
            
                SELECT nvl((SELECT ems.id_epis_mtos_score_parent
                             FROM epis_mtos_score ems
                            WHERE ems.id_epis_mtos_score = l_id_ems),
                           0)
                  INTO l_id_ems
                  FROM dual;
            
            END LOOP;
        END IF;
    
        RETURN l_ids;
    
    END get_sev_score_detail_ids;

    /**********************************************************************************************
    * Saves a score evaluation and all the registered values.
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_prof_cat           Professional category
    * @param i_id_episode         Episode ID
    * @param i_id_patient         Patient ID
    * @param i_sev_score          Severity score ID 
    * @param i_epis_mtos_score    Severity score evaluation ID
    * @param i_id_mtos_param      Array of parameter ID's
    * @param i_value              Array with the registered values
    * @param i_unit_measure       Array with unit measures
    * @param o_flg_detail         Activate the DETAIL button: (Y)es (N)o
    * @param o_error              Error message
    *                        
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            Tércio Soares
    * @version           2.6.0.4 
    * @since             2010/09/28
    **********************************************************************************************/
    FUNCTION set_sev_score
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_prof_cat           IN category.flg_type%TYPE,
        i_id_episode         IN episode.id_episode%TYPE,
        i_id_patient         IN patient.id_patient%TYPE,
        i_sev_score          IN mtos_score.id_mtos_score%TYPE,
        i_epis_mtos_score    IN epis_mtos_score.id_epis_mtos_score%TYPE,
        i_id_mtos_param      IN table_number,
        i_value              IN table_number,
        i_notes              IN table_clob,
        i_unit_measure       IN table_number,
        i_vs_scales_elements IN table_number,
        o_flg_detail         OUT VARCHAR2,
        o_error              OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200) := 'SET_SEV_SCORE';
        l_internal_error EXCEPTION;
    
        l_sysdate TIMESTAMP WITH LOCAL TIME ZONE;
    
    BEGIN
        l_sysdate := current_timestamp;
    
        CASE i_sev_score
            WHEN pk_sev_scores_constant.g_id_score_triss THEN
                g_error := 'SET TRISS PARAMETER LIST FOR A NEW TRISS EVALUATION';
                pk_alertlog.log_debug(g_error);
                IF NOT set_triss_score(i_lang            => i_lang,
                                       i_prof            => i_prof,
                                       i_prof_cat        => i_prof_cat,
                                       i_id_episode      => i_id_episode,
                                       i_id_patient      => i_id_patient,
                                       i_sev_score       => i_sev_score,
                                       i_epis_mtos_score => i_epis_mtos_score,
                                       i_id_mtos_param   => i_id_mtos_param,
                                       i_value           => i_value,
                                       i_unit_measure    => i_unit_measure,
                                       o_flg_detail      => o_flg_detail,
                                       o_error           => o_error)
                
                THEN
                    RAISE l_internal_error;
                END IF;
            ELSE
                g_error := 'SET PARAMETER LIST FOR A NEW SCORE EVALUATION';
                pk_alertlog.log_debug(g_error);
                IF NOT set_general_score(i_lang               => i_lang,
                                         i_prof               => i_prof,
                                         i_prof_cat           => i_prof_cat,
                                         i_id_episode         => i_id_episode,
                                         i_id_patient         => i_id_patient,
                                         i_sev_score          => i_sev_score,
                                         i_epis_mtos_score    => i_epis_mtos_score,
                                         i_id_mtos_param      => i_id_mtos_param,
                                         i_value              => i_value,
                                         i_notes              => i_notes,
                                         i_unit_measure       => i_unit_measure,
                                         i_vs_scales_elements => i_vs_scales_elements,
                                         o_flg_detail         => o_flg_detail,
                                         o_error              => o_error)
                
                THEN
                    RAISE l_internal_error;
                END IF;
        END CASE;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN l_internal_error THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
    END set_sev_score;

    /**********************************************************************************************
    * Saves a score evaluation for scales with multiples values for each parameter
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_prof_cat           Professional category
    * @param i_id_episode         Episode ID
    * @param i_id_patient         Patient ID
    * @param i_sev_score          Severity score ID 
    * @param i_epis_mtos_score    Severity score evaluation ID
    * @param i_id_mtos_param      Array of parameter ID's
    * @param i_value              Array with arrays of registered values
    * @param i_unit_measure       Array with unit measures
    * @param i_vs_scales_elements Array with vital signs   
    * @param o_flg_detail         Activate the DETAIL button: (Y)es (N)o
    * @param o_error              Error message
    *                        
    * @return            TRUE if successful, FALSE otherwise
    **********************************************************************************************/
    FUNCTION set_sev_score_ms
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_prof_cat           IN category.flg_type%TYPE,
        i_id_episode         IN episode.id_episode%TYPE,
        i_id_patient         IN patient.id_patient%TYPE,
        i_sev_score          IN mtos_score.id_mtos_score%TYPE,
        i_epis_mtos_score    IN epis_mtos_score.id_epis_mtos_score%TYPE,
        i_id_mtos_param      IN table_number,
        i_value              IN table_table_number,
        i_notes              IN table_clob,
        i_unit_measure       IN table_number,
        i_vs_scales_elements IN table_number,
        o_flg_detail         OUT VARCHAR2,
        o_error              OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200) := 'SET_SEV_SCORE_MS';
        l_internal_error EXCEPTION;
    
        l_id_mtos_param      table_number := table_number();
        l_value              table_number := table_number();
        l_unit_measure       table_number := table_number();
        l_vs_scales_elements table_number := table_number();
        l_notes              table_clob := table_clob();
    
        l_index INTEGER := 1;
    BEGIN
    
        g_error := 'SET PARAMETER LIST FOR A NEW SCORE EVALUATION';
        pk_alertlog.log_debug(g_error);
    
        FOR i IN i_value.first .. i_value.last
        LOOP
            FOR j IN i_value(i).first .. i_value(i).last
            LOOP
            
                l_id_mtos_param.extend();
                l_id_mtos_param(l_index) := i_id_mtos_param(i);
            
                l_notes.extend();
                l_notes(l_index) := i_notes(i);
            
                l_value.extend();
                l_value(l_index) := i_value(i) (j);
            
                l_unit_measure.extend();
                l_unit_measure(l_index) := i_unit_measure(i);
            
                l_vs_scales_elements.extend();
                l_vs_scales_elements(l_index) := i_vs_scales_elements(i);
            
                l_index := l_index + 1;
            
            END LOOP;
        END LOOP;
    
        RETURN set_general_score(i_lang               => i_lang,
                                 i_prof               => i_prof,
                                 i_prof_cat           => i_prof_cat,
                                 i_id_episode         => i_id_episode,
                                 i_id_patient         => i_id_patient,
                                 i_sev_score          => i_sev_score,
                                 i_epis_mtos_score    => i_epis_mtos_score,
                                 i_id_mtos_param      => l_id_mtos_param,
                                 i_value              => l_value,
                                 i_notes              => l_notes,
                                 i_unit_measure       => l_unit_measure,
                                 i_vs_scales_elements => l_vs_scales_elements,
                                 o_flg_detail         => o_flg_detail,
                                 o_error              => o_error);
    
    EXCEPTION
        WHEN l_internal_error THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
    END set_sev_score_ms;

    /**********************************************************************************************
    * Saves a TRISS score evaluation and all the registered values.
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_prof_cat           Professional category
    * @param i_id_episode         Episode ID
    * @param i_id_patient         Patient ID
    * @param i_sev_score          Severity score ID 
    * @param i_epis_mtos_score    Severity score evaluation ID
    * @param i_id_mtos_param      Array of parameter ID's
    * @param i_value              Array with the registered values
    * @param i_unit_measure       Array with unit measures
    * @param o_flg_detail         Activate the DETAIL button: (Y)es (N)o
    * @param o_error              Error message
    *                        
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            Tércio Soares
    * @version           2.6.0.4 
    * @since             2010/09/28
    **********************************************************************************************/
    FUNCTION set_triss_score
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_prof_cat        IN category.flg_type%TYPE,
        i_id_episode      IN episode.id_episode%TYPE,
        i_id_patient      IN patient.id_patient%TYPE,
        i_sev_score       IN mtos_score.id_mtos_score%TYPE,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        i_id_mtos_param   IN table_number,
        i_value           IN table_number,
        i_unit_measure    IN table_number,
        o_flg_detail      OUT VARCHAR2,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'SET_TISS_SCORE';
        l_internal_error EXCEPTION;
        l_common_error   EXCEPTION;
        l_save_vs_error  EXCEPTION;
        l_error_msg VARCHAR2(200);
        --
        l_rowids  table_varchar;
        l_sysdate TIMESTAMP WITH LOCAL TIME ZONE;
        --
        l_new_vital_sign_read table_number;
        --
        l_next_epis_mtos_score epis_mtos_score.id_epis_mtos_score%TYPE := NULL;
        l_next_epis_mtos_param epis_mtos_param.id_epis_mtos_param%TYPE := NULL;
        l_id_vital_sign        vital_sign.id_vital_sign%TYPE;
        l_id_vital_sign_read   vital_sign_read.id_vital_sign_read%TYPE;
        l_internal_name        mtos_param.internal_name%TYPE;
        l_sys_alert_event      sys_alert_event%ROWTYPE;
        l_alert_processed      BOOLEAN := FALSE;
        l_age_processed        BOOLEAN := FALSE;
        --
        l_curr_pat_age  VARCHAR2(30);
        l_pat_age_years NUMBER(6);
        --
        -- arrays used to call the function that saves vital signs
        l_tab_param    table_number := table_number(); -- Parameter ID's
        l_tab_vs_id    table_number := table_number(); -- Vital signs ID's
        l_tab_vs_value table_number := table_number(); -- Registered values in vital signs
        l_tab_vs_um    table_number := table_number(); -- Vital signs unit measures
        l_counter      NUMBER(6) := 0;
        l_exists_vs    NUMBER(6) := 0;
        l_dt_registry  VARCHAR2(20 CHAR);
    BEGIN
        l_sysdate := current_timestamp;
    
        g_error := 'CHECK ARRAYS';
        IF NOT i_id_mtos_param.exists(1)
        THEN
            RETURN TRUE;
        ELSIF i_id_mtos_param.count <> i_value.count
              OR i_id_mtos_param.count <> i_unit_measure.count
        THEN
            l_error_msg := 'INVALID ARRAY SIZES';
            RAISE l_common_error;
        END IF;
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
            -- Set active score evaluation as outdated
            g_error := 'UPDATE SCORE - OUTDATED';
            pk_alertlog.log_debug(g_error);
            ts_epis_mtos_score.upd(flg_status_in => pk_sev_scores_constant.g_flg_status_o,
                                   where_in      => 'id_epis_mtos_score = ' || i_epis_mtos_score,
                                   rows_out      => l_rowids);
        
            g_error := 'PROCESS UPDATE - EPIS_MTOS_SCORE';
            pk_alertlog.log_debug(g_error);
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EPIS_MTOS_SCORE',
                                          i_rowids     => l_rowids,
                                          o_error      => o_error);
        
            l_rowids := table_varchar();
        
        END IF;
        -- Save parameters
        g_error := 'START PARAMETERS LOOP';
        pk_alertlog.log_debug(g_error);
        FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
        LOOP
        
            g_error := 'GET PARAM INFO';
            pk_alertlog.log_debug(g_error);
            SELECT decode(mpt.flg_param_task_type,
                          pk_sev_scores_constant.g_flg_param_task_vital_sign,
                          mpt.id_param_task,
                          NULL) AS id_vital_sign,
                   mpm.internal_name
              INTO l_id_vital_sign, l_internal_name
              FROM mtos_param mpm
              LEFT JOIN mtos_param_task mpt
                ON mpt.id_mtos_param = mpm.id_mtos_param
               AND mpt.flg_available = pk_alert_constant.g_yes
             WHERE mpm.id_mtos_param = i_id_mtos_param(i);
        
            IF i_value(i) IS NOT NULL -- Save parameter only if has value
            THEN
            
                IF l_next_epis_mtos_score IS NULL
                THEN
                    -- New MTOS score ID
                    l_next_epis_mtos_score := ts_epis_mtos_score.next_key;
                
                    -- Create new score
                    g_error := 'CREATE NEW SCORE';
                    pk_alertlog.log_debug(g_error);
                    ts_epis_mtos_score.ins(id_epis_mtos_score_in        => l_next_epis_mtos_score,
                                           id_episode_in                => i_id_episode,
                                           flg_status_in                => pk_sev_scores_constant.g_flg_status_a,
                                           id_prof_create_in            => i_prof.id,
                                           dt_create_in                 => l_sysdate,
                                           id_epis_mtos_score_parent_in => i_epis_mtos_score,
                                           id_mtos_score_in             => pk_sev_scores_constant.g_id_score_triss,
                                           rows_out                     => l_rowids);
                
                    g_error := 'PROCESS INSERT - EPIS_MTOS_SCORE';
                    pk_alertlog.log_debug(g_error);
                    t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                                  i_prof       => i_prof,
                                                  i_table_name => 'EPIS_MTOS_SCORE',
                                                  i_rowids     => l_rowids,
                                                  o_error      => o_error);
                
                    l_rowids := table_varchar();
                END IF;
            
                l_id_vital_sign_read := NULL; -- Reset variable for vital_sign_read
            
                IF l_id_vital_sign IS NOT NULL
                   AND l_internal_name <> 'G_TOTAL' -- Total Glasgow must not be saved in VITAL_SIGN_READ
                THEN
                
                    -- Check if the vital is already processed. This avoids duplication of records in VITAL_SIGN_READ.
                    g_error := 'CHECK VS EXISTS';
                    pk_alertlog.log_debug(g_error);
                    SELECT COUNT(*)
                      INTO l_exists_vs
                      FROM TABLE(l_tab_vs_id)
                     WHERE column_value = l_id_vital_sign;
                
                    IF l_exists_vs = 0
                    THEN
                        -- Increment counter
                        l_counter := l_counter + 1;
                    
                        -- Fill arrays to save vital signs
                        g_error := 'PROCESS VITAL SIGN ARRAYS';
                        pk_alertlog.log_debug(g_error);
                        l_tab_param.extend;
                        l_tab_vs_id.extend;
                        l_tab_vs_value.extend;
                        l_tab_vs_um.extend;
                    
                        l_tab_param(l_counter) := i_id_mtos_param(i);
                        l_tab_vs_id(l_counter) := l_id_vital_sign;
                        l_tab_vs_value(l_counter) := i_value(i);
                        l_tab_vs_um(l_counter) := i_unit_measure(i);
                    END IF;
                
                ELSIF l_internal_name = 'PAT_AGE'
                      AND NOT l_age_processed
                THEN
                    -- Process patient age (check if it was changed)
                    g_error := 'GET PATIENT CURRENT AGE';
                    pk_alertlog.log_debug(g_error);
                    l_curr_pat_age := pk_patient.get_pat_age(i_lang, i_id_patient, i_prof);
                
                    g_error := 'GET PATIENT AGE (YEARS)';
                    pk_alertlog.log_debug(g_error);
                    IF NOT pk_sev_scores_core.get_pat_age_years(i_lang  => i_lang,
                                                                i_prof  => i_prof,
                                                                i_age   => l_curr_pat_age,
                                                                o_age   => l_pat_age_years,
                                                                o_error => o_error)
                    THEN
                        RAISE l_internal_error;
                    END IF;
                
                    IF nvl(l_pat_age_years, -1) <> i_value(i)
                    THEN
                        -- CHANGE PATIENT AGE
                        -- SET DT_BIRTH AS NULL
                        g_error := 'SET NEW PATIENT ATTRIBUTES';
                        pk_alertlog.log_debug(g_error);
                        ts_patient.upd(id_patient_in => i_id_patient,
                                       dt_birth_in   => NULL,
                                       dt_birth_nin  => FALSE,
                                       age_in        => i_value(i),
                                       rows_out      => l_rowids);
                    
                        g_error := 'PROCESS UPDATE - PATIENT';
                        pk_alertlog.log_debug(g_error);
                        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                                      i_prof       => i_prof,
                                                      i_table_name => 'PATIENT',
                                                      i_rowids     => l_rowids,
                                                      o_error      => o_error);
                    
                        l_rowids := table_varchar();
                    END IF;
                
                    l_age_processed := TRUE;
                
                ELSIF l_internal_name IN ('TRISS_TOTAL_P', 'TRISS_TOTAL_B')
                      AND NOT l_alert_processed
                THEN
                    -- TRISS total will be saved. This means the score is complete. 
                    -- It's time to delete the 
                    l_sys_alert_event.id_sys_alert := pk_sev_scores_constant.g_trauma_alert;
                    l_sys_alert_event.id_episode   := i_id_episode;
                    l_sys_alert_event.id_record    := i_id_episode;
                
                    g_error := 'DELETE FROM SYS_ALERT_EVENT';
                    pk_alertlog.log_debug(g_error);
                    IF NOT pk_alerts.delete_sys_alert_event(i_lang            => i_lang,
                                                            i_prof            => i_prof,
                                                            i_sys_alert_event => l_sys_alert_event,
                                                            o_error           => o_error)
                    THEN
                        RAISE l_internal_error;
                    END IF;
                
                    l_alert_processed := TRUE; -- Alert was processed.
                
                END IF;
            
                -- SAVE PARAMETER!
                g_error := 'CREATE NEW PARAM';
                pk_alertlog.log_debug(g_error);
                ts_epis_mtos_param.ins(id_epis_mtos_param_in => seq_epis_mtos_param.nextval,
                                       id_epis_mtos_score_in => l_next_epis_mtos_score,
                                       id_mtos_param_in      => i_id_mtos_param(i),
                                       registered_value_in   => i_value(i),
                                       id_prof_create_in     => i_prof.id,
                                       dt_create_in          => l_sysdate,
                                       rows_out              => l_rowids);
            
                g_error := 'PROCESS INSERT - EPIS_MTOS_PARAM';
                pk_alertlog.log_debug(g_error);
                t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'EPIS_MTOS_PARAM',
                                              i_rowids     => l_rowids,
                                              o_error      => o_error);
            
            ELSIF i_value(i) IS NULL
                  AND l_internal_name IN ('PAT_AGE')
                  AND NOT l_age_processed
            THEN
                -- If AGE is NULL, then the patient data must be updated.
                -- However, the parameter is not saved in EPIS_MTOS_PARAM.
                g_error := 'SET NEW PATIENT ATTRIBUTES';
                pk_alertlog.log_debug(g_error);
                ts_patient.upd(id_patient_in => i_id_patient,
                               dt_birth_in   => NULL,
                               dt_birth_nin  => FALSE,
                               age_in        => i_value(i),
                               age_nin       => FALSE,
                               rows_out      => l_rowids);
            
                g_error := 'PROCESS UPDATE - PATIENT';
                pk_alertlog.log_debug(g_error);
                t_data_gov_mnt.process_update(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'PATIENT',
                                              i_rowids     => l_rowids,
                                              o_error      => o_error);
            
                l_rowids := table_varchar();
            
                l_age_processed := TRUE;
            
            ELSIF i_value(i) IS NULL
                  AND l_internal_name IN ('TRISS_TOTAL_P', 'TRISS_TOTAL_B')
                  AND NOT l_alert_processed
            THEN
                -- NULL value found. Check it if's TRISS total to process the 
                g_error := 'INSERT INTO SYS_ALERT_EVENT';
                pk_alertlog.log_debug(g_error);
                IF NOT pk_alerts.insert_sys_alert_event(i_lang                => i_lang,
                                                        i_prof                => i_prof,
                                                        i_sys_alert           => pk_sev_scores_constant.g_trauma_alert,
                                                        i_id_episode          => i_id_episode,
                                                        i_id_record           => i_id_episode,
                                                        i_dt_record           => l_sysdate,
                                                        i_id_professional     => NULL,
                                                        i_id_room             => NULL,
                                                        i_id_clinical_service => NULL,
                                                        i_flg_type_dest       => NULL,
                                                        i_replace1            => NULL,
                                                        o_error               => o_error)
                THEN
                    RAISE l_internal_error;
                END IF;
            
                l_alert_processed := TRUE; -- Alert was processed.
            
            END IF;
        END LOOP;
    
        IF l_tab_vs_value IS NOT NULL
           AND l_tab_vs_value.count > 0
        THEN
            -- Save vital signs
            g_error := 'CALL TO PK_VITAL_SIGN.SET_EPIS_VITAL_SIGN';
            pk_alertlog.log_debug(g_error);
            IF NOT pk_vital_sign.set_epis_vital_sign(i_lang               => i_lang,
                                                     i_episode            => i_id_episode,
                                                     i_prof               => i_prof,
                                                     i_pat                => i_id_patient,
                                                     i_vs_id              => l_tab_vs_id,
                                                     i_vs_val             => l_tab_vs_value,
                                                     i_id_monit           => NULL,
                                                     i_unit_meas          => l_tab_vs_um,
                                                     i_vs_scales_elements => table_number(),
                                                     i_notes              => NULL,
                                                     i_prof_cat_type      => i_prof_cat,
                                                     i_dt_vs_read         => table_varchar(),
                                                     i_epis_triage        => NULL,
                                                     i_unit_meas_convert  => l_tab_vs_um,
                                                     o_vital_sign_read    => l_new_vital_sign_read, -- array with new ID's
                                                     o_dt_registry        => l_dt_registry,
                                                     o_error              => o_error)
            THEN
                RAISE l_internal_error;
            END IF;
        END IF;
    
        BEGIN
            -- Update EPIS_MTOS_PARAM with the vital_sign_read id's
            g_error := 'START IF CLAUSE';
            IF l_new_vital_sign_read.exists(1)
            THEN
                g_error := 'LOOP OVER SAVED VITAL SIGNS';
                pk_alertlog.log_debug(g_error);
                FOR i IN l_new_vital_sign_read.first .. l_new_vital_sign_read.last
                LOOP
                    IF l_new_vital_sign_read(i) IS NOT NULL
                    THEN
                        g_error := 'SAVE VALUE - ' || l_new_vital_sign_read(i);
                        pk_alertlog.log_debug(g_error);
                        SELECT vsr.id_vital_sign
                          INTO l_id_vital_sign
                          FROM vital_sign_read vsr
                         WHERE vsr.id_vital_sign_read = l_new_vital_sign_read(i)
                           AND vsr.id_episode = i_id_episode;
                    
                        g_error := 'UPDATE EPIS_MTOS_PARAM.ID_VITAL_SIGN_READ';
                        pk_alertlog.log_debug(g_error);
                        ts_epis_mtos_param.upd(flg_param_task_type_in => pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                               id_task_refid_in       => l_new_vital_sign_read(i),
                                               where_in               => 'id_epis_mtos_score = ' ||
                                                                         l_next_epis_mtos_score ||
                                                                         ' AND id_mtos_param IN (SELECT mpm.id_mtos_param
                                            FROM mtos_param mpm
                                       LEFT JOIN mtos_param_task mpt 
                                              ON mpt.id_mtos_param = mpm.id_mtos_param
                                             AND mpt.flg_available = ''Y''                                            
                                            WHERE decode(mpt.flg_param_task_type, pk_sev_scores_constant.g_flg_param_task_vital_sign, mpt.id_param_task, NULL) = ' ||
                                                                         l_id_vital_sign || ')',
                                               rows_out               => l_rowids);
                    
                        g_error := 'PROCESS UPDATE - EPIS_MTOS_PARAM';
                        pk_alertlog.log_debug(g_error);
                        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                                      i_prof       => i_prof,
                                                      i_table_name => 'EPIS_MTOS_PARAM',
                                                      i_rowids     => l_rowids,
                                                      o_error      => o_error);
                    
                    END IF;
                END LOOP;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                RAISE l_save_vs_error;
        END;
    
        -- Check if any score was saved to activate the detail button
        g_error := 'CALL TO CHECK_FLG_DETAIL';
        pk_alertlog.log_debug(g_error);
        IF NOT pk_sev_scores_core.check_flg_detail(i_lang       => i_lang,
                                                   i_prof       => i_prof,
                                                   i_id_episode => i_id_episode,
                                                   o_flg_detail => o_flg_detail,
                                                   o_error      => o_error)
        THEN
            RAISE l_internal_error;
        END IF;
    
        -- When i_epis_mtos_score is not null its a update registry then copy the others to the new ones
        IF i_epis_mtos_score IS NOT NULL
        THEN
            FOR i IN (SELECT *
                        FROM epis_mtos_param
                       WHERE id_epis_mtos_score = i_epis_mtos_score
                         AND id_mtos_param NOT IN (SELECT /*+opt_estimate(table t rows=1)*/
                                                    t.column_value id_mtos_param
                                                     FROM TABLE(i_id_mtos_param) t))
            LOOP
            
                -- SAVE PARAMETER ON UPDATE!
                g_error := 'CREATE NEW PARAM ON UPD';
                pk_alertlog.log_debug(g_error);
                ts_epis_mtos_param.ins(id_epis_mtos_param_in => seq_epis_mtos_param.nextval,
                                       id_epis_mtos_score_in => l_next_epis_mtos_score,
                                       id_mtos_param_in      => i.id_mtos_param,
                                       --id_vital_sign_read_in => i.id_vital_sign_read,
                                       
                                       id_prof_create_in     => i.id_prof_create,
                                       dt_create_in          => l_sysdate,
                                       create_user_in        => i.create_user,
                                       create_time_in        => l_sysdate,
                                       create_institution_in => i.create_institution,
                                       
                                       update_user_in         => i.update_user,
                                       update_time_in         => i.update_time,
                                       update_institution_in  => i.update_institution,
                                       registered_value_in    => i.registered_value,
                                       flg_param_task_type_in => i.flg_param_task_type,
                                       id_task_refid_in       => CASE
                                                                     WHEN i.flg_param_task_type =
                                                                          pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                                                                      i.id_task_refid
                                                                     ELSE
                                                                      NULL
                                                                 END,
                                       rows_out               => l_rowids);
            
                g_error := 'PROCESS INSERT - EPIS_MTOS_PARAM ON UPD';
                pk_alertlog.log_debug(g_error);
                t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'EPIS_MTOS_PARAM',
                                              i_rowids     => l_rowids,
                                              o_error      => o_error);
            
            END LOOP;
        END IF;
    
        g_error := 'CALL TO SET_FIRST_OBS';
        pk_alertlog.log_debug(g_error);
        IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                      i_id_episode          => i_id_episode,
                                      i_pat                 => NULL,
                                      i_prof                => i_prof,
                                      i_prof_cat_type       => i_prof_cat,
                                      i_dt_last_interaction => l_sysdate,
                                      i_dt_first_obs        => l_sysdate,
                                      o_error               => o_error)
        THEN
            RAISE l_internal_error;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN l_save_vs_error THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
        WHEN l_internal_error THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
        WHEN l_common_error THEN
            pk_alert_exceptions.process_error(i_lang,
                                              'T_COMMON_ERROR',
                                              l_error_msg,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
    END set_triss_score;

    /**********************************************************************************************
    * Saves a score evaluation and all the registered values (without vital signs values).
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_prof_cat           Professional category
    * @param i_id_episode         Episode ID
    * @param i_id_patient         Patient ID
    * @param i_sev_score          Severity score ID 
    * @param i_epis_mtos_score    Severity score evaluation ID
    * @param i_id_mtos_param      Array of parameter ID's
    * @param i_value              Array with the registered values
    * @param o_error              Error message
    *                        
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            Tércio Soares
    * @version           2.6.0.4 
    * @since             2010/09/28
    **********************************************************************************************/
    FUNCTION set_general_score
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_prof_cat           IN category.flg_type%TYPE,
        i_id_episode         IN episode.id_episode%TYPE,
        i_id_patient         IN patient.id_patient%TYPE,
        i_sev_score          IN mtos_score.id_mtos_score%TYPE,
        i_epis_mtos_score    IN epis_mtos_score.id_epis_mtos_score%TYPE,
        i_id_mtos_param      IN table_number,
        i_value              IN table_number,
        i_notes              IN table_clob,
        i_unit_measure       IN table_number,
        i_vs_scales_elements IN table_number,
        o_flg_detail         OUT VARCHAR2,
        o_error              OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200) := 'SET_GENERAL_SCORE';
        l_internal_error EXCEPTION;
    
        l_rowids table_varchar;
    
        l_sysdate TIMESTAMP WITH LOCAL TIME ZONE;
    
        l_internal_name        mtos_param.internal_name%TYPE;
        l_next_epis_mtos_score epis_mtos_score.id_epis_mtos_score%TYPE := NULL;
    
        --GENERAL IF GOT VITAL SIGN THAN SAVES IT TO VITAL SIGN
        l_id_vital_sign vital_sign.id_vital_sign%TYPE;
        l_flg_fill_type mtos_param.flg_fill_type%TYPE;
    
        -- arrays used to call the function that saves vital signs
        l_tab_param              table_number := table_number(); -- Parameter ID's
        l_tab_vs_id              table_number := table_number(); -- Vital signs ID's
        l_tab_vs_value           table_number := table_number(); -- Registered values in vital signs
        l_tab_vs_um              table_number := table_number(); -- Vital signs unit measures
        l_tab_vs_scales_elements table_number := table_number(); -- Vital signs Scales Elements       
        l_exists_vs              NUMBER(6) := 0;
        l_counter                NUMBER(6) := 0;
        l_new_vital_sign_read    table_number;
        l_save_vs_error EXCEPTION;
    
        l_blood_p_6 NUMBER := 0;
        l_blood_p_7 NUMBER := 0;
    
        l_id_vital_sign_parent table_number := table_number();
    
        l_id_vital_sign_registered NUMBER;
        l_parent_vs_exists         NUMBER;
        l_old_id_mtos_param        NUMBER;
        l_old_registered_value     NUMBER;
        l_old_id_unit_measure      NUMBER;
        l_dt_registry              VARCHAR2(20 CHAR);
    
        l_flg_param_task_type mtos_param_task.flg_param_task_type%TYPE;
        l_id_param_task       mtos_param_task.id_param_task%TYPE;
    
    BEGIN
        l_sysdate := current_timestamp;
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
            -- Set active score evaluation as outdated
            g_error := 'UPDATE SCORE - OUTDATED';
            pk_alertlog.log_debug(g_error);
            ts_epis_mtos_score.upd(flg_status_in => pk_sev_scores_constant.g_flg_status_o,
                                   where_in      => 'id_epis_mtos_score = ' || i_epis_mtos_score,
                                   rows_out      => l_rowids);
        
            g_error := 'PROCESS UPDATE - EPIS_MTOS_SCORE';
            pk_alertlog.log_debug(g_error);
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EPIS_MTOS_SCORE',
                                          i_rowids     => l_rowids,
                                          o_error      => o_error);
        
            l_rowids := table_varchar();
        
        END IF;
    
        -- Save parameters
        g_error := 'START PARAMETERS LOOP';
        pk_alertlog.log_debug(g_error);
        FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
        LOOP
        
            g_error := 'GET PARAM INFO';
            pk_alertlog.log_debug(g_error);
            /*            SELECT decode(mpm.flg_param_task_type, pk_sev_scores_constant.g_flg_param_task_vital_sign, mpm.id_param_task, NULL), mpm.internal_name, mpm.flg_fill_type
             INTO l_id_vital_sign, l_internal_name, l_flg_fill_type
             FROM mtos_param mpm
            WHERE mpm.id_mtos_param = i_id_mtos_param(i);*/
        
            SELECT mpt.flg_param_task_type, mpt.id_param_task, mpm.internal_name, mpm.flg_fill_type
              INTO l_flg_param_task_type, l_id_param_task, l_internal_name, l_flg_fill_type
              FROM mtos_param mpm
              LEFT JOIN mtos_param_task mpt
                ON mpt.id_mtos_param = mpm.id_mtos_param
               AND mpt.flg_available = pk_alert_constant.g_yes
               AND mpt.flg_show_task_desc = pk_alert_constant.g_yes
             WHERE mpm.id_mtos_param = i_id_mtos_param(i);
        
            -- ALERT-266704 -- Always save because now we got mandatory Yes or No parameters.
            --IF i_value(i) IS NOT NULL -- Save parameter only if has value                       THEN
        
            IF l_next_epis_mtos_score IS NULL
            THEN
                -- New MTOS score ID
                l_next_epis_mtos_score := ts_epis_mtos_score.next_key;
            
                -- Create new score
                g_error := 'CREATE NEW SCORE';
                pk_alertlog.log_debug(g_error);
                ts_epis_mtos_score.ins(id_epis_mtos_score_in        => l_next_epis_mtos_score,
                                       id_episode_in                => i_id_episode,
                                       flg_status_in                => pk_sev_scores_constant.g_flg_status_a,
                                       id_prof_create_in            => i_prof.id,
                                       dt_create_in                 => l_sysdate,
                                       id_epis_mtos_score_parent_in => i_epis_mtos_score,
                                       id_mtos_score_in             => i_sev_score,
                                       rows_out                     => l_rowids);
            
                g_error := 'PROCESS INSERT - EPIS_MTOS_SCORE';
                pk_alertlog.log_debug(g_error);
                t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'EPIS_MTOS_SCORE',
                                              i_rowids     => l_rowids,
                                              o_error      => o_error);
            
                l_rowids := table_varchar();
            END IF;
        
            -- SAVE PARAMETER!
            g_error := 'CREATE NEW PARAM';
            pk_alertlog.log_debug(g_error);
            ts_epis_mtos_param.ins(id_epis_mtos_param_in => seq_epis_mtos_param.nextval,
                                   id_epis_mtos_score_in => l_next_epis_mtos_score,
                                   id_mtos_param_in      => i_id_mtos_param(i),
                                   registered_value_in   => CASE
                                                                WHEN i_sev_score = pk_sev_scores_constant.g_id_score_sofa_tw -- marteladas....
                                                                     AND i = i_id_mtos_param.last THEN
                                                                 CASE
                                                                     WHEN i_value(i - 1) >= 0
                                                                          AND i_value(i - 1) <= 1 THEN
                                                                      0
                                                                     WHEN i_value(i - 1) >= 2
                                                                          AND i_value(i - 1) <= 3 THEN
                                                                      7
                                                                     WHEN i_value(i - 1) >= 4
                                                                          AND i_value(i - 1) <= 5 THEN
                                                                      20
                                                                     WHEN i_value(i - 1) >= 6
                                                                          AND i_value(i - 1) <= 7 THEN
                                                                      22
                                                                     WHEN i_value(i - 1) >= 8
                                                                          AND i_value(i - 1) <= 9 THEN
                                                                      33
                                                                     WHEN i_value(i - 1) >= 10
                                                                          AND i_value(i - 1) <= 11 THEN
                                                                      50
                                                                     WHEN i_value(i - 1) >= 11 THEN
                                                                      95
                                                                 
                                                                 END
                                                            
                                                                ELSE
                                                                 i_value(i)
                                                            END,
                                   id_prof_create_in     => i_prof.id,
                                   dt_create_in          => l_sysdate,
                                   notes_in              => i_notes(i),
                                   rows_out              => l_rowids);
        
            g_error := 'PROCESS INSERT - EPIS_MTOS_PARAM';
            pk_alertlog.log_debug(g_error);
            t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EPIS_MTOS_PARAM',
                                          i_rowids     => l_rowids,
                                          o_error      => o_error);
        
            l_rowids := table_varchar(); --copied from triss vital signs
            --END IF;
        
            /*==========================================================================================================================================
            ==========================================================================================================================================
            ==========================================================================================================================================
            = VITAL SIGNS INTEGRATION
            ==========================================================================================================================================
            ==========================================================================================================================================
            ==========================================================================================================================================
            ==========================================================================================================================================
             
            */
            IF l_flg_param_task_type = pk_sev_scores_constant.g_flg_param_task_vital_sign
            THEN
            
                l_id_vital_sign := l_id_param_task;
            
                -- If got VS and value is not null then save it to vital signs
                IF l_id_vital_sign IS NOT NULL
                   AND i_value(i) IS NOT NULL
                THEN
                    --        l_id_vital_sign_read := NULL; -- Reset variable for vital_sign_read
                
                    -- Check if the vital is already processed. This avoids duplication of records in VITAL_SIGN_READ.
                    g_error := 'CHECK VS EXISTS';
                    pk_alertlog.log_debug(g_error);
                    SELECT COUNT(*)
                      INTO l_exists_vs
                      FROM TABLE(l_tab_vs_id)
                     WHERE column_value = l_id_vital_sign;
                
                    IF l_exists_vs = 0
                    THEN
                        -- Increment counter
                        l_counter := l_counter + 1;
                    
                        -- Fill arrays to save vital signs
                        g_error := 'PROCESS VITAL SIGN ARRAYS';
                        pk_alertlog.log_debug(g_error);
                        l_tab_param.extend;
                        l_tab_vs_id.extend;
                        l_tab_vs_value.extend;
                        l_tab_vs_um.extend;
                        l_tab_vs_scales_elements.extend;
                    
                        l_tab_param(l_counter) := i_id_mtos_param(i);
                        l_tab_vs_id(l_counter) := l_id_vital_sign;
                    
                        -- Specification for NEWS Score when its a red individual score 3
                        IF l_internal_name = 'TOTAL_NEWS_SCORE'
                           AND i_value(i) = -1
                        THEN
                            l_tab_vs_value(l_counter) := 3;
                        ELSE
                            l_tab_vs_value(l_counter) := i_value(i);
                        END IF;
                        l_tab_vs_um(l_counter) := i_unit_measure(i);
                        l_tab_vs_scales_elements(l_counter) := i_vs_scales_elements(i);
                    END IF;
                END IF;
                -----------------------------------
            END IF;
            -----------------------------------
        END LOOP;
        --end of the loop     
    
        --****************************************************************************************************** 
        -- ALERT-263933 - Aproved and Requested by Henrique Rocha
        --              - Know Problem: When updating severity scores and only 1 value is changed 
        --              -               due to time and no flash resources to integrate compound vital signs      
    
        -- Check if any vital sign "compound" registered got relation
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
        
            SELECT vs_r.id_vital_sign_parent
              BULK COLLECT
              INTO l_id_vital_sign_parent
              FROM vital_sign_relation vs_r
             WHERE vs_r.relation_domain = pk_alert_constant.g_vs_rel_conc
               AND vs_r.id_vital_sign_detail IN
                   (SELECT vsr.id_vital_sign
                      FROM epis_mtos_param emp
                      LEFT JOIN vital_sign_read vsr
                        ON decode(emp.flg_param_task_type,
                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                  emp.id_task_refid,
                                  NULL) = vsr.id_vital_sign_read
                     WHERE emp.id_epis_mtos_score = i_epis_mtos_score);
        
            IF l_id_vital_sign_parent.count != 0
            THEN
            
                -- Verify if both compound vital signais exists
                SELECT COUNT(*)
                  INTO l_parent_vs_exists
                  FROM TABLE(l_tab_vs_id)
                 WHERE column_value IN (SELECT vs_r.id_vital_sign_detail
                                          FROM vital_sign_relation vs_r
                                         WHERE vs_r.id_vital_sign_parent IN
                                               (SELECT column_value
                                                  FROM TABLE(l_id_vital_sign_parent)));
                IF l_parent_vs_exists != 0
                THEN
                    BEGIN
                        -- Detects what vs is missing              
                        SELECT vsr.id_vital_sign
                          INTO l_id_vital_sign_registered
                          FROM epis_mtos_param emp
                          LEFT JOIN vital_sign_read vsr
                            ON decode(emp.flg_param_task_type,
                                      pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                      emp.id_task_refid,
                                      NULL) = vsr.id_vital_sign_read
                         WHERE emp.id_epis_mtos_score = i_epis_mtos_score
                           AND vsr.id_vital_sign IN
                               (SELECT vs_r.id_vital_sign_detail
                                  FROM vital_sign_relation vs_r
                                 WHERE vs_r.id_vital_sign_parent IN
                                       (SELECT column_value
                                          FROM TABLE(l_id_vital_sign_parent)))
                           AND vsr.id_vital_sign NOT IN (SELECT column_value
                                                           FROM TABLE(l_tab_vs_id));
                    
                        -- get the value of missing vital sign already inserted early on mtos
                        SELECT emp.id_mtos_param, emp.registered_value, vsr.id_unit_measure
                          INTO l_old_id_mtos_param, l_old_registered_value, l_old_id_unit_measure
                          FROM epis_mtos_param emp
                          LEFT JOIN vital_sign_read vsr
                            ON decode(emp.flg_param_task_type,
                                      pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                      emp.id_task_refid,
                                      NULL) = vsr.id_vital_sign_read
                         WHERE emp.id_epis_mtos_score = i_epis_mtos_score
                           AND vsr.id_vital_sign = l_id_vital_sign_registered;
                    
                        -- add it to the record to insert it again  
                        l_counter := l_counter + 1;
                    
                        l_tab_param.extend;
                        l_tab_vs_id.extend;
                        l_tab_vs_value.extend;
                        l_tab_vs_um.extend;
                        l_tab_vs_scales_elements.extend;
                        l_tab_param(l_counter) := l_old_id_mtos_param;
                        l_tab_vs_id(l_counter) := l_id_vital_sign_registered;
                        l_tab_vs_value(l_counter) := l_old_registered_value;
                        l_tab_vs_um(l_counter) := l_old_id_unit_measure;
                        l_tab_vs_scales_elements(l_counter) := NULL;
                    EXCEPTION
                        WHEN OTHERS THEN
                            --theres no vital sign compound to be added to insert
                            NULL;
                    END;
                END IF; -- if exists
            END IF;
        END IF; --  i_epis_mtos_score 
        --******************************************************************************************************            
    
        IF l_tab_vs_value IS NOT NULL
           AND l_tab_vs_value.count > 0
        THEN
            -- Save vital signs
            g_error := 'CALL TO PK_VITAL_SIGN.SET_EPIS_VITAL_SIGN';
            pk_alertlog.log_debug(g_error);
            IF NOT pk_vital_sign.set_epis_vital_sign(i_lang               => i_lang,
                                                     i_episode            => i_id_episode,
                                                     i_prof               => i_prof,
                                                     i_pat                => i_id_patient,
                                                     i_vs_id              => l_tab_vs_id,
                                                     i_vs_val             => l_tab_vs_value,
                                                     i_id_monit           => NULL,
                                                     i_unit_meas          => l_tab_vs_um,
                                                     i_notes              => NULL,
                                                     i_prof_cat_type      => i_prof_cat,
                                                     i_vs_scales_elements => l_tab_vs_scales_elements,
                                                     i_dt_vs_read         => table_varchar(),
                                                     i_epis_triage        => NULL,
                                                     i_unit_meas_convert  => l_tab_vs_um,
                                                     o_vital_sign_read    => l_new_vital_sign_read, -- array with new ID's
                                                     o_dt_registry        => l_dt_registry,
                                                     o_error              => o_error)
            THEN
                RAISE l_internal_error;
            END IF;
        END IF;
    
        BEGIN
            -- Update EPIS_MTOS_PARAM with the vital_sign_read id's
            g_error := 'START IF CLAUSE';
            IF l_new_vital_sign_read.exists(1)
            THEN
                g_error := 'LOOP OVER SAVED VITAL SIGNS';
                pk_alertlog.log_debug(g_error);
                FOR i IN l_new_vital_sign_read.first .. l_new_vital_sign_read.last
                LOOP
                    IF l_new_vital_sign_read(i) IS NOT NULL
                    THEN
                        g_error := 'SAVE VALUE - ' || l_new_vital_sign_read(i);
                        pk_alertlog.log_debug(g_error);
                        SELECT vsr.id_vital_sign
                          INTO l_id_vital_sign
                          FROM vital_sign_read vsr
                         WHERE vsr.id_vital_sign_read = l_new_vital_sign_read(i)
                           AND vsr.id_episode = i_id_episode;
                    
                        g_error := 'UPDATE EPIS_MTOS_PARAM.ID_VITAL_SIGN_READ';
                        pk_alertlog.log_debug(g_error);
                        ts_epis_mtos_param.upd(flg_param_task_type_in => pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                               id_task_refid_in       => l_new_vital_sign_read(i),
                                               where_in               => 'id_epis_mtos_score = ' ||
                                                                         l_next_epis_mtos_score ||
                                                                         ' AND id_mtos_param IN (SELECT mpm.id_mtos_param
                                            FROM mtos_param mpm
                                       LEFT JOIN mtos_param_task mpt 
                                              ON mpt.id_mtos_param = mpm.id_mtos_param
                                             AND mpt.flg_available = ''' ||
                                                                         pk_alert_constant.g_yes || ''' 
                                            WHERE decode(mpt.flg_param_task_type, pk_sev_scores_constant.g_flg_param_task_vital_sign, mpt.id_param_task, NULL) = ' ||
                                                                         l_id_vital_sign || ')',
                                               notes_in               => i_notes(i),
                                               rows_out               => l_rowids);
                    
                        g_error := 'PROCESS UPDATE - EPIS_MTOS_PARAM';
                        pk_alertlog.log_debug(g_error);
                        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                                      i_prof       => i_prof,
                                                      i_table_name => 'EPIS_MTOS_PARAM',
                                                      i_rowids     => l_rowids,
                                                      o_error      => o_error);
                    
                    END IF;
                END LOOP;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                RAISE l_save_vs_error;
        END;
    
        -- Check if any score was saved to activate the detail button
        g_error := 'CALL TO CHECK_FLG_DETAIL';
        pk_alertlog.log_debug(g_error);
        IF NOT pk_sev_scores_core.check_flg_detail(i_lang       => i_lang,
                                                   i_prof       => i_prof,
                                                   i_id_episode => i_id_episode,
                                                   o_flg_detail => o_flg_detail,
                                                   o_error      => o_error)
        THEN
            RAISE l_internal_error;
        END IF;
    
        /*==========================================================================================================================================
        ==========================================================================================================================================
        ==========================================================================================================================================
        ==========================================================================================================================================
        ==========================================================================================================================================
        ==========================================================================================================================================
        ==========================================================================================================================================
        */
    
        -- When i_epis_mtos_score is not null its a update registry then copy the others to the new ones
        IF i_epis_mtos_score IS NOT NULL
        THEN
            FOR i IN (SELECT *
                        FROM epis_mtos_param
                       WHERE id_epis_mtos_score = i_epis_mtos_score
                         AND id_mtos_param NOT IN (SELECT /*+opt_estimate(table t rows=1)*/
                                                    t.column_value id_mtos_param
                                                     FROM TABLE(i_id_mtos_param) t))
            LOOP
            
                -- SAVE PARAMETER ON UPDATE!
                g_error := 'CREATE NEW PARAM ON UPD';
                pk_alertlog.log_debug(g_error);
                ts_epis_mtos_param.ins(id_epis_mtos_param_in => seq_epis_mtos_param.nextval,
                                       id_epis_mtos_score_in => l_next_epis_mtos_score,
                                       id_mtos_param_in      => i.id_mtos_param,
                                       
                                       id_prof_create_in     => i.id_prof_create,
                                       dt_create_in          => l_sysdate,
                                       create_user_in        => i.create_user,
                                       create_time_in        => l_sysdate,
                                       create_institution_in => i.create_institution,
                                       
                                       update_user_in         => i.update_user,
                                       update_time_in         => i.update_time,
                                       update_institution_in  => i.update_institution,
                                       registered_value_in    => i.registered_value,
                                       flg_param_task_type_in => i.flg_param_task_type,
                                       id_task_refid_in       => CASE
                                                                     WHEN i.flg_param_task_type =
                                                                          pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                                                                      i.id_task_refid
                                                                     ELSE
                                                                      NULL
                                                                 END,
                                       rows_out               => l_rowids);
            
                g_error := 'PROCESS INSERT - EPIS_MTOS_PARAM ON UPD';
                pk_alertlog.log_debug(g_error);
                t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'EPIS_MTOS_PARAM',
                                              i_rowids     => l_rowids,
                                              o_error      => o_error);
            
            END LOOP;
        END IF;
    
        --
        g_error := 'CALL TO SET_FIRST_OBS';
        pk_alertlog.log_debug(g_error);
        IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                      i_id_episode          => i_id_episode,
                                      i_pat                 => NULL,
                                      i_prof                => i_prof,
                                      i_prof_cat_type       => i_prof_cat,
                                      i_dt_last_interaction => l_sysdate,
                                      i_dt_first_obs        => l_sysdate,
                                      o_error               => o_error)
        THEN
            RAISE l_internal_error;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN l_save_vs_error THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
    END set_general_score;

    /**********************************************************************************************
    * Returns the severity score content help. Used by Flash to shown the content help (including the group help if applicable).
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_id_episode         Episode ID for each parameter
    * @param i_mtos_score         Score ID
    * @param i_mtos_score_group   Severity score group ID
    * @param i_flg_context        Context to show score help (L - scores list screen, E - score edition screen)
    * @param o_score_help         Severity score help
    * @param o_score_group_help   Severity score group help
    * @param o_error              Error message
    *                        
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            Tércio Soares
    * @version           2.6.0.4
    * @since             2010/09/29
    **********************************************************************************************/
    FUNCTION get_sev_score_help
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_id_episode       IN episode.id_episode%TYPE,
        i_mtos_score       IN mtos_score.id_mtos_score%TYPE,
        i_mtos_score_group IN mtos_score_group.id_mtos_score_group%TYPE,
        i_flg_context      IN VARCHAR2,
        o_score_help       OUT CLOB,
        o_score_group_help OUT CLOB,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200) := 'SET_SEV_SCORE';
    
        l_clob_lenght NUMBER := 0;
    
    BEGIN
    
        o_score_help       := empty_clob();
        o_score_group_help := empty_clob();
    
        IF i_flg_context = pk_sev_scores_constant.g_sev_score_help_list
        THEN
        
            g_error := 'SET_SEV_SCORE_CONTENT_HELP: i_id_episode = ' || i_id_episode || ', ID_SEV_SCORE = ' ||
                       i_mtos_score;
            pk_alertlog.log_debug(g_error);
            SELECT nvl((SELECT msh.desc_mtos_score_help
                         FROM mtos_score_cnt_help msh
                        WHERE msh.id_mtos_score = i_mtos_score
                          AND msh.id_mtos_score_group IS NULL
                          AND msh.flg_context = i_flg_context
                          AND msh.id_language = i_lang),
                       empty_clob())
              INTO o_score_help
              FROM dual;
        
        ELSIF i_flg_context = pk_sev_scores_constant.g_sev_score_help_edition
        THEN
        
            g_error := 'SET_SEV_SCORE_CONTENT_HELP: i_id_episode = ' || i_id_episode || ', ID_SEV_SCORE = ' ||
                       i_mtos_score;
            pk_alertlog.log_debug(g_error);
            SELECT nvl((SELECT dbms_lob.getlength(msh.desc_mtos_score_cnt_help)
                         FROM mtos_score_cnt_help msh
                        WHERE msh.id_mtos_score = i_mtos_score
                          AND msh.id_mtos_score_group IS NULL
                          AND msh.flg_context = i_flg_context
                          AND msh.id_language = i_lang),
                       dbms_lob.getlength(empty_clob()))
              INTO l_clob_lenght
              FROM dual;
        
            IF l_clob_lenght = 0
            THEN
            
                g_error := 'SET_SEV_SCORE_CONTENT_HELP: i_id_episode = ' || i_id_episode || ', ID_SEV_SCORE = ' ||
                           i_mtos_score;
                pk_alertlog.log_debug(g_error);
                SELECT nvl((SELECT msh.desc_mtos_score_help
                             FROM mtos_score_cnt_help msh
                            WHERE msh.id_mtos_score = i_mtos_score
                              AND msh.id_mtos_score_group IS NULL
                              AND msh.flg_context = pk_sev_scores_constant.g_sev_score_help_list
                              AND msh.id_language = i_lang),
                           empty_clob())
                  INTO o_score_help
                  FROM dual;
            
            ELSE
            
                g_error := 'SET_SEV_SCORE_CONTENT_HELP: i_id_episode = ' || i_id_episode || ', ID_SEV_SCORE = ' ||
                           i_mtos_score;
                pk_alertlog.log_debug(g_error);
                SELECT nvl((SELECT msh.desc_mtos_score_cnt_help
                             FROM mtos_score_cnt_help msh
                            WHERE msh.id_mtos_score = i_mtos_score
                              AND msh.id_mtos_score_group IS NULL
                              AND msh.flg_context = i_flg_context
                              AND msh.id_language = i_lang),
                           empty_clob())
                  INTO o_score_help
                  FROM dual;
            
            END IF;
        
            IF i_mtos_score_group IS NOT NULL
            THEN
                g_error := 'SET_SEV_SCORE_GROUP_CONTENT_HELP: i_id_episode = ' || i_id_episode ||
                           ', ID_SEV_SCORE_GROUP = ' || i_mtos_score_group;
                pk_alertlog.log_debug(g_error);
                SELECT nvl((SELECT msh.desc_mtos_score_cnt_help
                             FROM mtos_score_cnt_help msh
                            WHERE msh.id_mtos_score = i_mtos_score
                              AND msh.id_mtos_score_group = i_mtos_score_group
                              AND msh.flg_context = i_flg_context
                              AND msh.id_language = i_lang),
                           empty_clob())
                  INTO o_score_group_help
                  FROM dual;
            
            END IF;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
        
    END get_sev_score_help;

    /**********************************************************************************************
    * Returns the score parameter exclusions
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_id_mtos_param      Score parameter ID
    *                        
    * @return            Score paramters exclusions
    *
    * @author            Tércio Soares
    * @version           2.6.0.4
    * @since             2010/10/01
    **********************************************************************************************/
    FUNCTION get_param_exclusions
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_id_mtos_param IN mtos_param_exclusions.id_mtos_param%TYPE
    ) RETURN table_number IS
    
        l_score_params_exclusions table_number := table_number();
        l_params_exclusion        mtos_param_exclusions.id_mtos_param_exclude%TYPE;
        l_index                   NUMBER := 1;
    
        CURSOR c_param_exclusions IS
            SELECT mpx.id_mtos_param_exclude
              FROM mtos_param_exclusions mpx
             WHERE mpx.id_mtos_param = i_id_mtos_param
             ORDER BY id_mtos_param_exclude;
    
    BEGIN
    
        g_error := 'GET SCORE PARAM EXCLUSIONS';
        pk_alertlog.log_debug(g_error);
        OPEN c_param_exclusions;
        LOOP
            FETCH c_param_exclusions
                INTO l_params_exclusion;
            EXIT WHEN c_param_exclusions%NOTFOUND;
        
            l_score_params_exclusions.extend;
            l_score_params_exclusions(l_index) := l_params_exclusion;
            l_index := l_index + 1;
        
        END LOOP;
        CLOSE c_param_exclusions;
    
        RETURN l_score_params_exclusions;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_param_exclusions;

    /********************************************************************************************
    * Shows all parameters for SOFA score.
    * Returns the parameters properties and current value.
    *
    * @param i_lang                   Preferred language ID for this professional 
    * @param i_prof                   Object (professional ID, institution ID, software ID)
    * @param i_id_patient             Patient ID
    * @param i_episode                Episode ID 
    * @param i_pat_age_years          Patient age
    * @param i_epis_mtos_score        Severity score evaluation ID
    * @param o_list                   Parameter list
    * @param o_error                  Error
    *
    * @return                         true or false on success or error
    *
    * @author                         Tércio Soares
    * @version                        2.6.0.4
    * @since                          2010/10/20
    **********************************************************************************************/
    FUNCTION get_sofa_param_list
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_patient      IN patient.id_patient%TYPE,
        i_episode         IN episode.id_episode%TYPE,
        i_pat_age_years   IN NUMBER,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_SOFA_PARAM_LIST';
        l_internal_error EXCEPTION;
    
        l_gcs_eyes        NUMBER;
        l_gcs_verbal      NUMBER;
        l_gcs_motor       NUMBER;
        l_gcs_eyes_desc   pk_translation.t_desc_translation;
        l_gcs_verbal_desc pk_translation.t_desc_translation;
        l_gcs_motor_desc  pk_translation.t_desc_translation;
        l_gcs_total       NUMBER;
    
    BEGIN
    
        g_error := 'CALL TO GET_GLASGOW_SCORE_VALUES';
        pk_alertlog.log_debug(g_error);
        IF NOT get_glasgow_score_aux(i_lang            => i_lang,
                                     i_prof            => i_prof,
                                     i_id_episode      => i_episode,
                                     i_id_patient      => i_id_patient,
                                     i_pat_age_years   => i_pat_age_years,
                                     o_gcs_eyes        => l_gcs_eyes,
                                     o_gcs_verbal      => l_gcs_verbal,
                                     o_gcs_motor       => l_gcs_motor,
                                     o_gcs_eyes_desc   => l_gcs_eyes_desc,
                                     o_gcs_verbal_desc => l_gcs_verbal_desc,
                                     o_gcs_motor_desc  => l_gcs_motor_desc,
                                     o_gcs_total       => l_gcs_total,
                                     o_error           => o_error)
        THEN
            RAISE l_internal_error;
        END IF;
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              nvl(l_gcs_total, emp.registered_value),
                              'PAT_AGE',
                              i_pat_age_years,
                              'G_EYES',
                              nvl(l_gcs_eyes, emp.registered_value),
                              'G_VERBAL',
                              nvl(l_gcs_verbal, emp.registered_value),
                              'G_MOTOR',
                              nvl(l_gcs_motor, emp.registered_value),
                              emp.registered_value) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              pk_utils.to_str(nvl(l_gcs_total, emp.registered_value), i_prof),
                              'PAT_AGE',
                              pk_utils.to_str(i_pat_age_years, i_prof),
                              'G_EYES',
                              nvl(l_gcs_eyes_desc,
                                  (SELECT nvl((SELECT pk_translation.get_translation(i_lang, vsd.code_vital_sign_desc)
                                                FROM vital_sign_desc vsd
                                               WHERE vsd.id_vital_sign_desc = emp.registered_value
                                                 AND vsd.flg_available = pk_alert_constant.g_available),
                                              NULL)
                                     FROM dual)),
                              'G_VERBAL',
                              nvl(l_gcs_verbal_desc,
                                  (SELECT nvl((SELECT pk_translation.get_translation(i_lang, vsd.code_vital_sign_desc)
                                                FROM vital_sign_desc vsd
                                               WHERE vsd.id_vital_sign_desc = emp.registered_value
                                                 AND vsd.flg_available = pk_alert_constant.g_available),
                                              NULL)
                                     FROM dual)),
                              'G_MOTOR',
                              nvl(l_gcs_motor_desc,
                                  (SELECT nvl((SELECT pk_translation.get_translation(i_lang, vsd.code_vital_sign_desc)
                                                FROM vital_sign_desc vsd
                                               WHERE vsd.id_vital_sign_desc = emp.registered_value
                                                 AND vsd.flg_available = pk_alert_constant.g_available),
                                              NULL)
                                     FROM dual)),
                              decode(mpm.flg_fill_type,
                                     pk_sev_scores_constant.g_flg_fill_type_m,
                                     (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                        FROM mtos_param_value mpe
                                       WHERE mpe.id_mtos_param_value = emp.registered_value),
                                     to_char(emp.registered_value))) registered_value_desc,
                       NULL unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_sofa)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_sofa),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       NULL id_unit_measure,
                       NULL val_min,
                       NULL val_max,
                       NULL format_num,
                       NULL id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, epis_mtos_param emp, mtos_param_task mpt
                 WHERE mse.id_mtos_score IN
                       (SELECT mtr.id_mtos_score_rel
                          FROM mtos_score_relation mtr
                         WHERE mtr.id_mtos_score = pk_sev_scores_constant.g_id_score_sofa)
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                UNION
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              nvl(l_gcs_total, emp.registered_value),
                              emp.registered_value) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              pk_utils.to_str(nvl(l_gcs_total, emp.registered_value), i_prof),
                              decode(mpm.flg_fill_type,
                                     pk_sev_scores_constant.g_flg_fill_type_m,
                                     (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                        FROM mtos_param_value mpe
                                       WHERE mpe.id_mtos_param_value = emp.registered_value),
                                     to_char(emp.registered_value))) registered_value_desc,
                       NULL unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_sofa)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_sofa),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       NULL id_unit_measure,
                       NULL val_min,
                       NULL val_max,
                       NULL format_num,
                       NULL id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, epis_mtos_param emp, mtos_param_task mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_sofa
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                 ORDER BY score_rank, param_rank;
        ELSE
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              l_gcs_total,
                              'PAT_AGE',
                              i_pat_age_years,
                              'G_EYES',
                              l_gcs_eyes,
                              'G_VERBAL',
                              l_gcs_verbal,
                              'G_MOTOR',
                              l_gcs_motor,
                              NULL) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              pk_utils.to_str(l_gcs_total, i_prof),
                              'PAT_AGE',
                              pk_utils.to_str(i_pat_age_years, i_prof),
                              'G_EYES',
                              l_gcs_eyes_desc,
                              'G_VERBAL',
                              l_gcs_verbal_desc,
                              'G_MOTOR',
                              l_gcs_motor_desc,
                              NULL) registered_value_desc,
                       NULL unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_sofa)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_sofa),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       NULL id_unit_measure,
                       NULL val_min,
                       NULL val_max,
                       NULL format_num,
                       NULL id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, mtos_param_task mpt
                 WHERE mse.id_mtos_score IN
                       (SELECT mtr.id_mtos_score_rel
                          FROM mtos_score_relation mtr
                         WHERE mtr.id_mtos_score = pk_sev_scores_constant.g_id_score_sofa)
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                UNION
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name, 'G_TOTAL', l_gcs_total, NULL) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name, 'G_TOTAL', pk_utils.to_str(l_gcs_total, i_prof), NULL) registered_value_desc,
                       NULL unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_sofa)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_sofa),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       NULL id_unit_measure,
                       NULL val_min,
                       NULL val_max,
                       NULL format_num,
                       NULL id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, mtos_param_task mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_sofa
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                 ORDER BY score_rank, param_rank;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_sofa_param_list;

    /********************************************************************************************
    * Shows all parameters for ALDRETE score.
    * Returns the parameters properties and current value.
    *
    * @param i_lang                   Preferred language ID for this professional 
    * @param i_prof                   Object (professional ID, institution ID, software ID)
    * @param i_id_patient             Patient ID
    * @param i_episode                Episode ID 
    * @param i_epis_mtos_score        Severity score evaluation ID
    * @param o_list                   Parameter list
    * @param o_error                  Error
    *
    * @return                         true or false on success or error
    *
    * @author                         Tércio Soares
    * @version                        2.6.0.4
    * @since                          2010/10/26
    **********************************************************************************************/
    FUNCTION get_aldrete_param_list
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_patient      IN patient.id_patient%TYPE,
        i_episode         IN episode.id_episode%TYPE,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_ALDRETE_PARAM_LIST';
        l_internal_error EXCEPTION;
    
    BEGIN
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       emp.registered_value registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.flg_fill_type,
                              pk_sev_scores_constant.g_flg_fill_type_m,
                              (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                 FROM mtos_param_value mpe
                                WHERE mpe.id_mtos_param_value = emp.registered_value),
                              to_char(emp.registered_value)) registered_value_desc,
                       NULL unit_measure_desc,
                       -- RELATION
                       NULL relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       NULL related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       NULL id_unit_measure,
                       NULL val_min,
                       NULL val_max,
                       NULL format_num,
                       NULL id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, epis_mtos_param emp, mtos_param_task mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_aldrete
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                 ORDER BY score_rank, param_rank;
        ELSE
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       NULL registered_value,
                       NULL registered_value_desc,
                       NULL unit_measure_desc,
                       -- RELATION
                       NULL relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       NULL related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       NULL id_unit_measure,
                       NULL val_min,
                       NULL val_max,
                       NULL format_num,
                       NULL id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, mtos_param_task mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_aldrete
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                 ORDER BY score_rank, param_rank;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_aldrete_param_list;

    /********************************************************************************************
    * Shows all parameters for CRIB AND CRIB II scores.
    * Returns the parameters properties and current value.
    *
    * @param i_lang                   Preferred language ID for this professional 
    * @param i_prof                   Object (professional ID, institution ID, software ID)
    * @param i_id_patient             Patient ID
    * @param i_episode                Episode ID 
    * @param i_mtos_score             Severity score ID
    * @param i_epis_mtos_score        Severity score evaluation ID
    * @param o_list                   Parameter list
    * @param o_error                  Error
    *
    * @return                         true or false on success or error
    *
    * @author                         Tércio Soares
    * @version                        2.6.0.4
    * @since                          2010/10/26
    **********************************************************************************************/
    FUNCTION get_crib_param_list
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_patient      IN patient.id_patient%TYPE,
        i_episode         IN episode.id_episode%TYPE,
        i_mtos_score      IN mtos_score.id_mtos_score%TYPE,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_CRIB_PARAM_LIST';
        l_internal_error EXCEPTION;
    
    BEGIN
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       emp.registered_value registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.flg_fill_type,
                              pk_sev_scores_constant.g_flg_fill_type_m,
                              (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                 FROM mtos_param_value mpe
                                WHERE mpe.id_mtos_param_value = emp.registered_value),
                              to_char(emp.registered_value)) registered_value_desc,
                       decode(mpm.internal_name,
                              'GESTATION_CRIB_II',
                              (SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                                 FROM unit_measure um
                                WHERE um.id_unit_measure = 10375),
                              'BIRTHWEIGHT_CRIB_II',
                              (SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                                 FROM unit_measure um
                                WHERE um.id_unit_measure = 76132),
                              NULL) unit_measure_desc,
                       -- RELATION
                       NULL relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       NULL related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       NULL id_unit_measure,
                       decode(mpm.internal_name, 'GESTATION_CRIB_II', 22, 'BIRTHWEIGHT_CRIB_II', 251, NULL) val_min,
                       decode(mpm.internal_name, 'GESTATION_CRIB_II', 32, 'BIRTHWEIGHT_CRIB_II', 3000, NULL) val_max,
                       decode(mpm.internal_name, 'GESTATION_CRIB_II', 99, 'BIRTHWEIGHT_CRIB_II', 9999, NULL) format_num,
                       NULL id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, epis_mtos_param emp, mtos_param_task mpt
                 WHERE mse.id_mtos_score = i_mtos_score
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                 ORDER BY score_rank, param_rank;
        ELSE
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       NULL registered_value,
                       NULL registered_value_desc,
                       decode(mpm.internal_name,
                              'GESTATION_CRIB_II',
                              (SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                                 FROM unit_measure um
                                WHERE um.id_unit_measure = 10375),
                              'BIRTHWEIGHT_CRIB_II',
                              (SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                                 FROM unit_measure um
                                WHERE um.id_unit_measure = 76132),
                              NULL) unit_measure_desc,
                       -- RELATION
                       NULL relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       NULL related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       NULL id_unit_measure,
                       decode(mpm.internal_name, 'GESTATION_CRIB_II', 22, 'BIRTHWEIGHT_CRIB_II', 251, NULL) val_min,
                       decode(mpm.internal_name, 'GESTATION_CRIB_II', 32, 'BIRTHWEIGHT_CRIB_II', 3000, NULL) val_max,
                       decode(mpm.internal_name, 'GESTATION_CRIB_II', 99, 'BIRTHWEIGHT_CRIB_II', 9999, NULL) format_num,
                       NULL id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, mtos_param_task mpt
                 WHERE mse.id_mtos_score = i_mtos_score
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                 ORDER BY score_rank, param_rank;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_crib_param_list;

    /********************************************************************************************
    * Shows all parameters for SNAP score.
    * Returns the parameters properties and current value.
    *
    * @param i_lang                   Preferred language ID for this professional 
    * @param i_prof                   Object (professional ID, institution ID, software ID)
    * @param i_id_patient             Patient ID
    * @param i_episode                Episode ID 
    * @param i_epis_mtos_score        Severity score evaluation ID
    * @param o_list                   Parameter list
    * @param o_error                  Error
    *
    * @return                         true or false on success or error
    *
    * @author                         Tércio Soares
    * @version                        2.6.0.4
    * @since                          2010/10/29
    **********************************************************************************************/
    FUNCTION get_snap_param_list
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_patient      IN patient.id_patient%TYPE,
        i_episode         IN episode.id_episode%TYPE,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_SNAP_PARAM_LIST';
        l_internal_error EXCEPTION;
    
    BEGIN
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       emp.registered_value registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       pk_utils.to_str(emp.registered_value, i_prof) registered_value_desc,
                       NULL unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_snap)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_snap),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       NULL id_unit_measure,
                       NULL val_min,
                       NULL val_max,
                       NULL format_num,
                       NULL id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, vital_sign_read vsr, epis_mtos_param emp, mtos_param_task mpt
                 WHERE mse.id_mtos_score IN
                       (SELECT mtr.id_mtos_score_rel
                          FROM mtos_score_relation mtr
                         WHERE mtr.id_mtos_score = pk_sev_scores_constant.g_id_score_snap)
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND vsr.id_episode(+) = i_episode
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                UNION
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              emp.registered_value,
                              decode(mpm.flg_fill_type,
                                     pk_sev_scores_constant.g_flg_fill_type_n,
                                     vsr.value,
                                     pk_sev_scores_constant.g_flg_fill_type_m,
                                     vsr.id_vital_sign_desc,
                                     NULL)) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              decode(mpm.flg_fill_type,
                                     pk_sev_scores_constant.g_flg_fill_type_m,
                                     (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                        FROM mtos_param_value mpe
                                       WHERE mpe.id_mtos_param_value = emp.registered_value),
                                     pk_utils.to_str(emp.registered_value, i_prof)),
                              decode(mpm.flg_fill_type,
                                     pk_sev_scores_constant.g_flg_fill_type_n,
                                     nvl((SELECT pk_utils.to_str(vsr.value, i_prof) || ' ' ||
                                                pk_translation.get_translation(i_lang, um.code_unit_measure)
                                           FROM unit_measure um
                                          WHERE um.id_unit_measure = vsr.id_unit_measure),
                                         pk_utils.to_str(vsr.value, i_prof)),
                                     pk_sev_scores_constant.g_flg_fill_type_m,
                                     (SELECT pk_vital_sign.get_vs_alias(i_lang, i_id_patient, vsd2.code_vital_sign_desc)
                                        FROM vital_sign_desc vsd2
                                       WHERE vsd2.id_vital_sign_desc = vsr.id_vital_sign_desc),
                                     NULL)) registered_value_desc,
                       NULL unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_snap)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_snap),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       NULL id_unit_measure,
                       NULL val_min,
                       NULL val_max,
                       NULL format_num,
                       vsr.id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, vital_sign_read vsr, epis_mtos_param emp, mtos_param_task mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_snap
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND vsr.id_episode(+) = i_episode
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                 ORDER BY score_rank, param_rank;
        ELSE
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       NULL registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       NULL registered_value_desc,
                       NULL unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_snap)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_snap),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       NULL id_unit_measure,
                       NULL val_min,
                       NULL val_max,
                       decode(mpm.internal_name, 'PRESSURE_OI', '999', 'PAO2_OI', '999', 'FIO2_OI', '90.9', NULL) format_num,
                       NULL id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, mtos_param_task mpt
                 WHERE mse.id_mtos_score IN
                       (SELECT mtr.id_mtos_score_rel
                          FROM mtos_score_relation mtr
                         WHERE mtr.id_mtos_score = pk_sev_scores_constant.g_id_score_snap)
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                UNION
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              (SELECT mpv.value
                                 FROM mtos_param_value mpv
                                 LEFT JOIN mtos_param_value_task mpvt
                                   ON mpvt.id_mtos_param_value = mpv.id_mtos_param_value
                                  AND mpvt.flg_available = pk_alert_constant.g_yes
                                WHERE mpv.id_mtos_param = mpm.id_mtos_param
                                  AND decode(mpvt.flg_param_task_type,
                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                             mpvt.min_val,
                                             NULL) <= vsr.value
                                  AND decode(mpvt.flg_param_task_type,
                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                             mpvt.max_val,
                                             NULL) >= vsr.value)) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              (SELECT pk_translation.get_translation(i_lang, mpv.code_mtos_param_value)
                                 FROM mtos_param_value mpv
                                 LEFT JOIN mtos_param_value_task mpvt
                                   ON mpvt.id_mtos_param_value = mpv.id_mtos_param_value
                                  AND mpvt.flg_available = pk_alert_constant.g_yes
                                WHERE mpv.id_mtos_param = mpm.id_mtos_param
                                  AND decode(mpvt.flg_param_task_type,
                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                             mpvt.min_val,
                                             NULL) <= vsr.value
                                  AND decode(mpvt.flg_param_task_type,
                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                             mpvt.max_val,
                                             NULL) >= vsr.value)) registered_value_desc,
                       NULL unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_snap)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_snap),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       NULL id_unit_measure,
                       NULL val_min,
                       NULL val_max,
                       NULL format_num,
                       vsr.id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, vital_sign_read vsr, mtos_param_task mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_snap
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND vsr.id_episode(+) = i_episode
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                 ORDER BY score_rank, param_rank;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_snap_param_list;

    /********************************************************************************************
    * Shows all parameters for SPAS II score.
    * Returns the parameters properties and current value.
    *
    * @param i_lang                   Preferred language ID for this professional 
    * @param i_prof                   Object (professional ID, institution ID, software ID)
    * @param i_id_patient             Patient ID
    * @param i_episode                Episode ID 
    * @param i_pat_age_years          Patient age
    * @param i_epis_mtos_score        Severity score evaluation ID
    * @param o_list                   Parameter list
    * @param o_error                  Error
    *
    * @return                         true or false on success or error
    *
    * @author                         Tércio Soares
    * @version                        2.6.0.4
    * @since                          2010/11/02
    **********************************************************************************************/
    FUNCTION get_saps_param_list
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_patient      IN patient.id_patient%TYPE,
        i_episode         IN episode.id_episode%TYPE,
        i_pat_age_years   IN NUMBER,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_SAPS_PARAM_LIST';
        l_internal_error EXCEPTION;
    
        l_gcs_eyes        NUMBER;
        l_gcs_verbal      NUMBER;
        l_gcs_motor       NUMBER;
        l_gcs_eyes_desc   pk_translation.t_desc_translation;
        l_gcs_verbal_desc pk_translation.t_desc_translation;
        l_gcs_motor_desc  pk_translation.t_desc_translation;
        l_gcs_total       NUMBER(6, 4);
        l_age             vital_sign_unit_measure.age_min%TYPE;
    
    BEGIN
    
        l_age := pk_patient.get_pat_age(i_lang, NULL, NULL, NULL, 'MONTHS', i_id_patient);
    
        g_error := 'CALL TO GET_GLASGOW_SCORE_VALUES';
        pk_alertlog.log_debug(g_error);
        IF NOT get_glasgow_score_aux(i_lang            => i_lang,
                                     i_prof            => i_prof,
                                     i_id_episode      => i_episode,
                                     i_id_patient      => i_id_patient,
                                     i_pat_age_years   => i_pat_age_years,
                                     o_gcs_eyes        => l_gcs_eyes,
                                     o_gcs_verbal      => l_gcs_verbal,
                                     o_gcs_motor       => l_gcs_motor,
                                     o_gcs_eyes_desc   => l_gcs_eyes_desc,
                                     o_gcs_verbal_desc => l_gcs_verbal_desc,
                                     o_gcs_motor_desc  => l_gcs_motor_desc,
                                     o_gcs_total       => l_gcs_total,
                                     o_error           => o_error)
        THEN
            RAISE l_internal_error;
        END IF;
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       mse.id_mtos_score id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              l_gcs_total,
                              'PAT_AGE',
                              i_pat_age_years,
                              'G_EYES',
                              l_gcs_eyes,
                              'G_VERBAL',
                              l_gcs_verbal,
                              'G_MOTOR',
                              l_gcs_motor,
                              emp.registered_value) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              pk_utils.to_str(l_gcs_total, i_prof),
                              'PAT_AGE',
                              pk_utils.to_str(i_pat_age_years, i_prof),
                              'G_EYES',
                              l_gcs_eyes_desc,
                              'G_VERBAL',
                              l_gcs_verbal_desc,
                              'G_MOTOR',
                              l_gcs_motor_desc,
                              decode(mpm.flg_fill_type,
                                     pk_sev_scores_constant.g_flg_fill_type_m,
                                     (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                        FROM mtos_param_value mpe
                                       WHERE mpe.id_mtos_param_value = emp.registered_value),
                                     to_char(emp.registered_value))) registered_value_desc,
                       NULL unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_saps2)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_saps2),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       NULL id_unit_measure,
                       NULL val_min,
                       NULL val_max,
                       NULL format_num,
                       NULL id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, epis_mtos_param emp, mtos_param_task mpt
                 WHERE mse.id_mtos_score IN
                       (SELECT mtr.id_mtos_score_rel
                          FROM mtos_score_relation mtr
                         WHERE mtr.id_mtos_score = pk_sev_scores_constant.g_id_score_saps2)
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                UNION
                SELECT mse.id_mtos_score,
                       mse.id_mtos_score id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              l_gcs_total,
                              'PAT_AGE',
                              i_pat_age_years,
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     emp.registered_value,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   get_vital_sign_info(i_lang,
                                                                       i_prof,
                                                                       decode(mpt.flg_param_task_type,
                                                                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                              mpt.id_param_task,
                                                                              NULL),
                                                                       get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                mpt.id_param_task,
                                                                                                NULL),
                                                                                         i_prof.institution,
                                                                                         i_prof.software),
                                                                       emp.registered_value,
                                                                       pk_sev_scores_constant.g_vital_sign_info_value),
                                                   get_vital_sign_info(i_lang,
                                                                       i_prof,
                                                                       vsr.id_vital_sign,
                                                                       vsr.id_unit_measure,
                                                                       vsr.value,
                                                                       pk_sev_scores_constant.g_vital_sign_info_value)),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            vsr.id_vital_sign_desc,
                                            NULL))) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              pk_utils.to_str(l_gcs_total, i_prof),
                              'PAT_AGE',
                              pk_utils.to_str(i_pat_age_years, i_prof),
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                               FROM mtos_param_value mpe
                                              WHERE mpe.id_mtos_param_value = emp.registered_value),
                                            to_char(emp.registered_value)),
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   decode(get_vital_sign_info(i_lang,
                                                                              i_prof,
                                                                              decode(mpt.flg_param_task_type,
                                                                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                     mpt.id_param_task,
                                                                                     NULL),
                                                                              get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                       pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                       mpt.id_param_task,
                                                                                                       NULL),
                                                                                                i_prof.institution,
                                                                                                i_prof.software),
                                                                              emp.registered_value,
                                                                              pk_sev_scores_constant.g_vital_sign_info_value),
                                                          NULL,
                                                          NULL,
                                                          ((SELECT pk_utils.to_str(get_vital_sign_info(i_lang,
                                                                                                       i_prof,
                                                                                                       decode(mpt.flg_param_task_type,
                                                                                                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                              mpt.id_param_task,
                                                                                                              NULL),
                                                                                                       get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                                mpt.id_param_task,
                                                                                                                                NULL),
                                                                                                                         i_prof.institution,
                                                                                                                         i_prof.software),
                                                                                                       emp.registered_value,
                                                                                                       pk_sev_scores_constant.g_vital_sign_info_value),
                                                                                   i_prof) || ' ' ||
                                                                   pk_translation.get_translation(i_lang,
                                                                                                  um.code_unit_measure)
                                                              FROM unit_measure um
                                                             WHERE um.id_unit_measure =
                                                                   get_vital_sign_info(i_lang,
                                                                                       i_prof,
                                                                                       decode(mpt.flg_param_task_type,
                                                                                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                              mpt.id_param_task,
                                                                                              NULL),
                                                                                       get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                mpt.id_param_task,
                                                                                                                NULL),
                                                                                                         i_prof.institution,
                                                                                                         i_prof.software),
                                                                                       emp.registered_value,
                                                                                       pk_sev_scores_constant.g_vital_sign_info_um)))),
                                                   (SELECT pk_utils.to_str(get_vital_sign_info(i_lang,
                                                                                               i_prof,
                                                                                               vsr.id_vital_sign,
                                                                                               vsr.id_unit_measure,
                                                                                               vsr.value,
                                                                                               pk_sev_scores_constant.g_vital_sign_info_value),
                                                                           i_prof) || ' ' ||
                                                           pk_translation.get_translation(i_lang, um.code_unit_measure)
                                                      FROM unit_measure um
                                                     WHERE um.id_unit_measure =
                                                           get_vital_sign_info(i_lang,
                                                                               i_prof,
                                                                               vsr.id_vital_sign,
                                                                               vsr.id_unit_measure,
                                                                               vsr.value,
                                                                               pk_sev_scores_constant.g_vital_sign_info_um))),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT pk_vital_sign.get_vs_alias(i_lang,
                                                                               i_id_patient,
                                                                               vsd2.code_vital_sign_desc)
                                               FROM vital_sign_desc vsd2
                                              WHERE vsd2.id_vital_sign_desc = vsr.id_vital_sign_desc),
                                            NULL))) registered_value_desc,
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              (SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                                 FROM unit_measure um
                                WHERE um.id_unit_measure = get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                    mpt.id_param_task,
                                                                                    NULL),
                                                                             i_prof.institution,
                                                                             i_prof.software))) unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_saps2)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_saps2),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                        pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                        mpt.id_param_task,
                                                        NULL),
                                                 i_prof.institution,
                                                 i_prof.software)
                          FROM dual) id_unit_measure,
                       (SELECT pk_vital_sign_core.get_vsum_val_min(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_min,
                       (SELECT pk_vital_sign_core.get_vsum_val_max(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_max,
                       (SELECT pk_vital_sign_core.get_vsum_format_num(i_lang            => i_lang,
                                                                      i_prof            => i_prof,
                                                                      i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                  mpt.id_param_task,
                                                                                                  NULL),
                                                                      i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                            mpt.id_param_task,
                                                                                                                            NULL),
                                                                                                                     i_prof.institution,
                                                                                                                     i_prof.software)
                                                                                              FROM dual),
                                                                      i_id_institution  => i_prof.institution,
                                                                      i_id_software     => i_prof.software,
                                                                      i_age             => l_age)
                          FROM dual) format_num,
                       vsr.id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, vital_sign_read vsr, epis_mtos_param emp, mtos_param_task mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_saps2
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND vsr.id_episode(+) = i_episode
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                 ORDER BY score_rank, param_rank;
        ELSE
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       mse.id_mtos_score id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              l_gcs_total,
                              'PAT_AGE',
                              i_pat_age_years,
                              'G_EYES',
                              l_gcs_eyes,
                              'G_VERBAL',
                              l_gcs_verbal,
                              'G_MOTOR',
                              l_gcs_motor,
                              NULL) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              pk_utils.to_str(l_gcs_total, i_prof),
                              'PAT_AGE',
                              pk_utils.to_str(i_pat_age_years, i_prof),
                              'G_EYES',
                              l_gcs_eyes_desc,
                              'G_VERBAL',
                              l_gcs_verbal_desc,
                              'G_MOTOR',
                              l_gcs_motor_desc,
                              NULL) registered_value_desc,
                       NULL unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_saps2)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_saps2),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       NULL id_unit_measure,
                       NULL val_min,
                       NULL val_max,
                       NULL format_num,
                       NULL id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, mtos_param_task mpt
                 WHERE mse.id_mtos_score IN
                       (SELECT mtr.id_mtos_score_rel
                          FROM mtos_score_relation mtr
                         WHERE mtr.id_mtos_score = pk_sev_scores_constant.g_id_score_saps2)
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                UNION
                SELECT mse.id_mtos_score,
                       mse.id_mtos_score id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              l_gcs_total,
                              'PAT_AGE',
                              i_pat_age_years,
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   NULL,
                                                   get_vital_sign_info(i_lang,
                                                                       i_prof,
                                                                       vsr.id_vital_sign,
                                                                       vsr.id_unit_measure,
                                                                       vsr.value,
                                                                       pk_sev_scores_constant.g_vital_sign_info_value)),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            vsr.id_vital_sign_desc,
                                            NULL))) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              pk_utils.to_str(l_gcs_total, i_prof),
                              'PAT_AGE',
                              pk_utils.to_str(i_pat_age_years, i_prof),
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   NULL,
                                                   (SELECT pk_utils.to_str(get_vital_sign_info(i_lang,
                                                                                               i_prof,
                                                                                               vsr.id_vital_sign,
                                                                                               vsr.id_unit_measure,
                                                                                               vsr.value,
                                                                                               pk_sev_scores_constant.g_vital_sign_info_value),
                                                                           i_prof) || ' ' ||
                                                           pk_translation.get_translation(i_lang, um.code_unit_measure)
                                                      FROM unit_measure um
                                                     WHERE um.id_unit_measure =
                                                           get_vital_sign_info(i_lang,
                                                                               i_prof,
                                                                               vsr.id_vital_sign,
                                                                               vsr.id_unit_measure,
                                                                               vsr.value,
                                                                               pk_sev_scores_constant.g_vital_sign_info_um))),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT pk_vital_sign.get_vs_alias(i_lang,
                                                                               i_id_patient,
                                                                               vsd2.code_vital_sign_desc)
                                               FROM vital_sign_desc vsd2
                                              WHERE vsd2.id_vital_sign_desc = vsr.id_vital_sign_desc),
                                            NULL))) registered_value_desc,
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              (SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                                 FROM unit_measure um
                                WHERE um.id_unit_measure = get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                    mpt.id_param_task,
                                                                                    NULL),
                                                                             i_prof.institution,
                                                                             i_prof.software))) unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_saps2)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_saps2),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                        pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                        mpt.id_param_task,
                                                        NULL),
                                                 i_prof.institution,
                                                 i_prof.software)
                          FROM dual) id_unit_measure,
                       (SELECT pk_vital_sign_core.get_vsum_val_min(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_min,
                       (SELECT pk_vital_sign_core.get_vsum_val_max(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_max,
                       (SELECT pk_vital_sign_core.get_vsum_format_num(i_lang            => i_lang,
                                                                      i_prof            => i_prof,
                                                                      i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                  mpt.id_param_task,
                                                                                                  NULL),
                                                                      i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                            mpt.id_param_task,
                                                                                                                            NULL),
                                                                                                                     i_prof.institution,
                                                                                                                     i_prof.software)
                                                                                              FROM dual),
                                                                      i_id_institution  => i_prof.institution,
                                                                      i_id_software     => i_prof.software,
                                                                      i_age             => l_age)
                          FROM dual) format_num,
                       vsr.id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, vital_sign_read vsr, mtos_param_task mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_saps2
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND vsr.id_episode(+) = i_episode
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                 ORDER BY score_rank, param_rank;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_saps_param_list;

    /********************************************************************************************
    * Shows all parameters for APACHE II score.
    * Returns the parameters properties and current value.
    *
    * @param i_lang                   Preferred language ID for this professional 
    * @param i_prof                   Object (professional ID, institution ID, software ID)
    * @param i_id_patient             Patient ID
    * @param i_episode                Episode ID 
    * @param i_pat_age_years          Patient age
    * @param i_epis_mtos_score        Severity score evaluation ID
    * @param o_list                   Parameter list
    * @param o_error                  Error
    *
    * @return                         true or false on success or error
    *
    * @author                         Tércio Soares
    * @version                        2.6.0.4
    * @since                          2010/10/20
    **********************************************************************************************/
    FUNCTION get_apache2_param_list
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_patient      IN patient.id_patient%TYPE,
        i_episode         IN episode.id_episode%TYPE,
        i_pat_age_years   IN NUMBER,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_APACHE2_PARAM_LIST';
        l_internal_error EXCEPTION;
    
        l_gcs_eyes        NUMBER;
        l_gcs_verbal      NUMBER;
        l_gcs_motor       NUMBER;
        l_gcs_eyes_desc   pk_translation.t_desc_translation;
        l_gcs_verbal_desc pk_translation.t_desc_translation;
        l_gcs_motor_desc  pk_translation.t_desc_translation;
        l_gcs_total       NUMBER(6, 4);
        l_age             vital_sign_unit_measure.age_min%TYPE;
    
    BEGIN
    
        l_age := pk_patient.get_pat_age(i_lang, NULL, NULL, NULL, 'MONTHS', i_id_patient);
    
        g_error := 'CALL TO GET_GLASGOW_SCORE_VALUES';
        pk_alertlog.log_debug(g_error);
        IF NOT get_glasgow_score_aux(i_lang            => i_lang,
                                     i_prof            => i_prof,
                                     i_id_episode      => i_episode,
                                     i_id_patient      => i_id_patient,
                                     i_pat_age_years   => i_pat_age_years,
                                     o_gcs_eyes        => l_gcs_eyes,
                                     o_gcs_verbal      => l_gcs_verbal,
                                     o_gcs_motor       => l_gcs_motor,
                                     o_gcs_eyes_desc   => l_gcs_eyes_desc,
                                     o_gcs_verbal_desc => l_gcs_verbal_desc,
                                     o_gcs_motor_desc  => l_gcs_motor_desc,
                                     o_gcs_total       => l_gcs_total,
                                     o_error           => o_error)
        THEN
            RAISE l_internal_error;
        END IF;
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              l_gcs_total,
                              'PAT_AGE',
                              i_pat_age_years,
                              'G_EYES',
                              l_gcs_eyes,
                              'G_VERBAL',
                              l_gcs_verbal,
                              'G_MOTOR',
                              l_gcs_motor,
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     emp.registered_value,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   get_vital_sign_info(i_lang,
                                                                       i_prof,
                                                                       decode(mpt.flg_param_task_type,
                                                                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                              mpt.id_param_task,
                                                                              NULL),
                                                                       get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                mpt.id_param_task,
                                                                                                NULL),
                                                                                         i_prof.institution,
                                                                                         i_prof.software),
                                                                       emp.registered_value,
                                                                       pk_sev_scores_constant.g_vital_sign_info_value),
                                                   get_vital_sign_info(i_lang,
                                                                       i_prof,
                                                                       vsr.id_vital_sign,
                                                                       vsr.id_unit_measure,
                                                                       vsr.value,
                                                                       pk_sev_scores_constant.g_vital_sign_info_value)),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            vsr.id_vital_sign_desc,
                                            NULL))) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              pk_utils.to_str(l_gcs_total, i_prof),
                              'PAT_AGE',
                              pk_utils.to_str(i_pat_age_years, i_prof),
                              'G_EYES',
                              l_gcs_eyes_desc,
                              'G_VERBAL',
                              l_gcs_verbal_desc,
                              'G_MOTOR',
                              l_gcs_motor_desc,
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                               FROM mtos_param_value mpe
                                              WHERE mpe.id_mtos_param_value = emp.registered_value),
                                            to_char(emp.registered_value)),
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   decode(get_vital_sign_info(i_lang,
                                                                              i_prof,
                                                                              decode(mpt.flg_param_task_type,
                                                                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                     mpt.id_param_task,
                                                                                     NULL),
                                                                              get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                       pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                       mpt.id_param_task,
                                                                                                       NULL),
                                                                                                i_prof.institution,
                                                                                                i_prof.software),
                                                                              emp.registered_value,
                                                                              pk_sev_scores_constant.g_vital_sign_info_value),
                                                          NULL,
                                                          NULL,
                                                          ((SELECT pk_utils.to_str(get_vital_sign_info(i_lang,
                                                                                                       i_prof,
                                                                                                       decode(mpt.flg_param_task_type,
                                                                                                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                              mpt.id_param_task,
                                                                                                              NULL),
                                                                                                       get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                                mpt.id_param_task,
                                                                                                                                NULL),
                                                                                                                         i_prof.institution,
                                                                                                                         i_prof.software),
                                                                                                       emp.registered_value,
                                                                                                       pk_sev_scores_constant.g_vital_sign_info_value),
                                                                                   i_prof) || ' ' ||
                                                                   pk_translation.get_translation(i_lang,
                                                                                                  um.code_unit_measure)
                                                              FROM unit_measure um
                                                             WHERE um.id_unit_measure =
                                                                   get_vital_sign_info(i_lang,
                                                                                       i_prof,
                                                                                       decode(mpt.flg_param_task_type,
                                                                                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                              mpt.id_param_task,
                                                                                              NULL),
                                                                                       get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                mpt.id_param_task,
                                                                                                                NULL),
                                                                                                         i_prof.institution,
                                                                                                         i_prof.software),
                                                                                       emp.registered_value,
                                                                                       pk_sev_scores_constant.g_vital_sign_info_um)))),
                                                   (SELECT pk_utils.to_str(get_vital_sign_info(i_lang,
                                                                                               i_prof,
                                                                                               vsr.id_vital_sign,
                                                                                               vsr.id_unit_measure,
                                                                                               vsr.value,
                                                                                               pk_sev_scores_constant.g_vital_sign_info_value),
                                                                           i_prof) || ' ' ||
                                                           pk_translation.get_translation(i_lang, um.code_unit_measure)
                                                      FROM unit_measure um
                                                     WHERE um.id_unit_measure =
                                                           get_vital_sign_info(i_lang,
                                                                               i_prof,
                                                                               vsr.id_vital_sign,
                                                                               vsr.id_unit_measure,
                                                                               vsr.value,
                                                                               pk_sev_scores_constant.g_vital_sign_info_um))),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT pk_vital_sign.get_vs_alias(i_lang,
                                                                               i_id_patient,
                                                                               vsd2.code_vital_sign_desc)
                                               FROM vital_sign_desc vsd2
                                              WHERE vsd2.id_vital_sign_desc = vsr.id_vital_sign_desc),
                                            NULL))) registered_value_desc,
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              (SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                                 FROM unit_measure um
                                WHERE um.id_unit_measure = get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                    mpt.id_param_task,
                                                                                    NULL),
                                                                             i_prof.institution,
                                                                             i_prof.software))) unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_apache2)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_apache2),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                        pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                        mpt.id_param_task,
                                                        NULL),
                                                 i_prof.institution,
                                                 i_prof.software)
                          FROM dual) id_unit_measure,
                       (SELECT pk_vital_sign_core.get_vsum_val_min(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_min,
                       (SELECT pk_vital_sign_core.get_vsum_val_max(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_max,
                       (SELECT pk_vital_sign_core.get_vsum_format_num(i_lang            => i_lang,
                                                                      i_prof            => i_prof,
                                                                      i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                  mpt.id_param_task,
                                                                                                  NULL),
                                                                      i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                            mpt.id_param_task,
                                                                                                                            NULL),
                                                                                                                     i_prof.institution,
                                                                                                                     i_prof.software)
                                                                                              FROM dual),
                                                                      i_id_institution  => i_prof.institution,
                                                                      i_id_software     => i_prof.software,
                                                                      i_age             => l_age)
                          FROM dual) format_num,
                       vsr.id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, vital_sign_read vsr, epis_mtos_param emp, mtos_param_task mpt
                 WHERE mse.id_mtos_score IN
                       (SELECT mtr.id_mtos_score_rel
                          FROM mtos_score_relation mtr
                         WHERE mtr.id_mtos_score = pk_sev_scores_constant.g_id_score_apache2)
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND vsr.id_episode(+) = i_episode
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                UNION
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              l_gcs_total,
                              'PAT_AGE',
                              i_pat_age_years,
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     emp.registered_value,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   get_vital_sign_info(i_lang,
                                                                       i_prof,
                                                                       decode(mpt.flg_param_task_type,
                                                                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                              mpt.id_param_task,
                                                                              NULL),
                                                                       get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                mpt.id_param_task,
                                                                                                NULL),
                                                                                         i_prof.institution,
                                                                                         i_prof.software),
                                                                       emp.registered_value,
                                                                       pk_sev_scores_constant.g_vital_sign_info_value),
                                                   get_vital_sign_info(i_lang,
                                                                       i_prof,
                                                                       vsr.id_vital_sign,
                                                                       vsr.id_unit_measure,
                                                                       vsr.value,
                                                                       pk_sev_scores_constant.g_vital_sign_info_value)),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            vsr.id_vital_sign_desc,
                                            NULL))) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              pk_utils.to_str(l_gcs_total, i_prof),
                              'PAT_AGE',
                              pk_utils.to_str(i_pat_age_years, i_prof),
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                               FROM mtos_param_value mpe
                                              WHERE mpe.id_mtos_param_value = emp.registered_value),
                                            to_char(emp.registered_value)),
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   decode(get_vital_sign_info(i_lang,
                                                                              i_prof,
                                                                              decode(mpt.flg_param_task_type,
                                                                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                     mpt.id_param_task,
                                                                                     NULL),
                                                                              get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                       pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                       mpt.id_param_task,
                                                                                                       NULL),
                                                                                                i_prof.institution,
                                                                                                i_prof.software),
                                                                              emp.registered_value,
                                                                              pk_sev_scores_constant.g_vital_sign_info_value),
                                                          NULL,
                                                          NULL,
                                                          ((SELECT pk_utils.to_str(get_vital_sign_info(i_lang,
                                                                                                       i_prof,
                                                                                                       decode(mpt.flg_param_task_type,
                                                                                                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                              mpt.id_param_task,
                                                                                                              NULL),
                                                                                                       get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                                mpt.id_param_task,
                                                                                                                                NULL),
                                                                                                                         i_prof.institution,
                                                                                                                         i_prof.software),
                                                                                                       emp.registered_value,
                                                                                                       pk_sev_scores_constant.g_vital_sign_info_value),
                                                                                   i_prof) || ' ' ||
                                                                   pk_translation.get_translation(i_lang,
                                                                                                  um.code_unit_measure)
                                                              FROM unit_measure um
                                                             WHERE um.id_unit_measure =
                                                                   get_vital_sign_info(i_lang,
                                                                                       i_prof,
                                                                                       decode(mpt.flg_param_task_type,
                                                                                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                              mpt.id_param_task,
                                                                                              NULL),
                                                                                       get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                mpt.id_param_task,
                                                                                                                NULL),
                                                                                                         i_prof.institution,
                                                                                                         i_prof.software),
                                                                                       emp.registered_value,
                                                                                       pk_sev_scores_constant.g_vital_sign_info_um)))),
                                                   (SELECT pk_utils.to_str(get_vital_sign_info(i_lang,
                                                                                               i_prof,
                                                                                               vsr.id_vital_sign,
                                                                                               vsr.id_unit_measure,
                                                                                               vsr.value,
                                                                                               pk_sev_scores_constant.g_vital_sign_info_value),
                                                                           i_prof) || ' ' ||
                                                           pk_translation.get_translation(i_lang, um.code_unit_measure)
                                                      FROM unit_measure um
                                                     WHERE um.id_unit_measure =
                                                           get_vital_sign_info(i_lang,
                                                                               i_prof,
                                                                               vsr.id_vital_sign,
                                                                               vsr.id_unit_measure,
                                                                               vsr.value,
                                                                               pk_sev_scores_constant.g_vital_sign_info_um))),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT pk_vital_sign.get_vs_alias(i_lang,
                                                                               i_id_patient,
                                                                               vsd2.code_vital_sign_desc)
                                               FROM vital_sign_desc vsd2
                                              WHERE vsd2.id_vital_sign_desc = vsr.id_vital_sign_desc),
                                            NULL))) registered_value_desc,
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              (SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                                 FROM unit_measure um
                                WHERE um.id_unit_measure = get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                    mpt.id_param_task,
                                                                                    NULL),
                                                                             i_prof.institution,
                                                                             i_prof.software))) unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_apache2)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_apache2),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                        pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                        mpt.id_param_task,
                                                        NULL),
                                                 i_prof.institution,
                                                 i_prof.software)
                          FROM dual) id_unit_measure,
                       (SELECT pk_vital_sign_core.get_vsum_val_min(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_min,
                       (SELECT pk_vital_sign_core.get_vsum_val_max(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_max,
                       (SELECT pk_vital_sign_core.get_vsum_format_num(i_lang            => i_lang,
                                                                      i_prof            => i_prof,
                                                                      i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                  mpt.id_param_task,
                                                                                                  NULL),
                                                                      i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                            mpt.id_param_task,
                                                                                                                            NULL),
                                                                                                                     i_prof.institution,
                                                                                                                     i_prof.software)
                                                                                              FROM dual),
                                                                      i_id_institution  => i_prof.institution,
                                                                      i_id_software     => i_prof.software,
                                                                      i_age             => l_age)
                          FROM dual) format_num,
                       vsr.id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, vital_sign_read vsr, epis_mtos_param emp, mtos_param_task mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_apache2
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND vsr.id_episode(+) = i_episode
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                 ORDER BY score_rank, param_rank;
        ELSE
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              l_gcs_total,
                              'PAT_AGE',
                              i_pat_age_years,
                              'G_EYES',
                              l_gcs_eyes,
                              'G_VERBAL',
                              l_gcs_verbal,
                              'G_MOTOR',
                              l_gcs_motor,
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   NULL,
                                                   get_vital_sign_info(i_lang,
                                                                       i_prof,
                                                                       vsr.id_vital_sign,
                                                                       vsr.id_unit_measure,
                                                                       vsr.value,
                                                                       pk_sev_scores_constant.g_vital_sign_info_value)),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            vsr.id_vital_sign_desc,
                                            NULL))) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              pk_utils.to_str(l_gcs_total, i_prof),
                              'PAT_AGE',
                              pk_utils.to_str(i_pat_age_years, i_prof),
                              'G_EYES',
                              l_gcs_eyes_desc,
                              'G_VERBAL',
                              l_gcs_verbal_desc,
                              'G_MOTOR',
                              l_gcs_motor_desc,
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   NULL,
                                                   (SELECT pk_utils.to_str(get_vital_sign_info(i_lang,
                                                                                               i_prof,
                                                                                               vsr.id_vital_sign,
                                                                                               vsr.id_unit_measure,
                                                                                               vsr.value,
                                                                                               pk_sev_scores_constant.g_vital_sign_info_value),
                                                                           i_prof) || ' ' ||
                                                           pk_translation.get_translation(i_lang, um.code_unit_measure)
                                                      FROM unit_measure um
                                                     WHERE um.id_unit_measure =
                                                           get_vital_sign_info(i_lang,
                                                                               i_prof,
                                                                               vsr.id_vital_sign,
                                                                               vsr.id_unit_measure,
                                                                               vsr.value,
                                                                               pk_sev_scores_constant.g_vital_sign_info_um))),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT pk_vital_sign.get_vs_alias(i_lang,
                                                                               i_id_patient,
                                                                               vsd2.code_vital_sign_desc)
                                               FROM vital_sign_desc vsd2
                                              WHERE vsd2.id_vital_sign_desc = vsr.id_vital_sign_desc),
                                            NULL))) registered_value_desc,
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              (SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                                 FROM unit_measure um
                                WHERE um.id_unit_measure = get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                    mpt.id_param_task,
                                                                                    NULL),
                                                                             i_prof.institution,
                                                                             i_prof.software))) unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_apache2)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_apache2),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                        pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                        mpt.id_param_task,
                                                        NULL),
                                                 i_prof.institution,
                                                 i_prof.software)
                          FROM dual) id_unit_measure,
                       (SELECT pk_vital_sign_core.get_vsum_val_min(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_min,
                       (SELECT pk_vital_sign_core.get_vsum_val_max(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_max,
                       (SELECT pk_vital_sign_core.get_vsum_format_num(i_lang            => i_lang,
                                                                      i_prof            => i_prof,
                                                                      i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                  mpt.id_param_task,
                                                                                                  NULL),
                                                                      i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                            mpt.id_param_task,
                                                                                                                            NULL),
                                                                                                                     i_prof.institution,
                                                                                                                     i_prof.software)
                                                                                              FROM dual),
                                                                      i_id_institution  => i_prof.institution,
                                                                      i_id_software     => i_prof.software,
                                                                      i_age             => l_age)
                          FROM dual) format_num,
                       vsr.id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, vital_sign_read vsr, mtos_param_task mpt
                 WHERE mse.id_mtos_score IN
                       (SELECT mtr.id_mtos_score_rel
                          FROM mtos_score_relation mtr
                         WHERE mtr.id_mtos_score = pk_sev_scores_constant.g_id_score_apache2)
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND vsr.id_episode(+) = i_episode
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                UNION
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              l_gcs_total,
                              'PAT_AGE',
                              i_pat_age_years,
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   NULL,
                                                   get_vital_sign_info(i_lang,
                                                                       i_prof,
                                                                       vsr.id_vital_sign,
                                                                       vsr.id_unit_measure,
                                                                       vsr.value,
                                                                       pk_sev_scores_constant.g_vital_sign_info_value)),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            vsr.id_vital_sign_desc,
                                            NULL))) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name,
                              'G_TOTAL',
                              pk_utils.to_str(l_gcs_total, i_prof),
                              'PAT_AGE',
                              pk_utils.to_str(i_pat_age_years, i_prof),
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   NULL,
                                                   (SELECT pk_utils.to_str(get_vital_sign_info(i_lang,
                                                                                               i_prof,
                                                                                               vsr.id_vital_sign,
                                                                                               vsr.id_unit_measure,
                                                                                               vsr.value,
                                                                                               pk_sev_scores_constant.g_vital_sign_info_value),
                                                                           i_prof) || ' ' ||
                                                           pk_translation.get_translation(i_lang, um.code_unit_measure)
                                                      FROM unit_measure um
                                                     WHERE um.id_unit_measure =
                                                           get_vital_sign_info(i_lang,
                                                                               i_prof,
                                                                               vsr.id_vital_sign,
                                                                               vsr.id_unit_measure,
                                                                               vsr.value,
                                                                               pk_sev_scores_constant.g_vital_sign_info_um))),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT pk_vital_sign.get_vs_alias(i_lang,
                                                                               i_id_patient,
                                                                               vsd2.code_vital_sign_desc)
                                               FROM vital_sign_desc vsd2
                                              WHERE vsd2.id_vital_sign_desc = vsr.id_vital_sign_desc),
                                            NULL))) registered_value_desc,
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              (SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                                 FROM unit_measure um
                                WHERE um.id_unit_measure = get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                    mpt.id_param_task,
                                                                                    NULL),
                                                                             i_prof.institution,
                                                                             i_prof.software))) unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_apache2)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_apache2),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                        pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                        mpt.id_param_task,
                                                        NULL),
                                                 i_prof.institution,
                                                 i_prof.software)
                          FROM dual) id_unit_measure,
                       (SELECT pk_vital_sign_core.get_vsum_val_min(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_min,
                       (SELECT pk_vital_sign_core.get_vsum_val_max(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_max,
                       (SELECT pk_vital_sign_core.get_vsum_format_num(i_lang            => i_lang,
                                                                      i_prof            => i_prof,
                                                                      i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                  mpt.id_param_task,
                                                                                                  NULL),
                                                                      i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                            mpt.id_param_task,
                                                                                                                            NULL),
                                                                                                                     i_prof.institution,
                                                                                                                     i_prof.software)
                                                                                              FROM dual),
                                                                      i_id_institution  => i_prof.institution,
                                                                      i_id_software     => i_prof.software,
                                                                      i_age             => l_age)
                          FROM dual) format_num,
                       vsr.id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, vital_sign_read vsr, mtos_param_task mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_apache2
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND vsr.id_episode(+) = i_episode
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                 ORDER BY score_rank, param_rank;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_apache2_param_list;

    /********************************************************************************************
    * Shows all parameters for APACHE III score.
    * Returns the parameters properties and current value.
    *
    * @param i_lang                   Preferred language ID for this professional 
    * @param i_prof                   Object (professional ID, institution ID, software ID)
    * @param i_id_patient             Patient ID
    * @param i_episode                Episode ID 
    * @param i_pat_age_years          Patient age
    * @param i_epis_mtos_score        Severity score evaluation ID
    * @param o_list                   Parameter list
    * @param o_error                  Error
    *
    * @return                         true or false on success or error
    *
    * @author                         Tércio Soares
    * @version                        2.6.0.4
    * @since                          2010/11/02
    **********************************************************************************************/
    FUNCTION get_apache3_param_list
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_patient      IN patient.id_patient%TYPE,
        i_episode         IN episode.id_episode%TYPE,
        i_pat_age_years   IN NUMBER,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_APACHE3_PARAM_LIST';
        l_internal_error EXCEPTION;
        l_age vital_sign_unit_measure.age_min%TYPE;
    BEGIN
    
        l_age := pk_patient.get_pat_age(i_lang, NULL, NULL, NULL, 'MONTHS', i_id_patient);
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       nvl(msg.id_mtos_score_group, mse.id_mtos_score) id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name,
                              'PAT_AGE',
                              i_pat_age_years,
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     emp.registered_value,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   get_vital_sign_info(i_lang,
                                                                       i_prof,
                                                                       decode(mpt.flg_param_task_type,
                                                                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                              mpt.id_param_task,
                                                                              NULL),
                                                                       get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                mpt.id_param_task,
                                                                                                NULL),
                                                                                         i_prof.institution,
                                                                                         i_prof.software),
                                                                       emp.registered_value,
                                                                       pk_sev_scores_constant.g_vital_sign_info_value),
                                                   get_vital_sign_info(i_lang,
                                                                       i_prof,
                                                                       vsr.id_vital_sign,
                                                                       vsr.id_unit_measure,
                                                                       vsr.value,
                                                                       pk_sev_scores_constant.g_vital_sign_info_value)),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            vsr.id_vital_sign_desc,
                                            NULL))) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name,
                              'PAT_AGE',
                              pk_utils.to_str(i_pat_age_years, i_prof),
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                               FROM mtos_param_value mpe
                                              WHERE mpe.id_mtos_param_value = emp.registered_value),
                                            to_char(emp.registered_value)),
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   decode(get_vital_sign_info(i_lang,
                                                                              i_prof,
                                                                              decode(mpt.flg_param_task_type,
                                                                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                     mpt.id_param_task,
                                                                                     NULL),
                                                                              get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                       pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                       mpt.id_param_task,
                                                                                                       NULL),
                                                                                                i_prof.institution,
                                                                                                i_prof.software),
                                                                              emp.registered_value,
                                                                              pk_sev_scores_constant.g_vital_sign_info_value),
                                                          NULL,
                                                          NULL,
                                                          (pk_utils.to_str(get_vital_sign_info(i_lang,
                                                                                               i_prof,
                                                                                               decode(mpt.flg_param_task_type,
                                                                                                      pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                      mpt.id_param_task,
                                                                                                      NULL),
                                                                                               get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                        pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                        mpt.id_param_task,
                                                                                                                        NULL),
                                                                                                                 i_prof.institution,
                                                                                                                 i_prof.software),
                                                                                               emp.registered_value,
                                                                                               pk_sev_scores_constant.g_vital_sign_info_value),
                                                                           i_prof) ||
                                                          (SELECT ' ' ||
                                                                   pk_translation.get_translation(i_lang,
                                                                                                  um.code_unit_measure)
                                                              FROM unit_measure um
                                                             WHERE um.id_unit_measure =
                                                                   get_vital_sign_info(i_lang,
                                                                                       i_prof,
                                                                                       decode(mpt.flg_param_task_type,
                                                                                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                              mpt.id_param_task,
                                                                                              NULL),
                                                                                       get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                mpt.id_param_task,
                                                                                                                NULL),
                                                                                                         i_prof.institution,
                                                                                                         i_prof.software),
                                                                                       emp.registered_value,
                                                                                       pk_sev_scores_constant.g_vital_sign_info_um)))),
                                                   (SELECT pk_utils.to_str(get_vital_sign_info(i_lang,
                                                                                               i_prof,
                                                                                               vsr.id_vital_sign,
                                                                                               vsr.id_unit_measure,
                                                                                               vsr.value,
                                                                                               pk_sev_scores_constant.g_vital_sign_info_value),
                                                                           i_prof) || ' ' ||
                                                           pk_translation.get_translation(i_lang, um.code_unit_measure)
                                                      FROM unit_measure um
                                                     WHERE um.id_unit_measure =
                                                           get_vital_sign_info(i_lang,
                                                                               i_prof,
                                                                               vsr.id_vital_sign,
                                                                               vsr.id_unit_measure,
                                                                               vsr.value,
                                                                               pk_sev_scores_constant.g_vital_sign_info_um))),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT pk_vital_sign.get_vs_alias(i_lang,
                                                                               i_id_patient,
                                                                               vsd2.code_vital_sign_desc)
                                               FROM vital_sign_desc vsd2
                                              WHERE vsd2.id_vital_sign_desc = vsr.id_vital_sign_desc),
                                            NULL))) registered_value_desc,
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              (SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                                 FROM unit_measure um
                                WHERE um.id_unit_measure = get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                    mpt.id_param_task,
                                                                                    NULL),
                                                                             i_prof.institution,
                                                                             i_prof.software))) unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_apache3)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_apache3),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                        pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                        mpt.id_param_task,
                                                        NULL),
                                                 i_prof.institution,
                                                 i_prof.software)
                          FROM dual) id_unit_measure,
                       (SELECT pk_vital_sign_core.get_vsum_val_min(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_min,
                       (SELECT pk_vital_sign_core.get_vsum_val_max(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_max,
                       (SELECT pk_vital_sign_core.get_vsum_format_num(i_lang            => i_lang,
                                                                      i_prof            => i_prof,
                                                                      i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                  mpt.id_param_task,
                                                                                                  NULL),
                                                                      i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                            mpt.id_param_task,
                                                                                                                            NULL),
                                                                                                                     i_prof.institution,
                                                                                                                     i_prof.software)
                                                                                              FROM dual),
                                                                      i_id_institution  => i_prof.institution,
                                                                      i_id_software     => i_prof.software,
                                                                      i_age             => l_age)
                          FROM dual) format_num,
                       vsr.id_vital_sign_read
                  FROM mtos_score       mse,
                       mtos_param       mpm,
                       vital_sign_read  vsr,
                       epis_mtos_param  emp,
                       mtos_score_group msg,
                       mtos_param_task  mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_apache3
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND mpm.id_mtos_score_group = msg.id_mtos_score_group(+)
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND vsr.id_episode(+) = i_episode
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                 ORDER BY score_rank, param_rank;
        ELSE
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       nvl(msg.id_mtos_score_group, mse.id_mtos_score) id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name,
                              'PAT_AGE',
                              i_pat_age_years,
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   NULL,
                                                   get_vital_sign_info(i_lang,
                                                                       i_prof,
                                                                       vsr.id_vital_sign,
                                                                       vsr.id_unit_measure,
                                                                       vsr.value,
                                                                       pk_sev_scores_constant.g_vital_sign_info_value)),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            vsr.id_vital_sign_desc,
                                            NULL))) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name,
                              'PAT_AGE',
                              pk_utils.to_str(i_pat_age_years, i_prof),
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   NULL,
                                                   (SELECT pk_utils.to_str(get_vital_sign_info(i_lang,
                                                                                               i_prof,
                                                                                               vsr.id_vital_sign,
                                                                                               vsr.id_unit_measure,
                                                                                               vsr.value,
                                                                                               pk_sev_scores_constant.g_vital_sign_info_value),
                                                                           i_prof) || ' ' ||
                                                           pk_translation.get_translation(i_lang, um.code_unit_measure)
                                                      FROM unit_measure um
                                                     WHERE um.id_unit_measure =
                                                           get_vital_sign_info(i_lang,
                                                                               i_prof,
                                                                               vsr.id_vital_sign,
                                                                               vsr.id_unit_measure,
                                                                               vsr.value,
                                                                               pk_sev_scores_constant.g_vital_sign_info_um))),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT pk_vital_sign.get_vs_alias(i_lang,
                                                                               i_id_patient,
                                                                               vsd2.code_vital_sign_desc)
                                               FROM vital_sign_desc vsd2
                                              WHERE vsd2.id_vital_sign_desc = vsr.id_vital_sign_desc),
                                            NULL))) registered_value_desc,
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              (SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                                 FROM unit_measure um
                                WHERE um.id_unit_measure = get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                    mpt.id_param_task,
                                                                                    NULL),
                                                                             i_prof.institution,
                                                                             i_prof.software))) unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_apache3)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_apache3),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                        pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                        mpt.id_param_task,
                                                        NULL),
                                                 i_prof.institution,
                                                 i_prof.software)
                          FROM dual) id_unit_measure,
                       (SELECT pk_vital_sign_core.get_vsum_val_min(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_min,
                       (SELECT pk_vital_sign_core.get_vsum_val_max(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_max,
                       (SELECT pk_vital_sign_core.get_vsum_format_num(i_lang            => i_lang,
                                                                      i_prof            => i_prof,
                                                                      i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                  mpt.id_param_task,
                                                                                                  NULL),
                                                                      i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                            mpt.id_param_task,
                                                                                                                            NULL),
                                                                                                                     i_prof.institution,
                                                                                                                     i_prof.software)
                                                                                              FROM dual),
                                                                      i_id_institution  => i_prof.institution,
                                                                      i_id_software     => i_prof.software,
                                                                      i_age             => l_age)
                          FROM dual) format_num,
                       vsr.id_vital_sign_read
                  FROM mtos_score mse, mtos_param mpm, vital_sign_read vsr, mtos_score_group msg, mtos_param_task mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_apache3
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND mpm.id_mtos_score_group = msg.id_mtos_score_group(+)
                   AND vsr.id_episode(+) = i_episode
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                 ORDER BY score_rank, param_rank;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_apache3_param_list;

    FUNCTION get_si_it_is_param_list
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_patient      IN patient.id_patient%TYPE,
        i_episode         IN episode.id_episode%TYPE,
        i_pat_age_years   IN NUMBER,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_SI_IT_IS_PARAM_LIST';
        l_internal_error EXCEPTION;
        l_age vital_sign_unit_measure.age_min%TYPE;
    BEGIN
    
        l_age := pk_patient.get_pat_age(i_lang, NULL, NULL, NULL, 'MONTHS', i_id_patient);
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT t.id_mtos_score,
                       t.id_group,
                       t.flg_score_type,
                       t.score_desc,
                       t.id_mtos_param,
                       t.param_desc,
                       t.flg_fill_type,
                       t.score_rank,
                       t.param_rank,
                       t.internal_name,
                       (CAST(MULTISET (SELECT e.registered_value
                                FROM epis_mtos_param e
                                JOIN mtos_param mp
                                  ON mp.id_mtos_param = e.id_mtos_param
                               WHERE e.id_epis_mtos_score = t.id_epis_mtos_score
                                 AND e.id_mtos_param = t.id_mtos_param
                               ORDER BY mp.rank ASC) AS table_number)) registered_value,
                       
                       (CAST(MULTISET (SELECT CASE
                                         WHEN t.flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_t THEN
                                          (SELECT to_char(e.registered_value)
                                             FROM epis_mtos_param e
                                             JOIN mtos_param mp
                                               ON mp.id_mtos_param = e.id_mtos_param
                                            WHERE e.id_epis_mtos_score = t.id_epis_mtos_score
                                              AND e.id_mtos_param = t.id_mtos_param)
                                         ELSE
                                          pk_translation.get_translation(i_lang, mpe_o.code_mtos_param_value)
                                     END
                                FROM mtos_param_value mpe_o
                                JOIN mtos_param mp
                                  ON mp.id_mtos_param = mpe_o.id_mtos_param
                               WHERE mpe_o.id_mtos_param_value IN
                                     (SELECT e.registered_value
                                        FROM epis_mtos_param e
                                        JOIN mtos_param mp
                                          ON mp.id_mtos_param = e.id_mtos_param
                                       WHERE e.id_epis_mtos_score = t.id_epis_mtos_score
                                         AND e.id_mtos_param = t.id_mtos_param)
                               ORDER BY mpe_o.rank ASC) AS table_varchar)) registered_value_desc,
                       t.unit_measure_desc,
                       t.relation,
                       t.related_scores,
                       t.id_vital_sign,
                       t.id_unit_measure,
                       t.val_min,
                       t.val_max,
                       t.format_num,
                       t.id_vital_sign_read
                  FROM (SELECT mse.id_mtos_score,
                                nvl(msg.id_mtos_score_group, mse.id_mtos_score) id_group,
                                mse.flg_score_type,
                                (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                                        pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                                   FROM dual) score_desc,
                                -- Parameters
                                mpm.id_mtos_param,
                                pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                                mpm.flg_fill_type,
                                mse.rank score_rank,
                                mpm.rank param_rank,
                                mpm.internal_name,
                                NULL AS unit_measure_desc,
                                -- RELATION
                                mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                                -- List with the MTOS_SCORE ID's. 
                               -- Used by Flash to find all the blocks where the current parameter must be copied.
                               decode(mpm.id_mtos_relation,
                                      NULL,
                                      NULL,
                                      pk_utils.concatenate_list(CURSOR
                                                                (SELECT mpm2.id_mtos_score
                                                                   FROM mtos_param mpm2
                                                                  WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                                    AND mpm2.id_mtos_score IN
                                                                        (SELECT msr.id_mtos_score_rel
                                                                           FROM mtos_score_relation msr
                                                                          WHERE msr.id_mtos_score =
                                                                                pk_sev_scores_constant.g_id_score_si_it_is)
                                                                 UNION
                                                                 SELECT mpm2.id_mtos_score
                                                                   FROM mtos_param mpm2
                                                                  WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                                    AND mpm2.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_si_it_is),
                                                                '|')) related_scores,
                               NULL AS id_vital_sign,
                               NULL AS id_unit_measure,
                               NULL val_min,
                               NULL AS val_max,
                               NULL AS format_num,
                               vsr.id_vital_sign_read,
                               emp.id_epis_mtos_score
                          FROM mtos_score       mse,
                               mtos_param       mpm,
                               vital_sign_read  vsr,
                               epis_mtos_param  emp,
                               mtos_score_group msg,
                               mtos_param_task  mpt
                         WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_si_it_is
                           AND mse.id_mtos_score = mpm.id_mtos_score
                           AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                           AND mpt.flg_available(+) = pk_alert_constant.g_yes
                           AND decode(mpt.flg_param_task_type,
                                      pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                      mpt.id_param_task,
                                      NULL) = vsr.id_vital_sign(+)
                           AND mpm.id_mtos_score_group = msg.id_mtos_score_group(+)
                           AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                           AND emp.id_mtos_param(+) = mpm.id_mtos_param
                           AND vsr.id_episode(+) = i_episode
                           AND (decode(mpt.flg_param_task_type,
                                       pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                       mpt.id_param_task,
                                       NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                               (vsr.dt_vital_sign_read_tstz IN
                               (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                                    FROM vital_sign_read vsr2
                                   WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                     mpt.id_param_task,
                                                                     NULL)
                                     AND vsr2.flg_state = pk_alert_constant.g_active
                                     AND vsr2.id_episode = i_episode
                                     AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                           AND mse.flg_available = pk_alert_constant.g_yes
                           AND mpm.flg_available = pk_alert_constant.g_yes
                           AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                               vsr.id_vital_sign_read IS NULL)) t
                 GROUP BY t.id_mtos_score,
                          t.id_group,
                          t.flg_score_type,
                          t.score_desc,
                          t.id_mtos_param,
                          t.param_desc,
                          t.flg_fill_type,
                          t.score_rank,
                          t.param_rank,
                          t.internal_name,
                          t.unit_measure_desc,
                          t.relation,
                          t.related_scores,
                          t.id_vital_sign,
                          t.id_unit_measure,
                          t.val_min,
                          t.val_max,
                          t.format_num,
                          t.id_vital_sign_read,
                          t.id_epis_mtos_score
                 ORDER BY t.score_rank, t.param_rank;
        ELSE
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       nvl(msg.id_mtos_score_group, mse.id_mtos_score) id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name,
                              'PAT_AGE',
                              i_pat_age_years,
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   NULL,
                                                   get_vital_sign_info(i_lang,
                                                                       i_prof,
                                                                       vsr.id_vital_sign,
                                                                       vsr.id_unit_measure,
                                                                       vsr.value,
                                                                       pk_sev_scores_constant.g_vital_sign_info_value)),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            vsr.id_vital_sign_desc,
                                            pk_sev_scores_constant.g_flg_fill_type_s,
                                            vsr.id_vital_sign_desc,
                                            NULL))) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name,
                              'PAT_AGE',
                              pk_utils.to_str(i_pat_age_years, i_prof),
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   NULL,
                                                   (SELECT pk_utils.to_str(get_vital_sign_info(i_lang,
                                                                                               i_prof,
                                                                                               vsr.id_vital_sign,
                                                                                               vsr.id_unit_measure,
                                                                                               vsr.value,
                                                                                               pk_sev_scores_constant.g_vital_sign_info_value),
                                                                           i_prof) || ' ' ||
                                                           pk_translation.get_translation(i_lang, um.code_unit_measure)
                                                      FROM unit_measure um
                                                     WHERE um.id_unit_measure =
                                                           get_vital_sign_info(i_lang,
                                                                               i_prof,
                                                                               vsr.id_vital_sign,
                                                                               vsr.id_unit_measure,
                                                                               vsr.value,
                                                                               pk_sev_scores_constant.g_vital_sign_info_um))),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT pk_vital_sign.get_vs_alias(i_lang,
                                                                               i_id_patient,
                                                                               vsd2.code_vital_sign_desc)
                                               FROM vital_sign_desc vsd2
                                              WHERE vsd2.id_vital_sign_desc = vsr.id_vital_sign_desc),
                                            pk_sev_scores_constant.g_flg_fill_type_s,
                                            (SELECT pk_vital_sign.get_vs_alias(i_lang,
                                                                               i_id_patient,
                                                                               vsd2.code_vital_sign_desc)
                                               FROM vital_sign_desc vsd2
                                              WHERE vsd2.id_vital_sign_desc = vsr.id_vital_sign_desc),
                                            NULL))) registered_value_desc,
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              (SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                                 FROM unit_measure um
                                WHERE um.id_unit_measure = get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                    mpt.id_param_task,
                                                                                    NULL),
                                                                             i_prof.institution,
                                                                             i_prof.software))) unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_si_it_is)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_si_it_is),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                        pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                        mpt.id_param_task,
                                                        NULL),
                                                 i_prof.institution,
                                                 i_prof.software)
                          FROM dual) id_unit_measure,
                       (SELECT pk_vital_sign_core.get_vsum_val_min(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_min,
                       (SELECT pk_vital_sign_core.get_vsum_val_max(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_max,
                       (SELECT pk_vital_sign_core.get_vsum_format_num(i_lang            => i_lang,
                                                                      i_prof            => i_prof,
                                                                      i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                  mpt.id_param_task,
                                                                                                  NULL),
                                                                      i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                            mpt.id_param_task,
                                                                                                                            NULL),
                                                                                                                     i_prof.institution,
                                                                                                                     i_prof.software)
                                                                                              FROM dual),
                                                                      i_id_institution  => i_prof.institution,
                                                                      i_id_software     => i_prof.software,
                                                                      i_age             => l_age)
                          FROM dual) format_num,
                       vsr.id_vital_sign_read
                  FROM mtos_score mse, mtos_param mpm, vital_sign_read vsr, mtos_score_group msg, mtos_param_task mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_si_it_is
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND mpm.id_mtos_score_group = msg.id_mtos_score_group(+)
                   AND vsr.id_episode(+) = i_episode
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                 ORDER BY score_rank, param_rank;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_si_it_is_param_list;

    FUNCTION get_prism_param_list
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_patient      IN patient.id_patient%TYPE,
        i_episode         IN episode.id_episode%TYPE,
        i_pat_age_years   IN NUMBER,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_PRISM_PARAM_LIST';
        l_internal_error EXCEPTION;
        l_age vital_sign_unit_measure.age_min%TYPE;
    
    BEGIN
    
        l_age := pk_patient.get_pat_age(i_lang, NULL, NULL, NULL, 'MONTHS', i_id_patient);
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
            --FOR EDITION
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       nvl(msg.id_mtos_score_group, mse.id_mtos_score) id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.internal_name,
                              'PAT_AGE',
                              i_pat_age_years,
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     emp.registered_value,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   get_vital_sign_info(i_lang,
                                                                       i_prof,
                                                                       decode(mpt.flg_param_task_type,
                                                                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                              mpt.id_param_task,
                                                                              NULL),
                                                                       get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                mpt.id_param_task,
                                                                                                NULL),
                                                                                         i_prof.institution,
                                                                                         i_prof.software),
                                                                       emp.registered_value,
                                                                       pk_sev_scores_constant.g_vital_sign_info_value),
                                                   get_vital_sign_info(i_lang,
                                                                       i_prof,
                                                                       vsr.id_vital_sign,
                                                                       vsr.id_unit_measure,
                                                                       vsr.value,
                                                                       pk_sev_scores_constant.g_vital_sign_info_value)),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            vsr.id_vital_sign_desc,
                                            NULL))) registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.internal_name,
                              'PAT_AGE',
                              pk_utils.to_str(i_pat_age_years, i_prof),
                              decode(decode(mpt.flg_param_task_type,
                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                            mpt.id_param_task,
                                            NULL),
                                     NULL,
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                               FROM mtos_param_value mpe
                                              WHERE mpe.id_mtos_param_value = emp.registered_value),
                                            pk_sev_scores_constant.g_flg_fill_type_l,
                                            (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                               FROM mtos_param_value mpe
                                              WHERE mpe.id_mtos_param_value = emp.registered_value),
                                            to_char(emp.registered_value)),
                                     decode(mpm.flg_fill_type,
                                            pk_sev_scores_constant.g_flg_fill_type_n,
                                            decode(vsr.value,
                                                   NULL,
                                                   decode(get_vital_sign_info(i_lang,
                                                                              i_prof,
                                                                              decode(mpt.flg_param_task_type,
                                                                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                     mpt.id_param_task,
                                                                                     NULL),
                                                                              get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                       pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                       mpt.id_param_task,
                                                                                                       NULL),
                                                                                                i_prof.institution,
                                                                                                i_prof.software),
                                                                              emp.registered_value,
                                                                              pk_sev_scores_constant.g_vital_sign_info_value),
                                                          NULL,
                                                          NULL,
                                                          (pk_utils.to_str(get_vital_sign_info(i_lang,
                                                                                               i_prof,
                                                                                               decode(mpt.flg_param_task_type,
                                                                                                      pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                      mpt.id_param_task,
                                                                                                      NULL),
                                                                                               get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                        pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                        mpt.id_param_task,
                                                                                                                        NULL),
                                                                                                                 i_prof.institution,
                                                                                                                 i_prof.software),
                                                                                               emp.registered_value,
                                                                                               pk_sev_scores_constant.g_vital_sign_info_value),
                                                                           i_prof) ||
                                                          (SELECT ' ' ||
                                                                   pk_translation.get_translation(i_lang,
                                                                                                  um.code_unit_measure)
                                                              FROM unit_measure um
                                                             WHERE um.id_unit_measure =
                                                                   get_vital_sign_info(i_lang,
                                                                                       i_prof,
                                                                                       decode(mpt.flg_param_task_type,
                                                                                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                              mpt.id_param_task,
                                                                                              NULL),
                                                                                       get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                mpt.id_param_task,
                                                                                                                NULL),
                                                                                                         i_prof.institution,
                                                                                                         i_prof.software),
                                                                                       emp.registered_value,
                                                                                       pk_sev_scores_constant.g_vital_sign_info_um)))),
                                                   (SELECT pk_utils.to_str(get_vital_sign_info(i_lang,
                                                                                               i_prof,
                                                                                               vsr.id_vital_sign,
                                                                                               vsr.id_unit_measure,
                                                                                               vsr.value,
                                                                                               pk_sev_scores_constant.g_vital_sign_info_value),
                                                                           i_prof) || ' ' ||
                                                           pk_translation.get_translation(i_lang, um.code_unit_measure)
                                                      FROM unit_measure um
                                                     WHERE um.id_unit_measure =
                                                           get_vital_sign_info(i_lang,
                                                                               i_prof,
                                                                               vsr.id_vital_sign,
                                                                               vsr.id_unit_measure,
                                                                               vsr.value,
                                                                               pk_sev_scores_constant.g_vital_sign_info_um))),
                                            pk_sev_scores_constant.g_flg_fill_type_m,
                                            (SELECT pk_vital_sign.get_vs_alias(i_lang,
                                                                               i_id_patient,
                                                                               vsd2.code_vital_sign_desc)
                                               FROM vital_sign_desc vsd2
                                              WHERE vsd2.id_vital_sign_desc = vsr.id_vital_sign_desc),
                                            NULL))) registered_value_desc,
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              (SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                                 FROM unit_measure um
                                WHERE um.id_unit_measure = get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                    mpt.id_param_task,
                                                                                    NULL),
                                                                             i_prof.institution,
                                                                             i_prof.software))) unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score = 46)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score = 46),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                        pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                        mpt.id_param_task,
                                                        NULL),
                                                 i_prof.institution,
                                                 i_prof.software)
                          FROM dual) id_unit_measure,
                       (SELECT pk_vital_sign_core.get_vsum_val_min(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_min,
                       (SELECT pk_vital_sign_core.get_vsum_val_max(i_lang            => i_lang,
                                                                   i_prof            => i_prof,
                                                                   i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                               mpt.id_param_task,
                                                                                               NULL),
                                                                   i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                         mpt.id_param_task,
                                                                                                                         NULL),
                                                                                                                  i_prof.institution,
                                                                                                                  i_prof.software)
                                                                                           FROM dual),
                                                                   i_id_institution  => i_prof.institution,
                                                                   i_id_software     => i_prof.software,
                                                                   i_age             => l_age)
                          FROM dual) val_max,
                       (SELECT pk_vital_sign_core.get_vsum_format_num(i_lang            => i_lang,
                                                                      i_prof            => i_prof,
                                                                      i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                  mpt.id_param_task,
                                                                                                  NULL),
                                                                      i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                            mpt.id_param_task,
                                                                                                                            NULL),
                                                                                                                     i_prof.institution,
                                                                                                                     i_prof.software)
                                                                                              FROM dual),
                                                                      i_id_institution  => i_prof.institution,
                                                                      i_id_software     => i_prof.software,
                                                                      i_age             => l_age)
                          FROM dual) format_num,
                       vsr.id_vital_sign_read
                  FROM mtos_score       mse,
                       mtos_param       mpm,
                       vital_sign_read  vsr,
                       epis_mtos_param  emp,
                       mtos_score_group msg,
                       mtos_param_task  mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_prism
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND mpm.id_mtos_score_group = msg.id_mtos_score_group(+)
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND vsr.id_episode(+) = i_episode
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                 ORDER BY score_rank, param_rank;
        ELSE
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            --FOR NEW RECORDS
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       nvl(msg.id_mtos_score_group, mse.id_mtos_score) id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       CASE
                            WHEN mpm.id_mtos_param = pk_sev_scores_constant.g_param_age THEN
                             CASE
                                 WHEN l_age < pk_sev_scores_constant.g_age_neonate THEN
                                  pk_sev_scores_constant.g_param_neonate
                                 WHEN l_age < pk_sev_scores_constant.g_age_infant THEN
                                  pk_sev_scores_constant.g_param_infant
                                 WHEN l_age < pk_sev_scores_constant.g_age_child THEN
                                  pk_sev_scores_constant.g_param_child
                                 ELSE
                                  pk_sev_scores_constant.g_param_adolescent
                             END
                            ELSE
                             decode(mpm.internal_name,
                                    'PAT_AGE',
                                    i_pat_age_years,
                                    decode(decode(mpt.flg_param_task_type,
                                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                  mpt.id_param_task,
                                                  NULL),
                                           NULL,
                                           NULL,
                                           decode(mpm.flg_fill_type,
                                                  pk_sev_scores_constant.g_flg_fill_type_n,
                                                  decode(vsr.value,
                                                         NULL,
                                                         NULL,
                                                         get_vital_sign_info(i_lang,
                                                                             i_prof,
                                                                             vsr.id_vital_sign,
                                                                             vsr.id_unit_measure,
                                                                             vsr.value,
                                                                             pk_sev_scores_constant.g_vital_sign_info_value)),
                                                  pk_sev_scores_constant.g_flg_fill_type_m,
                                                  vsr.id_vital_sign_desc,
                                                  NULL)))
                        END AS registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       CASE
                            WHEN mpm.id_mtos_param = pk_sev_scores_constant.g_param_age THEN
                             CASE
                                 WHEN l_age < pk_sev_scores_constant.g_age_neonate THEN
                                  pk_translation.get_translation(i_lang,
                                                                 'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                 pk_sev_scores_constant.g_param_neonate)
                                 WHEN l_age < pk_sev_scores_constant.g_age_infant THEN
                                  pk_translation.get_translation(i_lang,
                                                                 'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                 pk_sev_scores_constant.g_param_infant)
                                 WHEN l_age < pk_sev_scores_constant.g_age_child THEN
                                  pk_translation.get_translation(i_lang,
                                                                 'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                 pk_sev_scores_constant.g_param_child)
                                 ELSE
                                  pk_translation.get_translation(i_lang,
                                                                 'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                 pk_sev_scores_constant.g_param_adolescent)
                             END
                            ELSE
                             decode(mpm.internal_name,
                                    'PAT_AGE',
                                    pk_utils.to_str(i_pat_age_years, i_prof),
                                    decode(decode(mpt.flg_param_task_type,
                                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                  mpt.id_param_task,
                                                  NULL),
                                           NULL,
                                           NULL,
                                           decode(mpm.flg_fill_type,
                                                  pk_sev_scores_constant.g_flg_fill_type_n,
                                                  decode(vsr.value,
                                                         NULL,
                                                         NULL,
                                                         (SELECT pk_utils.to_str(get_vital_sign_info(i_lang,
                                                                                                     i_prof,
                                                                                                     vsr.id_vital_sign,
                                                                                                     vsr.id_unit_measure,
                                                                                                     vsr.value,
                                                                                                     pk_sev_scores_constant.g_vital_sign_info_value),
                                                                                 i_prof) || ' ' ||
                                                                 pk_translation.get_translation(i_lang, um.code_unit_measure)
                                                            FROM unit_measure um
                                                           WHERE um.id_unit_measure =
                                                                 get_vital_sign_info(i_lang,
                                                                                     i_prof,
                                                                                     vsr.id_vital_sign,
                                                                                     vsr.id_unit_measure,
                                                                                     vsr.value,
                                                                                     pk_sev_scores_constant.g_vital_sign_info_um))),
                                                  pk_sev_scores_constant.g_flg_fill_type_m,
                                                  (SELECT pk_vital_sign.get_vs_alias(i_lang,
                                                                                     i_id_patient,
                                                                                     vsd2.code_vital_sign_desc)
                                                     FROM vital_sign_desc vsd2
                                                    WHERE vsd2.id_vital_sign_desc = vsr.id_vital_sign_desc),
                                                  NULL)))
                        END AS registered_value_desc,
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              (SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                                 FROM unit_measure um
                                WHERE um.id_unit_measure = get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                    mpt.id_param_task,
                                                                                    NULL),
                                                                             i_prof.institution,
                                                                             i_prof.software))) unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_prism)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_prism),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       NULL                   AS id_unit_measure,
                       NULL                   AS val_min,
                       NULL                   AS val_max,
                       NULL                   AS format_num,
                       vsr.id_vital_sign_read
                  FROM mtos_score mse, mtos_param mpm, vital_sign_read vsr, mtos_score_group msg, mtos_param_task mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_prism
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) = vsr.id_vital_sign(+)
                   AND mpm.id_mtos_score_group = msg.id_mtos_score_group(+)
                   AND vsr.id_episode(+) = i_episode
                   AND (decode(mpt.flg_param_task_type,
                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                               mpt.id_param_task,
                               NULL) IS NULL OR vsr.id_vital_sign_read IS NULL OR
                       (vsr.dt_vital_sign_read_tstz IN
                       (SELECT MAX(vsr2.dt_vital_sign_read_tstz)
                            FROM vital_sign_read vsr2
                           WHERE vsr2.id_vital_sign = decode(mpt.flg_param_task_type,
                                                             pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                             mpt.id_param_task,
                                                             NULL)
                             AND vsr2.flg_state = pk_alert_constant.g_active
                             AND vsr2.id_episode = i_episode
                             AND pk_delivery.check_vs_read_from_fetus(vsr2.id_vital_sign_read) = 0)))
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND (pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0 OR
                       vsr.id_vital_sign_read IS NULL)
                 ORDER BY score_rank, param_rank;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_prism_param_list;

    FUNCTION get_sofa_tw_param_list
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_patient      IN patient.id_patient%TYPE,
        i_episode         IN episode.id_episode%TYPE,
        i_pat_age_years   IN NUMBER,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_APACHE3_PARAM_LIST';
        l_internal_error EXCEPTION;
        l_age vital_sign_unit_measure.age_min%TYPE;
    
    BEGIN
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
            --FOR EDITION
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       nvl(msg.id_mtos_score_group, mse.id_mtos_score) id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_fill_type_f,
                              NULL,
                              emp.registered_value) AS registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.flg_fill_type,
                              pk_sev_scores_constant.g_flg_fill_type_m,
                              (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                 FROM mtos_param_value mpe
                                WHERE mpe.id_mtos_param_value = emp.registered_value),
                              pk_sev_scores_constant.g_flg_fill_type_f,
                              to_char(emp.notes),
                              to_char(emp.registered_value)) AS registered_value_desc,
                       NULL AS unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_apache3)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_apache3),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       NULL              AS id_vital_sign,
                       NULL              AS id_unit_measure,
                       NULL              AS val_min,
                       NULL              AS val_max,
                       NULL              AS format_num,
                       NULL              AS id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, epis_mtos_param emp, mtos_score_group msg
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_sofa_tw
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mpm.id_mtos_score_group = msg.id_mtos_score_group(+)
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                 ORDER BY score_rank, param_rank;
        ELSE
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            --FOR NEW RECORDS
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       nvl(msg.id_mtos_score_group, mse.id_mtos_score) id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       CASE mpm.id_mtos_param
                           WHEN pk_sev_scores_constant.g_sofa_tw_respiratory THEN -- Respirarory 
                            check_param_default_2_final(i_lang                => i_lang,
                                                        i_prof                => i_prof,
                                                        i_episode             => i_episode,
                                                        i_mtos_param          => mpm.id_mtos_param,
                                                        i_flg_param_task_type => table_varchar('VS', 'AP'),
                                                        i_ref_unit_measure    => table_number(pk_sev_scores_constant.g_sofa_tw_fio2_um,
                                                                                              pk_sev_scores_constant.g_sofa_tw_pao2_um),
                                                        i_flg_condition       => pk_sev_scores_constant.g_condition_min_harvest,
                                                        i_flg_comparison      => NULL,
                                                        i_dt_min              => current_timestamp -
                                                                                 numtodsinterval(7, 'DAY'),
                                                        i_dt_max              => current_timestamp)
                       
                           WHEN pk_sev_scores_constant.g_sofa_tw_glasgow THEN -- Glasgow
                            check_param_default_2_final(i_lang                => i_lang,
                                                        i_prof                => i_prof,
                                                        i_episode             => i_episode,
                                                        i_mtos_param          => mpm.id_mtos_param,
                                                        i_flg_param_task_type => table_varchar('VS'),
                                                        i_ref_unit_measure    => NULL,
                                                        i_flg_condition       => pk_sev_scores_constant.g_condition_min,
                                                        i_flg_comparison      => NULL,
                                                        i_dt_min              => current_timestamp -
                                                                                 numtodsinterval(7, 'DAY'),
                                                        i_dt_max              => current_timestamp)
                       
                           WHEN pk_sev_scores_constant.g_sofa_tw_liver THEN -- Liver
                            check_param_default_2_final(i_lang                => i_lang,
                                                        i_prof                => i_prof,
                                                        i_episode             => i_episode,
                                                        i_mtos_param          => mpm.id_mtos_param,
                                                        i_flg_param_task_type => table_varchar('AP'),
                                                        i_ref_unit_measure    => table_number(pk_sev_scores_constant.g_sofa_tw_liver_um),
                                                        i_flg_condition       => pk_sev_scores_constant.g_condition_max_harvest,
                                                        i_flg_comparison      => NULL,
                                                        i_dt_min              => current_timestamp -
                                                                                 numtodsinterval(7, 'DAY'),
                                                        i_dt_max              => current_timestamp)
                       
                           WHEN pk_sev_scores_constant.g_sofa_tw_coagulation THEN -- Coagulation
                            check_param_default_2_final(i_lang                => i_lang,
                                                        i_prof                => i_prof,
                                                        i_episode             => i_episode,
                                                        i_mtos_param          => mpm.id_mtos_param,
                                                        i_flg_param_task_type => table_varchar('AP'),
                                                        i_ref_unit_measure    => table_number(pk_sev_scores_constant.g_sofa_tw_coagulation_um),
                                                        i_flg_condition       => pk_sev_scores_constant.g_condition_min_harvest,
                                                        i_flg_comparison      => NULL,
                                                        i_dt_min              => current_timestamp -
                                                                                 numtodsinterval(7, 'DAY'),
                                                        i_dt_max              => current_timestamp)
                       
                           WHEN pk_sev_scores_constant.g_sofa_tw_renal THEN -- RENAL
                            check_param_default_2_final(i_lang                => i_lang,
                                                        i_prof                => i_prof,
                                                        i_episode             => i_episode,
                                                        i_mtos_param          => mpm.id_mtos_param,
                                                        i_flg_param_task_type => table_varchar('AP'),
                                                        i_ref_unit_measure    => table_number(pk_sev_scores_constant.g_sofa_tw_renal_um),
                                                        i_flg_condition       => pk_sev_scores_constant.g_condition_max_harvest,
                                                        i_flg_comparison      => NULL,
                                                        i_dt_min              => current_timestamp -
                                                                                 numtodsinterval(7, 'DAY'),
                                                        i_dt_max              => current_timestamp)
                       
                       END AS registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       CASE mpm.id_mtos_param
                           WHEN pk_sev_scores_constant.g_sofa_tw_respiratory THEN -- Respiratory
                            CASE (SELECT check_param_default_2_final(i_lang                => i_lang,
                                                                 i_prof                => i_prof,
                                                                 i_episode             => i_episode,
                                                                 i_mtos_param          => mpm.id_mtos_param,
                                                                 i_flg_param_task_type => table_varchar('VS', 'AP'),
                                                                 i_ref_unit_measure    => table_number(pk_sev_scores_constant.g_sofa_tw_fio2_um,
                                                                                                       pk_sev_scores_constant.g_sofa_tw_pao2_um),
                                                                 i_flg_condition       => pk_sev_scores_constant.g_condition_min,
                                                                 i_flg_comparison      => NULL,
                                                                 i_dt_min              => current_timestamp -
                                                                                          numtodsinterval(7, 'DAY'),
                                                                 i_dt_max              => current_timestamp)
                                FROM dual)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_respiratory_1 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_respiratory_1)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_respiratory_2 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_respiratory_2)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_respiratory_3 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_respiratory_3)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_respiratory_4 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_respiratory_4)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_respiratory_5 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_respiratory_5)
                            
                            END
                       
                           WHEN pk_sev_scores_constant.g_sofa_tw_glasgow THEN -- Glasgow
                            CASE (SELECT check_param_default_2_final(i_lang                => i_lang,
                                                                 i_prof                => i_prof,
                                                                 i_episode             => i_episode,
                                                                 i_mtos_param          => mpm.id_mtos_param,
                                                                 i_flg_param_task_type => table_varchar('VS'),
                                                                 i_ref_unit_measure    => NULL,
                                                                 i_flg_condition       => pk_sev_scores_constant.g_condition_min,
                                                                 i_flg_comparison      => NULL,
                                                                 i_dt_min              => current_timestamp -
                                                                                          numtodsinterval(7, 'DAY'),
                                                                 i_dt_max              => current_timestamp)
                                FROM dual)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_glasgow_1 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_glasgow_1)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_glasgow_2 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_glasgow_2)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_glasgow_3 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_glasgow_3)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_glasgow_4 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_glasgow_4)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_glasgow_5 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_glasgow_5)
                            
                            END
                       
                           WHEN pk_sev_scores_constant.g_sofa_tw_liver THEN -- Liver
                            CASE (SELECT check_param_default_2_final(i_lang                => i_lang,
                                                                 i_prof                => i_prof,
                                                                 i_episode             => i_episode,
                                                                 i_mtos_param          => mpm.id_mtos_param,
                                                                 i_flg_param_task_type => table_varchar('AP'),
                                                                 i_ref_unit_measure    => table_number(pk_sev_scores_constant.g_sofa_tw_liver_um),
                                                                 i_flg_condition       => pk_sev_scores_constant.g_condition_max_harvest,
                                                                 i_flg_comparison      => NULL,
                                                                 i_dt_min              => current_timestamp -
                                                                                          numtodsinterval(7, 'DAY'),
                                                                 i_dt_max              => current_timestamp)
                                FROM dual)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_liver_1 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_liver_1)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_liver_2 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_liver_2)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_liver_3 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_liver_3)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_liver_4 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_liver_4)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_liver_5 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_liver_5)
                            END
                       
                           WHEN pk_sev_scores_constant.g_sofa_tw_coagulation THEN -- Coagulation
                            CASE (SELECT check_param_default_2_final(i_lang                => i_lang,
                                                                 i_prof                => i_prof,
                                                                 i_episode             => i_episode,
                                                                 i_mtos_param          => mpm.id_mtos_param,
                                                                 i_flg_param_task_type => table_varchar('AP'),
                                                                 i_ref_unit_measure    => table_number(pk_sev_scores_constant.g_sofa_tw_coagulation_um),
                                                                 i_flg_condition       => pk_sev_scores_constant.g_condition_min_harvest,
                                                                 i_flg_comparison      => NULL,
                                                                 i_dt_min              => current_timestamp -
                                                                                          numtodsinterval(7, 'DAY'),
                                                                 i_dt_max              => current_timestamp)
                                FROM dual)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_coagulation_1 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_coagulation_1)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_coagulation_2 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_coagulation_2)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_coagulation_3 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_coagulation_3)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_coagulation_4 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_coagulation_4)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_coagulation_5 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_coagulation_5)
                            END
                       
                           WHEN pk_sev_scores_constant.g_sofa_tw_renal THEN -- Renal
                            CASE (SELECT check_param_default_2_final(i_lang                => i_lang,
                                                                 i_prof                => i_prof,
                                                                 i_episode             => i_episode,
                                                                 i_mtos_param          => mpm.id_mtos_param,
                                                                 i_flg_param_task_type => table_varchar('AP'),
                                                                 i_ref_unit_measure    => table_number(pk_sev_scores_constant.g_sofa_tw_renal_um),
                                                                 i_flg_condition       => pk_sev_scores_constant.g_condition_max_harvest,
                                                                 i_flg_comparison      => NULL,
                                                                 i_dt_min              => current_timestamp -
                                                                                          numtodsinterval(7, 'DAY'),
                                                                 i_dt_max              => current_timestamp)
                                FROM dual)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_renal_1 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_renal_1)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_renal_2 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_renal_2)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_renal_3 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_renal_3)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_renal_4 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_renal_4)
                            
                                WHEN pk_sev_scores_constant.g_sofa_tw_renal_5 THEN
                                 pk_translation.get_translation(i_lang,
                                                                'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                pk_sev_scores_constant.g_sofa_tw_renal_5)
                            END
                       
                       END AS registered_value_desc,
                       NULL unit_measure_desc,
                       -- RELATION
                       NULL relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       NULL related_scores,
                       -- VITAL SIGNS
                       NULL AS id_unit_measure,
                       NULL AS val_min,
                       NULL AS val_max,
                       NULL AS format_num,
                       NULL AS id_vital_sign_read
                  FROM mtos_score mse, mtos_param mpm, mtos_score_group msg
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_sofa_tw
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mpm.id_mtos_score_group = msg.id_mtos_score_group(+)
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                 ORDER BY score_rank, param_rank;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_sofa_tw_param_list;

    FUNCTION get_apache_tw_param_list
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_patient      IN patient.id_patient%TYPE,
        i_episode         IN episode.id_episode%TYPE,
        i_pat_age_years   IN NUMBER,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_APACHE_TW_PARAM_LIST';
        l_internal_error EXCEPTION;
        l_age vital_sign_unit_measure.age_min%TYPE;
    
        l_dt_icu_admission bmng_allocation_bed.dt_creation%TYPE;
        l_dt_min           TIMESTAMP WITH LOCAL TIME ZONE;
        l_dt_max           TIMESTAMP WITH LOCAL TIME ZONE;
    
    BEGIN
    
        l_age              := pk_patient.get_pat_age(i_lang, NULL, NULL, NULL, 'YEARS', i_id_patient);
        l_dt_icu_admission := get_icu_dt_admission(i_lang => i_lang, i_prof => i_prof, i_episode => i_episode);
        l_dt_min           := l_dt_icu_admission - numtodsinterval(6, 'HOUR');
        l_dt_max           := l_dt_icu_admission + numtodsinterval(1, 'DAY');
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
            --FOR EDITION
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       nvl(msg.id_mtos_score_group, mse.id_mtos_score) id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       emp.registered_value registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       CASE
                            WHEN (SELECT (SELECT DISTINCT t.flg_param_task_type
                                            FROM mtos_param_task t
                                           WHERE t.id_mtos_param = mpm.id_mtos_param
                                             AND t.flg_available = pk_alert_constant.g_yes)
                                    FROM dual) = pk_sev_scores_constant.g_flg_param_task_vital_sign
                                 AND emp.registered_value IS NOT NULL THEN
                             CASE
                                 WHEN emp.registered_value >= 1 THEN
                                  to_char(emp.registered_value)
                                 ELSE
                                  to_char(emp.registered_value, 'FM9990d999')
                             END
                            WHEN (SELECT (SELECT DISTINCT t.flg_param_task_type
                                            FROM mtos_param_task t
                                           WHERE t.id_mtos_param = mpm.id_mtos_param
                                             AND t.flg_available = pk_alert_constant.g_yes)
                                    FROM dual) = pk_sev_scores_constant.g_task_analysis_parameter
                                 AND emp.registered_value IS NOT NULL THEN
                             CASE
                                 WHEN emp.registered_value >= 1 THEN
                                  to_char(emp.registered_value)
                                 ELSE
                                  to_char(emp.registered_value, 'FM9990d999')
                             END
                            WHEN mpm.flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_m THEN
                             (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                FROM mtos_param_value mpe
                               WHERE mpe.id_mtos_param_value = emp.registered_value)
                            WHEN mpm.flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_f THEN
                             to_char(emp.notes)
                            WHEN mpm.id_mtos_param = 1138 THEN
                             to_char(emp.registered_value) || ' - ' || pk_message.get_message(i_lang, 'TRAUMA_T041')
                            ELSE
                             CASE
                                 WHEN emp.registered_value >= 1 THEN
                                  to_char(emp.registered_value)
                                 ELSE
                                  to_char(emp.registered_value, 'FM9990d999')
                             END
                        END registered_value_desc,
                       NULL unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       NULL related_scores,
                       -- VITAL SIGNS
                       NULL id_unit_measure,
                       0 val_min,
                       NULL val_max,
                       CASE
                            WHEN mpm.flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_n THEN
                             mpm.format_num
                            ELSE
                             NULL
                        END AS format_num,
                       NULL id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, epis_mtos_param emp, mtos_score_group msg
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_apache_tw
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mpm.id_mtos_score_group = msg.id_mtos_score_group(+)
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                 ORDER BY score_rank, param_rank;
        ELSE
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            --FOR NEW RECORDS
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       nvl(msg.id_mtos_score_group, mse.id_mtos_score) id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param AS id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       CASE
                            WHEN mpm.id_mtos_score_group = pk_sev_scores_constant.g_mtos_group_oxigenation
                                 AND l_dt_icu_admission IS NOT NULL
                                 AND (SELECT (SELECT DISTINCT t.flg_param_task_type
                                                FROM mtos_param_task t
                                               WHERE t.id_mtos_param = mpm.id_mtos_param
                                                 AND t.flg_available = pk_alert_constant.g_yes)
                                        FROM dual) = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                             REPLACE((SELECT pk_vital_sign.get_vs_result(i_lang          => i_lang,
                                                                        i_prof          => i_prof,
                                                                        i_episode       => i_episode,
                                                                        i_id_mtos_param => mpm.id_mtos_param,
                                                                        i_flg_parameter => pk_sev_scores_constant.g_flg_latest,
                                                                        i_dt_min        => l_dt_min,
                                                                        i_dt_max        => l_dt_max)
                                       FROM dual),
                                     ',',
                                     '.')
                            WHEN mpm.id_mtos_score_group = pk_sev_scores_constant.g_mtos_group_oxigenation
                                 AND l_dt_icu_admission IS NOT NULL
                                 AND (SELECT (SELECT DISTINCT t.flg_param_task_type
                                                FROM mtos_param_task t
                                               WHERE t.id_mtos_param = mpm.id_mtos_param
                                                 AND t.flg_available = pk_alert_constant.g_yes)
                                        FROM dual) = pk_sev_scores_constant.g_task_analysis_parameter THEN
                             REPLACE((SELECT pk_lab_tests_external_api_db.get_lab_test_result(i_lang          => i_lang,
                                                                                             i_prof          => i_prof,
                                                                                             i_episode       => i_episode,
                                                                                             i_id_mtos_param => mpm.id_mtos_param,
                                                                                             i_flg_parameter => pk_sev_scores_constant.g_flg_latest_harvest,
                                                                                             i_dt_min        => l_dt_min,
                                                                                             i_dt_max        => l_dt_max)
                                       FROM dual),
                                     ',',
                                     '.')
                            WHEN mpm.id_mtos_param = pk_sev_scores_constant.g_apache_age THEN
                             to_char(l_age)
                            WHEN l_dt_icu_admission IS NOT NULL
                                 AND (SELECT (SELECT DISTINCT t.flg_param_task_type
                                                FROM mtos_param_task t
                                               WHERE t.id_mtos_param = mpm.id_mtos_param
                                                 AND t.flg_available = pk_alert_constant.g_yes)
                                        FROM dual) = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                             REPLACE(to_number((SELECT pk_vital_sign.get_vs_result(i_lang          => i_lang,
                                                                                  i_prof          => i_prof,
                                                                                  i_episode       => i_episode,
                                                                                  i_id_mtos_param => mpm.id_mtos_param,
                                                                                  i_flg_parameter => (SELECT decode(mm.flg_param_task_type,
                                                                                                                    'MA',
                                                                                                                    pk_sev_scores_constant.g_condition_max,
                                                                                                                    'MI',
                                                                                                                    pk_sev_scores_constant.g_condition_min)
                                                                                                        FROM mtos_multiplier mm
                                                                                                       WHERE mm.id_mtos_param =
                                                                                                             mpm.id_mtos_param),
                                                                                  i_dt_min        => l_dt_min,
                                                                                  i_dt_max        => l_dt_max)
                                                 FROM dual)),
                                     ',',
                                     '.')
                            WHEN l_dt_icu_admission IS NOT NULL
                                 AND (SELECT (SELECT DISTINCT t.flg_param_task_type
                                                FROM mtos_param_task t
                                               WHERE t.id_mtos_param = mpm.id_mtos_param
                                                 AND t.flg_available = pk_alert_constant.g_yes)
                                        FROM dual) = pk_sev_scores_constant.g_task_analysis_parameter THEN
                             REPLACE((SELECT pk_lab_tests_external_api_db.get_lab_test_result(i_lang          => i_lang,
                                                                                             i_prof          => i_prof,
                                                                                             i_episode       => i_episode,
                                                                                             i_id_mtos_param => mpm.id_mtos_param,
                                                                                             i_flg_parameter => (SELECT decode(mm.flg_param_task_type,
                                                                                                                               'MA',
                                                                                                                               pk_sev_scores_constant.g_condition_max_harvest,
                                                                                                                               'MI',
                                                                                                                               pk_sev_scores_constant.g_condition_min_harvest)
                                                                                                                   FROM mtos_multiplier mm
                                                                                                                  WHERE mm.id_mtos_param =
                                                                                                                        mpm.id_mtos_param),
                                                                                             i_dt_min        => l_dt_min,
                                                                                             i_dt_max        => l_dt_max)
                                       FROM dual),
                                     ',',
                                     '.')
                        END AS registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       CASE
                            WHEN mpm.id_mtos_score_group = pk_sev_scores_constant.g_mtos_group_oxigenation
                                 AND l_dt_icu_admission IS NOT NULL
                                 AND (SELECT (SELECT DISTINCT t.flg_param_task_type
                                                FROM mtos_param_task t
                                               WHERE t.id_mtos_param = mpm.id_mtos_param
                                                 AND t.flg_available = pk_alert_constant.g_yes)
                                        FROM dual) = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                            
                             (SELECT pk_vital_sign.get_vs_result(i_lang          => i_lang,
                                                                 i_prof          => i_prof,
                                                                 i_episode       => i_episode,
                                                                 i_id_mtos_param => mpm.id_mtos_param,
                                                                 i_flg_parameter => pk_sev_scores_constant.g_flg_latest,
                                                                 i_dt_min        => l_dt_min,
                                                                 i_dt_max        => l_dt_max)
                                FROM dual)
                            WHEN mpm.id_mtos_score_group = pk_sev_scores_constant.g_mtos_group_oxigenation
                                 AND l_dt_icu_admission IS NOT NULL
                                 AND (SELECT (SELECT DISTINCT t.flg_param_task_type
                                                FROM mtos_param_task t
                                               WHERE t.id_mtos_param = mpm.id_mtos_param
                                                 AND t.flg_available = pk_alert_constant.g_yes)
                                        FROM dual) = pk_sev_scores_constant.g_task_analysis_parameter THEN
                             (SELECT pk_lab_tests_external_api_db.get_lab_test_result(i_lang          => i_lang,
                                                                                      i_prof          => i_prof,
                                                                                      i_episode       => i_episode,
                                                                                      i_id_mtos_param => mpm.id_mtos_param,
                                                                                      i_flg_parameter => pk_sev_scores_constant.g_flg_latest_harvest,
                                                                                      i_dt_min        => l_dt_min,
                                                                                      i_dt_max        => l_dt_max)
                                FROM dual)
                            WHEN mpm.id_mtos_param = pk_sev_scores_constant.g_apache_age THEN
                             to_char(l_age)
                            WHEN l_dt_icu_admission IS NOT NULL
                                 AND (SELECT (SELECT DISTINCT t.flg_param_task_type
                                                FROM mtos_param_task t
                                               WHERE t.id_mtos_param = mpm.id_mtos_param
                                                 AND t.flg_available = pk_alert_constant.g_yes)
                                        FROM dual) = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                             (SELECT pk_vital_sign.get_vs_result(i_lang          => i_lang,
                                                                 i_prof          => i_prof,
                                                                 i_episode       => i_episode,
                                                                 i_id_mtos_param => mpm.id_mtos_param,
                                                                 i_flg_parameter => (SELECT decode(mm.flg_param_task_type,
                                                                                                   'MA',
                                                                                                   pk_sev_scores_constant.g_condition_max,
                                                                                                   'MI',
                                                                                                   pk_sev_scores_constant.g_condition_min)
                                                                                       FROM mtos_multiplier mm
                                                                                      WHERE mm.id_mtos_param =
                                                                                            mpm.id_mtos_param),
                                                                 i_dt_min        => l_dt_min,
                                                                 i_dt_max        => l_dt_max)
                                FROM dual)
                            WHEN l_dt_icu_admission IS NOT NULL
                                 AND (SELECT (SELECT DISTINCT t.flg_param_task_type
                                                FROM mtos_param_task t
                                               WHERE t.id_mtos_param = mpm.id_mtos_param
                                                 AND t.flg_available = pk_alert_constant.g_yes)
                                        FROM dual) = pk_sev_scores_constant.g_task_analysis_parameter THEN
                             (SELECT pk_lab_tests_external_api_db.get_lab_test_result(i_lang          => i_lang,
                                                                                      i_prof          => i_prof,
                                                                                      i_episode       => i_episode,
                                                                                      i_id_mtos_param => mpm.id_mtos_param,
                                                                                      i_flg_parameter => (SELECT decode(mm.flg_param_task_type,
                                                                                                                        'MA',
                                                                                                                        pk_sev_scores_constant.g_condition_max_harvest,
                                                                                                                        'MI',
                                                                                                                        pk_sev_scores_constant.g_condition_min_harvest)
                                                                                                            FROM mtos_multiplier mm
                                                                                                           WHERE mm.id_mtos_param =
                                                                                                                 mpm.id_mtos_param),
                                                                                      i_dt_min        => l_dt_min,
                                                                                      i_dt_max        => l_dt_max)
                                FROM dual)
                        END AS registered_value_desc,
                       CASE
                            WHEN (SELECT DISTINCT t.flg_param_task_type
                                    FROM mtos_param_task t
                                   WHERE t.id_mtos_param = mpm.id_mtos_param
                                     AND t.flg_available = pk_alert_constant.g_yes) =
                                 pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                             (SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                                FROM unit_measure um
                               WHERE um.id_unit_measure =
                                     (SELECT get_vs_um_inst_um((SELECT t.id_param_task
                                                                 FROM mtos_param_task t
                                                                WHERE t.id_mtos_param = mpm.id_mtos_param
                                                                  AND t.flg_available = pk_alert_constant.g_yes
                                                                  AND t.flg_param_task_type =
                                                                      pk_sev_scores_constant.g_flg_param_task_vital_sign),
                                                               i_prof.institution,
                                                               i_prof.software)
                                        FROM dual))
                            WHEN (SELECT DISTINCT t.flg_param_task_type
                                    FROM mtos_param_task t
                                   WHERE t.id_mtos_param = mpm.id_mtos_param
                                     AND t.flg_available = pk_alert_constant.g_yes) =
                                 pk_sev_scores_constant.g_task_analysis_parameter THEN
                             (SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                                FROM unit_measure um
                               WHERE um.id_unit_measure =
                                     (SELECT get_ap_um_inst_um((SELECT t.id_content_param_task
                                                                 FROM mtos_param_task t
                                                                WHERE t.id_mtos_param = mpm.id_mtos_param
                                                                  AND t.flg_available = pk_alert_constant.g_yes
                                                                  AND t.flg_param_task_type =
                                                                      pk_sev_scores_constant.g_task_analysis_parameter
                                                                  AND rownum = 1),
                                                               i_prof.institution,
                                                               i_prof.software)
                                        FROM dual))
                        END unit_measure_desc,
                       -- RELATION
                       NULL relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       NULL related_scores,
                       -- VITAL SIGNS
                       CASE
                            WHEN (SELECT (SELECT DISTINCT t.flg_param_task_type
                                            FROM mtos_param_task t
                                           WHERE t.id_mtos_param = mpm.id_mtos_param
                                             AND t.flg_available = pk_alert_constant.g_yes)
                                    FROM dual) = pk_sev_scores_constant.g_flg_param_task_vital_sign THEN
                             (SELECT get_vs_um_inst_um((SELECT t.id_param_task
                                                         FROM mtos_param_task t
                                                        WHERE t.id_mtos_param = mpm.id_mtos_param
                                                          AND t.flg_available = pk_alert_constant.g_yes
                                                          AND t.flg_param_task_type =
                                                              pk_sev_scores_constant.g_flg_param_task_vital_sign),
                                                       i_prof.institution,
                                                       i_prof.software)
                                FROM dual)
                            WHEN (SELECT (SELECT DISTINCT t.flg_param_task_type
                                            FROM mtos_param_task t
                                           WHERE t.id_mtos_param = mpm.id_mtos_param
                                             AND t.flg_available = pk_alert_constant.g_yes)
                                    FROM dual) = pk_sev_scores_constant.g_task_analysis_parameter THEN
                             (SELECT get_ap_um_inst_um((SELECT t.id_content_param_task
                                                         FROM mtos_param_task t
                                                        WHERE t.id_mtos_param = mpm.id_mtos_param
                                                          AND t.flg_available = pk_alert_constant.g_yes
                                                          AND t.flg_param_task_type =
                                                              pk_sev_scores_constant.g_task_analysis_parameter
                                                          AND rownum = 1),
                                                       i_prof.institution,
                                                       i_prof.software)
                                FROM dual)
                        END AS id_unit_measure,
                       0 AS val_min,
                       NULL AS val_max,
                       CASE
                            WHEN mpm.flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_n THEN
                             mpm.format_num
                            ELSE
                             NULL
                        END AS format_num,
                       NULL id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse
                  JOIN mtos_param mpm
                    ON mse.id_mtos_score = mpm.id_mtos_score
                  LEFT JOIN mtos_score_group msg
                    ON mpm.id_mtos_score_group = msg.id_mtos_score_group
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_apache_tw
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                 ORDER BY score_rank, param_rank;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_apache_tw_param_list;

    FUNCTION get_vte_param_list
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_patient      IN patient.id_patient%TYPE,
        i_episode         IN episode.id_episode%TYPE,
        i_pat_age_years   IN NUMBER,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_VTE_PARAM_LIST';
        l_internal_error EXCEPTION;
        l_age vital_sign_unit_measure.age_min%TYPE;
    
        l_dt_icu_admission bmng_allocation_bed.dt_creation%TYPE;
    
    BEGIN
    
        l_age              := pk_patient.get_pat_age(i_lang, NULL, NULL, NULL, 'MONTHS', i_id_patient);
        l_dt_icu_admission := get_icu_dt_admission(i_lang => i_lang, i_prof => i_prof, i_episode => i_episode);
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       nvl(msg.id_mtos_score_group, mse.id_mtos_score) id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       decode(mpm.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_fill_type_f,
                              NULL,
                              emp.registered_value) AS registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.flg_fill_type,
                              pk_sev_scores_constant.g_flg_fill_type_m,
                              (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                 FROM mtos_param_value mpe
                                WHERE mpe.id_mtos_param_value = emp.registered_value),
                              pk_sev_scores_constant.g_flg_fill_type_l,
                              (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                 FROM mtos_param_value mpe
                                WHERE mpe.id_mtos_param_value = emp.registered_value),
                              pk_sev_scores_constant.g_flg_fill_type_f,
                              to_char(emp.notes),
                              to_char(emp.registered_value)) AS registered_value_desc,
                       NULL AS unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       decode(mpm.id_mtos_relation,
                              NULL,
                              NULL,
                              pk_utils.concatenate_list(CURSOR (SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score IN
                                                                (SELECT msr.id_mtos_score_rel
                                                                   FROM mtos_score_relation msr
                                                                  WHERE msr.id_mtos_score =
                                                                        pk_sev_scores_constant.g_id_score_apache3)
                                                         UNION
                                                         SELECT mpm2.id_mtos_score
                                                           FROM mtos_param mpm2
                                                          WHERE mpm2.id_mtos_relation = mpm.id_mtos_relation
                                                            AND mpm2.id_mtos_score =
                                                                pk_sev_scores_constant.g_id_score_apache3),
                                                        '|')) related_scores,
                       -- VITAL SIGNS
                       NULL              AS id_vital_sign,
                       NULL              AS id_unit_measure,
                       NULL              AS val_min,
                       NULL              AS val_max,
                       NULL              AS format_num,
                       NULL              AS id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, epis_mtos_param emp, mtos_score_group msg
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_vte
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mpm.id_mtos_score_group = msg.id_mtos_score_group(+)
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                 ORDER BY score_rank, param_rank;
        ELSE
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       nvl(msg.id_mtos_score_group, mse.id_mtos_score) id_group,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       CASE mpm.id_mtos_param
                            WHEN pk_sev_scores_constant.g_vte_param_age THEN
                             CASE
                                 WHEN l_age >= 840 THEN
                                  pk_sev_scores_constant.g_vte_age_over_70
                                 WHEN l_age IS NOT NULL THEN
                                  pk_sev_scores_constant.g_vte_age_under_70
                             END
                            WHEN pk_sev_scores_constant.g_vte_param_bmi THEN
                             CASE
                                 WHEN (SELECT count_documented_tasks(i_lang                => i_lang,
                                                                     i_prof                => i_prof,
                                                                     i_episode             => i_episode,
                                                                     i_mtos_param          => mpm.id_mtos_param,
                                                                     i_flg_param_task_type => pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                     i_ref_value           => pk_sev_scores_constant.g_vte_bmi_ref_value,
                                                                     i_ref_unit_measure    => pk_sev_scores_constant.g_vte_bmi_ref_um,
                                                                     i_flg_condition       => pk_sev_scores_constant.g_condition_max,
                                                                     i_flg_comparison      => pk_sev_scores_constant.g_greater_equal_than,
                                                                     i_dt_min              => l_dt_icu_admission - 3,
                                                                     i_dt_max              => l_dt_icu_admission + 3)
                                         FROM dual) > 0
                                      AND l_dt_icu_admission IS NOT NULL THEN
                                 
                                  CASE
                                      WHEN (SELECT check_param_default_to_int(i_lang                => i_lang,
                                                                              i_prof                => i_prof,
                                                                              i_episode             => i_episode,
                                                                              i_mtos_param          => mpm.id_mtos_param,
                                                                              i_flg_param_task_type => pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                              i_ref_value           => pk_sev_scores_constant.g_vte_bmi_ref_value,
                                                                              i_ref_unit_measure    => pk_sev_scores_constant.g_vte_bmi_ref_um,
                                                                              i_flg_condition       => pk_sev_scores_constant.g_condition_max,
                                                                              i_flg_comparison      => pk_sev_scores_constant.g_greater_equal_than,
                                                                              i_dt_min              => l_dt_icu_admission - 3,
                                                                              i_dt_max              => l_dt_icu_admission + 3)
                                              FROM dual) = 1 THEN
                                      
                                       pk_sev_scores_constant.g_vte_val_bmi_yes
                                      ELSE
                                       pk_sev_scores_constant.g_vte_val_bmi_no
                                  END
                             END
                        
                            WHEN pk_sev_scores_constant.g_vte_param_platelets THEN
                             CASE
                                 WHEN (SELECT count_documented_tasks(i_lang                => i_lang,
                                                                     i_prof                => i_prof,
                                                                     i_episode             => i_episode,
                                                                     i_mtos_param          => mpm.id_mtos_param,
                                                                     i_flg_param_task_type => pk_sev_scores_constant.g_task_analysis_parameter,
                                                                     i_ref_value           => pk_sev_scores_constant.g_vte_plat_ref_value,
                                                                     i_ref_unit_measure    => pk_sev_scores_constant.g_vte_plat_ref_um,
                                                                     i_flg_condition       => pk_sev_scores_constant.g_condition_min_harvest,
                                                                     i_flg_comparison      => pk_sev_scores_constant.g_less_than,
                                                                     i_dt_min              => l_dt_icu_admission - 3,
                                                                     i_dt_max              => l_dt_icu_admission + 3)
                                         FROM dual) > 0
                                      AND l_dt_icu_admission IS NOT NULL THEN
                                  CASE
                                      WHEN (SELECT check_param_default_to_int(i_lang                => i_lang,
                                                                              i_prof                => i_prof,
                                                                              i_episode             => i_episode,
                                                                              i_mtos_param          => mpm.id_mtos_param,
                                                                              i_flg_param_task_type => pk_sev_scores_constant.g_task_analysis_parameter,
                                                                              i_ref_value           => pk_sev_scores_constant.g_vte_plat_ref_value,
                                                                              i_ref_unit_measure    => pk_sev_scores_constant.g_vte_plat_ref_um,
                                                                              i_flg_condition       => pk_sev_scores_constant.g_condition_min_harvest,
                                                                              i_flg_comparison      => pk_sev_scores_constant.g_less_than,
                                                                              i_dt_min              => l_dt_icu_admission - 3,
                                                                              i_dt_max              => l_dt_icu_admission + 3)
                                              FROM dual) = 1 THEN
                                       pk_sev_scores_constant.g_vte_val_plat_yes
                                      ELSE
                                       pk_sev_scores_constant.g_vte_val_plat_no
                                  END
                             END
                        END AS registered_value,
                       -- REGISTERED VALUE DESCRIPTION                       
                       CASE mpm.id_mtos_param
                            WHEN pk_sev_scores_constant.g_vte_param_age THEN
                             CASE
                                 WHEN l_age >= 840 THEN
                                  pk_translation.get_translation(i_lang,
                                                                 'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                 pk_sev_scores_constant.g_vte_age_over_70)
                                 WHEN l_age IS NOT NULL THEN
                                  pk_translation.get_translation(i_lang,
                                                                 'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                 pk_sev_scores_constant.g_vte_age_under_70)
                             END
                            WHEN pk_sev_scores_constant.g_vte_param_bmi THEN
                             CASE
                                 WHEN (SELECT count_documented_tasks(i_lang                => i_lang,
                                                                     i_prof                => i_prof,
                                                                     i_episode             => i_episode,
                                                                     i_mtos_param          => mpm.id_mtos_param,
                                                                     i_flg_param_task_type => pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                     i_ref_value           => pk_sev_scores_constant.g_vte_bmi_ref_value,
                                                                     i_ref_unit_measure    => pk_sev_scores_constant.g_vte_bmi_ref_um,
                                                                     i_flg_condition       => pk_sev_scores_constant.g_condition_most_recent,
                                                                     i_flg_comparison      => pk_sev_scores_constant.g_greater_equal_than,
                                                                     i_dt_min              => l_dt_icu_admission - 3,
                                                                     i_dt_max              => l_dt_icu_admission + 3)
                                         FROM dual) > 0
                                      AND l_dt_icu_admission IS NOT NULL THEN
                                  CASE
                                      WHEN (SELECT check_param_default_to_int(i_lang                => i_lang,
                                                                              i_prof                => i_prof,
                                                                              i_episode             => i_episode,
                                                                              i_mtos_param          => mpm.id_mtos_param,
                                                                              i_flg_param_task_type => pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                              i_ref_value           => pk_sev_scores_constant.g_vte_bmi_ref_value,
                                                                              i_ref_unit_measure    => pk_sev_scores_constant.g_vte_bmi_ref_um,
                                                                              i_flg_condition       => pk_sev_scores_constant.g_condition_most_recent,
                                                                              i_flg_comparison      => pk_sev_scores_constant.g_greater_than,
                                                                              i_dt_min              => l_dt_icu_admission - 3,
                                                                              i_dt_max              => l_dt_icu_admission + 3)
                                              FROM dual) = 1 THEN
                                       pk_translation.get_translation(i_lang,
                                                                      'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                      pk_sev_scores_constant.g_vte_val_bmi_yes)
                                      ELSE
                                       pk_translation.get_translation(i_lang,
                                                                      'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                      pk_sev_scores_constant.g_vte_val_bmi_no)
                                  END
                             END
                            WHEN pk_sev_scores_constant.g_vte_param_platelets THEN
                             CASE
                                 WHEN (SELECT count_documented_tasks(i_lang                => i_lang,
                                                                     i_prof                => i_prof,
                                                                     i_episode             => i_episode,
                                                                     i_mtos_param          => mpm.id_mtos_param,
                                                                     i_flg_param_task_type => pk_sev_scores_constant.g_task_analysis_parameter,
                                                                     i_ref_value           => pk_sev_scores_constant.g_vte_plat_ref_value,
                                                                     i_ref_unit_measure    => pk_sev_scores_constant.g_vte_plat_ref_um,
                                                                     i_flg_condition       => pk_sev_scores_constant.g_condition_min_harvest,
                                                                     i_flg_comparison      => pk_sev_scores_constant.g_less_than,
                                                                     i_dt_min              => l_dt_icu_admission - 3,
                                                                     i_dt_max              => l_dt_icu_admission + 3)
                                         FROM dual) > 0
                                      AND l_dt_icu_admission IS NOT NULL THEN
                                  CASE
                                      WHEN (SELECT check_param_default_to_int(i_lang                => i_lang,
                                                                              i_prof                => i_prof,
                                                                              i_episode             => i_episode,
                                                                              i_mtos_param          => mpm.id_mtos_param,
                                                                              i_flg_param_task_type => pk_sev_scores_constant.g_task_analysis_parameter,
                                                                              i_ref_value           => pk_sev_scores_constant.g_vte_plat_ref_value,
                                                                              i_ref_unit_measure    => pk_sev_scores_constant.g_vte_plat_ref_um,
                                                                              i_flg_condition       => pk_sev_scores_constant.g_condition_min_harvest,
                                                                              i_flg_comparison      => pk_sev_scores_constant.g_less_than,
                                                                              i_dt_min              => l_dt_icu_admission - 3,
                                                                              i_dt_max              => l_dt_icu_admission + 3)
                                              FROM dual) = 1
                                           AND l_dt_icu_admission IS NOT NULL THEN
                                       pk_translation.get_translation(i_lang,
                                                                      'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                      pk_sev_scores_constant.g_vte_val_plat_yes)
                                      ELSE
                                       pk_translation.get_translation(i_lang,
                                                                      'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.' ||
                                                                      pk_sev_scores_constant.g_vte_val_plat_no)
                                  END
                             END
                        END AS registered_value_desc,
                       NULL AS unit_measure_desc,
                       -- RELATION
                       mpm.id_mtos_relation relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       NULL AS related_scores,
                       -- VITAL SIGNS
                       NULL              AS id_vital_sign,
                       NULL              AS d_unit_measure,
                       NULL              AS val_min,
                       NULL              AS val_max,
                       NULL              AS format_num,
                       NULL              AS id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, /*vital_sign_read vsr,*/ mtos_score_group msg /*, mtos_param_task mpt*/
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_vte
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mpm.id_mtos_score_group = msg.id_mtos_score_group(+)
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                 ORDER BY score_rank, param_rank;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_vte_param_list;

    /**********************************************************************************************
    * Database internal function. Used to return the values of a Glasgow score.
    * This function is used during the screen loading, so the scores are correctly shown.
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_id_episode         Episode ID
    * @param i_id_patient         Patient ID
    * @param i_pat_age_years      Patient age (in years)
    * @param o_gcs_eyes           Eyes value
    * @param o_gcs_verbal         Verbal value
    * @param o_gcs_motor          Motor value
    * @param o_gcs_eyes_desc      Eyes value description
    * @param o_gcs_verbal_desc    Verbal value description
    * @param o_gcs_motor_desc     Motor value description
    * @param o_gcs_total          Total scorevalue
    * @param o_error              Error message
    *                        
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            Tércio Soares
    * @version           1.0  
    * @since             2010/10/27
    **********************************************************************************************/
    FUNCTION get_glasgow_score_aux
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_episode      IN episode.id_episode%TYPE,
        i_id_patient      IN patient.id_patient%TYPE,
        i_pat_age_years   IN NUMBER,
        o_gcs_eyes        OUT NUMBER,
        o_gcs_verbal      OUT NUMBER,
        o_gcs_motor       OUT NUMBER,
        o_gcs_eyes_desc   OUT VARCHAR2,
        o_gcs_verbal_desc OUT VARCHAR2,
        o_gcs_motor_desc  OUT VARCHAR2,
        o_gcs_total       OUT NUMBER,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200) := 'GET_GLASGOW_SCORE_AUX';
        l_exception EXCEPTION;
    
        l_params table_number := table_number();
        l_values table_number := table_number();
    
        l_counter   NUMBER(6) := 1;
        l_cur_value epis_mtos_param.registered_value%TYPE;
    
        l_score_b NUMBER;
    
        o_total pk_types.cursor_type;
    
        CURSOR c_params IS
            SELECT mpm.id_mtos_param,
                   decode(mpt.flg_param_task_type,
                          pk_sev_scores_constant.g_flg_param_task_vital_sign,
                          mpt.id_param_task,
                          NULL) AS id_vital_sign,
                   mpm.flg_fill_type,
                   mpm.internal_name
              FROM mtos_param mpm, mtos_score mse, mtos_param_task mpt
             WHERE mpm.id_mtos_score = mse.id_mtos_score
               AND mse.flg_score_type = pk_sev_scores_constant.g_flg_score_gcs
               AND mpm.flg_fill_type <> pk_sev_scores_constant.g_flg_fill_type_t
               AND mpm.flg_available = pk_alert_constant.g_yes
               AND mpt.id_mtos_param(+) = mpm.id_mtos_param
               AND mpt.flg_available(+) = pk_alert_constant.g_yes
             ORDER BY mpm.rank;
    BEGIN
    
        -- Get current parameter values, which can be 1) already saved values for the assessment in EPIS_MTOS_PARAM,
        -- or 2) the most recent registered value in the vital signs screen (VITAL_SIGN_READ).
        g_error := 'GET PARAM ID/VALUES';
        pk_alertlog.log_debug(g_package || '.' || l_func_name || ': ' || g_error);
        FOR r IN c_params
        LOOP
            l_params.extend;
            l_values.extend;
        
            IF r.id_vital_sign IS NOT NULL
               AND
               r.flg_fill_type IN (pk_sev_scores_constant.g_flg_fill_type_n, pk_sev_scores_constant.g_flg_fill_type_m) -- Vital signs: numerical
            THEN
                BEGIN
                    g_error := 'GET VS PARAM VALUE';
                    pk_alertlog.log_debug(g_error);
                    SELECT decode(r.flg_fill_type,
                                  pk_sev_scores_constant.g_flg_fill_type_n,
                                  t.value,
                                  t.id_vital_sign_desc)
                      INTO l_cur_value
                      FROM (SELECT vsr.value,
                                   vsr.id_vital_sign_desc,
                                   vsr.id_episode,
                                   row_number() over(PARTITION BY id_episode ORDER BY dt_vital_sign_read_tstz DESC) row_number
                              FROM vital_sign_read vsr
                             WHERE vsr.id_vital_sign = r.id_vital_sign
                               AND vsr.flg_state = pk_alert_constant.g_active
                               AND pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0) t
                     WHERE t.id_episode = i_id_episode
                       AND row_number = 1;
                EXCEPTION
                    WHEN no_data_found THEN
                        l_cur_value := NULL;
                END;
            
            ELSIF r.flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_l
            THEN
                IF r.internal_name = pk_sev_scores_constant.g_param_type_age
                THEN
                    l_cur_value := i_pat_age_years;
                END IF;
            
            END IF;
        
            IF r.internal_name = pk_sev_scores_constant.g_param_type_gcs_eyes
            THEN
            
                o_gcs_eyes := l_cur_value;
            
                SELECT nvl((SELECT pk_translation.get_translation(i_lang, vsd.code_vital_sign_desc)
                             FROM vital_sign_desc vsd
                            WHERE vsd.id_vital_sign_desc = l_cur_value
                              AND vsd.flg_available = pk_alert_constant.g_available),
                           NULL)
                  INTO o_gcs_eyes_desc
                  FROM dual;
            
            ELSIF r.internal_name = pk_sev_scores_constant.g_param_type_gcs_verbal
            THEN
            
                o_gcs_verbal := l_cur_value;
            
                SELECT nvl((SELECT pk_translation.get_translation(i_lang, vsd.code_vital_sign_desc)
                             FROM vital_sign_desc vsd
                            WHERE vsd.id_vital_sign_desc = l_cur_value
                              AND vsd.flg_available = pk_alert_constant.g_available),
                           NULL)
                  INTO o_gcs_verbal_desc
                  FROM dual;
            
            ELSIF r.internal_name = pk_sev_scores_constant.g_param_type_gcs_motor
            THEN
            
                o_gcs_motor := l_cur_value;
            
                SELECT nvl((SELECT pk_translation.get_translation(i_lang, vsd.code_vital_sign_desc)
                             FROM vital_sign_desc vsd
                            WHERE vsd.id_vital_sign_desc = l_cur_value
                              AND vsd.flg_available = pk_alert_constant.g_available),
                           NULL)
                  INTO o_gcs_motor_desc
                  FROM dual;
            
            END IF;
        
            l_params(l_counter) := r.id_mtos_param;
            l_values(l_counter) := l_cur_value;
            l_counter := l_counter + 1;
        END LOOP;
    
        g_error := 'CALL TO GET_TOTAL_SCORE_INTERNAL';
        pk_alertlog.log_debug(g_error);
        IF NOT get_total_score_internal(i_lang           => i_lang,
                                        i_prof           => i_prof,
                                        i_id_patient     => i_id_patient,
                                        i_id_mtos_param  => l_params,
                                        i_value          => l_values,
                                        i_flg_score_type => pk_sev_scores_constant.g_flg_score_gcs,
                                        i_calculate_age  => pk_alert_constant.g_no,
                                        i_pat_age_years  => i_pat_age_years,
                                        o_score_a        => o_gcs_total,
                                        o_score_b        => l_score_b,
                                        o_total          => o_total,
                                        o_error          => o_error)
        THEN
            RAISE l_exception;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN l_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
    END get_glasgow_score_aux;

    /**********************************************************************************************
    * Database internal function. Used to return the values of a (A-a)O2 Gradient score.
    * This function is used during the screen loading, so the scores are correctly shown.
    *
    * @param i_lang                      Language ID
    * @param i_prof                      Professional info
    * @param i_id_episode                Episode ID
    * @param i_id_patient                Patient ID
    * @param i_pat_age_years             Patient age (in years)
    * @param i_paco2                     PaCO2 value
    * @param i_pao2                      PaO2 value
    * @param i_fio2                      FIO2 value
    * @param o_paco2                     PaCO2 value
    * @param o_pao2                      PaO2 value
    * @param o_fio2                      FIO2 value
    * @param o_o2_grd_total              (A-a) Gradient total value
    * @param o_apache3_fio2_02_grd       "If FIO2 >= 0.5: (A-a) O2" value (APACHE III)
    * @param o_apache3_fio2_pao2         "If FIO2 < 0.5: PaO2" value (APACHE III)
    * @param o_paco2_desc                PaCO2 value description
    * @param o_pao2_desc                 PaO2 value description
    * @param o_fio2_desc                 FIO2 value description
    * @param o_apache3_fio2_02_grd_desc "If FIO2 >= 0.5: (A-a) O2" value (APACHE III) description
    * @param o_apache3_fio2_pao2_desc   "If FIO2 < 0.5: PaO2" value (APACHE III) description
    * @param o_error                    Error message
    *                        
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            Tércio Soares
    * @version           2.6.0.4
    * @since             2010/11/03
    **********************************************************************************************/
    FUNCTION get_02_grd_score_aux
    (
        i_lang                     IN language.id_language%TYPE,
        i_prof                     IN profissional,
        i_id_episode               IN episode.id_episode%TYPE,
        i_id_patient               IN patient.id_patient%TYPE,
        i_pat_age_years            IN NUMBER,
        i_paco2                    IN NUMBER,
        i_pao2                     IN NUMBER,
        i_fio2                     IN NUMBER,
        o_paco2                    OUT NUMBER,
        o_pao2                     OUT NUMBER,
        o_fio2                     OUT NUMBER,
        o_o2_grd_total             OUT NUMBER,
        o_apache3_fio2_02_grd      OUT NUMBER,
        o_apache3_fio2_pao2        OUT NUMBER,
        o_paco2_desc               OUT VARCHAR2,
        o_pao2_desc                OUT VARCHAR2,
        o_fio2_desc                OUT VARCHAR2,
        o_apache3_fio2_02_grd_desc OUT VARCHAR2,
        o_apache3_fio2_pao2_desc   OUT VARCHAR2,
        o_error                    OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200) := 'GET_O2_GRD_SCORE_AUX';
        l_exception EXCEPTION;
    
        l_params table_number := table_number();
        l_values table_number := table_number();
    
        l_counter      NUMBER(6) := 1;
        l_cur_value    epis_mtos_param.registered_value%TYPE;
        l_unit_measure pk_translation.t_desc_translation;
    
        l_score_b NUMBER;
    
        o_total pk_types.cursor_type;
    
        CURSOR c_params IS
            SELECT mpm.id_mtos_param,
                   decode(mpt.flg_param_task_type,
                          pk_sev_scores_constant.g_flg_param_task_vital_sign,
                          mpt.id_param_task,
                          NULL) AS id_vital_sign,
                   mpm.flg_fill_type,
                   mpm.internal_name
              FROM mtos_param mpm, mtos_score mse, mtos_param_task mpt
             WHERE mpm.id_mtos_score = mse.id_mtos_score
               AND mse.flg_score_type = pk_sev_scores_constant.g_flg_score_o2grd
               AND mpm.flg_fill_type <> pk_sev_scores_constant.g_flg_fill_type_t
               AND mpm.flg_available = pk_alert_constant.g_yes
               AND mpt.id_mtos_param(+) = mpm.id_mtos_param
               AND mpt.flg_available(+) = pk_alert_constant.g_yes
             ORDER BY mpm.rank;
    BEGIN
    
        -- Get current the most recent registered value in the vital signs screen (VITAL_SIGN_READ).
        g_error := 'GET PARAM ID/VALUES';
        pk_alertlog.log_debug(g_error);
        FOR r IN c_params
        LOOP
            l_params.extend;
            l_values.extend;
        
            IF r.id_vital_sign IS NOT NULL
               AND r.flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_n -- Vital signs: numerical
            THEN
                BEGIN
                    g_error := 'GET VS PARAM VALUE';
                    pk_alertlog.log_debug(g_error);
                    SELECT t.value
                      INTO l_cur_value
                      FROM (SELECT vsr.value,
                                   vsr.id_vital_sign_desc,
                                   vsr.id_episode,
                                   row_number() over(PARTITION BY id_episode ORDER BY dt_vital_sign_read_tstz DESC) row_number
                              FROM vital_sign_read vsr
                             WHERE vsr.id_vital_sign = r.id_vital_sign
                               AND vsr.flg_state = pk_alert_constant.g_active
                               AND pk_delivery.check_vs_read_from_fetus(vsr.id_vital_sign_read) = 0) t
                     WHERE t.id_episode = i_id_episode
                       AND row_number = 1;
                EXCEPTION
                    WHEN no_data_found THEN
                        l_cur_value := NULL;
                END;
            
            END IF;
        
            IF r.internal_name = pk_sev_scores_constant.g_param_type_o2grd_paco2
            THEN
            
                IF i_paco2 IS NULL
                THEN
                    o_paco2 := l_cur_value;
                
                ELSE
                    o_paco2     := i_paco2;
                    l_cur_value := i_paco2;
                
                END IF;
            
                SELECT pk_vital_sign.get_vital_sign_unit_measure(i_lang,
                                                                 (SELECT pk_vital_sign.get_vs_um_inst(r.id_vital_sign,
                                                                                                      i_prof.institution,
                                                                                                      i_prof.software)
                                                                    FROM dual),
                                                                 NULL)
                  INTO l_unit_measure
                  FROM dual;
            
                o_paco2_desc := to_char(o_paco2) || ' ' || l_unit_measure;
            
            ELSIF r.internal_name = pk_sev_scores_constant.g_param_type_o2grd_pao2
            THEN
            
                IF i_pao2 IS NULL
                THEN
                    o_pao2 := l_cur_value;
                
                ELSE
                    o_pao2      := i_pao2;
                    l_cur_value := i_pao2;
                
                END IF;
            
                SELECT pk_vital_sign.get_vital_sign_unit_measure(i_lang,
                                                                 (SELECT pk_vital_sign.get_vs_um_inst(r.id_vital_sign,
                                                                                                      i_prof.institution,
                                                                                                      i_prof.software)
                                                                    FROM dual),
                                                                 NULL)
                  INTO l_unit_measure
                  FROM dual;
            
                o_pao2_desc := to_char(o_pao2) || ' ' || l_unit_measure;
            
            ELSIF r.internal_name = pk_sev_scores_constant.g_param_type_o2grd_fio2
            THEN
            
                IF i_fio2 IS NULL
                THEN
                    o_fio2 := l_cur_value;
                
                ELSE
                    o_fio2      := i_fio2;
                    l_cur_value := i_fio2;
                
                END IF;
            
                SELECT pk_vital_sign.get_vital_sign_unit_measure(i_lang,
                                                                 (SELECT pk_vital_sign.get_vs_um_inst(r.id_vital_sign,
                                                                                                      i_prof.institution,
                                                                                                      i_prof.software)
                                                                    FROM dual),
                                                                 NULL)
                  INTO l_unit_measure
                  FROM dual;
            
                o_fio2_desc := to_char(o_fio2) || ' ' || l_unit_measure;
            
            END IF;
        
            l_params(l_counter) := r.id_mtos_param;
            l_values(l_counter) := l_cur_value;
            l_counter := l_counter + 1;
        END LOOP;
    
        g_error := 'CALL TO GET_TOTAL_SCORE_INTERNAL';
        pk_alertlog.log_debug(g_error);
        IF NOT get_total_score_internal(i_lang           => i_lang,
                                        i_prof           => i_prof,
                                        i_id_patient     => i_id_patient,
                                        i_id_mtos_param  => l_params,
                                        i_value          => l_values,
                                        i_flg_score_type => pk_sev_scores_constant.g_flg_score_o2grd,
                                        i_calculate_age  => pk_alert_constant.g_no,
                                        i_pat_age_years  => i_pat_age_years,
                                        o_score_a        => o_o2_grd_total,
                                        o_score_b        => l_score_b,
                                        o_total          => o_total,
                                        o_error          => o_error)
        THEN
            RAISE l_exception;
        END IF;
    
        --APACHE III 
        IF o_fio2 >= 0.5
        THEN
            --(O2_GRAD)
            CASE
                WHEN (o_o2_grd_total < 200) THEN
                
                    SELECT mpv.value, pk_translation.get_translation(i_lang, mpv.code_mtos_param_value)
                      INTO o_apache3_fio2_02_grd, o_apache3_fio2_02_grd_desc
                      FROM mtos_param_value mpv
                     WHERE mpv.id_mtos_param_value = 583;
                
                WHEN (o_o2_grd_total BETWEEN 200 AND 349) THEN
                
                    SELECT mpv.value, pk_translation.get_translation(i_lang, mpv.code_mtos_param_value)
                      INTO o_apache3_fio2_02_grd, o_apache3_fio2_02_grd_desc
                      FROM mtos_param_value mpv
                     WHERE mpv.id_mtos_param_value = 584;
                
                WHEN (o_o2_grd_total BETWEEN 350 AND 499) THEN
                
                    SELECT mpv.value, pk_translation.get_translation(i_lang, mpv.code_mtos_param_value)
                      INTO o_apache3_fio2_02_grd, o_apache3_fio2_02_grd_desc
                      FROM mtos_param_value mpv
                     WHERE mpv.id_mtos_param_value = 585;
                
                WHEN (o_o2_grd_total >= 500) THEN
                
                    SELECT mpv.value, pk_translation.get_translation(i_lang, mpv.code_mtos_param_value)
                      INTO o_apache3_fio2_02_grd, o_apache3_fio2_02_grd_desc
                      FROM mtos_param_value mpv
                     WHERE mpv.id_mtos_param_value = 586;
                
                ELSE
                    o_apache3_fio2_02_grd      := 0;
                    o_apache3_fio2_02_grd_desc := NULL;
                
            END CASE;
        
            o_apache3_fio2_pao2      := 0;
            o_apache3_fio2_pao2_desc := NULL;
        
        ELSE
            --PaO2
        
            CASE
                WHEN (o_paco2 < 55) THEN
                
                    SELECT mpv.value, pk_translation.get_translation(i_lang, mpv.code_mtos_param_value)
                      INTO o_apache3_fio2_pao2, o_apache3_fio2_pao2_desc
                      FROM mtos_param_value mpv
                     WHERE mpv.id_mtos_param_value = 587;
                
                WHEN (o_paco2 BETWEEN 55 AND 60) THEN
                
                    SELECT mpv.value, pk_translation.get_translation(i_lang, mpv.code_mtos_param_value)
                      INTO o_apache3_fio2_pao2, o_apache3_fio2_pao2_desc
                      FROM mtos_param_value mpv
                     WHERE mpv.id_mtos_param_value = 588;
                
                WHEN (o_paco2 BETWEEN 61 AND 70) THEN
                
                    SELECT mpv.value, pk_translation.get_translation(i_lang, mpv.code_mtos_param_value)
                      INTO o_apache3_fio2_pao2, o_apache3_fio2_pao2_desc
                      FROM mtos_param_value mpv
                     WHERE mpv.id_mtos_param_value = 589;
                
                WHEN (o_paco2 >= 70) THEN
                
                    SELECT mpv.value, pk_translation.get_translation(i_lang, mpv.code_mtos_param_value)
                      INTO o_apache3_fio2_pao2, o_apache3_fio2_pao2_desc
                      FROM mtos_param_value mpv
                     WHERE mpv.id_mtos_param_value = 590;
                
                ELSE
                    o_apache3_fio2_02_grd      := 0;
                    o_apache3_fio2_02_grd_desc := NULL;
                
            END CASE;
        
            o_apache3_fio2_02_grd      := 0;
            o_apache3_fio2_02_grd_desc := NULL;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN l_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            RETURN FALSE;
    END get_02_grd_score_aux;

    /**********************************************************************************************
    * Auxilliary method. Get the CRIB II value for Birthweight and Gestation weeks considering the 
    * child gender
    *
    * @param i_pat_gender       Child gender
    * @param i_birthweight      Birthweight
    * @param i_gestation_weeks  Gestation weeks
    *                        
    * @return            Value for birthweight and gestation weeks relation
    *
    * @author            Tércio Soares
    * @version           2.6.0.4
    * @since             2010/10/29
    **********************************************************************************************/
    FUNCTION get_crib_weight_gest_aux
    (
        i_pat_gender      IN patient.gender%TYPE,
        i_birthweight     NUMBER,
        i_gestation_weeks NUMBER
    ) RETURN NUMBER IS
    
        l_score_value NUMBER;
    
    BEGIN
    
        CASE i_gestation_weeks
            WHEN 22 THEN
                CASE
                    WHEN (i_birthweight BETWEEN 251 AND 500) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 15;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 14;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 501 AND 750) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 14;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 13;
                        
                        END IF;
                    
                    ELSE
                        l_score_value := 0;
                    
                END CASE;
            
            WHEN 23 THEN
                CASE
                    WHEN (i_birthweight BETWEEN 251 AND 500) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 14;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 13;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 501 AND 750) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 13;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 12;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 751 AND 1000) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 12;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 11;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1001 AND 1250) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 12;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 11;
                        
                        END IF;
                    
                    ELSE
                        l_score_value := 0;
                    
                END CASE;
            
            WHEN 24 THEN
                CASE
                    WHEN (i_birthweight BETWEEN 251 AND 500) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 13;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 12;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 501 AND 750) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 12;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 11;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 751 AND 1000) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 11;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 10;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1001 AND 1250) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 10;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 10;
                        
                        END IF;
                    
                    ELSE
                        l_score_value := 0;
                    
                END CASE;
            
            WHEN 25 THEN
                CASE
                    WHEN (i_birthweight BETWEEN 251 AND 500) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 12;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 11;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 501 AND 750) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 11;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 10;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 751 AND 1000) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 10;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 9;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1001 AND 1250) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 9;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 8;
                        
                        END IF;
                    
                    ELSE
                        l_score_value := 0;
                    
                END CASE;
            
            WHEN 26 THEN
                CASE
                    WHEN (i_birthweight BETWEEN 251 AND 500) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 11;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 11;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 501 AND 750) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 10;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 9;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 751 AND 1000) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 8;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 8;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1001 AND 1250) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 8;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 7;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1251 AND 1500) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 8;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 7;
                        
                        END IF;
                    
                    ELSE
                        l_score_value := 0;
                    
                END CASE;
            
            WHEN 27 THEN
                CASE
                    WHEN (i_birthweight BETWEEN 251 AND 500) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 10;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 10;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 501 AND 750) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 9;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 8;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 751 AND 1000) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 7;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 7;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1001 AND 1250) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 7;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 6;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1251 AND 1500) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 6;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 5;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1501 AND 1750) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 6;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 6;
                        
                        END IF;
                    
                    ELSE
                        l_score_value := 0;
                    
                END CASE;
            
            WHEN 28 THEN
                CASE
                    WHEN (i_birthweight BETWEEN 251 AND 500) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 10;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 10;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 501 AND 750) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 8;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 8;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 751 AND 1000) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 7;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 6;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1001 AND 1250) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 6;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 5;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1251 AND 1500) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 5;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 4;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1501 AND 1750) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 5;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 4;
                        
                        END IF;
                    
                    ELSE
                        l_score_value := 0;
                    
                END CASE;
            
            WHEN 29 THEN
                CASE
                    WHEN (i_birthweight BETWEEN 501 AND 750) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 8;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 7;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 751 AND 1000) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 6;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 5;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1001 AND 1250) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 5;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 4;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1251 AND 1500) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 3;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 3;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1501 AND 1750) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 3;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 3;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1751 AND 2000) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 3;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 3;
                        
                        END IF;
                    
                    ELSE
                        l_score_value := 0;
                    
                END CASE;
            
            WHEN 30 THEN
                CASE
                    WHEN (i_birthweight BETWEEN 501 AND 750) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 8;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 7;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 751 AND 1000) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 6;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 5;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1001 AND 1250) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 4;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 3;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1251 AND 1500) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 3;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 2;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1501 AND 1750) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 2;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 1;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1751 AND 2000) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 1;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 1;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 2001 AND 2250) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 2;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 1;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 2251 AND 2500) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 3;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 2;
                        
                        END IF;
                    
                    ELSE
                        l_score_value := 0;
                    
                END CASE;
            
            WHEN 31 THEN
                CASE
                    WHEN (i_birthweight BETWEEN 501 AND 750) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 8;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 7;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 751 AND 1000) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 6;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 5;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1001 AND 1250) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 3;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 3;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1251 AND 1500) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 2;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 1;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1501 AND 1750) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 1;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 0;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 2501 AND 2750) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 1;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 1;
                        
                        END IF;
                    
                    ELSE
                        l_score_value := 0;
                    
                END CASE;
            
            WHEN 32 THEN
                CASE
                    WHEN (i_birthweight BETWEEN 751 AND 1000) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 6;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 5;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1001 AND 1250) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 3;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 3;
                        
                        END IF;
                    
                    WHEN (i_birthweight BETWEEN 1251 AND 1500) THEN
                        IF i_pat_gender = pk_sev_scores_constant.g_pat_gender_m
                        THEN
                            l_score_value := 1;
                        
                        ELSIF i_pat_gender = pk_sev_scores_constant.g_pat_gender_f
                        THEN
                            l_score_value := 1;
                        
                        END IF;
                    
                    ELSE
                        l_score_value := 0;
                    
                END CASE;
            
        END CASE;
    
        RETURN l_score_value;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN 0;
    END get_crib_weight_gest_aux;

    /**********************************************************************************************
    * Function used to return the total value of Oxyganation Index.
    *
    * @param i_lang            Language ID
    * @param i_prof            Professional info
    * @param i_paw             Mean Airway - Pressure (mmHg)
    * @param i_pao2            Mean Airway - PaO2 (mmHg)
    * @param i_fio2            Mean Airway - FIO2
    * @param o_oi_total_value  Total OI value for SNAP score calculation
    * @param o_oi_total_desc   Total OI value description to show in the screen
    * @param i_id_mtos_param   ID's of the score parameters
    * @param i_value           Registered values for each parameter
    * @param o_total           OI total value
    * @param o_error           Error message
    *                        
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            Tércio Soares
    * @version           2.6.0.4
    * @since             2010/10/29
    **********************************************************************************************/
    FUNCTION get_oi_total
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_id_mtos_param IN table_number,
        i_value         IN table_number,
        o_total         OUT pk_types.cursor_type,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_OI_TOTAL';
        l_oi_total FLOAT;
    
        l_internal_name    mtos_param.internal_name%TYPE;
        l_paw              NUMBER;
        l_pao2             NUMBER;
        l_fio2             NUMBER;
        l_oi_total_value   NUMBER;
        l_oi_total_desc    VARCHAR2(100);
        l_mtos_param_value mtos_param_value.id_mtos_param_value%TYPE;
    
    BEGIN
    
        FOR i IN 1 .. i_id_mtos_param.count
        LOOP
        
            SELECT mp.internal_name
              INTO l_internal_name
              FROM mtos_param mp
             WHERE mp.id_mtos_param = i_id_mtos_param(i);
        
            IF l_internal_name = pk_sev_scores_constant.g_param_type_oi_paw
            THEN
            
                l_paw := i_value(i);
            
            ELSIF l_internal_name = pk_sev_scores_constant.g_param_type_oi_pao2
            THEN
            
                l_pao2 := i_value(i);
            
            ELSIF l_internal_name = pk_sev_scores_constant.g_param_type_oi_fio2
            THEN
            
                l_fio2 := i_value(i);
            
            END IF;
        
        END LOOP;
    
        IF l_paw IS NULL
           OR l_pao2 IS NULL
           OR l_fio2 IS NULL
        THEN
            pk_types.open_my_cursor(o_total);
        ELSE
        
            g_error := 'GET OXYGENATION INDEX ((PAW * FIO2)/PaO2) CLACULATION';
            pk_alertlog.log_debug(g_package || '.' || l_func_name || ': ' || g_error);
            l_oi_total := (l_paw * l_fio2);
        
            IF (l_oi_total != 0 AND l_pao2 != 0)
            THEN
            
                l_oi_total := l_oi_total / l_pao2;
            
                l_oi_total := round(l_oi_total, 2);
            
            ELSE
            
                l_oi_total := 0;
            
            END IF;
        
            CASE
                WHEN (l_oi_total < 0.07 AND l_oi_total > 0) THEN
                    l_oi_total_value   := 0;
                    l_mtos_param_value := 458;
                    l_oi_total_desc    := '0' || to_char(l_oi_total);
                
                WHEN (l_oi_total BETWEEN 0.07 AND 0.2) THEN
                    l_oi_total_value   := 1;
                    l_mtos_param_value := 459;
                    l_oi_total_desc    := '0' || to_char(l_oi_total);
                
                WHEN (l_oi_total BETWEEN 0.21 AND 0.4) THEN
                    l_oi_total_value   := 3;
                    l_mtos_param_value := 460;
                    l_oi_total_desc    := '0' || to_char(l_oi_total);
                
                WHEN (l_oi_total > 0.4) THEN
                    l_oi_total_value   := 5;
                    l_mtos_param_value := 461;
                    IF l_oi_total < 1
                    THEN
                        l_oi_total_desc := '0' || to_char(l_oi_total);
                    ELSE
                        l_oi_total_desc := to_char(l_oi_total);
                    END IF;
                
                ELSE
                    l_oi_total_value   := 0;
                    l_mtos_param_value := 458;
                    l_oi_total_desc    := '-0' || ltrim(to_char(l_oi_total), '-');
                
            END CASE;
        
            --
            -- Total score values
            g_error := 'GET TOTAL SCORE ID/VALUES';
            pk_alertlog.log_debug(g_error);
            OPEN o_total FOR
                SELECT mse.id_mtos_score,
                       mpm.id_mtos_param,
                       l_oi_total_desc   total_score_desc,
                       l_oi_total_value  total_score
                  FROM mtos_param mpm, mtos_score mse
                 WHERE mpm.id_mtos_score = mse.id_mtos_score
                   AND mse.flg_score_type = pk_sev_scores_constant.g_flg_score_oi
                   AND mpm.flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_t
                   AND mpm.flg_available = pk_alert_constant.g_yes
                UNION
                SELECT mse.id_mtos_score,
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpv.code_mtos_param_value) total_score_desc,
                       mpv.value total_score
                  FROM mtos_param mpm, mtos_score mse, mtos_param_value mpv
                 WHERE mpm.id_mtos_score = mse.id_mtos_score
                   AND mse.flg_score_type = pk_sev_scores_constant.g_flg_score_snap
                   AND mpm.internal_name = pk_sev_scores_constant.g_param_type_snap_oi
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND mpv.id_mtos_param = mpm.id_mtos_param
                   AND mpv.id_mtos_param_value = l_mtos_param_value
                 ORDER BY id_mtos_param DESC;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_total);
            RETURN FALSE;
    END get_oi_total;

    /**********************************************************************************************
    * Function used to return the total value of Acute Physiology (APACHE III).
    *
    * @param i_lang            Language ID
    * @param i_prof            Professional info
    * @param i_pco2            pCO2 value
    * @param i_ph              pH value
    *                        
    * @return            Acute Physiology value
    *
    * @author            Tércio Soares
    * @version           2.6.0.4
    * @since             2010/11/02
    **********************************************************************************************/
    FUNCTION get_acute_physiology_total
    (
        i_lang IN language.id_language%TYPE,
        i_prof IN profissional,
        i_pco2 IN NUMBER,
        i_ph   IN FLOAT
    ) RETURN NUMBER IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_ACUTE_PHYSIOLOGY_TOTAL';
        l_value FLOAT;
    
    BEGIN
    
        g_error := 'GET ACUTE PHYSIOLOGY CALCULATION';
        pk_alertlog.log_debug(g_package || '.' || l_func_name || ': ' || g_error);
    
        CASE
            WHEN (i_ph < 7.20) THEN
                CASE
                    WHEN (i_pco2 <= 24) THEN
                        l_value := 12;
                    
                    WHEN (i_pco2 BETWEEN 25 AND 49) THEN
                        l_value := 12;
                    
                    WHEN (i_pco2 BETWEEN 50 AND 59) THEN
                        l_value := 4;
                    
                    ELSE
                        l_value := 4;
                    
                END CASE;
            
            WHEN (i_ph BETWEEN 7.20 AND 7.29) THEN
                CASE
                    WHEN (i_pco2 <= 24) THEN
                        l_value := 9;
                    
                    WHEN (i_pco2 BETWEEN 25 AND 29) THEN
                        l_value := 9;
                    
                    WHEN (i_pco2 BETWEEN 30 AND 34) THEN
                        l_value := 6;
                    
                    WHEN (i_pco2 BETWEEN 35 AND 49) THEN
                        l_value := 3;
                    
                    WHEN (i_pco2 BETWEEN 50 AND 59) THEN
                        l_value := 2;
                    
                    ELSE
                        l_value := 2;
                    
                END CASE;
            
            WHEN (i_ph BETWEEN 7.30 AND 7.34) THEN
                CASE
                    WHEN (i_pco2 <= 24) THEN
                        l_value := 9;
                    
                    WHEN (i_pco2 BETWEEN 25 AND 29) THEN
                        l_value := 9;
                    
                    WHEN (i_pco2 BETWEEN 30 AND 44) THEN
                        l_value := 0;
                    
                    WHEN (i_pco2 BETWEEN 45 AND 59) THEN
                        l_value := 1;
                    
                    ELSE
                        l_value := 1;
                    
                END CASE;
            
            WHEN (i_ph BETWEEN 7.35 AND 7.44) THEN
                CASE
                    WHEN (i_pco2 <= 24) THEN
                        l_value := 5;
                    
                    WHEN (i_pco2 BETWEEN 25 AND 29) THEN
                        l_value := 5;
                    
                    WHEN (i_pco2 BETWEEN 30 AND 44) THEN
                        l_value := 0;
                    
                    WHEN (i_pco2 BETWEEN 45 AND 59) THEN
                        l_value := 1;
                    
                    ELSE
                        l_value := 1;
                    
                END CASE;
            
            WHEN (i_ph BETWEEN 7.45 AND 7.49) THEN
                CASE
                    WHEN (i_pco2 <= 24) THEN
                        l_value := 5;
                    
                    WHEN (i_pco2 BETWEEN 25 AND 29) THEN
                        l_value := 5;
                    
                    WHEN (i_pco2 BETWEEN 30 AND 34) THEN
                        l_value := 0;
                    
                    WHEN (i_pco2 BETWEEN 35 AND 44) THEN
                        l_value := 2;
                    
                    WHEN (i_pco2 BETWEEN 45 AND 59) THEN
                        l_value := 12;
                    
                    ELSE
                        l_value := 12;
                    
                END CASE;
            
            WHEN (i_ph BETWEEN 7.50 AND 7.64) THEN
                CASE
                    WHEN (i_pco2 <= 24) THEN
                        l_value := 3;
                    
                    WHEN (i_pco2 BETWEEN 25 AND 34) THEN
                        l_value := 3;
                    
                    WHEN (i_pco2 BETWEEN 35 AND 59) THEN
                        l_value := 12;
                    
                    ELSE
                        l_value := 12;
                    
                END CASE;
            
            WHEN (i_ph >= 7.65) THEN
                CASE
                    WHEN (i_pco2 <= 24) THEN
                        l_value := 0;
                    
                    WHEN (i_pco2 BETWEEN 25 AND 34) THEN
                        l_value := 3;
                    
                    WHEN (i_pco2 BETWEEN 35 AND 59) THEN
                        l_value := 12;
                    
                    ELSE
                        l_value := 12;
                    
                END CASE;
            
            ELSE
                l_value := 0;
            
        END CASE;
    
        RETURN l_value;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN 0;
    END get_acute_physiology_total;

    /**********************************************************************************************
    * Function used to return the total value of Neurologic abnormalties  (APACHE III).
    *
    * @param i_lang      Language ID
    * @param i_prof      Professional info
    * @param i_eyes      Eyes Open
    * @param i_motor     Motor
    * @param i_verbal    Verbal
    *                        
    * @return            Neurologic abnormalty value
    *
    * @author            Tércio Soares
    * @version           2.6.0.4
    * @since             2010/11/02
    **********************************************************************************************/
    FUNCTION get_neuro_abnormalty_total
    (
        i_lang   IN language.id_language%TYPE,
        i_prof   IN profissional,
        i_eyes   IN NUMBER,
        i_motor  IN NUMBER,
        i_verbal IN NUMBER
    ) RETURN NUMBER IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_NEURO_ABNORMALTY_TOTAL';
        l_value NUMBER;
    
    BEGIN
    
        g_error := 'GET NEUROLOGIC ABNORMALTY CALCULATION';
        pk_alertlog.log_debug(g_package || '.' || l_func_name || ': ' || g_error);
    
        IF i_eyes = pk_sev_scores_constant.g_id_eyes_open --Eyes open
        THEN
        
            CASE
                WHEN (i_motor = pk_sev_scores_constant.g_id_motor_obeys_verbal) THEN
                    --Obeys verbal command
                
                    CASE
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_oriented) THEN
                            --Oriented, converses
                        
                            l_value := 0;
                        
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_confused) THEN
                            --Confused conversation
                        
                            l_value := 3;
                        
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_inapp_words) THEN
                            --Inappropriate words and incomprehensible sounds
                        
                            l_value := 10;
                        
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_no_response) THEN
                            --No response
                        
                            l_value := 15;
                        
                        ELSE
                        
                            l_value := 0;
                        
                    END CASE;
                
                WHEN (i_motor = pk_sev_scores_constant.g_id_motor_localizes_pain) THEN
                    --Localizes pain
                    CASE
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_oriented) THEN
                            --Oriented, converses
                        
                            l_value := 3;
                        
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_confused) THEN
                            --Confused conversation
                        
                            l_value := 8;
                        
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_inapp_words) THEN
                            --Inappropriate words and incomprehensible sounds
                        
                            l_value := 13;
                        
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_no_response) THEN
                            --No response
                        
                            l_value := 15;
                        
                        ELSE
                        
                            l_value := 0;
                        
                    END CASE;
                
                WHEN (i_motor = pk_sev_scores_constant.g_id_motor_flexion_withdrawal) THEN
                    --Flexion withdrawal / Decorticate rigidity
                    CASE
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_oriented) THEN
                            --Oriented, converses
                        
                            l_value := 3;
                        
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_confused) THEN
                            --Confused conversation
                        
                            l_value := 13;
                        
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_inapp_words) THEN
                            --Inappropriate words and incomprehensible sounds
                        
                            l_value := 24;
                        
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_no_response) THEN
                            --No response
                        
                            l_value := 24;
                        
                        ELSE
                        
                            l_value := 0;
                        
                    END CASE;
                
                WHEN (i_motor = pk_sev_scores_constant.g_id_motor_no_response) THEN
                    --Decerebrate rigidity / No response
                    CASE
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_oriented) THEN
                            --Oriented, converses
                        
                            l_value := 3;
                        
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_confused) THEN
                            --Confused conversation
                        
                            l_value := 13;
                        
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_inapp_words) THEN
                            --Inappropriate words and incomprehensible sounds
                        
                            l_value := 29;
                        
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_no_response) THEN
                            --No response
                        
                            l_value := 29;
                        
                        ELSE
                        
                            l_value := 0;
                        
                    END CASE;
                
                ELSE
                
                    l_value := 0;
                
            END CASE;
        
        ELSE
            -- Eyes closed
        
            CASE
                WHEN (i_motor = pk_sev_scores_constant.g_id_motor_obeys_verbal) THEN
                    --Obeys verbal command
                
                    CASE
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_no_response) THEN
                            --No response
                        
                            l_value := 16;
                        
                        ELSE
                        
                            l_value := 0;
                        
                    END CASE;
                
                WHEN (i_motor = pk_sev_scores_constant.g_id_motor_localizes_pain) THEN
                    --Localizes pain
                    CASE
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_no_response) THEN
                            --No response
                        
                            l_value := 16;
                        
                        ELSE
                        
                            l_value := 0;
                        
                    END CASE;
                
                WHEN (i_motor = pk_sev_scores_constant.g_id_motor_flexion_withdrawal) THEN
                    --Flexion withdrawal / Decorticate rigidity
                    CASE
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_inapp_words) THEN
                            --Inappropriate words and incomprehensible sounds
                        
                            l_value := 24;
                        
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_no_response) THEN
                            --No response
                        
                            l_value := 33;
                        
                        ELSE
                        
                            l_value := 0;
                        
                    END CASE;
                
                WHEN (i_motor = pk_sev_scores_constant.g_id_motor_no_response) THEN
                    --Decerebrate rigidity / No response
                    CASE
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_inapp_words) THEN
                            --Inappropriate words and incomprehensible sounds
                        
                            l_value := 24;
                        
                        WHEN (i_verbal = pk_sev_scores_constant.g_id_verbal_no_response) THEN
                            --No response
                        
                            l_value := 48;
                        
                        ELSE
                        
                            l_value := 0;
                        
                    END CASE;
                
                ELSE
                
                    l_value := 0;
                
            END CASE;
        
        END IF;
    
        RETURN l_value;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN 0;
    END get_neuro_abnormalty_total;

    /**********************************************************************************************
    * Database internal function. Used to return the values of a (A-a)O2 Gradient score.
    * This function is used during the screen loading, so the scores are correctly shown.
    *
    * @param i_lang                      Language ID
    * @param i_prof                      Professional info
    * @param i_id_patient                Patient ID
    * @param i_id_mtos_param             ID's of the score parameters
    * @param i_value                     Registered values for each parameter
    * @param o_total                     (A-a) Gradient total value
    * @param o_error                     Error message
    *                        
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            Tércio Soares
    * @version           2.6.0.4
    * @since             2010/11/26
    **********************************************************************************************/
    FUNCTION get_o2_grd_total
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_id_patient    IN patient.id_patient%TYPE,
        i_id_mtos_param IN table_number,
        i_value         IN table_number,
        o_total         OUT pk_types.cursor_type,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200) := 'GET_O2_GRD_TOTAL';
        l_exception EXCEPTION;
    
        l_pat_age       VARCHAR2(30);
        l_pat_age_years NUMBER(6);
    
        l_o2_grd_total NUMBER;
        l_score_b      NUMBER;
    
        l_internal_name    mtos_param.internal_name%TYPE;
        l_paco2            NUMBER;
        l_pao2             NUMBER;
        l_fio2             NUMBER;
        l_mtos_param_value mtos_param_value.id_mtos_param_value%TYPE;
    
    BEGIN
    
        g_error := 'GET PATIENT AGE (YEARS) - ID_PATIENT = ' || i_id_patient;
        pk_alertlog.log_debug(g_error);
        IF NOT get_pat_age_years(i_lang  => i_lang,
                                 i_prof  => i_prof,
                                 i_age   => l_pat_age,
                                 o_age   => l_pat_age_years,
                                 o_error => o_error)
        THEN
            RAISE l_exception;
        END IF;
    
        FOR i IN 1 .. i_id_mtos_param.count
        LOOP
        
            SELECT mp.internal_name
              INTO l_internal_name
              FROM mtos_param mp
             WHERE mp.id_mtos_param = i_id_mtos_param(i);
        
            IF l_internal_name = pk_sev_scores_constant.g_param_type_o2grd_paco2
            THEN
            
                l_paco2 := i_value(i);
            
            ELSIF l_internal_name = pk_sev_scores_constant.g_param_type_o2grd_pao2
            THEN
            
                l_pao2 := i_value(i);
            
            ELSIF l_internal_name = pk_sev_scores_constant.g_param_type_o2grd_fio2
            THEN
            
                l_fio2 := i_value(i);
            
            END IF;
        
        END LOOP;
    
        g_error := 'CALL TO GET_TOTAL_SCORE_INTERNAL';
        pk_alertlog.log_debug(g_error);
        IF NOT get_total_score_internal(i_lang           => i_lang,
                                        i_prof           => i_prof,
                                        i_id_patient     => i_id_patient,
                                        i_id_mtos_param  => i_id_mtos_param,
                                        i_value          => i_value,
                                        i_flg_score_type => pk_sev_scores_constant.g_flg_score_o2grd,
                                        i_calculate_age  => pk_alert_constant.g_no,
                                        i_pat_age_years  => l_pat_age_years,
                                        o_score_a        => l_o2_grd_total,
                                        o_score_b        => l_score_b,
                                        o_total          => o_total,
                                        o_error          => o_error)
        THEN
            RAISE l_exception;
        
        END IF;
    
        --APACHE III 
        IF l_fio2 >= 0.5
        THEN
            --(O2_GRAD)
            CASE
                WHEN (l_o2_grd_total < 200) THEN
                
                    l_mtos_param_value := 583;
                
                WHEN (l_o2_grd_total BETWEEN 200 AND 349) THEN
                
                    l_mtos_param_value := 584;
                
                WHEN (l_o2_grd_total BETWEEN 350 AND 499) THEN
                
                    l_mtos_param_value := 585;
                
                WHEN (l_o2_grd_total >= 500) THEN
                
                    l_mtos_param_value := 583;
                
                ELSE
                
                    l_mtos_param_value := 0;
                
            END CASE;
        
        ELSE
            --PaO2
        
            CASE
                WHEN (l_paco2 < 55) THEN
                
                    l_mtos_param_value := 587;
                
                WHEN (l_paco2 BETWEEN 55 AND 60) THEN
                
                    l_mtos_param_value := 588;
                
                WHEN (l_paco2 BETWEEN 61 AND 70) THEN
                
                    l_mtos_param_value := 589;
                
                WHEN (l_paco2 >= 70) THEN
                
                    l_mtos_param_value := 590;
                
                ELSE
                
                    l_mtos_param_value := 0;
                
            END CASE;
        
        END IF;
    
        -- Total score values
        g_error := 'GET TOTAL SCORE ID/VALUES';
        pk_alertlog.log_debug(g_error);
        OPEN o_total FOR
            SELECT mse.id_mtos_score,
                   mpm.id_mtos_param,
                   get_formatted_total(i_lang, i_prof, l_o2_grd_total, mpm.internal_name) total_score_desc,
                   l_o2_grd_total total_score
              FROM mtos_param mpm, mtos_score mse
             WHERE mpm.id_mtos_score = mse.id_mtos_score
               AND mse.flg_score_type = pk_sev_scores_constant.g_flg_score_o2grd
               AND mpm.flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_t
               AND mpm.flg_available = pk_alert_constant.g_yes
            UNION
            SELECT mse.id_mtos_score,
                   mpm.id_mtos_param,
                   pk_translation.get_translation(i_lang, mpv.code_mtos_param_value) total_score_desc,
                   mpv.value total_score
              FROM mtos_param mpm, mtos_score mse, mtos_param_value mpv
             WHERE mpm.id_mtos_score = mse.id_mtos_score
               AND mse.flg_score_type = pk_sev_scores_constant.g_flg_score_apache2
               AND mpm.internal_name = pk_sev_scores_constant.g_param_type_apache2_oxi
               AND mpm.flg_available = pk_alert_constant.g_yes
               AND mpv.id_mtos_param = mpm.id_mtos_param
               AND mpv.id_mtos_param_value = l_mtos_param_value
             ORDER BY id_mtos_param DESC;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN l_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_total);
            RETURN FALSE;
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_total);
            RETURN FALSE;
    END get_o2_grd_total;

    /**********************************************************************************************
    * Returns the options for the parameters filled by multichoice.
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_id_mtos_param      Parameter ID
    * @param i_flg_score_type     Type of score
    * @param i_id_patient         Patient ID
    * @param o_list               Cursor with the results
    * @param o_error              Error message
    *                        
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            José Brito
    * @version           1.0  
    * @since             2009/07/08
    **********************************************************************************************/
    FUNCTION get_param_options
    (
        i_lang           IN language.id_language%TYPE,
        i_prof           IN profissional,
        i_id_mtos_param  IN mtos_param.id_mtos_param%TYPE,
        i_flg_score_type IN mtos_score.flg_score_type%TYPE,
        i_id_patient     IN patient.id_patient%TYPE,
        o_list           OUT pk_types.cursor_type,
        o_error          OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200) := 'GET_PARAM_OPTIONS';
        --
        l_flg_fill_type      mtos_param.flg_fill_type%TYPE;
        l_id_vital_sign      vital_sign.id_vital_sign%TYPE;
        l_market             market.id_market%TYPE;
        l_age                vital_sign_unit_measure.age_min%TYPE;
        l_flg_param_task     mtos_param_task.flg_param_task_type%TYPE;
        l_flg_show_task_desc mtos_param_task.flg_show_task_desc%TYPE;
    BEGIN
    
        g_error := 'GET PARAM INFO';
        pk_alertlog.log_debug(g_error);
        SELECT mpm.flg_fill_type,
               decode(mpt.flg_param_task_type,
                      pk_sev_scores_constant.g_flg_param_task_vital_sign,
                      mpt.id_param_task,
                      NULL),
               mpt.flg_param_task_type,
               mpt.flg_show_task_desc
          INTO l_flg_fill_type, l_id_vital_sign, l_flg_param_task, l_flg_show_task_desc
          FROM mtos_param mpm
          LEFT JOIN (SELECT t.*
                       FROM mtos_param_task t
                      WHERE t.id_mtos_param = i_id_mtos_param
                        AND t.flg_available = pk_alert_constant.g_yes
                        AND rownum = 1) mpt
            ON mpt.id_mtos_param = mpm.id_mtos_param
         WHERE mpm.id_mtos_param = i_id_mtos_param;
    
        IF i_flg_score_type = pk_sev_scores_constant.g_flg_score_snap
        THEN
        
            IF l_flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_m
            THEN
                g_error := 'GET OPTION LIST (1)';
                pk_alertlog.log_debug(g_error);
                OPEN o_list FOR
                    SELECT t.data, t.label, t.value
                      FROM (SELECT mpe.id_mtos_param_value data,
                                   pk_translation.get_translation(i_lang, mpe.code_mtos_param_value) label,
                                   mpe.value,
                                   mpe.rank
                              FROM mtos_param_value mpe
                             WHERE mpe.id_mtos_param = i_id_mtos_param
                               AND mpe.flg_available = pk_alert_constant.g_yes) t
                     ORDER BY rank;
            ELSE
                pk_types.open_my_cursor(o_list);
            
            END IF;
        
        ELSE
        
            l_age := pk_patient.get_pat_age(i_lang, NULL, NULL, NULL, 'MONTHS', i_id_patient);
        
            IF (l_flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_m OR
               l_flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_s)
               AND (l_id_vital_sign IS NULL OR l_flg_show_task_desc = pk_alert_constant.g_no) -- Parameters selected by multichoice that ARE NOT vital signs
            THEN
            
                l_age   := pk_patient.get_pat_age(i_lang, NULL, NULL, NULL, 'MONTHS', i_id_patient);
                g_error := 'GET OPTION LIST (1)';
                pk_alertlog.log_debug(g_error);
                OPEN o_list FOR
                    SELECT t.data, t.label, t.value
                      FROM (SELECT mpe.id_mtos_param_value data,
                                   decode(i_flg_score_type,
                                          pk_sev_scores_constant.g_flg_score_iss, -- ISS score options show the score value
                                          mpe.value || ' - ' ||
                                          pk_translation.get_translation(i_lang, mpe.code_mtos_param_value),
                                          pk_sev_scores_constant.g_flg_score_isstw,
                                          mpe.value || ' - ' ||
                                          pk_translation.get_translation(i_lang, mpe.code_mtos_param_value),
                                          pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)) label,
                                   mpe.value, -- Needed for the ISS evaluation (to know if the value is 6)
                                   mpe.rank
                              FROM mtos_param_value mpe
                             WHERE (mpe.id_mtos_param = i_id_mtos_param AND mpe.flg_available = pk_alert_constant.g_yes AND
                                   mpe.age_min IS NULL AND mpe.age_max IS NULL)
                                OR (mpe.id_mtos_param = i_id_mtos_param AND mpe.flg_available = pk_alert_constant.g_yes AND
                                   (mpe.age_min IS NULL OR mpe.age_min <= l_age) AND
                                   (mpe.age_max IS NULL OR mpe.age_max > l_age))) t
                     ORDER BY rank;
            
            ELSIF l_flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_m
                  AND l_id_vital_sign IS NOT NULL -- Parameters selected by multichoice that ARE vital signs
            THEN
                l_market := pk_vital_sign.get_vs_desc_cfg_var(i_lang  => i_lang,
                                                              i_prof  => i_prof,
                                                              i_id_vs => l_id_vital_sign);
            
                g_error := 'GET OPTION LIST (2)';
                pk_alertlog.log_debug(g_error);
                OPEN o_list FOR
                    SELECT data, label
                      FROM (SELECT vsd.id_vital_sign_desc data,
                                   pk_vital_sign.get_vs_alias(i_lang, i_id_patient, vsd.code_vital_sign_desc) label,
                                   vsd.rank
                              FROM vital_sign_desc vsd
                             WHERE vsd.id_vital_sign = l_id_vital_sign
                               AND vsd.flg_available = pk_alert_constant.g_yes
                               AND vsd.id_market = l_market)
                     ORDER BY rank;
            
            ELSE
                pk_types.open_my_cursor(o_list);
            END IF;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_param_options;

    /**********************************************************************************************
    * Returns the vital sign value information according to the institution/market configuration.
    *
    * @param i_lang                Language ID
    * @param i_prof                Professional info
    * @param i_id_vital_sign_vsr   Vital sign ID
    * @param i_id_unit_measure_vsr Unit measure ID
    * @param i_value_vsr           Vital sign value
    * @param i_flg_return          Flag to indicate wich value should be returned 
    *                              (V - Value, U - Unit measure, MIN - Minimum value,
    *                               MAX - Maximum value, F - Format)
    *
    * @return            Vital sign infromation
    *
    * @author            Tércio Soares
    * @version           2.6.0.4  
    * @since             2010/12/07
    **********************************************************************************************/
    FUNCTION get_vital_sign_info
    (
        i_lang                IN language.id_language%TYPE,
        i_prof                IN profissional,
        i_id_vital_sign_vsr   IN vital_sign_read.id_vital_sign%TYPE,
        i_id_unit_measure_vsr IN vital_sign_read.id_unit_measure%TYPE,
        i_value_vsr           IN vital_sign_read.value%TYPE,
        i_flg_return          IN VARCHAR2
    ) RETURN NUMBER IS
        l_func_name CONSTANT VARCHAR2(200) := 'GET_VSR_VALUE_UM';
    
        l_id_unit_measure unit_measure.id_unit_measure%TYPE;
    
        l_val vital_sign_read.value%TYPE;
        l_um  vital_sign_read.id_unit_measure%TYPE;
    
    BEGIN
    
        IF i_value_vsr IS NOT NULL
        THEN
        
            l_id_unit_measure := pk_vital_sign.get_vs_um_inst(i_id_vital_sign_vsr, i_prof.institution, i_prof.software);
        
            IF i_id_unit_measure_vsr IS NOT NULL
               AND pk_unit_measure.are_convertible(i_unit_meas     => i_id_unit_measure_vsr,
                                                   i_unit_meas_def => l_id_unit_measure)
            THEN
                g_error := 'convert the vital sign value to the institution unit measure';
                pk_alertlog.log_debug(g_error);
                l_val := pk_unit_measure.get_unit_mea_conversion(i_value         => i_value_vsr,
                                                                 i_unit_meas     => i_id_unit_measure_vsr,
                                                                 i_unit_meas_def => l_id_unit_measure);
                l_um  := l_id_unit_measure;
            
            ELSE
                l_val := i_value_vsr;
                l_um  := i_id_unit_measure_vsr;
            
            END IF;
        
        ELSE
            l_val := NULL;
            l_um  := pk_vital_sign.get_vs_um_inst(i_id_vital_sign_vsr, i_prof.institution, i_prof.software);
        END IF;
    
        IF i_flg_return = 'V'
        THEN
        
            RETURN l_val;
        
        ELSIF i_flg_return = 'U'
        THEN
        
            IF i_id_vital_sign_vsr = pk_sev_scores_constant.g_vs_ph
            THEN
                RETURN NULL;
            ELSE
                RETURN l_um;
            END IF;
        
        END IF;
    
    END get_vital_sign_info;

    /**********************************************************************************************
    * Returns the vital sign unit measure according to the institution/market configuration.
    *
    * @param i_vital_sign   Vital sign ID
    * @param i_institution  Institution ID
    *
    * @return            Vital sign unit measure
    *
    * @author            Tércio Soares
    * @version           2.6.0.4  
    * @since             2010/12/09
    **********************************************************************************************/
    FUNCTION get_vs_um_inst_um
    (
        i_vital_sign  IN vital_sign.id_vital_sign%TYPE,
        i_institution IN institution.id_institution%TYPE,
        i_software    IN software.id_software%TYPE
    ) RETURN unit_measure.id_unit_measure%TYPE IS
        l_func_name CONSTANT VARCHAR2(200) := 'GET_VS_UM_INST';
    
    BEGIN
    
        IF i_vital_sign IS NULL
           OR i_vital_sign = pk_sev_scores_constant.g_vs_ph
        THEN
        
            RETURN NULL;
        
        ELSE
        
            RETURN pk_vital_sign.get_vs_um_inst(i_vital_sign, i_institution, i_software);
        
        END IF;
    
    END get_vs_um_inst_um;

    --ANALYSIS_PARAMETER
    FUNCTION get_ap_um_inst_um
    (
        i_analysis_parameter IN analysis_parameter.id_content%TYPE,
        i_institution        IN institution.id_institution%TYPE,
        i_software           IN software.id_software%TYPE
    ) RETURN unit_measure.id_unit_measure%TYPE IS
    
        l_id_unit_measure unit_measure.id_unit_measure%TYPE;
    
    BEGIN
    
        IF i_analysis_parameter IS NULL
        THEN
            RETURN NULL;
        ELSE
        
            SELECT id_unit_measure
              INTO l_id_unit_measure
              FROM (SELECT aum.id_unit_measure, aum.flg_default
                    
                      FROM analysis_parameter ap
                      JOIN analysis_param param
                        ON param.id_analysis_parameter = ap.id_analysis_parameter
                       AND param.id_institution = i_institution
                       AND param.id_software = i_software
                      JOIN analysis_unit_measure aum
                        ON aum.id_analysis = param.id_analysis
                       AND aum.id_sample_type = param.id_sample_type
                       AND aum.id_institution = param.id_institution
                       AND aum.id_software = param.id_software
                     WHERE ap.id_content = i_analysis_parameter
                     ORDER BY aum.flg_default DESC)
             WHERE rownum = 1;
        END IF;
        RETURN l_id_unit_measure;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_ap_um_inst_um;

    /**********************************************************************************************
    * Returns to PDMS all scores registered in a given visit
    *
    * @param   i_lang              Professional preferred language
    * @param   i_prof              Professional identification and its context (institution and software)
    * @param   i_id_visit          Visit ID
    * @param   i_dt_begin          Begin date
    * @param   i_dt_end            End date
    * @param   o_sev_scoress       Severity scores
    * @param   o_error             Error information
    *
    * @return            TRUE if successful, FALSE otherwise
    *
    * @author            Tércio Soares
    * @version           2.6.0.5
    * @since             2010/12/17
    **********************************************************************************************/
    FUNCTION get_sev_scores_pdms
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_id_visit    IN visit.id_visit%TYPE,
        i_dt_begin    IN VARCHAR2,
        i_dt_end      IN VARCHAR2,
        o_sev_scoress OUT pk_types.cursor_type,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200) := 'GET_SEV_SCORES_PDMS';
    
        l_dt_begin epis_mtos_score.dt_create%TYPE;
        l_dt_end   epis_mtos_score.dt_create%TYPE;
    
    BEGIN
    
        l_dt_begin := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_begin, NULL);
        l_dt_end   := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_end, NULL);
    
        g_error := 'GET SEV SCORES INFO';
        pk_alertlog.log_info(text => g_error, object_name => g_package, sub_object_name => l_func_name);
        OPEN o_sev_scoress FOR
            SELECT ems.id_mtos_score id_severity_score,
                   pk_sev_scores_core.get_desc_score(i_lang, i_prof, NULL, m.code_mtos_score, m.code_mtos_score_abbrev) severity_score_desc,
                   pk_translation.get_translation(i_lang, m.code_mtos_score_abbrev) severity_score_abbrev_desc,
                   --
                   emp.registered_value total,
                   --
                   pk_sev_scores_core.get_formatted_total(i_lang,
                                                          i_prof,
                                                          emp.registered_value,
                                                          mp.internal_name,
                                                          ems.id_epis_mtos_score) total_desc,
                   ems.id_episode,
                   ems.id_epis_mtos_score,
                   emp.id_mtos_param,
                   --
                   pk_translation.get_translation(i_lang, mp.code_mtos_param) mtos_param_desc,
                   --
                   ems.id_prof_create,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, ems.id_prof_create) prof_name,
                   pk_prof_utils.get_spec_signature(i_lang, i_prof, ems.id_prof_create, ems.dt_create, ems.id_episode) desc_speciality,
                   pk_date_utils.date_send_tsz(i_lang, ems.dt_create, i_prof) dt_create,
                   m.rank mtos_score_rank,
                   mp.rank mtos_param_rank
              FROM epis_mtos_score ems
              JOIN mtos_score m
                ON m.id_mtos_score = ems.id_mtos_score
              JOIN epis_mtos_param emp
                ON emp.id_epis_mtos_score = ems.id_epis_mtos_score
              JOIN mtos_param mp
                ON mp.id_mtos_param = emp.id_mtos_param
             WHERE ems.id_episode IN (SELECT e.id_episode
                                        FROM episode e
                                       WHERE e.id_visit = i_id_visit)
               AND ems.flg_status = pk_sev_scores_constant.g_flg_status_a
               AND mp.flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_t
               AND mp.id_mtos_relation IS NULL
               AND (ems.dt_create >= l_dt_begin OR i_dt_begin IS NULL)
               AND (ems.dt_create <= l_dt_end OR i_dt_end IS NULL)
             ORDER BY m.rank, mp.rank;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang     => i_lang,
                                              i_sqlcode  => SQLCODE,
                                              i_sqlerrm  => SQLERRM,
                                              i_message  => g_error,
                                              i_owner    => g_owner,
                                              i_package  => g_package,
                                              i_function => l_func_name,
                                              o_error    => o_error);
            pk_types.open_my_cursor(o_sev_scoress);
            RETURN FALSE;
    END get_sev_scores_pdms;

    /********************************************************************************************
    * Shows all parameters for CRUB65 score.
    * Returns the parameters properties and current value.
    *
    * @param i_lang                   Preferred language ID for this professional 
    * @param i_prof                   Object (professional ID, institution ID, software ID)
    * @param i_id_patient             Patient ID
    * @param i_episode                Episode ID 
    * @param i_epis_mtos_score        Severity score evaluation ID
    * @param o_list                   Parameter list
    * @param o_error                  Error
    *
    * @return                         true or false on success or error
    *
    * @author                         Elisabete Bugalho
    * @version                        2.6.2.1.7
    * @since                          2012/09/11
    **********************************************************************************************/
    FUNCTION get_curb65_param_list
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_patient      IN patient.id_patient%TYPE,
        i_episode         IN episode.id_episode%TYPE,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        i_mtos_score      IN mtos_score.id_mtos_score%TYPE,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_CURB65_PARAM_LIST';
        l_internal_error EXCEPTION;
    
    BEGIN
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       emp.registered_value registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       decode(mpm.flg_fill_type,
                              pk_sev_scores_constant.g_flg_fill_type_m,
                              (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                                 FROM mtos_param_value mpe
                                WHERE mpe.id_mtos_param_value = emp.registered_value),
                              get_registered_value_desc(i_lang,
                                                        i_prof,
                                                        emp.id_epis_mtos_score,
                                                        mpm.id_mtos_param,
                                                        emp.extra_score)) registered_value_desc,
                       NULL unit_measure_desc,
                       -- RELATION
                       NULL relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       NULL related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       NULL id_unit_measure,
                       NULL val_min,
                       NULL val_max,
                       NULL format_num,
                       NULL id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, epis_mtos_param emp, mtos_param_task mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_curb65
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                 ORDER BY score_rank, param_rank;
        ELSE
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc,
                       -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       NULL registered_value,
                       NULL registered_value_desc,
                       NULL unit_measure_desc,
                       -- RELATION
                       NULL relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       NULL related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       NULL id_unit_measure,
                       NULL val_min,
                       NULL val_max,
                       NULL format_num,
                       NULL id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, mtos_param_task mpt
                 WHERE mse.id_mtos_score = pk_sev_scores_constant.g_id_score_curb65
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                 ORDER BY score_rank, param_rank;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_curb65_param_list;

    /***************************************************************************
    ***************************************************************************/
    FUNCTION get_task_isstw_description
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_id_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE
    ) RETURN CLOB IS
        l_ret             CLOB;
        l_prec_score_rank NUMBER;
    BEGIN
        FOR l_rec IN (SELECT ems.id_epis_mtos_score,
                             mpm.flg_fill_type,
                             pk_translation.get_translation(i_lang, mse.code_mtos_score) score_desc,
                             (SELECT pk_translation.get_translation(i_lang, mpm.code_mtos_param)
                                FROM dual) param_desc,
                             pk_sev_scores_core.get_registered_value_desc(i_lang,
                                                                          i_prof,
                                                                          emp.id_epis_mtos_score,
                                                                          mpm.id_mtos_param,
                                                                          emp.extra_score) registered_value_desc,
                             mse.rank score_rank
                        FROM epis_mtos_score ems
                        JOIN epis_mtos_param emp
                          ON ems.id_epis_mtos_score = emp.id_epis_mtos_score
                        JOIN mtos_param mpm
                          ON mpm.id_mtos_param = emp.id_mtos_param
                        JOIN mtos_score mse
                          ON mse.id_mtos_score = mpm.id_mtos_score
                       WHERE ems.id_epis_mtos_score = i_id_epis_mtos_score
                         AND emp.registered_value IS NOT NULL
                         AND ems.flg_status IN ('A', 'C')
                       ORDER BY mse.rank, mpm.rank ASC, mpm.id_mtos_param)
        LOOP
        
            IF l_prec_score_rank != l_rec.score_rank
               OR l_prec_score_rank IS NULL
            THEN
                --l_ret := l_ret || chr(10);
                l_ret := l_ret || l_rec.score_desc;
                l_ret := l_ret || chr(10);
            END IF;
            l_ret := l_ret || l_rec.param_desc || ': ' || l_rec.registered_value_desc;
            l_ret := l_ret || chr(10);
        
            l_prec_score_rank := l_rec.score_rank;
        END LOOP;
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_task_isstw_description;

    /***************************************************************************
    * Shows APACHE II TW description.
    * Returns the scores and description.
    *
    * @param i_lang                   Preferred language ID for this professional
    * @param i_prof                   Object (professional ID, institution ID, software ID)
    * @param i_id_epis_mtos_score     MTOS identifier
    * @param i_flg_description        Task description type (S-short; L-long; D-detail; C- conditional)
    * @param i_description_condition  String that will dictate how the description should be built
    *
    * @return                         CLOB
    *
    * @author                         Howard Cheng
    * @version                        2.7.2.4
    * @since                          2018/02/07  
    ***************************************************************************/
    FUNCTION get_task_apachetw_description
    (
        i_lang                  IN language.id_language%TYPE,
        i_prof                  IN profissional,
        i_id_epis_mtos_score    IN epis_mtos_score.id_epis_mtos_score%TYPE,
        i_flg_description       IN pn_dblock_ttp_mkt.flg_description%TYPE,
        i_description_condition IN pn_dblock_ttp_mkt.description_condition%TYPE
    ) RETURN CLOB IS
        l_ret        CLOB;
        l_mtos_param table_varchar := table_varchar();
        l_colon   CONSTANT VARCHAR2(2 CHAR) := pk_prog_notes_constants.g_colon;
        l_space   CONSTANT VARCHAR2(2 CHAR) := pk_prog_notes_constants.g_space;
        l_newline CONSTANT VARCHAR2(2 CHAR) := pk_prog_notes_constants.g_new_line;
    BEGIN
        IF (i_flg_description = pk_prog_notes_constants.g_flg_description_c)
        THEN
            l_mtos_param := pk_string_utils.str_split(i_list => i_description_condition, i_delim => '|');
        ELSE
            l_mtos_param := NULL;
        END IF;
    
        FOR l_rec IN (SELECT ems.id_epis_mtos_score,
                             pk_translation.get_translation(i_lang, mse.code_mtos_score) score_desc,
                             mpm.id_mtos_param id_mtos_param,
                             (SELECT pk_translation.get_translation(i_lang, mpm.code_mtos_param)
                                FROM dual) param_desc,
                             pk_sev_scores_core.get_registered_value_desc(i_lang,
                                                                          i_prof,
                                                                          emp.id_epis_mtos_score,
                                                                          mpm.id_mtos_param,
                                                                          emp.extra_score) registered_value_desc
                        FROM epis_mtos_score ems
                        JOIN epis_mtos_param emp
                          ON ems.id_epis_mtos_score = emp.id_epis_mtos_score
                        JOIN mtos_param mpm
                          ON mpm.id_mtos_param = emp.id_mtos_param
                        JOIN mtos_score mse
                          ON mse.id_mtos_score = mpm.id_mtos_score
                       WHERE ems.id_epis_mtos_score = i_id_epis_mtos_score
                         AND emp.registered_value IS NOT NULL
                         AND ems.flg_status IN ('A', 'C')
                         AND (l_mtos_param IS NULL OR
                             mpm.internal_name IN (SELECT /*+opt_estimate(table t rows=1)*/
                                                     column_value
                                                      FROM TABLE(l_mtos_param) t)))
        LOOP
            IF (l_rec.id_mtos_param = pk_sev_scores_constant.g_apache_diagnosis)
            THEN
                l_ret := l_ret || l_rec.param_desc || l_colon || l_space || l_rec.registered_value_desc || l_newline ||
                         l_newline;
            ELSE
                l_ret := l_ret || l_rec.param_desc || l_colon || l_space || l_rec.registered_value_desc || l_newline;
            END IF;
        END LOOP;
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_task_apachetw_description;

    /**
    * Get EPIS_MTOS_SCORE description.
    * Used for the task timeline easy access (HandP import mechanism).
    *
    * @param i_lang         language identifier
    * @param i_prof         logged professional structure
    * @param i_ID_EPIS_MTOS_SCORE         mtos   identifier
    * @param i_desc_type    desc_type S-short/L-long
    *
    * @return               task description
    *
    * @author               Paulo Teixeira
    * @version               2.6.3
    * @since                2013/05/07
    */
    FUNCTION get_task_description
    (
        i_lang                  IN language.id_language%TYPE,
        i_prof                  IN profissional,
        i_id_epis_mtos_score    IN epis_mtos_score.id_epis_mtos_score%TYPE,
        i_patient               IN patient.id_patient%TYPE DEFAULT NULL,
        i_desc_type             IN VARCHAR2,
        i_flg_description       IN pn_dblock_ttp_mkt.flg_description%TYPE,
        i_description_condition IN pn_dblock_ttp_mkt.description_condition%TYPE
    ) RETURN CLOB IS
        l_mtos_total_desc table_varchar := table_varchar();
        l_mtos_total      table_varchar := table_varchar();
        l_ret             CLOB;
        l_id_patient      episode.id_patient%TYPE;
        l_translated_code sys_message.desc_message%TYPE;
        l_mtos_score      mtos_score.id_mtos_score%TYPE;
        l_id_market       market.id_market%TYPE;
    BEGIN
        l_id_market := pk_utils.get_institution_market(i_lang => i_lang, i_id_institution => i_prof.institution);
    
        l_mtos_score := pk_sev_scores_core.get_epis_mtos_score(i_lang,
                                                               i_prof,
                                                               i_patient,
                                                               NULL,
                                                               i_id_epis_mtos_score,
                                                               NULL);
    
        IF l_mtos_score = pk_sev_scores_constant.g_id_score_isstw
        THEN
            l_ret := get_task_isstw_description(i_lang               => i_lang,
                                                i_prof               => i_prof,
                                                i_id_epis_mtos_score => i_id_epis_mtos_score);
        ELSIF l_mtos_score = pk_sev_scores_constant.g_id_score_apache_tw
        THEN
            l_ret := get_task_apachetw_description(i_lang                  => i_lang,
                                                   i_prof                  => i_prof,
                                                   i_id_epis_mtos_score    => i_id_epis_mtos_score,
                                                   i_flg_description       => i_flg_description,
                                                   i_description_condition => i_description_condition);
        ELSE
            SELECT e.id_patient,
                   pk_sev_scores_core.get_desc_score(i_lang,
                                                     i_prof,
                                                     NULL,
                                                     mse.code_mtos_score,
                                                     mse.code_mtos_score_abbrev) translated_code
              INTO l_id_patient, l_translated_code
              FROM epis_mtos_score ems
              JOIN episode e
                ON e.id_episode = ems.id_episode
              JOIN mtos_score mse
                ON mse.id_mtos_score = ems.id_mtos_score
             WHERE ems.id_epis_mtos_score = i_id_epis_mtos_score;
        
            l_mtos_total_desc := pk_sev_scores_core.get_epis_mtos_total_desc(i_lang,
                                                                             i_prof,
                                                                             l_id_patient,
                                                                             i_id_epis_mtos_score);
        
            l_mtos_total := pk_sev_scores_core.get_epis_mtos_total(i_lang, i_prof, l_id_patient, i_id_epis_mtos_score);
            IF l_mtos_score = pk_sev_scores_constant.g_id_score_apache2
               AND l_id_market = pk_alert_constant.g_id_market_tw
            THEN
                l_ret := pk_message.get_message(i_lang => i_lang, i_code_mess => 'ICU_ASSESSMENT_SUMMARY.M001') ||
                         g_colon || l_mtos_total(2) || g_space || g_slash || g_space ||
                         pk_message.get_message(i_lang => i_lang, i_code_mess => 'ICU_ASSESSMENT_SUMMARY.M002') ||
                         g_space || g_slash || g_space ||
                         pk_message.get_message(i_lang => i_lang, i_code_mess => 'ICU_ASSESSMENT_SUMMARY.M003') ||
                         g_colon || l_mtos_total(1);
            ELSE
                l_ret := l_translated_code;
            
                FOR i IN 1 .. l_mtos_total.count
                LOOP
                    l_ret := l_ret || chr(10) || l_mtos_total(i) || g_space || g_open || l_mtos_total_desc(i) ||
                             g_close;
                END LOOP;
            END IF;
        END IF;
    
        RETURN l_ret;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_task_description;

    /**********************************************************************************************
    * get actions of the severity scores records
    *
    * @param       i_lang                   preferred language id for this professional
    * @param       i_prof                   professional type
    * @param       i_task_request           task request id (monitorization id)
    * @param       o_actions                actions cursor info 
    * @param       o_error                  error message
    *
    * @return      boolean                  true on success, otherwise false
    *
    * @author                               Sofia Mendes
    * @version                              2.6.2
    * @since                                23-May-2013
    **********************************************************************************************/
    FUNCTION get_sev_scores_actions
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_task_request IN epis_mtos_score.id_epis_mtos_score%TYPE,
        i_patient      IN patient.id_patient%TYPE DEFAULT NULL,
        o_actions      OUT pk_types.cursor_type,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
        l_mtos_score         mtos_score.id_mtos_score%TYPE;
        l_flg_exclude_update VARCHAR2(1 CHAR) := pk_alert_constant.g_no;
        l_id_patient         patient.id_patient%TYPE;
    BEGIN
        ----------------------------------------------------
        IF i_patient IS NULL
        THEN
            l_id_patient := get_epis_mtos_score_patient(i_lang               => i_lang,
                                                        i_prof               => i_prof,
                                                        i_id_epis_mtos_score => i_task_request);
        ELSE
            l_id_patient := i_patient;
        END IF;
    
        ----------------------------------------------------
        l_mtos_score := pk_sev_scores_core.get_epis_mtos_score(i_lang, i_prof, l_id_patient, NULL, i_task_request, NULL);
    
        IF l_mtos_score IN (pk_sev_scores_constant.g_id_score_isstw,
                            pk_sev_scores_constant.g_id_score_apache_tw,
                            pk_sev_scores_constant.g_id_score_sofa_tw,
                            pk_sev_scores_constant.g_id_score_vte,
                            pk_sev_scores_constant.g_id_score_si_it_is,
                            pk_sev_scores_constant.g_id_score_timi,
                            pk_sev_scores_constant.g_id_score_prism,
                            pk_sev_scores_constant.g_id_score_stemi,
                            pk_sev_scores_constant.g_id_score_nstemi)
        THEN
            l_flg_exclude_update := pk_alert_constant.g_yes;
        END IF;
    
        ----------------------------------------------------    
        g_error := 'CALL PK_ACTION.TF_GET_ACTIONS';
        pk_alertlog.log_debug(g_error);
        OPEN o_actions FOR
            SELECT id_action,
                   id_parent,
                   level_nr,
                   from_state,
                   to_state,
                   desc_action,
                   icon,
                   flg_default,
                   flg_active,
                   action
              FROM TABLE(pk_action.tf_get_actions(i_lang, i_prof, 'SEV_SCORES_ACTION', NULL)) act
             WHERE ((id_action != 2506 AND l_flg_exclude_update = pk_alert_constant.g_yes) OR
                   (l_flg_exclude_update = pk_alert_constant.g_no));
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              'GET_SEV_SCORES_ACTIONS',
                                              o_error);
            RETURN FALSE;
    END get_sev_scores_actions;

    /**********************************************************************************************
    * Get severity score add edit screen
    *
    * @param       i_lang                   preferred language id for this professional
    * @param       i_prof                   professional type
    * @param       i_id_mtos_score          Severity score Id
    * @param       o_screen                 Add/edit screen name 
    * @param       o_error                  error message
    *
    * @return      boolean                  true on success, otherwise false
    *
    * @author                               Sofia Mendes
    * @version                              2.6.2
    * @since                                31-May-2013
    **********************************************************************************************/
    FUNCTION get_sev_score_screen
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_id_mtos_score IN mtos_score.id_mtos_score%TYPE,
        o_screen        OUT mtos_score.screen_name%TYPE,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
    BEGIN
        g_error := 'GET screen. i_id_mtos_score: ' || i_id_mtos_score;
        pk_alertlog.log_debug(g_error);
        SELECT ms.screen_name
          INTO o_screen
          FROM mtos_score ms
         WHERE ms.id_mtos_score = i_id_mtos_score;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              'GET_SEV_SCORE_SCREEN',
                                              o_error);
            RETURN FALSE;
    END get_sev_score_screen;

    /********************************************************************************************
    ============================================================================================================================
    =============================== ALERT-255254 - NEWS AND PEWS ==============================================================
    ============================================================================================================================
        **********************************************************************************************/

    /********************************************************************************************
    * Shows all parameters for NEWS scores.
    * Returns the parameters properties and current value.
    *
    * @param i_lang                   Preferred language ID for this professional 
    * @param i_prof                   Object (professional ID, institution ID, software ID)
    * @param i_id_patient             Patient ID
    * @param i_episode                Episode ID 
    * @param i_mtos_score             Severity score ID
    * @param i_epis_mtos_score        Severity score evaluation ID
    * @param o_list                   Parameter list
    * @param o_error                  Error
    *
    * @return                         true or false on success or error
    *
    * @author                         Tércio Soares
    * @version                        2.6.0.4
    * @since                          2010/10/26
    **********************************************************************************************/
    FUNCTION get_general_param_list
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_patient      IN patient.id_patient%TYPE,
        i_episode         IN episode.id_episode%TYPE,
        i_mtos_score      IN mtos_score.id_mtos_score%TYPE,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_list            OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name CONSTANT VARCHAR2(200) := 'GET_CRIB_PARAM_LIST';
        l_internal_error EXCEPTION;
        l_age vital_sign_unit_measure.age_min%TYPE;
    
    BEGIN
    
        l_age := pk_patient.get_pat_age(i_lang, NULL, NULL, NULL, 'MONTHS', i_id_patient);
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT mse.id_mtos_score,
                       mse.flg_score_type,
                       (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                               pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                          FROM dual) score_desc, -- Parameters
                       mpm.id_mtos_param,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       mpm.flg_fill_type,
                       mse.rank score_rank,
                       mpm.rank param_rank,
                       mpm.internal_name,
                       -- REGISTERED VALUE
                       emp.registered_value registered_value,
                       -- REGISTERED VALUE DESCRIPTION                       
                       decode(mpm.flg_fill_type,
                              pk_sev_scores_constant.g_flg_fill_type_m,
                              pk_sev_scores_core.get_score_desc(i_lang, i_prof, mpm.id_mtos_param, emp.registered_value),
                              --get_registered_value_desc(i_lang, i_prof, emp.id_epis_mtos_score, mpm.id_mtos_param),                             
                              pk_sev_scores_constant.g_flg_fill_type_t,
                              --                              pk_sev_scores_core.get_score_desc(i_lang, mpm.id_mtos_param, emp.registered_value),
                              get_formatted_total(i_lang,
                                                  i_prof,
                                                  emp.registered_value,
                                                  mpm.internal_name,
                                                  NULL,
                                                  mpm.id_mtos_param),
                              to_char(emp.registered_value)) registered_value_desc,
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              pk_vital_sign.get_vital_sign_unit_measure(i_lang,
                                                                        (SELECT pk_vital_sign.get_vs_um_inst(decode(mpt.flg_param_task_type,
                                                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                    mpt.id_param_task,
                                                                                                                    NULL),
                                                                                                             i_prof.institution,
                                                                                                             i_prof.software)
                                                                           FROM dual),
                                                                        vsr.id_vs_scales_element)) desc_unit_measure,
                       
                       -- RELATION
                       NULL relation, -- Used by Flash to know where to copy the value of the current parameter
                       -- List with the MTOS_SCORE ID's. 
                       -- Used by Flash to find all the blocks where the current parameter must be copied.
                       NULL related_scores,
                       -- VITAL SIGNS
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       (SELECT pk_vital_sign.get_vs_um_inst(decode(mpt.flg_param_task_type,
                                                                   pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                   mpt.id_param_task,
                                                                   NULL),
                                                            i_prof.institution,
                                                            i_prof.software)
                          FROM dual) id_unit_measure,
                       nvl((SELECT pk_vital_sign_core.get_vsum_val_min(i_lang            => i_lang,
                                                                      i_prof            => i_prof,
                                                                      i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                  mpt.id_param_task,
                                                                                                  NULL),
                                                                      i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                            mpt.id_param_task,
                                                                                                                            NULL),
                                                                                                                     i_prof.institution,
                                                                                                                     i_prof.software)
                                                                                              FROM dual),
                                                                      i_id_institution  => i_prof.institution,
                                                                      i_id_software     => i_prof.software,
                                                                      i_age             => l_age)
                             FROM dual),
                           mpm.val_min) val_min,
                       nvl((SELECT pk_vital_sign_core.get_vsum_val_max(i_lang            => i_lang,
                                                                      i_prof            => i_prof,
                                                                      i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                  mpt.id_param_task,
                                                                                                  NULL),
                                                                      i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                            mpt.id_param_task,
                                                                                                                            NULL),
                                                                                                                     i_prof.institution,
                                                                                                                     i_prof.software)
                                                                                              FROM dual),
                                                                      i_id_institution  => i_prof.institution,
                                                                      i_id_software     => i_prof.software,
                                                                      i_age             => l_age)
                             FROM dual),
                           mpm.val_max) val_max,
                       nvl((SELECT pk_vital_sign_core.get_vsum_format_num(i_lang            => i_lang,
                                                                         i_prof            => i_prof,
                                                                         i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                     mpt.id_param_task,
                                                                                                     NULL),
                                                                         i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                               pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                               mpt.id_param_task,
                                                                                                                               NULL),
                                                                                                                        i_prof.institution,
                                                                                                                        i_prof.software)
                                                                                                 FROM dual),
                                                                         i_id_institution  => i_prof.institution,
                                                                         i_id_software     => i_prof.software,
                                                                         i_age             => l_age)
                             FROM dual),
                           mpm.format_num) format_num,
                       vsr.id_vital_sign_read,
                       mpm.flg_mandatory
                  FROM mtos_score mse
                  JOIN mtos_param mpm
                    ON mse.id_mtos_score = mpm.id_mtos_score
                  JOIN epis_mtos_param emp
                    ON mpm.id_mtos_param = emp.id_mtos_param
                  LEFT JOIN (SELECT *
                               FROM (SELECT t.*,
                                            row_number() over(PARTITION BY t.id_mtos_param ORDER BY t.id_param_task ASC) AS rn
                                       FROM mtos_param_task t
                                       JOIN mtos_param p
                                         ON p.id_mtos_param = t.id_mtos_param
                                       JOIN mtos_score s
                                         ON s.id_mtos_score = p.id_mtos_score
                                      WHERE s.id_mtos_score = i_mtos_score
                                        AND t.flg_available = pk_alert_constant.g_yes)
                              WHERE rn = 1) mpt
                    ON mpt.id_mtos_param = mpm.id_mtos_param
                  LEFT JOIN vital_sign_read vsr
                    ON vsr.id_vital_sign = decode(mpt.flg_param_task_type,
                                                  pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                  mpt.id_param_task,
                                                  NULL)
                   AND decode(emp.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              emp.id_task_refid,
                              NULL) = vsr.id_vital_sign_read
                 WHERE mse.id_mtos_score = i_mtos_score
                   AND emp.id_epis_mtos_score = nvl(i_epis_mtos_score, 0)
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                 ORDER BY score_rank, param_rank;
        
        ELSE
        
            g_error := 'OPEN CURSOR O_LIST';
            pk_alertlog.log_debug(g_error);
            OPEN o_list FOR
                SELECT DISTINCT mse.id_mtos_score,
                                mse.flg_score_type,
                                (SELECT pk_translation.get_translation(i_lang, mse.code_mtos_score) || ' (' ||
                                        pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev) || ')'
                                   FROM dual) score_desc,
                                -- Parameters
                                mpm.id_mtos_param,
                                pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                                mpm.flg_fill_type,
                                mse.rank score_rank,
                                mpm.rank param_rank,
                                mpm.internal_name,
                                NULL registered_value,
                                NULL registered_value_desc,
                                --REVER                      
                                decode(decode(mpt.flg_param_task_type,
                                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                              mpt.id_param_task,
                                              NULL),
                                       NULL,
                                       NULL,
                                       (SELECT pk_vital_sign.get_vital_sign_unit_measure(i_lang,
                                                                                         (SELECT pk_vital_sign.get_vs_um_inst(decode(mpt.flg_param_task_type,
                                                                                                                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                                     mpt.id_param_task,
                                                                                                                                     NULL),
                                                                                                                              i_prof.institution,
                                                                                                                              i_prof.software)
                                                                                            FROM dual),
                                                                                         NULL)
                                          FROM dual)) desc_unit_measure,
                                -- RELATION
                                NULL relation, -- Used by Flash to know where to copy the value of the current parameter
                                -- List with the MTOS_SCORE ID's. 
                                -- Used by Flash to find all the blocks where the current parameter must be copied.
                                NULL related_scores,
                                -- VITAL SIGNS
                                decode(mpt.flg_param_task_type,
                                       pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                       mpt.id_param_task,
                                       NULL) AS id_vital_sign,
                                (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                 pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                 mpt.id_param_task,
                                                                 NULL),
                                                          i_prof.institution,
                                                          i_prof.software)
                                   FROM dual) id_unit_measure,
                                nvl((SELECT pk_vital_sign_core.get_vsum_val_min(i_lang            => i_lang,
                                                                               i_prof            => i_prof,
                                                                               i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                           pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                           mpt.id_param_task,
                                                                                                           NULL),
                                                                               i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                                     mpt.id_param_task,
                                                                                                                                     NULL),
                                                                                                                              i_prof.institution,
                                                                                                                              i_prof.software)
                                                                                                       FROM dual),
                                                                               i_id_institution  => i_prof.institution,
                                                                               i_id_software     => i_prof.software,
                                                                               i_age             => l_age)
                                      FROM dual),
                                    mpm.val_min) val_min,
                                nvl((SELECT pk_vital_sign_core.get_vsum_val_max(i_lang            => i_lang,
                                                                               i_prof            => i_prof,
                                                                               i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                           pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                           mpt.id_param_task,
                                                                                                           NULL),
                                                                               i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                                     mpt.id_param_task,
                                                                                                                                     NULL),
                                                                                                                              i_prof.institution,
                                                                                                                              i_prof.software)
                                                                                                       FROM dual),
                                                                               i_id_institution  => i_prof.institution,
                                                                               i_id_software     => i_prof.software,
                                                                               i_age             => l_age)
                                      FROM dual),
                                    mpm.val_max) val_max,
                                nvl((SELECT pk_vital_sign_core.get_vsum_format_num(i_lang            => i_lang,
                                                                                  i_prof            => i_prof,
                                                                                  i_id_vital_sign   => decode(mpt.flg_param_task_type,
                                                                                                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                              mpt.id_param_task,
                                                                                                              NULL),
                                                                                  i_id_unit_measure => (SELECT get_vs_um_inst_um(decode(mpt.flg_param_task_type,
                                                                                                                                        pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                                        mpt.id_param_task,
                                                                                                                                        NULL),
                                                                                                                                 i_prof.institution,
                                                                                                                                 i_prof.software)
                                                                                                          FROM dual),
                                                                                  i_id_institution  => i_prof.institution,
                                                                                  i_id_software     => i_prof.software,
                                                                                  i_age             => l_age)
                                      FROM dual),
                                    mpm.format_num) format_num,
                                NULL id_vital_sign_read,
                                mpm.flg_mandatory
                  FROM mtos_score mse
                  JOIN mtos_param mpm
                    ON mse.id_mtos_score = mpm.id_mtos_score
                  LEFT JOIN (SELECT *
                               FROM (SELECT t.*,
                                            row_number() over(PARTITION BY t.id_mtos_param ORDER BY t.id_param_task ASC) AS rn
                                       FROM mtos_param_task t
                                       JOIN mtos_param p
                                         ON p.id_mtos_param = t.id_mtos_param
                                       JOIN mtos_score s
                                         ON s.id_mtos_score = p.id_mtos_score
                                      WHERE s.id_mtos_score = i_mtos_score
                                        AND t.flg_available = pk_alert_constant.g_yes)
                              WHERE rn = 1) mpt
                    ON mpt.id_mtos_param = mpm.id_mtos_param
                 WHERE mse.id_mtos_score = i_mtos_score
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                 ORDER BY score_rank, param_rank;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_general_param_list;

    /********************************************************************************************
    * 
    * Get Severity Scores to show on a viewer
    *
    * @param i_lang                   Preferred language ID for this professional 
    * @param i_prof                   Object (professional ID, institution ID, software ID)
    * @param i_mtos_score             Severity score ID 
    * @param i_epis_mtos_score        Severity score evaluation ID
    * @param o_list                   Parameter list
    * @param o_error                  Error
    *
    * @return                         true or false on success or error
    *
    * @author                         Mário Mineiro
    * @version                        2.6.3.7
    * @since                          19/07/2013
    **********************************************************************************************/

    FUNCTION get_sev_score_viewer
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_mtos_score      IN mtos_score.id_mtos_score%TYPE,
        i_epis_mtos_score IN epis_mtos_param.id_epis_mtos_score%TYPE DEFAULT NULL,
        o_viewer          OUT pk_types.cursor_type,
        o_title           OUT VARCHAR2,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200) := 'GET_SEV_SCORE_VIEWER';
    
        l_internal_error EXCEPTION;
        o_score_a         NUMBER;
        o_score_a         NUMBER;
        l_epis_mtos_score epis_mtos_score.id_epis_mtos_score%TYPE;
    
        l_flg_score_type VARCHAR2(100);
        l_internal_name  VARCHAR2(1000);
    
    BEGIN
    
        IF i_epis_mtos_score IS NOT NULL
        THEN
        
            OPEN o_viewer FOR
                SELECT mse.id_mtos_score,
                       mpm.id_mtos_param,
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              pk_vital_sign.get_vital_sign_unit_measure(i_lang,
                                                                        (SELECT pk_vital_sign.get_vs_um_inst(decode(mpt.flg_param_task_type,
                                                                                                                    pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                    mpt.id_param_task,
                                                                                                                    NULL),
                                                                                                             i_prof.institution,
                                                                                                             i_prof.software)
                                                                           FROM dual),
                                                                        vsr.id_vs_scales_element)) desc_unit_measure,
                       -- REGISTERED VALUE
                       -- 'falta' desc_unit_measure,
                       emp.registered_value registered_value,
                       -- REGISTERED VALUE DESCRIPTION
                       /*                       decode(mpm.flg_fill_type,
                       pk_sev_scores_constant.g_flg_fill_type_m,
                       (SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
                          FROM mtos_param_value mpe
                         WHERE mpe.id_mtos_param_value = emp.registered_value),
                       to_char(emp.registered_value)) registered_value_desc, */
                       decode(mpm.flg_fill_type,
                              pk_sev_scores_constant.g_flg_fill_type_m,
                              get_registered_value_desc(i_lang,
                                                        i_prof,
                                                        emp.id_epis_mtos_score,
                                                        mpm.id_mtos_param,
                                                        emp.extra_score),
                              pk_sev_scores_constant.g_flg_fill_type_s,
                              get_registered_value_desc(i_lang,
                                                        i_prof,
                                                        emp.id_epis_mtos_score,
                                                        mpm.id_mtos_param,
                                                        emp.extra_score),
                              to_char(emp.registered_value)) registered_value_desc,
                       
                       decode(mpm.flg_fill_type,
                              pk_sev_scores_constant.g_flg_fill_type_t,
                              decode(emp.registered_value,
                                     -1,
                                     pk_sev_scores_core.get_score_value(i_prof, mpm.id_mtos_param, emp.registered_value),
                                     emp.registered_value),
                              pk_sev_scores_core.get_score_value(i_prof, mpm.id_mtos_param, emp.registered_value)) score_unit,
                       pk_sev_scores_core.get_score_color(i_prof, mpm.id_mtos_param, emp.registered_value) score_color
                
                  FROM mtos_score mse, mtos_param mpm, epis_mtos_param emp, vital_sign_read vsr, mtos_param_task mpt
                 WHERE mse.id_mtos_score = i_mtos_score
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                   AND vsr.id_vital_sign_read(+) = decode(emp.flg_param_task_type,
                                                          pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                          emp.id_task_refid,
                                                          NULL)
                --AND mpm.flg_fill_type != pk_sev_scores_constant.g_flg_fill_type_t -- Mostra todos menos total
                --                 ORDER BY mse.rank, mpm.rank;
                 ORDER BY mpm.rank;
        ELSE
            OPEN o_viewer FOR
                SELECT mse.id_mtos_score,
                       mpm.id_mtos_param,
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       NULL desc_unit_measure,
                       NULL registered_value,
                       NULL registered_value_desc,
                       NULL score_unit,
                       NULL score_color
                  FROM mtos_score mse, mtos_param mpm, mtos_param_task mpt
                 WHERE mse.id_mtos_score = i_mtos_score
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes
                -- AND mpm.flg_fill_type != pk_sev_scores_constant.g_flg_fill_type_t -- Mostra todos menos total                  
                --                 ORDER BY mse.rank, mpm.rank;
                 ORDER BY mpm.rank;
        
        END IF;
    
        -- GET INTERNAL NAME TITLE AND FLG_SCORE_TYPE FOR SPECIFY RULES
        BEGIN
            SELECT mse.internal_name,
                   mse.flg_score_type,
                   nvl(pk_translation.get_translation(i_lang, mse.code_mtos_score_abbrev),
                       pk_translation.get_translation(i_lang, mse.code_mtos_score))
              INTO l_internal_name, l_flg_score_type, o_title
              FROM mtos_score mse
             WHERE mse.id_mtos_score = i_mtos_score
               AND mse.flg_viewer = 'Y';
        
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
    
        /*       
        -- RULE only for NEWS (if total score is below 4 and any individual parameter scoring is 3 automatic gives medium)
        IF l_FLG_SCORE_TYPE = 'NEWS' g_flg_score_news THEN
        
          -- GET TOTAL Scored
            SELECT 
                   pk_sev_scores_core.get_score_value(mpm.id_mtos_score, emp.registered_value) 
                   into l_total_scored
            
              FROM mtos_score mse, mtos_param mpm, epis_mtos_param emp
             WHERE mse.id_mtos_score = i_mtos_score
               AND mse.id_mtos_score = mpm.id_mtos_score
               AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
               AND emp.id_mtos_param(+) = mpm.id_mtos_param
               AND mse.flg_available = pk_alert_constant.g_yes
               AND mpm.flg_available = pk_alert_constant.g_yes
               AND mpm.flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_t
               and rownum=1;          
        
        END IF;
        */
        /*
            -- ! So deve retornar 1 valor
            OPEN o_total FOR
                SELECT --pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                --pk_sev_scores_core.get_score_value(mpm.id_mtos_param, emp.registered_value) score_unit,
                --'0x787864' score_color
                 'mal' param_desc, -999 score_unit, 'x' score_color
                  FROM mtos_score mse, mtos_param mpm, epis_mtos_param emp
                 WHERE mse.id_mtos_score = i_mtos_score
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND emp.id_epis_mtos_score(+) = nvl(i_epis_mtos_score, 0)
                   AND emp.id_mtos_param(+) = mpm.id_mtos_param
                   AND mse.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_available = pk_alert_constant.g_yes
                   AND mpm.flg_fill_type = pk_sev_scores_constant.g_flg_fill_type_t; -- Mostra apenas o total
        */
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang     => i_lang,
                                              i_sqlcode  => SQLCODE,
                                              i_sqlerrm  => SQLERRM,
                                              i_message  => g_error,
                                              i_owner    => g_owner,
                                              i_package  => g_package,
                                              i_function => l_func_name,
                                              o_error    => o_error);
            pk_types.open_my_cursor(o_viewer);
            RETURN FALSE;
    END get_sev_score_viewer;

    /********************************************************************************************
    * 
    * Get Severity Scores to show on a viewer with temporary totals
    *
    * @param i_lang                   Preferred language ID for this professional 
    * @param i_prof                   Object (professional ID, institution ID, software ID)
    * @param i_mtos_score             Severity score ID 
    * @param i_epis_mtos_score        Severity score evaluation ID
    * @param o_list                   Parameter list
    * @param o_error                  Error
    *
    * @return                         true or false on success or error
    *
    * @author                         Mário Mineiro
    * @version                        2.6.3.7
    * @since                          19/07/2013
    **********************************************************************************************/

    FUNCTION get_sev_score_viewer_wtotals
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_mtos_score         IN mtos_score.id_mtos_score%TYPE,
        i_epis_mtos_score    IN epis_mtos_param.id_epis_mtos_score%TYPE DEFAULT NULL,
        i_id_mtos_param      IN table_number,
        i_value              IN table_number,
        i_vs_scales_elements IN table_number,
        
        o_list OUT pk_types.cursor_type,
        
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name CONSTANT VARCHAR2(200) := 'GET_SEV_SCORE_VIEWER_WTOTALS';
    
        l_internal_error EXCEPTION;
    
        o_score_a         NUMBER := 0;
        l_epis_mtos_score epis_mtos_score.id_epis_mtos_score%TYPE;
    
        --        l_internal_name  VARCHAR2(1000);
    
        l_tab_sev_scores_viewer t_tab_sev_scores_viewer := t_tab_sev_scores_viewer();
        l_rec_sev_scores_viewer t_rec_sev_scores_viewer;
    
        l_score_unit        NUMBER := 0;
        l_score_color       VARCHAR2(100);
        l_param_desc        VARCHAR2(1000);
        l_desc_unit_measure VARCHAR2(1000);
    
        l_flg_score_type        VARCHAR2(100);
        l_score3                NUMBER := 0;
        l_null                  NUMBER := 0;
        l_total_score           NUMBER := 0;
        l_flg_fill_type         VARCHAR2(10);
        l_registered_value_desc VARCHAR2(100);
        l_id_vital_sign         NUMBER;
        l_flg_mandatory         VARCHAR2(1 CHAR);
    BEGIN
    
        FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
        LOOP
            l_score_unit            := NULL;
            l_score_color           := NULL;
            l_param_desc            := NULL;
            l_desc_unit_measure     := NULL;
            l_flg_fill_type         := NULL;
            l_registered_value_desc := NULL;
        
            l_tab_sev_scores_viewer.extend();
            -- Get param details    
            BEGIN
                SELECT mse.flg_score_type,
                       pk_translation.get_translation(i_lang, mpm.code_mtos_param) param_desc,
                       decode(mpt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpt.id_param_task,
                              NULL) AS id_vital_sign,
                       decode(decode(mpt.flg_param_task_type,
                                     pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                     mpt.id_param_task,
                                     NULL),
                              NULL,
                              NULL,
                              (SELECT pk_vital_sign.get_vital_sign_unit_measure(i_lang,
                                                                                (SELECT pk_vital_sign.get_vs_um_inst(decode(mpt.flg_param_task_type,
                                                                                                                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                                                                            mpt.id_param_task,
                                                                                                                            NULL),
                                                                                                                     i_prof.institution,
                                                                                                                     i_prof.software)
                                                                                   FROM dual),
                                                                                NULL)
                                 FROM dual)) unit_measure_desc,
                       
                       mpm.flg_fill_type,
                       mpm.flg_mandatory
                  INTO l_flg_score_type,
                       l_param_desc,
                       l_id_vital_sign,
                       l_desc_unit_measure,
                       l_flg_fill_type,
                       l_flg_mandatory
                  FROM mtos_score mse, mtos_param mpm, mtos_param_task mpt
                 WHERE mse.id_mtos_score = i_mtos_score
                   AND mpm.id_mtos_param = i_id_mtos_param(i)
                   AND mse.id_mtos_score = mpm.id_mtos_score
                   AND mpt.id_mtos_param(+) = mpm.id_mtos_param
                   AND mpt.flg_available(+) = pk_alert_constant.g_yes;
            
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
        
            -- Get Score for each value of param
            BEGIN
                SELECT mpe.value,
                       mpe.color,
                       pk_translation.get_translation(i_lang, mpe.code_mtos_param_value) registered_value_desc
                  INTO l_score_unit, l_score_color, l_registered_value_desc
                  FROM mtos_param_value mpe
                  LEFT JOIN mtos_param_value_task mpvt
                    ON mpvt.id_mtos_param_value = mpe.id_mtos_param_value
                   AND mpvt.flg_available = pk_alert_constant.g_yes
                 WHERE mpe.id_mtos_param = i_id_mtos_param(i)
                   AND decode(mpvt.flg_param_task_type,
                              pk_sev_scores_constant.g_flg_param_task_vital_sign,
                              mpvt.min_val,
                              NULL) <= i_value(i)
                   AND ((decode(mpvt.flg_param_task_type,
                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                mpvt.max_val,
                                NULL) >= i_value(i)) OR decode(mpvt.flg_param_task_type,
                                                                pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                                mpvt.max_val,
                                                                NULL) IS NULL)
                   AND mpe.flg_available = pk_alert_constant.g_yes;
            
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
            -- if got scales presents the descprition of the scales
            IF i_vs_scales_elements(i) IS NOT NULL
            THEN
                BEGIN
                    SELECT pk_translation.get_translation(i_lang, um.code_unit_measure)
                      INTO l_desc_unit_measure
                      FROM vital_sign_scales_element vsse, unit_measure um
                     WHERE vsse.id_unit_measure = um.id_unit_measure
                       AND vsse.id_vs_scales_element = i_vs_scales_elements(i);
                EXCEPTION
                    WHEN OTHERS THEN
                        NULL;
                END;
            
            END IF;
            -- Shows the value when theres no description.    
            IF l_registered_value_desc IS NULL
            THEN
                l_registered_value_desc := i_value(i);
            END IF;
        
            -- Only sums values that are not totals
            IF l_flg_fill_type != 'T'
            THEN
                l_total_score := l_total_score + nvl(l_score_unit, 0);
            
                -- 1.1 Specification if any value is null then total score is also null except for the totals               
                IF i_value(i) IS NULL
                   AND l_flg_mandatory = 'Y'
                THEN
                    l_null := l_null + 1;
                END IF;
            END IF;
        
            -- Treathment for the TOTAL LINE!!!!!!!!!! Must be always the last parameter
            -- Specification only for NEWS when a unit score is 3 mark it
            -- (if total score is below 4 and any individual parameter scoring is 3 automatic gives medium total score color)           
        
            IF l_flg_score_type = pk_sev_scores_constant.g_flg_score_news
               AND l_score_unit = 3
               AND l_flg_fill_type != 'T'
            THEN
                l_score3 := l_score3 + 1;
            END IF;
        
            -- GET THE COLOR FOR THE TOTAL / SPICIFICATION 
            IF l_flg_fill_type = 'T' -- Total Line
            THEN
            
                IF l_flg_score_type = pk_sev_scores_constant.g_flg_score_news
                   AND l_score3 >= 1
                   AND l_total_score <= 4
                THEN
                    -- For the show score is 3
                    l_total_score := 3;
                    -- GET THE COLOR FOR THE TOTAL / SPICIFICATION 
                    BEGIN
                    
                        SELECT mpe.color
                          INTO l_score_color
                          FROM mtos_param_value mpe
                          LEFT JOIN mtos_param_value_task mpvt
                            ON mpvt.id_mtos_param_value = mpe.id_mtos_param_value
                           AND mpvt.flg_available = pk_alert_constant.g_yes
                         WHERE mpe.id_mtos_param = i_id_mtos_param(i)
                           AND decode(mpvt.flg_param_task_type,
                                      pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                      mpvt.min_val,
                                      NULL) = -1
                           AND decode(mpvt.flg_param_task_type,
                                      pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                      mpvt.max_val,
                                      NULL) = -1
                           AND mpe.flg_available = pk_alert_constant.g_yes;
                    EXCEPTION
                        WHEN OTHERS THEN
                            NULL;
                    END;
                ELSE
                
                    -- GET THE COLOR FOR THE TOTAL 
                    BEGIN
                    
                        SELECT mpe.color
                          INTO l_score_color
                          FROM mtos_param_value mpe
                          LEFT JOIN mtos_param_value_task mpvt
                            ON mpvt.id_mtos_param_value = mpe.id_mtos_param_value
                           AND mpvt.flg_available = pk_alert_constant.g_yes
                         WHERE mpe.id_mtos_param = i_id_mtos_param(i)
                           AND decode(mpvt.flg_param_task_type,
                                      pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                      mpvt.min_val,
                                      NULL) <= l_total_score
                           AND ((decode(mpvt.flg_param_task_type,
                                        pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                        mpvt.max_val,
                                        NULL) >= l_total_score) OR
                               decode(mpvt.flg_param_task_type,
                                       pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                       mpvt.max_val,
                                       NULL) IS NULL)
                           AND mpe.flg_available = pk_alert_constant.g_yes;
                    EXCEPTION
                        WHEN OTHERS THEN
                            NULL;
                    END;
                END IF;
            
                -- Define the total equal to the sum of the past lines
                l_score_unit := l_total_score;
            
                -- 1.1 Specification if any value is null then total score is also null
                IF l_null != 0
                   AND l_flg_fill_type = 'T'
                THEN
                    l_score_unit  := NULL;
                    l_score_color := NULL;
                END IF;
            
            END IF;
            l_tab_sev_scores_viewer(i) := t_rec_sev_scores_viewer(i_mtos_score,
                                                                  i_id_mtos_param(i),
                                                                  l_id_vital_sign,
                                                                  l_param_desc,
                                                                  l_desc_unit_measure,
                                                                  i_value(i),
                                                                  l_registered_value_desc,
                                                                  l_score_unit,
                                                                  l_score_color);
        
        END LOOP;
    
        OPEN o_list FOR
            SELECT id_mtos_score,
                   id_mtos_param,
                   id_vital_sign,
                   param_desc,
                   desc_unit_measure,
                   registered_value,
                   registered_value_desc,
                   score_unit,
                   score_color
              FROM TABLE(l_tab_sev_scores_viewer);
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang     => i_lang,
                                              i_sqlcode  => SQLCODE,
                                              i_sqlerrm  => SQLERRM,
                                              i_message  => g_error,
                                              i_owner    => g_owner,
                                              i_package  => g_package,
                                              i_function => l_func_name,
                                              o_error    => o_error);
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_sev_score_viewer_wtotals;
    /********************************************************************************************
    * 
    * Get a Score Value for each parameter value calculated on fly (without multiplier)
    *
    * @param i_id_mtos_param      ID's of the score parameters
    * @param i_value              Registered values for each parameter
    *
    * @return                         Value or 0
    *
    * @author                         Mário Mineiro
    * @version                        2.6.3.7
    * @since                          19/07/2013
    **********************************************************************************************/

    FUNCTION get_score_value
    (
        i_prof          IN profissional,
        i_id_mtos_param IN NUMBER,
        i_value         IN NUMBER
    ) RETURN NUMBER IS
        l_score_value NUMBER;
    BEGIN
        --l_score_value := 0;
        -- without multiplayer simple scores (mtos_multiplier)
        BEGIN
            SELECT mpe.value
              INTO l_score_value
              FROM mtos_param_value mpe
              LEFT JOIN mtos_param_value_task mpvt
                ON mpvt.id_mtos_param_value = mpe.id_mtos_param_value
               AND mpvt.flg_available = pk_alert_constant.g_yes
             WHERE mpe.id_mtos_param = i_id_mtos_param
               AND decode(mpvt.flg_param_task_type,
                          pk_sev_scores_constant.g_flg_param_task_vital_sign,
                          mpvt.min_val,
                          NULL) <= i_value
               AND ((decode(mpvt.flg_param_task_type,
                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                            mpvt.max_val,
                            NULL) >= i_value) OR decode(mpvt.flg_param_task_type,
                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                         mpvt.max_val,
                                                         NULL) IS NULL)
               AND mpe.flg_available = pk_alert_constant.g_yes;
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
    
        RETURN l_score_value;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN 0;
    END get_score_value;

    /********************************************************************************************
    * 
    * Get a Score Color for each parameter value calculated on fly (without multiplier)
    *
    * @param i_id_mtos_param      ID's of the score parameters
    * @param i_value              Registered values for each parameter
    *
    * @return                         Value or 0
    *
    * @author                         Mário Mineiro
    * @version                        2.6.3.7
    * @since                          19/07/2013
    **********************************************************************************************/

    FUNCTION get_score_color
    (
        i_prof          IN profissional,
        i_id_mtos_param IN NUMBER,
        i_value         IN NUMBER
    ) RETURN VARCHAR2 IS
        l_score_color VARCHAR2(200);
    BEGIN
    
        -- without multiplayer simple colors (mtos_multiplier)
        BEGIN
            SELECT mpe.color
              INTO l_score_color
              FROM mtos_param_value mpe
              LEFT JOIN mtos_param_value_task mpvt
                ON mpvt.id_mtos_param_value = mpe.id_mtos_param_value
               AND mpvt.flg_available = pk_alert_constant.g_yes
             WHERE mpe.id_mtos_param = i_id_mtos_param
               AND decode(mpvt.flg_param_task_type,
                          pk_sev_scores_constant.g_flg_param_task_vital_sign,
                          mpvt.min_val,
                          NULL) <= i_value
               AND ((decode(mpvt.flg_param_task_type,
                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                            mpvt.max_val,
                            NULL) >= i_value) OR decode(mpvt.flg_param_task_type,
                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                         mpvt.max_val,
                                                         NULL) IS NULL)
               AND mpe.flg_available = pk_alert_constant.g_yes;
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
    
        RETURN l_score_color;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_score_color;

    /********************************************************************************************
    * 
    * Get a Score Description for each parameter value calculated on fly (without multiplier)
    *
    * @param i_id_mtos_param      ID's of the score parameters
    * @param i_value              Registered values for each parameter
    *
    * @return                         Value or 0
    *
    * @author                         Mário Mineiro
    * @version                        2.6.3.7
    * @since                          19/07/2013
    **********************************************************************************************/

    FUNCTION get_score_desc
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_id_mtos_param IN NUMBER,
        i_value         IN NUMBER
    ) RETURN VARCHAR2 IS
        l_score_desc VARCHAR2(2000);
    BEGIN
    
        -- without multiplayer simple colors (mtos_multiplier)
        BEGIN
            SELECT pk_translation.get_translation(i_lang, mpe.code_mtos_param_value)
              INTO l_score_desc
              FROM mtos_param_value mpe
              LEFT JOIN mtos_param_value_task mpvt
                ON mpvt.id_mtos_param_value = mpe.id_mtos_param_value
               AND mpvt.flg_available = pk_alert_constant.g_yes
             WHERE mpe.id_mtos_param = i_id_mtos_param
               AND decode(mpvt.flg_param_task_type,
                          pk_sev_scores_constant.g_flg_param_task_vital_sign,
                          mpvt.min_val,
                          NULL) <= i_value
               AND ((decode(mpvt.flg_param_task_type,
                            pk_sev_scores_constant.g_flg_param_task_vital_sign,
                            mpvt.max_val,
                            NULL) >= i_value) OR decode(mpvt.flg_param_task_type,
                                                         pk_sev_scores_constant.g_flg_param_task_vital_sign,
                                                         mpvt.max_val,
                                                         NULL) IS NULL)
               AND mpe.flg_available = pk_alert_constant.g_yes;
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
    
        RETURN l_score_desc;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_score_desc;

    FUNCTION get_sev_score_plus
    (
        i_lang  IN language.id_language%TYPE,
        i_prof  IN profissional,
        o_list  OUT pk_types.cursor_type,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_exception EXCEPTION;
    BEGIN
    
        OPEN o_list FOR
            SELECT ms.id_mtos_score id_action,
                   pk_translation.get_translation(i_lang, ms.code_mtos_score) desc_action,
                   CASE ms.id_mtos_score
                       WHEN 38 THEN
                        pk_message.get_message(i_lang => i_lang, i_code_mess => 'SEV_SCORES_RMK_HEAD')
                       WHEN 39 THEN
                        pk_message.get_message(i_lang => i_lang, i_code_mess => 'SEV_SCORES_RMK_FACE')
                       WHEN 40 THEN
                        pk_message.get_message(i_lang => i_lang, i_code_mess => 'SEV_SCORES_RMK_CHEST')
                       WHEN 42 THEN
                        pk_message.get_message(i_lang => i_lang, i_code_mess => 'SEV_SCORES_RMK_EXTRE')
                       WHEN 43 THEN
                        pk_message.get_message(i_lang => i_lang, i_code_mess => 'SEV_SCORES_RMK_EXTER')
                   END remark
              FROM mtos_score ms
             WHERE id_mtos_score BETWEEN pk_sev_scores_constant.g_id_score_tw_head AND
                   pk_sev_scores_constant.g_id_score_tw_dao
             ORDER BY ms.rank;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN l_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              'GET_SEV_SCORE_PLUS',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            pk_alert_exceptions.reset_error_state();
            RETURN FALSE;
        
    END get_sev_score_plus;

    FUNCTION get_sev_scores_ais
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_id_mtos_score IN mtos_score.id_mtos_score%TYPE,
        o_list          OUT pk_types.cursor_type,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_exception EXCEPTION;
    BEGIN
    
        OPEN o_list FOR
            SELECT a.id_mtos_param id_ais,
                   a.id_mtos_score id_major,
                   pk_translation.get_translation(i_lang, a.code_mtos_param) desc_ais
              FROM mtos_param a
             WHERE a.id_mtos_score = i_id_mtos_score
               AND a.flg_available = 'Y'
             ORDER BY a.id_mtos_param;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN l_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              'GET_SEV_SCORES_AIS',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            pk_alert_exceptions.reset_error_state();
            RETURN FALSE;
    END get_sev_scores_ais;

    FUNCTION get_sev_scores_minor
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_id_mtos_param IN mtos_param.id_mtos_param%TYPE,
        o_list          OUT pk_types.cursor_type,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_exception EXCEPTION;
    BEGIN
    
        OPEN o_list FOR
            SELECT a.id_mtos_param_value id_minor,
                   a.id_mtos_param id_ais,
                   pk_translation.get_translation(i_lang, a.code_mtos_param_value) desc_minor,
                   a.extra_score
              FROM mtos_param_value a
             WHERE a.id_mtos_param = i_id_mtos_param
               AND a.flg_available = 'Y'
             ORDER BY a.id_mtos_param;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN l_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              'GET_SEV_SCORES_MINOR',
                                              o_error);
            pk_types.open_my_cursor(o_list);
            pk_alert_exceptions.reset_error_state();
            RETURN FALSE;
    END get_sev_scores_minor;

    FUNCTION get_modified_total_score
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_id_mtos_score IN table_number,
        i_id_mtos_param IN table_number,
        i_extra_score   IN table_varchar,
        o_total         OUT NUMBER,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_common_error   EXCEPTION;
        l_internal_error EXCEPTION;
        l_error_msg VARCHAR2(200);
    
        l_mtos_score  mtos_score.id_mtos_score%TYPE;
        l_mtos_ais    mtos_param.id_mtos_param%TYPE;
        l_value       mtos_param_value.value%TYPE;
        l_value_final mtos_param_value.value%TYPE;
    
        l_max_val_head        NUMBER := 0;
        l_max_val_face        NUMBER := 0;
        l_max_val_chest       NUMBER := 0;
        l_max_val_abdomen     NUMBER := 0;
        l_max_val_extermities NUMBER := 0;
        l_max_val_external    NUMBER := 0;
    
        l_total_score NUMBER := 0;
    
        l_tbl_max_values table_number := table_number();
    
        l_exception EXCEPTION;
    
    BEGIN
    
        IF i_id_mtos_param.exists(1)
        THEN
        
            -- Check if parameters have same size
            g_error := 'CHECK ARRAY SIZES';
            IF i_id_mtos_param.count <> i_extra_score.count
            THEN
                l_error_msg := 'INVALID ARRAY SIZES';
                RAISE l_common_error;
            END IF;
        
            FOR i IN 1 .. i_id_mtos_param.count
            LOOP
            
                IF i_id_mtos_score(i) = pk_sev_scores_constant.g_id_score_tw_dao
                THEN
                
                    o_total := pk_sev_scores_constant.g_iss_max_total_value;
                    RETURN TRUE;
                END IF;
            
                IF i_id_mtos_param(i) IS NOT NULL
                THEN
                    SELECT mp.id_mtos_score,
                           mp.id_mtos_param,
                           mpv.value,
                           (mpv.value + decode(i_extra_score(i), pk_alert_constant.g_yes, 1, 0)) value_final
                      INTO l_mtos_score, l_mtos_ais, l_value, l_value_final
                      FROM mtos_param_value mpv
                     INNER JOIN mtos_param mp
                        ON mp.id_mtos_param = mpv.id_mtos_param
                     WHERE mpv.id_mtos_param_value = i_id_mtos_param(i);
                
                    IF l_value = pk_sev_scores_constant.g_iss_max_score_value
                    THEN
                        o_total := pk_sev_scores_constant.g_iss_max_total_value;
                        RETURN TRUE;
                    END IF;
                
                    CASE l_mtos_score
                        WHEN pk_sev_scores_constant.g_id_score_tw_head THEN
                            IF l_value_final > l_max_val_head
                            THEN
                                l_max_val_head := l_value_final;
                            END IF;
                        WHEN pk_sev_scores_constant.g_id_score_tw_face THEN
                            IF l_value_final > l_max_val_face
                            THEN
                                l_max_val_face := l_value_final;
                            END IF;
                        WHEN pk_sev_scores_constant.g_id_score_tw_chest THEN
                            IF l_value_final > l_max_val_chest
                            THEN
                                l_max_val_chest := l_value_final;
                            END IF;
                        WHEN pk_sev_scores_constant.g_id_score_tw_abdomen THEN
                            IF l_value_final > l_max_val_abdomen
                            THEN
                                l_max_val_abdomen := l_value_final;
                            END IF;
                        WHEN pk_sev_scores_constant.g_id_score_tw_extremities THEN
                            IF l_value_final > l_max_val_extermities
                            THEN
                                l_max_val_extermities := l_value_final;
                            END IF;
                        WHEN pk_sev_scores_constant.g_id_score_tw_external THEN
                            IF l_value_final > l_max_val_external
                            THEN
                                l_max_val_external := l_value_final;
                            END IF;
                    END CASE;
                
                END IF;
            
            END LOOP;
        
            l_tbl_max_values.extend;
            l_tbl_max_values(1) := l_max_val_head;
            l_tbl_max_values.extend;
            l_tbl_max_values(2) := l_max_val_face;
            l_tbl_max_values.extend;
            l_tbl_max_values(3) := l_max_val_chest;
            l_tbl_max_values.extend;
            l_tbl_max_values(4) := l_max_val_abdomen;
            l_tbl_max_values.extend;
            l_tbl_max_values(5) := l_max_val_extermities;
            l_tbl_max_values.extend;
            l_tbl_max_values(6) := l_max_val_external;
        
            SELECT SUM(z.column_value * z.column_value)
              INTO l_total_score
              FROM (SELECT a.column_value
                      FROM TABLE(l_tbl_max_values) a
                     ORDER BY a.column_value DESC) z
             WHERE rownum < 4;
        
            IF (l_total_score <= pk_sev_scores_constant.g_iss_max_total_value)
            THEN
                o_total := l_total_score;
            ELSE
                o_total := pk_sev_scores_constant.g_iss_max_total_value;
            END IF;
        
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN l_common_error THEN
            pk_alert_exceptions.process_error(i_lang,
                                              'T_COMMON_ERROR',
                                              l_error_msg,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              'HIH_TW',
                                              o_error);
        
            RETURN FALSE;
        WHEN l_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              'HIH_TW',
                                              o_error);
            pk_alert_exceptions.reset_error_state();
            RETURN FALSE;
        
    END get_modified_total_score;

    FUNCTION set_modified_score
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_id_episode         IN episode.id_episode%TYPE,
        i_id_patient         IN patient.id_patient%TYPE,
        i_epis_mtos_score    IN epis_mtos_score.id_epis_mtos_score%TYPE,
        i_id_mtos_score      IN table_number,
        i_id_mtos_param      IN table_number,
        i_extra_score        IN table_varchar,
        i_flg_api            IN VARCHAR2 DEFAULT 'N',
        i_dt_create          IN TIMESTAMP WITH LOCAL TIME ZONE DEFAULT NULL,
        o_id_epis_mtos_score OUT epis_mtos_score.id_epis_mtos_score%TYPE,
        o_msg_error          OUT VARCHAR2,
        o_error              OUT t_error_out
    ) RETURN BOOLEAN IS
        l_exception EXCEPTION;
    
        l_sysdate              TIMESTAMP WITH LOCAL TIME ZONE;
        l_next_epis_mtos_score mtos_score.id_mtos_score%TYPE;
        l_rowids               table_varchar;
    
        l_mtos_score  mtos_score.id_mtos_score%TYPE;
        l_mtos_ais    mtos_param.id_mtos_param%TYPE;
        l_value       mtos_param_value.value%TYPE;
        l_value_final mtos_param_value.extra_score%TYPE;
    
        l_total       epis_mtos_param.registered_value%TYPE;
        l_doa_element VARCHAR2(1 CHAR) := pk_alert_constant.g_no;
    
    BEGIN
        l_sysdate := nvl(i_dt_create, current_timestamp);
        IF i_epis_mtos_score IS NOT NULL
        THEN
            -- Set active score evaluation as outdated
            g_error := 'UPDATE SCORE - OUTDATED';
            pk_alertlog.log_debug(g_error);
            ts_epis_mtos_score.upd(flg_status_in => pk_sev_scores_constant.g_flg_status_o,
                                   where_in      => 'id_epis_mtos_score = ' || i_epis_mtos_score,
                                   rows_out      => l_rowids);
        
            g_error := 'PROCESS UPDATE - EPIS_MTOS_SCORE';
            pk_alertlog.log_debug(g_error);
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EPIS_MTOS_SCORE',
                                          i_rowids     => l_rowids,
                                          o_error      => o_error);
        
            l_rowids := table_varchar();
        
        END IF;
    
        l_next_epis_mtos_score := ts_epis_mtos_score.next_key;
    
        ts_epis_mtos_score.ins(id_epis_mtos_score_in        => l_next_epis_mtos_score,
                               id_episode_in                => i_id_episode,
                               flg_status_in                => pk_sev_scores_constant.g_flg_status_a,
                               id_prof_create_in            => i_prof.id,
                               dt_create_in                 => l_sysdate,
                               id_epis_mtos_score_parent_in => i_epis_mtos_score,
                               id_mtos_score_in             => pk_sev_scores_constant.g_id_score_isstw,
                               rows_out                     => l_rowids);
    
        g_error := 'PROCESS INSERT - EPIS_MTOS_SCORE';
        pk_alertlog.log_debug(g_error);
        t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EPIS_MTOS_SCORE',
                                      i_rowids     => l_rowids,
                                      o_error      => o_error);
    
        l_rowids := table_varchar();
    
        FOR i IN 1 .. i_id_mtos_param.count
        LOOP
        
            IF i_id_mtos_score(i) = pk_sev_scores_constant.g_id_score_tw_dao
            THEN
            
                l_doa_element := pk_alert_constant.g_yes;
                BEGIN
                    ts_epis_mtos_param.ins(id_epis_mtos_param_in => seq_epis_mtos_param.nextval,
                                           id_epis_mtos_score_in => l_next_epis_mtos_score,
                                           id_mtos_param_in      => 1003,
                                           registered_value_in   => 1731,
                                           extra_score_in        => NULL,
                                           id_prof_create_in     => i_prof.id,
                                           dt_create_in          => l_sysdate,
                                           rows_out              => l_rowids);
                
                    g_error := 'PROCESS INSERT - EPIS_MTOS_PARAM';
                    pk_alertlog.log_debug(g_error);
                    t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                                  i_prof       => i_prof,
                                                  i_table_name => 'EPIS_MTOS_PARAM',
                                                  i_rowids     => l_rowids,
                                                  o_error      => o_error);
                
                    EXIT;
                EXCEPTION
                    WHEN OTHERS THEN
                        o_msg_error := pk_message.get_message(i_lang      => i_lang,
                                                              i_prof      => i_prof,
                                                              i_code_mess => 'SEV_CODES_TW.ERROR_DUPS');
                        RETURN TRUE;
                END;
            END IF;
        
            SELECT mp.id_mtos_score, mp.id_mtos_param, mpv.id_mtos_param_value VALUE, i_extra_score(i) value_final
              INTO l_mtos_score, l_mtos_ais, l_value, l_value_final
              FROM mtos_param_value mpv
             INNER JOIN mtos_param mp
                ON mp.id_mtos_param = mpv.id_mtos_param
             WHERE mpv.id_mtos_param_value = i_id_mtos_param(i);
        
            -- SAVE PARAMETER!
            g_error := 'CREATE NEW PARAM';
            pk_alertlog.log_debug(g_error);
            BEGIN
                ts_epis_mtos_param.ins(id_epis_mtos_param_in => seq_epis_mtos_param.nextval,
                                       id_epis_mtos_score_in => l_next_epis_mtos_score,
                                       id_mtos_param_in      => l_mtos_ais,
                                       registered_value_in   => l_value,
                                       extra_score_in        => l_value_final,
                                       id_prof_create_in     => i_prof.id,
                                       dt_create_in          => l_sysdate,
                                       rows_out              => l_rowids);
            
                g_error := 'PROCESS INSERT - EPIS_MTOS_PARAM';
                pk_alertlog.log_debug(g_error);
                t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'EPIS_MTOS_PARAM',
                                              i_rowids     => l_rowids,
                                              o_error      => o_error);
            
            EXCEPTION
                WHEN OTHERS THEN
                    o_msg_error := pk_message.get_message(i_lang      => i_lang,
                                                          i_prof      => i_prof,
                                                          i_code_mess => 'SEV_CODES_TW.ERROR_DUPS');
                    RETURN TRUE;
            END;
            l_rowids := table_varchar();
        END LOOP;
    
        /*Save Total Score Mtos Param*/
    
        IF l_doa_element = pk_alert_constant.g_yes
        THEN
            l_total := pk_sev_scores_constant.g_iss_max_total_value;
        ELSE
            IF NOT get_modified_total_score(i_lang          => i_lang,
                                            i_prof          => i_prof,
                                            i_id_mtos_score => i_id_mtos_score,
                                            i_id_mtos_param => i_id_mtos_param,
                                            i_extra_score   => i_extra_score,
                                            o_total         => l_total,
                                            o_error         => o_error)
            THEN
                RAISE l_exception;
            END IF;
        END IF;
    
        ts_epis_mtos_param.ins(id_epis_mtos_param_in => seq_epis_mtos_param.nextval,
                               id_epis_mtos_score_in => l_next_epis_mtos_score,
                               id_mtos_param_in      => 1002,
                               registered_value_in   => l_total,
                               id_prof_create_in     => i_prof.id,
                               dt_create_in          => l_sysdate,
                               rows_out              => l_rowids);
    
        g_error := 'PROCESS INSERT - EPIS_MTOS_PARAM';
        pk_alertlog.log_debug(g_error);
        t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EPIS_MTOS_PARAM',
                                      i_rowids     => l_rowids,
                                      o_error      => o_error);
    
        o_id_epis_mtos_score := l_next_epis_mtos_score;
        RETURN TRUE;
    EXCEPTION
        WHEN l_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              'SET_MODIFIED_SCORE',
                                              o_error);
        
            pk_alert_exceptions.reset_error_state();
            RETURN FALSE;
        
    END set_modified_score;

    FUNCTION get_modified_score
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE
    ) RETURN NUMBER IS
        l_total_score NUMBER;
    BEGIN
    
        BEGIN
            SELECT to_number(b.registered_value) minor_id
              INTO l_total_score
              FROM epis_mtos_score a
             INNER JOIN epis_mtos_param b
                ON a.id_epis_mtos_score = b.id_epis_mtos_score
             INNER JOIN mtos_param c
                ON c.id_mtos_param = b.id_mtos_param
             INNER JOIN mtos_score d
                ON d.id_mtos_score = c.id_mtos_score
             WHERE a.flg_status = pk_alert_constant.g_active
               AND a.id_epis_mtos_score = i_epis_mtos_score
               AND d.id_mtos_score = pk_sev_scores_constant.g_id_score_isstw;
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
    
        RETURN l_total_score;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_modified_score;

    FUNCTION get_modified_score
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_episode      IN episode.id_episode%TYPE,
        i_id_patient      IN patient.id_patient%TYPE,
        i_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        o_mtos_score      OUT pk_types.cursor_type,
        o_total_score     OUT NUMBER,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
        l_exception EXCEPTION;
    BEGIN
    
        OPEN o_mtos_score FOR
            SELECT d.id_mtos_score major_id,
                   pk_translation.get_translation(i_lang, d.code_mtos_score) major,
                   c.id_mtos_param ais_id,
                   pk_translation.get_translation(i_lang, c.code_mtos_param) ais,
                   to_number(b.registered_value) minor_id,
                   (SELECT pk_translation.get_translation(i_lang, mpv.code_mtos_param_value)
                      FROM mtos_param_value mpv
                     WHERE mpv.id_mtos_param_value = to_number(b.registered_value)) minor,
                   b.extra_score extra_score_flg,
                   decode(b.extra_score,
                          NULL,
                          NULL,
                          pk_sysdomain.get_domain(i_code_dom => 'YES_NO', i_val => b.extra_score, i_lang => i_lang)) extra_score,
                   (SELECT mpv.extra_score
                      FROM mtos_param_value mpv
                     WHERE mpv.id_mtos_param_value = to_number(b.registered_value)) extra_score_avail_flg,
                   CASE a.id_mtos_score
                       WHEN pk_sev_scores_constant.g_id_score_tw_head THEN
                        pk_message.get_message(i_lang => i_lang, i_code_mess => 'SEV_SCORES_RMK_HEAD')
                       WHEN pk_sev_scores_constant.g_id_score_tw_face THEN
                        pk_message.get_message(i_lang => i_lang, i_code_mess => 'SEV_SCORES_RMK_FACE')
                       WHEN pk_sev_scores_constant.g_id_score_tw_chest THEN
                        pk_message.get_message(i_lang => i_lang, i_code_mess => 'SEV_SCORES_RMK_CHEST')
                       WHEN pk_sev_scores_constant.g_id_score_tw_extremities THEN
                        pk_message.get_message(i_lang => i_lang, i_code_mess => 'SEV_SCORES_RMK_EXTRE')
                       WHEN pk_sev_scores_constant.g_id_score_tw_external THEN
                        pk_message.get_message(i_lang => i_lang, i_code_mess => 'SEV_SCORES_RMK_EXTER')
                   END remark
              FROM epis_mtos_score a
             INNER JOIN epis_mtos_param b
                ON a.id_epis_mtos_score = b.id_epis_mtos_score
             INNER JOIN mtos_param c
                ON c.id_mtos_param = b.id_mtos_param
             INNER JOIN mtos_score d
                ON d.id_mtos_score = c.id_mtos_score
             WHERE a.flg_status = pk_alert_constant.g_active
               AND a.id_epis_mtos_score = i_epis_mtos_score
               AND d.id_mtos_score != pk_sev_scores_constant.g_id_score_isstw;
    
        o_total_score := get_modified_score(i_lang => i_lang, i_prof => i_prof, i_epis_mtos_score => i_epis_mtos_score);
    
        RETURN TRUE;
    EXCEPTION
        WHEN l_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              'GET_MODIFIED_SCORE',
                                              o_error);
            pk_types.open_my_cursor(o_mtos_score);
            pk_alert_exceptions.reset_error_state();
            ROLLBACK;
            RETURN FALSE;
        
    END get_modified_score;

    FUNCTION set_sev_score_api
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_id_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        i_id_episode         IN episode.id_episode%TYPE,
        i_dt_create          IN VARCHAR2,
        i_mtos_params        IN table_number,
        i_extra_score        IN table_varchar,
        o_id_epis_mtos_score OUT epis_mtos_score.id_epis_mtos_score%TYPE,
        o_error              OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_exception EXCEPTION;
    
        l_id_mtos_score table_number;
        l_msg_error     VARCHAR2(200 CHAR);
    
        l_dt_create TIMESTAMP WITH LOCAL TIME ZONE;
    
    BEGIN
    
        l_dt_create := pk_date_utils.get_string_tstz(i_lang      => i_lang,
                                                     i_prof      => i_prof,
                                                     i_timestamp => i_dt_create,
                                                     i_timezone  => NULL);
    
        SELECT b.id_mtos_score
          BULK COLLECT
          INTO l_id_mtos_score
          FROM mtos_param_value a
         INNER JOIN mtos_param b
            ON a.id_mtos_param = b.id_mtos_param;
    
        IF NOT pk_sev_scores_core.set_modified_score(i_lang               => i_lang,
                                                     i_prof               => i_prof,
                                                     i_id_episode         => i_id_episode,
                                                     i_id_patient         => NULL,
                                                     i_epis_mtos_score    => i_id_epis_mtos_score,
                                                     i_id_mtos_score      => l_id_mtos_score,
                                                     i_id_mtos_param      => i_mtos_params,
                                                     i_extra_score        => i_extra_score,
                                                     i_flg_api            => pk_alert_constant.g_yes,
                                                     i_dt_create          => l_dt_create,
                                                     o_id_epis_mtos_score => o_id_epis_mtos_score,
                                                     o_msg_error          => l_msg_error,
                                                     o_error              => o_error)
        THEN
            RAISE l_exception;
        END IF;
    
        RETURN TRUE;
    EXCEPTION
        WHEN l_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              'SET_SEV_SCORE_API',
                                              o_error);
        
            pk_alert_exceptions.reset_error_state();
            ROLLBACK;
            RETURN FALSE;
        
    END set_sev_score_api;

    FUNCTION cancel_sev_score_api
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_id_epis_mtos_score IN epis_mtos_score.id_epis_mtos_score%TYPE,
        i_id_cancel_reason   IN epis_mtos_score.id_cancel_reason%TYPE,
        i_cancel_notes       IN epis_mtos_score.notes_cancel%TYPE,
        i_dt_cancel          IN VARCHAR2,
        o_error              OUT t_error_out
    ) RETURN BOOLEAN IS
        l_exception EXCEPTION;
        l_episode episode.id_episode%TYPE;
    BEGIN
    
        SELECT a.id_episode
          INTO l_episode
          FROM epis_mtos_score a
         WHERE a.id_epis_mtos_score = i_id_epis_mtos_score;
    
        IF NOT pk_sev_scores_core.cancel_sev_score(i_lang            => i_lang,
                                                   i_prof            => i_prof,
                                                   i_id_episode      => l_episode,
                                                   i_epis_mtos_score => i_id_epis_mtos_score,
                                                   id_cancel_reason  => i_id_cancel_reason,
                                                   notes_cancel      => i_cancel_notes,
                                                   o_error           => o_error)
        THEN
            RAISE l_exception;
        END IF;
    
        RETURN TRUE;
    EXCEPTION
        WHEN l_exception THEN
            pk_alert_exceptions.process_error(i_lang,
                                              o_error.ora_sqlcode,
                                              o_error.ora_sqlerrm,
                                              g_error,
                                              g_owner,
                                              g_package,
                                              'CANCEL_SEV_SCORE_API',
                                              o_error);
        
            pk_alert_exceptions.reset_error_state();
            ROLLBACK;
            RETURN FALSE;
    END cancel_sev_score_api;

    FUNCTION count_documented_tasks
    (
        i_lang                IN language.id_language%TYPE,
        i_prof                IN profissional,
        i_episode             IN episode.id_episode%TYPE,
        i_mtos_param          IN mtos_param.id_mtos_param%TYPE,
        i_flg_param_task_type IN mtos_param_task.flg_param_task_type%TYPE,
        i_ref_value           IN NUMBER,
        i_ref_unit_measure    IN unit_measure.id_unit_measure%TYPE,
        i_flg_condition       IN VARCHAR2,
        i_flg_comparison      IN VARCHAR2,
        i_dt_min              IN TIMESTAMP WITH LOCAL TIME ZONE,
        i_dt_max              IN TIMESTAMP WITH LOCAL TIME ZONE
    ) RETURN INTEGER IS
    
        l_count         INTEGER := 0;
        l_table_number  table_number := table_number();
        l_table_varchar table_varchar := table_varchar();
    
    BEGIN
        IF i_flg_param_task_type IN (pk_sev_scores_constant.g_task_analysis_parameter)
        THEN
        
            SELECT mpt.id_content_param_task
              BULK COLLECT
              INTO l_table_varchar
              FROM mtos_param_task mpt
             WHERE mpt.id_mtos_param = i_mtos_param
               AND mpt.flg_available = pk_alert_constant.g_yes
               AND mpt.flg_param_task_type = i_flg_param_task_type;
        
            l_count := pk_lab_tests_external_api_db.get_results_count(i_lang               => i_lang,
                                                                      i_prof               => i_prof,
                                                                      i_episode            => i_episode,
                                                                      i_analysis_parameter => l_table_varchar,
                                                                      i_flg_parameter      => i_flg_condition,
                                                                      i_dt_min             => i_dt_min,
                                                                      i_dt_max             => i_dt_max);
        
        ELSIF i_flg_param_task_type IN (pk_sev_scores_constant.g_flg_param_task_vital_sign)
        THEN
            SELECT mpt.id_param_task
              BULK COLLECT
              INTO l_table_number
              FROM mtos_param_task mpt
             WHERE mpt.id_mtos_param = i_mtos_param
               AND mpt.flg_available = pk_alert_constant.g_yes
               AND mpt.flg_param_task_type = i_flg_param_task_type;
        
            l_count := pk_vital_sign.get_vs_result_count(i_lang          => i_lang,
                                                         i_prof          => i_prof,
                                                         i_episode       => i_episode,
                                                         i_id_vs         => l_table_number,
                                                         i_flg_parameter => i_flg_condition,
                                                         i_dt_min        => i_dt_min,
                                                         i_dt_max        => i_dt_max);
        END IF;
    
        RETURN l_count;
    
    END count_documented_tasks;

    FUNCTION check_param_default
    (
        i_lang                IN language.id_language%TYPE,
        i_prof                IN profissional,
        i_episode             IN episode.id_episode%TYPE,
        i_mtos_param          IN mtos_param.id_mtos_param%TYPE,
        i_flg_param_task_type IN mtos_param_task.flg_param_task_type%TYPE,
        i_ref_value           IN NUMBER,
        i_ref_unit_measure    IN unit_measure.id_unit_measure%TYPE,
        i_flg_condition       IN VARCHAR2,
        i_flg_comparison      IN VARCHAR2,
        i_dt_min              IN TIMESTAMP WITH LOCAL TIME ZONE,
        i_dt_max              IN TIMESTAMP WITH LOCAL TIME ZONE
    ) RETURN BOOLEAN IS
    
        l_table_number  table_number := table_number();
        l_table_varchar table_varchar := table_varchar();
    
        l_param_value           NUMBER(24, 3);
        l_param_value_converted NUMBER(24, 3) := NULL;
        l_param_um              unit_measure.id_unit_measure%TYPE;
    
    BEGIN
    
        IF i_flg_param_task_type IN (pk_sev_scores_constant.g_task_analysis_parameter)
        THEN
        
            SELECT mpt.id_content_param_task
              BULK COLLECT
              INTO l_table_varchar
              FROM mtos_param_task mpt
             WHERE mpt.id_mtos_param = i_mtos_param
               AND mpt.flg_available = pk_alert_constant.g_yes
               AND mpt.flg_param_task_type = i_flg_param_task_type;
        
            IF NOT pk_lab_tests_external_api_db.get_lab_test_result(i_lang               => i_lang,
                                                                    i_prof               => i_prof,
                                                                    i_episode            => i_episode,
                                                                    i_analysis_parameter => l_table_varchar,
                                                                    i_flg_parameter      => i_flg_condition,
                                                                    i_dt_min             => i_dt_min,
                                                                    i_dt_max             => i_dt_max,
                                                                    o_result_value       => l_param_value,
                                                                    o_result_um          => l_param_um)
            THEN
                RETURN FALSE;
            END IF;
        ELSIF i_flg_param_task_type IN (pk_sev_scores_constant.g_flg_param_task_vital_sign)
        THEN
            SELECT mpt.id_param_task
              BULK COLLECT
              INTO l_table_number
              FROM mtos_param_task mpt
             WHERE mpt.id_mtos_param = i_mtos_param
               AND mpt.flg_available = pk_alert_constant.g_yes
               AND mpt.flg_param_task_type = i_flg_param_task_type;
        
            IF NOT pk_vital_sign.get_vs_result(i_lang          => i_lang,
                                               i_prof          => i_prof,
                                               i_episode       => i_episode,
                                               i_id_vs         => l_table_number,
                                               i_flg_parameter => i_flg_condition,
                                               i_dt_min        => i_dt_min,
                                               i_dt_max        => i_dt_max,
                                               o_result_value  => l_param_value,
                                               o_result_um     => l_param_um)
            THEN
                RETURN FALSE;
            END IF;
        END IF;
    
        IF l_param_value IS NOT NULL
        THEN
            IF i_ref_unit_measure <> l_param_um
            THEN
                IF NOT pk_unit_measure.are_convertible(i_unit_meas => l_param_um, i_unit_meas_def => i_ref_unit_measure)
                THEN
                    RETURN FALSE;
                END IF;
            
                l_param_value_converted := pk_unit_measure.get_unit_mea_conversion(i_value         => l_param_value,
                                                                                   i_unit_meas     => l_param_um,
                                                                                   i_unit_meas_def => i_ref_unit_measure);
            
            ELSIF (i_ref_unit_measure IS NULL AND l_param_um IS NOT NULL)
                  OR (i_ref_unit_measure IS NOT NULL AND l_param_um IS NULL)
            THEN
                RETURN FALSE;
            END IF;
        
            IF (nvl(l_param_value_converted, l_param_value) < i_ref_value AND
               i_flg_comparison = pk_sev_scores_constant.g_less_than)
               OR (nvl(l_param_value_converted, l_param_value) <= i_ref_value AND
               i_flg_comparison = pk_sev_scores_constant.g_less_equal_than)
            THEN
                RETURN TRUE;
            ELSIF (nvl(l_param_value_converted, l_param_value) > i_ref_value AND
                  i_flg_comparison = pk_sev_scores_constant.g_greater_than)
                  OR (nvl(l_param_value_converted, l_param_value) >= i_ref_value AND
                  i_flg_comparison = pk_sev_scores_constant.g_greater_equal_than)
            THEN
                RETURN TRUE;
            ELSE
                RETURN FALSE;
            END IF;
        ELSE
            RETURN FALSE;
        END IF;
    
        RETURN FALSE;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN TRUE;
    END check_param_default;

    FUNCTION check_param_default_2
    (
        i_lang                IN language.id_language%TYPE,
        i_prof                IN profissional,
        i_episode             IN episode.id_episode%TYPE,
        i_mtos_param          IN mtos_param.id_mtos_param%TYPE,
        i_flg_param_task_type IN table_varchar,
        i_ref_unit_measure    IN table_number,
        i_flg_condition       IN VARCHAR2,
        i_flg_comparison      IN VARCHAR2,
        i_dt_min              IN TIMESTAMP WITH LOCAL TIME ZONE,
        i_dt_max              IN TIMESTAMP WITH LOCAL TIME ZONE
    ) RETURN NUMBER IS
    
        l_table_number  table_number := table_number();
        l_table_varchar table_varchar := table_varchar();
    
        l_param_value NUMBER(24, 3);
        l_param_um    unit_measure.id_unit_measure%TYPE;
    
        l_table_ap table_number := table_number();
        l_table_vs table_number := table_number();
    
        l_final_result_aux      NUMBER;
        l_param_value_converted NUMBER;
    
    BEGIN
    
        FOR i IN i_flg_param_task_type.first .. i_flg_param_task_type.last
        LOOP
            BEGIN
                IF i_flg_param_task_type(i) IN (pk_sev_scores_constant.g_task_analysis_parameter)
                THEN
                
                    SELECT mpt.id_content_param_task
                      BULK COLLECT
                      INTO l_table_varchar
                      FROM mtos_param_task mpt
                     WHERE mpt.id_mtos_param = i_mtos_param
                       AND mpt.flg_available = pk_alert_constant.g_yes
                       AND mpt.flg_param_task_type = i_flg_param_task_type(i);
                
                    IF NOT pk_lab_tests_external_api_db.get_lab_test_result(i_lang               => i_lang,
                                                                            i_prof               => i_prof,
                                                                            i_episode            => i_episode,
                                                                            i_analysis_parameter => l_table_varchar,
                                                                            i_flg_parameter      => i_flg_condition,
                                                                            i_dt_min             => i_dt_min,
                                                                            i_dt_max             => i_dt_max,
                                                                            o_result_value       => l_param_value,
                                                                            o_result_um          => l_param_um)
                    THEN
                        RETURN NULL;
                    END IF;
                
                    l_table_ap.extend();
                    l_table_ap(l_table_ap.count) := l_param_value;
                
                ELSIF i_flg_param_task_type(i) IN (pk_sev_scores_constant.g_flg_param_task_vital_sign)
                THEN
                    SELECT mpt.id_param_task
                      BULK COLLECT
                      INTO l_table_number
                      FROM mtos_param_task mpt
                     WHERE mpt.id_mtos_param = i_mtos_param
                       AND mpt.flg_available = pk_alert_constant.g_yes
                       AND mpt.flg_param_task_type = i_flg_param_task_type(i);
                
                    IF NOT pk_vital_sign.get_vs_result(i_lang          => i_lang,
                                                  i_prof          => i_prof,
                                                  i_episode       => i_episode,
                                                  i_id_vs         => l_table_number,
                                                  i_flg_parameter => CASE
                                                                         WHEN i_flg_condition = pk_sev_scores_constant.g_condition_min_harvest THEN
                                                                          pk_sev_scores_constant.g_condition_min
                                                                         WHEN i_flg_condition = pk_sev_scores_constant.g_condition_max_harvest THEN
                                                                          pk_sev_scores_constant.g_condition_max
                                                                         ELSE
                                                                          i_flg_condition
                                                                     END,
                                                  i_dt_min        => i_dt_min,
                                                  i_dt_max        => i_dt_max,
                                                  o_result_value  => l_param_value,
                                                  o_result_um     => l_param_um)
                    THEN
                        RETURN NULL;
                    END IF;
                
                    l_table_vs.extend();
                    l_table_vs(l_table_vs.count) := l_param_value;
                END IF;
            END;
        END LOOP;
    
        IF l_table_ap.exists(1)
           OR l_table_vs.exists(1)
        THEN
            IF (l_table_ap.exists(1) AND l_table_vs.exists(1)) -- in case it have both vs and ap
            THEN
                FOR i IN l_table_ap.first .. l_table_ap.last
                LOOP
                    l_final_result_aux := l_table_ap(i) / (l_table_vs(i) / 100);
                
                    RETURN l_final_result_aux;
                
                END LOOP;
            
            ELSIF l_table_vs.exists(1) -- in case it only has vital signs
            THEN
                -- in this case it will have only one vital signs
                RETURN l_table_vs(1);
            ELSIF l_table_ap.exists(1) -- in case it only has analysis parameters
                  AND (i_flg_condition = pk_sev_scores_constant.g_condition_max OR
                       i_flg_condition = pk_sev_scores_constant.g_condition_max_harvest)
            THEN
                SELECT *
                  INTO l_final_result_aux
                  FROM (SELECT column_value AS l_value
                          FROM TABLE(l_table_ap)
                         ORDER BY l_value DESC)
                 WHERE rownum = 1;
            
                RETURN l_final_result_aux;
            
            ELSIF l_table_ap.exists(1) -- in case it only has analysis parameters
                  AND (i_flg_condition = pk_sev_scores_constant.g_condition_min OR
                       i_flg_condition = pk_sev_scores_constant.g_condition_min_harvest)
            THEN
                SELECT *
                  INTO l_final_result_aux
                  FROM (SELECT column_value AS l_value
                          FROM TABLE(l_table_ap)
                         ORDER BY l_value ASC)
                 WHERE rownum = 1;
            
                IF i_ref_unit_measure(1) <> l_param_um -- we can compare to l_param_um because the unit measure will be the same for the analysis parameter
                THEN
                    IF NOT pk_unit_measure.are_convertible(i_unit_meas     => l_param_um,
                                                           i_unit_meas_def => i_ref_unit_measure(1))
                    THEN
                        RETURN NULL;
                    END IF;
                
                    l_param_value_converted := pk_unit_measure.get_unit_mea_conversion(i_value         => l_param_value,
                                                                                       i_unit_meas     => l_param_um,
                                                                                       i_unit_meas_def => i_ref_unit_measure(1));
                    RETURN l_param_value_converted;
                ELSIF (i_ref_unit_measure IS NULL AND l_param_um IS NOT NULL)
                      OR (i_ref_unit_measure IS NOT NULL AND l_param_um IS NULL)
                THEN
                    RETURN NULL;
                END IF;
                RETURN l_final_result_aux;
            END IF;
        
        ELSE
            RETURN NULL;
        END IF;
    
        RETURN NULL;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END check_param_default_2;

    FUNCTION check_param_default_to_int
    (
        i_lang                IN language.id_language%TYPE,
        i_prof                IN profissional,
        i_episode             IN episode.id_episode%TYPE,
        i_mtos_param          IN mtos_param.id_mtos_param%TYPE,
        i_flg_param_task_type IN mtos_param_task.flg_param_task_type%TYPE,
        i_ref_value           IN NUMBER,
        i_ref_unit_measure    IN unit_measure.id_unit_measure%TYPE,
        i_flg_condition       IN VARCHAR2,
        i_flg_comparison      IN VARCHAR2,
        i_dt_min              IN TIMESTAMP WITH LOCAL TIME ZONE,
        i_dt_max              IN TIMESTAMP WITH LOCAL TIME ZONE
    ) RETURN INTEGER IS
    
    BEGIN
    
        IF check_param_default(i_lang                => i_lang,
                               i_prof                => i_prof,
                               i_episode             => i_episode,
                               i_mtos_param          => i_mtos_param,
                               i_flg_param_task_type => i_flg_param_task_type,
                               i_ref_value           => i_ref_value,
                               i_ref_unit_measure    => i_ref_unit_measure,
                               i_flg_condition       => i_flg_condition,
                               i_flg_comparison      => i_flg_comparison,
                               i_dt_min              => i_dt_min,
                               i_dt_max              => i_dt_max)
        THEN
            RETURN 1;
        ELSE
            RETURN 0;
        END IF;
    END check_param_default_to_int;

    FUNCTION check_param_default_2_final
    (
        i_lang                IN language.id_language%TYPE,
        i_prof                IN profissional,
        i_episode             IN episode.id_episode%TYPE,
        i_mtos_param          IN mtos_param.id_mtos_param%TYPE,
        i_flg_param_task_type IN table_varchar,
        i_ref_unit_measure    IN table_number,
        i_flg_condition       IN VARCHAR2,
        i_flg_comparison      IN VARCHAR2,
        i_dt_min              IN TIMESTAMP WITH LOCAL TIME ZONE,
        i_dt_max              IN TIMESTAMP WITH LOCAL TIME ZONE
    ) RETURN NUMBER IS
    
        l_final_result NUMBER;
        l_return       NUMBER;
    
    BEGIN
    
        l_final_result := check_param_default_2(i_lang                => i_lang,
                                                i_prof                => i_prof,
                                                i_episode             => i_episode,
                                                i_mtos_param          => i_mtos_param,
                                                i_flg_param_task_type => i_flg_param_task_type,
                                                i_ref_unit_measure    => i_ref_unit_measure,
                                                i_flg_condition       => i_flg_condition,
                                                i_flg_comparison      => i_flg_comparison,
                                                i_dt_min              => i_dt_min,
                                                i_dt_max              => i_dt_max);
    
        IF l_final_result IS NULL
        THEN
            l_return := NULL;
        ELSE
            CASE i_mtos_param
                WHEN pk_sev_scores_constant.g_sofa_tw_respiratory THEN
                    CASE
                        WHEN l_final_result > 400 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_respiratory_1;
                        WHEN l_final_result <= 400
                             AND l_final_result > 300 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_respiratory_2;
                        WHEN l_final_result <= 300
                             AND l_final_result > 200 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_respiratory_3;
                        WHEN l_final_result <= 200
                             AND l_final_result > 100 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_respiratory_4;
                        WHEN l_final_result <= 100 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_respiratory_5;
                        ELSE
                            l_return := NULL;
                    END CASE;
                
                WHEN pk_sev_scores_constant.g_sofa_tw_glasgow THEN
                    CASE
                        WHEN l_final_result = 15 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_glasgow_1;
                        WHEN l_final_result = 14
                             OR l_final_result = 13 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_glasgow_2;
                        WHEN l_final_result <= 12
                             AND l_final_result >= 10 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_glasgow_3;
                        WHEN l_final_result <= 9
                             AND l_final_result >= 6 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_glasgow_4;
                        WHEN l_final_result <= 5
                             AND l_final_result >= 3 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_glasgow_5;
                        ELSE
                            l_return := NULL;
                    END CASE;
                
                WHEN pk_sev_scores_constant.g_sofa_tw_liver THEN
                    CASE
                        WHEN l_final_result < 1.2 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_liver_1;
                        WHEN l_final_result >= 1.2
                             AND l_final_result <= 1.9 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_liver_2;
                        WHEN l_final_result >= 2
                             AND l_final_result <= 5.9 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_liver_3;
                        WHEN l_final_result >= 6
                             AND l_final_result <= 11.9 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_liver_4;
                        WHEN l_final_result >= 12 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_liver_5;
                        ELSE
                            l_return := NULL;
                    END CASE;
                
                WHEN pk_sev_scores_constant.g_sofa_tw_coagulation THEN
                    CASE
                        WHEN l_final_result > 150000 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_coagulation_1;
                        WHEN l_final_result <= 150000
                             AND l_final_result > 100000 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_coagulation_2;
                        WHEN l_final_result <= 100000
                             AND l_final_result > 50000 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_coagulation_3;
                        WHEN l_final_result <= 50000
                             AND l_final_result > 20000 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_coagulation_4;
                        WHEN l_final_result <= 20000 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_coagulation_5;
                        ELSE
                            l_return := NULL;
                    END CASE;
                
                WHEN pk_sev_scores_constant.g_sofa_tw_renal THEN
                    CASE
                        WHEN l_final_result < 1.2 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_renal_1;
                        WHEN l_final_result >= 1.2
                             AND l_final_result <= 1.9 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_renal_2;
                        WHEN l_final_result >= 2
                             AND l_final_result <= 3.4 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_renal_3;
                        WHEN l_final_result >= 3.5
                             AND l_final_result <= 4.9 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_renal_4;
                        WHEN l_final_result >= 5 THEN
                            l_return := pk_sev_scores_constant.g_sofa_tw_renal_5;
                        ELSE
                            l_return := NULL;
                    END CASE;
                ELSE
                    l_return := NULL;
            END CASE;
        END IF;
    
        RETURN l_return;
    
    END check_param_default_2_final;

    -- CALERT-213, CALERT-316
    /**********************************************************************************************
    * Formats a given total value according to the rules of the specified score in 'internal_name'.
    *
    * @param i_lang               Language ID
    * @param i_prof               Professional info
    * @param i_episode            Episode ID
    * @param i_mtos_score         mtos_score ID
    * @param i_internal_name      Score internal name
    *
    * @return            Formatted string
    *
    * @author            Lillian Lu
    * @version           2.7.2.3
    * @since             13/1/2018
    **********************************************************************************************/
    FUNCTION get_last_sev_score_total
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_id_episode    IN episode.id_episode%TYPE,
        i_mtos_score    IN mtos_score.id_mtos_score%TYPE,
        i_internal_name IN mtos_param.internal_name%TYPE
    ) RETURN VARCHAR2 IS
        l_total_score VARCHAR2(3 CHAR);
    BEGIN
        SELECT t.registered_value_desc
          INTO l_total_score
          FROM (SELECT pk_sev_scores_core.get_registered_value_desc(i_lang            => i_lang,
                                                                    i_prof            => i_prof,
                                                                    i_epis_mtos_score => ems.id_epis_mtos_score,
                                                                    i_id_mtos_param   => emp.id_mtos_param,
                                                                    i_id_extra_score  => emp.extra_score) registered_value_desc,
                       row_number() over(ORDER BY ems.dt_create DESC) rn
                  FROM epis_mtos_score ems
                  JOIN epis_mtos_param emp
                    ON ems.id_epis_mtos_score = emp.id_epis_mtos_score
                  JOIN mtos_param mpm
                    ON mpm.id_mtos_param = emp.id_mtos_param
                  JOIN mtos_score mse
                    ON mse.id_mtos_score = mpm.id_mtos_score
                 WHERE ems.id_episode = i_id_episode
                   AND ems.id_mtos_score = i_mtos_score
                   AND mpm.internal_name = i_internal_name
                   AND emp.registered_value IS NOT NULL
                   AND ems.flg_status = pk_sev_scores_constant.g_flg_status_a) t
         WHERE t.rn = 1;
    
        RETURN l_total_score;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_last_sev_score_total;

    -- ***********************************

    FUNCTION get_timi_base_sql
    (
        i_lang      IN NUMBER,
        i_prof      IN profissional,
        i_mto_score IN NUMBER,
        i_group     IN NUMBER
    ) RETURN t_tab_sev_score IS
        tbl_score t_tab_sev_score;
    BEGIN
    
        SELECT t_rec_sev_score(id_mtos_score         => id_mtos_score,
                               flg_score_type        => flg_score_type,
                               score_desc            => score_desc,
                               id_mtos_param         => id_mtos_param,
                               param_desc            => param_desc,
                               flg_fill_type         => flg_fill_type,
                               score_rank            => score_rank,
                               param_rank            => param_rank,
                               internal_name         => internal_name,
                               registered_value      => registered_value,
                               registered_value_desc => registered_value_desc,
                               desc_unit_measure     => desc_unit_measure,
                               relation              => relation,
                               related_scores        => related_scores,
                               id_vital_sign         => id_vital_sign,
                               id_unit_measure       => id_unit_measure,
                               val_min               => val_min,
                               val_max               => val_max,
                               format_num            => format_num,
                               id_vital_sign_read    => id_vital_sign_read,
                               flg_mandatory         => flg_mandatory,
                               id_mtos_score_group   => id_mtos_score_group,
                               group_desc            => group_desc)
          BULK COLLECT
          INTO tbl_score
          FROM (SELECT scr.id_mtos_score id_mtos_score,
                       scr.flg_score_type flg_score_type,
                       scr.code_mtos_score score_desc -- VARCHAR2(1000 CHAR)
                      ,
                       par.id_mtos_param id_mtos_param,
                       pk_translation.get_translation(i_lang => i_lang, i_code_mess => par.code_mtos_param) param_desc,
                       par.flg_fill_type flg_fill_type,
                       scr.rank score_rank,
                       par.rank param_rank,
                       par.internal_name internal_name,
                       NULL registered_value -- NUMBER
                      ,
                       NULL registered_value_desc -- VARCHAR2(0200 CHAR)
                      ,
                       NULL desc_unit_measure -- VARCHAR2(0200 CHAR)
                      ,
                       NULL relation -- NUMBER
                      ,
                       NULL related_scores -- NUMBER
                      ,
                       NULL id_vital_sign,
                       NULL id_unit_measure,
                       NULL val_min,
                       NULL val_max,
                       NULL format_num -- VARCHAR2(0200 CHAR)
                      ,
                       NULL id_vital_sign_read,
                       par.flg_mandatory flg_mandatory,
                       grp.id_mtos_score_group,
                       pk_translation.get_translation(i_lang, grp.code_mtos_score_group) group_desc
                  FROM mtos_score scr
                  JOIN mtos_score_group grp
                    ON grp.id_mtos_score = scr.id_mtos_score
                  JOIN mtos_param par
                    ON par.id_mtos_score_group = grp.id_mtos_score_group
                --join mtos_param_value pv  on pv.id_mtos_param = par.id_mtos_param
                 WHERE scr.id_mtos_score = i_mto_score
                   AND grp.id_mtos_score_group = i_group) xsql;
    
        RETURN tbl_score;
    
    END get_timi_base_sql;

    FUNCTION exists_in_diagnoses
    (
        i_lang               IN NUMBER,
        i_prof               IN profissional,
        i_episode            IN NUMBER,
        i_table_param_values IN table_number
    ) RETURN BOOLEAN IS
        l_bool            BOOLEAN;
        l_count           NUMBER;
        l_table_diagnoses table_number;
    BEGIN
    
        SELECT COUNT(*)
          INTO l_count
          FROM epis_diagnosis ed
          JOIN (SELECT /*+ OPT_ESTIMATE(TABLE xpto ROWS=1) */
                 xpto.column_value id_diagnosis
                  FROM TABLE(i_table_param_values) xpto) xsql
            ON xsql.id_diagnosis = ed.id_diagnosis
         WHERE ed.id_episode = i_episode
           AND ed.flg_type = pk_diagnosis.g_diag_type_p;
    
        l_bool := l_count > 0;
    
        RETURN l_bool;
    
    END exists_in_diagnoses;

    FUNCTION compare_exists_vs
    (
        i_lang               IN NUMBER,
        i_prof               IN profissional,
        i_episode            IN NUMBER,
        i_table_param_values IN table_number,
        i_id_mtos_param      IN NUMBER DEFAULT NULL,
        flg_comparison       IN VARCHAR2 DEFAULT NULL
    ) RETURN BOOLEAN IS
        l_visit NUMBER;
        l_value NUMBER;
        l_bool  BOOLEAN;
    
        l_min_val NUMBER;
        l_max_val NUMBER;
    
    BEGIN
    
        SELECT id_visit
          INTO l_visit
          FROM episode e
         WHERE e.id_episode = i_episode;
    
        BEGIN
            SELECT vs_value
              INTO l_value
              FROM (SELECT vsr.value vs_value
                      FROM vital_sign_read vsr
                      JOIN (SELECT /*+ OPT_ESTIMATE(TABLE xpto ROWS=1) */
                            xpto.column_value id_vital_sign
                             FROM TABLE(i_table_param_values) xpto) xsql
                        ON xsql.id_vital_sign = vsr.id_vital_sign
                     WHERE vsr.id_episode IN (SELECT e.id_episode
                                                FROM episode e
                                               WHERE e.id_visit = l_visit)
                       AND vsr.id_software_read = i_prof.software
                       AND vsr.id_institution_read = i_prof.institution
                       AND vsr.flg_state != pk_alert_constant.g_cancelled
                     ORDER BY vsr.dt_vital_sign_read_tstz ASC)
             WHERE rownum = 1;
        
        EXCEPTION
            WHEN no_data_found THEN
                l_bool := NULL;
        END;
    
        BEGIN
            SELECT mt.min_val, mt.max_val
              INTO l_min_val, l_max_val
              FROM mtos_param_value mv
              JOIN mtos_param_value_task mt
                ON mt.id_mtos_param_value = mv.id_mtos_param_value
             WHERE mv.id_mtos_param = i_id_mtos_param;
        
        EXCEPTION
            WHEN OTHERS THEN
                l_bool := NULL;
        END;
    
        CASE flg_comparison
            WHEN 'GT' THEN
                IF l_min_val IS NOT NULL
                THEN
                    l_bool := l_value > l_min_val;
                END IF;
            WHEN 'LT' THEN
                IF l_max_val IS NOT NULL
                THEN
                    l_bool := l_value < l_max_val;
                END IF;
            ELSE
                l_bool := NULL;
        END CASE;
    
        RETURN l_bool;
    
    END compare_exists_vs;

    -- *******************************************************
    FUNCTION process_diags
    (
        i_lang               IN NUMBER,
        i_prof               IN profissional,
        i_episode            IN NUMBER,
        i_table_param_values IN table_number,
        i_tbl_value          IN table_number
    ) RETURN table_number IS
        tbl_return table_number := table_number();
        l_bool     BOOLEAN;
        tbl_x      table_number := table_number();
    BEGIN
    
        <<lup_thru_diags>>
        FOR i IN 1 .. i_table_param_values.count
        LOOP
        
            tbl_x  := table_number(i_table_param_values(i));
            l_bool := exists_in_diagnoses(i_lang, i_prof, i_episode, tbl_x);
            IF l_bool
            THEN
                tbl_return.extend();
                tbl_return(tbl_return.count) := i_tbl_value(i);
            END IF;
        
        END LOOP lup_thru_diags;
    
        -- Why?? Because ux stuff....
        IF tbl_return.count = 0
        THEN
            tbl_return := table_number(NULL);
        END IF;
    
        RETURN tbl_return;
    
    END process_diags;

    FUNCTION process_value
    (
        i_lang          IN NUMBER,
        i_prof          IN profissional,
        i_episode       IN NUMBER,
        i_id_mtos_score IN NUMBER,
        i_id_mtos_param IN NUMBER
    ) RETURN table_number IS
        l_table_param_values table_number;
        tbl_id_value         table_number;
        l_flg_fill_type      mtos_param.flg_fill_type%TYPE;
    
        l_age      NUMBER;
        l_return   NUMBER;
        tbl_return table_number := table_number();
    
        l_chk BOOLEAN;
    
        k_multichoice           CONSTANT VARCHAR2(0050 CHAR) := 'S';
        k_nstemi_age_over_limit CONSTANT NUMBER := 1068;
        k_nstemi_risk_factor    CONSTANT NUMBER := 1069;
        k_age_over_limit        CONSTANT NUMBER := 65;
    
        -- ******************************************
        FUNCTION get_pat_age RETURN NUMBER IS
            l_age NUMBER;
            l_pat patient%ROWTYPE;
        BEGIN
        
            l_pat := get_pat_info(i_id_episode => i_episode);
            l_age := pk_patient.get_pat_age(i_lang     => i_lang,
                                            i_dt_birth => l_pat.dt_birth,
                                            i_age      => NULL,
                                            ---i_age_format => pk_sev_scores_constant.g_age_months,
                                            i_patient => l_pat.id_patient);
            RETURN l_age;
        
        END get_pat_age;
    
        FUNCTION get_flg_fill_type(i_mto_param IN NUMBER) RETURN VARCHAR2 IS
            tbl_flg  table_varchar;
            l_return mtos_param.flg_fill_type%TYPE;
        BEGIN
        
            SELECT flg_fill_type
              BULK COLLECT
              INTO tbl_flg
              FROM mtos_param mp
             WHERE mp.id_mtos_param = i_mto_param;
        
            IF tbl_flg.count > 0
            THEN
                l_return := tbl_flg(1);
            END IF;
        
            RETURN l_return;
        
        END get_flg_fill_type;
    
    BEGIN
    
        SELECT mpt.id_param_task, mpv.id_mtos_param_value
          BULK COLLECT
          INTO l_table_param_values, tbl_id_value
          FROM mtos_param mp
          JOIN mtos_param_value mpv
            ON mp.id_mtos_param = mpv.id_mtos_param
          JOIN mtos_param_value_task mpvt
            ON mpv.id_mtos_param_value = mpvt.id_mtos_param_value
          LEFT JOIN mtos_param_task mpt
            ON mpt.id_mtos_param = mp.id_mtos_param
           AND ((mpvt.flg_param_task_type = pk_icnp_constant.g_diagnosis AND mpvt.id_param_task = mpt.id_param_task) OR
               mpvt.flg_param_task_type <> pk_icnp_constant.g_diagnosis OR mpvt.flg_param_task_type IS NULL)
         WHERE mp.id_mtos_param = i_id_mtos_param;
    
        l_flg_fill_type := get_flg_fill_type(i_mto_param => i_id_mtos_param);
    
        CASE i_id_mtos_param
            WHEN pk_sev_scores_constant.g_stemi_param_age_64_74 THEN
            
                l_age := get_pat_age();
            
                IF l_age BETWEEN 64 AND 74
                THEN
                    l_return := pk_sev_scores_constant.g_stemi_value_yes_64_74;
                END IF;
            WHEN pk_sev_scores_constant.g_stemi_param_age_75 THEN
            
                l_age := get_pat_age();
                IF l_age >= 75
                THEN
                    l_return := pk_sev_scores_constant.g_stemi_value_yes_75;
                END IF;
            WHEN pk_sev_scores_constant.g_stemi_param_diabetes THEN
                IF NOT (exists_in_diagnoses(i_lang, i_prof, i_episode, l_table_param_values))
                THEN
                    l_return := NULL;
                ELSE
                    l_return := pk_sev_scores_constant.g_stemi_value_yes_diabetes;
                END IF;
            WHEN pk_sev_scores_constant.g_stemi_param_systolic THEN
                l_chk := compare_exists_vs(i_lang, i_prof, i_episode, l_table_param_values, i_id_mtos_param, 'LT');
                IF NOT l_chk
                THEN
                    l_return := pk_sev_scores_constant.g_stemi_value_no_systolic;
                ELSIF l_chk
                THEN
                    l_return := pk_sev_scores_constant.g_stemi_value_yes_systolic;
                ELSE
                    l_return := NULL;
                END IF;
            WHEN pk_sev_scores_constant.g_stemi_param_heart_rate THEN
                l_chk := compare_exists_vs(i_lang, i_prof, i_episode, l_table_param_values, i_id_mtos_param, 'GT');
                IF NOT l_chk
                THEN
                    l_return := pk_sev_scores_constant.g_stemi_value_no_heart_rate;
                ELSIF l_chk
                THEN
                    l_return := pk_sev_scores_constant.g_stemi_value_yes_heart_rate;
                ELSE
                    l_return := NULL;
                END IF;
            WHEN pk_sev_scores_constant.g_stemi_param_killip THEN
                l_chk := compare_exists_vs(i_lang, i_prof, i_episode, l_table_param_values);
                IF NOT l_chk
                THEN
                    l_return := NULL;
                ELSIF l_chk
                THEN
                    l_return := pk_sev_scores_constant.g_stemi_value_yes_killip;
                ELSE
                    l_return := NULL;
                END IF;
            WHEN pk_sev_scores_constant.g_stemi_param_weight THEN
                l_chk := compare_exists_vs(i_lang, i_prof, i_episode, l_table_param_values, i_id_mtos_param, 'LT');
                IF NOT l_chk
                THEN
                    l_return := pk_sev_scores_constant.g_stemi_value_no_weight;
                ELSIF l_chk
                THEN
                    l_return := pk_sev_scores_constant.g_stemi_value_yes_weight;
                ELSE
                    l_return := NULL;
                END IF;
            WHEN k_nstemi_age_over_limit THEN
            
                l_age := get_pat_age();
            
                IF l_age IS NOT NULL
                THEN
                
                    l_return := 2058;
                    IF l_age >= k_age_over_limit
                    THEN
                        l_return := 2057; --k_flag_value_yes;
                    END IF;
                
                END IF;
            
            WHEN k_nstemi_risk_factor THEN
                -- 1069
            
                tbl_return := process_diags(i_lang, i_prof, i_episode, l_table_param_values, tbl_id_value);
            
            ELSE
                l_return := NULL;
        END CASE;
    
        IF l_flg_fill_type != k_multichoice
        THEN
            tbl_return := table_number(l_return);
        END IF;
    
        RETURN tbl_return;
    
    END process_value;

    -- ***********************************************************************
    FUNCTION get_timi_core
    (
        i_lang      IN NUMBER,
        i_prof      IN profissional,
        i_episode   IN NUMBER,
        i_mto_score IN NUMBER,
        i_group     IN NUMBER
    ) RETURN t_tab_sev_score IS
        tbl_score           t_tab_sev_score;
        tbl_score_timi_core t_tab_sev_score;
        k_code CONSTANT VARCHAR2(0200 CHAR) := 'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.';
        l_count NUMBER;
        l_code  VARCHAR2(0500 CHAR);
    BEGIN
    
        tbl_score_timi_core := get_timi_base_sql(i_lang, i_prof, i_mto_score, i_group);
    
        <<lup_thru_param>>
        FOR i IN 1 .. tbl_score_timi_core.count
        LOOP
            tbl_score_timi_core(i).registered_value := table_number();
            tbl_score_timi_core(i).registered_value := process_value(i_lang,
                                                                     i_prof,
                                                                     i_episode,
                                                                     tbl_score_timi_core(i).id_mtos_score,
                                                                     tbl_score_timi_core(i).id_mtos_param);
        
            IF tbl_score_timi_core(i).registered_value.count > 0
            THEN
            
                tbl_score_timi_core(i).registered_value_desc := table_varchar();
            
                FOR j IN 1 .. tbl_score_timi_core(i).registered_value.count
                LOOP
                    l_code := k_code || tbl_score_timi_core(i).registered_value(j);
                
                    tbl_score_timi_core(i).registered_value_desc.extend;
                    l_count := tbl_score_timi_core(i).registered_value_desc.count();
                
                    tbl_score_timi_core(i).registered_value_desc(l_count) := pk_translation.get_translation(2, l_code);
                
                END LOOP;
            END IF;
        
        END LOOP lup_thru_param;
    
        RETURN tbl_score_timi_core;
    
    END get_timi_core;

    FUNCTION decode_value
    (
        i_flag       IN NUMBER,
        i_new_value  IN table_number,
        i_edit_value IN table_number
    ) RETURN table_number IS
        l_return table_number;
    BEGIN
    
        IF i_flag IS NULL
        THEN
            l_return := i_new_value;
        ELSE
            l_return := i_edit_value;
        END IF;
    
        RETURN l_return;
    
    END decode_value;

    FUNCTION decode_value_v
    (
        i_lang       IN NUMBER,
        i_flag       IN NUMBER,
        i_new_value  IN table_varchar,
        i_edit_value IN table_number
    ) RETURN table_varchar IS
        l_return table_varchar := table_varchar();
        k_code   VARCHAR2(0200 CHAR) := 'MTOS_PARAM_VALUE.CODE_MTOS_PARAM_VALUE.';
    BEGIN
    
        IF i_flag IS NULL
        THEN
            l_return := i_new_value;
        ELSE
        
            FOR i IN 1 .. i_edit_value.count
            LOOP
                l_return.extend();
                l_return(i) := pk_translation.get_translation(i_lang, k_code || i_edit_value(i));
            END LOOP;
        
        END IF;
    
        RETURN l_return;
    
    END decode_value_v;

    FUNCTION get_timi_new_n_edit
    (
        i_lang            IN NUMBER,
        i_prof            IN profissional,
        i_episode         IN NUMBER,
        i_mto_score       IN NUMBER,
        i_group           IN NUMBER,
        i_epis_mtos_score IN NUMBER
    ) RETURN t_tab_sev_score IS
        tbl_core       t_tab_sev_score := t_tab_sev_score();
        tbl_new_n_edit t_tab_sev_score;
    BEGIN
    
        tbl_core := get_timi_core(i_lang      => i_lang,
                                  i_prof      => i_prof,
                                  i_episode   => i_episode,
                                  i_mto_score => i_mto_score,
                                  i_group     => i_group);
    
        SELECT t_rec_sev_score(id_mtos_score    => main_tbl.id_mtos_score,
                                flg_score_type   => main_tbl.flg_score_type,
                                score_desc       => main_tbl.score_desc,
                                id_mtos_param    => main_tbl.id_mtos_param,
                                param_desc       => main_tbl.param_desc,
                                flg_fill_type    => main_tbl.flg_fill_type,
                                score_rank       => main_tbl.score_rank,
                                param_rank       => main_tbl.param_rank,
                                internal_name    => main_tbl.internal_name,
                                registered_value => CASE
                                                     -- this is are the score parameteres and they shouldn't be calculated here (thor)
                                                        WHEN main_tbl.id_mtos_param NOT IN (1075, 1076, 1077, 1078) THEN
                                                         pk_sev_scores_core.decode_value(emp.id_epis_mtos_score,
                                                                                         main_tbl.registered_value,
                                                                                         emp.registered_value)
                                                        ELSE
                                                         NULL
                                                    END,
                                
                                registered_value_desc => CASE
                                                             WHEN main_tbl.id_mtos_param NOT IN (1075, 1076, 1077, 1078) THEN
                                                              pk_sev_scores_core.decode_value_v(i_lang,
                                                                                                emp.id_epis_mtos_score,
                                                                                                main_tbl.registered_value_desc,
                                                                                                emp.registered_value)
                                                             ELSE
                                                              NULL
                                                         END,
                                desc_unit_measure     => main_tbl.desc_unit_measure,
                                relation              => main_tbl.relation,
                                related_scores        => main_tbl.related_scores,
                                id_vital_sign         => main_tbl.id_vital_sign,
                                id_unit_measure       => main_tbl.id_unit_measure,
                                val_min               => main_tbl.val_min,
                                val_max               => main_tbl.val_max,
                                format_num            => main_tbl.format_num,
                                id_vital_sign_read    => main_tbl.id_vital_sign_read,
                                flg_mandatory         => main_tbl.flg_mandatory,
                                id_mtos_score_group   => main_tbl.id_mtos_score_group,
                                group_desc            => group_desc)
          BULK COLLECT
          INTO tbl_new_n_edit
          FROM (SELECT /*+ OPT_ESTIMATE(TABLE xcore ROWS=1) */
                 xcore.*
                  FROM TABLE(tbl_core) xcore) main_tbl
        --join mtos_Score ms on ms.id_mtos_score = main_tbl.ID_MTOS_SCORE
          JOIN mtos_score_group msg
            ON msg.id_mtos_score_group = main_tbl.id_mtos_score_group
          LEFT JOIN (SELECT emp.id_epis_mtos_score,
                            emp.id_mtos_param,
                            CAST(MULTISET (SELECT registered_value
                                    FROM epis_mtos_param x
                                   WHERE emp.id_epis_mtos_score = x.id_epis_mtos_score
                                     AND emp.id_mtos_param = x.id_mtos_param) AS table_number) registered_value
                       FROM epis_mtos_param emp
                      WHERE emp.id_epis_mtos_score = i_epis_mtos_score
                      GROUP BY emp.id_epis_mtos_score, emp.id_mtos_param) emp
            ON emp.id_mtos_param = main_tbl.id_mtos_param
           AND emp.id_epis_mtos_score = i_epis_mtos_score
         ORDER BY main_tbl.score_rank, msg.rank, main_tbl.param_rank;
    
        RETURN tbl_new_n_edit;
    
    END get_timi_new_n_edit;

    -- *****************************************
    FUNCTION get_timi_choice
    (
        i_lang            IN NUMBER,
        i_prof            IN profissional,
        i_episode         IN NUMBER,
        i_mto_score       IN NUMBER,
        i_epis_mtos_score IN NUMBER
    ) RETURN t_tab_sev_score IS
        k_timi_choice CONSTANT NUMBER := 31;
        tbl_scr_choice t_tab_sev_score;
        tbl_num        table_number;
        tbl_desc       table_varchar;
        tbl_return     t_tab_sev_score := t_tab_sev_score();
        k_mtos_param_timi CONSTANT NUMBER := 1066;
    BEGIN
    
        tbl_scr_choice := get_timi_base_sql(i_lang, i_prof, i_mto_score, k_timi_choice);
    
        SELECT id_mtos_score
          BULK COLLECT
          INTO tbl_num
          FROM epis_mtos_score x
         WHERE x.id_epis_mtos_score = i_epis_mtos_score;
    
        IF tbl_num.count > 0
        THEN
        
            SELECT pk_translation.get_translation(i_lang, x.code_mtos_param_value)
              BULK COLLECT
              INTO tbl_desc
              FROM mtos_param_value x
             WHERE x.id_mtos_param = k_mtos_param_timi
               AND x.value = tbl_num(1);
        
            tbl_scr_choice(1).registered_value := tbl_num;
            tbl_scr_choice(1).registered_value_desc := tbl_desc;
        END IF;
    
        RETURN tbl_scr_choice;
    
    END get_timi_choice;

    FUNCTION get_nstemi
    (
        i_lang            IN NUMBER,
        i_prof            IN profissional,
        i_episode         IN NUMBER,
        i_mto_score       IN NUMBER,
        i_epis_mtos_score IN NUMBER
    ) RETURN t_tab_sev_score IS
        k_nstemi_grp_history      CONSTANT NUMBER := 32;
        k_nstemi_grp_presentation CONSTANT NUMBER := 33;
        k_nstemi_grp_total        CONSTANT NUMBER := 35;
    
        tbl_return              t_tab_sev_score := t_tab_sev_score();
        tbl_nstemi_history      t_tab_sev_score;
        tbl_nstemi_presentation t_tab_sev_score;
        tbl_nstemi_total        t_tab_sev_score;
    
    BEGIN
    
        tbl_nstemi_history      := get_timi_new_n_edit(i_lang,
                                                       i_prof,
                                                       i_episode,
                                                       i_mto_score,
                                                       k_nstemi_grp_history,
                                                       i_epis_mtos_score);
        tbl_nstemi_presentation := get_timi_new_n_edit(i_lang,
                                                       i_prof,
                                                       i_episode,
                                                       i_mto_score,
                                                       k_nstemi_grp_presentation,
                                                       i_epis_mtos_score);
        tbl_nstemi_total        := get_timi_new_n_edit(i_lang,
                                                       i_prof,
                                                       i_episode,
                                                       i_mto_score,
                                                       k_nstemi_grp_total,
                                                       i_epis_mtos_score);
    
        tbl_return := tbl_nstemi_history MULTISET UNION ALL tbl_nstemi_presentation;
        tbl_return := tbl_return MULTISET UNION ALL tbl_nstemi_total;
    
        RETURN tbl_return;
    
    END get_nstemi;

    FUNCTION get_stemi
    (
        i_lang            IN NUMBER,
        i_prof            IN profissional,
        i_episode         IN NUMBER,
        i_mto_score       IN NUMBER,
        i_epis_mtos_score IN NUMBER
    ) RETURN t_tab_sev_score IS
        k_stemi_grp_history      CONSTANT NUMBER := 36;
        k_stemi_grp_exam         CONSTANT NUMBER := 37;
        k_stemi_grp_presentation CONSTANT NUMBER := 38;
        k_stemi_grp_total        CONSTANT NUMBER := 39;
    
        tbl_return             t_tab_sev_score := t_tab_sev_score();
        tbl_stemi_history      t_tab_sev_score;
        tbl_stemi_exam         t_tab_sev_score;
        tbl_stemi_presentation t_tab_sev_score;
        tbl_stemi_total        t_tab_sev_score;
        l_count                NUMBER;
    BEGIN
    
        tbl_stemi_history := get_timi_new_n_edit(i_lang,
                                                 i_prof,
                                                 i_episode,
                                                 i_mto_score,
                                                 k_stemi_grp_history,
                                                 i_epis_mtos_score);
        l_count           := tbl_stemi_history.count;
        tbl_stemi_exam    := get_timi_new_n_edit(i_lang,
                                                 i_prof,
                                                 i_episode,
                                                 i_mto_score,
                                                 k_stemi_grp_exam,
                                                 i_epis_mtos_score);
        l_count           := tbl_stemi_exam.count;
    
        tbl_stemi_presentation := get_timi_new_n_edit(i_lang,
                                                      i_prof,
                                                      i_episode,
                                                      i_mto_score,
                                                      k_stemi_grp_presentation,
                                                      i_epis_mtos_score);
        l_count                := tbl_stemi_presentation.count;
    
        tbl_stemi_total := get_timi_new_n_edit(i_lang,
                                               i_prof,
                                               i_episode,
                                               i_mto_score,
                                               k_stemi_grp_total,
                                               i_epis_mtos_score);
        l_count         := tbl_stemi_total.count;
    
        tbl_return := tbl_stemi_history MULTISET UNION ALL tbl_stemi_exam;
        tbl_return := tbl_return MULTISET UNION ALL tbl_stemi_presentation;
        tbl_return := tbl_return MULTISET UNION ALL tbl_stemi_total;
    
        RETURN tbl_return;
    
    END get_stemi;

    FUNCTION get_all_timi
    (
        i_lang            IN NUMBER,
        i_prof            IN profissional,
        i_episode         IN NUMBER,
        i_mto_score       IN NUMBER,
        i_epis_mtos_score IN NUMBER
    ) RETURN t_tab_sev_score IS
        --k_timi_choice CONSTANT NUMBER := 31;
        tbl_scr_choice t_tab_sev_score;
        tbl_scr_nstemi t_tab_sev_score;
        tbl_scr_stemi  t_tab_sev_score;
        tbl_return     t_tab_sev_score := t_tab_sev_score();
    BEGIN
    
        --tbl_scr_choice := get_timi_base_sql(i_lang, i_prof, i_mto_score, k_timi_choice);
        tbl_scr_choice := get_timi_choice(i_lang, i_prof, i_episode, i_mto_score, i_epis_mtos_score);
        tbl_scr_nstemi := get_nstemi(i_lang,
                                     i_prof,
                                     i_episode,
                                     pk_sev_scores_constant.g_id_score_nstemi,
                                     i_epis_mtos_score);
        tbl_scr_stemi  := get_stemi(i_lang,
                                    i_prof,
                                    i_episode,
                                    pk_sev_scores_constant.g_id_score_stemi,
                                    i_epis_mtos_score);
    
        tbl_return := tbl_scr_choice MULTISET UNION ALL tbl_scr_nstemi;
        tbl_return := tbl_return MULTISET UNION ALL tbl_scr_stemi;
    
        RETURN tbl_return;
    
    END get_all_timi;

    PROCEDURE get_timi_group
    (
        i_lang            IN NUMBER,
        i_prof            IN profissional,
        i_episode         IN NUMBER,
        i_mto_score       IN NUMBER,
        i_epis_mtos_score IN NUMBER,
        o_score           OUT pk_types.cursor_type
    ) IS
    BEGIN
    
        OPEN o_score FOR
            SELECT xx.*
              FROM TABLE(pk_sev_scores_core.get_all_timi(i_lang, i_prof, i_episode, i_mto_score, i_epis_mtos_score)) xx;
    
    END get_timi_group;

    -- ****************************************************************
    FUNCTION get_stemi_tot_item(i_value IN NUMBER) RETURN NUMBER IS
        l_total_aux_a NUMBER := i_value;
        l_return      NUMBER; --VARCHAR2(0050 CHAR);
    BEGIN
    
        CASE l_total_aux_a
            WHEN 0 THEN
                l_return := 0.8;
            WHEN 1 THEN
                l_return := 1.6;
            WHEN 2 THEN
                l_return := 2.2;
            WHEN 3 THEN
                l_return := 4.4;
            WHEN 4 THEN
                l_return := 7.3;
            WHEN 5 THEN
                l_return := 12.4;
            WHEN 6 THEN
                l_return := 16.1;
            WHEN 7 THEN
                l_return := 23.4;
            WHEN 8 THEN
                l_return := 26.8;
            ELSE
                IF l_total_aux_a > 8
                THEN
                    l_return := 35.9;
                END IF;
        END CASE;
    
        RETURN l_return;
    
    END get_stemi_tot_item;

    FUNCTION get_nstemi_tot_item
    (
        i_value IN NUMBER,
        i_idx   IN NUMBER
    ) RETURN VARCHAR2 IS
        l_total_aux_a NUMBER := i_value;
        l_return      VARCHAR2(0050 CHAR);
    BEGIN
    
        CASE
            WHEN l_total_aux_a BETWEEN 0 AND 1 THEN
                CASE i_idx
                    WHEN 1 THEN
                        l_return := l_total_aux_a;
                    WHEN 2 THEN
                        l_return := '2.90%';
                    WHEN 3 THEN
                        l_return := '4.70%';
                    WHEN 4 THEN
                        l_return := 'Low';
                    ELSE
                        NULL;
                END CASE;
            
            WHEN l_total_aux_a = 2 THEN
                CASE i_idx
                    WHEN 1 THEN
                        l_return := l_total_aux_a;
                    WHEN 2 THEN
                        l_return := '2.90%';
                    WHEN 3 THEN
                        l_return := '8.30%';
                    WHEN 4 THEN
                        l_return := 'Low';
                    ELSE
                        NULL;
                END CASE;
            
            WHEN l_total_aux_a = 3 THEN
                CASE i_idx
                    WHEN 1 THEN
                        l_return := l_total_aux_a;
                    WHEN 2 THEN
                        l_return := '4.70%';
                    WHEN 3 THEN
                        l_return := '13.20%';
                    WHEN 4 THEN
                        l_return := 'Intermediate';
                    ELSE
                        NULL;
                END CASE;
            
            WHEN l_total_aux_a = 4 THEN
                CASE i_idx
                    WHEN 1 THEN
                        l_return := l_total_aux_a;
                    WHEN 2 THEN
                        l_return := '6.70%';
                    WHEN 3 THEN
                        l_return := '19.90%';
                    WHEN 4 THEN
                        l_return := 'High';
                    ELSE
                        NULL;
                END CASE;
            
            WHEN l_total_aux_a = 5 THEN
                CASE i_idx
                    WHEN 1 THEN
                        l_return := l_total_aux_a;
                    WHEN 2 THEN
                        l_return := '11.50%';
                    WHEN 3 THEN
                        l_return := '26.20%';
                    WHEN 4 THEN
                        l_return := 'High';
                    ELSE
                        NULL;
                END CASE;
            
            WHEN l_total_aux_a = 6
                 OR l_total_aux_a = 7 THEN
                CASE i_idx
                    WHEN 1 THEN
                        l_return := l_total_aux_a;
                    WHEN 2 THEN
                        l_return := '19.40%';
                    WHEN 3 THEN
                        l_return := '40.90%';
                    WHEN 4 THEN
                        l_return := 'High';
                    ELSE
                        NULL;
                END CASE;
            ELSE
                NULL;
        END CASE;
    
        RETURN l_return;
    
    END get_nstemi_tot_item;

    PROCEDURE get_score_nstemi
    (
        i_id_mtos_param IN table_number,
        i_value         IN table_number,
        o_total         OUT pk_types.cursor_type
    ) IS
        --l_func_name CONSTANT VARCHAR2(200 CHAR) := 'GET_TOTAL_SCORE';
        l_common_error EXCEPTION;
        --
    
        l_total_aux_a NUMBER(12, 4) := 0;
        l_total_b_aux VARCHAR2(24 CHAR);
        l_total_c     VARCHAR2(24 CHAR);
        l_total_d     VARCHAR2(24 CHAR);
        --
    
        l_id_mtos_score NUMBER;
    
        tbl_param     table_number := table_number();
        l_tbl_varchar table_varchar;
        l_tot_diags   NUMBER;
    
        k_diags_param CONSTANT NUMBER := 1069;
        l_score_value NUMBER;
        flag_done     BOOLEAN;
    
        FUNCTION get_id_mtos_score(i_param IN NUMBER) RETURN NUMBER IS
            l_return NUMBER;
        BEGIN
        
            SELECT id_mtos_score
              INTO l_return
              FROM mtos_param
             WHERE id_mtos_param = i_param;
        
            RETURN l_return;
        
        END get_id_mtos_score;
    
        FUNCTION get_param_value
        (
            i_param_value IN NUMBER,
            i_param       IN NUMBER
        ) RETURN NUMBER IS
            tbl_return table_number;
            l_return   NUMBER := 0;
        BEGIN
        
            SELECT mpe.value
              BULK COLLECT
              INTO tbl_return
              FROM mtos_param_value mpe
             WHERE mpe.id_mtos_param_value = i_param_value
               AND mpe.id_mtos_param = i_param
               AND mpe.flg_available = pk_alert_constant.g_yes;
        
            IF tbl_return.count > 0
            THEN
                -- MK_01
                l_return := tbl_return(1);
            END IF;
        
            RETURN l_return;
        
        END get_param_value;
    
    BEGIN
    
        ---------------------------------------------------
        -- NSTEMI
        ---------------------------------------------------    
        g_error := 'GET NSTEMI TOTAL';
        pk_alertlog.log_debug(g_error);
        l_tot_diags := 0;
        flag_done   := FALSE;
    
        <<lup_thru_params>>
        FOR i IN i_id_mtos_param.first .. i_id_mtos_param.last
        LOOP
        
            --l_score_value := 0;
        
            g_error := 'GET SCORE VALUE';
            pk_alertlog.log_debug(g_error);
        
            l_score_value   := get_param_value(i_param_value => i_value(i), i_param => i_id_mtos_param(i));
            l_id_mtos_score := get_id_mtos_score(i_param => i_id_mtos_param(i));
        
            IF (i_id_mtos_param(i) = k_diags_param)
            THEN
                --MK_02
            
                IF NOT flag_done
                THEN
                
                    IF (nvl(l_score_value, 0) > 0)
                    THEN
                        l_tot_diags := l_tot_diags + 1;
                    END IF;
                
                    IF l_tot_diags >= 3
                    THEN
                        l_score_value := 1;
                        flag_done     := TRUE;
                    ELSE
                        l_score_value := 0;
                    END IF;
                ELSE
                    l_score_value := 0;
                END IF; -- flag_done
            
            END IF; --MK_02
        
            tbl_param.extend;
            tbl_param(tbl_param.count) := i_id_mtos_param(i);
            l_total_aux_a := l_total_aux_a + l_score_value;
        
        END LOOP lup_thru_params;
    
        l_total_b_aux := get_nstemi_tot_item(i_value => l_total_aux_a, i_idx => 2);
        l_total_c     := get_nstemi_tot_item(i_value => l_total_aux_a, i_idx => 3);
        l_total_d     := get_nstemi_tot_item(i_value => l_total_aux_a, i_idx => 4);
    
        l_tbl_varchar := table_varchar(l_total_aux_a);
    
        l_tbl_varchar.extend;
        l_tbl_varchar(2) := l_total_b_aux;
    
        l_tbl_varchar.extend;
        l_tbl_varchar(3) := l_total_c;
    
        l_tbl_varchar.extend;
        l_tbl_varchar(4) := l_total_d;
    
        OPEN o_total FOR
            SELECT l_total_aux_a     total_score,
                   xmain.description total_score_desc,
                   xmain.param       id_mtos_param,
                   l_id_mtos_score   id_mtos_score
              FROM (SELECT sql01.param, sql02.description
                      FROM (SELECT par.column_value param, rownum rn
                              FROM TABLE(tbl_param) par) sql01
                      JOIN (SELECT xdesc.column_value description, rownum rn
                             FROM TABLE(l_tbl_varchar) xdesc) sql02
                        ON sql02.rn = sql01.rn) xmain;
    
    END get_score_nstemi;

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;

    PROCEDURE ins_mtos_param_value_task
    (
        i_id_mtos_param_value IN mtos_param_value_task.id_mtos_param_value%TYPE,
        i_flg_param_task_type IN mtos_param_value_task.flg_param_task_type%TYPE,
        i_id_param_task       IN mtos_param_value_task.id_param_task%TYPE DEFAULT NULL,
        i_min_val             IN mtos_param_value_task.min_val%TYPE DEFAULT NULL,
        i_max_val             IN mtos_param_value_task.max_val%TYPE DEFAULT NULL,
        i_flg_available       IN mtos_param_value_task.flg_available%TYPE DEFAULT pk_alert_constant.g_yes,
        i_handle_error_in     IN BOOLEAN := TRUE
    ) IS
    
        l_id_mtos_param_value_task mtos_param_value_task.id_mtos_param_value_task%TYPE;
    
    BEGIN
    
        l_id_mtos_param_value_task := seq_mtos_param_value_task.nextval;
    
        INSERT INTO mtos_param_value_task
            (id_mtos_param_value,
             flg_param_task_type,
             id_param_task,
             min_val,
             max_val,
             flg_available,
             id_mtos_param_value_task)
        VALUES
            (i_id_mtos_param_value,
             i_flg_param_task_type,
             i_id_param_task,
             i_min_val,
             i_max_val,
             i_flg_available,
             l_id_mtos_param_value_task);
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT i_handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'MTOS_PARAM_VALUE_TASK');
                    END IF;
                END;
            END IF;
    END ins_mtos_param_value_task;

    PROCEDURE ins_mtos_param_task
    (
        i_id_mtos_param         IN mtos_param_task.id_mtos_param%TYPE,
        i_flg_param_task_type   IN mtos_param_task.flg_param_task_type%TYPE,
        i_id_param_task         IN mtos_param_task.id_param_task%TYPE,
        i_id_content_param_task IN mtos_param_task.id_content_param_task%TYPE,
        i_flg_available         IN mtos_param_task.flg_available%TYPE DEFAULT pk_alert_constant.g_yes,
        i_flg_show_task_desc    IN mtos_param_task.flg_show_task_desc%TYPE DEFAULT pk_alert_constant.g_no,
        i_handle_error_in       IN BOOLEAN := TRUE
    ) IS
    
        l_id_mtos_param_task mtos_param_task.id_mtos_param_task%TYPE;
    
    BEGIN
    
        l_id_mtos_param_task := seq_mtos_param_task.nextval;
    
        INSERT INTO mtos_param_task
            (id_mtos_param,
             flg_param_task_type,
             id_param_task,
             id_content_param_task,
             flg_available,
             flg_show_task_desc,
             id_mtos_param_task)
        VALUES
            (i_id_mtos_param,
             i_flg_param_task_type,
             i_id_param_task,
             i_id_content_param_task,
             i_flg_available,
             i_flg_show_task_desc,
             l_id_mtos_param_task);
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT i_handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'MTOS_PARAM_TASK');
                    END IF;
                END;
            END IF;
    END ins_mtos_param_task;

BEGIN

    /* CAN'T TOUCH THIS */
    /* Who am I */
    pk_alertlog.who_am_i(owner => g_owner, name => g_package);
    /* Log init */
    pk_alertlog.log_init(object_name => g_package);
END pk_sev_scores_core;
/
