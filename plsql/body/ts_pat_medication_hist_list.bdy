/*-- Last Change Revision: $Rev: 2028317 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:04 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY TS_PAT_MEDICATION_HIST_LIST
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Maio 25, 2009 19:2:25
| Created By: ALERT
*/
IS

   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_pat_medication_hist_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE
      ,
      id_pat_medication_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      id_episode_in IN PAT_MEDICATION_HIST_LIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_patient_in IN PAT_MEDICATION_HIST_LIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_institution_in IN PAT_MEDICATION_HIST_LIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN PAT_MEDICATION_HIST_LIST.ID_SOFTWARE%TYPE DEFAULT NULL,
      year_begin_in IN PAT_MEDICATION_HIST_LIST.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_MEDICATION_HIST_LIST.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_MEDICATION_HIST_LIST.DAY_BEGIN%TYPE DEFAULT NULL,
      qty_in IN PAT_MEDICATION_HIST_LIST.QTY%TYPE DEFAULT NULL,
      frequency_in IN PAT_MEDICATION_HIST_LIST.FREQUENCY%TYPE DEFAULT NULL,
      flg_status_in IN PAT_MEDICATION_HIST_LIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_professional_in IN PAT_MEDICATION_HIST_LIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN PAT_MEDICATION_HIST_LIST.NOTES%TYPE DEFAULT NULL,
      flg_presc_in IN PAT_MEDICATION_HIST_LIST.FLG_PRESC%TYPE DEFAULT NULL,
      id_prescription_pharm_in IN PAT_MEDICATION_HIST_LIST.ID_PRESCRIPTION_PHARM%TYPE DEFAULT NULL,
      dt_pat_medication_list_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_PAT_MEDICATION_LIST_TSTZ%TYPE DEFAULT NULL,
      id_unit_measure_qty_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_QTY%TYPE DEFAULT NULL,
      id_unit_measure_freq_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_FREQ%TYPE DEFAULT NULL,
      freq_in IN PAT_MEDICATION_HIST_LIST.FREQ%TYPE DEFAULT NULL,
      duration_in IN PAT_MEDICATION_HIST_LIST.DURATION%TYPE DEFAULT NULL,
      id_unit_measure_dur_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_DUR%TYPE DEFAULT NULL,
      dt_start_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_START_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      dt_end_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_END_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      emb_id_in IN PAT_MEDICATION_HIST_LIST.EMB_ID%TYPE DEFAULT NULL,
      id_prod_med_in IN PAT_MEDICATION_HIST_LIST.ID_PROD_MED%TYPE DEFAULT NULL,
      prod_med_decr_in IN PAT_MEDICATION_HIST_LIST.PROD_MED_DECR%TYPE DEFAULT NULL,
      id_drug_req_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_REQ_DET%TYPE DEFAULT NULL,
      id_drug_presc_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      quantity_in IN PAT_MEDICATION_HIST_LIST.QUANTITY%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_MEDICATION_HIST_LIST.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      med_id_type_in IN PAT_MEDICATION_HIST_LIST.MED_ID_TYPE%TYPE DEFAULT NULL,
      continue_in IN PAT_MEDICATION_HIST_LIST.CONTINUE%TYPE DEFAULT NULL,
      vers_in IN PAT_MEDICATION_HIST_LIST.VERS%TYPE DEFAULT NULL,
      id_drug_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG%TYPE DEFAULT NULL,
      med_id_in IN PAT_MEDICATION_HIST_LIST.MED_ID%TYPE DEFAULT NULL,
      dosage_in IN PAT_MEDICATION_HIST_LIST.DOSAGE%TYPE DEFAULT NULL,
      flg_no_med_in IN PAT_MEDICATION_HIST_LIST.FLG_NO_MED%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_MEDICATION_HIST_LIST.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_med_destination_in IN PAT_MEDICATION_HIST_LIST.NOTES_MED_DESTINATION%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_MEDICATION_HIST_LIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_in IN PAT_MEDICATION_HIST_LIST.CANCEL_REASON%TYPE DEFAULT NULL,
      create_user_in IN PAT_MEDICATION_HIST_LIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_MEDICATION_HIST_LIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_MEDICATION_HIST_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_MEDICATION_HIST_LIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_MEDICATION_HIST_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_MEDICATION_HIST_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_take_type_in IN PAT_MEDICATION_HIST_LIST.FLG_TAKE_TYPE%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO PAT_MEDICATION_HIST_LIST (
         ID_PAT_MEDICATION_HIST_LIST,
         ID_PAT_MEDICATION_LIST,
         ID_EPISODE,
         ID_PATIENT,
         ID_INSTITUTION,
         ID_SOFTWARE,
         YEAR_BEGIN,
         MONTH_BEGIN,
         DAY_BEGIN,
         QTY,
         FREQUENCY,
         FLG_STATUS,
         ID_PROFESSIONAL,
         NOTES,
         FLG_PRESC,
         ID_PRESCRIPTION_PHARM,
         DT_PAT_MEDICATION_LIST_TSTZ,
         ID_UNIT_MEASURE_QTY,
         ID_UNIT_MEASURE_FREQ,
         FREQ,
         DURATION,
         ID_UNIT_MEASURE_DUR,
         DT_START_PAT_MED_TSTZ,
         DT_END_PAT_MED_TSTZ,
         EMB_ID,
         ID_PROD_MED,
         PROD_MED_DECR,
         ID_DRUG_REQ_DET,
         ID_DRUG_PRESC_DET,
         QUANTITY,
         ID_EPIS_DOCUMENTATION,
         MED_ID_TYPE,
         CONTINUE,
         VERS,
         ID_DRUG,
         MED_ID,
         DOSAGE,
         FLG_NO_MED,
         NOTES_ADVERS_REACT,
         NOTES_MED_DESTINATION,
         ID_CANCEL_REASON,
         CANCEL_REASON,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION,
         FLG_TAKE_TYPE
         )
      VALUES (
         id_pat_medication_hist_list_in,
         id_pat_medication_list_in,
         id_episode_in,
         id_patient_in,
         id_institution_in,
         id_software_in,
         year_begin_in,
         month_begin_in,
         day_begin_in,
         qty_in,
         frequency_in,
         flg_status_in,
         id_professional_in,
         notes_in,
         flg_presc_in,
         id_prescription_pharm_in,
         dt_pat_medication_list_tstz_in,
         id_unit_measure_qty_in,
         id_unit_measure_freq_in,
         freq_in,
         duration_in,
         id_unit_measure_dur_in,
         dt_start_pat_med_tstz_in,
         dt_end_pat_med_tstz_in,
         emb_id_in,
         id_prod_med_in,
         prod_med_decr_in,
         id_drug_req_det_in,
         id_drug_presc_det_in,
         quantity_in,
         id_epis_documentation_in,
         med_id_type_in,
         continue_in,
         vers_in,
         id_drug_in,
         med_id_in,
         dosage_in,
         flg_no_med_in,
         notes_advers_react_in,
         notes_med_destination_in,
         id_cancel_reason_in,
         cancel_reason_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in,
         flg_take_type_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              PK_ALERT_EXCEPTIONS.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PAT_MEDICATION_HIST_LIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           IF l_name = 'PMHL_DPD_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DRUG_PRESC_DET'
               , value_in => id_drug_presc_det_in);
           END IF;
           IF l_name = 'PMHL_DRD_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DRUG_REQ_DET'
               , value_in => id_drug_req_det_in);
           END IF;
           IF l_name = 'PMHL_EPIS_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'PMHL_ICR_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'PMHL_INST_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INSTITUTION'
               , value_in => id_institution_in);
           END IF;
           IF l_name = 'PMHL_PAT_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'PMHL_PROFESSIONAL_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           IF l_name = 'PMHL_SOFTW_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SOFTWARE'
               , value_in => id_software_in);
           END IF;
           IF l_name = 'PMHL_UMD_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_UNIT_MEASURE_DUR'
               , value_in => id_unit_measure_dur_in);
           END IF;
           IF l_name = 'PMHL_UMF_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_UNIT_MEASURE_FREQ'
               , value_in => id_unit_measure_freq_in);
           END IF;
           IF l_name = 'PMHL_UMQ_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_UNIT_MEASURE_QTY'
               , value_in => id_unit_measure_qty_in);
           END IF;
           IF l_name = 'PMLH_MED_EI_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'EMB_ID'
               , value_in => emb_id_in);
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'VERS'
               , value_in => vers_in);
           END IF;
           IF l_name = 'PMLH_MED_INT_ID_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DRUG'
               , value_in => id_drug_in);
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'VERS'
               , value_in => vers_in);
           END IF;
           IF l_name = 'PMN_1_PMN_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PAT_MEDICATION_LIST'
               , value_in => id_pat_medication_list_in);
           END IF;
           IF l_name = 'PMN_1_PPN_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PRESCRIPTION_PHARM'
               , value_in => id_prescription_pharm_in);
           END IF;
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           PK_ALERT_EXCEPTIONS.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_pat_medication_hist_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE
      ,
      id_pat_medication_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      id_episode_in IN PAT_MEDICATION_HIST_LIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_patient_in IN PAT_MEDICATION_HIST_LIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_institution_in IN PAT_MEDICATION_HIST_LIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN PAT_MEDICATION_HIST_LIST.ID_SOFTWARE%TYPE DEFAULT NULL,
      year_begin_in IN PAT_MEDICATION_HIST_LIST.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_MEDICATION_HIST_LIST.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_MEDICATION_HIST_LIST.DAY_BEGIN%TYPE DEFAULT NULL,
      qty_in IN PAT_MEDICATION_HIST_LIST.QTY%TYPE DEFAULT NULL,
      frequency_in IN PAT_MEDICATION_HIST_LIST.FREQUENCY%TYPE DEFAULT NULL,
      flg_status_in IN PAT_MEDICATION_HIST_LIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_professional_in IN PAT_MEDICATION_HIST_LIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN PAT_MEDICATION_HIST_LIST.NOTES%TYPE DEFAULT NULL,
      flg_presc_in IN PAT_MEDICATION_HIST_LIST.FLG_PRESC%TYPE DEFAULT NULL,
      id_prescription_pharm_in IN PAT_MEDICATION_HIST_LIST.ID_PRESCRIPTION_PHARM%TYPE DEFAULT NULL,
      dt_pat_medication_list_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_PAT_MEDICATION_LIST_TSTZ%TYPE DEFAULT NULL,
      id_unit_measure_qty_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_QTY%TYPE DEFAULT NULL,
      id_unit_measure_freq_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_FREQ%TYPE DEFAULT NULL,
      freq_in IN PAT_MEDICATION_HIST_LIST.FREQ%TYPE DEFAULT NULL,
      duration_in IN PAT_MEDICATION_HIST_LIST.DURATION%TYPE DEFAULT NULL,
      id_unit_measure_dur_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_DUR%TYPE DEFAULT NULL,
      dt_start_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_START_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      dt_end_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_END_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      emb_id_in IN PAT_MEDICATION_HIST_LIST.EMB_ID%TYPE DEFAULT NULL,
      id_prod_med_in IN PAT_MEDICATION_HIST_LIST.ID_PROD_MED%TYPE DEFAULT NULL,
      prod_med_decr_in IN PAT_MEDICATION_HIST_LIST.PROD_MED_DECR%TYPE DEFAULT NULL,
      id_drug_req_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_REQ_DET%TYPE DEFAULT NULL,
      id_drug_presc_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      quantity_in IN PAT_MEDICATION_HIST_LIST.QUANTITY%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_MEDICATION_HIST_LIST.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      med_id_type_in IN PAT_MEDICATION_HIST_LIST.MED_ID_TYPE%TYPE DEFAULT NULL,
      continue_in IN PAT_MEDICATION_HIST_LIST.CONTINUE%TYPE DEFAULT NULL,
      vers_in IN PAT_MEDICATION_HIST_LIST.VERS%TYPE DEFAULT NULL,
      id_drug_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG%TYPE DEFAULT NULL,
      med_id_in IN PAT_MEDICATION_HIST_LIST.MED_ID%TYPE DEFAULT NULL,
      dosage_in IN PAT_MEDICATION_HIST_LIST.DOSAGE%TYPE DEFAULT NULL,
      flg_no_med_in IN PAT_MEDICATION_HIST_LIST.FLG_NO_MED%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_MEDICATION_HIST_LIST.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_med_destination_in IN PAT_MEDICATION_HIST_LIST.NOTES_MED_DESTINATION%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_MEDICATION_HIST_LIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_in IN PAT_MEDICATION_HIST_LIST.CANCEL_REASON%TYPE DEFAULT NULL,
      create_user_in IN PAT_MEDICATION_HIST_LIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_MEDICATION_HIST_LIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_MEDICATION_HIST_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_MEDICATION_HIST_LIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_MEDICATION_HIST_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_MEDICATION_HIST_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_take_type_in IN PAT_MEDICATION_HIST_LIST.FLG_TAKE_TYPE%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_pat_medication_hist_list_in => id_pat_medication_hist_list_in
      ,
      id_pat_medication_list_in => id_pat_medication_list_in,
      id_episode_in => id_episode_in,
      id_patient_in => id_patient_in,
      id_institution_in => id_institution_in,
      id_software_in => id_software_in,
      year_begin_in => year_begin_in,
      month_begin_in => month_begin_in,
      day_begin_in => day_begin_in,
      qty_in => qty_in,
      frequency_in => frequency_in,
      flg_status_in => flg_status_in,
      id_professional_in => id_professional_in,
      notes_in => notes_in,
      flg_presc_in => flg_presc_in,
      id_prescription_pharm_in => id_prescription_pharm_in,
      dt_pat_medication_list_tstz_in => dt_pat_medication_list_tstz_in,
      id_unit_measure_qty_in => id_unit_measure_qty_in,
      id_unit_measure_freq_in => id_unit_measure_freq_in,
      freq_in => freq_in,
      duration_in => duration_in,
      id_unit_measure_dur_in => id_unit_measure_dur_in,
      dt_start_pat_med_tstz_in => dt_start_pat_med_tstz_in,
      dt_end_pat_med_tstz_in => dt_end_pat_med_tstz_in,
      emb_id_in => emb_id_in,
      id_prod_med_in => id_prod_med_in,
      prod_med_decr_in => prod_med_decr_in,
      id_drug_req_det_in => id_drug_req_det_in,
      id_drug_presc_det_in => id_drug_presc_det_in,
      quantity_in => quantity_in,
      id_epis_documentation_in => id_epis_documentation_in,
      med_id_type_in => med_id_type_in,
      continue_in => continue_in,
      vers_in => vers_in,
      id_drug_in => id_drug_in,
      med_id_in => med_id_in,
      dosage_in => dosage_in,
      flg_no_med_in => flg_no_med_in,
      notes_advers_react_in => notes_advers_react_in,
      notes_med_destination_in => notes_med_destination_in,
      id_cancel_reason_in => id_cancel_reason_in,
      cancel_reason_in => cancel_reason_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      flg_take_type_in => flg_take_type_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN PAT_MEDICATION_HIST_LIST%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec PAT_MEDICATION_HIST_LIST%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_PAT_MEDICATION_HIST_LIST := next_key (sequence_in);
      END IF;
      ins (
         id_pat_medication_hist_list_in => l_rec.ID_PAT_MEDICATION_HIST_LIST
         ,
         id_pat_medication_list_in => l_rec.ID_PAT_MEDICATION_LIST,
         id_episode_in => l_rec.ID_EPISODE,
         id_patient_in => l_rec.ID_PATIENT,
         id_institution_in => l_rec.ID_INSTITUTION,
         id_software_in => l_rec.ID_SOFTWARE,
         year_begin_in => l_rec.YEAR_BEGIN,
         month_begin_in => l_rec.MONTH_BEGIN,
         day_begin_in => l_rec.DAY_BEGIN,
         qty_in => l_rec.QTY,
         frequency_in => l_rec.FREQUENCY,
         flg_status_in => l_rec.FLG_STATUS,
         id_professional_in => l_rec.ID_PROFESSIONAL,
         notes_in => l_rec.NOTES,
         flg_presc_in => l_rec.FLG_PRESC,
         id_prescription_pharm_in => l_rec.ID_PRESCRIPTION_PHARM,
         dt_pat_medication_list_tstz_in => l_rec.DT_PAT_MEDICATION_LIST_TSTZ,
         id_unit_measure_qty_in => l_rec.ID_UNIT_MEASURE_QTY,
         id_unit_measure_freq_in => l_rec.ID_UNIT_MEASURE_FREQ,
         freq_in => l_rec.FREQ,
         duration_in => l_rec.DURATION,
         id_unit_measure_dur_in => l_rec.ID_UNIT_MEASURE_DUR,
         dt_start_pat_med_tstz_in => l_rec.DT_START_PAT_MED_TSTZ,
         dt_end_pat_med_tstz_in => l_rec.DT_END_PAT_MED_TSTZ,
         emb_id_in => l_rec.EMB_ID,
         id_prod_med_in => l_rec.ID_PROD_MED,
         prod_med_decr_in => l_rec.PROD_MED_DECR,
         id_drug_req_det_in => l_rec.ID_DRUG_REQ_DET,
         id_drug_presc_det_in => l_rec.ID_DRUG_PRESC_DET,
         quantity_in => l_rec.QUANTITY,
         id_epis_documentation_in => l_rec.ID_EPIS_DOCUMENTATION,
         med_id_type_in => l_rec.MED_ID_TYPE,
         continue_in => l_rec.CONTINUE,
         vers_in => l_rec.VERS,
         id_drug_in => l_rec.ID_DRUG,
         med_id_in => l_rec.MED_ID,
         dosage_in => l_rec.DOSAGE,
         flg_no_med_in => l_rec.FLG_NO_MED,
         notes_advers_react_in => l_rec.NOTES_ADVERS_REACT,
         notes_med_destination_in => l_rec.NOTES_MED_DESTINATION,
         id_cancel_reason_in => l_rec.ID_CANCEL_REASON,
         cancel_reason_in => l_rec.CANCEL_REASON,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION,
         flg_take_type_in => l_rec.FLG_TAKE_TYPE
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN PAT_MEDICATION_HIST_LIST%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE

   IS
     retval PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_PAT_MEDICATION_HIST_LIST.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        PK_ALERT_EXCEPTIONS.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_PAT_MEDICATION_HIST_LIST')
           );
   END next_key;

   PROCEDURE ins (
      id_pat_medication_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      id_episode_in IN PAT_MEDICATION_HIST_LIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_patient_in IN PAT_MEDICATION_HIST_LIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_institution_in IN PAT_MEDICATION_HIST_LIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN PAT_MEDICATION_HIST_LIST.ID_SOFTWARE%TYPE DEFAULT NULL,
      year_begin_in IN PAT_MEDICATION_HIST_LIST.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_MEDICATION_HIST_LIST.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_MEDICATION_HIST_LIST.DAY_BEGIN%TYPE DEFAULT NULL,
      qty_in IN PAT_MEDICATION_HIST_LIST.QTY%TYPE DEFAULT NULL,
      frequency_in IN PAT_MEDICATION_HIST_LIST.FREQUENCY%TYPE DEFAULT NULL,
      flg_status_in IN PAT_MEDICATION_HIST_LIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_professional_in IN PAT_MEDICATION_HIST_LIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN PAT_MEDICATION_HIST_LIST.NOTES%TYPE DEFAULT NULL,
      flg_presc_in IN PAT_MEDICATION_HIST_LIST.FLG_PRESC%TYPE DEFAULT NULL,
      id_prescription_pharm_in IN PAT_MEDICATION_HIST_LIST.ID_PRESCRIPTION_PHARM%TYPE DEFAULT NULL,
      dt_pat_medication_list_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_PAT_MEDICATION_LIST_TSTZ%TYPE DEFAULT NULL,
      id_unit_measure_qty_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_QTY%TYPE DEFAULT NULL,
      id_unit_measure_freq_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_FREQ%TYPE DEFAULT NULL,
      freq_in IN PAT_MEDICATION_HIST_LIST.FREQ%TYPE DEFAULT NULL,
      duration_in IN PAT_MEDICATION_HIST_LIST.DURATION%TYPE DEFAULT NULL,
      id_unit_measure_dur_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_DUR%TYPE DEFAULT NULL,
      dt_start_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_START_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      dt_end_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_END_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      emb_id_in IN PAT_MEDICATION_HIST_LIST.EMB_ID%TYPE DEFAULT NULL,
      id_prod_med_in IN PAT_MEDICATION_HIST_LIST.ID_PROD_MED%TYPE DEFAULT NULL,
      prod_med_decr_in IN PAT_MEDICATION_HIST_LIST.PROD_MED_DECR%TYPE DEFAULT NULL,
      id_drug_req_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_REQ_DET%TYPE DEFAULT NULL,
      id_drug_presc_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      quantity_in IN PAT_MEDICATION_HIST_LIST.QUANTITY%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_MEDICATION_HIST_LIST.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      med_id_type_in IN PAT_MEDICATION_HIST_LIST.MED_ID_TYPE%TYPE DEFAULT NULL,
      continue_in IN PAT_MEDICATION_HIST_LIST.CONTINUE%TYPE DEFAULT NULL,
      vers_in IN PAT_MEDICATION_HIST_LIST.VERS%TYPE DEFAULT NULL,
      id_drug_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG%TYPE DEFAULT NULL,
      med_id_in IN PAT_MEDICATION_HIST_LIST.MED_ID%TYPE DEFAULT NULL,
      dosage_in IN PAT_MEDICATION_HIST_LIST.DOSAGE%TYPE DEFAULT NULL,
      flg_no_med_in IN PAT_MEDICATION_HIST_LIST.FLG_NO_MED%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_MEDICATION_HIST_LIST.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_med_destination_in IN PAT_MEDICATION_HIST_LIST.NOTES_MED_DESTINATION%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_MEDICATION_HIST_LIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_in IN PAT_MEDICATION_HIST_LIST.CANCEL_REASON%TYPE DEFAULT NULL,
      create_user_in IN PAT_MEDICATION_HIST_LIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_MEDICATION_HIST_LIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_MEDICATION_HIST_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_MEDICATION_HIST_LIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_MEDICATION_HIST_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_MEDICATION_HIST_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_take_type_in IN PAT_MEDICATION_HIST_LIST.FLG_TAKE_TYPE%TYPE DEFAULT NULL,
      id_pat_med_hist_list_out IN OUT PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE := next_key;
   BEGIN
      ins (
         id_pat_medication_hist_list_in => l_pky,
         id_pat_medication_list_in => id_pat_medication_list_in,
         id_episode_in => id_episode_in,
         id_patient_in => id_patient_in,
         id_institution_in => id_institution_in,
         id_software_in => id_software_in,
         year_begin_in => year_begin_in,
         month_begin_in => month_begin_in,
         day_begin_in => day_begin_in,
         qty_in => qty_in,
         frequency_in => frequency_in,
         flg_status_in => flg_status_in,
         id_professional_in => id_professional_in,
         notes_in => notes_in,
         flg_presc_in => flg_presc_in,
         id_prescription_pharm_in => id_prescription_pharm_in,
         dt_pat_medication_list_tstz_in => dt_pat_medication_list_tstz_in,
         id_unit_measure_qty_in => id_unit_measure_qty_in,
         id_unit_measure_freq_in => id_unit_measure_freq_in,
         freq_in => freq_in,
         duration_in => duration_in,
         id_unit_measure_dur_in => id_unit_measure_dur_in,
         dt_start_pat_med_tstz_in => dt_start_pat_med_tstz_in,
         dt_end_pat_med_tstz_in => dt_end_pat_med_tstz_in,
         emb_id_in => emb_id_in,
         id_prod_med_in => id_prod_med_in,
         prod_med_decr_in => prod_med_decr_in,
         id_drug_req_det_in => id_drug_req_det_in,
         id_drug_presc_det_in => id_drug_presc_det_in,
         quantity_in => quantity_in,
         id_epis_documentation_in => id_epis_documentation_in,
         med_id_type_in => med_id_type_in,
         continue_in => continue_in,
         vers_in => vers_in,
         id_drug_in => id_drug_in,
         med_id_in => med_id_in,
         dosage_in => dosage_in,
         flg_no_med_in => flg_no_med_in,
         notes_advers_react_in => notes_advers_react_in,
         notes_med_destination_in => notes_med_destination_in,
         id_cancel_reason_in => id_cancel_reason_in,
         cancel_reason_in => cancel_reason_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_take_type_in => flg_take_type_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_pat_med_hist_list_out := l_pky;
   END ins;

   PROCEDURE ins (
      id_pat_medication_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      id_episode_in IN PAT_MEDICATION_HIST_LIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_patient_in IN PAT_MEDICATION_HIST_LIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_institution_in IN PAT_MEDICATION_HIST_LIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN PAT_MEDICATION_HIST_LIST.ID_SOFTWARE%TYPE DEFAULT NULL,
      year_begin_in IN PAT_MEDICATION_HIST_LIST.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_MEDICATION_HIST_LIST.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_MEDICATION_HIST_LIST.DAY_BEGIN%TYPE DEFAULT NULL,
      qty_in IN PAT_MEDICATION_HIST_LIST.QTY%TYPE DEFAULT NULL,
      frequency_in IN PAT_MEDICATION_HIST_LIST.FREQUENCY%TYPE DEFAULT NULL,
      flg_status_in IN PAT_MEDICATION_HIST_LIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_professional_in IN PAT_MEDICATION_HIST_LIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN PAT_MEDICATION_HIST_LIST.NOTES%TYPE DEFAULT NULL,
      flg_presc_in IN PAT_MEDICATION_HIST_LIST.FLG_PRESC%TYPE DEFAULT NULL,
      id_prescription_pharm_in IN PAT_MEDICATION_HIST_LIST.ID_PRESCRIPTION_PHARM%TYPE DEFAULT NULL,
      dt_pat_medication_list_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_PAT_MEDICATION_LIST_TSTZ%TYPE DEFAULT NULL,
      id_unit_measure_qty_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_QTY%TYPE DEFAULT NULL,
      id_unit_measure_freq_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_FREQ%TYPE DEFAULT NULL,
      freq_in IN PAT_MEDICATION_HIST_LIST.FREQ%TYPE DEFAULT NULL,
      duration_in IN PAT_MEDICATION_HIST_LIST.DURATION%TYPE DEFAULT NULL,
      id_unit_measure_dur_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_DUR%TYPE DEFAULT NULL,
      dt_start_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_START_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      dt_end_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_END_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      emb_id_in IN PAT_MEDICATION_HIST_LIST.EMB_ID%TYPE DEFAULT NULL,
      id_prod_med_in IN PAT_MEDICATION_HIST_LIST.ID_PROD_MED%TYPE DEFAULT NULL,
      prod_med_decr_in IN PAT_MEDICATION_HIST_LIST.PROD_MED_DECR%TYPE DEFAULT NULL,
      id_drug_req_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_REQ_DET%TYPE DEFAULT NULL,
      id_drug_presc_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      quantity_in IN PAT_MEDICATION_HIST_LIST.QUANTITY%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_MEDICATION_HIST_LIST.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      med_id_type_in IN PAT_MEDICATION_HIST_LIST.MED_ID_TYPE%TYPE DEFAULT NULL,
      continue_in IN PAT_MEDICATION_HIST_LIST.CONTINUE%TYPE DEFAULT NULL,
      vers_in IN PAT_MEDICATION_HIST_LIST.VERS%TYPE DEFAULT NULL,
      id_drug_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG%TYPE DEFAULT NULL,
      med_id_in IN PAT_MEDICATION_HIST_LIST.MED_ID%TYPE DEFAULT NULL,
      dosage_in IN PAT_MEDICATION_HIST_LIST.DOSAGE%TYPE DEFAULT NULL,
      flg_no_med_in IN PAT_MEDICATION_HIST_LIST.FLG_NO_MED%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_MEDICATION_HIST_LIST.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_med_destination_in IN PAT_MEDICATION_HIST_LIST.NOTES_MED_DESTINATION%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_MEDICATION_HIST_LIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_in IN PAT_MEDICATION_HIST_LIST.CANCEL_REASON%TYPE DEFAULT NULL,
      create_user_in IN PAT_MEDICATION_HIST_LIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_MEDICATION_HIST_LIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_MEDICATION_HIST_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_MEDICATION_HIST_LIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_MEDICATION_HIST_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_MEDICATION_HIST_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_take_type_in IN PAT_MEDICATION_HIST_LIST.FLG_TAKE_TYPE%TYPE DEFAULT NULL,
      id_pat_med_hist_list_out IN OUT PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      id_pat_medication_list_in => id_pat_medication_list_in,
      id_episode_in => id_episode_in,
      id_patient_in => id_patient_in,
      id_institution_in => id_institution_in,
      id_software_in => id_software_in,
      year_begin_in => year_begin_in,
      month_begin_in => month_begin_in,
      day_begin_in => day_begin_in,
      qty_in => qty_in,
      frequency_in => frequency_in,
      flg_status_in => flg_status_in,
      id_professional_in => id_professional_in,
      notes_in => notes_in,
      flg_presc_in => flg_presc_in,
      id_prescription_pharm_in => id_prescription_pharm_in,
      dt_pat_medication_list_tstz_in => dt_pat_medication_list_tstz_in,
      id_unit_measure_qty_in => id_unit_measure_qty_in,
      id_unit_measure_freq_in => id_unit_measure_freq_in,
      freq_in => freq_in,
      duration_in => duration_in,
      id_unit_measure_dur_in => id_unit_measure_dur_in,
      dt_start_pat_med_tstz_in => dt_start_pat_med_tstz_in,
      dt_end_pat_med_tstz_in => dt_end_pat_med_tstz_in,
      emb_id_in => emb_id_in,
      id_prod_med_in => id_prod_med_in,
      prod_med_decr_in => prod_med_decr_in,
      id_drug_req_det_in => id_drug_req_det_in,
      id_drug_presc_det_in => id_drug_presc_det_in,
      quantity_in => quantity_in,
      id_epis_documentation_in => id_epis_documentation_in,
      med_id_type_in => med_id_type_in,
      continue_in => continue_in,
      vers_in => vers_in,
      id_drug_in => id_drug_in,
      med_id_in => med_id_in,
      dosage_in => dosage_in,
      flg_no_med_in => flg_no_med_in,
      notes_advers_react_in => notes_advers_react_in,
      notes_med_destination_in => notes_med_destination_in,
      id_cancel_reason_in => id_cancel_reason_in,
      cancel_reason_in => cancel_reason_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      flg_take_type_in => flg_take_type_in,
      id_pat_med_hist_list_out => id_pat_med_hist_list_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      id_pat_medication_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      id_episode_in IN PAT_MEDICATION_HIST_LIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_patient_in IN PAT_MEDICATION_HIST_LIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_institution_in IN PAT_MEDICATION_HIST_LIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN PAT_MEDICATION_HIST_LIST.ID_SOFTWARE%TYPE DEFAULT NULL,
      year_begin_in IN PAT_MEDICATION_HIST_LIST.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_MEDICATION_HIST_LIST.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_MEDICATION_HIST_LIST.DAY_BEGIN%TYPE DEFAULT NULL,
      qty_in IN PAT_MEDICATION_HIST_LIST.QTY%TYPE DEFAULT NULL,
      frequency_in IN PAT_MEDICATION_HIST_LIST.FREQUENCY%TYPE DEFAULT NULL,
      flg_status_in IN PAT_MEDICATION_HIST_LIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_professional_in IN PAT_MEDICATION_HIST_LIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN PAT_MEDICATION_HIST_LIST.NOTES%TYPE DEFAULT NULL,
      flg_presc_in IN PAT_MEDICATION_HIST_LIST.FLG_PRESC%TYPE DEFAULT NULL,
      id_prescription_pharm_in IN PAT_MEDICATION_HIST_LIST.ID_PRESCRIPTION_PHARM%TYPE DEFAULT NULL,
      dt_pat_medication_list_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_PAT_MEDICATION_LIST_TSTZ%TYPE DEFAULT NULL,
      id_unit_measure_qty_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_QTY%TYPE DEFAULT NULL,
      id_unit_measure_freq_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_FREQ%TYPE DEFAULT NULL,
      freq_in IN PAT_MEDICATION_HIST_LIST.FREQ%TYPE DEFAULT NULL,
      duration_in IN PAT_MEDICATION_HIST_LIST.DURATION%TYPE DEFAULT NULL,
      id_unit_measure_dur_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_DUR%TYPE DEFAULT NULL,
      dt_start_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_START_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      dt_end_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_END_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      emb_id_in IN PAT_MEDICATION_HIST_LIST.EMB_ID%TYPE DEFAULT NULL,
      id_prod_med_in IN PAT_MEDICATION_HIST_LIST.ID_PROD_MED%TYPE DEFAULT NULL,
      prod_med_decr_in IN PAT_MEDICATION_HIST_LIST.PROD_MED_DECR%TYPE DEFAULT NULL,
      id_drug_req_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_REQ_DET%TYPE DEFAULT NULL,
      id_drug_presc_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      quantity_in IN PAT_MEDICATION_HIST_LIST.QUANTITY%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_MEDICATION_HIST_LIST.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      med_id_type_in IN PAT_MEDICATION_HIST_LIST.MED_ID_TYPE%TYPE DEFAULT NULL,
      continue_in IN PAT_MEDICATION_HIST_LIST.CONTINUE%TYPE DEFAULT NULL,
      vers_in IN PAT_MEDICATION_HIST_LIST.VERS%TYPE DEFAULT NULL,
      id_drug_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG%TYPE DEFAULT NULL,
      med_id_in IN PAT_MEDICATION_HIST_LIST.MED_ID%TYPE DEFAULT NULL,
      dosage_in IN PAT_MEDICATION_HIST_LIST.DOSAGE%TYPE DEFAULT NULL,
      flg_no_med_in IN PAT_MEDICATION_HIST_LIST.FLG_NO_MED%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_MEDICATION_HIST_LIST.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_med_destination_in IN PAT_MEDICATION_HIST_LIST.NOTES_MED_DESTINATION%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_MEDICATION_HIST_LIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_in IN PAT_MEDICATION_HIST_LIST.CANCEL_REASON%TYPE DEFAULT NULL,
      create_user_in IN PAT_MEDICATION_HIST_LIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_MEDICATION_HIST_LIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_MEDICATION_HIST_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_MEDICATION_HIST_LIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_MEDICATION_HIST_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_MEDICATION_HIST_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_take_type_in IN PAT_MEDICATION_HIST_LIST.FLG_TAKE_TYPE%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE
   IS
        l_pky PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE := next_key;
   BEGIN
      ins (
         id_pat_medication_hist_list_in => l_pky,
         id_pat_medication_list_in => id_pat_medication_list_in,
         id_episode_in => id_episode_in,
         id_patient_in => id_patient_in,
         id_institution_in => id_institution_in,
         id_software_in => id_software_in,
         year_begin_in => year_begin_in,
         month_begin_in => month_begin_in,
         day_begin_in => day_begin_in,
         qty_in => qty_in,
         frequency_in => frequency_in,
         flg_status_in => flg_status_in,
         id_professional_in => id_professional_in,
         notes_in => notes_in,
         flg_presc_in => flg_presc_in,
         id_prescription_pharm_in => id_prescription_pharm_in,
         dt_pat_medication_list_tstz_in => dt_pat_medication_list_tstz_in,
         id_unit_measure_qty_in => id_unit_measure_qty_in,
         id_unit_measure_freq_in => id_unit_measure_freq_in,
         freq_in => freq_in,
         duration_in => duration_in,
         id_unit_measure_dur_in => id_unit_measure_dur_in,
         dt_start_pat_med_tstz_in => dt_start_pat_med_tstz_in,
         dt_end_pat_med_tstz_in => dt_end_pat_med_tstz_in,
         emb_id_in => emb_id_in,
         id_prod_med_in => id_prod_med_in,
         prod_med_decr_in => prod_med_decr_in,
         id_drug_req_det_in => id_drug_req_det_in,
         id_drug_presc_det_in => id_drug_presc_det_in,
         quantity_in => quantity_in,
         id_epis_documentation_in => id_epis_documentation_in,
         med_id_type_in => med_id_type_in,
         continue_in => continue_in,
         vers_in => vers_in,
         id_drug_in => id_drug_in,
         med_id_in => med_id_in,
         dosage_in => dosage_in,
         flg_no_med_in => flg_no_med_in,
         notes_advers_react_in => notes_advers_react_in,
         notes_med_destination_in => notes_med_destination_in,
         id_cancel_reason_in => id_cancel_reason_in,
         cancel_reason_in => cancel_reason_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_take_type_in => flg_take_type_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      id_pat_medication_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      id_episode_in IN PAT_MEDICATION_HIST_LIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_patient_in IN PAT_MEDICATION_HIST_LIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_institution_in IN PAT_MEDICATION_HIST_LIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN PAT_MEDICATION_HIST_LIST.ID_SOFTWARE%TYPE DEFAULT NULL,
      year_begin_in IN PAT_MEDICATION_HIST_LIST.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_MEDICATION_HIST_LIST.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_MEDICATION_HIST_LIST.DAY_BEGIN%TYPE DEFAULT NULL,
      qty_in IN PAT_MEDICATION_HIST_LIST.QTY%TYPE DEFAULT NULL,
      frequency_in IN PAT_MEDICATION_HIST_LIST.FREQUENCY%TYPE DEFAULT NULL,
      flg_status_in IN PAT_MEDICATION_HIST_LIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_professional_in IN PAT_MEDICATION_HIST_LIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN PAT_MEDICATION_HIST_LIST.NOTES%TYPE DEFAULT NULL,
      flg_presc_in IN PAT_MEDICATION_HIST_LIST.FLG_PRESC%TYPE DEFAULT NULL,
      id_prescription_pharm_in IN PAT_MEDICATION_HIST_LIST.ID_PRESCRIPTION_PHARM%TYPE DEFAULT NULL,
      dt_pat_medication_list_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_PAT_MEDICATION_LIST_TSTZ%TYPE DEFAULT NULL,
      id_unit_measure_qty_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_QTY%TYPE DEFAULT NULL,
      id_unit_measure_freq_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_FREQ%TYPE DEFAULT NULL,
      freq_in IN PAT_MEDICATION_HIST_LIST.FREQ%TYPE DEFAULT NULL,
      duration_in IN PAT_MEDICATION_HIST_LIST.DURATION%TYPE DEFAULT NULL,
      id_unit_measure_dur_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_DUR%TYPE DEFAULT NULL,
      dt_start_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_START_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      dt_end_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_END_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      emb_id_in IN PAT_MEDICATION_HIST_LIST.EMB_ID%TYPE DEFAULT NULL,
      id_prod_med_in IN PAT_MEDICATION_HIST_LIST.ID_PROD_MED%TYPE DEFAULT NULL,
      prod_med_decr_in IN PAT_MEDICATION_HIST_LIST.PROD_MED_DECR%TYPE DEFAULT NULL,
      id_drug_req_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_REQ_DET%TYPE DEFAULT NULL,
      id_drug_presc_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      quantity_in IN PAT_MEDICATION_HIST_LIST.QUANTITY%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_MEDICATION_HIST_LIST.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      med_id_type_in IN PAT_MEDICATION_HIST_LIST.MED_ID_TYPE%TYPE DEFAULT NULL,
      continue_in IN PAT_MEDICATION_HIST_LIST.CONTINUE%TYPE DEFAULT NULL,
      vers_in IN PAT_MEDICATION_HIST_LIST.VERS%TYPE DEFAULT NULL,
      id_drug_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG%TYPE DEFAULT NULL,
      med_id_in IN PAT_MEDICATION_HIST_LIST.MED_ID%TYPE DEFAULT NULL,
      dosage_in IN PAT_MEDICATION_HIST_LIST.DOSAGE%TYPE DEFAULT NULL,
      flg_no_med_in IN PAT_MEDICATION_HIST_LIST.FLG_NO_MED%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_MEDICATION_HIST_LIST.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_med_destination_in IN PAT_MEDICATION_HIST_LIST.NOTES_MED_DESTINATION%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_MEDICATION_HIST_LIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_in IN PAT_MEDICATION_HIST_LIST.CANCEL_REASON%TYPE DEFAULT NULL,
      create_user_in IN PAT_MEDICATION_HIST_LIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_MEDICATION_HIST_LIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_MEDICATION_HIST_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_MEDICATION_HIST_LIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_MEDICATION_HIST_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_MEDICATION_HIST_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_take_type_in IN PAT_MEDICATION_HIST_LIST.FLG_TAKE_TYPE%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE
   IS
        l_pky PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_pat_medication_hist_list_in => l_pky,
         id_pat_medication_list_in => id_pat_medication_list_in,
         id_episode_in => id_episode_in,
         id_patient_in => id_patient_in,
         id_institution_in => id_institution_in,
         id_software_in => id_software_in,
         year_begin_in => year_begin_in,
         month_begin_in => month_begin_in,
         day_begin_in => day_begin_in,
         qty_in => qty_in,
         frequency_in => frequency_in,
         flg_status_in => flg_status_in,
         id_professional_in => id_professional_in,
         notes_in => notes_in,
         flg_presc_in => flg_presc_in,
         id_prescription_pharm_in => id_prescription_pharm_in,
         dt_pat_medication_list_tstz_in => dt_pat_medication_list_tstz_in,
         id_unit_measure_qty_in => id_unit_measure_qty_in,
         id_unit_measure_freq_in => id_unit_measure_freq_in,
         freq_in => freq_in,
         duration_in => duration_in,
         id_unit_measure_dur_in => id_unit_measure_dur_in,
         dt_start_pat_med_tstz_in => dt_start_pat_med_tstz_in,
         dt_end_pat_med_tstz_in => dt_end_pat_med_tstz_in,
         emb_id_in => emb_id_in,
         id_prod_med_in => id_prod_med_in,
         prod_med_decr_in => prod_med_decr_in,
         id_drug_req_det_in => id_drug_req_det_in,
         id_drug_presc_det_in => id_drug_presc_det_in,
         quantity_in => quantity_in,
         id_epis_documentation_in => id_epis_documentation_in,
         med_id_type_in => med_id_type_in,
         continue_in => continue_in,
         vers_in => vers_in,
         id_drug_in => id_drug_in,
         med_id_in => med_id_in,
         dosage_in => dosage_in,
         flg_no_med_in => flg_no_med_in,
         notes_advers_react_in => notes_advers_react_in,
         notes_med_destination_in => notes_med_destination_in,
         id_cancel_reason_in => id_cancel_reason_in,
         cancel_reason_in => cancel_reason_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_take_type_in => flg_take_type_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      id_pat_medication_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      id_episode_in IN PAT_MEDICATION_HIST_LIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_patient_in IN PAT_MEDICATION_HIST_LIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_institution_in IN PAT_MEDICATION_HIST_LIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN PAT_MEDICATION_HIST_LIST.ID_SOFTWARE%TYPE DEFAULT NULL,
      year_begin_in IN PAT_MEDICATION_HIST_LIST.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_MEDICATION_HIST_LIST.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_MEDICATION_HIST_LIST.DAY_BEGIN%TYPE DEFAULT NULL,
      qty_in IN PAT_MEDICATION_HIST_LIST.QTY%TYPE DEFAULT NULL,
      frequency_in IN PAT_MEDICATION_HIST_LIST.FREQUENCY%TYPE DEFAULT NULL,
      flg_status_in IN PAT_MEDICATION_HIST_LIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_professional_in IN PAT_MEDICATION_HIST_LIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN PAT_MEDICATION_HIST_LIST.NOTES%TYPE DEFAULT NULL,
      flg_presc_in IN PAT_MEDICATION_HIST_LIST.FLG_PRESC%TYPE DEFAULT NULL,
      id_prescription_pharm_in IN PAT_MEDICATION_HIST_LIST.ID_PRESCRIPTION_PHARM%TYPE DEFAULT NULL,
      dt_pat_medication_list_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_PAT_MEDICATION_LIST_TSTZ%TYPE DEFAULT NULL,
      id_unit_measure_qty_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_QTY%TYPE DEFAULT NULL,
      id_unit_measure_freq_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_FREQ%TYPE DEFAULT NULL,
      freq_in IN PAT_MEDICATION_HIST_LIST.FREQ%TYPE DEFAULT NULL,
      duration_in IN PAT_MEDICATION_HIST_LIST.DURATION%TYPE DEFAULT NULL,
      id_unit_measure_dur_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_DUR%TYPE DEFAULT NULL,
      dt_start_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_START_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      dt_end_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_END_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      emb_id_in IN PAT_MEDICATION_HIST_LIST.EMB_ID%TYPE DEFAULT NULL,
      id_prod_med_in IN PAT_MEDICATION_HIST_LIST.ID_PROD_MED%TYPE DEFAULT NULL,
      prod_med_decr_in IN PAT_MEDICATION_HIST_LIST.PROD_MED_DECR%TYPE DEFAULT NULL,
      id_drug_req_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_REQ_DET%TYPE DEFAULT NULL,
      id_drug_presc_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      quantity_in IN PAT_MEDICATION_HIST_LIST.QUANTITY%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_MEDICATION_HIST_LIST.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      med_id_type_in IN PAT_MEDICATION_HIST_LIST.MED_ID_TYPE%TYPE DEFAULT NULL,
      continue_in IN PAT_MEDICATION_HIST_LIST.CONTINUE%TYPE DEFAULT NULL,
      vers_in IN PAT_MEDICATION_HIST_LIST.VERS%TYPE DEFAULT NULL,
      id_drug_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG%TYPE DEFAULT NULL,
      med_id_in IN PAT_MEDICATION_HIST_LIST.MED_ID%TYPE DEFAULT NULL,
      dosage_in IN PAT_MEDICATION_HIST_LIST.DOSAGE%TYPE DEFAULT NULL,
      flg_no_med_in IN PAT_MEDICATION_HIST_LIST.FLG_NO_MED%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_MEDICATION_HIST_LIST.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_med_destination_in IN PAT_MEDICATION_HIST_LIST.NOTES_MED_DESTINATION%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_MEDICATION_HIST_LIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_in IN PAT_MEDICATION_HIST_LIST.CANCEL_REASON%TYPE DEFAULT NULL,
      create_user_in IN PAT_MEDICATION_HIST_LIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_MEDICATION_HIST_LIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_MEDICATION_HIST_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_MEDICATION_HIST_LIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_MEDICATION_HIST_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_MEDICATION_HIST_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_take_type_in IN PAT_MEDICATION_HIST_LIST.FLG_TAKE_TYPE%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE := next_key;
   BEGIN
      ins (
         id_pat_medication_hist_list_in => l_pky,
         id_pat_medication_list_in => id_pat_medication_list_in,
         id_episode_in => id_episode_in,
         id_patient_in => id_patient_in,
         id_institution_in => id_institution_in,
         id_software_in => id_software_in,
         year_begin_in => year_begin_in,
         month_begin_in => month_begin_in,
         day_begin_in => day_begin_in,
         qty_in => qty_in,
         frequency_in => frequency_in,
         flg_status_in => flg_status_in,
         id_professional_in => id_professional_in,
         notes_in => notes_in,
         flg_presc_in => flg_presc_in,
         id_prescription_pharm_in => id_prescription_pharm_in,
         dt_pat_medication_list_tstz_in => dt_pat_medication_list_tstz_in,
         id_unit_measure_qty_in => id_unit_measure_qty_in,
         id_unit_measure_freq_in => id_unit_measure_freq_in,
         freq_in => freq_in,
         duration_in => duration_in,
         id_unit_measure_dur_in => id_unit_measure_dur_in,
         dt_start_pat_med_tstz_in => dt_start_pat_med_tstz_in,
         dt_end_pat_med_tstz_in => dt_end_pat_med_tstz_in,
         emb_id_in => emb_id_in,
         id_prod_med_in => id_prod_med_in,
         prod_med_decr_in => prod_med_decr_in,
         id_drug_req_det_in => id_drug_req_det_in,
         id_drug_presc_det_in => id_drug_presc_det_in,
         quantity_in => quantity_in,
         id_epis_documentation_in => id_epis_documentation_in,
         med_id_type_in => med_id_type_in,
         continue_in => continue_in,
         vers_in => vers_in,
         id_drug_in => id_drug_in,
         med_id_in => med_id_in,
         dosage_in => dosage_in,
         flg_no_med_in => flg_no_med_in,
         notes_advers_react_in => notes_advers_react_in,
         notes_med_destination_in => notes_med_destination_in,
         id_cancel_reason_in => id_cancel_reason_in,
         cancel_reason_in => cancel_reason_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_take_type_in => flg_take_type_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      id_pat_medication_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      id_episode_in IN PAT_MEDICATION_HIST_LIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_patient_in IN PAT_MEDICATION_HIST_LIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_institution_in IN PAT_MEDICATION_HIST_LIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN PAT_MEDICATION_HIST_LIST.ID_SOFTWARE%TYPE DEFAULT NULL,
      year_begin_in IN PAT_MEDICATION_HIST_LIST.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_MEDICATION_HIST_LIST.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_MEDICATION_HIST_LIST.DAY_BEGIN%TYPE DEFAULT NULL,
      qty_in IN PAT_MEDICATION_HIST_LIST.QTY%TYPE DEFAULT NULL,
      frequency_in IN PAT_MEDICATION_HIST_LIST.FREQUENCY%TYPE DEFAULT NULL,
      flg_status_in IN PAT_MEDICATION_HIST_LIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_professional_in IN PAT_MEDICATION_HIST_LIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN PAT_MEDICATION_HIST_LIST.NOTES%TYPE DEFAULT NULL,
      flg_presc_in IN PAT_MEDICATION_HIST_LIST.FLG_PRESC%TYPE DEFAULT NULL,
      id_prescription_pharm_in IN PAT_MEDICATION_HIST_LIST.ID_PRESCRIPTION_PHARM%TYPE DEFAULT NULL,
      dt_pat_medication_list_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_PAT_MEDICATION_LIST_TSTZ%TYPE DEFAULT NULL,
      id_unit_measure_qty_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_QTY%TYPE DEFAULT NULL,
      id_unit_measure_freq_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_FREQ%TYPE DEFAULT NULL,
      freq_in IN PAT_MEDICATION_HIST_LIST.FREQ%TYPE DEFAULT NULL,
      duration_in IN PAT_MEDICATION_HIST_LIST.DURATION%TYPE DEFAULT NULL,
      id_unit_measure_dur_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_DUR%TYPE DEFAULT NULL,
      dt_start_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_START_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      dt_end_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_END_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      emb_id_in IN PAT_MEDICATION_HIST_LIST.EMB_ID%TYPE DEFAULT NULL,
      id_prod_med_in IN PAT_MEDICATION_HIST_LIST.ID_PROD_MED%TYPE DEFAULT NULL,
      prod_med_decr_in IN PAT_MEDICATION_HIST_LIST.PROD_MED_DECR%TYPE DEFAULT NULL,
      id_drug_req_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_REQ_DET%TYPE DEFAULT NULL,
      id_drug_presc_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      quantity_in IN PAT_MEDICATION_HIST_LIST.QUANTITY%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_MEDICATION_HIST_LIST.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      med_id_type_in IN PAT_MEDICATION_HIST_LIST.MED_ID_TYPE%TYPE DEFAULT NULL,
      continue_in IN PAT_MEDICATION_HIST_LIST.CONTINUE%TYPE DEFAULT NULL,
      vers_in IN PAT_MEDICATION_HIST_LIST.VERS%TYPE DEFAULT NULL,
      id_drug_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG%TYPE DEFAULT NULL,
      med_id_in IN PAT_MEDICATION_HIST_LIST.MED_ID%TYPE DEFAULT NULL,
      dosage_in IN PAT_MEDICATION_HIST_LIST.DOSAGE%TYPE DEFAULT NULL,
      flg_no_med_in IN PAT_MEDICATION_HIST_LIST.FLG_NO_MED%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_MEDICATION_HIST_LIST.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_med_destination_in IN PAT_MEDICATION_HIST_LIST.NOTES_MED_DESTINATION%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_MEDICATION_HIST_LIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_in IN PAT_MEDICATION_HIST_LIST.CANCEL_REASON%TYPE DEFAULT NULL,
      create_user_in IN PAT_MEDICATION_HIST_LIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_MEDICATION_HIST_LIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_MEDICATION_HIST_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_MEDICATION_HIST_LIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_MEDICATION_HIST_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_MEDICATION_HIST_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_take_type_in IN PAT_MEDICATION_HIST_LIST.FLG_TAKE_TYPE%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_pat_medication_hist_list_in => l_pky,
         id_pat_medication_list_in => id_pat_medication_list_in,
         id_episode_in => id_episode_in,
         id_patient_in => id_patient_in,
         id_institution_in => id_institution_in,
         id_software_in => id_software_in,
         year_begin_in => year_begin_in,
         month_begin_in => month_begin_in,
         day_begin_in => day_begin_in,
         qty_in => qty_in,
         frequency_in => frequency_in,
         flg_status_in => flg_status_in,
         id_professional_in => id_professional_in,
         notes_in => notes_in,
         flg_presc_in => flg_presc_in,
         id_prescription_pharm_in => id_prescription_pharm_in,
         dt_pat_medication_list_tstz_in => dt_pat_medication_list_tstz_in,
         id_unit_measure_qty_in => id_unit_measure_qty_in,
         id_unit_measure_freq_in => id_unit_measure_freq_in,
         freq_in => freq_in,
         duration_in => duration_in,
         id_unit_measure_dur_in => id_unit_measure_dur_in,
         dt_start_pat_med_tstz_in => dt_start_pat_med_tstz_in,
         dt_end_pat_med_tstz_in => dt_end_pat_med_tstz_in,
         emb_id_in => emb_id_in,
         id_prod_med_in => id_prod_med_in,
         prod_med_decr_in => prod_med_decr_in,
         id_drug_req_det_in => id_drug_req_det_in,
         id_drug_presc_det_in => id_drug_presc_det_in,
         quantity_in => quantity_in,
         id_epis_documentation_in => id_epis_documentation_in,
         med_id_type_in => med_id_type_in,
         continue_in => continue_in,
         vers_in => vers_in,
         id_drug_in => id_drug_in,
         med_id_in => med_id_in,
         dosage_in => dosage_in,
         flg_no_med_in => flg_no_med_in,
         notes_advers_react_in => notes_advers_react_in,
         notes_med_destination_in => notes_med_destination_in,
         id_cancel_reason_in => id_cancel_reason_in,
         cancel_reason_in => cancel_reason_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_take_type_in => flg_take_type_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN PAT_MEDICATION_HIST_LIST_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
         FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO PAT_MEDICATION_HIST_LIST VALUES rows_in (indx) RETURNING ROWID BULK COLLECT INTO rows_out;
      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                PK_ALERT_EXCEPTIONS.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_CODE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PAT_MEDICATION_HIST_LIST _' || indx
                  ,value_in => rows_in(indx).ID_PAT_MEDICATION_HIST_LIST
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PAT_MEDICATION_LIST _' || indx
                  ,value_in => rows_in(indx).ID_PAT_MEDICATION_LIST
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPISODE _' || indx
                  ,value_in => rows_in(indx).ID_EPISODE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PATIENT _' || indx
                  ,value_in => rows_in(indx).ID_PATIENT
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).ID_INSTITUTION
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SOFTWARE _' || indx
                  ,value_in => rows_in(indx).ID_SOFTWARE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'YEAR_BEGIN _' || indx
                  ,value_in => rows_in(indx).YEAR_BEGIN
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'MONTH_BEGIN _' || indx
                  ,value_in => rows_in(indx).MONTH_BEGIN
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DAY_BEGIN _' || indx
                  ,value_in => rows_in(indx).DAY_BEGIN
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'QTY _' || indx
                  ,value_in => rows_in(indx).QTY
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FREQUENCY _' || indx
                  ,value_in => rows_in(indx).FREQUENCY
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATUS _' || indx
                  ,value_in => rows_in(indx).FLG_STATUS
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROFESSIONAL _' || indx
                  ,value_in => rows_in(indx).ID_PROFESSIONAL
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES _' || indx
                  ,value_in => rows_in(indx).NOTES
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_PRESC _' || indx
                  ,value_in => rows_in(indx).FLG_PRESC
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PRESCRIPTION_PHARM _' || indx
                  ,value_in => rows_in(indx).ID_PRESCRIPTION_PHARM
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_PAT_MEDICATION_LIST_TSTZ _' || indx
                  ,value_in => rows_in(indx).DT_PAT_MEDICATION_LIST_TSTZ
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_UNIT_MEASURE_QTY _' || indx
                  ,value_in => rows_in(indx).ID_UNIT_MEASURE_QTY
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_UNIT_MEASURE_FREQ _' || indx
                  ,value_in => rows_in(indx).ID_UNIT_MEASURE_FREQ
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FREQ _' || indx
                  ,value_in => rows_in(indx).FREQ
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DURATION _' || indx
                  ,value_in => rows_in(indx).DURATION
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_UNIT_MEASURE_DUR _' || indx
                  ,value_in => rows_in(indx).ID_UNIT_MEASURE_DUR
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_START_PAT_MED_TSTZ _' || indx
                  ,value_in => rows_in(indx).DT_START_PAT_MED_TSTZ
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_END_PAT_MED_TSTZ _' || indx
                  ,value_in => rows_in(indx).DT_END_PAT_MED_TSTZ
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'EMB_ID _' || indx
                  ,value_in => rows_in(indx).EMB_ID
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROD_MED _' || indx
                  ,value_in => rows_in(indx).ID_PROD_MED
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'PROD_MED_DECR _' || indx
                  ,value_in => rows_in(indx).PROD_MED_DECR
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_DRUG_REQ_DET _' || indx
                  ,value_in => rows_in(indx).ID_DRUG_REQ_DET
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_DRUG_PRESC_DET _' || indx
                  ,value_in => rows_in(indx).ID_DRUG_PRESC_DET
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'QUANTITY _' || indx
                  ,value_in => rows_in(indx).QUANTITY
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPIS_DOCUMENTATION _' || indx
                  ,value_in => rows_in(indx).ID_EPIS_DOCUMENTATION
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'MED_ID_TYPE _' || indx
                  ,value_in => rows_in(indx).MED_ID_TYPE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CONTINUE _' || indx
                  ,value_in => rows_in(indx).CONTINUE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'VERS _' || indx
                  ,value_in => rows_in(indx).VERS
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_DRUG _' || indx
                  ,value_in => rows_in(indx).ID_DRUG
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'MED_ID _' || indx
                  ,value_in => rows_in(indx).MED_ID
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DOSAGE _' || indx
                  ,value_in => rows_in(indx).DOSAGE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_NO_MED _' || indx
                  ,value_in => rows_in(indx).FLG_NO_MED
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES_ADVERS_REACT _' || indx
                  ,value_in => rows_in(indx).NOTES_ADVERS_REACT
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES_MED_DESTINATION _' || indx
                  ,value_in => rows_in(indx).NOTES_MED_DESTINATION
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CANCEL_REASON _' || indx
                  ,value_in => rows_in(indx).ID_CANCEL_REASON
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CANCEL_REASON _' || indx
                  ,value_in => rows_in(indx).CANCEL_REASON
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(indx).CREATE_USER
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(indx).CREATE_TIME
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(indx).UPDATE_USER
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(indx).UPDATE_TIME
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_TAKE_TYPE _' || indx
                  ,value_in => rows_in(indx).FLG_TAKE_TYPE
                  ,validate_in => FALSE
                );

                PK_ALERT_EXCEPTIONS.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       PK_ALERT_EXCEPTIONS.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'PAT_MEDICATION_HIST_LIST'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN PAT_MEDICATION_HIST_LIST_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_pat_medication_hist_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE,
      id_pat_medication_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      ID_PAT_MEDICATION_LIST_nin IN BOOLEAN := TRUE,
      id_episode_in IN PAT_MEDICATION_HIST_LIST.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_patient_in IN PAT_MEDICATION_HIST_LIST.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_institution_in IN PAT_MEDICATION_HIST_LIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_software_in IN PAT_MEDICATION_HIST_LIST.ID_SOFTWARE%TYPE DEFAULT NULL,
      ID_SOFTWARE_nin IN BOOLEAN := TRUE,
      year_begin_in IN PAT_MEDICATION_HIST_LIST.YEAR_BEGIN%TYPE DEFAULT NULL,
      YEAR_BEGIN_nin IN BOOLEAN := TRUE,
      month_begin_in IN PAT_MEDICATION_HIST_LIST.MONTH_BEGIN%TYPE DEFAULT NULL,
      MONTH_BEGIN_nin IN BOOLEAN := TRUE,
      day_begin_in IN PAT_MEDICATION_HIST_LIST.DAY_BEGIN%TYPE DEFAULT NULL,
      DAY_BEGIN_nin IN BOOLEAN := TRUE,
      qty_in IN PAT_MEDICATION_HIST_LIST.QTY%TYPE DEFAULT NULL,
      QTY_nin IN BOOLEAN := TRUE,
      frequency_in IN PAT_MEDICATION_HIST_LIST.FREQUENCY%TYPE DEFAULT NULL,
      FREQUENCY_nin IN BOOLEAN := TRUE,
      flg_status_in IN PAT_MEDICATION_HIST_LIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_professional_in IN PAT_MEDICATION_HIST_LIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      notes_in IN PAT_MEDICATION_HIST_LIST.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      flg_presc_in IN PAT_MEDICATION_HIST_LIST.FLG_PRESC%TYPE DEFAULT NULL,
      FLG_PRESC_nin IN BOOLEAN := TRUE,
      id_prescription_pharm_in IN PAT_MEDICATION_HIST_LIST.ID_PRESCRIPTION_PHARM%TYPE DEFAULT NULL,
      ID_PRESCRIPTION_PHARM_nin IN BOOLEAN := TRUE,
      dt_pat_medication_list_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_PAT_MEDICATION_LIST_TSTZ%TYPE DEFAULT NULL,
      DT_PAT_MED_LIST_TSTZ_nin IN BOOLEAN := TRUE,
      id_unit_measure_qty_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_QTY%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_QTY_nin IN BOOLEAN := TRUE,
      id_unit_measure_freq_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_FREQ%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_FREQ_nin IN BOOLEAN := TRUE,
      freq_in IN PAT_MEDICATION_HIST_LIST.FREQ%TYPE DEFAULT NULL,
      FREQ_nin IN BOOLEAN := TRUE,
      duration_in IN PAT_MEDICATION_HIST_LIST.DURATION%TYPE DEFAULT NULL,
      DURATION_nin IN BOOLEAN := TRUE,
      id_unit_measure_dur_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_DUR%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_DUR_nin IN BOOLEAN := TRUE,
      dt_start_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_START_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      DT_START_PAT_MED_TSTZ_nin IN BOOLEAN := TRUE,
      dt_end_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_END_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      DT_END_PAT_MED_TSTZ_nin IN BOOLEAN := TRUE,
      emb_id_in IN PAT_MEDICATION_HIST_LIST.EMB_ID%TYPE DEFAULT NULL,
      EMB_ID_nin IN BOOLEAN := TRUE,
      id_prod_med_in IN PAT_MEDICATION_HIST_LIST.ID_PROD_MED%TYPE DEFAULT NULL,
      ID_PROD_MED_nin IN BOOLEAN := TRUE,
      prod_med_decr_in IN PAT_MEDICATION_HIST_LIST.PROD_MED_DECR%TYPE DEFAULT NULL,
      PROD_MED_DECR_nin IN BOOLEAN := TRUE,
      id_drug_req_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_REQ_DET%TYPE DEFAULT NULL,
      ID_DRUG_REQ_DET_nin IN BOOLEAN := TRUE,
      id_drug_presc_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      ID_DRUG_PRESC_DET_nin IN BOOLEAN := TRUE,
      quantity_in IN PAT_MEDICATION_HIST_LIST.QUANTITY%TYPE DEFAULT NULL,
      QUANTITY_nin IN BOOLEAN := TRUE,
      id_epis_documentation_in IN PAT_MEDICATION_HIST_LIST.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      ID_EPIS_DOCUMENTATION_nin IN BOOLEAN := TRUE,
      med_id_type_in IN PAT_MEDICATION_HIST_LIST.MED_ID_TYPE%TYPE DEFAULT NULL,
      MED_ID_TYPE_nin IN BOOLEAN := TRUE,
      continue_in IN PAT_MEDICATION_HIST_LIST.CONTINUE%TYPE DEFAULT NULL,
      CONTINUE_nin IN BOOLEAN := TRUE,
      vers_in IN PAT_MEDICATION_HIST_LIST.VERS%TYPE DEFAULT NULL,
      VERS_nin IN BOOLEAN := TRUE,
      id_drug_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG%TYPE DEFAULT NULL,
      ID_DRUG_nin IN BOOLEAN := TRUE,
      med_id_in IN PAT_MEDICATION_HIST_LIST.MED_ID%TYPE DEFAULT NULL,
      MED_ID_nin IN BOOLEAN := TRUE,
      dosage_in IN PAT_MEDICATION_HIST_LIST.DOSAGE%TYPE DEFAULT NULL,
      DOSAGE_nin IN BOOLEAN := TRUE,
      flg_no_med_in IN PAT_MEDICATION_HIST_LIST.FLG_NO_MED%TYPE DEFAULT NULL,
      FLG_NO_MED_nin IN BOOLEAN := TRUE,
      notes_advers_react_in IN PAT_MEDICATION_HIST_LIST.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      NOTES_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      notes_med_destination_in IN PAT_MEDICATION_HIST_LIST.NOTES_MED_DESTINATION%TYPE DEFAULT NULL,
      NOTES_MED_DESTINATION_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PAT_MEDICATION_HIST_LIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      cancel_reason_in IN PAT_MEDICATION_HIST_LIST.CANCEL_REASON%TYPE DEFAULT NULL,
      CANCEL_REASON_nin IN BOOLEAN := TRUE,
      create_user_in IN PAT_MEDICATION_HIST_LIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PAT_MEDICATION_HIST_LIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PAT_MEDICATION_HIST_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PAT_MEDICATION_HIST_LIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PAT_MEDICATION_HIST_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PAT_MEDICATION_HIST_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_take_type_in IN PAT_MEDICATION_HIST_LIST.FLG_TAKE_TYPE%TYPE DEFAULT NULL,
      FLG_TAKE_TYPE_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_PAT_MEDICATION_LIST_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
   l_ID_PATIENT_n NUMBER(1);
   l_ID_INSTITUTION_n NUMBER(1);
   l_ID_SOFTWARE_n NUMBER(1);
   l_YEAR_BEGIN_n NUMBER(1);
   l_MONTH_BEGIN_n NUMBER(1);
   l_DAY_BEGIN_n NUMBER(1);
   l_QTY_n NUMBER(1);
   l_FREQUENCY_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_ID_PROFESSIONAL_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_FLG_PRESC_n NUMBER(1);
   l_ID_PRESCRIPTION_PHARM_n NUMBER(1);
   l_DT_PAT_MED_LIST_TSTZ_n NUMBER(1);
   l_ID_UNIT_MEASURE_QTY_n NUMBER(1);
   l_ID_UNIT_MEASURE_FREQ_n NUMBER(1);
   l_FREQ_n NUMBER(1);
   l_DURATION_n NUMBER(1);
   l_ID_UNIT_MEASURE_DUR_n NUMBER(1);
   l_DT_START_PAT_MED_TSTZ_n NUMBER(1);
   l_DT_END_PAT_MED_TSTZ_n NUMBER(1);
   l_EMB_ID_n NUMBER(1);
   l_ID_PROD_MED_n NUMBER(1);
   l_PROD_MED_DECR_n NUMBER(1);
   l_ID_DRUG_REQ_DET_n NUMBER(1);
   l_ID_DRUG_PRESC_DET_n NUMBER(1);
   l_QUANTITY_n NUMBER(1);
   l_ID_EPIS_DOCUMENTATION_n NUMBER(1);
   l_MED_ID_TYPE_n NUMBER(1);
   l_CONTINUE_n NUMBER(1);
   l_VERS_n NUMBER(1);
   l_ID_DRUG_n NUMBER(1);
   l_MED_ID_n NUMBER(1);
   l_DOSAGE_n NUMBER(1);
   l_FLG_NO_MED_n NUMBER(1);
   l_NOTES_ADVERS_REACT_n NUMBER(1);
   l_NOTES_MED_DESTINATION_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_CANCEL_REASON_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_FLG_TAKE_TYPE_n NUMBER(1);
   BEGIN

   l_ID_PAT_MEDICATION_LIST_n := sys.diutil.bool_to_int(ID_PAT_MEDICATION_LIST_nin);
   l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
   l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
   l_ID_INSTITUTION_n := sys.diutil.bool_to_int(ID_INSTITUTION_nin);
   l_ID_SOFTWARE_n := sys.diutil.bool_to_int(ID_SOFTWARE_nin);
   l_YEAR_BEGIN_n := sys.diutil.bool_to_int(YEAR_BEGIN_nin);
   l_MONTH_BEGIN_n := sys.diutil.bool_to_int(MONTH_BEGIN_nin);
   l_DAY_BEGIN_n := sys.diutil.bool_to_int(DAY_BEGIN_nin);
   l_QTY_n := sys.diutil.bool_to_int(QTY_nin);
   l_FREQUENCY_n := sys.diutil.bool_to_int(FREQUENCY_nin);
   l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
   l_ID_PROFESSIONAL_n := sys.diutil.bool_to_int(ID_PROFESSIONAL_nin);
   l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
   l_FLG_PRESC_n := sys.diutil.bool_to_int(FLG_PRESC_nin);
   l_ID_PRESCRIPTION_PHARM_n := sys.diutil.bool_to_int(ID_PRESCRIPTION_PHARM_nin);
   l_DT_PAT_MED_LIST_TSTZ_n := sys.diutil.bool_to_int(DT_PAT_MED_LIST_TSTZ_nin);
   l_ID_UNIT_MEASURE_QTY_n := sys.diutil.bool_to_int(ID_UNIT_MEASURE_QTY_nin);
   l_ID_UNIT_MEASURE_FREQ_n := sys.diutil.bool_to_int(ID_UNIT_MEASURE_FREQ_nin);
   l_FREQ_n := sys.diutil.bool_to_int(FREQ_nin);
   l_DURATION_n := sys.diutil.bool_to_int(DURATION_nin);
   l_ID_UNIT_MEASURE_DUR_n := sys.diutil.bool_to_int(ID_UNIT_MEASURE_DUR_nin);
   l_DT_START_PAT_MED_TSTZ_n := sys.diutil.bool_to_int(DT_START_PAT_MED_TSTZ_nin);
   l_DT_END_PAT_MED_TSTZ_n := sys.diutil.bool_to_int(DT_END_PAT_MED_TSTZ_nin);
   l_EMB_ID_n := sys.diutil.bool_to_int(EMB_ID_nin);
   l_ID_PROD_MED_n := sys.diutil.bool_to_int(ID_PROD_MED_nin);
   l_PROD_MED_DECR_n := sys.diutil.bool_to_int(PROD_MED_DECR_nin);
   l_ID_DRUG_REQ_DET_n := sys.diutil.bool_to_int(ID_DRUG_REQ_DET_nin);
   l_ID_DRUG_PRESC_DET_n := sys.diutil.bool_to_int(ID_DRUG_PRESC_DET_nin);
   l_QUANTITY_n := sys.diutil.bool_to_int(QUANTITY_nin);
   l_ID_EPIS_DOCUMENTATION_n := sys.diutil.bool_to_int(ID_EPIS_DOCUMENTATION_nin);
   l_MED_ID_TYPE_n := sys.diutil.bool_to_int(MED_ID_TYPE_nin);
   l_CONTINUE_n := sys.diutil.bool_to_int(CONTINUE_nin);
   l_VERS_n := sys.diutil.bool_to_int(VERS_nin);
   l_ID_DRUG_n := sys.diutil.bool_to_int(ID_DRUG_nin);
   l_MED_ID_n := sys.diutil.bool_to_int(MED_ID_nin);
   l_DOSAGE_n := sys.diutil.bool_to_int(DOSAGE_nin);
   l_FLG_NO_MED_n := sys.diutil.bool_to_int(FLG_NO_MED_nin);
   l_NOTES_ADVERS_REACT_n := sys.diutil.bool_to_int(NOTES_ADVERS_REACT_nin);
   l_NOTES_MED_DESTINATION_n := sys.diutil.bool_to_int(NOTES_MED_DESTINATION_nin);
   l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
   l_CANCEL_REASON_n := sys.diutil.bool_to_int(CANCEL_REASON_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
   l_FLG_TAKE_TYPE_n := sys.diutil.bool_to_int(FLG_TAKE_TYPE_nin);


         UPDATE PAT_MEDICATION_HIST_LIST SET
     ID_PAT_MEDICATION_LIST = decode (l_ID_PAT_MEDICATION_LIST_n,0,id_pat_medication_list_in, NVL (id_pat_medication_list_in, ID_PAT_MEDICATION_LIST)),
     ID_EPISODE = decode (l_ID_EPISODE_n,0,id_episode_in, NVL (id_episode_in, ID_EPISODE)),
     ID_PATIENT = decode (l_ID_PATIENT_n,0,id_patient_in, NVL (id_patient_in, ID_PATIENT)),
     ID_INSTITUTION = decode (l_ID_INSTITUTION_n,0,id_institution_in, NVL (id_institution_in, ID_INSTITUTION)),
     ID_SOFTWARE = decode (l_ID_SOFTWARE_n,0,id_software_in, NVL (id_software_in, ID_SOFTWARE)),
     YEAR_BEGIN = decode (l_YEAR_BEGIN_n,0,year_begin_in, NVL (year_begin_in, YEAR_BEGIN)),
     MONTH_BEGIN = decode (l_MONTH_BEGIN_n,0,month_begin_in, NVL (month_begin_in, MONTH_BEGIN)),
     DAY_BEGIN = decode (l_DAY_BEGIN_n,0,day_begin_in, NVL (day_begin_in, DAY_BEGIN)),
     QTY = decode (l_QTY_n,0,qty_in, NVL (qty_in, QTY)),
     FREQUENCY = decode (l_FREQUENCY_n,0,frequency_in, NVL (frequency_in, FREQUENCY)),
     FLG_STATUS = decode (l_FLG_STATUS_n,0,flg_status_in, NVL (flg_status_in, FLG_STATUS)),
     ID_PROFESSIONAL = decode (l_ID_PROFESSIONAL_n,0,id_professional_in, NVL (id_professional_in, ID_PROFESSIONAL)),
     NOTES = decode (l_NOTES_n,0,notes_in, NVL (notes_in, NOTES)),
     FLG_PRESC = decode (l_FLG_PRESC_n,0,flg_presc_in, NVL (flg_presc_in, FLG_PRESC)),
     ID_PRESCRIPTION_PHARM = decode (l_ID_PRESCRIPTION_PHARM_n,0,id_prescription_pharm_in, NVL (id_prescription_pharm_in, ID_PRESCRIPTION_PHARM)),
     DT_PAT_MEDICATION_LIST_TSTZ = decode (l_DT_PAT_MED_LIST_TSTZ_n,0,dt_pat_medication_list_tstz_in, NVL (dt_pat_medication_list_tstz_in, DT_PAT_MEDICATION_LIST_TSTZ)),
     ID_UNIT_MEASURE_QTY = decode (l_ID_UNIT_MEASURE_QTY_n,0,id_unit_measure_qty_in, NVL (id_unit_measure_qty_in, ID_UNIT_MEASURE_QTY)),
     ID_UNIT_MEASURE_FREQ = decode (l_ID_UNIT_MEASURE_FREQ_n,0,id_unit_measure_freq_in, NVL (id_unit_measure_freq_in, ID_UNIT_MEASURE_FREQ)),
     FREQ = decode (l_FREQ_n,0,freq_in, NVL (freq_in, FREQ)),
     DURATION = decode (l_DURATION_n,0,duration_in, NVL (duration_in, DURATION)),
     ID_UNIT_MEASURE_DUR = decode (l_ID_UNIT_MEASURE_DUR_n,0,id_unit_measure_dur_in, NVL (id_unit_measure_dur_in, ID_UNIT_MEASURE_DUR)),
     DT_START_PAT_MED_TSTZ = decode (l_DT_START_PAT_MED_TSTZ_n,0,dt_start_pat_med_tstz_in, NVL (dt_start_pat_med_tstz_in, DT_START_PAT_MED_TSTZ)),
     DT_END_PAT_MED_TSTZ = decode (l_DT_END_PAT_MED_TSTZ_n,0,dt_end_pat_med_tstz_in, NVL (dt_end_pat_med_tstz_in, DT_END_PAT_MED_TSTZ)),
     EMB_ID = decode (l_EMB_ID_n,0,emb_id_in, NVL (emb_id_in, EMB_ID)),
     ID_PROD_MED = decode (l_ID_PROD_MED_n,0,id_prod_med_in, NVL (id_prod_med_in, ID_PROD_MED)),
     PROD_MED_DECR = decode (l_PROD_MED_DECR_n,0,prod_med_decr_in, NVL (prod_med_decr_in, PROD_MED_DECR)),
     ID_DRUG_REQ_DET = decode (l_ID_DRUG_REQ_DET_n,0,id_drug_req_det_in, NVL (id_drug_req_det_in, ID_DRUG_REQ_DET)),
     ID_DRUG_PRESC_DET = decode (l_ID_DRUG_PRESC_DET_n,0,id_drug_presc_det_in, NVL (id_drug_presc_det_in, ID_DRUG_PRESC_DET)),
     QUANTITY = decode (l_QUANTITY_n,0,quantity_in, NVL (quantity_in, QUANTITY)),
     ID_EPIS_DOCUMENTATION = decode (l_ID_EPIS_DOCUMENTATION_n,0,id_epis_documentation_in, NVL (id_epis_documentation_in, ID_EPIS_DOCUMENTATION)),
     MED_ID_TYPE = decode (l_MED_ID_TYPE_n,0,med_id_type_in, NVL (med_id_type_in, MED_ID_TYPE)),
     CONTINUE = decode (l_CONTINUE_n,0,continue_in, NVL (continue_in, CONTINUE)),
     VERS = decode (l_VERS_n,0,vers_in, NVL (vers_in, VERS)),
     ID_DRUG = decode (l_ID_DRUG_n,0,id_drug_in, NVL (id_drug_in, ID_DRUG)),
     MED_ID = decode (l_MED_ID_n,0,med_id_in, NVL (med_id_in, MED_ID)),
     DOSAGE = decode (l_DOSAGE_n,0,dosage_in, NVL (dosage_in, DOSAGE)),
     FLG_NO_MED = decode (l_FLG_NO_MED_n,0,flg_no_med_in, NVL (flg_no_med_in, FLG_NO_MED)),
     NOTES_ADVERS_REACT = decode (l_NOTES_ADVERS_REACT_n,0,notes_advers_react_in, NVL (notes_advers_react_in, NOTES_ADVERS_REACT)),
     NOTES_MED_DESTINATION = decode (l_NOTES_MED_DESTINATION_n,0,notes_med_destination_in, NVL (notes_med_destination_in, NOTES_MED_DESTINATION)),
     ID_CANCEL_REASON = decode (l_ID_CANCEL_REASON_n,0,id_cancel_reason_in, NVL (id_cancel_reason_in, ID_CANCEL_REASON)),
     CANCEL_REASON = decode (l_CANCEL_REASON_n,0,cancel_reason_in, NVL (cancel_reason_in, CANCEL_REASON)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION)),
     FLG_TAKE_TYPE = decode (l_FLG_TAKE_TYPE_n,0,flg_take_type_in, NVL (flg_take_type_in, FLG_TAKE_TYPE))
          WHERE
             ID_PAT_MEDICATION_HIST_LIST = id_pat_medication_hist_list_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              PK_ALERT_EXCEPTIONS.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PAT_MEDICATION_HIST_LIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           IF l_name = 'PMHL_DPD_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DRUG_PRESC_DET'
               , value_in => id_drug_presc_det_in);
           END IF;
           IF l_name = 'PMHL_DRD_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DRUG_REQ_DET'
               , value_in => id_drug_req_det_in);
           END IF;
           IF l_name = 'PMHL_EPIS_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'PMHL_ICR_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'PMHL_INST_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INSTITUTION'
               , value_in => id_institution_in);
           END IF;
           IF l_name = 'PMHL_PAT_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'PMHL_PROFESSIONAL_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           IF l_name = 'PMHL_SOFTW_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SOFTWARE'
               , value_in => id_software_in);
           END IF;
           IF l_name = 'PMHL_UMD_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_UNIT_MEASURE_DUR'
               , value_in => id_unit_measure_dur_in);
           END IF;
           IF l_name = 'PMHL_UMF_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_UNIT_MEASURE_FREQ'
               , value_in => id_unit_measure_freq_in);
           END IF;
           IF l_name = 'PMHL_UMQ_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_UNIT_MEASURE_QTY'
               , value_in => id_unit_measure_qty_in);
           END IF;
           IF l_name = 'PMLH_MED_EI_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'EMB_ID'
               , value_in => emb_id_in);
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'VERS'
               , value_in => vers_in);
           END IF;
           IF l_name = 'PMLH_MED_INT_ID_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DRUG'
               , value_in => id_drug_in);
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'VERS'
               , value_in => vers_in);
           END IF;
           IF l_name = 'PMN_1_PMN_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PAT_MEDICATION_LIST'
               , value_in => id_pat_medication_list_in);
           END IF;
           IF l_name = 'PMN_1_PPN_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PRESCRIPTION_PHARM'
               , value_in => id_prescription_pharm_in);
           END IF;
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           PK_ALERT_EXCEPTIONS.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_pat_medication_hist_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE,
      id_pat_medication_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      ID_PAT_MEDICATION_LIST_nin IN BOOLEAN := TRUE,
      id_episode_in IN PAT_MEDICATION_HIST_LIST.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_patient_in IN PAT_MEDICATION_HIST_LIST.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_institution_in IN PAT_MEDICATION_HIST_LIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_software_in IN PAT_MEDICATION_HIST_LIST.ID_SOFTWARE%TYPE DEFAULT NULL,
      ID_SOFTWARE_nin IN BOOLEAN := TRUE,
      year_begin_in IN PAT_MEDICATION_HIST_LIST.YEAR_BEGIN%TYPE DEFAULT NULL,
      YEAR_BEGIN_nin IN BOOLEAN := TRUE,
      month_begin_in IN PAT_MEDICATION_HIST_LIST.MONTH_BEGIN%TYPE DEFAULT NULL,
      MONTH_BEGIN_nin IN BOOLEAN := TRUE,
      day_begin_in IN PAT_MEDICATION_HIST_LIST.DAY_BEGIN%TYPE DEFAULT NULL,
      DAY_BEGIN_nin IN BOOLEAN := TRUE,
      qty_in IN PAT_MEDICATION_HIST_LIST.QTY%TYPE DEFAULT NULL,
      QTY_nin IN BOOLEAN := TRUE,
      frequency_in IN PAT_MEDICATION_HIST_LIST.FREQUENCY%TYPE DEFAULT NULL,
      FREQUENCY_nin IN BOOLEAN := TRUE,
      flg_status_in IN PAT_MEDICATION_HIST_LIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_professional_in IN PAT_MEDICATION_HIST_LIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      notes_in IN PAT_MEDICATION_HIST_LIST.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      flg_presc_in IN PAT_MEDICATION_HIST_LIST.FLG_PRESC%TYPE DEFAULT NULL,
      FLG_PRESC_nin IN BOOLEAN := TRUE,
      id_prescription_pharm_in IN PAT_MEDICATION_HIST_LIST.ID_PRESCRIPTION_PHARM%TYPE DEFAULT NULL,
      ID_PRESCRIPTION_PHARM_nin IN BOOLEAN := TRUE,
      dt_pat_medication_list_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_PAT_MEDICATION_LIST_TSTZ%TYPE DEFAULT NULL,
      DT_PAT_MED_LIST_TSTZ_nin IN BOOLEAN := TRUE,
      id_unit_measure_qty_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_QTY%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_QTY_nin IN BOOLEAN := TRUE,
      id_unit_measure_freq_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_FREQ%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_FREQ_nin IN BOOLEAN := TRUE,
      freq_in IN PAT_MEDICATION_HIST_LIST.FREQ%TYPE DEFAULT NULL,
      FREQ_nin IN BOOLEAN := TRUE,
      duration_in IN PAT_MEDICATION_HIST_LIST.DURATION%TYPE DEFAULT NULL,
      DURATION_nin IN BOOLEAN := TRUE,
      id_unit_measure_dur_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_DUR%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_DUR_nin IN BOOLEAN := TRUE,
      dt_start_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_START_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      DT_START_PAT_MED_TSTZ_nin IN BOOLEAN := TRUE,
      dt_end_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_END_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      DT_END_PAT_MED_TSTZ_nin IN BOOLEAN := TRUE,
      emb_id_in IN PAT_MEDICATION_HIST_LIST.EMB_ID%TYPE DEFAULT NULL,
      EMB_ID_nin IN BOOLEAN := TRUE,
      id_prod_med_in IN PAT_MEDICATION_HIST_LIST.ID_PROD_MED%TYPE DEFAULT NULL,
      ID_PROD_MED_nin IN BOOLEAN := TRUE,
      prod_med_decr_in IN PAT_MEDICATION_HIST_LIST.PROD_MED_DECR%TYPE DEFAULT NULL,
      PROD_MED_DECR_nin IN BOOLEAN := TRUE,
      id_drug_req_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_REQ_DET%TYPE DEFAULT NULL,
      ID_DRUG_REQ_DET_nin IN BOOLEAN := TRUE,
      id_drug_presc_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      ID_DRUG_PRESC_DET_nin IN BOOLEAN := TRUE,
      quantity_in IN PAT_MEDICATION_HIST_LIST.QUANTITY%TYPE DEFAULT NULL,
      QUANTITY_nin IN BOOLEAN := TRUE,
      id_epis_documentation_in IN PAT_MEDICATION_HIST_LIST.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      ID_EPIS_DOCUMENTATION_nin IN BOOLEAN := TRUE,
      med_id_type_in IN PAT_MEDICATION_HIST_LIST.MED_ID_TYPE%TYPE DEFAULT NULL,
      MED_ID_TYPE_nin IN BOOLEAN := TRUE,
      continue_in IN PAT_MEDICATION_HIST_LIST.CONTINUE%TYPE DEFAULT NULL,
      CONTINUE_nin IN BOOLEAN := TRUE,
      vers_in IN PAT_MEDICATION_HIST_LIST.VERS%TYPE DEFAULT NULL,
      VERS_nin IN BOOLEAN := TRUE,
      id_drug_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG%TYPE DEFAULT NULL,
      ID_DRUG_nin IN BOOLEAN := TRUE,
      med_id_in IN PAT_MEDICATION_HIST_LIST.MED_ID%TYPE DEFAULT NULL,
      MED_ID_nin IN BOOLEAN := TRUE,
      dosage_in IN PAT_MEDICATION_HIST_LIST.DOSAGE%TYPE DEFAULT NULL,
      DOSAGE_nin IN BOOLEAN := TRUE,
      flg_no_med_in IN PAT_MEDICATION_HIST_LIST.FLG_NO_MED%TYPE DEFAULT NULL,
      FLG_NO_MED_nin IN BOOLEAN := TRUE,
      notes_advers_react_in IN PAT_MEDICATION_HIST_LIST.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      NOTES_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      notes_med_destination_in IN PAT_MEDICATION_HIST_LIST.NOTES_MED_DESTINATION%TYPE DEFAULT NULL,
      NOTES_MED_DESTINATION_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PAT_MEDICATION_HIST_LIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      cancel_reason_in IN PAT_MEDICATION_HIST_LIST.CANCEL_REASON%TYPE DEFAULT NULL,
      CANCEL_REASON_nin IN BOOLEAN := TRUE,
      create_user_in IN PAT_MEDICATION_HIST_LIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PAT_MEDICATION_HIST_LIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PAT_MEDICATION_HIST_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PAT_MEDICATION_HIST_LIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PAT_MEDICATION_HIST_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PAT_MEDICATION_HIST_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_take_type_in IN PAT_MEDICATION_HIST_LIST.FLG_TAKE_TYPE%TYPE DEFAULT NULL,
      FLG_TAKE_TYPE_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_pat_medication_hist_list_in => id_pat_medication_hist_list_in,
      id_pat_medication_list_in => id_pat_medication_list_in,
      ID_PAT_MEDICATION_LIST_nin => ID_PAT_MEDICATION_LIST_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      id_institution_in => id_institution_in,
      ID_INSTITUTION_nin => ID_INSTITUTION_nin,
      id_software_in => id_software_in,
      ID_SOFTWARE_nin => ID_SOFTWARE_nin,
      year_begin_in => year_begin_in,
      YEAR_BEGIN_nin => YEAR_BEGIN_nin,
      month_begin_in => month_begin_in,
      MONTH_BEGIN_nin => MONTH_BEGIN_nin,
      day_begin_in => day_begin_in,
      DAY_BEGIN_nin => DAY_BEGIN_nin,
      qty_in => qty_in,
      QTY_nin => QTY_nin,
      frequency_in => frequency_in,
      FREQUENCY_nin => FREQUENCY_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      id_professional_in => id_professional_in,
      ID_PROFESSIONAL_nin => ID_PROFESSIONAL_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      flg_presc_in => flg_presc_in,
      FLG_PRESC_nin => FLG_PRESC_nin,
      id_prescription_pharm_in => id_prescription_pharm_in,
      ID_PRESCRIPTION_PHARM_nin => ID_PRESCRIPTION_PHARM_nin,
      dt_pat_medication_list_tstz_in => dt_pat_medication_list_tstz_in,
      DT_PAT_MED_LIST_TSTZ_nin => DT_PAT_MED_LIST_TSTZ_nin,
      id_unit_measure_qty_in => id_unit_measure_qty_in,
      ID_UNIT_MEASURE_QTY_nin => ID_UNIT_MEASURE_QTY_nin,
      id_unit_measure_freq_in => id_unit_measure_freq_in,
      ID_UNIT_MEASURE_FREQ_nin => ID_UNIT_MEASURE_FREQ_nin,
      freq_in => freq_in,
      FREQ_nin => FREQ_nin,
      duration_in => duration_in,
      DURATION_nin => DURATION_nin,
      id_unit_measure_dur_in => id_unit_measure_dur_in,
      ID_UNIT_MEASURE_DUR_nin => ID_UNIT_MEASURE_DUR_nin,
      dt_start_pat_med_tstz_in => dt_start_pat_med_tstz_in,
      DT_START_PAT_MED_TSTZ_nin => DT_START_PAT_MED_TSTZ_nin,
      dt_end_pat_med_tstz_in => dt_end_pat_med_tstz_in,
      DT_END_PAT_MED_TSTZ_nin => DT_END_PAT_MED_TSTZ_nin,
      emb_id_in => emb_id_in,
      EMB_ID_nin => EMB_ID_nin,
      id_prod_med_in => id_prod_med_in,
      ID_PROD_MED_nin => ID_PROD_MED_nin,
      prod_med_decr_in => prod_med_decr_in,
      PROD_MED_DECR_nin => PROD_MED_DECR_nin,
      id_drug_req_det_in => id_drug_req_det_in,
      ID_DRUG_REQ_DET_nin => ID_DRUG_REQ_DET_nin,
      id_drug_presc_det_in => id_drug_presc_det_in,
      ID_DRUG_PRESC_DET_nin => ID_DRUG_PRESC_DET_nin,
      quantity_in => quantity_in,
      QUANTITY_nin => QUANTITY_nin,
      id_epis_documentation_in => id_epis_documentation_in,
      ID_EPIS_DOCUMENTATION_nin => ID_EPIS_DOCUMENTATION_nin,
      med_id_type_in => med_id_type_in,
      MED_ID_TYPE_nin => MED_ID_TYPE_nin,
      continue_in => continue_in,
      CONTINUE_nin => CONTINUE_nin,
      vers_in => vers_in,
      VERS_nin => VERS_nin,
      id_drug_in => id_drug_in,
      ID_DRUG_nin => ID_DRUG_nin,
      med_id_in => med_id_in,
      MED_ID_nin => MED_ID_nin,
      dosage_in => dosage_in,
      DOSAGE_nin => DOSAGE_nin,
      flg_no_med_in => flg_no_med_in,
      FLG_NO_MED_nin => FLG_NO_MED_nin,
      notes_advers_react_in => notes_advers_react_in,
      NOTES_ADVERS_REACT_nin => NOTES_ADVERS_REACT_nin,
      notes_med_destination_in => notes_med_destination_in,
      NOTES_MED_DESTINATION_nin => NOTES_MED_DESTINATION_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      cancel_reason_in => cancel_reason_in,
      CANCEL_REASON_nin => CANCEL_REASON_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      flg_take_type_in => flg_take_type_in,
      FLG_TAKE_TYPE_nin => FLG_TAKE_TYPE_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_pat_medication_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      ID_PAT_MEDICATION_LIST_nin IN BOOLEAN := TRUE,
      id_episode_in IN PAT_MEDICATION_HIST_LIST.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_patient_in IN PAT_MEDICATION_HIST_LIST.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_institution_in IN PAT_MEDICATION_HIST_LIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_software_in IN PAT_MEDICATION_HIST_LIST.ID_SOFTWARE%TYPE DEFAULT NULL,
      ID_SOFTWARE_nin IN BOOLEAN := TRUE,
      year_begin_in IN PAT_MEDICATION_HIST_LIST.YEAR_BEGIN%TYPE DEFAULT NULL,
      YEAR_BEGIN_nin IN BOOLEAN := TRUE,
      month_begin_in IN PAT_MEDICATION_HIST_LIST.MONTH_BEGIN%TYPE DEFAULT NULL,
      MONTH_BEGIN_nin IN BOOLEAN := TRUE,
      day_begin_in IN PAT_MEDICATION_HIST_LIST.DAY_BEGIN%TYPE DEFAULT NULL,
      DAY_BEGIN_nin IN BOOLEAN := TRUE,
      qty_in IN PAT_MEDICATION_HIST_LIST.QTY%TYPE DEFAULT NULL,
      QTY_nin IN BOOLEAN := TRUE,
      frequency_in IN PAT_MEDICATION_HIST_LIST.FREQUENCY%TYPE DEFAULT NULL,
      FREQUENCY_nin IN BOOLEAN := TRUE,
      flg_status_in IN PAT_MEDICATION_HIST_LIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_professional_in IN PAT_MEDICATION_HIST_LIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      notes_in IN PAT_MEDICATION_HIST_LIST.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      flg_presc_in IN PAT_MEDICATION_HIST_LIST.FLG_PRESC%TYPE DEFAULT NULL,
      FLG_PRESC_nin IN BOOLEAN := TRUE,
      id_prescription_pharm_in IN PAT_MEDICATION_HIST_LIST.ID_PRESCRIPTION_PHARM%TYPE DEFAULT NULL,
      ID_PRESCRIPTION_PHARM_nin IN BOOLEAN := TRUE,
      dt_pat_medication_list_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_PAT_MEDICATION_LIST_TSTZ%TYPE DEFAULT NULL,
      DT_PAT_MED_LIST_TSTZ_nin IN BOOLEAN := TRUE,
      id_unit_measure_qty_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_QTY%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_QTY_nin IN BOOLEAN := TRUE,
      id_unit_measure_freq_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_FREQ%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_FREQ_nin IN BOOLEAN := TRUE,
      freq_in IN PAT_MEDICATION_HIST_LIST.FREQ%TYPE DEFAULT NULL,
      FREQ_nin IN BOOLEAN := TRUE,
      duration_in IN PAT_MEDICATION_HIST_LIST.DURATION%TYPE DEFAULT NULL,
      DURATION_nin IN BOOLEAN := TRUE,
      id_unit_measure_dur_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_DUR%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_DUR_nin IN BOOLEAN := TRUE,
      dt_start_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_START_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      DT_START_PAT_MED_TSTZ_nin IN BOOLEAN := TRUE,
      dt_end_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_END_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      DT_END_PAT_MED_TSTZ_nin IN BOOLEAN := TRUE,
      emb_id_in IN PAT_MEDICATION_HIST_LIST.EMB_ID%TYPE DEFAULT NULL,
      EMB_ID_nin IN BOOLEAN := TRUE,
      id_prod_med_in IN PAT_MEDICATION_HIST_LIST.ID_PROD_MED%TYPE DEFAULT NULL,
      ID_PROD_MED_nin IN BOOLEAN := TRUE,
      prod_med_decr_in IN PAT_MEDICATION_HIST_LIST.PROD_MED_DECR%TYPE DEFAULT NULL,
      PROD_MED_DECR_nin IN BOOLEAN := TRUE,
      id_drug_req_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_REQ_DET%TYPE DEFAULT NULL,
      ID_DRUG_REQ_DET_nin IN BOOLEAN := TRUE,
      id_drug_presc_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      ID_DRUG_PRESC_DET_nin IN BOOLEAN := TRUE,
      quantity_in IN PAT_MEDICATION_HIST_LIST.QUANTITY%TYPE DEFAULT NULL,
      QUANTITY_nin IN BOOLEAN := TRUE,
      id_epis_documentation_in IN PAT_MEDICATION_HIST_LIST.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      ID_EPIS_DOCUMENTATION_nin IN BOOLEAN := TRUE,
      med_id_type_in IN PAT_MEDICATION_HIST_LIST.MED_ID_TYPE%TYPE DEFAULT NULL,
      MED_ID_TYPE_nin IN BOOLEAN := TRUE,
      continue_in IN PAT_MEDICATION_HIST_LIST.CONTINUE%TYPE DEFAULT NULL,
      CONTINUE_nin IN BOOLEAN := TRUE,
      vers_in IN PAT_MEDICATION_HIST_LIST.VERS%TYPE DEFAULT NULL,
      VERS_nin IN BOOLEAN := TRUE,
      id_drug_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG%TYPE DEFAULT NULL,
      ID_DRUG_nin IN BOOLEAN := TRUE,
      med_id_in IN PAT_MEDICATION_HIST_LIST.MED_ID%TYPE DEFAULT NULL,
      MED_ID_nin IN BOOLEAN := TRUE,
      dosage_in IN PAT_MEDICATION_HIST_LIST.DOSAGE%TYPE DEFAULT NULL,
      DOSAGE_nin IN BOOLEAN := TRUE,
      flg_no_med_in IN PAT_MEDICATION_HIST_LIST.FLG_NO_MED%TYPE DEFAULT NULL,
      FLG_NO_MED_nin IN BOOLEAN := TRUE,
      notes_advers_react_in IN PAT_MEDICATION_HIST_LIST.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      NOTES_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      notes_med_destination_in IN PAT_MEDICATION_HIST_LIST.NOTES_MED_DESTINATION%TYPE DEFAULT NULL,
      NOTES_MED_DESTINATION_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PAT_MEDICATION_HIST_LIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      cancel_reason_in IN PAT_MEDICATION_HIST_LIST.CANCEL_REASON%TYPE DEFAULT NULL,
      CANCEL_REASON_nin IN BOOLEAN := TRUE,
      create_user_in IN PAT_MEDICATION_HIST_LIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PAT_MEDICATION_HIST_LIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PAT_MEDICATION_HIST_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PAT_MEDICATION_HIST_LIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PAT_MEDICATION_HIST_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PAT_MEDICATION_HIST_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_take_type_in IN PAT_MEDICATION_HIST_LIST.FLG_TAKE_TYPE%TYPE DEFAULT NULL,
      FLG_TAKE_TYPE_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_ID_PAT_MEDICATION_LIST_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
   l_ID_PATIENT_n NUMBER(1);
   l_ID_INSTITUTION_n NUMBER(1);
   l_ID_SOFTWARE_n NUMBER(1);
   l_YEAR_BEGIN_n NUMBER(1);
   l_MONTH_BEGIN_n NUMBER(1);
   l_DAY_BEGIN_n NUMBER(1);
   l_QTY_n NUMBER(1);
   l_FREQUENCY_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_ID_PROFESSIONAL_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_FLG_PRESC_n NUMBER(1);
   l_ID_PRESCRIPTION_PHARM_n NUMBER(1);
   l_DT_PAT_MED_LIST_TSTZ_n NUMBER(1);
   l_ID_UNIT_MEASURE_QTY_n NUMBER(1);
   l_ID_UNIT_MEASURE_FREQ_n NUMBER(1);
   l_FREQ_n NUMBER(1);
   l_DURATION_n NUMBER(1);
   l_ID_UNIT_MEASURE_DUR_n NUMBER(1);
   l_DT_START_PAT_MED_TSTZ_n NUMBER(1);
   l_DT_END_PAT_MED_TSTZ_n NUMBER(1);
   l_EMB_ID_n NUMBER(1);
   l_ID_PROD_MED_n NUMBER(1);
   l_PROD_MED_DECR_n NUMBER(1);
   l_ID_DRUG_REQ_DET_n NUMBER(1);
   l_ID_DRUG_PRESC_DET_n NUMBER(1);
   l_QUANTITY_n NUMBER(1);
   l_ID_EPIS_DOCUMENTATION_n NUMBER(1);
   l_MED_ID_TYPE_n NUMBER(1);
   l_CONTINUE_n NUMBER(1);
   l_VERS_n NUMBER(1);
   l_ID_DRUG_n NUMBER(1);
   l_MED_ID_n NUMBER(1);
   l_DOSAGE_n NUMBER(1);
   l_FLG_NO_MED_n NUMBER(1);
   l_NOTES_ADVERS_REACT_n NUMBER(1);
   l_NOTES_MED_DESTINATION_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_CANCEL_REASON_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_FLG_TAKE_TYPE_n NUMBER(1);
      id_pat_medication_hist_list_in PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE;
   BEGIN



      l_ID_PAT_MEDICATION_LIST_n := sys.diutil.bool_to_int(ID_PAT_MEDICATION_LIST_nin);
      l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
      l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
      l_ID_INSTITUTION_n := sys.diutil.bool_to_int(ID_INSTITUTION_nin);
      l_ID_SOFTWARE_n := sys.diutil.bool_to_int(ID_SOFTWARE_nin);
      l_YEAR_BEGIN_n := sys.diutil.bool_to_int(YEAR_BEGIN_nin);
      l_MONTH_BEGIN_n := sys.diutil.bool_to_int(MONTH_BEGIN_nin);
      l_DAY_BEGIN_n := sys.diutil.bool_to_int(DAY_BEGIN_nin);
      l_QTY_n := sys.diutil.bool_to_int(QTY_nin);
      l_FREQUENCY_n := sys.diutil.bool_to_int(FREQUENCY_nin);
      l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
      l_ID_PROFESSIONAL_n := sys.diutil.bool_to_int(ID_PROFESSIONAL_nin);
      l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
      l_FLG_PRESC_n := sys.diutil.bool_to_int(FLG_PRESC_nin);
      l_ID_PRESCRIPTION_PHARM_n := sys.diutil.bool_to_int(ID_PRESCRIPTION_PHARM_nin);
      l_DT_PAT_MED_LIST_TSTZ_n := sys.diutil.bool_to_int(DT_PAT_MED_LIST_TSTZ_nin);
      l_ID_UNIT_MEASURE_QTY_n := sys.diutil.bool_to_int(ID_UNIT_MEASURE_QTY_nin);
      l_ID_UNIT_MEASURE_FREQ_n := sys.diutil.bool_to_int(ID_UNIT_MEASURE_FREQ_nin);
      l_FREQ_n := sys.diutil.bool_to_int(FREQ_nin);
      l_DURATION_n := sys.diutil.bool_to_int(DURATION_nin);
      l_ID_UNIT_MEASURE_DUR_n := sys.diutil.bool_to_int(ID_UNIT_MEASURE_DUR_nin);
      l_DT_START_PAT_MED_TSTZ_n := sys.diutil.bool_to_int(DT_START_PAT_MED_TSTZ_nin);
      l_DT_END_PAT_MED_TSTZ_n := sys.diutil.bool_to_int(DT_END_PAT_MED_TSTZ_nin);
      l_EMB_ID_n := sys.diutil.bool_to_int(EMB_ID_nin);
      l_ID_PROD_MED_n := sys.diutil.bool_to_int(ID_PROD_MED_nin);
      l_PROD_MED_DECR_n := sys.diutil.bool_to_int(PROD_MED_DECR_nin);
      l_ID_DRUG_REQ_DET_n := sys.diutil.bool_to_int(ID_DRUG_REQ_DET_nin);
      l_ID_DRUG_PRESC_DET_n := sys.diutil.bool_to_int(ID_DRUG_PRESC_DET_nin);
      l_QUANTITY_n := sys.diutil.bool_to_int(QUANTITY_nin);
      l_ID_EPIS_DOCUMENTATION_n := sys.diutil.bool_to_int(ID_EPIS_DOCUMENTATION_nin);
      l_MED_ID_TYPE_n := sys.diutil.bool_to_int(MED_ID_TYPE_nin);
      l_CONTINUE_n := sys.diutil.bool_to_int(CONTINUE_nin);
      l_VERS_n := sys.diutil.bool_to_int(VERS_nin);
      l_ID_DRUG_n := sys.diutil.bool_to_int(ID_DRUG_nin);
      l_MED_ID_n := sys.diutil.bool_to_int(MED_ID_nin);
      l_DOSAGE_n := sys.diutil.bool_to_int(DOSAGE_nin);
      l_FLG_NO_MED_n := sys.diutil.bool_to_int(FLG_NO_MED_nin);
      l_NOTES_ADVERS_REACT_n := sys.diutil.bool_to_int(NOTES_ADVERS_REACT_nin);
      l_NOTES_MED_DESTINATION_n := sys.diutil.bool_to_int(NOTES_MED_DESTINATION_nin);
      l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
      l_CANCEL_REASON_n := sys.diutil.bool_to_int(CANCEL_REASON_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
      l_FLG_TAKE_TYPE_n := sys.diutil.bool_to_int(FLG_TAKE_TYPE_nin);



l_sql := 'UPDATE PAT_MEDICATION_HIST_LIST SET '
     || ' ID_PAT_MEDICATION_LIST = decode (' || l_ID_PAT_MEDICATION_LIST_n || ',0,:id_pat_medication_list_in, NVL (:id_pat_medication_list_in, ID_PAT_MEDICATION_LIST)) '|| ','
     || ' ID_EPISODE = decode (' || l_ID_EPISODE_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) '|| ','
     || ' ID_PATIENT = decode (' || l_ID_PATIENT_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) '|| ','
     || ' ID_INSTITUTION = decode (' || l_ID_INSTITUTION_n || ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) '|| ','
     || ' ID_SOFTWARE = decode (' || l_ID_SOFTWARE_n || ',0,:id_software_in, NVL (:id_software_in, ID_SOFTWARE)) '|| ','
     || ' YEAR_BEGIN = decode (' || l_YEAR_BEGIN_n || ',0,:year_begin_in, NVL (:year_begin_in, YEAR_BEGIN)) '|| ','
     || ' MONTH_BEGIN = decode (' || l_MONTH_BEGIN_n || ',0,:month_begin_in, NVL (:month_begin_in, MONTH_BEGIN)) '|| ','
     || ' DAY_BEGIN = decode (' || l_DAY_BEGIN_n || ',0,:day_begin_in, NVL (:day_begin_in, DAY_BEGIN)) '|| ','
     || ' QTY = decode (' || l_QTY_n || ',0,:qty_in, NVL (:qty_in, QTY)) '|| ','
     || ' FREQUENCY = decode (' || l_FREQUENCY_n || ',0,:frequency_in, NVL (:frequency_in, FREQUENCY)) '|| ','
     || ' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) '|| ','
     || ' ID_PROFESSIONAL = decode (' || l_ID_PROFESSIONAL_n || ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) '|| ','
     || ' NOTES = decode (' || l_NOTES_n || ',0,:notes_in, NVL (:notes_in, NOTES)) '|| ','
     || ' FLG_PRESC = decode (' || l_FLG_PRESC_n || ',0,:flg_presc_in, NVL (:flg_presc_in, FLG_PRESC)) '|| ','
     || ' ID_PRESCRIPTION_PHARM = decode (' || l_ID_PRESCRIPTION_PHARM_n || ',0,:id_prescription_pharm_in, NVL (:id_prescription_pharm_in, ID_PRESCRIPTION_PHARM)) '|| ','
     || ' DT_PAT_MED_LIST_TSTZ = decode (' || l_DT_PAT_MED_LIST_TSTZ_n || ',0,:dt_pat_medication_list_tstz_in, NVL (:dt_pat_medication_list_tstz_in, DT_PAT_MEDICATION_LIST_TSTZ)) '|| ','
     || ' ID_UNIT_MEASURE_QTY = decode (' || l_ID_UNIT_MEASURE_QTY_n || ',0,:id_unit_measure_qty_in, NVL (:id_unit_measure_qty_in, ID_UNIT_MEASURE_QTY)) '|| ','
     || ' ID_UNIT_MEASURE_FREQ = decode (' || l_ID_UNIT_MEASURE_FREQ_n || ',0,:id_unit_measure_freq_in, NVL (:id_unit_measure_freq_in, ID_UNIT_MEASURE_FREQ)) '|| ','
     || ' FREQ = decode (' || l_FREQ_n || ',0,:freq_in, NVL (:freq_in, FREQ)) '|| ','
     || ' DURATION = decode (' || l_DURATION_n || ',0,:duration_in, NVL (:duration_in, DURATION)) '|| ','
     || ' ID_UNIT_MEASURE_DUR = decode (' || l_ID_UNIT_MEASURE_DUR_n || ',0,:id_unit_measure_dur_in, NVL (:id_unit_measure_dur_in, ID_UNIT_MEASURE_DUR)) '|| ','
     || ' DT_START_PAT_MED_TSTZ = decode (' || l_DT_START_PAT_MED_TSTZ_n || ',0,:dt_start_pat_med_tstz_in, NVL (:dt_start_pat_med_tstz_in, DT_START_PAT_MED_TSTZ)) '|| ','
     || ' DT_END_PAT_MED_TSTZ = decode (' || l_DT_END_PAT_MED_TSTZ_n || ',0,:dt_end_pat_med_tstz_in, NVL (:dt_end_pat_med_tstz_in, DT_END_PAT_MED_TSTZ)) '|| ','
     || ' EMB_ID = decode (' || l_EMB_ID_n || ',0,:emb_id_in, NVL (:emb_id_in, EMB_ID)) '|| ','
     || ' ID_PROD_MED = decode (' || l_ID_PROD_MED_n || ',0,:id_prod_med_in, NVL (:id_prod_med_in, ID_PROD_MED)) '|| ','
     || ' PROD_MED_DECR = decode (' || l_PROD_MED_DECR_n || ',0,:prod_med_decr_in, NVL (:prod_med_decr_in, PROD_MED_DECR)) '|| ','
     || ' ID_DRUG_REQ_DET = decode (' || l_ID_DRUG_REQ_DET_n || ',0,:id_drug_req_det_in, NVL (:id_drug_req_det_in, ID_DRUG_REQ_DET)) '|| ','
     || ' ID_DRUG_PRESC_DET = decode (' || l_ID_DRUG_PRESC_DET_n || ',0,:id_drug_presc_det_in, NVL (:id_drug_presc_det_in, ID_DRUG_PRESC_DET)) '|| ','
     || ' QUANTITY = decode (' || l_QUANTITY_n || ',0,:quantity_in, NVL (:quantity_in, QUANTITY)) '|| ','
     || ' ID_EPIS_DOCUMENTATION = decode (' || l_ID_EPIS_DOCUMENTATION_n || ',0,:id_epis_documentation_in, NVL (:id_epis_documentation_in, ID_EPIS_DOCUMENTATION)) '|| ','
     || ' MED_ID_TYPE = decode (' || l_MED_ID_TYPE_n || ',0,:med_id_type_in, NVL (:med_id_type_in, MED_ID_TYPE)) '|| ','
     || ' CONTINUE = decode (' || l_CONTINUE_n || ',0,:continue_in, NVL (:continue_in, CONTINUE)) '|| ','
     || ' VERS = decode (' || l_VERS_n || ',0,:vers_in, NVL (:vers_in, VERS)) '|| ','
     || ' ID_DRUG = decode (' || l_ID_DRUG_n || ',0,:id_drug_in, NVL (:id_drug_in, ID_DRUG)) '|| ','
     || ' MED_ID = decode (' || l_MED_ID_n || ',0,:med_id_in, NVL (:med_id_in, MED_ID)) '|| ','
     || ' DOSAGE = decode (' || l_DOSAGE_n || ',0,:dosage_in, NVL (:dosage_in, DOSAGE)) '|| ','
     || ' FLG_NO_MED = decode (' || l_FLG_NO_MED_n || ',0,:flg_no_med_in, NVL (:flg_no_med_in, FLG_NO_MED)) '|| ','
     || ' NOTES_ADVERS_REACT = decode (' || l_NOTES_ADVERS_REACT_n || ',0,:notes_advers_react_in, NVL (:notes_advers_react_in, NOTES_ADVERS_REACT)) '|| ','
     || ' NOTES_MED_DESTINATION = decode (' || l_NOTES_MED_DESTINATION_n || ',0,:notes_med_destination_in, NVL (:notes_med_destination_in, NOTES_MED_DESTINATION)) '|| ','
     || ' ID_CANCEL_REASON = decode (' || l_ID_CANCEL_REASON_n || ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) '|| ','
     || ' CANCEL_REASON = decode (' || l_CANCEL_REASON_n || ',0,:cancel_reason_in, NVL (:cancel_reason_in, CANCEL_REASON)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '|| ','
     || ' FLG_TAKE_TYPE = decode (' || l_FLG_TAKE_TYPE_n || ',0,:flg_take_type_in, NVL (:flg_take_type_in, FLG_TAKE_TYPE)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_pat_medication_list_in,
     id_episode_in,
     id_patient_in,
     id_institution_in,
     id_software_in,
     year_begin_in,
     month_begin_in,
     day_begin_in,
     qty_in,
     frequency_in,
     flg_status_in,
     id_professional_in,
     notes_in,
     flg_presc_in,
     id_prescription_pharm_in,
     dt_pat_medication_list_tstz_in,
     id_unit_measure_qty_in,
     id_unit_measure_freq_in,
     freq_in,
     duration_in,
     id_unit_measure_dur_in,
     dt_start_pat_med_tstz_in,
     dt_end_pat_med_tstz_in,
     emb_id_in,
     id_prod_med_in,
     prod_med_decr_in,
     id_drug_req_det_in,
     id_drug_presc_det_in,
     quantity_in,
     id_epis_documentation_in,
     med_id_type_in,
     continue_in,
     vers_in,
     id_drug_in,
     med_id_in,
     dosage_in,
     flg_no_med_in,
     notes_advers_react_in,
     notes_med_destination_in,
     id_cancel_reason_in,
     cancel_reason_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
     flg_take_type_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              PK_ALERT_EXCEPTIONS.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PAT_MEDICATION_HIST_LIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           IF l_name = 'PMHL_DPD_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DRUG_PRESC_DET'
               , value_in => id_drug_presc_det_in);
           END IF;
           IF l_name = 'PMHL_DRD_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DRUG_REQ_DET'
               , value_in => id_drug_req_det_in);
           END IF;
           IF l_name = 'PMHL_EPIS_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'PMHL_ICR_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CANCEL_REASON'
               , value_in => id_cancel_reason_in);
           END IF;
           IF l_name = 'PMHL_INST_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INSTITUTION'
               , value_in => id_institution_in);
           END IF;
           IF l_name = 'PMHL_PAT_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'PMHL_PROFESSIONAL_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           IF l_name = 'PMHL_SOFTW_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SOFTWARE'
               , value_in => id_software_in);
           END IF;
           IF l_name = 'PMHL_UMD_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_UNIT_MEASURE_DUR'
               , value_in => id_unit_measure_dur_in);
           END IF;
           IF l_name = 'PMHL_UMF_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_UNIT_MEASURE_FREQ'
               , value_in => id_unit_measure_freq_in);
           END IF;
           IF l_name = 'PMHL_UMQ_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_UNIT_MEASURE_QTY'
               , value_in => id_unit_measure_qty_in);
           END IF;
           IF l_name = 'PMLH_MED_EI_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'EMB_ID'
               , value_in => emb_id_in);
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'VERS'
               , value_in => vers_in);
           END IF;
           IF l_name = 'PMLH_MED_INT_ID_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DRUG'
               , value_in => id_drug_in);
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'VERS'
               , value_in => vers_in);
           END IF;
           IF l_name = 'PMN_1_PMN_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PAT_MEDICATION_LIST'
               , value_in => id_pat_medication_list_in);
           END IF;
           IF l_name = 'PMN_1_PPN_FK'
           THEN
              -- Add a context value for each column
              PK_ALERT_EXCEPTIONS.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PRESCRIPTION_PHARM'
               , value_in => id_prescription_pharm_in);
           END IF;
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           PK_ALERT_EXCEPTIONS.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_pat_medication_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      ID_PAT_MEDICATION_LIST_nin IN BOOLEAN := TRUE,
      id_episode_in IN PAT_MEDICATION_HIST_LIST.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_patient_in IN PAT_MEDICATION_HIST_LIST.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_institution_in IN PAT_MEDICATION_HIST_LIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_software_in IN PAT_MEDICATION_HIST_LIST.ID_SOFTWARE%TYPE DEFAULT NULL,
      ID_SOFTWARE_nin IN BOOLEAN := TRUE,
      year_begin_in IN PAT_MEDICATION_HIST_LIST.YEAR_BEGIN%TYPE DEFAULT NULL,
      YEAR_BEGIN_nin IN BOOLEAN := TRUE,
      month_begin_in IN PAT_MEDICATION_HIST_LIST.MONTH_BEGIN%TYPE DEFAULT NULL,
      MONTH_BEGIN_nin IN BOOLEAN := TRUE,
      day_begin_in IN PAT_MEDICATION_HIST_LIST.DAY_BEGIN%TYPE DEFAULT NULL,
      DAY_BEGIN_nin IN BOOLEAN := TRUE,
      qty_in IN PAT_MEDICATION_HIST_LIST.QTY%TYPE DEFAULT NULL,
      QTY_nin IN BOOLEAN := TRUE,
      frequency_in IN PAT_MEDICATION_HIST_LIST.FREQUENCY%TYPE DEFAULT NULL,
      FREQUENCY_nin IN BOOLEAN := TRUE,
      flg_status_in IN PAT_MEDICATION_HIST_LIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_professional_in IN PAT_MEDICATION_HIST_LIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      notes_in IN PAT_MEDICATION_HIST_LIST.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      flg_presc_in IN PAT_MEDICATION_HIST_LIST.FLG_PRESC%TYPE DEFAULT NULL,
      FLG_PRESC_nin IN BOOLEAN := TRUE,
      id_prescription_pharm_in IN PAT_MEDICATION_HIST_LIST.ID_PRESCRIPTION_PHARM%TYPE DEFAULT NULL,
      ID_PRESCRIPTION_PHARM_nin IN BOOLEAN := TRUE,
      dt_pat_medication_list_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_PAT_MEDICATION_LIST_TSTZ%TYPE DEFAULT NULL,
      DT_PAT_MED_LIST_TSTZ_nin IN BOOLEAN := TRUE,
      id_unit_measure_qty_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_QTY%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_QTY_nin IN BOOLEAN := TRUE,
      id_unit_measure_freq_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_FREQ%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_FREQ_nin IN BOOLEAN := TRUE,
      freq_in IN PAT_MEDICATION_HIST_LIST.FREQ%TYPE DEFAULT NULL,
      FREQ_nin IN BOOLEAN := TRUE,
      duration_in IN PAT_MEDICATION_HIST_LIST.DURATION%TYPE DEFAULT NULL,
      DURATION_nin IN BOOLEAN := TRUE,
      id_unit_measure_dur_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_DUR%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_DUR_nin IN BOOLEAN := TRUE,
      dt_start_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_START_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      DT_START_PAT_MED_TSTZ_nin IN BOOLEAN := TRUE,
      dt_end_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_END_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      DT_END_PAT_MED_TSTZ_nin IN BOOLEAN := TRUE,
      emb_id_in IN PAT_MEDICATION_HIST_LIST.EMB_ID%TYPE DEFAULT NULL,
      EMB_ID_nin IN BOOLEAN := TRUE,
      id_prod_med_in IN PAT_MEDICATION_HIST_LIST.ID_PROD_MED%TYPE DEFAULT NULL,
      ID_PROD_MED_nin IN BOOLEAN := TRUE,
      prod_med_decr_in IN PAT_MEDICATION_HIST_LIST.PROD_MED_DECR%TYPE DEFAULT NULL,
      PROD_MED_DECR_nin IN BOOLEAN := TRUE,
      id_drug_req_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_REQ_DET%TYPE DEFAULT NULL,
      ID_DRUG_REQ_DET_nin IN BOOLEAN := TRUE,
      id_drug_presc_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      ID_DRUG_PRESC_DET_nin IN BOOLEAN := TRUE,
      quantity_in IN PAT_MEDICATION_HIST_LIST.QUANTITY%TYPE DEFAULT NULL,
      QUANTITY_nin IN BOOLEAN := TRUE,
      id_epis_documentation_in IN PAT_MEDICATION_HIST_LIST.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      ID_EPIS_DOCUMENTATION_nin IN BOOLEAN := TRUE,
      med_id_type_in IN PAT_MEDICATION_HIST_LIST.MED_ID_TYPE%TYPE DEFAULT NULL,
      MED_ID_TYPE_nin IN BOOLEAN := TRUE,
      continue_in IN PAT_MEDICATION_HIST_LIST.CONTINUE%TYPE DEFAULT NULL,
      CONTINUE_nin IN BOOLEAN := TRUE,
      vers_in IN PAT_MEDICATION_HIST_LIST.VERS%TYPE DEFAULT NULL,
      VERS_nin IN BOOLEAN := TRUE,
      id_drug_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG%TYPE DEFAULT NULL,
      ID_DRUG_nin IN BOOLEAN := TRUE,
      med_id_in IN PAT_MEDICATION_HIST_LIST.MED_ID%TYPE DEFAULT NULL,
      MED_ID_nin IN BOOLEAN := TRUE,
      dosage_in IN PAT_MEDICATION_HIST_LIST.DOSAGE%TYPE DEFAULT NULL,
      DOSAGE_nin IN BOOLEAN := TRUE,
      flg_no_med_in IN PAT_MEDICATION_HIST_LIST.FLG_NO_MED%TYPE DEFAULT NULL,
      FLG_NO_MED_nin IN BOOLEAN := TRUE,
      notes_advers_react_in IN PAT_MEDICATION_HIST_LIST.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      NOTES_ADVERS_REACT_nin IN BOOLEAN := TRUE,
      notes_med_destination_in IN PAT_MEDICATION_HIST_LIST.NOTES_MED_DESTINATION%TYPE DEFAULT NULL,
      NOTES_MED_DESTINATION_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN PAT_MEDICATION_HIST_LIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      cancel_reason_in IN PAT_MEDICATION_HIST_LIST.CANCEL_REASON%TYPE DEFAULT NULL,
      CANCEL_REASON_nin IN BOOLEAN := TRUE,
      create_user_in IN PAT_MEDICATION_HIST_LIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PAT_MEDICATION_HIST_LIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PAT_MEDICATION_HIST_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PAT_MEDICATION_HIST_LIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PAT_MEDICATION_HIST_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PAT_MEDICATION_HIST_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_take_type_in IN PAT_MEDICATION_HIST_LIST.FLG_TAKE_TYPE%TYPE DEFAULT NULL,
      FLG_TAKE_TYPE_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_pat_medication_list_in => id_pat_medication_list_in,
      ID_PAT_MEDICATION_LIST_nin => ID_PAT_MEDICATION_LIST_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      id_institution_in => id_institution_in,
      ID_INSTITUTION_nin => ID_INSTITUTION_nin,
      id_software_in => id_software_in,
      ID_SOFTWARE_nin => ID_SOFTWARE_nin,
      year_begin_in => year_begin_in,
      YEAR_BEGIN_nin => YEAR_BEGIN_nin,
      month_begin_in => month_begin_in,
      MONTH_BEGIN_nin => MONTH_BEGIN_nin,
      day_begin_in => day_begin_in,
      DAY_BEGIN_nin => DAY_BEGIN_nin,
      qty_in => qty_in,
      QTY_nin => QTY_nin,
      frequency_in => frequency_in,
      FREQUENCY_nin => FREQUENCY_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      id_professional_in => id_professional_in,
      ID_PROFESSIONAL_nin => ID_PROFESSIONAL_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      flg_presc_in => flg_presc_in,
      FLG_PRESC_nin => FLG_PRESC_nin,
      id_prescription_pharm_in => id_prescription_pharm_in,
      ID_PRESCRIPTION_PHARM_nin => ID_PRESCRIPTION_PHARM_nin,
      dt_pat_medication_list_tstz_in => dt_pat_medication_list_tstz_in,
      DT_PAT_MED_LIST_TSTZ_nin => DT_PAT_MED_LIST_TSTZ_nin,
      id_unit_measure_qty_in => id_unit_measure_qty_in,
      ID_UNIT_MEASURE_QTY_nin => ID_UNIT_MEASURE_QTY_nin,
      id_unit_measure_freq_in => id_unit_measure_freq_in,
      ID_UNIT_MEASURE_FREQ_nin => ID_UNIT_MEASURE_FREQ_nin,
      freq_in => freq_in,
      FREQ_nin => FREQ_nin,
      duration_in => duration_in,
      DURATION_nin => DURATION_nin,
      id_unit_measure_dur_in => id_unit_measure_dur_in,
      ID_UNIT_MEASURE_DUR_nin => ID_UNIT_MEASURE_DUR_nin,
      dt_start_pat_med_tstz_in => dt_start_pat_med_tstz_in,
      DT_START_PAT_MED_TSTZ_nin => DT_START_PAT_MED_TSTZ_nin,
      dt_end_pat_med_tstz_in => dt_end_pat_med_tstz_in,
      DT_END_PAT_MED_TSTZ_nin => DT_END_PAT_MED_TSTZ_nin,
      emb_id_in => emb_id_in,
      EMB_ID_nin => EMB_ID_nin,
      id_prod_med_in => id_prod_med_in,
      ID_PROD_MED_nin => ID_PROD_MED_nin,
      prod_med_decr_in => prod_med_decr_in,
      PROD_MED_DECR_nin => PROD_MED_DECR_nin,
      id_drug_req_det_in => id_drug_req_det_in,
      ID_DRUG_REQ_DET_nin => ID_DRUG_REQ_DET_nin,
      id_drug_presc_det_in => id_drug_presc_det_in,
      ID_DRUG_PRESC_DET_nin => ID_DRUG_PRESC_DET_nin,
      quantity_in => quantity_in,
      QUANTITY_nin => QUANTITY_nin,
      id_epis_documentation_in => id_epis_documentation_in,
      ID_EPIS_DOCUMENTATION_nin => ID_EPIS_DOCUMENTATION_nin,
      med_id_type_in => med_id_type_in,
      MED_ID_TYPE_nin => MED_ID_TYPE_nin,
      continue_in => continue_in,
      CONTINUE_nin => CONTINUE_nin,
      vers_in => vers_in,
      VERS_nin => VERS_nin,
      id_drug_in => id_drug_in,
      ID_DRUG_nin => ID_DRUG_nin,
      med_id_in => med_id_in,
      MED_ID_nin => MED_ID_nin,
      dosage_in => dosage_in,
      DOSAGE_nin => DOSAGE_nin,
      flg_no_med_in => flg_no_med_in,
      FLG_NO_MED_nin => FLG_NO_MED_nin,
      notes_advers_react_in => notes_advers_react_in,
      NOTES_ADVERS_REACT_nin => NOTES_ADVERS_REACT_nin,
      notes_med_destination_in => notes_med_destination_in,
      NOTES_MED_DESTINATION_nin => NOTES_MED_DESTINATION_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      cancel_reason_in => cancel_reason_in,
      CANCEL_REASON_nin => CANCEL_REASON_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      flg_take_type_in => flg_take_type_in,
      FLG_TAKE_TYPE_nin => FLG_TAKE_TYPE_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN PAT_MEDICATION_HIST_LIST%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_pat_medication_hist_list_in => rec_in.ID_PAT_MEDICATION_HIST_LIST,
         id_pat_medication_list_in => rec_in.ID_PAT_MEDICATION_LIST,
         id_episode_in => rec_in.ID_EPISODE,
         id_patient_in => rec_in.ID_PATIENT,
         id_institution_in => rec_in.ID_INSTITUTION,
         id_software_in => rec_in.ID_SOFTWARE,
         year_begin_in => rec_in.YEAR_BEGIN,
         month_begin_in => rec_in.MONTH_BEGIN,
         day_begin_in => rec_in.DAY_BEGIN,
         qty_in => rec_in.QTY,
         frequency_in => rec_in.FREQUENCY,
         flg_status_in => rec_in.FLG_STATUS,
         id_professional_in => rec_in.ID_PROFESSIONAL,
         notes_in => rec_in.NOTES,
         flg_presc_in => rec_in.FLG_PRESC,
         id_prescription_pharm_in => rec_in.ID_PRESCRIPTION_PHARM,
         dt_pat_medication_list_tstz_in => rec_in.DT_PAT_MEDICATION_LIST_TSTZ,
         id_unit_measure_qty_in => rec_in.ID_UNIT_MEASURE_QTY,
         id_unit_measure_freq_in => rec_in.ID_UNIT_MEASURE_FREQ,
         freq_in => rec_in.FREQ,
         duration_in => rec_in.DURATION,
         id_unit_measure_dur_in => rec_in.ID_UNIT_MEASURE_DUR,
         dt_start_pat_med_tstz_in => rec_in.DT_START_PAT_MED_TSTZ,
         dt_end_pat_med_tstz_in => rec_in.DT_END_PAT_MED_TSTZ,
         emb_id_in => rec_in.EMB_ID,
         id_prod_med_in => rec_in.ID_PROD_MED,
         prod_med_decr_in => rec_in.PROD_MED_DECR,
         id_drug_req_det_in => rec_in.ID_DRUG_REQ_DET,
         id_drug_presc_det_in => rec_in.ID_DRUG_PRESC_DET,
         quantity_in => rec_in.QUANTITY,
         id_epis_documentation_in => rec_in.ID_EPIS_DOCUMENTATION,
         med_id_type_in => rec_in.MED_ID_TYPE,
         continue_in => rec_in.CONTINUE,
         vers_in => rec_in.VERS,
         id_drug_in => rec_in.ID_DRUG,
         med_id_in => rec_in.MED_ID,
         dosage_in => rec_in.DOSAGE,
         flg_no_med_in => rec_in.FLG_NO_MED,
         notes_advers_react_in => rec_in.NOTES_ADVERS_REACT,
         notes_med_destination_in => rec_in.NOTES_MED_DESTINATION,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         cancel_reason_in => rec_in.CANCEL_REASON,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         flg_take_type_in => rec_in.FLG_TAKE_TYPE

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN PAT_MEDICATION_HIST_LIST%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_pat_medication_hist_list_in => rec_in.ID_PAT_MEDICATION_HIST_LIST,
         id_pat_medication_list_in => rec_in.ID_PAT_MEDICATION_LIST,
         id_episode_in => rec_in.ID_EPISODE,
         id_patient_in => rec_in.ID_PATIENT,
         id_institution_in => rec_in.ID_INSTITUTION,
         id_software_in => rec_in.ID_SOFTWARE,
         year_begin_in => rec_in.YEAR_BEGIN,
         month_begin_in => rec_in.MONTH_BEGIN,
         day_begin_in => rec_in.DAY_BEGIN,
         qty_in => rec_in.QTY,
         frequency_in => rec_in.FREQUENCY,
         flg_status_in => rec_in.FLG_STATUS,
         id_professional_in => rec_in.ID_PROFESSIONAL,
         notes_in => rec_in.NOTES,
         flg_presc_in => rec_in.FLG_PRESC,
         id_prescription_pharm_in => rec_in.ID_PRESCRIPTION_PHARM,
         dt_pat_medication_list_tstz_in => rec_in.DT_PAT_MEDICATION_LIST_TSTZ,
         id_unit_measure_qty_in => rec_in.ID_UNIT_MEASURE_QTY,
         id_unit_measure_freq_in => rec_in.ID_UNIT_MEASURE_FREQ,
         freq_in => rec_in.FREQ,
         duration_in => rec_in.DURATION,
         id_unit_measure_dur_in => rec_in.ID_UNIT_MEASURE_DUR,
         dt_start_pat_med_tstz_in => rec_in.DT_START_PAT_MED_TSTZ,
         dt_end_pat_med_tstz_in => rec_in.DT_END_PAT_MED_TSTZ,
         emb_id_in => rec_in.EMB_ID,
         id_prod_med_in => rec_in.ID_PROD_MED,
         prod_med_decr_in => rec_in.PROD_MED_DECR,
         id_drug_req_det_in => rec_in.ID_DRUG_REQ_DET,
         id_drug_presc_det_in => rec_in.ID_DRUG_PRESC_DET,
         quantity_in => rec_in.QUANTITY,
         id_epis_documentation_in => rec_in.ID_EPIS_DOCUMENTATION,
         med_id_type_in => rec_in.MED_ID_TYPE,
         continue_in => rec_in.CONTINUE,
         vers_in => rec_in.VERS,
         id_drug_in => rec_in.ID_DRUG,
         med_id_in => rec_in.MED_ID,
         dosage_in => rec_in.DOSAGE,
         flg_no_med_in => rec_in.FLG_NO_MED,
         notes_advers_react_in => rec_in.NOTES_ADVERS_REACT,
         notes_med_destination_in => rec_in.NOTES_MED_DESTINATION,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         cancel_reason_in => rec_in.CANCEL_REASON,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         flg_take_type_in => rec_in.FLG_TAKE_TYPE

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_pat_medication_hist_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE,
      id_pat_medication_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      id_episode_in IN PAT_MEDICATION_HIST_LIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_patient_in IN PAT_MEDICATION_HIST_LIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_institution_in IN PAT_MEDICATION_HIST_LIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN PAT_MEDICATION_HIST_LIST.ID_SOFTWARE%TYPE DEFAULT NULL,
      year_begin_in IN PAT_MEDICATION_HIST_LIST.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_MEDICATION_HIST_LIST.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_MEDICATION_HIST_LIST.DAY_BEGIN%TYPE DEFAULT NULL,
      qty_in IN PAT_MEDICATION_HIST_LIST.QTY%TYPE DEFAULT NULL,
      frequency_in IN PAT_MEDICATION_HIST_LIST.FREQUENCY%TYPE DEFAULT NULL,
      flg_status_in IN PAT_MEDICATION_HIST_LIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_professional_in IN PAT_MEDICATION_HIST_LIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN PAT_MEDICATION_HIST_LIST.NOTES%TYPE DEFAULT NULL,
      flg_presc_in IN PAT_MEDICATION_HIST_LIST.FLG_PRESC%TYPE DEFAULT NULL,
      id_prescription_pharm_in IN PAT_MEDICATION_HIST_LIST.ID_PRESCRIPTION_PHARM%TYPE DEFAULT NULL,
      dt_pat_medication_list_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_PAT_MEDICATION_LIST_TSTZ%TYPE DEFAULT NULL,
      id_unit_measure_qty_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_QTY%TYPE DEFAULT NULL,
      id_unit_measure_freq_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_FREQ%TYPE DEFAULT NULL,
      freq_in IN PAT_MEDICATION_HIST_LIST.FREQ%TYPE DEFAULT NULL,
      duration_in IN PAT_MEDICATION_HIST_LIST.DURATION%TYPE DEFAULT NULL,
      id_unit_measure_dur_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_DUR%TYPE DEFAULT NULL,
      dt_start_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_START_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      dt_end_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_END_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      emb_id_in IN PAT_MEDICATION_HIST_LIST.EMB_ID%TYPE DEFAULT NULL,
      id_prod_med_in IN PAT_MEDICATION_HIST_LIST.ID_PROD_MED%TYPE DEFAULT NULL,
      prod_med_decr_in IN PAT_MEDICATION_HIST_LIST.PROD_MED_DECR%TYPE DEFAULT NULL,
      id_drug_req_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_REQ_DET%TYPE DEFAULT NULL,
      id_drug_presc_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      quantity_in IN PAT_MEDICATION_HIST_LIST.QUANTITY%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_MEDICATION_HIST_LIST.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      med_id_type_in IN PAT_MEDICATION_HIST_LIST.MED_ID_TYPE%TYPE DEFAULT NULL,
      continue_in IN PAT_MEDICATION_HIST_LIST.CONTINUE%TYPE DEFAULT NULL,
      vers_in IN PAT_MEDICATION_HIST_LIST.VERS%TYPE DEFAULT NULL,
      id_drug_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG%TYPE DEFAULT NULL,
      med_id_in IN PAT_MEDICATION_HIST_LIST.MED_ID%TYPE DEFAULT NULL,
      dosage_in IN PAT_MEDICATION_HIST_LIST.DOSAGE%TYPE DEFAULT NULL,
      flg_no_med_in IN PAT_MEDICATION_HIST_LIST.FLG_NO_MED%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_MEDICATION_HIST_LIST.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_med_destination_in IN PAT_MEDICATION_HIST_LIST.NOTES_MED_DESTINATION%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_MEDICATION_HIST_LIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_in IN PAT_MEDICATION_HIST_LIST.CANCEL_REASON%TYPE DEFAULT NULL,
      create_user_in IN PAT_MEDICATION_HIST_LIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_MEDICATION_HIST_LIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_MEDICATION_HIST_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_MEDICATION_HIST_LIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_MEDICATION_HIST_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_MEDICATION_HIST_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_take_type_in IN PAT_MEDICATION_HIST_LIST.FLG_TAKE_TYPE%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_pat_medication_hist_list_in => id_pat_medication_hist_list_in,
         id_pat_medication_list_in => id_pat_medication_list_in,
         id_episode_in => id_episode_in,
         id_patient_in => id_patient_in,
         id_institution_in => id_institution_in,
         id_software_in => id_software_in,
         year_begin_in => year_begin_in,
         month_begin_in => month_begin_in,
         day_begin_in => day_begin_in,
         qty_in => qty_in,
         frequency_in => frequency_in,
         flg_status_in => flg_status_in,
         id_professional_in => id_professional_in,
         notes_in => notes_in,
         flg_presc_in => flg_presc_in,
         id_prescription_pharm_in => id_prescription_pharm_in,
         dt_pat_medication_list_tstz_in => dt_pat_medication_list_tstz_in,
         id_unit_measure_qty_in => id_unit_measure_qty_in,
         id_unit_measure_freq_in => id_unit_measure_freq_in,
         freq_in => freq_in,
         duration_in => duration_in,
         id_unit_measure_dur_in => id_unit_measure_dur_in,
         dt_start_pat_med_tstz_in => dt_start_pat_med_tstz_in,
         dt_end_pat_med_tstz_in => dt_end_pat_med_tstz_in,
         emb_id_in => emb_id_in,
         id_prod_med_in => id_prod_med_in,
         prod_med_decr_in => prod_med_decr_in,
         id_drug_req_det_in => id_drug_req_det_in,
         id_drug_presc_det_in => id_drug_presc_det_in,
         quantity_in => quantity_in,
         id_epis_documentation_in => id_epis_documentation_in,
         med_id_type_in => med_id_type_in,
         continue_in => continue_in,
         vers_in => vers_in,
         id_drug_in => id_drug_in,
         med_id_in => med_id_in,
         dosage_in => dosage_in,
         flg_no_med_in => flg_no_med_in,
         notes_advers_react_in => notes_advers_react_in,
         notes_med_destination_in => notes_med_destination_in,
         id_cancel_reason_in => id_cancel_reason_in,
         cancel_reason_in => cancel_reason_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_take_type_in => flg_take_type_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_pat_medication_hist_list_in => id_pat_medication_hist_list_in,
            id_pat_medication_list_in => id_pat_medication_list_in,
            id_episode_in => id_episode_in,
            id_patient_in => id_patient_in,
            id_institution_in => id_institution_in,
            id_software_in => id_software_in,
            year_begin_in => year_begin_in,
            month_begin_in => month_begin_in,
            day_begin_in => day_begin_in,
            qty_in => qty_in,
            frequency_in => frequency_in,
            flg_status_in => flg_status_in,
            id_professional_in => id_professional_in,
            notes_in => notes_in,
            flg_presc_in => flg_presc_in,
            id_prescription_pharm_in => id_prescription_pharm_in,
            dt_pat_medication_list_tstz_in => dt_pat_medication_list_tstz_in,
            id_unit_measure_qty_in => id_unit_measure_qty_in,
            id_unit_measure_freq_in => id_unit_measure_freq_in,
            freq_in => freq_in,
            duration_in => duration_in,
            id_unit_measure_dur_in => id_unit_measure_dur_in,
            dt_start_pat_med_tstz_in => dt_start_pat_med_tstz_in,
            dt_end_pat_med_tstz_in => dt_end_pat_med_tstz_in,
            emb_id_in => emb_id_in,
            id_prod_med_in => id_prod_med_in,
            prod_med_decr_in => prod_med_decr_in,
            id_drug_req_det_in => id_drug_req_det_in,
            id_drug_presc_det_in => id_drug_presc_det_in,
            quantity_in => quantity_in,
            id_epis_documentation_in => id_epis_documentation_in,
            med_id_type_in => med_id_type_in,
            continue_in => continue_in,
            vers_in => vers_in,
            id_drug_in => id_drug_in,
            med_id_in => med_id_in,
            dosage_in => dosage_in,
            flg_no_med_in => flg_no_med_in,
            notes_advers_react_in => notes_advers_react_in,
            notes_med_destination_in => notes_med_destination_in,
            id_cancel_reason_in => id_cancel_reason_in,
            cancel_reason_in => cancel_reason_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            flg_take_type_in => flg_take_type_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_pat_medication_hist_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE,
      id_pat_medication_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_LIST%TYPE DEFAULT NULL,
      id_episode_in IN PAT_MEDICATION_HIST_LIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_patient_in IN PAT_MEDICATION_HIST_LIST.ID_PATIENT%TYPE DEFAULT NULL,
      id_institution_in IN PAT_MEDICATION_HIST_LIST.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN PAT_MEDICATION_HIST_LIST.ID_SOFTWARE%TYPE DEFAULT NULL,
      year_begin_in IN PAT_MEDICATION_HIST_LIST.YEAR_BEGIN%TYPE DEFAULT NULL,
      month_begin_in IN PAT_MEDICATION_HIST_LIST.MONTH_BEGIN%TYPE DEFAULT NULL,
      day_begin_in IN PAT_MEDICATION_HIST_LIST.DAY_BEGIN%TYPE DEFAULT NULL,
      qty_in IN PAT_MEDICATION_HIST_LIST.QTY%TYPE DEFAULT NULL,
      frequency_in IN PAT_MEDICATION_HIST_LIST.FREQUENCY%TYPE DEFAULT NULL,
      flg_status_in IN PAT_MEDICATION_HIST_LIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_professional_in IN PAT_MEDICATION_HIST_LIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      notes_in IN PAT_MEDICATION_HIST_LIST.NOTES%TYPE DEFAULT NULL,
      flg_presc_in IN PAT_MEDICATION_HIST_LIST.FLG_PRESC%TYPE DEFAULT NULL,
      id_prescription_pharm_in IN PAT_MEDICATION_HIST_LIST.ID_PRESCRIPTION_PHARM%TYPE DEFAULT NULL,
      dt_pat_medication_list_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_PAT_MEDICATION_LIST_TSTZ%TYPE DEFAULT NULL,
      id_unit_measure_qty_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_QTY%TYPE DEFAULT NULL,
      id_unit_measure_freq_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_FREQ%TYPE DEFAULT NULL,
      freq_in IN PAT_MEDICATION_HIST_LIST.FREQ%TYPE DEFAULT NULL,
      duration_in IN PAT_MEDICATION_HIST_LIST.DURATION%TYPE DEFAULT NULL,
      id_unit_measure_dur_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_DUR%TYPE DEFAULT NULL,
      dt_start_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_START_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      dt_end_pat_med_tstz_in IN PAT_MEDICATION_HIST_LIST.DT_END_PAT_MED_TSTZ%TYPE DEFAULT NULL,
      emb_id_in IN PAT_MEDICATION_HIST_LIST.EMB_ID%TYPE DEFAULT NULL,
      id_prod_med_in IN PAT_MEDICATION_HIST_LIST.ID_PROD_MED%TYPE DEFAULT NULL,
      prod_med_decr_in IN PAT_MEDICATION_HIST_LIST.PROD_MED_DECR%TYPE DEFAULT NULL,
      id_drug_req_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_REQ_DET%TYPE DEFAULT NULL,
      id_drug_presc_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_PRESC_DET%TYPE DEFAULT NULL,
      quantity_in IN PAT_MEDICATION_HIST_LIST.QUANTITY%TYPE DEFAULT NULL,
      id_epis_documentation_in IN PAT_MEDICATION_HIST_LIST.ID_EPIS_DOCUMENTATION%TYPE DEFAULT NULL,
      med_id_type_in IN PAT_MEDICATION_HIST_LIST.MED_ID_TYPE%TYPE DEFAULT NULL,
      continue_in IN PAT_MEDICATION_HIST_LIST.CONTINUE%TYPE DEFAULT NULL,
      vers_in IN PAT_MEDICATION_HIST_LIST.VERS%TYPE DEFAULT NULL,
      id_drug_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG%TYPE DEFAULT NULL,
      med_id_in IN PAT_MEDICATION_HIST_LIST.MED_ID%TYPE DEFAULT NULL,
      dosage_in IN PAT_MEDICATION_HIST_LIST.DOSAGE%TYPE DEFAULT NULL,
      flg_no_med_in IN PAT_MEDICATION_HIST_LIST.FLG_NO_MED%TYPE DEFAULT NULL,
      notes_advers_react_in IN PAT_MEDICATION_HIST_LIST.NOTES_ADVERS_REACT%TYPE DEFAULT NULL,
      notes_med_destination_in IN PAT_MEDICATION_HIST_LIST.NOTES_MED_DESTINATION%TYPE DEFAULT NULL,
      id_cancel_reason_in IN PAT_MEDICATION_HIST_LIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      cancel_reason_in IN PAT_MEDICATION_HIST_LIST.CANCEL_REASON%TYPE DEFAULT NULL,
      create_user_in IN PAT_MEDICATION_HIST_LIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_MEDICATION_HIST_LIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_MEDICATION_HIST_LIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_MEDICATION_HIST_LIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_MEDICATION_HIST_LIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_MEDICATION_HIST_LIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_take_type_in IN PAT_MEDICATION_HIST_LIST.FLG_TAKE_TYPE%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_pat_medication_hist_list_in,
      id_pat_medication_list_in,
      id_episode_in,
      id_patient_in,
      id_institution_in,
      id_software_in,
      year_begin_in,
      month_begin_in,
      day_begin_in,
      qty_in,
      frequency_in,
      flg_status_in,
      id_professional_in,
      notes_in,
      flg_presc_in,
      id_prescription_pharm_in,
      dt_pat_medication_list_tstz_in,
      id_unit_measure_qty_in,
      id_unit_measure_freq_in,
      freq_in,
      duration_in,
      id_unit_measure_dur_in,
      dt_start_pat_med_tstz_in,
      dt_end_pat_med_tstz_in,
      emb_id_in,
      id_prod_med_in,
      prod_med_decr_in,
      id_drug_req_det_in,
      id_drug_presc_det_in,
      quantity_in,
      id_epis_documentation_in,
      med_id_type_in,
      continue_in,
      vers_in,
      id_drug_in,
      med_id_in,
      dosage_in,
      flg_no_med_in,
      notes_advers_react_in,
      notes_med_destination_in,
      id_cancel_reason_in,
      cancel_reason_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
      flg_take_type_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN PAT_MEDICATION_HIST_LIST_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_PAT_MEDICATION_HIST_LIST ID_PAT_MEDICATION_HIST_LIST_cc;
      l_ID_PAT_MEDICATION_LIST ID_PAT_MEDICATION_LIST_cc;
      l_ID_EPISODE ID_EPISODE_cc;
      l_ID_PATIENT ID_PATIENT_cc;
      l_ID_INSTITUTION ID_INSTITUTION_cc;
      l_ID_SOFTWARE ID_SOFTWARE_cc;
      l_YEAR_BEGIN YEAR_BEGIN_cc;
      l_MONTH_BEGIN MONTH_BEGIN_cc;
      l_DAY_BEGIN DAY_BEGIN_cc;
      l_QTY QTY_cc;
      l_FREQUENCY FREQUENCY_cc;
      l_FLG_STATUS FLG_STATUS_cc;
      l_ID_PROFESSIONAL ID_PROFESSIONAL_cc;
      l_NOTES NOTES_cc;
      l_FLG_PRESC FLG_PRESC_cc;
      l_ID_PRESCRIPTION_PHARM ID_PRESCRIPTION_PHARM_cc;
      l_DT_PAT_MEDICATION_LIST_TSTZ DT_PAT_MEDICATION_LIST_TSTZ_cc;
      l_ID_UNIT_MEASURE_QTY ID_UNIT_MEASURE_QTY_cc;
      l_ID_UNIT_MEASURE_FREQ ID_UNIT_MEASURE_FREQ_cc;
      l_FREQ FREQ_cc;
      l_DURATION DURATION_cc;
      l_ID_UNIT_MEASURE_DUR ID_UNIT_MEASURE_DUR_cc;
      l_DT_START_PAT_MED_TSTZ DT_START_PAT_MED_TSTZ_cc;
      l_DT_END_PAT_MED_TSTZ DT_END_PAT_MED_TSTZ_cc;
      l_EMB_ID EMB_ID_cc;
      l_ID_PROD_MED ID_PROD_MED_cc;
      l_PROD_MED_DECR PROD_MED_DECR_cc;
      l_ID_DRUG_REQ_DET ID_DRUG_REQ_DET_cc;
      l_ID_DRUG_PRESC_DET ID_DRUG_PRESC_DET_cc;
      l_QUANTITY QUANTITY_cc;
      l_ID_EPIS_DOCUMENTATION ID_EPIS_DOCUMENTATION_cc;
      l_MED_ID_TYPE MED_ID_TYPE_cc;
      l_CONTINUE CONTINUE_cc;
      l_VERS VERS_cc;
      l_ID_DRUG ID_DRUG_cc;
      l_MED_ID MED_ID_cc;
      l_DOSAGE DOSAGE_cc;
      l_FLG_NO_MED FLG_NO_MED_cc;
      l_NOTES_ADVERS_REACT NOTES_ADVERS_REACT_cc;
      l_NOTES_MED_DESTINATION NOTES_MED_DESTINATION_cc;
      l_ID_CANCEL_REASON ID_CANCEL_REASON_cc;
      l_CANCEL_REASON CANCEL_REASON_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
      l_FLG_TAKE_TYPE FLG_TAKE_TYPE_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_PAT_MEDICATION_HIST_LIST(i) := col_in(i).ID_PAT_MEDICATION_HIST_LIST;
         l_ID_PAT_MEDICATION_LIST(i) := col_in(i).ID_PAT_MEDICATION_LIST;
         l_ID_EPISODE(i) := col_in(i).ID_EPISODE;
         l_ID_PATIENT(i) := col_in(i).ID_PATIENT;
         l_ID_INSTITUTION(i) := col_in(i).ID_INSTITUTION;
         l_ID_SOFTWARE(i) := col_in(i).ID_SOFTWARE;
         l_YEAR_BEGIN(i) := col_in(i).YEAR_BEGIN;
         l_MONTH_BEGIN(i) := col_in(i).MONTH_BEGIN;
         l_DAY_BEGIN(i) := col_in(i).DAY_BEGIN;
         l_QTY(i) := col_in(i).QTY;
         l_FREQUENCY(i) := col_in(i).FREQUENCY;
         l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
         l_ID_PROFESSIONAL(i) := col_in(i).ID_PROFESSIONAL;
         l_NOTES(i) := col_in(i).NOTES;
         l_FLG_PRESC(i) := col_in(i).FLG_PRESC;
         l_ID_PRESCRIPTION_PHARM(i) := col_in(i).ID_PRESCRIPTION_PHARM;
         l_DT_PAT_MEDICATION_LIST_TSTZ(i) := col_in(i).DT_PAT_MEDICATION_LIST_TSTZ;
         l_ID_UNIT_MEASURE_QTY(i) := col_in(i).ID_UNIT_MEASURE_QTY;
         l_ID_UNIT_MEASURE_FREQ(i) := col_in(i).ID_UNIT_MEASURE_FREQ;
         l_FREQ(i) := col_in(i).FREQ;
         l_DURATION(i) := col_in(i).DURATION;
         l_ID_UNIT_MEASURE_DUR(i) := col_in(i).ID_UNIT_MEASURE_DUR;
         l_DT_START_PAT_MED_TSTZ(i) := col_in(i).DT_START_PAT_MED_TSTZ;
         l_DT_END_PAT_MED_TSTZ(i) := col_in(i).DT_END_PAT_MED_TSTZ;
         l_EMB_ID(i) := col_in(i).EMB_ID;
         l_ID_PROD_MED(i) := col_in(i).ID_PROD_MED;
         l_PROD_MED_DECR(i) := col_in(i).PROD_MED_DECR;
         l_ID_DRUG_REQ_DET(i) := col_in(i).ID_DRUG_REQ_DET;
         l_ID_DRUG_PRESC_DET(i) := col_in(i).ID_DRUG_PRESC_DET;
         l_QUANTITY(i) := col_in(i).QUANTITY;
         l_ID_EPIS_DOCUMENTATION(i) := col_in(i).ID_EPIS_DOCUMENTATION;
         l_MED_ID_TYPE(i) := col_in(i).MED_ID_TYPE;
         l_CONTINUE(i) := col_in(i).CONTINUE;
         l_VERS(i) := col_in(i).VERS;
         l_ID_DRUG(i) := col_in(i).ID_DRUG;
         l_MED_ID(i) := col_in(i).MED_ID;
         l_DOSAGE(i) := col_in(i).DOSAGE;
         l_FLG_NO_MED(i) := col_in(i).FLG_NO_MED;
         l_NOTES_ADVERS_REACT(i) := col_in(i).NOTES_ADVERS_REACT;
         l_NOTES_MED_DESTINATION(i) := col_in(i).NOTES_MED_DESTINATION;
         l_ID_CANCEL_REASON(i) := col_in(i).ID_CANCEL_REASON;
         l_CANCEL_REASON(i) := col_in(i).CANCEL_REASON;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
         l_FLG_TAKE_TYPE(i) := col_in(i).FLG_TAKE_TYPE;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE PAT_MEDICATION_HIST_LIST SET
               ID_PAT_MEDICATION_LIST = NVL (l_ID_PAT_MEDICATION_LIST(i), ID_PAT_MEDICATION_LIST),
               ID_EPISODE = NVL (l_ID_EPISODE(i), ID_EPISODE),
               ID_PATIENT = NVL (l_ID_PATIENT(i), ID_PATIENT),
               ID_INSTITUTION = NVL (l_ID_INSTITUTION(i), ID_INSTITUTION),
               ID_SOFTWARE = NVL (l_ID_SOFTWARE(i), ID_SOFTWARE),
               YEAR_BEGIN = NVL (l_YEAR_BEGIN(i), YEAR_BEGIN),
               MONTH_BEGIN = NVL (l_MONTH_BEGIN(i), MONTH_BEGIN),
               DAY_BEGIN = NVL (l_DAY_BEGIN(i), DAY_BEGIN),
               QTY = NVL (l_QTY(i), QTY),
               FREQUENCY = NVL (l_FREQUENCY(i), FREQUENCY),
               FLG_STATUS = NVL (l_FLG_STATUS(i), FLG_STATUS),
               ID_PROFESSIONAL = NVL (l_ID_PROFESSIONAL(i), ID_PROFESSIONAL),
               NOTES = NVL (l_NOTES(i), NOTES),
               FLG_PRESC = NVL (l_FLG_PRESC(i), FLG_PRESC),
               ID_PRESCRIPTION_PHARM = NVL (l_ID_PRESCRIPTION_PHARM(i), ID_PRESCRIPTION_PHARM),
               DT_PAT_MEDICATION_LIST_TSTZ = NVL (l_DT_PAT_MEDICATION_LIST_TSTZ(i), DT_PAT_MEDICATION_LIST_TSTZ),
               ID_UNIT_MEASURE_QTY = NVL (l_ID_UNIT_MEASURE_QTY(i), ID_UNIT_MEASURE_QTY),
               ID_UNIT_MEASURE_FREQ = NVL (l_ID_UNIT_MEASURE_FREQ(i), ID_UNIT_MEASURE_FREQ),
               FREQ = NVL (l_FREQ(i), FREQ),
               DURATION = NVL (l_DURATION(i), DURATION),
               ID_UNIT_MEASURE_DUR = NVL (l_ID_UNIT_MEASURE_DUR(i), ID_UNIT_MEASURE_DUR),
               DT_START_PAT_MED_TSTZ = NVL (l_DT_START_PAT_MED_TSTZ(i), DT_START_PAT_MED_TSTZ),
               DT_END_PAT_MED_TSTZ = NVL (l_DT_END_PAT_MED_TSTZ(i), DT_END_PAT_MED_TSTZ),
               EMB_ID = NVL (l_EMB_ID(i), EMB_ID),
               ID_PROD_MED = NVL (l_ID_PROD_MED(i), ID_PROD_MED),
               PROD_MED_DECR = NVL (l_PROD_MED_DECR(i), PROD_MED_DECR),
               ID_DRUG_REQ_DET = NVL (l_ID_DRUG_REQ_DET(i), ID_DRUG_REQ_DET),
               ID_DRUG_PRESC_DET = NVL (l_ID_DRUG_PRESC_DET(i), ID_DRUG_PRESC_DET),
               QUANTITY = NVL (l_QUANTITY(i), QUANTITY),
               ID_EPIS_DOCUMENTATION = NVL (l_ID_EPIS_DOCUMENTATION(i), ID_EPIS_DOCUMENTATION),
               MED_ID_TYPE = NVL (l_MED_ID_TYPE(i), MED_ID_TYPE),
               CONTINUE = NVL (l_CONTINUE(i), CONTINUE),
               VERS = NVL (l_VERS(i), VERS),
               ID_DRUG = NVL (l_ID_DRUG(i), ID_DRUG),
               MED_ID = NVL (l_MED_ID(i), MED_ID),
               DOSAGE = NVL (l_DOSAGE(i), DOSAGE),
               FLG_NO_MED = NVL (l_FLG_NO_MED(i), FLG_NO_MED),
               NOTES_ADVERS_REACT = NVL (l_NOTES_ADVERS_REACT(i), NOTES_ADVERS_REACT),
               NOTES_MED_DESTINATION = NVL (l_NOTES_MED_DESTINATION(i), NOTES_MED_DESTINATION),
               ID_CANCEL_REASON = NVL (l_ID_CANCEL_REASON(i), ID_CANCEL_REASON),
               CANCEL_REASON = NVL (l_CANCEL_REASON(i), CANCEL_REASON),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
               FLG_TAKE_TYPE = NVL (l_FLG_TAKE_TYPE(i), FLG_TAKE_TYPE)
             WHERE
                ID_PAT_MEDICATION_HIST_LIST = l_ID_PAT_MEDICATION_HIST_LIST(i)
         ;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE PAT_MEDICATION_HIST_LIST SET
               ID_PAT_MEDICATION_LIST = l_ID_PAT_MEDICATION_LIST(i),
               ID_EPISODE = l_ID_EPISODE(i),
               ID_PATIENT = l_ID_PATIENT(i),
               ID_INSTITUTION = l_ID_INSTITUTION(i),
               ID_SOFTWARE = l_ID_SOFTWARE(i),
               YEAR_BEGIN = l_YEAR_BEGIN(i),
               MONTH_BEGIN = l_MONTH_BEGIN(i),
               DAY_BEGIN = l_DAY_BEGIN(i),
               QTY = l_QTY(i),
               FREQUENCY = l_FREQUENCY(i),
               FLG_STATUS = l_FLG_STATUS(i),
               ID_PROFESSIONAL = l_ID_PROFESSIONAL(i),
               NOTES = l_NOTES(i),
               FLG_PRESC = l_FLG_PRESC(i),
               ID_PRESCRIPTION_PHARM = l_ID_PRESCRIPTION_PHARM(i),
               DT_PAT_MEDICATION_LIST_TSTZ = l_DT_PAT_MEDICATION_LIST_TSTZ(i),
               ID_UNIT_MEASURE_QTY = l_ID_UNIT_MEASURE_QTY(i),
               ID_UNIT_MEASURE_FREQ = l_ID_UNIT_MEASURE_FREQ(i),
               FREQ = l_FREQ(i),
               DURATION = l_DURATION(i),
               ID_UNIT_MEASURE_DUR = l_ID_UNIT_MEASURE_DUR(i),
               DT_START_PAT_MED_TSTZ = l_DT_START_PAT_MED_TSTZ(i),
               DT_END_PAT_MED_TSTZ = l_DT_END_PAT_MED_TSTZ(i),
               EMB_ID = l_EMB_ID(i),
               ID_PROD_MED = l_ID_PROD_MED(i),
               PROD_MED_DECR = l_PROD_MED_DECR(i),
               ID_DRUG_REQ_DET = l_ID_DRUG_REQ_DET(i),
               ID_DRUG_PRESC_DET = l_ID_DRUG_PRESC_DET(i),
               QUANTITY = l_QUANTITY(i),
               ID_EPIS_DOCUMENTATION = l_ID_EPIS_DOCUMENTATION(i),
               MED_ID_TYPE = l_MED_ID_TYPE(i),
               CONTINUE = l_CONTINUE(i),
               VERS = l_VERS(i),
               ID_DRUG = l_ID_DRUG(i),
               MED_ID = l_MED_ID(i),
               DOSAGE = l_DOSAGE(i),
               FLG_NO_MED = l_FLG_NO_MED(i),
               NOTES_ADVERS_REACT = l_NOTES_ADVERS_REACT(i),
               NOTES_MED_DESTINATION = l_NOTES_MED_DESTINATION(i),
               ID_CANCEL_REASON = l_ID_CANCEL_REASON(i),
               CANCEL_REASON = l_CANCEL_REASON(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
               FLG_TAKE_TYPE = l_FLG_TAKE_TYPE(i)
             WHERE
                ID_PAT_MEDICATION_HIST_LIST = l_ID_PAT_MEDICATION_HIST_LIST(i)
         ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN PAT_MEDICATION_HIST_LIST_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE PAT_MEDICATION_HIST_LIST
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE PAT_MEDICATION_HIST_LIST
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE PAT_MEDICATION_HIST_LIST set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           PK_ALERT_EXCEPTIONS.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE PAT_MEDICATION_HIST_LIST set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           PK_ALERT_EXCEPTIONS.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_pat_medication_hist_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_MEDICATION_HIST_LIST
       WHERE
          ID_PAT_MEDICATION_HIST_LIST = id_pat_medication_hist_list_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_pat_medication_hist_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_pat_medication_hist_list_in => id_pat_medication_hist_list_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_PAT_MEDICATION_HIST_LIST
   PROCEDURE del_ID_PAT_MED_HIST_LIST (
      id_pat_medication_hist_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM PAT_MEDICATION_HIST_LIST
       WHERE ID_PAT_MEDICATION_HIST_LIST = id_pat_medication_hist_list_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_PAT_MED_HIST_LIST;






   -- Delete all rows for primary key column ID_PAT_MEDICATION_HIST_LIST
   PROCEDURE del_ID_PAT_MED_HIST_LIST (
      id_pat_medication_hist_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_HIST_LIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_PAT_MED_HIST_LIST (
      id_pat_medication_hist_list_in => id_pat_medication_hist_list_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_PAT_MED_HIST_LIST;















   PROCEDURE del_PMHL_DPD_FK (
      id_drug_presc_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_PRESC_DET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_MEDICATION_HIST_LIST
       WHERE
          ID_DRUG_PRESC_DET = del_PMHL_DPD_FK.id_drug_presc_det_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMHL_DPD_FK;



PROCEDURE del_PMHL_DPD_FK (
      id_drug_presc_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_PRESC_DET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMHL_DPD_FK (
      id_drug_presc_det_in => id_drug_presc_det_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMHL_DPD_FK;





   PROCEDURE del_PMHL_DRD_FK (
      id_drug_req_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_REQ_DET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_MEDICATION_HIST_LIST
       WHERE
          ID_DRUG_REQ_DET = del_PMHL_DRD_FK.id_drug_req_det_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMHL_DRD_FK;



PROCEDURE del_PMHL_DRD_FK (
      id_drug_req_det_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG_REQ_DET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMHL_DRD_FK (
      id_drug_req_det_in => id_drug_req_det_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMHL_DRD_FK;





   PROCEDURE del_PMHL_EPIS_FK (
      id_episode_in IN PAT_MEDICATION_HIST_LIST.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_MEDICATION_HIST_LIST
       WHERE
          ID_EPISODE = del_PMHL_EPIS_FK.id_episode_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMHL_EPIS_FK;



PROCEDURE del_PMHL_EPIS_FK (
      id_episode_in IN PAT_MEDICATION_HIST_LIST.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMHL_EPIS_FK (
      id_episode_in => id_episode_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMHL_EPIS_FK;





   PROCEDURE del_PMHL_ICR_FK (
      id_cancel_reason_in IN PAT_MEDICATION_HIST_LIST.ID_CANCEL_REASON%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_MEDICATION_HIST_LIST
       WHERE
          ID_CANCEL_REASON = del_PMHL_ICR_FK.id_cancel_reason_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMHL_ICR_FK;



PROCEDURE del_PMHL_ICR_FK (
      id_cancel_reason_in IN PAT_MEDICATION_HIST_LIST.ID_CANCEL_REASON%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMHL_ICR_FK (
      id_cancel_reason_in => id_cancel_reason_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMHL_ICR_FK;





   PROCEDURE del_PMHL_INST_FK (
      id_institution_in IN PAT_MEDICATION_HIST_LIST.ID_INSTITUTION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_MEDICATION_HIST_LIST
       WHERE
          ID_INSTITUTION = del_PMHL_INST_FK.id_institution_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMHL_INST_FK;



PROCEDURE del_PMHL_INST_FK (
      id_institution_in IN PAT_MEDICATION_HIST_LIST.ID_INSTITUTION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMHL_INST_FK (
      id_institution_in => id_institution_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMHL_INST_FK;





   PROCEDURE del_PMHL_PAT_FK (
      id_patient_in IN PAT_MEDICATION_HIST_LIST.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_MEDICATION_HIST_LIST
       WHERE
          ID_PATIENT = del_PMHL_PAT_FK.id_patient_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMHL_PAT_FK;



PROCEDURE del_PMHL_PAT_FK (
      id_patient_in IN PAT_MEDICATION_HIST_LIST.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMHL_PAT_FK (
      id_patient_in => id_patient_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMHL_PAT_FK;





   PROCEDURE del_PMHL_PROFESSIONAL_FK (
      id_professional_in IN PAT_MEDICATION_HIST_LIST.ID_PROFESSIONAL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_MEDICATION_HIST_LIST
       WHERE
          ID_PROFESSIONAL = del_PMHL_PROFESSIONAL_FK.id_professional_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMHL_PROFESSIONAL_FK;



PROCEDURE del_PMHL_PROFESSIONAL_FK (
      id_professional_in IN PAT_MEDICATION_HIST_LIST.ID_PROFESSIONAL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMHL_PROFESSIONAL_FK (
      id_professional_in => id_professional_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMHL_PROFESSIONAL_FK;





   PROCEDURE del_PMHL_SOFTW_FK (
      id_software_in IN PAT_MEDICATION_HIST_LIST.ID_SOFTWARE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_MEDICATION_HIST_LIST
       WHERE
          ID_SOFTWARE = del_PMHL_SOFTW_FK.id_software_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMHL_SOFTW_FK;



PROCEDURE del_PMHL_SOFTW_FK (
      id_software_in IN PAT_MEDICATION_HIST_LIST.ID_SOFTWARE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMHL_SOFTW_FK (
      id_software_in => id_software_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMHL_SOFTW_FK;





   PROCEDURE del_PMHL_UMD_FK (
      id_unit_measure_dur_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_DUR%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_MEDICATION_HIST_LIST
       WHERE
          ID_UNIT_MEASURE_DUR = del_PMHL_UMD_FK.id_unit_measure_dur_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMHL_UMD_FK;



PROCEDURE del_PMHL_UMD_FK (
      id_unit_measure_dur_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_DUR%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMHL_UMD_FK (
      id_unit_measure_dur_in => id_unit_measure_dur_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMHL_UMD_FK;





   PROCEDURE del_PMHL_UMF_FK (
      id_unit_measure_freq_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_FREQ%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_MEDICATION_HIST_LIST
       WHERE
          ID_UNIT_MEASURE_FREQ = del_PMHL_UMF_FK.id_unit_measure_freq_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMHL_UMF_FK;



PROCEDURE del_PMHL_UMF_FK (
      id_unit_measure_freq_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_FREQ%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMHL_UMF_FK (
      id_unit_measure_freq_in => id_unit_measure_freq_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMHL_UMF_FK;





   PROCEDURE del_PMHL_UMQ_FK (
      id_unit_measure_qty_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_QTY%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_MEDICATION_HIST_LIST
       WHERE
          ID_UNIT_MEASURE_QTY = del_PMHL_UMQ_FK.id_unit_measure_qty_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMHL_UMQ_FK;



PROCEDURE del_PMHL_UMQ_FK (
      id_unit_measure_qty_in IN PAT_MEDICATION_HIST_LIST.ID_UNIT_MEASURE_QTY%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMHL_UMQ_FK (
      id_unit_measure_qty_in => id_unit_measure_qty_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMHL_UMQ_FK;





   PROCEDURE del_PMLH_MED_EI_FK (
      emb_id_in IN PAT_MEDICATION_HIST_LIST.EMB_ID%TYPE,
      vers_in IN PAT_MEDICATION_HIST_LIST.VERS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_MEDICATION_HIST_LIST
       WHERE
          EMB_ID = del_PMLH_MED_EI_FK.emb_id_in AND
          VERS = del_PMLH_MED_EI_FK.vers_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMLH_MED_EI_FK;



PROCEDURE del_PMLH_MED_EI_FK (
      emb_id_in IN PAT_MEDICATION_HIST_LIST.EMB_ID%TYPE,
      vers_in IN PAT_MEDICATION_HIST_LIST.VERS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMLH_MED_EI_FK (
      emb_id_in => emb_id_in,
      vers_in => vers_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMLH_MED_EI_FK;





   PROCEDURE del_PMLH_MED_INT_ID_FK (
      id_drug_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG%TYPE,
      vers_in IN PAT_MEDICATION_HIST_LIST.VERS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_MEDICATION_HIST_LIST
       WHERE
          ID_DRUG = del_PMLH_MED_INT_ID_FK.id_drug_in AND
          VERS = del_PMLH_MED_INT_ID_FK.vers_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMLH_MED_INT_ID_FK;



PROCEDURE del_PMLH_MED_INT_ID_FK (
      id_drug_in IN PAT_MEDICATION_HIST_LIST.ID_DRUG%TYPE,
      vers_in IN PAT_MEDICATION_HIST_LIST.VERS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMLH_MED_INT_ID_FK (
      id_drug_in => id_drug_in,
      vers_in => vers_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMLH_MED_INT_ID_FK;





   PROCEDURE del_PMN_1_PMN_FK (
      id_pat_medication_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_LIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_MEDICATION_HIST_LIST
       WHERE
          ID_PAT_MEDICATION_LIST = del_PMN_1_PMN_FK.id_pat_medication_list_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMN_1_PMN_FK;



PROCEDURE del_PMN_1_PMN_FK (
      id_pat_medication_list_in IN PAT_MEDICATION_HIST_LIST.ID_PAT_MEDICATION_LIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMN_1_PMN_FK (
      id_pat_medication_list_in => id_pat_medication_list_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMN_1_PMN_FK;





   PROCEDURE del_PMN_1_PPN_FK (
      id_prescription_pharm_in IN PAT_MEDICATION_HIST_LIST.ID_PRESCRIPTION_PHARM%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_MEDICATION_HIST_LIST
       WHERE
          ID_PRESCRIPTION_PHARM = del_PMN_1_PPN_FK.id_prescription_pharm_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PMN_1_PPN_FK;



PROCEDURE del_PMN_1_PPN_FK (
      id_prescription_pharm_in IN PAT_MEDICATION_HIST_LIST.ID_PRESCRIPTION_PHARM%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PMN_1_PPN_FK (
      id_prescription_pharm_in => id_prescription_pharm_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PMN_1_PPN_FK;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM PAT_MEDICATION_HIST_LIST';
      ELSE
         RETURN
            'DELETE FROM PAT_MEDICATION_HIST_LIST WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           PK_ALERT_EXCEPTIONS.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_MEDICATION_HIST_LIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           PK_ALERT_EXCEPTIONS.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_MEDICATION_HIST_LIST');
           PK_ALERT_EXCEPTIONS.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      pat_medication_hist_list_inout IN OUT PAT_MEDICATION_HIST_LIST%ROWTYPE
   )
   IS
   BEGIN
      pat_medication_hist_list_inout.ID_PAT_MEDICATION_HIST_LIST := NULL;
      pat_medication_hist_list_inout.ID_PAT_MEDICATION_LIST := NULL;
      pat_medication_hist_list_inout.ID_EPISODE := NULL;
      pat_medication_hist_list_inout.ID_PATIENT := NULL;
      pat_medication_hist_list_inout.ID_INSTITUTION := NULL;
      pat_medication_hist_list_inout.ID_SOFTWARE := NULL;
      pat_medication_hist_list_inout.YEAR_BEGIN := NULL;
      pat_medication_hist_list_inout.MONTH_BEGIN := NULL;
      pat_medication_hist_list_inout.DAY_BEGIN := NULL;
      pat_medication_hist_list_inout.QTY := NULL;
      pat_medication_hist_list_inout.FREQUENCY := NULL;
      pat_medication_hist_list_inout.FLG_STATUS := NULL;
      pat_medication_hist_list_inout.ID_PROFESSIONAL := NULL;
      pat_medication_hist_list_inout.NOTES := NULL;
      pat_medication_hist_list_inout.FLG_PRESC := NULL;
      pat_medication_hist_list_inout.ID_PRESCRIPTION_PHARM := NULL;
      pat_medication_hist_list_inout.DT_PAT_MEDICATION_LIST_TSTZ := NULL;
      pat_medication_hist_list_inout.ID_UNIT_MEASURE_QTY := NULL;
      pat_medication_hist_list_inout.ID_UNIT_MEASURE_FREQ := NULL;
      pat_medication_hist_list_inout.FREQ := NULL;
      pat_medication_hist_list_inout.DURATION := NULL;
      pat_medication_hist_list_inout.ID_UNIT_MEASURE_DUR := NULL;
      pat_medication_hist_list_inout.DT_START_PAT_MED_TSTZ := NULL;
      pat_medication_hist_list_inout.DT_END_PAT_MED_TSTZ := NULL;
      pat_medication_hist_list_inout.EMB_ID := NULL;
      pat_medication_hist_list_inout.ID_PROD_MED := NULL;
      pat_medication_hist_list_inout.PROD_MED_DECR := NULL;
      pat_medication_hist_list_inout.ID_DRUG_REQ_DET := NULL;
      pat_medication_hist_list_inout.ID_DRUG_PRESC_DET := NULL;
      pat_medication_hist_list_inout.QUANTITY := NULL;
      pat_medication_hist_list_inout.ID_EPIS_DOCUMENTATION := NULL;
      pat_medication_hist_list_inout.MED_ID_TYPE := NULL;
      pat_medication_hist_list_inout.CONTINUE := NULL;
      pat_medication_hist_list_inout.VERS := NULL;
      pat_medication_hist_list_inout.ID_DRUG := NULL;
      pat_medication_hist_list_inout.MED_ID := NULL;
      pat_medication_hist_list_inout.DOSAGE := NULL;
      pat_medication_hist_list_inout.FLG_NO_MED := NULL;
      pat_medication_hist_list_inout.NOTES_ADVERS_REACT := NULL;
      pat_medication_hist_list_inout.NOTES_MED_DESTINATION := NULL;
      pat_medication_hist_list_inout.ID_CANCEL_REASON := NULL;
      pat_medication_hist_list_inout.CANCEL_REASON := NULL;
      pat_medication_hist_list_inout.CREATE_USER := NULL;
      pat_medication_hist_list_inout.CREATE_TIME := NULL;
      pat_medication_hist_list_inout.CREATE_INSTITUTION := NULL;
      pat_medication_hist_list_inout.UPDATE_USER := NULL;
      pat_medication_hist_list_inout.UPDATE_TIME := NULL;
      pat_medication_hist_list_inout.UPDATE_INSTITUTION := NULL;
      pat_medication_hist_list_inout.FLG_TAKE_TYPE := NULL;
   END initrec;

   FUNCTION initrec RETURN PAT_MEDICATION_HIST_LIST%ROWTYPE
   IS
      l_pat_medication_hist_list PAT_MEDICATION_HIST_LIST%ROWTYPE;
   BEGIN
      RETURN l_pat_medication_hist_list;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN PAT_MEDICATION_HIST_LIST_tc
   IS
        data PAT_MEDICATION_HIST_LIST_tc;
   BEGIN
        select * bulk collect into data from PAT_MEDICATION_HIST_LIST where rowid in (select * from table(rows_in));
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        PK_ALERT_EXCEPTIONS.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN PAT_MEDICATION_HIST_LIST_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data PAT_MEDICATION_HIST_LIST_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        PK_ALERT_EXCEPTIONS.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_PAT_MEDICATION_HIST_LIST;
/
