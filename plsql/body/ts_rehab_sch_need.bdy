/*-- Last Change Revision: $Rev: 2028372 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:23 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_rehab_sch_need
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Julho 14, 2010 15:41:44
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_rehab_sch_need_in      IN rehab_sch_need.id_rehab_sch_need%TYPE,
        id_rehab_session_type_in  IN rehab_sch_need.id_rehab_session_type%TYPE DEFAULT NULL,
        dt_rehab_sch_need_in      IN rehab_sch_need.dt_rehab_sch_need%TYPE DEFAULT NULL,
        id_episode_origin_in      IN rehab_sch_need.id_episode_origin%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_sch_need.id_professional%TYPE DEFAULT NULL,
        sessions_in               IN rehab_sch_need.sessions%TYPE DEFAULT NULL,
        frequency_in              IN rehab_sch_need.frequency%TYPE DEFAULT NULL,
        flg_frequency_in          IN rehab_sch_need.flg_frequency%TYPE DEFAULT NULL,
        flg_priority_in           IN rehab_sch_need.flg_priority%TYPE DEFAULT NULL,
        dt_begin_in               IN rehab_sch_need.dt_begin%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_sch_need.flg_status%TYPE DEFAULT NULL,
        id_resp_professional_in   IN rehab_sch_need.id_resp_professional%TYPE DEFAULT NULL,
        id_resp_rehab_group_in    IN rehab_sch_need.id_resp_rehab_group%TYPE DEFAULT NULL,
        notes_in                  IN rehab_sch_need.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_sch_need.id_cancel_reason%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_sch_need.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_sch_need.id_cancel_professional%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_sch_need.notes_cancel%TYPE DEFAULT NULL,
        create_user_in            IN rehab_sch_need.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_sch_need.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_sch_need.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_sch_need.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_sch_need.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_sch_need.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO rehab_sch_need
            (id_rehab_sch_need,
             id_rehab_session_type,
             dt_rehab_sch_need,
             id_episode_origin,
             id_professional,
             sessions,
             frequency,
             flg_frequency,
             flg_priority,
             dt_begin,
             flg_status,
             id_resp_professional,
             id_resp_rehab_group,
             notes,
             id_cancel_reason,
             dt_cancel,
             id_cancel_professional,
             notes_cancel,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_rehab_sch_need_in,
             id_rehab_session_type_in,
             dt_rehab_sch_need_in,
             id_episode_origin_in,
             id_professional_in,
             sessions_in,
             frequency_in,
             flg_frequency_in,
             flg_priority_in,
             dt_begin_in,
             flg_status_in,
             id_resp_professional_in,
             id_resp_rehab_group_in,
             notes_in,
             id_cancel_reason_in,
             dt_cancel_in,
             id_cancel_professional_in,
             notes_cancel_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'REHAB_SCH_NEED');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    IF l_name = 'RSD_PL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RESP_PROFESSIONAL',
                                                        value_in           => id_resp_professional_in);
                    END IF;
                    IF l_name = 'RSD_PL_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_PROFESSIONAL',
                                                        value_in           => id_cancel_professional_in);
                    END IF;
                    IF l_name = 'RSD_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'RSD_RGP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RESP_REHAB_GROUP',
                                                        value_in           => id_resp_rehab_group_in);
                    END IF;
                    IF l_name = 'RSD_RPN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN',
                                                        value_in           => id_episode_origin_in);
                    END IF;
                    IF l_name = 'RSD_RSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_REHAB_SESSION_TYPE',
                                                        value_in           => id_rehab_session_type_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_rehab_sch_need_in      IN rehab_sch_need.id_rehab_sch_need%TYPE,
        id_rehab_session_type_in  IN rehab_sch_need.id_rehab_session_type%TYPE DEFAULT NULL,
        dt_rehab_sch_need_in      IN rehab_sch_need.dt_rehab_sch_need%TYPE DEFAULT NULL,
        id_episode_origin_in      IN rehab_sch_need.id_episode_origin%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_sch_need.id_professional%TYPE DEFAULT NULL,
        sessions_in               IN rehab_sch_need.sessions%TYPE DEFAULT NULL,
        frequency_in              IN rehab_sch_need.frequency%TYPE DEFAULT NULL,
        flg_frequency_in          IN rehab_sch_need.flg_frequency%TYPE DEFAULT NULL,
        flg_priority_in           IN rehab_sch_need.flg_priority%TYPE DEFAULT NULL,
        dt_begin_in               IN rehab_sch_need.dt_begin%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_sch_need.flg_status%TYPE DEFAULT NULL,
        id_resp_professional_in   IN rehab_sch_need.id_resp_professional%TYPE DEFAULT NULL,
        id_resp_rehab_group_in    IN rehab_sch_need.id_resp_rehab_group%TYPE DEFAULT NULL,
        notes_in                  IN rehab_sch_need.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_sch_need.id_cancel_reason%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_sch_need.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_sch_need.id_cancel_professional%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_sch_need.notes_cancel%TYPE DEFAULT NULL,
        create_user_in            IN rehab_sch_need.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_sch_need.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_sch_need.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_sch_need.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_sch_need.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_sch_need.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_rehab_sch_need_in      => id_rehab_sch_need_in,
            id_rehab_session_type_in  => id_rehab_session_type_in,
            dt_rehab_sch_need_in      => dt_rehab_sch_need_in,
            id_episode_origin_in      => id_episode_origin_in,
            id_professional_in        => id_professional_in,
            sessions_in               => sessions_in,
            frequency_in              => frequency_in,
            flg_frequency_in          => flg_frequency_in,
            flg_priority_in           => flg_priority_in,
            dt_begin_in               => dt_begin_in,
            flg_status_in             => flg_status_in,
            id_resp_professional_in   => id_resp_professional_in,
            id_resp_rehab_group_in    => id_resp_rehab_group_in,
            notes_in                  => notes_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            dt_cancel_in              => dt_cancel_in,
            id_cancel_professional_in => id_cancel_professional_in,
            notes_cancel_in           => notes_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN rehab_sch_need%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec rehab_sch_need%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_rehab_sch_need := next_key(sequence_in);
        END IF;
        ins(id_rehab_sch_need_in      => l_rec.id_rehab_sch_need,
            id_rehab_session_type_in  => l_rec.id_rehab_session_type,
            dt_rehab_sch_need_in      => l_rec.dt_rehab_sch_need,
            id_episode_origin_in      => l_rec.id_episode_origin,
            id_professional_in        => l_rec.id_professional,
            sessions_in               => l_rec.sessions,
            frequency_in              => l_rec.frequency,
            flg_frequency_in          => l_rec.flg_frequency,
            flg_priority_in           => l_rec.flg_priority,
            dt_begin_in               => l_rec.dt_begin,
            flg_status_in             => l_rec.flg_status,
            id_resp_professional_in   => l_rec.id_resp_professional,
            id_resp_rehab_group_in    => l_rec.id_resp_rehab_group,
            notes_in                  => l_rec.notes,
            id_cancel_reason_in       => l_rec.id_cancel_reason,
            dt_cancel_in              => l_rec.dt_cancel,
            id_cancel_professional_in => l_rec.id_cancel_professional,
            notes_cancel_in           => l_rec.notes_cancel,
            create_user_in            => l_rec.create_user,
            create_time_in            => l_rec.create_time,
            create_institution_in     => l_rec.create_institution,
            update_user_in            => l_rec.update_user,
            update_time_in            => l_rec.update_time,
            update_institution_in     => l_rec.update_institution,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN rehab_sch_need%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN rehab_sch_need.id_rehab_sch_need%TYPE
    
     IS
        retval rehab_sch_need.id_rehab_sch_need%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_rehab_sch_need.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_REHAB_SCH_NEED'));
    END next_key;

    PROCEDURE ins
    (
        id_rehab_session_type_in  IN rehab_sch_need.id_rehab_session_type%TYPE DEFAULT NULL,
        dt_rehab_sch_need_in      IN rehab_sch_need.dt_rehab_sch_need%TYPE DEFAULT NULL,
        id_episode_origin_in      IN rehab_sch_need.id_episode_origin%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_sch_need.id_professional%TYPE DEFAULT NULL,
        sessions_in               IN rehab_sch_need.sessions%TYPE DEFAULT NULL,
        frequency_in              IN rehab_sch_need.frequency%TYPE DEFAULT NULL,
        flg_frequency_in          IN rehab_sch_need.flg_frequency%TYPE DEFAULT NULL,
        flg_priority_in           IN rehab_sch_need.flg_priority%TYPE DEFAULT NULL,
        dt_begin_in               IN rehab_sch_need.dt_begin%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_sch_need.flg_status%TYPE DEFAULT NULL,
        id_resp_professional_in   IN rehab_sch_need.id_resp_professional%TYPE DEFAULT NULL,
        id_resp_rehab_group_in    IN rehab_sch_need.id_resp_rehab_group%TYPE DEFAULT NULL,
        notes_in                  IN rehab_sch_need.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_sch_need.id_cancel_reason%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_sch_need.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_sch_need.id_cancel_professional%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_sch_need.notes_cancel%TYPE DEFAULT NULL,
        create_user_in            IN rehab_sch_need.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_sch_need.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_sch_need.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_sch_need.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_sch_need.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_sch_need.update_institution%TYPE DEFAULT NULL,
        id_rehab_sch_need_out     IN OUT rehab_sch_need.id_rehab_sch_need%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
        l_pky rehab_sch_need.id_rehab_sch_need%TYPE := next_key;
    BEGIN
        ins(id_rehab_sch_need_in      => l_pky,
            id_rehab_session_type_in  => id_rehab_session_type_in,
            dt_rehab_sch_need_in      => dt_rehab_sch_need_in,
            id_episode_origin_in      => id_episode_origin_in,
            id_professional_in        => id_professional_in,
            sessions_in               => sessions_in,
            frequency_in              => frequency_in,
            flg_frequency_in          => flg_frequency_in,
            flg_priority_in           => flg_priority_in,
            dt_begin_in               => dt_begin_in,
            flg_status_in             => flg_status_in,
            id_resp_professional_in   => id_resp_professional_in,
            id_resp_rehab_group_in    => id_resp_rehab_group_in,
            notes_in                  => notes_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            dt_cancel_in              => dt_cancel_in,
            id_cancel_professional_in => id_cancel_professional_in,
            notes_cancel_in           => notes_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        id_rehab_sch_need_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_rehab_session_type_in  IN rehab_sch_need.id_rehab_session_type%TYPE DEFAULT NULL,
        dt_rehab_sch_need_in      IN rehab_sch_need.dt_rehab_sch_need%TYPE DEFAULT NULL,
        id_episode_origin_in      IN rehab_sch_need.id_episode_origin%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_sch_need.id_professional%TYPE DEFAULT NULL,
        sessions_in               IN rehab_sch_need.sessions%TYPE DEFAULT NULL,
        frequency_in              IN rehab_sch_need.frequency%TYPE DEFAULT NULL,
        flg_frequency_in          IN rehab_sch_need.flg_frequency%TYPE DEFAULT NULL,
        flg_priority_in           IN rehab_sch_need.flg_priority%TYPE DEFAULT NULL,
        dt_begin_in               IN rehab_sch_need.dt_begin%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_sch_need.flg_status%TYPE DEFAULT NULL,
        id_resp_professional_in   IN rehab_sch_need.id_resp_professional%TYPE DEFAULT NULL,
        id_resp_rehab_group_in    IN rehab_sch_need.id_resp_rehab_group%TYPE DEFAULT NULL,
        notes_in                  IN rehab_sch_need.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_sch_need.id_cancel_reason%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_sch_need.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_sch_need.id_cancel_professional%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_sch_need.notes_cancel%TYPE DEFAULT NULL,
        create_user_in            IN rehab_sch_need.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_sch_need.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_sch_need.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_sch_need.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_sch_need.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_sch_need.update_institution%TYPE DEFAULT NULL,
        id_rehab_sch_need_out     IN OUT rehab_sch_need.id_rehab_sch_need%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_rehab_session_type_in  => id_rehab_session_type_in,
            dt_rehab_sch_need_in      => dt_rehab_sch_need_in,
            id_episode_origin_in      => id_episode_origin_in,
            id_professional_in        => id_professional_in,
            sessions_in               => sessions_in,
            frequency_in              => frequency_in,
            flg_frequency_in          => flg_frequency_in,
            flg_priority_in           => flg_priority_in,
            dt_begin_in               => dt_begin_in,
            flg_status_in             => flg_status_in,
            id_resp_professional_in   => id_resp_professional_in,
            id_resp_rehab_group_in    => id_resp_rehab_group_in,
            notes_in                  => notes_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            dt_cancel_in              => dt_cancel_in,
            id_cancel_professional_in => id_cancel_professional_in,
            notes_cancel_in           => notes_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_rehab_sch_need_out     => id_rehab_sch_need_out,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    FUNCTION ins
    (
        id_rehab_session_type_in  IN rehab_sch_need.id_rehab_session_type%TYPE DEFAULT NULL,
        dt_rehab_sch_need_in      IN rehab_sch_need.dt_rehab_sch_need%TYPE DEFAULT NULL,
        id_episode_origin_in      IN rehab_sch_need.id_episode_origin%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_sch_need.id_professional%TYPE DEFAULT NULL,
        sessions_in               IN rehab_sch_need.sessions%TYPE DEFAULT NULL,
        frequency_in              IN rehab_sch_need.frequency%TYPE DEFAULT NULL,
        flg_frequency_in          IN rehab_sch_need.flg_frequency%TYPE DEFAULT NULL,
        flg_priority_in           IN rehab_sch_need.flg_priority%TYPE DEFAULT NULL,
        dt_begin_in               IN rehab_sch_need.dt_begin%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_sch_need.flg_status%TYPE DEFAULT NULL,
        id_resp_professional_in   IN rehab_sch_need.id_resp_professional%TYPE DEFAULT NULL,
        id_resp_rehab_group_in    IN rehab_sch_need.id_resp_rehab_group%TYPE DEFAULT NULL,
        notes_in                  IN rehab_sch_need.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_sch_need.id_cancel_reason%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_sch_need.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_sch_need.id_cancel_professional%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_sch_need.notes_cancel%TYPE DEFAULT NULL,
        create_user_in            IN rehab_sch_need.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_sch_need.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_sch_need.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_sch_need.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_sch_need.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_sch_need.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) RETURN rehab_sch_need.id_rehab_sch_need%TYPE IS
        l_pky rehab_sch_need.id_rehab_sch_need%TYPE := next_key;
    BEGIN
        ins(id_rehab_sch_need_in      => l_pky,
            id_rehab_session_type_in  => id_rehab_session_type_in,
            dt_rehab_sch_need_in      => dt_rehab_sch_need_in,
            id_episode_origin_in      => id_episode_origin_in,
            id_professional_in        => id_professional_in,
            sessions_in               => sessions_in,
            frequency_in              => frequency_in,
            flg_frequency_in          => flg_frequency_in,
            flg_priority_in           => flg_priority_in,
            dt_begin_in               => dt_begin_in,
            flg_status_in             => flg_status_in,
            id_resp_professional_in   => id_resp_professional_in,
            id_resp_rehab_group_in    => id_resp_rehab_group_in,
            notes_in                  => notes_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            dt_cancel_in              => dt_cancel_in,
            id_cancel_professional_in => id_cancel_professional_in,
            notes_cancel_in           => notes_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_rehab_session_type_in  IN rehab_sch_need.id_rehab_session_type%TYPE DEFAULT NULL,
        dt_rehab_sch_need_in      IN rehab_sch_need.dt_rehab_sch_need%TYPE DEFAULT NULL,
        id_episode_origin_in      IN rehab_sch_need.id_episode_origin%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_sch_need.id_professional%TYPE DEFAULT NULL,
        sessions_in               IN rehab_sch_need.sessions%TYPE DEFAULT NULL,
        frequency_in              IN rehab_sch_need.frequency%TYPE DEFAULT NULL,
        flg_frequency_in          IN rehab_sch_need.flg_frequency%TYPE DEFAULT NULL,
        flg_priority_in           IN rehab_sch_need.flg_priority%TYPE DEFAULT NULL,
        dt_begin_in               IN rehab_sch_need.dt_begin%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_sch_need.flg_status%TYPE DEFAULT NULL,
        id_resp_professional_in   IN rehab_sch_need.id_resp_professional%TYPE DEFAULT NULL,
        id_resp_rehab_group_in    IN rehab_sch_need.id_resp_rehab_group%TYPE DEFAULT NULL,
        notes_in                  IN rehab_sch_need.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_sch_need.id_cancel_reason%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_sch_need.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_sch_need.id_cancel_professional%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_sch_need.notes_cancel%TYPE DEFAULT NULL,
        create_user_in            IN rehab_sch_need.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_sch_need.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_sch_need.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_sch_need.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_sch_need.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_sch_need.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) RETURN rehab_sch_need.id_rehab_sch_need%TYPE IS
        l_pky    rehab_sch_need.id_rehab_sch_need%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_rehab_sch_need_in      => l_pky,
            id_rehab_session_type_in  => id_rehab_session_type_in,
            dt_rehab_sch_need_in      => dt_rehab_sch_need_in,
            id_episode_origin_in      => id_episode_origin_in,
            id_professional_in        => id_professional_in,
            sessions_in               => sessions_in,
            frequency_in              => frequency_in,
            flg_frequency_in          => flg_frequency_in,
            flg_priority_in           => flg_priority_in,
            dt_begin_in               => dt_begin_in,
            flg_status_in             => flg_status_in,
            id_resp_professional_in   => id_resp_professional_in,
            id_resp_rehab_group_in    => id_resp_rehab_group_in,
            notes_in                  => notes_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            dt_cancel_in              => dt_cancel_in,
            id_cancel_professional_in => id_cancel_professional_in,
            notes_cancel_in           => notes_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_rehab_session_type_in  IN rehab_sch_need.id_rehab_session_type%TYPE DEFAULT NULL,
        dt_rehab_sch_need_in      IN rehab_sch_need.dt_rehab_sch_need%TYPE DEFAULT NULL,
        id_episode_origin_in      IN rehab_sch_need.id_episode_origin%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_sch_need.id_professional%TYPE DEFAULT NULL,
        sessions_in               IN rehab_sch_need.sessions%TYPE DEFAULT NULL,
        frequency_in              IN rehab_sch_need.frequency%TYPE DEFAULT NULL,
        flg_frequency_in          IN rehab_sch_need.flg_frequency%TYPE DEFAULT NULL,
        flg_priority_in           IN rehab_sch_need.flg_priority%TYPE DEFAULT NULL,
        dt_begin_in               IN rehab_sch_need.dt_begin%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_sch_need.flg_status%TYPE DEFAULT NULL,
        id_resp_professional_in   IN rehab_sch_need.id_resp_professional%TYPE DEFAULT NULL,
        id_resp_rehab_group_in    IN rehab_sch_need.id_resp_rehab_group%TYPE DEFAULT NULL,
        notes_in                  IN rehab_sch_need.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_sch_need.id_cancel_reason%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_sch_need.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_sch_need.id_cancel_professional%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_sch_need.notes_cancel%TYPE DEFAULT NULL,
        create_user_in            IN rehab_sch_need.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_sch_need.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_sch_need.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_sch_need.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_sch_need.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_sch_need.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
        l_pky rehab_sch_need.id_rehab_sch_need%TYPE := next_key;
    BEGIN
        ins(id_rehab_sch_need_in      => l_pky,
            id_rehab_session_type_in  => id_rehab_session_type_in,
            dt_rehab_sch_need_in      => dt_rehab_sch_need_in,
            id_episode_origin_in      => id_episode_origin_in,
            id_professional_in        => id_professional_in,
            sessions_in               => sessions_in,
            frequency_in              => frequency_in,
            flg_frequency_in          => flg_frequency_in,
            flg_priority_in           => flg_priority_in,
            dt_begin_in               => dt_begin_in,
            flg_status_in             => flg_status_in,
            id_resp_professional_in   => id_resp_professional_in,
            id_resp_rehab_group_in    => id_resp_rehab_group_in,
            notes_in                  => notes_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            dt_cancel_in              => dt_cancel_in,
            id_cancel_professional_in => id_cancel_professional_in,
            notes_cancel_in           => notes_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_rehab_session_type_in  IN rehab_sch_need.id_rehab_session_type%TYPE DEFAULT NULL,
        dt_rehab_sch_need_in      IN rehab_sch_need.dt_rehab_sch_need%TYPE DEFAULT NULL,
        id_episode_origin_in      IN rehab_sch_need.id_episode_origin%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_sch_need.id_professional%TYPE DEFAULT NULL,
        sessions_in               IN rehab_sch_need.sessions%TYPE DEFAULT NULL,
        frequency_in              IN rehab_sch_need.frequency%TYPE DEFAULT NULL,
        flg_frequency_in          IN rehab_sch_need.flg_frequency%TYPE DEFAULT NULL,
        flg_priority_in           IN rehab_sch_need.flg_priority%TYPE DEFAULT NULL,
        dt_begin_in               IN rehab_sch_need.dt_begin%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_sch_need.flg_status%TYPE DEFAULT NULL,
        id_resp_professional_in   IN rehab_sch_need.id_resp_professional%TYPE DEFAULT NULL,
        id_resp_rehab_group_in    IN rehab_sch_need.id_resp_rehab_group%TYPE DEFAULT NULL,
        notes_in                  IN rehab_sch_need.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_sch_need.id_cancel_reason%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_sch_need.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_sch_need.id_cancel_professional%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_sch_need.notes_cancel%TYPE DEFAULT NULL,
        create_user_in            IN rehab_sch_need.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_sch_need.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_sch_need.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_sch_need.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_sch_need.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_sch_need.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        l_pky    rehab_sch_need.id_rehab_sch_need%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_rehab_sch_need_in      => l_pky,
            id_rehab_session_type_in  => id_rehab_session_type_in,
            dt_rehab_sch_need_in      => dt_rehab_sch_need_in,
            id_episode_origin_in      => id_episode_origin_in,
            id_professional_in        => id_professional_in,
            sessions_in               => sessions_in,
            frequency_in              => frequency_in,
            flg_frequency_in          => flg_frequency_in,
            flg_priority_in           => flg_priority_in,
            dt_begin_in               => dt_begin_in,
            flg_status_in             => flg_status_in,
            id_resp_professional_in   => id_resp_professional_in,
            id_resp_rehab_group_in    => id_resp_rehab_group_in,
            notes_in                  => notes_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            dt_cancel_in              => dt_cancel_in,
            id_cancel_professional_in => id_cancel_professional_in,
            notes_cancel_in           => notes_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN rehab_sch_need_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO rehab_sch_need
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_REHAB_SCH_NEED _' || indx,
                                                        value_in           => rows_in(indx).id_rehab_sch_need,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_REHAB_SESSION_TYPE _' || indx,
                                                        value_in           => rows_in(indx).id_rehab_session_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_REHAB_SCH_NEED _' || indx,
                                                        value_in           => rows_in(indx).dt_rehab_sch_need,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN _' || indx,
                                                        value_in           => rows_in(indx).id_episode_origin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(indx).id_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'SESSIONS _' || indx,
                                                        value_in           => rows_in(indx).sessions,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FREQUENCY _' || indx,
                                                        value_in           => rows_in(indx).frequency,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_FREQUENCY _' || indx,
                                                        value_in           => rows_in(indx).flg_frequency,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_PRIORITY _' || indx,
                                                        value_in           => rows_in(indx).flg_priority,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_BEGIN _' || indx,
                                                        value_in           => rows_in(indx).dt_begin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_RESP_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(indx).id_resp_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_RESP_REHAB_GROUP _' || indx,
                                                        value_in           => rows_in(indx).id_resp_rehab_group,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(indx).notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_REASON _' || indx,
                                                        value_in           => rows_in(indx).id_cancel_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).dt_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(indx).id_cancel_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).notes_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'REHAB_SCH_NEED',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN rehab_sch_need_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_rehab_sch_need_in       IN rehab_sch_need.id_rehab_sch_need%TYPE,
        id_rehab_session_type_in   IN rehab_sch_need.id_rehab_session_type%TYPE DEFAULT NULL,
        id_rehab_session_type_nin  IN BOOLEAN := TRUE,
        dt_rehab_sch_need_in       IN rehab_sch_need.dt_rehab_sch_need%TYPE DEFAULT NULL,
        dt_rehab_sch_need_nin      IN BOOLEAN := TRUE,
        id_episode_origin_in       IN rehab_sch_need.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin      IN BOOLEAN := TRUE,
        id_professional_in         IN rehab_sch_need.id_professional%TYPE DEFAULT NULL,
        id_professional_nin        IN BOOLEAN := TRUE,
        sessions_in                IN rehab_sch_need.sessions%TYPE DEFAULT NULL,
        sessions_nin               IN BOOLEAN := TRUE,
        frequency_in               IN rehab_sch_need.frequency%TYPE DEFAULT NULL,
        frequency_nin              IN BOOLEAN := TRUE,
        flg_frequency_in           IN rehab_sch_need.flg_frequency%TYPE DEFAULT NULL,
        flg_frequency_nin          IN BOOLEAN := TRUE,
        flg_priority_in            IN rehab_sch_need.flg_priority%TYPE DEFAULT NULL,
        flg_priority_nin           IN BOOLEAN := TRUE,
        dt_begin_in                IN rehab_sch_need.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin               IN BOOLEAN := TRUE,
        flg_status_in              IN rehab_sch_need.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_resp_professional_in    IN rehab_sch_need.id_resp_professional%TYPE DEFAULT NULL,
        id_resp_professional_nin   IN BOOLEAN := TRUE,
        id_resp_rehab_group_in     IN rehab_sch_need.id_resp_rehab_group%TYPE DEFAULT NULL,
        id_resp_rehab_group_nin    IN BOOLEAN := TRUE,
        notes_in                   IN rehab_sch_need.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN rehab_sch_need.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        dt_cancel_in               IN rehab_sch_need.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        id_cancel_professional_in  IN rehab_sch_need.id_cancel_professional%TYPE DEFAULT NULL,
        id_cancel_professional_nin IN BOOLEAN := TRUE,
        notes_cancel_in            IN rehab_sch_need.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        create_user_in             IN rehab_sch_need.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN rehab_sch_need.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN rehab_sch_need.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN rehab_sch_need.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN rehab_sch_need.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN rehab_sch_need.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_rows_out                 table_varchar;
        l_id_rehab_session_type_n  NUMBER(1);
        l_dt_rehab_sch_need_n      NUMBER(1);
        l_id_episode_origin_n      NUMBER(1);
        l_id_professional_n        NUMBER(1);
        l_sessions_n               NUMBER(1);
        l_frequency_n              NUMBER(1);
        l_flg_frequency_n          NUMBER(1);
        l_flg_priority_n           NUMBER(1);
        l_dt_begin_n               NUMBER(1);
        l_flg_status_n             NUMBER(1);
        l_id_resp_professional_n   NUMBER(1);
        l_id_resp_rehab_group_n    NUMBER(1);
        l_notes_n                  NUMBER(1);
        l_id_cancel_reason_n       NUMBER(1);
        l_dt_cancel_n              NUMBER(1);
        l_id_cancel_professional_n NUMBER(1);
        l_notes_cancel_n           NUMBER(1);
        l_create_user_n            NUMBER(1);
        l_create_time_n            NUMBER(1);
        l_create_institution_n     NUMBER(1);
        l_update_user_n            NUMBER(1);
        l_update_time_n            NUMBER(1);
        l_update_institution_n     NUMBER(1);
    BEGIN
    
        l_id_rehab_session_type_n  := sys.diutil.bool_to_int(id_rehab_session_type_nin);
        l_dt_rehab_sch_need_n      := sys.diutil.bool_to_int(dt_rehab_sch_need_nin);
        l_id_episode_origin_n      := sys.diutil.bool_to_int(id_episode_origin_nin);
        l_id_professional_n        := sys.diutil.bool_to_int(id_professional_nin);
        l_sessions_n               := sys.diutil.bool_to_int(sessions_nin);
        l_frequency_n              := sys.diutil.bool_to_int(frequency_nin);
        l_flg_frequency_n          := sys.diutil.bool_to_int(flg_frequency_nin);
        l_flg_priority_n           := sys.diutil.bool_to_int(flg_priority_nin);
        l_dt_begin_n               := sys.diutil.bool_to_int(dt_begin_nin);
        l_flg_status_n             := sys.diutil.bool_to_int(flg_status_nin);
        l_id_resp_professional_n   := sys.diutil.bool_to_int(id_resp_professional_nin);
        l_id_resp_rehab_group_n    := sys.diutil.bool_to_int(id_resp_rehab_group_nin);
        l_notes_n                  := sys.diutil.bool_to_int(notes_nin);
        l_id_cancel_reason_n       := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_dt_cancel_n              := sys.diutil.bool_to_int(dt_cancel_nin);
        l_id_cancel_professional_n := sys.diutil.bool_to_int(id_cancel_professional_nin);
        l_notes_cancel_n           := sys.diutil.bool_to_int(notes_cancel_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
    
        UPDATE rehab_sch_need
           SET id_rehab_session_type  = decode(l_id_rehab_session_type_n,
                                               0,
                                               id_rehab_session_type_in,
                                               nvl(id_rehab_session_type_in, id_rehab_session_type)),
               dt_rehab_sch_need      = decode(l_dt_rehab_sch_need_n,
                                               0,
                                               dt_rehab_sch_need_in,
                                               nvl(dt_rehab_sch_need_in, dt_rehab_sch_need)),
               id_episode_origin      = decode(l_id_episode_origin_n,
                                               0,
                                               id_episode_origin_in,
                                               nvl(id_episode_origin_in, id_episode_origin)),
               id_professional        = decode(l_id_professional_n,
                                               0,
                                               id_professional_in,
                                               nvl(id_professional_in, id_professional)),
               sessions               = decode(l_sessions_n, 0, sessions_in, nvl(sessions_in, sessions)),
               frequency              = decode(l_frequency_n, 0, frequency_in, nvl(frequency_in, frequency)),
               flg_frequency          = decode(l_flg_frequency_n,
                                               0,
                                               flg_frequency_in,
                                               nvl(flg_frequency_in, flg_frequency)),
               flg_priority           = decode(l_flg_priority_n, 0, flg_priority_in, nvl(flg_priority_in, flg_priority)),
               dt_begin               = decode(l_dt_begin_n, 0, dt_begin_in, nvl(dt_begin_in, dt_begin)),
               flg_status             = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_resp_professional   = decode(l_id_resp_professional_n,
                                               0,
                                               id_resp_professional_in,
                                               nvl(id_resp_professional_in, id_resp_professional)),
               id_resp_rehab_group    = decode(l_id_resp_rehab_group_n,
                                               0,
                                               id_resp_rehab_group_in,
                                               nvl(id_resp_rehab_group_in, id_resp_rehab_group)),
               notes                  = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               id_cancel_reason       = decode(l_id_cancel_reason_n,
                                               0,
                                               id_cancel_reason_in,
                                               nvl(id_cancel_reason_in, id_cancel_reason)),
               dt_cancel              = decode(l_dt_cancel_n, 0, dt_cancel_in, nvl(dt_cancel_in, dt_cancel)),
               id_cancel_professional = decode(l_id_cancel_professional_n,
                                               0,
                                               id_cancel_professional_in,
                                               nvl(id_cancel_professional_in, id_cancel_professional)),
               notes_cancel           = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               create_user            = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time            = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution     = decode(l_create_institution_n,
                                               0,
                                               create_institution_in,
                                               nvl(create_institution_in, create_institution)),
               update_user            = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time            = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution     = decode(l_update_institution_n,
                                               0,
                                               update_institution_in,
                                               nvl(update_institution_in, update_institution))
         WHERE id_rehab_sch_need = id_rehab_sch_need_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'REHAB_SCH_NEED');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    IF l_name = 'RSD_PL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RESP_PROFESSIONAL',
                                                        value_in           => id_resp_professional_in);
                    END IF;
                    IF l_name = 'RSD_PL_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_PROFESSIONAL',
                                                        value_in           => id_cancel_professional_in);
                    END IF;
                    IF l_name = 'RSD_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'RSD_RGP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RESP_REHAB_GROUP',
                                                        value_in           => id_resp_rehab_group_in);
                    END IF;
                    IF l_name = 'RSD_RPN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN',
                                                        value_in           => id_episode_origin_in);
                    END IF;
                    IF l_name = 'RSD_RSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_REHAB_SESSION_TYPE',
                                                        value_in           => id_rehab_session_type_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_rehab_sch_need_in       IN rehab_sch_need.id_rehab_sch_need%TYPE,
        id_rehab_session_type_in   IN rehab_sch_need.id_rehab_session_type%TYPE DEFAULT NULL,
        id_rehab_session_type_nin  IN BOOLEAN := TRUE,
        dt_rehab_sch_need_in       IN rehab_sch_need.dt_rehab_sch_need%TYPE DEFAULT NULL,
        dt_rehab_sch_need_nin      IN BOOLEAN := TRUE,
        id_episode_origin_in       IN rehab_sch_need.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin      IN BOOLEAN := TRUE,
        id_professional_in         IN rehab_sch_need.id_professional%TYPE DEFAULT NULL,
        id_professional_nin        IN BOOLEAN := TRUE,
        sessions_in                IN rehab_sch_need.sessions%TYPE DEFAULT NULL,
        sessions_nin               IN BOOLEAN := TRUE,
        frequency_in               IN rehab_sch_need.frequency%TYPE DEFAULT NULL,
        frequency_nin              IN BOOLEAN := TRUE,
        flg_frequency_in           IN rehab_sch_need.flg_frequency%TYPE DEFAULT NULL,
        flg_frequency_nin          IN BOOLEAN := TRUE,
        flg_priority_in            IN rehab_sch_need.flg_priority%TYPE DEFAULT NULL,
        flg_priority_nin           IN BOOLEAN := TRUE,
        dt_begin_in                IN rehab_sch_need.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin               IN BOOLEAN := TRUE,
        flg_status_in              IN rehab_sch_need.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_resp_professional_in    IN rehab_sch_need.id_resp_professional%TYPE DEFAULT NULL,
        id_resp_professional_nin   IN BOOLEAN := TRUE,
        id_resp_rehab_group_in     IN rehab_sch_need.id_resp_rehab_group%TYPE DEFAULT NULL,
        id_resp_rehab_group_nin    IN BOOLEAN := TRUE,
        notes_in                   IN rehab_sch_need.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN rehab_sch_need.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        dt_cancel_in               IN rehab_sch_need.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        id_cancel_professional_in  IN rehab_sch_need.id_cancel_professional%TYPE DEFAULT NULL,
        id_cancel_professional_nin IN BOOLEAN := TRUE,
        notes_cancel_in            IN rehab_sch_need.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        create_user_in             IN rehab_sch_need.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN rehab_sch_need.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN rehab_sch_need.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN rehab_sch_need.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN rehab_sch_need.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN rehab_sch_need.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_rehab_sch_need_in       => id_rehab_sch_need_in,
            id_rehab_session_type_in   => id_rehab_session_type_in,
            id_rehab_session_type_nin  => id_rehab_session_type_nin,
            dt_rehab_sch_need_in       => dt_rehab_sch_need_in,
            dt_rehab_sch_need_nin      => dt_rehab_sch_need_nin,
            id_episode_origin_in       => id_episode_origin_in,
            id_episode_origin_nin      => id_episode_origin_nin,
            id_professional_in         => id_professional_in,
            id_professional_nin        => id_professional_nin,
            sessions_in                => sessions_in,
            sessions_nin               => sessions_nin,
            frequency_in               => frequency_in,
            frequency_nin              => frequency_nin,
            flg_frequency_in           => flg_frequency_in,
            flg_frequency_nin          => flg_frequency_nin,
            flg_priority_in            => flg_priority_in,
            flg_priority_nin           => flg_priority_nin,
            dt_begin_in                => dt_begin_in,
            dt_begin_nin               => dt_begin_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            id_resp_professional_in    => id_resp_professional_in,
            id_resp_professional_nin   => id_resp_professional_nin,
            id_resp_rehab_group_in     => id_resp_rehab_group_in,
            id_resp_rehab_group_nin    => id_resp_rehab_group_nin,
            notes_in                   => notes_in,
            notes_nin                  => notes_nin,
            id_cancel_reason_in        => id_cancel_reason_in,
            id_cancel_reason_nin       => id_cancel_reason_nin,
            dt_cancel_in               => dt_cancel_in,
            dt_cancel_nin              => dt_cancel_nin,
            id_cancel_professional_in  => id_cancel_professional_in,
            id_cancel_professional_nin => id_cancel_professional_nin,
            notes_cancel_in            => notes_cancel_in,
            notes_cancel_nin           => notes_cancel_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_rehab_session_type_in   IN rehab_sch_need.id_rehab_session_type%TYPE DEFAULT NULL,
        id_rehab_session_type_nin  IN BOOLEAN := TRUE,
        dt_rehab_sch_need_in       IN rehab_sch_need.dt_rehab_sch_need%TYPE DEFAULT NULL,
        dt_rehab_sch_need_nin      IN BOOLEAN := TRUE,
        id_episode_origin_in       IN rehab_sch_need.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin      IN BOOLEAN := TRUE,
        id_professional_in         IN rehab_sch_need.id_professional%TYPE DEFAULT NULL,
        id_professional_nin        IN BOOLEAN := TRUE,
        sessions_in                IN rehab_sch_need.sessions%TYPE DEFAULT NULL,
        sessions_nin               IN BOOLEAN := TRUE,
        frequency_in               IN rehab_sch_need.frequency%TYPE DEFAULT NULL,
        frequency_nin              IN BOOLEAN := TRUE,
        flg_frequency_in           IN rehab_sch_need.flg_frequency%TYPE DEFAULT NULL,
        flg_frequency_nin          IN BOOLEAN := TRUE,
        flg_priority_in            IN rehab_sch_need.flg_priority%TYPE DEFAULT NULL,
        flg_priority_nin           IN BOOLEAN := TRUE,
        dt_begin_in                IN rehab_sch_need.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin               IN BOOLEAN := TRUE,
        flg_status_in              IN rehab_sch_need.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_resp_professional_in    IN rehab_sch_need.id_resp_professional%TYPE DEFAULT NULL,
        id_resp_professional_nin   IN BOOLEAN := TRUE,
        id_resp_rehab_group_in     IN rehab_sch_need.id_resp_rehab_group%TYPE DEFAULT NULL,
        id_resp_rehab_group_nin    IN BOOLEAN := TRUE,
        notes_in                   IN rehab_sch_need.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN rehab_sch_need.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        dt_cancel_in               IN rehab_sch_need.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        id_cancel_professional_in  IN rehab_sch_need.id_cancel_professional%TYPE DEFAULT NULL,
        id_cancel_professional_nin IN BOOLEAN := TRUE,
        notes_cancel_in            IN rehab_sch_need.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        create_user_in             IN rehab_sch_need.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN rehab_sch_need.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN rehab_sch_need.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN rehab_sch_need.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN rehab_sch_need.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN rehab_sch_need.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        where_in                   VARCHAR2 DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_sql                      VARCHAR2(32767);
        l_rows_out                 table_varchar;
        l_id_rehab_session_type_n  NUMBER(1);
        l_dt_rehab_sch_need_n      NUMBER(1);
        l_id_episode_origin_n      NUMBER(1);
        l_id_professional_n        NUMBER(1);
        l_sessions_n               NUMBER(1);
        l_frequency_n              NUMBER(1);
        l_flg_frequency_n          NUMBER(1);
        l_flg_priority_n           NUMBER(1);
        l_dt_begin_n               NUMBER(1);
        l_flg_status_n             NUMBER(1);
        l_id_resp_professional_n   NUMBER(1);
        l_id_resp_rehab_group_n    NUMBER(1);
        l_notes_n                  NUMBER(1);
        l_id_cancel_reason_n       NUMBER(1);
        l_dt_cancel_n              NUMBER(1);
        l_id_cancel_professional_n NUMBER(1);
        l_notes_cancel_n           NUMBER(1);
        l_create_user_n            NUMBER(1);
        l_create_time_n            NUMBER(1);
        l_create_institution_n     NUMBER(1);
        l_update_user_n            NUMBER(1);
        l_update_time_n            NUMBER(1);
        l_update_institution_n     NUMBER(1);
        id_rehab_sch_need_in       rehab_sch_need.id_rehab_sch_need%TYPE;
    BEGIN
    
        l_id_rehab_session_type_n  := sys.diutil.bool_to_int(id_rehab_session_type_nin);
        l_dt_rehab_sch_need_n      := sys.diutil.bool_to_int(dt_rehab_sch_need_nin);
        l_id_episode_origin_n      := sys.diutil.bool_to_int(id_episode_origin_nin);
        l_id_professional_n        := sys.diutil.bool_to_int(id_professional_nin);
        l_sessions_n               := sys.diutil.bool_to_int(sessions_nin);
        l_frequency_n              := sys.diutil.bool_to_int(frequency_nin);
        l_flg_frequency_n          := sys.diutil.bool_to_int(flg_frequency_nin);
        l_flg_priority_n           := sys.diutil.bool_to_int(flg_priority_nin);
        l_dt_begin_n               := sys.diutil.bool_to_int(dt_begin_nin);
        l_flg_status_n             := sys.diutil.bool_to_int(flg_status_nin);
        l_id_resp_professional_n   := sys.diutil.bool_to_int(id_resp_professional_nin);
        l_id_resp_rehab_group_n    := sys.diutil.bool_to_int(id_resp_rehab_group_nin);
        l_notes_n                  := sys.diutil.bool_to_int(notes_nin);
        l_id_cancel_reason_n       := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_dt_cancel_n              := sys.diutil.bool_to_int(dt_cancel_nin);
        l_id_cancel_professional_n := sys.diutil.bool_to_int(id_cancel_professional_nin);
        l_notes_cancel_n           := sys.diutil.bool_to_int(notes_cancel_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
    
        l_sql := 'UPDATE REHAB_SCH_NEED SET ' || ' ID_REHAB_SESSION_TYPE = decode (' || l_id_rehab_session_type_n ||
                 ',0,:id_rehab_session_type_in, NVL (:id_rehab_session_type_in, ID_REHAB_SESSION_TYPE)) ' || ',' ||
                 ' DT_REHAB_SCH_NEED = decode (' || l_dt_rehab_sch_need_n ||
                 ',0,:dt_rehab_sch_need_in, NVL (:dt_rehab_sch_need_in, DT_REHAB_SCH_NEED)) ' || ',' ||
                 ' ID_EPISODE_ORIGIN = decode (' || l_id_episode_origin_n ||
                 ',0,:id_episode_origin_in, NVL (:id_episode_origin_in, ID_EPISODE_ORIGIN)) ' || ',' ||
                 ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                 ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) ' || ',' ||
                 ' SESSIONS = decode (' || l_sessions_n || ',0,:sessions_in, NVL (:sessions_in, SESSIONS)) ' || ',' ||
                 ' FREQUENCY = decode (' || l_frequency_n || ',0,:frequency_in, NVL (:frequency_in, FREQUENCY)) ' || ',' ||
                 ' FLG_FREQUENCY = decode (' || l_flg_frequency_n ||
                 ',0,:flg_frequency_in, NVL (:flg_frequency_in, FLG_FREQUENCY)) ' || ',' || ' FLG_PRIORITY = decode (' ||
                 l_flg_priority_n || ',0,:flg_priority_in, NVL (:flg_priority_in, FLG_PRIORITY)) ' || ',' ||
                 ' DT_BEGIN = decode (' || l_dt_begin_n || ',0,:dt_begin_in, NVL (:dt_begin_in, DT_BEGIN)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' ID_RESP_PROFESSIONAL = decode (' || l_id_resp_professional_n ||
                 ',0,:id_resp_professional_in, NVL (:id_resp_professional_in, ID_RESP_PROFESSIONAL)) ' || ',' ||
                 ' ID_RESP_REHAB_GROUP = decode (' || l_id_resp_rehab_group_n ||
                 ',0,:id_resp_rehab_group_in, NVL (:id_resp_rehab_group_in, ID_RESP_REHAB_GROUP)) ' || ',' ||
                 ' NOTES = decode (' || l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' ||
                 ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                 ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) ' || ',' ||
                 ' DT_CANCEL = decode (' || l_dt_cancel_n || ',0,:dt_cancel_in, NVL (:dt_cancel_in, DT_CANCEL)) ' || ',' ||
                 ' ID_CANCEL_PROFESSIONAL = decode (' || l_id_cancel_professional_n ||
                 ',0,:id_cancel_professional_in, NVL (:id_cancel_professional_in, ID_CANCEL_PROFESSIONAL)) ' || ',' ||
                 ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                 ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) ' || ',' || ' CREATE_USER = decode (' ||
                 l_create_user_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' ||
                 ' CREATE_TIME = decode (' || l_create_time_n ||
                 ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' || ' CREATE_INSTITUTION = decode (' ||
                 l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_rehab_session_type_in, dt_rehab_sch_need_in, id_episode_origin_in, id_professional_in, sessions_in, frequency_in, flg_frequency_in, flg_priority_in, dt_begin_in, flg_status_in, id_resp_professional_in, id_resp_rehab_group_in, notes_in, id_cancel_reason_in, dt_cancel_in, id_cancel_professional_in, notes_cancel_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'REHAB_SCH_NEED');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    IF l_name = 'RSD_PL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RESP_PROFESSIONAL',
                                                        value_in           => id_resp_professional_in);
                    END IF;
                    IF l_name = 'RSD_PL_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_PROFESSIONAL',
                                                        value_in           => id_cancel_professional_in);
                    END IF;
                    IF l_name = 'RSD_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'RSD_RGP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RESP_REHAB_GROUP',
                                                        value_in           => id_resp_rehab_group_in);
                    END IF;
                    IF l_name = 'RSD_RPN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN',
                                                        value_in           => id_episode_origin_in);
                    END IF;
                    IF l_name = 'RSD_RSE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_REHAB_SESSION_TYPE',
                                                        value_in           => id_rehab_session_type_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_rehab_session_type_in   IN rehab_sch_need.id_rehab_session_type%TYPE DEFAULT NULL,
        id_rehab_session_type_nin  IN BOOLEAN := TRUE,
        dt_rehab_sch_need_in       IN rehab_sch_need.dt_rehab_sch_need%TYPE DEFAULT NULL,
        dt_rehab_sch_need_nin      IN BOOLEAN := TRUE,
        id_episode_origin_in       IN rehab_sch_need.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin      IN BOOLEAN := TRUE,
        id_professional_in         IN rehab_sch_need.id_professional%TYPE DEFAULT NULL,
        id_professional_nin        IN BOOLEAN := TRUE,
        sessions_in                IN rehab_sch_need.sessions%TYPE DEFAULT NULL,
        sessions_nin               IN BOOLEAN := TRUE,
        frequency_in               IN rehab_sch_need.frequency%TYPE DEFAULT NULL,
        frequency_nin              IN BOOLEAN := TRUE,
        flg_frequency_in           IN rehab_sch_need.flg_frequency%TYPE DEFAULT NULL,
        flg_frequency_nin          IN BOOLEAN := TRUE,
        flg_priority_in            IN rehab_sch_need.flg_priority%TYPE DEFAULT NULL,
        flg_priority_nin           IN BOOLEAN := TRUE,
        dt_begin_in                IN rehab_sch_need.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin               IN BOOLEAN := TRUE,
        flg_status_in              IN rehab_sch_need.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        id_resp_professional_in    IN rehab_sch_need.id_resp_professional%TYPE DEFAULT NULL,
        id_resp_professional_nin   IN BOOLEAN := TRUE,
        id_resp_rehab_group_in     IN rehab_sch_need.id_resp_rehab_group%TYPE DEFAULT NULL,
        id_resp_rehab_group_nin    IN BOOLEAN := TRUE,
        notes_in                   IN rehab_sch_need.notes%TYPE DEFAULT NULL,
        notes_nin                  IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN rehab_sch_need.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        dt_cancel_in               IN rehab_sch_need.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        id_cancel_professional_in  IN rehab_sch_need.id_cancel_professional%TYPE DEFAULT NULL,
        id_cancel_professional_nin IN BOOLEAN := TRUE,
        notes_cancel_in            IN rehab_sch_need.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        create_user_in             IN rehab_sch_need.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN rehab_sch_need.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN rehab_sch_need.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN rehab_sch_need.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN rehab_sch_need.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN rehab_sch_need.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        where_in                   VARCHAR2 DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_rehab_session_type_in   => id_rehab_session_type_in,
            id_rehab_session_type_nin  => id_rehab_session_type_nin,
            dt_rehab_sch_need_in       => dt_rehab_sch_need_in,
            dt_rehab_sch_need_nin      => dt_rehab_sch_need_nin,
            id_episode_origin_in       => id_episode_origin_in,
            id_episode_origin_nin      => id_episode_origin_nin,
            id_professional_in         => id_professional_in,
            id_professional_nin        => id_professional_nin,
            sessions_in                => sessions_in,
            sessions_nin               => sessions_nin,
            frequency_in               => frequency_in,
            frequency_nin              => frequency_nin,
            flg_frequency_in           => flg_frequency_in,
            flg_frequency_nin          => flg_frequency_nin,
            flg_priority_in            => flg_priority_in,
            flg_priority_nin           => flg_priority_nin,
            dt_begin_in                => dt_begin_in,
            dt_begin_nin               => dt_begin_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            id_resp_professional_in    => id_resp_professional_in,
            id_resp_professional_nin   => id_resp_professional_nin,
            id_resp_rehab_group_in     => id_resp_rehab_group_in,
            id_resp_rehab_group_nin    => id_resp_rehab_group_nin,
            notes_in                   => notes_in,
            notes_nin                  => notes_nin,
            id_cancel_reason_in        => id_cancel_reason_in,
            id_cancel_reason_nin       => id_cancel_reason_nin,
            dt_cancel_in               => dt_cancel_in,
            dt_cancel_nin              => dt_cancel_nin,
            id_cancel_professional_in  => id_cancel_professional_in,
            id_cancel_professional_nin => id_cancel_professional_nin,
            notes_cancel_in            => notes_cancel_in,
            notes_cancel_nin           => notes_cancel_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            where_in                   => where_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN rehab_sch_need%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_rehab_sch_need_in      => rec_in.id_rehab_sch_need,
            id_rehab_session_type_in  => rec_in.id_rehab_session_type,
            dt_rehab_sch_need_in      => rec_in.dt_rehab_sch_need,
            id_episode_origin_in      => rec_in.id_episode_origin,
            id_professional_in        => rec_in.id_professional,
            sessions_in               => rec_in.sessions,
            frequency_in              => rec_in.frequency,
            flg_frequency_in          => rec_in.flg_frequency,
            flg_priority_in           => rec_in.flg_priority,
            dt_begin_in               => rec_in.dt_begin,
            flg_status_in             => rec_in.flg_status,
            id_resp_professional_in   => rec_in.id_resp_professional,
            id_resp_rehab_group_in    => rec_in.id_resp_rehab_group,
            notes_in                  => rec_in.notes,
            id_cancel_reason_in       => rec_in.id_cancel_reason,
            dt_cancel_in              => rec_in.dt_cancel,
            id_cancel_professional_in => rec_in.id_cancel_professional,
            notes_cancel_in           => rec_in.notes_cancel,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN rehab_sch_need%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_rehab_sch_need_in      => rec_in.id_rehab_sch_need,
            id_rehab_session_type_in  => rec_in.id_rehab_session_type,
            dt_rehab_sch_need_in      => rec_in.dt_rehab_sch_need,
            id_episode_origin_in      => rec_in.id_episode_origin,
            id_professional_in        => rec_in.id_professional,
            sessions_in               => rec_in.sessions,
            frequency_in              => rec_in.frequency,
            flg_frequency_in          => rec_in.flg_frequency,
            flg_priority_in           => rec_in.flg_priority,
            dt_begin_in               => rec_in.dt_begin,
            flg_status_in             => rec_in.flg_status,
            id_resp_professional_in   => rec_in.id_resp_professional,
            id_resp_rehab_group_in    => rec_in.id_resp_rehab_group,
            notes_in                  => rec_in.notes,
            id_cancel_reason_in       => rec_in.id_cancel_reason,
            dt_cancel_in              => rec_in.dt_cancel,
            id_cancel_professional_in => rec_in.id_cancel_professional,
            notes_cancel_in           => rec_in.notes_cancel,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_rehab_sch_need_in      IN rehab_sch_need.id_rehab_sch_need%TYPE,
        id_rehab_session_type_in  IN rehab_sch_need.id_rehab_session_type%TYPE DEFAULT NULL,
        dt_rehab_sch_need_in      IN rehab_sch_need.dt_rehab_sch_need%TYPE DEFAULT NULL,
        id_episode_origin_in      IN rehab_sch_need.id_episode_origin%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_sch_need.id_professional%TYPE DEFAULT NULL,
        sessions_in               IN rehab_sch_need.sessions%TYPE DEFAULT NULL,
        frequency_in              IN rehab_sch_need.frequency%TYPE DEFAULT NULL,
        flg_frequency_in          IN rehab_sch_need.flg_frequency%TYPE DEFAULT NULL,
        flg_priority_in           IN rehab_sch_need.flg_priority%TYPE DEFAULT NULL,
        dt_begin_in               IN rehab_sch_need.dt_begin%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_sch_need.flg_status%TYPE DEFAULT NULL,
        id_resp_professional_in   IN rehab_sch_need.id_resp_professional%TYPE DEFAULT NULL,
        id_resp_rehab_group_in    IN rehab_sch_need.id_resp_rehab_group%TYPE DEFAULT NULL,
        notes_in                  IN rehab_sch_need.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_sch_need.id_cancel_reason%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_sch_need.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_sch_need.id_cancel_professional%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_sch_need.notes_cancel%TYPE DEFAULT NULL,
        create_user_in            IN rehab_sch_need.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_sch_need.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_sch_need.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_sch_need.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_sch_need.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_sch_need.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        upd(id_rehab_sch_need_in      => id_rehab_sch_need_in,
            id_rehab_session_type_in  => id_rehab_session_type_in,
            dt_rehab_sch_need_in      => dt_rehab_sch_need_in,
            id_episode_origin_in      => id_episode_origin_in,
            id_professional_in        => id_professional_in,
            sessions_in               => sessions_in,
            frequency_in              => frequency_in,
            flg_frequency_in          => flg_frequency_in,
            flg_priority_in           => flg_priority_in,
            dt_begin_in               => dt_begin_in,
            flg_status_in             => flg_status_in,
            id_resp_professional_in   => id_resp_professional_in,
            id_resp_rehab_group_in    => id_resp_rehab_group_in,
            notes_in                  => notes_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            dt_cancel_in              => dt_cancel_in,
            id_cancel_professional_in => id_cancel_professional_in,
            notes_cancel_in           => notes_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_rehab_sch_need_in      => id_rehab_sch_need_in,
                id_rehab_session_type_in  => id_rehab_session_type_in,
                dt_rehab_sch_need_in      => dt_rehab_sch_need_in,
                id_episode_origin_in      => id_episode_origin_in,
                id_professional_in        => id_professional_in,
                sessions_in               => sessions_in,
                frequency_in              => frequency_in,
                flg_frequency_in          => flg_frequency_in,
                flg_priority_in           => flg_priority_in,
                dt_begin_in               => dt_begin_in,
                flg_status_in             => flg_status_in,
                id_resp_professional_in   => id_resp_professional_in,
                id_resp_rehab_group_in    => id_resp_rehab_group_in,
                notes_in                  => notes_in,
                id_cancel_reason_in       => id_cancel_reason_in,
                dt_cancel_in              => dt_cancel_in,
                id_cancel_professional_in => id_cancel_professional_in,
                notes_cancel_in           => notes_cancel_in,
                create_user_in            => create_user_in,
                create_time_in            => create_time_in,
                create_institution_in     => create_institution_in,
                update_user_in            => update_user_in,
                update_time_in            => update_time_in,
                update_institution_in     => update_institution_in,
                handle_error_in           => handle_error_in,
                rows_out                  => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_rehab_sch_need_in      IN rehab_sch_need.id_rehab_sch_need%TYPE,
        id_rehab_session_type_in  IN rehab_sch_need.id_rehab_session_type%TYPE DEFAULT NULL,
        dt_rehab_sch_need_in      IN rehab_sch_need.dt_rehab_sch_need%TYPE DEFAULT NULL,
        id_episode_origin_in      IN rehab_sch_need.id_episode_origin%TYPE DEFAULT NULL,
        id_professional_in        IN rehab_sch_need.id_professional%TYPE DEFAULT NULL,
        sessions_in               IN rehab_sch_need.sessions%TYPE DEFAULT NULL,
        frequency_in              IN rehab_sch_need.frequency%TYPE DEFAULT NULL,
        flg_frequency_in          IN rehab_sch_need.flg_frequency%TYPE DEFAULT NULL,
        flg_priority_in           IN rehab_sch_need.flg_priority%TYPE DEFAULT NULL,
        dt_begin_in               IN rehab_sch_need.dt_begin%TYPE DEFAULT NULL,
        flg_status_in             IN rehab_sch_need.flg_status%TYPE DEFAULT NULL,
        id_resp_professional_in   IN rehab_sch_need.id_resp_professional%TYPE DEFAULT NULL,
        id_resp_rehab_group_in    IN rehab_sch_need.id_resp_rehab_group%TYPE DEFAULT NULL,
        notes_in                  IN rehab_sch_need.notes%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN rehab_sch_need.id_cancel_reason%TYPE DEFAULT NULL,
        dt_cancel_in              IN rehab_sch_need.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_professional_in IN rehab_sch_need.id_cancel_professional%TYPE DEFAULT NULL,
        notes_cancel_in           IN rehab_sch_need.notes_cancel%TYPE DEFAULT NULL,
        create_user_in            IN rehab_sch_need.create_user%TYPE DEFAULT NULL,
        create_time_in            IN rehab_sch_need.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN rehab_sch_need.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN rehab_sch_need.update_user%TYPE DEFAULT NULL,
        update_time_in            IN rehab_sch_need.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN rehab_sch_need.update_institution%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_rehab_sch_need_in,
                id_rehab_session_type_in,
                dt_rehab_sch_need_in,
                id_episode_origin_in,
                id_professional_in,
                sessions_in,
                frequency_in,
                flg_frequency_in,
                flg_priority_in,
                dt_begin_in,
                flg_status_in,
                id_resp_professional_in,
                id_resp_rehab_group_in,
                notes_in,
                id_cancel_reason_in,
                dt_cancel_in,
                id_cancel_professional_in,
                notes_cancel_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN rehab_sch_need_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_rehab_sch_need      id_rehab_sch_need_cc;
        l_id_rehab_session_type  id_rehab_session_type_cc;
        l_dt_rehab_sch_need      dt_rehab_sch_need_cc;
        l_id_episode_origin      id_episode_origin_cc;
        l_id_professional        id_professional_cc;
        l_sessions               sessions_cc;
        l_frequency              frequency_cc;
        l_flg_frequency          flg_frequency_cc;
        l_flg_priority           flg_priority_cc;
        l_dt_begin               dt_begin_cc;
        l_flg_status             flg_status_cc;
        l_id_resp_professional   id_resp_professional_cc;
        l_id_resp_rehab_group    id_resp_rehab_group_cc;
        l_notes                  notes_cc;
        l_id_cancel_reason       id_cancel_reason_cc;
        l_dt_cancel              dt_cancel_cc;
        l_id_cancel_professional id_cancel_professional_cc;
        l_notes_cancel           notes_cancel_cc;
        l_create_user            create_user_cc;
        l_create_time            create_time_cc;
        l_create_institution     create_institution_cc;
        l_update_user            update_user_cc;
        l_update_time            update_time_cc;
        l_update_institution     update_institution_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_rehab_sch_need(i) := col_in(i).id_rehab_sch_need;
            l_id_rehab_session_type(i) := col_in(i).id_rehab_session_type;
            l_dt_rehab_sch_need(i) := col_in(i).dt_rehab_sch_need;
            l_id_episode_origin(i) := col_in(i).id_episode_origin;
            l_id_professional(i) := col_in(i).id_professional;
            l_sessions(i) := col_in(i).sessions;
            l_frequency(i) := col_in(i).frequency;
            l_flg_frequency(i) := col_in(i).flg_frequency;
            l_flg_priority(i) := col_in(i).flg_priority;
            l_dt_begin(i) := col_in(i).dt_begin;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_resp_professional(i) := col_in(i).id_resp_professional;
            l_id_resp_rehab_group(i) := col_in(i).id_resp_rehab_group;
            l_notes(i) := col_in(i).notes;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_dt_cancel(i) := col_in(i).dt_cancel;
            l_id_cancel_professional(i) := col_in(i).id_cancel_professional;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE rehab_sch_need
                   SET id_rehab_session_type  = nvl(l_id_rehab_session_type(i), id_rehab_session_type),
                       dt_rehab_sch_need      = nvl(l_dt_rehab_sch_need(i), dt_rehab_sch_need),
                       id_episode_origin      = nvl(l_id_episode_origin(i), id_episode_origin),
                       id_professional        = nvl(l_id_professional(i), id_professional),
                       sessions               = nvl(l_sessions(i), sessions),
                       frequency              = nvl(l_frequency(i), frequency),
                       flg_frequency          = nvl(l_flg_frequency(i), flg_frequency),
                       flg_priority           = nvl(l_flg_priority(i), flg_priority),
                       dt_begin               = nvl(l_dt_begin(i), dt_begin),
                       flg_status             = nvl(l_flg_status(i), flg_status),
                       id_resp_professional   = nvl(l_id_resp_professional(i), id_resp_professional),
                       id_resp_rehab_group    = nvl(l_id_resp_rehab_group(i), id_resp_rehab_group),
                       notes                  = nvl(l_notes(i), notes),
                       id_cancel_reason       = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       dt_cancel              = nvl(l_dt_cancel(i), dt_cancel),
                       id_cancel_professional = nvl(l_id_cancel_professional(i), id_cancel_professional),
                       notes_cancel           = nvl(l_notes_cancel(i), notes_cancel),
                       create_user            = nvl(l_create_user(i), create_user),
                       create_time            = nvl(l_create_time(i), create_time),
                       create_institution     = nvl(l_create_institution(i), create_institution),
                       update_user            = nvl(l_update_user(i), update_user),
                       update_time            = nvl(l_update_time(i), update_time),
                       update_institution     = nvl(l_update_institution(i), update_institution)
                 WHERE id_rehab_sch_need = l_id_rehab_sch_need(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE rehab_sch_need
                   SET id_rehab_session_type  = l_id_rehab_session_type(i),
                       dt_rehab_sch_need      = l_dt_rehab_sch_need(i),
                       id_episode_origin      = l_id_episode_origin(i),
                       id_professional        = l_id_professional(i),
                       sessions               = l_sessions(i),
                       frequency              = l_frequency(i),
                       flg_frequency          = l_flg_frequency(i),
                       flg_priority           = l_flg_priority(i),
                       dt_begin               = l_dt_begin(i),
                       flg_status             = l_flg_status(i),
                       id_resp_professional   = l_id_resp_professional(i),
                       id_resp_rehab_group    = l_id_resp_rehab_group(i),
                       notes                  = l_notes(i),
                       id_cancel_reason       = l_id_cancel_reason(i),
                       dt_cancel              = l_dt_cancel(i),
                       id_cancel_professional = l_id_cancel_professional(i),
                       notes_cancel           = l_notes_cancel(i),
                       create_user            = l_create_user(i),
                       create_time            = l_create_time(i),
                       create_institution     = l_create_institution(i),
                       update_user            = l_update_user(i),
                       update_time            = l_update_time(i),
                       update_institution     = l_update_institution(i)
                 WHERE id_rehab_sch_need = l_id_rehab_sch_need(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN rehab_sch_need_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE REHAB_SCH_NEED
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE REHAB_SCH_NEED
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE REHAB_SCH_NEED set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE REHAB_SCH_NEED set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_rehab_sch_need_in IN rehab_sch_need.id_rehab_sch_need%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_sch_need
         WHERE id_rehab_sch_need = id_rehab_sch_need_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_rehab_sch_need_in IN rehab_sch_need.id_rehab_sch_need%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_rehab_sch_need_in => id_rehab_sch_need_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_REHAB_SCH_NEED
    PROCEDURE del_id_rehab_sch_need
    (
        id_rehab_sch_need_in IN rehab_sch_need.id_rehab_sch_need%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_sch_need
         WHERE id_rehab_sch_need = id_rehab_sch_need_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_rehab_sch_need;

    -- Delete all rows for primary key column ID_REHAB_SCH_NEED
    PROCEDURE del_id_rehab_sch_need
    (
        id_rehab_sch_need_in IN rehab_sch_need.id_rehab_sch_need%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_rehab_sch_need(id_rehab_sch_need_in => id_rehab_sch_need_in,
                              handle_error_in      => handle_error_in,
                              rows_out             => rows_out);
    END del_id_rehab_sch_need;

    PROCEDURE del_rsd_pl_fk
    (
        id_resp_professional_in IN rehab_sch_need.id_resp_professional%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_sch_need
         WHERE id_resp_professional = del_rsd_pl_fk.id_resp_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_rsd_pl_fk;

    PROCEDURE del_rsd_pl_fk
    (
        id_resp_professional_in IN rehab_sch_need.id_resp_professional%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rsd_pl_fk(id_resp_professional_in => id_resp_professional_in,
                      handle_error_in         => handle_error_in,
                      rows_out                => rows_out);
    END del_rsd_pl_fk;

    PROCEDURE del_rsd_pl_fk2
    (
        id_cancel_professional_in IN rehab_sch_need.id_cancel_professional%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_sch_need
         WHERE id_cancel_professional = del_rsd_pl_fk2.id_cancel_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_rsd_pl_fk2;

    PROCEDURE del_rsd_pl_fk2
    (
        id_cancel_professional_in IN rehab_sch_need.id_cancel_professional%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rsd_pl_fk2(id_cancel_professional_in => id_cancel_professional_in,
                       handle_error_in           => handle_error_in,
                       rows_out                  => rows_out);
    END del_rsd_pl_fk2;

    PROCEDURE del_rsd_prof_fk
    (
        id_professional_in IN rehab_sch_need.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_sch_need
         WHERE id_professional = del_rsd_prof_fk.id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_rsd_prof_fk;

    PROCEDURE del_rsd_prof_fk
    (
        id_professional_in IN rehab_sch_need.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rsd_prof_fk(id_professional_in => id_professional_in,
                        handle_error_in    => handle_error_in,
                        rows_out           => rows_out);
    END del_rsd_prof_fk;

    PROCEDURE del_rsd_rgp_fk
    (
        id_resp_rehab_group_in IN rehab_sch_need.id_resp_rehab_group%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_sch_need
         WHERE id_resp_rehab_group = del_rsd_rgp_fk.id_resp_rehab_group_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_rsd_rgp_fk;

    PROCEDURE del_rsd_rgp_fk
    (
        id_resp_rehab_group_in IN rehab_sch_need.id_resp_rehab_group%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rsd_rgp_fk(id_resp_rehab_group_in => id_resp_rehab_group_in,
                       handle_error_in        => handle_error_in,
                       rows_out               => rows_out);
    END del_rsd_rgp_fk;

    PROCEDURE del_rsd_rpn_fk
    (
        id_episode_origin_in IN rehab_sch_need.id_episode_origin%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_sch_need
         WHERE id_episode_origin = del_rsd_rpn_fk.id_episode_origin_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_rsd_rpn_fk;

    PROCEDURE del_rsd_rpn_fk
    (
        id_episode_origin_in IN rehab_sch_need.id_episode_origin%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rsd_rpn_fk(id_episode_origin_in => id_episode_origin_in,
                       handle_error_in      => handle_error_in,
                       rows_out             => rows_out);
    END del_rsd_rpn_fk;

    PROCEDURE del_rsd_rse_fk
    (
        id_rehab_session_type_in IN rehab_sch_need.id_rehab_session_type%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM rehab_sch_need
         WHERE id_rehab_session_type = del_rsd_rse_fk.id_rehab_session_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_rsd_rse_fk;

    PROCEDURE del_rsd_rse_fk
    (
        id_rehab_session_type_in IN rehab_sch_need.id_rehab_session_type%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_rsd_rse_fk(id_rehab_session_type_in => id_rehab_session_type_in,
                       handle_error_in          => handle_error_in,
                       rows_out                 => rows_out);
    END del_rsd_rse_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM REHAB_SCH_NEED';
        ELSE
            RETURN 'DELETE FROM REHAB_SCH_NEED WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'REHAB_SCH_NEED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'REHAB_SCH_NEED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(rehab_sch_need_inout IN OUT rehab_sch_need%ROWTYPE) IS
    BEGIN
        rehab_sch_need_inout.id_rehab_sch_need      := NULL;
        rehab_sch_need_inout.id_rehab_session_type  := NULL;
        rehab_sch_need_inout.dt_rehab_sch_need      := NULL;
        rehab_sch_need_inout.id_episode_origin      := NULL;
        rehab_sch_need_inout.id_professional        := NULL;
        rehab_sch_need_inout.sessions               := NULL;
        rehab_sch_need_inout.frequency              := NULL;
        rehab_sch_need_inout.flg_frequency          := NULL;
        rehab_sch_need_inout.flg_priority           := NULL;
        rehab_sch_need_inout.dt_begin               := NULL;
        rehab_sch_need_inout.flg_status             := NULL;
        rehab_sch_need_inout.id_resp_professional   := NULL;
        rehab_sch_need_inout.id_resp_rehab_group    := NULL;
        rehab_sch_need_inout.notes                  := NULL;
        rehab_sch_need_inout.id_cancel_reason       := NULL;
        rehab_sch_need_inout.dt_cancel              := NULL;
        rehab_sch_need_inout.id_cancel_professional := NULL;
        rehab_sch_need_inout.notes_cancel           := NULL;
        rehab_sch_need_inout.create_user            := NULL;
        rehab_sch_need_inout.create_time            := NULL;
        rehab_sch_need_inout.create_institution     := NULL;
        rehab_sch_need_inout.update_user            := NULL;
        rehab_sch_need_inout.update_time            := NULL;
        rehab_sch_need_inout.update_institution     := NULL;
    END initrec;

    FUNCTION initrec RETURN rehab_sch_need%ROWTYPE IS
        l_rehab_sch_need rehab_sch_need%ROWTYPE;
    BEGIN
        RETURN l_rehab_sch_need;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN rehab_sch_need_tc IS
        data rehab_sch_need_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM rehab_sch_need
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN rehab_sch_need_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data rehab_sch_need_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_rehab_sch_need;
/
