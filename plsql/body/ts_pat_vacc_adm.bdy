/*-- Last Change Revision: $Rev: 1592932 $*/
/*-- Last Change by: $Author: jorge.silva $*/
/*-- Date of last change: $Date: 2014-05-20 22:53:55 +0100 (ter, 20 mai 2014) $*/
CREATE OR REPLACE PACKAGE BODY ts_pat_vacc_adm
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Maio 20, 2014 20:28:31
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_pat_vacc_adm_in        IN pat_vacc_adm.id_pat_vacc_adm%TYPE,
        dt_pat_vacc_adm_in        IN pat_vacc_adm.dt_pat_vacc_adm%TYPE DEFAULT NULL,
        id_prof_writes_in         IN pat_vacc_adm.id_prof_writes%TYPE DEFAULT NULL,
        id_vacc_in                IN pat_vacc_adm.id_vacc%TYPE DEFAULT NULL,
        id_patient_in             IN pat_vacc_adm.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN pat_vacc_adm.id_episode%TYPE DEFAULT NULL,
        flg_status_in             IN pat_vacc_adm.flg_status%TYPE DEFAULT NULL,
        dt_cancel_in              IN pat_vacc_adm.dt_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_vacc_adm.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_vacc_adm.notes_cancel%TYPE DEFAULT NULL,
        flg_time_in               IN pat_vacc_adm.flg_time%TYPE DEFAULT NULL,
        takes_in                  IN pat_vacc_adm.takes%TYPE DEFAULT NULL,
        dosage_in                 IN pat_vacc_adm.dosage%TYPE DEFAULT NULL,
        flg_orig_in               IN pat_vacc_adm.flg_orig%TYPE DEFAULT NULL,
        dt_presc_in               IN pat_vacc_adm.dt_presc%TYPE DEFAULT NULL,
        notes_presc_in            IN pat_vacc_adm.notes_presc%TYPE DEFAULT NULL,
        prof_presc_in             IN pat_vacc_adm.prof_presc%TYPE DEFAULT NULL,
        adw_last_update_in        IN pat_vacc_adm.adw_last_update%TYPE DEFAULT NULL,
        id_episode_origin_in      IN pat_vacc_adm.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in IN pat_vacc_adm.id_episode_destination%TYPE DEFAULT NULL,
        dt_immune_in              IN pat_vacc_adm.dt_immune%TYPE DEFAULT NULL,
        create_user_in            IN pat_vacc_adm.create_user%TYPE DEFAULT NULL,
        create_time_in            IN pat_vacc_adm.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN pat_vacc_adm.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN pat_vacc_adm.update_user%TYPE DEFAULT NULL,
        update_time_in            IN pat_vacc_adm.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN pat_vacc_adm.update_institution%TYPE DEFAULT NULL,
        flg_type_date_in          IN pat_vacc_adm.flg_type_date%TYPE DEFAULT NULL,
        id_vacc_manufacturer_in   IN pat_vacc_adm.id_vacc_manufacturer%TYPE DEFAULT NULL,
        code_mvx_in               IN pat_vacc_adm.code_mvx%TYPE DEFAULT NULL,
        dosage_unit_measure_in    IN pat_vacc_adm.dosage_unit_measure%TYPE DEFAULT NULL,
        dosage_admin_in           IN pat_vacc_adm.dosage_admin%TYPE DEFAULT NULL,
        flg_reported_in           IN pat_vacc_adm.flg_reported%TYPE DEFAULT NULL,
        id_parent_in              IN pat_vacc_adm.id_parent%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO pat_vacc_adm
            (id_pat_vacc_adm,
             dt_pat_vacc_adm,
             id_prof_writes,
             id_vacc,
             id_patient,
             id_episode,
             flg_status,
             dt_cancel,
             id_prof_cancel,
             notes_cancel,
             flg_time,
             takes,
             dosage,
             flg_orig,
             dt_presc,
             notes_presc,
             prof_presc,
             adw_last_update,
             id_episode_origin,
             id_episode_destination,
             dt_immune,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             flg_type_date,
             id_vacc_manufacturer,
             code_mvx,
             dosage_unit_measure,
             dosage_admin,
             flg_reported,
             id_parent)
        VALUES
            (id_pat_vacc_adm_in,
             dt_pat_vacc_adm_in,
             id_prof_writes_in,
             id_vacc_in,
             id_patient_in,
             id_episode_in,
             flg_status_in,
             dt_cancel_in,
             id_prof_cancel_in,
             notes_cancel_in,
             flg_time_in,
             takes_in,
             dosage_in,
             flg_orig_in,
             dt_presc_in,
             notes_presc_in,
             prof_presc_in,
             adw_last_update_in,
             id_episode_origin_in,
             id_episode_destination_in,
             dt_immune_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             flg_type_date_in,
             id_vacc_manufacturer_in,
             code_mvx_in,
             dosage_unit_measure_in,
             dosage_admin_in,
             flg_reported_in,
             id_parent_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_VACC_ADM');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    IF l_name = 'PAVAA_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PAVAA_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PAVAA_PROF_CANCEL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'PAVAA_PROF_WRITES_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_WRITES',
                                                        value_in           => id_prof_writes_in);
                    END IF;
                    IF l_name = 'PVA_UME_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'DOSAGE_UNIT_MEASURE',
                                                        value_in           => dosage_unit_measure_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_pat_vacc_adm_in        IN pat_vacc_adm.id_pat_vacc_adm%TYPE,
        dt_pat_vacc_adm_in        IN pat_vacc_adm.dt_pat_vacc_adm%TYPE DEFAULT NULL,
        id_prof_writes_in         IN pat_vacc_adm.id_prof_writes%TYPE DEFAULT NULL,
        id_vacc_in                IN pat_vacc_adm.id_vacc%TYPE DEFAULT NULL,
        id_patient_in             IN pat_vacc_adm.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN pat_vacc_adm.id_episode%TYPE DEFAULT NULL,
        flg_status_in             IN pat_vacc_adm.flg_status%TYPE DEFAULT NULL,
        dt_cancel_in              IN pat_vacc_adm.dt_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_vacc_adm.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_vacc_adm.notes_cancel%TYPE DEFAULT NULL,
        flg_time_in               IN pat_vacc_adm.flg_time%TYPE DEFAULT NULL,
        takes_in                  IN pat_vacc_adm.takes%TYPE DEFAULT NULL,
        dosage_in                 IN pat_vacc_adm.dosage%TYPE DEFAULT NULL,
        flg_orig_in               IN pat_vacc_adm.flg_orig%TYPE DEFAULT NULL,
        dt_presc_in               IN pat_vacc_adm.dt_presc%TYPE DEFAULT NULL,
        notes_presc_in            IN pat_vacc_adm.notes_presc%TYPE DEFAULT NULL,
        prof_presc_in             IN pat_vacc_adm.prof_presc%TYPE DEFAULT NULL,
        adw_last_update_in        IN pat_vacc_adm.adw_last_update%TYPE DEFAULT NULL,
        id_episode_origin_in      IN pat_vacc_adm.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in IN pat_vacc_adm.id_episode_destination%TYPE DEFAULT NULL,
        dt_immune_in              IN pat_vacc_adm.dt_immune%TYPE DEFAULT NULL,
        create_user_in            IN pat_vacc_adm.create_user%TYPE DEFAULT NULL,
        create_time_in            IN pat_vacc_adm.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN pat_vacc_adm.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN pat_vacc_adm.update_user%TYPE DEFAULT NULL,
        update_time_in            IN pat_vacc_adm.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN pat_vacc_adm.update_institution%TYPE DEFAULT NULL,
        flg_type_date_in          IN pat_vacc_adm.flg_type_date%TYPE DEFAULT NULL,
        id_vacc_manufacturer_in   IN pat_vacc_adm.id_vacc_manufacturer%TYPE DEFAULT NULL,
        code_mvx_in               IN pat_vacc_adm.code_mvx%TYPE DEFAULT NULL,
        dosage_unit_measure_in    IN pat_vacc_adm.dosage_unit_measure%TYPE DEFAULT NULL,
        dosage_admin_in           IN pat_vacc_adm.dosage_admin%TYPE DEFAULT NULL,
        flg_reported_in           IN pat_vacc_adm.flg_reported%TYPE DEFAULT NULL,
        id_parent_in              IN pat_vacc_adm.id_parent%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_pat_vacc_adm_in        => id_pat_vacc_adm_in,
            dt_pat_vacc_adm_in        => dt_pat_vacc_adm_in,
            id_prof_writes_in         => id_prof_writes_in,
            id_vacc_in                => id_vacc_in,
            id_patient_in             => id_patient_in,
            id_episode_in             => id_episode_in,
            flg_status_in             => flg_status_in,
            dt_cancel_in              => dt_cancel_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            notes_cancel_in           => notes_cancel_in,
            flg_time_in               => flg_time_in,
            takes_in                  => takes_in,
            dosage_in                 => dosage_in,
            flg_orig_in               => flg_orig_in,
            dt_presc_in               => dt_presc_in,
            notes_presc_in            => notes_presc_in,
            prof_presc_in             => prof_presc_in,
            adw_last_update_in        => adw_last_update_in,
            id_episode_origin_in      => id_episode_origin_in,
            id_episode_destination_in => id_episode_destination_in,
            dt_immune_in              => dt_immune_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            flg_type_date_in          => flg_type_date_in,
            id_vacc_manufacturer_in   => id_vacc_manufacturer_in,
            code_mvx_in               => code_mvx_in,
            dosage_unit_measure_in    => dosage_unit_measure_in,
            dosage_admin_in           => dosage_admin_in,
            flg_reported_in           => flg_reported_in,
            id_parent_in              => id_parent_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_vacc_adm%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec pat_vacc_adm%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_pat_vacc_adm := next_key(sequence_in);
        END IF;
        ins(id_pat_vacc_adm_in        => l_rec.id_pat_vacc_adm,
            dt_pat_vacc_adm_in        => l_rec.dt_pat_vacc_adm,
            id_prof_writes_in         => l_rec.id_prof_writes,
            id_vacc_in                => l_rec.id_vacc,
            id_patient_in             => l_rec.id_patient,
            id_episode_in             => l_rec.id_episode,
            flg_status_in             => l_rec.flg_status,
            dt_cancel_in              => l_rec.dt_cancel,
            id_prof_cancel_in         => l_rec.id_prof_cancel,
            notes_cancel_in           => l_rec.notes_cancel,
            flg_time_in               => l_rec.flg_time,
            takes_in                  => l_rec.takes,
            dosage_in                 => l_rec.dosage,
            flg_orig_in               => l_rec.flg_orig,
            dt_presc_in               => l_rec.dt_presc,
            notes_presc_in            => l_rec.notes_presc,
            prof_presc_in             => l_rec.prof_presc,
            adw_last_update_in        => l_rec.adw_last_update,
            id_episode_origin_in      => l_rec.id_episode_origin,
            id_episode_destination_in => l_rec.id_episode_destination,
            dt_immune_in              => l_rec.dt_immune,
            create_user_in            => l_rec.create_user,
            create_time_in            => l_rec.create_time,
            create_institution_in     => l_rec.create_institution,
            update_user_in            => l_rec.update_user,
            update_time_in            => l_rec.update_time,
            update_institution_in     => l_rec.update_institution,
            flg_type_date_in          => l_rec.flg_type_date,
            id_vacc_manufacturer_in   => l_rec.id_vacc_manufacturer,
            code_mvx_in               => l_rec.code_mvx,
            dosage_unit_measure_in    => l_rec.dosage_unit_measure,
            dosage_admin_in           => l_rec.dosage_admin,
            flg_reported_in           => l_rec.flg_reported,
            id_parent_in              => l_rec.id_parent,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_vacc_adm%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN pat_vacc_adm.id_pat_vacc_adm%TYPE
    
     IS
        retval pat_vacc_adm.id_pat_vacc_adm%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_pat_vacc_adm.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_PAT_VACC_ADM'));
    END next_key;

    PROCEDURE ins
    (
        dt_pat_vacc_adm_in        IN pat_vacc_adm.dt_pat_vacc_adm%TYPE DEFAULT NULL,
        id_prof_writes_in         IN pat_vacc_adm.id_prof_writes%TYPE DEFAULT NULL,
        id_vacc_in                IN pat_vacc_adm.id_vacc%TYPE DEFAULT NULL,
        id_patient_in             IN pat_vacc_adm.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN pat_vacc_adm.id_episode%TYPE DEFAULT NULL,
        flg_status_in             IN pat_vacc_adm.flg_status%TYPE DEFAULT NULL,
        dt_cancel_in              IN pat_vacc_adm.dt_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_vacc_adm.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_vacc_adm.notes_cancel%TYPE DEFAULT NULL,
        flg_time_in               IN pat_vacc_adm.flg_time%TYPE DEFAULT NULL,
        takes_in                  IN pat_vacc_adm.takes%TYPE DEFAULT NULL,
        dosage_in                 IN pat_vacc_adm.dosage%TYPE DEFAULT NULL,
        flg_orig_in               IN pat_vacc_adm.flg_orig%TYPE DEFAULT NULL,
        dt_presc_in               IN pat_vacc_adm.dt_presc%TYPE DEFAULT NULL,
        notes_presc_in            IN pat_vacc_adm.notes_presc%TYPE DEFAULT NULL,
        prof_presc_in             IN pat_vacc_adm.prof_presc%TYPE DEFAULT NULL,
        adw_last_update_in        IN pat_vacc_adm.adw_last_update%TYPE DEFAULT NULL,
        id_episode_origin_in      IN pat_vacc_adm.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in IN pat_vacc_adm.id_episode_destination%TYPE DEFAULT NULL,
        dt_immune_in              IN pat_vacc_adm.dt_immune%TYPE DEFAULT NULL,
        create_user_in            IN pat_vacc_adm.create_user%TYPE DEFAULT NULL,
        create_time_in            IN pat_vacc_adm.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN pat_vacc_adm.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN pat_vacc_adm.update_user%TYPE DEFAULT NULL,
        update_time_in            IN pat_vacc_adm.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN pat_vacc_adm.update_institution%TYPE DEFAULT NULL,
        flg_type_date_in          IN pat_vacc_adm.flg_type_date%TYPE DEFAULT NULL,
        id_vacc_manufacturer_in   IN pat_vacc_adm.id_vacc_manufacturer%TYPE DEFAULT NULL,
        code_mvx_in               IN pat_vacc_adm.code_mvx%TYPE DEFAULT NULL,
        dosage_unit_measure_in    IN pat_vacc_adm.dosage_unit_measure%TYPE DEFAULT NULL,
        dosage_admin_in           IN pat_vacc_adm.dosage_admin%TYPE DEFAULT NULL,
        flg_reported_in           IN pat_vacc_adm.flg_reported%TYPE DEFAULT NULL,
        id_parent_in              IN pat_vacc_adm.id_parent%TYPE DEFAULT NULL,
        id_pat_vacc_adm_out       IN OUT pat_vacc_adm.id_pat_vacc_adm%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
        l_pky pat_vacc_adm.id_pat_vacc_adm%TYPE := next_key;
    BEGIN
        ins(id_pat_vacc_adm_in        => l_pky,
            dt_pat_vacc_adm_in        => dt_pat_vacc_adm_in,
            id_prof_writes_in         => id_prof_writes_in,
            id_vacc_in                => id_vacc_in,
            id_patient_in             => id_patient_in,
            id_episode_in             => id_episode_in,
            flg_status_in             => flg_status_in,
            dt_cancel_in              => dt_cancel_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            notes_cancel_in           => notes_cancel_in,
            flg_time_in               => flg_time_in,
            takes_in                  => takes_in,
            dosage_in                 => dosage_in,
            flg_orig_in               => flg_orig_in,
            dt_presc_in               => dt_presc_in,
            notes_presc_in            => notes_presc_in,
            prof_presc_in             => prof_presc_in,
            adw_last_update_in        => adw_last_update_in,
            id_episode_origin_in      => id_episode_origin_in,
            id_episode_destination_in => id_episode_destination_in,
            dt_immune_in              => dt_immune_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            flg_type_date_in          => flg_type_date_in,
            id_vacc_manufacturer_in   => id_vacc_manufacturer_in,
            code_mvx_in               => code_mvx_in,
            dosage_unit_measure_in    => dosage_unit_measure_in,
            dosage_admin_in           => dosage_admin_in,
            flg_reported_in           => flg_reported_in,
            id_parent_in              => id_parent_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        id_pat_vacc_adm_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        dt_pat_vacc_adm_in        IN pat_vacc_adm.dt_pat_vacc_adm%TYPE DEFAULT NULL,
        id_prof_writes_in         IN pat_vacc_adm.id_prof_writes%TYPE DEFAULT NULL,
        id_vacc_in                IN pat_vacc_adm.id_vacc%TYPE DEFAULT NULL,
        id_patient_in             IN pat_vacc_adm.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN pat_vacc_adm.id_episode%TYPE DEFAULT NULL,
        flg_status_in             IN pat_vacc_adm.flg_status%TYPE DEFAULT NULL,
        dt_cancel_in              IN pat_vacc_adm.dt_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_vacc_adm.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_vacc_adm.notes_cancel%TYPE DEFAULT NULL,
        flg_time_in               IN pat_vacc_adm.flg_time%TYPE DEFAULT NULL,
        takes_in                  IN pat_vacc_adm.takes%TYPE DEFAULT NULL,
        dosage_in                 IN pat_vacc_adm.dosage%TYPE DEFAULT NULL,
        flg_orig_in               IN pat_vacc_adm.flg_orig%TYPE DEFAULT NULL,
        dt_presc_in               IN pat_vacc_adm.dt_presc%TYPE DEFAULT NULL,
        notes_presc_in            IN pat_vacc_adm.notes_presc%TYPE DEFAULT NULL,
        prof_presc_in             IN pat_vacc_adm.prof_presc%TYPE DEFAULT NULL,
        adw_last_update_in        IN pat_vacc_adm.adw_last_update%TYPE DEFAULT NULL,
        id_episode_origin_in      IN pat_vacc_adm.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in IN pat_vacc_adm.id_episode_destination%TYPE DEFAULT NULL,
        dt_immune_in              IN pat_vacc_adm.dt_immune%TYPE DEFAULT NULL,
        create_user_in            IN pat_vacc_adm.create_user%TYPE DEFAULT NULL,
        create_time_in            IN pat_vacc_adm.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN pat_vacc_adm.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN pat_vacc_adm.update_user%TYPE DEFAULT NULL,
        update_time_in            IN pat_vacc_adm.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN pat_vacc_adm.update_institution%TYPE DEFAULT NULL,
        flg_type_date_in          IN pat_vacc_adm.flg_type_date%TYPE DEFAULT NULL,
        id_vacc_manufacturer_in   IN pat_vacc_adm.id_vacc_manufacturer%TYPE DEFAULT NULL,
        code_mvx_in               IN pat_vacc_adm.code_mvx%TYPE DEFAULT NULL,
        dosage_unit_measure_in    IN pat_vacc_adm.dosage_unit_measure%TYPE DEFAULT NULL,
        dosage_admin_in           IN pat_vacc_adm.dosage_admin%TYPE DEFAULT NULL,
        flg_reported_in           IN pat_vacc_adm.flg_reported%TYPE DEFAULT NULL,
        id_parent_in              IN pat_vacc_adm.id_parent%TYPE DEFAULT NULL,
        id_pat_vacc_adm_out       IN OUT pat_vacc_adm.id_pat_vacc_adm%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(dt_pat_vacc_adm_in        => dt_pat_vacc_adm_in,
            id_prof_writes_in         => id_prof_writes_in,
            id_vacc_in                => id_vacc_in,
            id_patient_in             => id_patient_in,
            id_episode_in             => id_episode_in,
            flg_status_in             => flg_status_in,
            dt_cancel_in              => dt_cancel_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            notes_cancel_in           => notes_cancel_in,
            flg_time_in               => flg_time_in,
            takes_in                  => takes_in,
            dosage_in                 => dosage_in,
            flg_orig_in               => flg_orig_in,
            dt_presc_in               => dt_presc_in,
            notes_presc_in            => notes_presc_in,
            prof_presc_in             => prof_presc_in,
            adw_last_update_in        => adw_last_update_in,
            id_episode_origin_in      => id_episode_origin_in,
            id_episode_destination_in => id_episode_destination_in,
            dt_immune_in              => dt_immune_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            flg_type_date_in          => flg_type_date_in,
            id_vacc_manufacturer_in   => id_vacc_manufacturer_in,
            code_mvx_in               => code_mvx_in,
            dosage_unit_measure_in    => dosage_unit_measure_in,
            dosage_admin_in           => dosage_admin_in,
            flg_reported_in           => flg_reported_in,
            id_parent_in              => id_parent_in,
            id_pat_vacc_adm_out       => id_pat_vacc_adm_out,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    FUNCTION ins
    (
        dt_pat_vacc_adm_in        IN pat_vacc_adm.dt_pat_vacc_adm%TYPE DEFAULT NULL,
        id_prof_writes_in         IN pat_vacc_adm.id_prof_writes%TYPE DEFAULT NULL,
        id_vacc_in                IN pat_vacc_adm.id_vacc%TYPE DEFAULT NULL,
        id_patient_in             IN pat_vacc_adm.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN pat_vacc_adm.id_episode%TYPE DEFAULT NULL,
        flg_status_in             IN pat_vacc_adm.flg_status%TYPE DEFAULT NULL,
        dt_cancel_in              IN pat_vacc_adm.dt_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_vacc_adm.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_vacc_adm.notes_cancel%TYPE DEFAULT NULL,
        flg_time_in               IN pat_vacc_adm.flg_time%TYPE DEFAULT NULL,
        takes_in                  IN pat_vacc_adm.takes%TYPE DEFAULT NULL,
        dosage_in                 IN pat_vacc_adm.dosage%TYPE DEFAULT NULL,
        flg_orig_in               IN pat_vacc_adm.flg_orig%TYPE DEFAULT NULL,
        dt_presc_in               IN pat_vacc_adm.dt_presc%TYPE DEFAULT NULL,
        notes_presc_in            IN pat_vacc_adm.notes_presc%TYPE DEFAULT NULL,
        prof_presc_in             IN pat_vacc_adm.prof_presc%TYPE DEFAULT NULL,
        adw_last_update_in        IN pat_vacc_adm.adw_last_update%TYPE DEFAULT NULL,
        id_episode_origin_in      IN pat_vacc_adm.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in IN pat_vacc_adm.id_episode_destination%TYPE DEFAULT NULL,
        dt_immune_in              IN pat_vacc_adm.dt_immune%TYPE DEFAULT NULL,
        create_user_in            IN pat_vacc_adm.create_user%TYPE DEFAULT NULL,
        create_time_in            IN pat_vacc_adm.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN pat_vacc_adm.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN pat_vacc_adm.update_user%TYPE DEFAULT NULL,
        update_time_in            IN pat_vacc_adm.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN pat_vacc_adm.update_institution%TYPE DEFAULT NULL,
        flg_type_date_in          IN pat_vacc_adm.flg_type_date%TYPE DEFAULT NULL,
        id_vacc_manufacturer_in   IN pat_vacc_adm.id_vacc_manufacturer%TYPE DEFAULT NULL,
        code_mvx_in               IN pat_vacc_adm.code_mvx%TYPE DEFAULT NULL,
        dosage_unit_measure_in    IN pat_vacc_adm.dosage_unit_measure%TYPE DEFAULT NULL,
        dosage_admin_in           IN pat_vacc_adm.dosage_admin%TYPE DEFAULT NULL,
        flg_reported_in           IN pat_vacc_adm.flg_reported%TYPE DEFAULT NULL,
        id_parent_in              IN pat_vacc_adm.id_parent%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) RETURN pat_vacc_adm.id_pat_vacc_adm%TYPE IS
        l_pky pat_vacc_adm.id_pat_vacc_adm%TYPE := next_key;
    BEGIN
        ins(id_pat_vacc_adm_in        => l_pky,
            dt_pat_vacc_adm_in        => dt_pat_vacc_adm_in,
            id_prof_writes_in         => id_prof_writes_in,
            id_vacc_in                => id_vacc_in,
            id_patient_in             => id_patient_in,
            id_episode_in             => id_episode_in,
            flg_status_in             => flg_status_in,
            dt_cancel_in              => dt_cancel_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            notes_cancel_in           => notes_cancel_in,
            flg_time_in               => flg_time_in,
            takes_in                  => takes_in,
            dosage_in                 => dosage_in,
            flg_orig_in               => flg_orig_in,
            dt_presc_in               => dt_presc_in,
            notes_presc_in            => notes_presc_in,
            prof_presc_in             => prof_presc_in,
            adw_last_update_in        => adw_last_update_in,
            id_episode_origin_in      => id_episode_origin_in,
            id_episode_destination_in => id_episode_destination_in,
            dt_immune_in              => dt_immune_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            flg_type_date_in          => flg_type_date_in,
            id_vacc_manufacturer_in   => id_vacc_manufacturer_in,
            code_mvx_in               => code_mvx_in,
            dosage_unit_measure_in    => dosage_unit_measure_in,
            dosage_admin_in           => dosage_admin_in,
            flg_reported_in           => flg_reported_in,
            id_parent_in              => id_parent_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        dt_pat_vacc_adm_in        IN pat_vacc_adm.dt_pat_vacc_adm%TYPE DEFAULT NULL,
        id_prof_writes_in         IN pat_vacc_adm.id_prof_writes%TYPE DEFAULT NULL,
        id_vacc_in                IN pat_vacc_adm.id_vacc%TYPE DEFAULT NULL,
        id_patient_in             IN pat_vacc_adm.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN pat_vacc_adm.id_episode%TYPE DEFAULT NULL,
        flg_status_in             IN pat_vacc_adm.flg_status%TYPE DEFAULT NULL,
        dt_cancel_in              IN pat_vacc_adm.dt_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_vacc_adm.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_vacc_adm.notes_cancel%TYPE DEFAULT NULL,
        flg_time_in               IN pat_vacc_adm.flg_time%TYPE DEFAULT NULL,
        takes_in                  IN pat_vacc_adm.takes%TYPE DEFAULT NULL,
        dosage_in                 IN pat_vacc_adm.dosage%TYPE DEFAULT NULL,
        flg_orig_in               IN pat_vacc_adm.flg_orig%TYPE DEFAULT NULL,
        dt_presc_in               IN pat_vacc_adm.dt_presc%TYPE DEFAULT NULL,
        notes_presc_in            IN pat_vacc_adm.notes_presc%TYPE DEFAULT NULL,
        prof_presc_in             IN pat_vacc_adm.prof_presc%TYPE DEFAULT NULL,
        adw_last_update_in        IN pat_vacc_adm.adw_last_update%TYPE DEFAULT NULL,
        id_episode_origin_in      IN pat_vacc_adm.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in IN pat_vacc_adm.id_episode_destination%TYPE DEFAULT NULL,
        dt_immune_in              IN pat_vacc_adm.dt_immune%TYPE DEFAULT NULL,
        create_user_in            IN pat_vacc_adm.create_user%TYPE DEFAULT NULL,
        create_time_in            IN pat_vacc_adm.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN pat_vacc_adm.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN pat_vacc_adm.update_user%TYPE DEFAULT NULL,
        update_time_in            IN pat_vacc_adm.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN pat_vacc_adm.update_institution%TYPE DEFAULT NULL,
        flg_type_date_in          IN pat_vacc_adm.flg_type_date%TYPE DEFAULT NULL,
        id_vacc_manufacturer_in   IN pat_vacc_adm.id_vacc_manufacturer%TYPE DEFAULT NULL,
        code_mvx_in               IN pat_vacc_adm.code_mvx%TYPE DEFAULT NULL,
        dosage_unit_measure_in    IN pat_vacc_adm.dosage_unit_measure%TYPE DEFAULT NULL,
        dosage_admin_in           IN pat_vacc_adm.dosage_admin%TYPE DEFAULT NULL,
        flg_reported_in           IN pat_vacc_adm.flg_reported%TYPE DEFAULT NULL,
        id_parent_in              IN pat_vacc_adm.id_parent%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) RETURN pat_vacc_adm.id_pat_vacc_adm%TYPE IS
        l_pky    pat_vacc_adm.id_pat_vacc_adm%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_vacc_adm_in        => l_pky,
            dt_pat_vacc_adm_in        => dt_pat_vacc_adm_in,
            id_prof_writes_in         => id_prof_writes_in,
            id_vacc_in                => id_vacc_in,
            id_patient_in             => id_patient_in,
            id_episode_in             => id_episode_in,
            flg_status_in             => flg_status_in,
            dt_cancel_in              => dt_cancel_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            notes_cancel_in           => notes_cancel_in,
            flg_time_in               => flg_time_in,
            takes_in                  => takes_in,
            dosage_in                 => dosage_in,
            flg_orig_in               => flg_orig_in,
            dt_presc_in               => dt_presc_in,
            notes_presc_in            => notes_presc_in,
            prof_presc_in             => prof_presc_in,
            adw_last_update_in        => adw_last_update_in,
            id_episode_origin_in      => id_episode_origin_in,
            id_episode_destination_in => id_episode_destination_in,
            dt_immune_in              => dt_immune_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            flg_type_date_in          => flg_type_date_in,
            id_vacc_manufacturer_in   => id_vacc_manufacturer_in,
            code_mvx_in               => code_mvx_in,
            dosage_unit_measure_in    => dosage_unit_measure_in,
            dosage_admin_in           => dosage_admin_in,
            flg_reported_in           => flg_reported_in,
            id_parent_in              => id_parent_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        dt_pat_vacc_adm_in        IN pat_vacc_adm.dt_pat_vacc_adm%TYPE DEFAULT NULL,
        id_prof_writes_in         IN pat_vacc_adm.id_prof_writes%TYPE DEFAULT NULL,
        id_vacc_in                IN pat_vacc_adm.id_vacc%TYPE DEFAULT NULL,
        id_patient_in             IN pat_vacc_adm.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN pat_vacc_adm.id_episode%TYPE DEFAULT NULL,
        flg_status_in             IN pat_vacc_adm.flg_status%TYPE DEFAULT NULL,
        dt_cancel_in              IN pat_vacc_adm.dt_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_vacc_adm.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_vacc_adm.notes_cancel%TYPE DEFAULT NULL,
        flg_time_in               IN pat_vacc_adm.flg_time%TYPE DEFAULT NULL,
        takes_in                  IN pat_vacc_adm.takes%TYPE DEFAULT NULL,
        dosage_in                 IN pat_vacc_adm.dosage%TYPE DEFAULT NULL,
        flg_orig_in               IN pat_vacc_adm.flg_orig%TYPE DEFAULT NULL,
        dt_presc_in               IN pat_vacc_adm.dt_presc%TYPE DEFAULT NULL,
        notes_presc_in            IN pat_vacc_adm.notes_presc%TYPE DEFAULT NULL,
        prof_presc_in             IN pat_vacc_adm.prof_presc%TYPE DEFAULT NULL,
        adw_last_update_in        IN pat_vacc_adm.adw_last_update%TYPE DEFAULT NULL,
        id_episode_origin_in      IN pat_vacc_adm.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in IN pat_vacc_adm.id_episode_destination%TYPE DEFAULT NULL,
        dt_immune_in              IN pat_vacc_adm.dt_immune%TYPE DEFAULT NULL,
        create_user_in            IN pat_vacc_adm.create_user%TYPE DEFAULT NULL,
        create_time_in            IN pat_vacc_adm.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN pat_vacc_adm.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN pat_vacc_adm.update_user%TYPE DEFAULT NULL,
        update_time_in            IN pat_vacc_adm.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN pat_vacc_adm.update_institution%TYPE DEFAULT NULL,
        flg_type_date_in          IN pat_vacc_adm.flg_type_date%TYPE DEFAULT NULL,
        id_vacc_manufacturer_in   IN pat_vacc_adm.id_vacc_manufacturer%TYPE DEFAULT NULL,
        code_mvx_in               IN pat_vacc_adm.code_mvx%TYPE DEFAULT NULL,
        dosage_unit_measure_in    IN pat_vacc_adm.dosage_unit_measure%TYPE DEFAULT NULL,
        dosage_admin_in           IN pat_vacc_adm.dosage_admin%TYPE DEFAULT NULL,
        flg_reported_in           IN pat_vacc_adm.flg_reported%TYPE DEFAULT NULL,
        id_parent_in              IN pat_vacc_adm.id_parent%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
        l_pky pat_vacc_adm.id_pat_vacc_adm%TYPE := next_key;
    BEGIN
        ins(id_pat_vacc_adm_in        => l_pky,
            dt_pat_vacc_adm_in        => dt_pat_vacc_adm_in,
            id_prof_writes_in         => id_prof_writes_in,
            id_vacc_in                => id_vacc_in,
            id_patient_in             => id_patient_in,
            id_episode_in             => id_episode_in,
            flg_status_in             => flg_status_in,
            dt_cancel_in              => dt_cancel_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            notes_cancel_in           => notes_cancel_in,
            flg_time_in               => flg_time_in,
            takes_in                  => takes_in,
            dosage_in                 => dosage_in,
            flg_orig_in               => flg_orig_in,
            dt_presc_in               => dt_presc_in,
            notes_presc_in            => notes_presc_in,
            prof_presc_in             => prof_presc_in,
            adw_last_update_in        => adw_last_update_in,
            id_episode_origin_in      => id_episode_origin_in,
            id_episode_destination_in => id_episode_destination_in,
            dt_immune_in              => dt_immune_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            flg_type_date_in          => flg_type_date_in,
            id_vacc_manufacturer_in   => id_vacc_manufacturer_in,
            code_mvx_in               => code_mvx_in,
            dosage_unit_measure_in    => dosage_unit_measure_in,
            dosage_admin_in           => dosage_admin_in,
            flg_reported_in           => flg_reported_in,
            id_parent_in              => id_parent_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        dt_pat_vacc_adm_in        IN pat_vacc_adm.dt_pat_vacc_adm%TYPE DEFAULT NULL,
        id_prof_writes_in         IN pat_vacc_adm.id_prof_writes%TYPE DEFAULT NULL,
        id_vacc_in                IN pat_vacc_adm.id_vacc%TYPE DEFAULT NULL,
        id_patient_in             IN pat_vacc_adm.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN pat_vacc_adm.id_episode%TYPE DEFAULT NULL,
        flg_status_in             IN pat_vacc_adm.flg_status%TYPE DEFAULT NULL,
        dt_cancel_in              IN pat_vacc_adm.dt_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_vacc_adm.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_vacc_adm.notes_cancel%TYPE DEFAULT NULL,
        flg_time_in               IN pat_vacc_adm.flg_time%TYPE DEFAULT NULL,
        takes_in                  IN pat_vacc_adm.takes%TYPE DEFAULT NULL,
        dosage_in                 IN pat_vacc_adm.dosage%TYPE DEFAULT NULL,
        flg_orig_in               IN pat_vacc_adm.flg_orig%TYPE DEFAULT NULL,
        dt_presc_in               IN pat_vacc_adm.dt_presc%TYPE DEFAULT NULL,
        notes_presc_in            IN pat_vacc_adm.notes_presc%TYPE DEFAULT NULL,
        prof_presc_in             IN pat_vacc_adm.prof_presc%TYPE DEFAULT NULL,
        adw_last_update_in        IN pat_vacc_adm.adw_last_update%TYPE DEFAULT NULL,
        id_episode_origin_in      IN pat_vacc_adm.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in IN pat_vacc_adm.id_episode_destination%TYPE DEFAULT NULL,
        dt_immune_in              IN pat_vacc_adm.dt_immune%TYPE DEFAULT NULL,
        create_user_in            IN pat_vacc_adm.create_user%TYPE DEFAULT NULL,
        create_time_in            IN pat_vacc_adm.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN pat_vacc_adm.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN pat_vacc_adm.update_user%TYPE DEFAULT NULL,
        update_time_in            IN pat_vacc_adm.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN pat_vacc_adm.update_institution%TYPE DEFAULT NULL,
        flg_type_date_in          IN pat_vacc_adm.flg_type_date%TYPE DEFAULT NULL,
        id_vacc_manufacturer_in   IN pat_vacc_adm.id_vacc_manufacturer%TYPE DEFAULT NULL,
        code_mvx_in               IN pat_vacc_adm.code_mvx%TYPE DEFAULT NULL,
        dosage_unit_measure_in    IN pat_vacc_adm.dosage_unit_measure%TYPE DEFAULT NULL,
        dosage_admin_in           IN pat_vacc_adm.dosage_admin%TYPE DEFAULT NULL,
        flg_reported_in           IN pat_vacc_adm.flg_reported%TYPE DEFAULT NULL,
        id_parent_in              IN pat_vacc_adm.id_parent%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        l_pky    pat_vacc_adm.id_pat_vacc_adm%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_vacc_adm_in        => l_pky,
            dt_pat_vacc_adm_in        => dt_pat_vacc_adm_in,
            id_prof_writes_in         => id_prof_writes_in,
            id_vacc_in                => id_vacc_in,
            id_patient_in             => id_patient_in,
            id_episode_in             => id_episode_in,
            flg_status_in             => flg_status_in,
            dt_cancel_in              => dt_cancel_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            notes_cancel_in           => notes_cancel_in,
            flg_time_in               => flg_time_in,
            takes_in                  => takes_in,
            dosage_in                 => dosage_in,
            flg_orig_in               => flg_orig_in,
            dt_presc_in               => dt_presc_in,
            notes_presc_in            => notes_presc_in,
            prof_presc_in             => prof_presc_in,
            adw_last_update_in        => adw_last_update_in,
            id_episode_origin_in      => id_episode_origin_in,
            id_episode_destination_in => id_episode_destination_in,
            dt_immune_in              => dt_immune_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            flg_type_date_in          => flg_type_date_in,
            id_vacc_manufacturer_in   => id_vacc_manufacturer_in,
            code_mvx_in               => code_mvx_in,
            dosage_unit_measure_in    => dosage_unit_measure_in,
            dosage_admin_in           => dosage_admin_in,
            flg_reported_in           => flg_reported_in,
            id_parent_in              => id_parent_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_vacc_adm_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO pat_vacc_adm
                    (id_pat_vacc_adm,
                     dt_pat_vacc_adm,
                     id_prof_writes,
                     id_vacc,
                     id_patient,
                     id_episode,
                     flg_status,
                     dt_cancel,
                     id_prof_cancel,
                     notes_cancel,
                     flg_time,
                     takes,
                     dosage,
                     flg_orig,
                     dt_presc,
                     notes_presc,
                     prof_presc,
                     adw_last_update,
                     id_episode_origin,
                     id_episode_destination,
                     dt_immune,
                     create_user,
                     create_time,
                     create_institution,
                     update_user,
                     update_time,
                     update_institution,
                     flg_type_date,
                     id_vacc_manufacturer,
                     code_mvx,
                     dosage_unit_measure,
                     dosage_admin,
                     flg_reported,
                     id_parent)
                VALUES
                    (rows_in(indx).id_pat_vacc_adm,
                     rows_in(indx).dt_pat_vacc_adm,
                     rows_in(indx).id_prof_writes,
                     rows_in(indx).id_vacc,
                     rows_in(indx).id_patient,
                     rows_in(indx).id_episode,
                     rows_in(indx).flg_status,
                     rows_in(indx).dt_cancel,
                     rows_in(indx).id_prof_cancel,
                     rows_in(indx).notes_cancel,
                     rows_in(indx).flg_time,
                     rows_in(indx).takes,
                     rows_in(indx).dosage,
                     rows_in(indx).flg_orig,
                     rows_in(indx).dt_presc,
                     rows_in(indx).notes_presc,
                     rows_in(indx).prof_presc,
                     rows_in(indx).adw_last_update,
                     rows_in(indx).id_episode_origin,
                     rows_in(indx).id_episode_destination,
                     rows_in(indx).dt_immune,
                     rows_in(indx).create_user,
                     rows_in(indx).create_time,
                     rows_in(indx).create_institution,
                     rows_in(indx).update_user,
                     rows_in(indx).update_time,
                     rows_in(indx).update_institution,
                     rows_in(indx).flg_type_date,
                     rows_in(indx).id_vacc_manufacturer,
                     rows_in(indx).code_mvx,
                     rows_in(indx).dosage_unit_measure,
                     rows_in(indx).dosage_admin,
                     rows_in(indx).flg_reported,
                     rows_in(indx).id_parent)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PAT_VACC_ADM _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_pat_vacc_adm,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_PAT_VACC_ADM _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_pat_vacc_adm,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_WRITES _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_writes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VACC _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_vacc,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CANCEL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CANCEL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CANCEL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .notes_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TAKES _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .takes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DOSAGE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dosage,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_ORIG _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_orig,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_PRESC _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_presc,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_PRESC _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .notes_presc,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'PROF_PRESC _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .prof_presc,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ADW_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .adw_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode_origin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE_DESTINATION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode_destination,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_IMMUNE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_immune,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TYPE_DATE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_type_date,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VACC_MANUFACTURER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_vacc_manufacturer,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CODE_MVX _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .code_mvx,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DOSAGE_UNIT_MEASURE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dosage_unit_measure,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DOSAGE_ADMIN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dosage_admin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_REPORTED _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_reported,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PARENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_parent,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'PAT_VACC_ADM',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_vacc_adm_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_pat_vacc_adm_in         IN pat_vacc_adm.id_pat_vacc_adm%TYPE,
        dt_pat_vacc_adm_in         IN pat_vacc_adm.dt_pat_vacc_adm%TYPE DEFAULT NULL,
        dt_pat_vacc_adm_nin        IN BOOLEAN := TRUE,
        id_prof_writes_in          IN pat_vacc_adm.id_prof_writes%TYPE DEFAULT NULL,
        id_prof_writes_nin         IN BOOLEAN := TRUE,
        id_vacc_in                 IN pat_vacc_adm.id_vacc%TYPE DEFAULT NULL,
        id_vacc_nin                IN BOOLEAN := TRUE,
        id_patient_in              IN pat_vacc_adm.id_patient%TYPE DEFAULT NULL,
        id_patient_nin             IN BOOLEAN := TRUE,
        id_episode_in              IN pat_vacc_adm.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        flg_status_in              IN pat_vacc_adm.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        dt_cancel_in               IN pat_vacc_adm.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN pat_vacc_adm.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        notes_cancel_in            IN pat_vacc_adm.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        flg_time_in                IN pat_vacc_adm.flg_time%TYPE DEFAULT NULL,
        flg_time_nin               IN BOOLEAN := TRUE,
        takes_in                   IN pat_vacc_adm.takes%TYPE DEFAULT NULL,
        takes_nin                  IN BOOLEAN := TRUE,
        dosage_in                  IN pat_vacc_adm.dosage%TYPE DEFAULT NULL,
        dosage_nin                 IN BOOLEAN := TRUE,
        flg_orig_in                IN pat_vacc_adm.flg_orig%TYPE DEFAULT NULL,
        flg_orig_nin               IN BOOLEAN := TRUE,
        dt_presc_in                IN pat_vacc_adm.dt_presc%TYPE DEFAULT NULL,
        dt_presc_nin               IN BOOLEAN := TRUE,
        notes_presc_in             IN pat_vacc_adm.notes_presc%TYPE DEFAULT NULL,
        notes_presc_nin            IN BOOLEAN := TRUE,
        prof_presc_in              IN pat_vacc_adm.prof_presc%TYPE DEFAULT NULL,
        prof_presc_nin             IN BOOLEAN := TRUE,
        adw_last_update_in         IN pat_vacc_adm.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin        IN BOOLEAN := TRUE,
        id_episode_origin_in       IN pat_vacc_adm.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin      IN BOOLEAN := TRUE,
        id_episode_destination_in  IN pat_vacc_adm.id_episode_destination%TYPE DEFAULT NULL,
        id_episode_destination_nin IN BOOLEAN := TRUE,
        dt_immune_in               IN pat_vacc_adm.dt_immune%TYPE DEFAULT NULL,
        dt_immune_nin              IN BOOLEAN := TRUE,
        create_user_in             IN pat_vacc_adm.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN pat_vacc_adm.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN pat_vacc_adm.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN pat_vacc_adm.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN pat_vacc_adm.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN pat_vacc_adm.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        flg_type_date_in           IN pat_vacc_adm.flg_type_date%TYPE DEFAULT NULL,
        flg_type_date_nin          IN BOOLEAN := TRUE,
        id_vacc_manufacturer_in    IN pat_vacc_adm.id_vacc_manufacturer%TYPE DEFAULT NULL,
        id_vacc_manufacturer_nin   IN BOOLEAN := TRUE,
        code_mvx_in                IN pat_vacc_adm.code_mvx%TYPE DEFAULT NULL,
        code_mvx_nin               IN BOOLEAN := TRUE,
        dosage_unit_measure_in     IN pat_vacc_adm.dosage_unit_measure%TYPE DEFAULT NULL,
        dosage_unit_measure_nin    IN BOOLEAN := TRUE,
        dosage_admin_in            IN pat_vacc_adm.dosage_admin%TYPE DEFAULT NULL,
        dosage_admin_nin           IN BOOLEAN := TRUE,
        flg_reported_in            IN pat_vacc_adm.flg_reported%TYPE DEFAULT NULL,
        flg_reported_nin           IN BOOLEAN := TRUE,
        id_parent_in               IN pat_vacc_adm.id_parent%TYPE DEFAULT NULL,
        id_parent_nin              IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_rows_out                 table_varchar;
        l_dt_pat_vacc_adm_n        NUMBER(1);
        l_id_prof_writes_n         NUMBER(1);
        l_id_vacc_n                NUMBER(1);
        l_id_patient_n             NUMBER(1);
        l_id_episode_n             NUMBER(1);
        l_flg_status_n             NUMBER(1);
        l_dt_cancel_n              NUMBER(1);
        l_id_prof_cancel_n         NUMBER(1);
        l_notes_cancel_n           NUMBER(1);
        l_flg_time_n               NUMBER(1);
        l_takes_n                  NUMBER(1);
        l_dosage_n                 NUMBER(1);
        l_flg_orig_n               NUMBER(1);
        l_dt_presc_n               NUMBER(1);
        l_notes_presc_n            NUMBER(1);
        l_prof_presc_n             NUMBER(1);
        l_adw_last_update_n        NUMBER(1);
        l_id_episode_origin_n      NUMBER(1);
        l_id_episode_destination_n NUMBER(1);
        l_dt_immune_n              NUMBER(1);
        l_create_user_n            NUMBER(1);
        l_create_time_n            NUMBER(1);
        l_create_institution_n     NUMBER(1);
        l_update_user_n            NUMBER(1);
        l_update_time_n            NUMBER(1);
        l_update_institution_n     NUMBER(1);
        l_flg_type_date_n          NUMBER(1);
        l_id_vacc_manufacturer_n   NUMBER(1);
        l_code_mvx_n               NUMBER(1);
        l_dosage_unit_measure_n    NUMBER(1);
        l_dosage_admin_n           NUMBER(1);
        l_flg_reported_n           NUMBER(1);
        l_id_parent_n              NUMBER(1);
    BEGIN
    
        l_dt_pat_vacc_adm_n        := sys.diutil.bool_to_int(dt_pat_vacc_adm_nin);
        l_id_prof_writes_n         := sys.diutil.bool_to_int(id_prof_writes_nin);
        l_id_vacc_n                := sys.diutil.bool_to_int(id_vacc_nin);
        l_id_patient_n             := sys.diutil.bool_to_int(id_patient_nin);
        l_id_episode_n             := sys.diutil.bool_to_int(id_episode_nin);
        l_flg_status_n             := sys.diutil.bool_to_int(flg_status_nin);
        l_dt_cancel_n              := sys.diutil.bool_to_int(dt_cancel_nin);
        l_id_prof_cancel_n         := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n           := sys.diutil.bool_to_int(notes_cancel_nin);
        l_flg_time_n               := sys.diutil.bool_to_int(flg_time_nin);
        l_takes_n                  := sys.diutil.bool_to_int(takes_nin);
        l_dosage_n                 := sys.diutil.bool_to_int(dosage_nin);
        l_flg_orig_n               := sys.diutil.bool_to_int(flg_orig_nin);
        l_dt_presc_n               := sys.diutil.bool_to_int(dt_presc_nin);
        l_notes_presc_n            := sys.diutil.bool_to_int(notes_presc_nin);
        l_prof_presc_n             := sys.diutil.bool_to_int(prof_presc_nin);
        l_adw_last_update_n        := sys.diutil.bool_to_int(adw_last_update_nin);
        l_id_episode_origin_n      := sys.diutil.bool_to_int(id_episode_origin_nin);
        l_id_episode_destination_n := sys.diutil.bool_to_int(id_episode_destination_nin);
        l_dt_immune_n              := sys.diutil.bool_to_int(dt_immune_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_type_date_n          := sys.diutil.bool_to_int(flg_type_date_nin);
        l_id_vacc_manufacturer_n   := sys.diutil.bool_to_int(id_vacc_manufacturer_nin);
        l_code_mvx_n               := sys.diutil.bool_to_int(code_mvx_nin);
        l_dosage_unit_measure_n    := sys.diutil.bool_to_int(dosage_unit_measure_nin);
        l_dosage_admin_n           := sys.diutil.bool_to_int(dosage_admin_nin);
        l_flg_reported_n           := sys.diutil.bool_to_int(flg_reported_nin);
        l_id_parent_n              := sys.diutil.bool_to_int(id_parent_nin);
    
        UPDATE pat_vacc_adm
           SET dt_pat_vacc_adm        = decode(l_dt_pat_vacc_adm_n,
                                               0,
                                               dt_pat_vacc_adm_in,
                                               nvl(dt_pat_vacc_adm_in, dt_pat_vacc_adm)),
               id_prof_writes         = decode(l_id_prof_writes_n,
                                               0,
                                               id_prof_writes_in,
                                               nvl(id_prof_writes_in, id_prof_writes)),
               id_vacc                = decode(l_id_vacc_n, 0, id_vacc_in, nvl(id_vacc_in, id_vacc)),
               id_patient             = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_episode             = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               flg_status             = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               dt_cancel              = decode(l_dt_cancel_n, 0, dt_cancel_in, nvl(dt_cancel_in, dt_cancel)),
               id_prof_cancel         = decode(l_id_prof_cancel_n,
                                               0,
                                               id_prof_cancel_in,
                                               nvl(id_prof_cancel_in, id_prof_cancel)),
               notes_cancel           = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               flg_time               = decode(l_flg_time_n, 0, flg_time_in, nvl(flg_time_in, flg_time)),
               takes                  = decode(l_takes_n, 0, takes_in, nvl(takes_in, takes)),
               dosage                 = decode(l_dosage_n, 0, dosage_in, nvl(dosage_in, dosage)),
               flg_orig               = decode(l_flg_orig_n, 0, flg_orig_in, nvl(flg_orig_in, flg_orig)),
               dt_presc               = decode(l_dt_presc_n, 0, dt_presc_in, nvl(dt_presc_in, dt_presc)),
               notes_presc            = decode(l_notes_presc_n, 0, notes_presc_in, nvl(notes_presc_in, notes_presc)),
               prof_presc             = decode(l_prof_presc_n, 0, prof_presc_in, nvl(prof_presc_in, prof_presc)),
               adw_last_update        = decode(l_adw_last_update_n,
                                               0,
                                               adw_last_update_in,
                                               nvl(adw_last_update_in, adw_last_update)),
               id_episode_origin      = decode(l_id_episode_origin_n,
                                               0,
                                               id_episode_origin_in,
                                               nvl(id_episode_origin_in, id_episode_origin)),
               id_episode_destination = decode(l_id_episode_destination_n,
                                               0,
                                               id_episode_destination_in,
                                               nvl(id_episode_destination_in, id_episode_destination)),
               dt_immune              = decode(l_dt_immune_n, 0, dt_immune_in, nvl(dt_immune_in, dt_immune)),
               create_user            = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time            = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution     = decode(l_create_institution_n,
                                               0,
                                               create_institution_in,
                                               nvl(create_institution_in, create_institution)),
               update_user            = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time            = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution     = decode(l_update_institution_n,
                                               0,
                                               update_institution_in,
                                               nvl(update_institution_in, update_institution)),
               flg_type_date          = decode(l_flg_type_date_n,
                                               0,
                                               flg_type_date_in,
                                               nvl(flg_type_date_in, flg_type_date)),
               id_vacc_manufacturer   = decode(l_id_vacc_manufacturer_n,
                                               0,
                                               id_vacc_manufacturer_in,
                                               nvl(id_vacc_manufacturer_in, id_vacc_manufacturer)),
               code_mvx               = decode(l_code_mvx_n, 0, code_mvx_in, nvl(code_mvx_in, code_mvx)),
               dosage_unit_measure    = decode(l_dosage_unit_measure_n,
                                               0,
                                               dosage_unit_measure_in,
                                               nvl(dosage_unit_measure_in, dosage_unit_measure)),
               dosage_admin           = decode(l_dosage_admin_n, 0, dosage_admin_in, nvl(dosage_admin_in, dosage_admin)),
               flg_reported           = decode(l_flg_reported_n, 0, flg_reported_in, nvl(flg_reported_in, flg_reported)),
               id_parent              = decode(l_id_parent_n, 0, id_parent_in, nvl(id_parent_in, id_parent))
         WHERE id_pat_vacc_adm = id_pat_vacc_adm_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_VACC_ADM');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    IF l_name = 'PAVAA_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PAVAA_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PAVAA_PROF_CANCEL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'PAVAA_PROF_WRITES_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_WRITES',
                                                        value_in           => id_prof_writes_in);
                    END IF;
                    IF l_name = 'PVA_UME_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'DOSAGE_UNIT_MEASURE',
                                                        value_in           => dosage_unit_measure_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_pat_vacc_adm_in         IN pat_vacc_adm.id_pat_vacc_adm%TYPE,
        dt_pat_vacc_adm_in         IN pat_vacc_adm.dt_pat_vacc_adm%TYPE DEFAULT NULL,
        dt_pat_vacc_adm_nin        IN BOOLEAN := TRUE,
        id_prof_writes_in          IN pat_vacc_adm.id_prof_writes%TYPE DEFAULT NULL,
        id_prof_writes_nin         IN BOOLEAN := TRUE,
        id_vacc_in                 IN pat_vacc_adm.id_vacc%TYPE DEFAULT NULL,
        id_vacc_nin                IN BOOLEAN := TRUE,
        id_patient_in              IN pat_vacc_adm.id_patient%TYPE DEFAULT NULL,
        id_patient_nin             IN BOOLEAN := TRUE,
        id_episode_in              IN pat_vacc_adm.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        flg_status_in              IN pat_vacc_adm.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        dt_cancel_in               IN pat_vacc_adm.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN pat_vacc_adm.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        notes_cancel_in            IN pat_vacc_adm.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        flg_time_in                IN pat_vacc_adm.flg_time%TYPE DEFAULT NULL,
        flg_time_nin               IN BOOLEAN := TRUE,
        takes_in                   IN pat_vacc_adm.takes%TYPE DEFAULT NULL,
        takes_nin                  IN BOOLEAN := TRUE,
        dosage_in                  IN pat_vacc_adm.dosage%TYPE DEFAULT NULL,
        dosage_nin                 IN BOOLEAN := TRUE,
        flg_orig_in                IN pat_vacc_adm.flg_orig%TYPE DEFAULT NULL,
        flg_orig_nin               IN BOOLEAN := TRUE,
        dt_presc_in                IN pat_vacc_adm.dt_presc%TYPE DEFAULT NULL,
        dt_presc_nin               IN BOOLEAN := TRUE,
        notes_presc_in             IN pat_vacc_adm.notes_presc%TYPE DEFAULT NULL,
        notes_presc_nin            IN BOOLEAN := TRUE,
        prof_presc_in              IN pat_vacc_adm.prof_presc%TYPE DEFAULT NULL,
        prof_presc_nin             IN BOOLEAN := TRUE,
        adw_last_update_in         IN pat_vacc_adm.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin        IN BOOLEAN := TRUE,
        id_episode_origin_in       IN pat_vacc_adm.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin      IN BOOLEAN := TRUE,
        id_episode_destination_in  IN pat_vacc_adm.id_episode_destination%TYPE DEFAULT NULL,
        id_episode_destination_nin IN BOOLEAN := TRUE,
        dt_immune_in               IN pat_vacc_adm.dt_immune%TYPE DEFAULT NULL,
        dt_immune_nin              IN BOOLEAN := TRUE,
        create_user_in             IN pat_vacc_adm.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN pat_vacc_adm.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN pat_vacc_adm.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN pat_vacc_adm.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN pat_vacc_adm.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN pat_vacc_adm.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        flg_type_date_in           IN pat_vacc_adm.flg_type_date%TYPE DEFAULT NULL,
        flg_type_date_nin          IN BOOLEAN := TRUE,
        id_vacc_manufacturer_in    IN pat_vacc_adm.id_vacc_manufacturer%TYPE DEFAULT NULL,
        id_vacc_manufacturer_nin   IN BOOLEAN := TRUE,
        code_mvx_in                IN pat_vacc_adm.code_mvx%TYPE DEFAULT NULL,
        code_mvx_nin               IN BOOLEAN := TRUE,
        dosage_unit_measure_in     IN pat_vacc_adm.dosage_unit_measure%TYPE DEFAULT NULL,
        dosage_unit_measure_nin    IN BOOLEAN := TRUE,
        dosage_admin_in            IN pat_vacc_adm.dosage_admin%TYPE DEFAULT NULL,
        dosage_admin_nin           IN BOOLEAN := TRUE,
        flg_reported_in            IN pat_vacc_adm.flg_reported%TYPE DEFAULT NULL,
        flg_reported_nin           IN BOOLEAN := TRUE,
        id_parent_in               IN pat_vacc_adm.id_parent%TYPE DEFAULT NULL,
        id_parent_nin              IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_vacc_adm_in         => id_pat_vacc_adm_in,
            dt_pat_vacc_adm_in         => dt_pat_vacc_adm_in,
            dt_pat_vacc_adm_nin        => dt_pat_vacc_adm_nin,
            id_prof_writes_in          => id_prof_writes_in,
            id_prof_writes_nin         => id_prof_writes_nin,
            id_vacc_in                 => id_vacc_in,
            id_vacc_nin                => id_vacc_nin,
            id_patient_in              => id_patient_in,
            id_patient_nin             => id_patient_nin,
            id_episode_in              => id_episode_in,
            id_episode_nin             => id_episode_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            dt_cancel_in               => dt_cancel_in,
            dt_cancel_nin              => dt_cancel_nin,
            id_prof_cancel_in          => id_prof_cancel_in,
            id_prof_cancel_nin         => id_prof_cancel_nin,
            notes_cancel_in            => notes_cancel_in,
            notes_cancel_nin           => notes_cancel_nin,
            flg_time_in                => flg_time_in,
            flg_time_nin               => flg_time_nin,
            takes_in                   => takes_in,
            takes_nin                  => takes_nin,
            dosage_in                  => dosage_in,
            dosage_nin                 => dosage_nin,
            flg_orig_in                => flg_orig_in,
            flg_orig_nin               => flg_orig_nin,
            dt_presc_in                => dt_presc_in,
            dt_presc_nin               => dt_presc_nin,
            notes_presc_in             => notes_presc_in,
            notes_presc_nin            => notes_presc_nin,
            prof_presc_in              => prof_presc_in,
            prof_presc_nin             => prof_presc_nin,
            adw_last_update_in         => adw_last_update_in,
            adw_last_update_nin        => adw_last_update_nin,
            id_episode_origin_in       => id_episode_origin_in,
            id_episode_origin_nin      => id_episode_origin_nin,
            id_episode_destination_in  => id_episode_destination_in,
            id_episode_destination_nin => id_episode_destination_nin,
            dt_immune_in               => dt_immune_in,
            dt_immune_nin              => dt_immune_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            flg_type_date_in           => flg_type_date_in,
            flg_type_date_nin          => flg_type_date_nin,
            id_vacc_manufacturer_in    => id_vacc_manufacturer_in,
            id_vacc_manufacturer_nin   => id_vacc_manufacturer_nin,
            code_mvx_in                => code_mvx_in,
            code_mvx_nin               => code_mvx_nin,
            dosage_unit_measure_in     => dosage_unit_measure_in,
            dosage_unit_measure_nin    => dosage_unit_measure_nin,
            dosage_admin_in            => dosage_admin_in,
            dosage_admin_nin           => dosage_admin_nin,
            flg_reported_in            => flg_reported_in,
            flg_reported_nin           => flg_reported_nin,
            id_parent_in               => id_parent_in,
            id_parent_nin              => id_parent_nin,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    PROCEDURE upd
    (
        dt_pat_vacc_adm_in         IN pat_vacc_adm.dt_pat_vacc_adm%TYPE DEFAULT NULL,
        dt_pat_vacc_adm_nin        IN BOOLEAN := TRUE,
        id_prof_writes_in          IN pat_vacc_adm.id_prof_writes%TYPE DEFAULT NULL,
        id_prof_writes_nin         IN BOOLEAN := TRUE,
        id_vacc_in                 IN pat_vacc_adm.id_vacc%TYPE DEFAULT NULL,
        id_vacc_nin                IN BOOLEAN := TRUE,
        id_patient_in              IN pat_vacc_adm.id_patient%TYPE DEFAULT NULL,
        id_patient_nin             IN BOOLEAN := TRUE,
        id_episode_in              IN pat_vacc_adm.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        flg_status_in              IN pat_vacc_adm.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        dt_cancel_in               IN pat_vacc_adm.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN pat_vacc_adm.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        notes_cancel_in            IN pat_vacc_adm.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        flg_time_in                IN pat_vacc_adm.flg_time%TYPE DEFAULT NULL,
        flg_time_nin               IN BOOLEAN := TRUE,
        takes_in                   IN pat_vacc_adm.takes%TYPE DEFAULT NULL,
        takes_nin                  IN BOOLEAN := TRUE,
        dosage_in                  IN pat_vacc_adm.dosage%TYPE DEFAULT NULL,
        dosage_nin                 IN BOOLEAN := TRUE,
        flg_orig_in                IN pat_vacc_adm.flg_orig%TYPE DEFAULT NULL,
        flg_orig_nin               IN BOOLEAN := TRUE,
        dt_presc_in                IN pat_vacc_adm.dt_presc%TYPE DEFAULT NULL,
        dt_presc_nin               IN BOOLEAN := TRUE,
        notes_presc_in             IN pat_vacc_adm.notes_presc%TYPE DEFAULT NULL,
        notes_presc_nin            IN BOOLEAN := TRUE,
        prof_presc_in              IN pat_vacc_adm.prof_presc%TYPE DEFAULT NULL,
        prof_presc_nin             IN BOOLEAN := TRUE,
        adw_last_update_in         IN pat_vacc_adm.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin        IN BOOLEAN := TRUE,
        id_episode_origin_in       IN pat_vacc_adm.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin      IN BOOLEAN := TRUE,
        id_episode_destination_in  IN pat_vacc_adm.id_episode_destination%TYPE DEFAULT NULL,
        id_episode_destination_nin IN BOOLEAN := TRUE,
        dt_immune_in               IN pat_vacc_adm.dt_immune%TYPE DEFAULT NULL,
        dt_immune_nin              IN BOOLEAN := TRUE,
        create_user_in             IN pat_vacc_adm.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN pat_vacc_adm.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN pat_vacc_adm.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN pat_vacc_adm.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN pat_vacc_adm.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN pat_vacc_adm.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        flg_type_date_in           IN pat_vacc_adm.flg_type_date%TYPE DEFAULT NULL,
        flg_type_date_nin          IN BOOLEAN := TRUE,
        id_vacc_manufacturer_in    IN pat_vacc_adm.id_vacc_manufacturer%TYPE DEFAULT NULL,
        id_vacc_manufacturer_nin   IN BOOLEAN := TRUE,
        code_mvx_in                IN pat_vacc_adm.code_mvx%TYPE DEFAULT NULL,
        code_mvx_nin               IN BOOLEAN := TRUE,
        dosage_unit_measure_in     IN pat_vacc_adm.dosage_unit_measure%TYPE DEFAULT NULL,
        dosage_unit_measure_nin    IN BOOLEAN := TRUE,
        dosage_admin_in            IN pat_vacc_adm.dosage_admin%TYPE DEFAULT NULL,
        dosage_admin_nin           IN BOOLEAN := TRUE,
        flg_reported_in            IN pat_vacc_adm.flg_reported%TYPE DEFAULT NULL,
        flg_reported_nin           IN BOOLEAN := TRUE,
        id_parent_in               IN pat_vacc_adm.id_parent%TYPE DEFAULT NULL,
        id_parent_nin              IN BOOLEAN := TRUE,
        where_in                   VARCHAR2,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_sql                      VARCHAR2(32767);
        l_rows_out                 table_varchar;
        l_dt_pat_vacc_adm_n        NUMBER(1);
        l_id_prof_writes_n         NUMBER(1);
        l_id_vacc_n                NUMBER(1);
        l_id_patient_n             NUMBER(1);
        l_id_episode_n             NUMBER(1);
        l_flg_status_n             NUMBER(1);
        l_dt_cancel_n              NUMBER(1);
        l_id_prof_cancel_n         NUMBER(1);
        l_notes_cancel_n           NUMBER(1);
        l_flg_time_n               NUMBER(1);
        l_takes_n                  NUMBER(1);
        l_dosage_n                 NUMBER(1);
        l_flg_orig_n               NUMBER(1);
        l_dt_presc_n               NUMBER(1);
        l_notes_presc_n            NUMBER(1);
        l_prof_presc_n             NUMBER(1);
        l_adw_last_update_n        NUMBER(1);
        l_id_episode_origin_n      NUMBER(1);
        l_id_episode_destination_n NUMBER(1);
        l_dt_immune_n              NUMBER(1);
        l_create_user_n            NUMBER(1);
        l_create_time_n            NUMBER(1);
        l_create_institution_n     NUMBER(1);
        l_update_user_n            NUMBER(1);
        l_update_time_n            NUMBER(1);
        l_update_institution_n     NUMBER(1);
        l_flg_type_date_n          NUMBER(1);
        l_id_vacc_manufacturer_n   NUMBER(1);
        l_code_mvx_n               NUMBER(1);
        l_dosage_unit_measure_n    NUMBER(1);
        l_dosage_admin_n           NUMBER(1);
        l_flg_reported_n           NUMBER(1);
        l_id_parent_n              NUMBER(1);
        id_pat_vacc_adm_in         pat_vacc_adm.id_pat_vacc_adm%TYPE;
    BEGIN
    
        l_dt_pat_vacc_adm_n        := sys.diutil.bool_to_int(dt_pat_vacc_adm_nin);
        l_id_prof_writes_n         := sys.diutil.bool_to_int(id_prof_writes_nin);
        l_id_vacc_n                := sys.diutil.bool_to_int(id_vacc_nin);
        l_id_patient_n             := sys.diutil.bool_to_int(id_patient_nin);
        l_id_episode_n             := sys.diutil.bool_to_int(id_episode_nin);
        l_flg_status_n             := sys.diutil.bool_to_int(flg_status_nin);
        l_dt_cancel_n              := sys.diutil.bool_to_int(dt_cancel_nin);
        l_id_prof_cancel_n         := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n           := sys.diutil.bool_to_int(notes_cancel_nin);
        l_flg_time_n               := sys.diutil.bool_to_int(flg_time_nin);
        l_takes_n                  := sys.diutil.bool_to_int(takes_nin);
        l_dosage_n                 := sys.diutil.bool_to_int(dosage_nin);
        l_flg_orig_n               := sys.diutil.bool_to_int(flg_orig_nin);
        l_dt_presc_n               := sys.diutil.bool_to_int(dt_presc_nin);
        l_notes_presc_n            := sys.diutil.bool_to_int(notes_presc_nin);
        l_prof_presc_n             := sys.diutil.bool_to_int(prof_presc_nin);
        l_adw_last_update_n        := sys.diutil.bool_to_int(adw_last_update_nin);
        l_id_episode_origin_n      := sys.diutil.bool_to_int(id_episode_origin_nin);
        l_id_episode_destination_n := sys.diutil.bool_to_int(id_episode_destination_nin);
        l_dt_immune_n              := sys.diutil.bool_to_int(dt_immune_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_type_date_n          := sys.diutil.bool_to_int(flg_type_date_nin);
        l_id_vacc_manufacturer_n   := sys.diutil.bool_to_int(id_vacc_manufacturer_nin);
        l_code_mvx_n               := sys.diutil.bool_to_int(code_mvx_nin);
        l_dosage_unit_measure_n    := sys.diutil.bool_to_int(dosage_unit_measure_nin);
        l_dosage_admin_n           := sys.diutil.bool_to_int(dosage_admin_nin);
        l_flg_reported_n           := sys.diutil.bool_to_int(flg_reported_nin);
        l_id_parent_n              := sys.diutil.bool_to_int(id_parent_nin);
    
        l_sql := 'UPDATE PAT_VACC_ADM SET ' || ' DT_PAT_VACC_ADM = decode (' || l_dt_pat_vacc_adm_n ||
                 ',0,:dt_pat_vacc_adm_in, NVL (:dt_pat_vacc_adm_in, DT_PAT_VACC_ADM)) ' || ',' ||
                 ' ID_PROF_WRITES = decode (' || l_id_prof_writes_n ||
                 ',0,:id_prof_writes_in, NVL (:id_prof_writes_in, ID_PROF_WRITES)) ' || ',' || ' ID_VACC = decode (' ||
                 l_id_vacc_n || ',0,:id_vacc_in, NVL (:id_vacc_in, ID_VACC)) ' || ',' || ' ID_PATIENT = decode (' ||
                 l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' DT_CANCEL = decode (' || l_dt_cancel_n || ',0,:dt_cancel_in, NVL (:dt_cancel_in, DT_CANCEL)) ' || ',' ||
                 ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                 ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) ' || ',' ||
                 ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                 ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) ' || ',' || ' FLG_TIME = decode (' ||
                 l_flg_time_n || ',0,:flg_time_in, NVL (:flg_time_in, FLG_TIME)) ' || ',' || ' TAKES = decode (' ||
                 l_takes_n || ',0,:takes_in, NVL (:takes_in, TAKES)) ' || ',' || ' DOSAGE = decode (' || l_dosage_n ||
                 ',0,:dosage_in, NVL (:dosage_in, DOSAGE)) ' || ',' || ' FLG_ORIG = decode (' || l_flg_orig_n ||
                 ',0,:flg_orig_in, NVL (:flg_orig_in, FLG_ORIG)) ' || ',' || ' DT_PRESC = decode (' || l_dt_presc_n ||
                 ',0,:dt_presc_in, NVL (:dt_presc_in, DT_PRESC)) ' || ',' || ' NOTES_PRESC = decode (' ||
                 l_notes_presc_n || ',0,:notes_presc_in, NVL (:notes_presc_in, NOTES_PRESC)) ' || ',' ||
                 ' PROF_PRESC = decode (' || l_prof_presc_n || ',0,:prof_presc_in, NVL (:prof_presc_in, PROF_PRESC)) ' || ',' ||
                 ' ADW_LAST_UPDATE = decode (' || l_adw_last_update_n ||
                 ',0,:adw_last_update_in, NVL (:adw_last_update_in, ADW_LAST_UPDATE)) ' || ',' ||
                 ' ID_EPISODE_ORIGIN = decode (' || l_id_episode_origin_n ||
                 ',0,:id_episode_origin_in, NVL (:id_episode_origin_in, ID_EPISODE_ORIGIN)) ' || ',' ||
                 ' ID_EPISODE_DESTINATION = decode (' || l_id_episode_destination_n ||
                 ',0,:id_episode_destination_in, NVL (:id_episode_destination_in, ID_EPISODE_DESTINATION)) ' || ',' ||
                 ' DT_IMMUNE = decode (' || l_dt_immune_n || ',0,:dt_immune_in, NVL (:dt_immune_in, DT_IMMUNE)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' FLG_TYPE_DATE = decode (' || l_flg_type_date_n ||
                 ',0,:flg_type_date_in, NVL (:flg_type_date_in, FLG_TYPE_DATE)) ' || ',' ||
                 ' ID_VACC_MANUFACTURER = decode (' || l_id_vacc_manufacturer_n ||
                 ',0,:id_vacc_manufacturer_in, NVL (:id_vacc_manufacturer_in, ID_VACC_MANUFACTURER)) ' || ',' ||
                 ' CODE_MVX = decode (' || l_code_mvx_n || ',0,:code_mvx_in, NVL (:code_mvx_in, CODE_MVX)) ' || ',' ||
                 ' DOSAGE_UNIT_MEASURE = decode (' || l_dosage_unit_measure_n ||
                 ',0,:dosage_unit_measure_in, NVL (:dosage_unit_measure_in, DOSAGE_UNIT_MEASURE)) ' || ',' ||
                 ' DOSAGE_ADMIN = decode (' || l_dosage_admin_n ||
                 ',0,:dosage_admin_in, NVL (:dosage_admin_in, DOSAGE_ADMIN)) ' || ',' || ' FLG_REPORTED = decode (' ||
                 l_flg_reported_n || ',0,:flg_reported_in, NVL (:flg_reported_in, FLG_REPORTED)) ' || ',' ||
                 ' ID_PARENT = decode (' || l_id_parent_n || ',0,:id_parent_in, NVL (:id_parent_in, ID_PARENT)) ' ||
                 ' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN dt_pat_vacc_adm_in, id_prof_writes_in, id_vacc_in, id_patient_in, id_episode_in, flg_status_in, dt_cancel_in, id_prof_cancel_in, notes_cancel_in, flg_time_in, takes_in, dosage_in, flg_orig_in, dt_presc_in, notes_presc_in, prof_presc_in, adw_last_update_in, id_episode_origin_in, id_episode_destination_in, dt_immune_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_type_date_in, id_vacc_manufacturer_in, code_mvx_in, dosage_unit_measure_in, dosage_admin_in, flg_reported_in, id_parent_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_VACC_ADM');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    IF l_name = 'PAVAA_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PAVAA_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PAVAA_PROF_CANCEL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'PAVAA_PROF_WRITES_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_WRITES',
                                                        value_in           => id_prof_writes_in);
                    END IF;
                    IF l_name = 'PVA_UME_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'DOSAGE_UNIT_MEASURE',
                                                        value_in           => dosage_unit_measure_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        dt_pat_vacc_adm_in         IN pat_vacc_adm.dt_pat_vacc_adm%TYPE DEFAULT NULL,
        dt_pat_vacc_adm_nin        IN BOOLEAN := TRUE,
        id_prof_writes_in          IN pat_vacc_adm.id_prof_writes%TYPE DEFAULT NULL,
        id_prof_writes_nin         IN BOOLEAN := TRUE,
        id_vacc_in                 IN pat_vacc_adm.id_vacc%TYPE DEFAULT NULL,
        id_vacc_nin                IN BOOLEAN := TRUE,
        id_patient_in              IN pat_vacc_adm.id_patient%TYPE DEFAULT NULL,
        id_patient_nin             IN BOOLEAN := TRUE,
        id_episode_in              IN pat_vacc_adm.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        flg_status_in              IN pat_vacc_adm.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        dt_cancel_in               IN pat_vacc_adm.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN pat_vacc_adm.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        notes_cancel_in            IN pat_vacc_adm.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin           IN BOOLEAN := TRUE,
        flg_time_in                IN pat_vacc_adm.flg_time%TYPE DEFAULT NULL,
        flg_time_nin               IN BOOLEAN := TRUE,
        takes_in                   IN pat_vacc_adm.takes%TYPE DEFAULT NULL,
        takes_nin                  IN BOOLEAN := TRUE,
        dosage_in                  IN pat_vacc_adm.dosage%TYPE DEFAULT NULL,
        dosage_nin                 IN BOOLEAN := TRUE,
        flg_orig_in                IN pat_vacc_adm.flg_orig%TYPE DEFAULT NULL,
        flg_orig_nin               IN BOOLEAN := TRUE,
        dt_presc_in                IN pat_vacc_adm.dt_presc%TYPE DEFAULT NULL,
        dt_presc_nin               IN BOOLEAN := TRUE,
        notes_presc_in             IN pat_vacc_adm.notes_presc%TYPE DEFAULT NULL,
        notes_presc_nin            IN BOOLEAN := TRUE,
        prof_presc_in              IN pat_vacc_adm.prof_presc%TYPE DEFAULT NULL,
        prof_presc_nin             IN BOOLEAN := TRUE,
        adw_last_update_in         IN pat_vacc_adm.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin        IN BOOLEAN := TRUE,
        id_episode_origin_in       IN pat_vacc_adm.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin      IN BOOLEAN := TRUE,
        id_episode_destination_in  IN pat_vacc_adm.id_episode_destination%TYPE DEFAULT NULL,
        id_episode_destination_nin IN BOOLEAN := TRUE,
        dt_immune_in               IN pat_vacc_adm.dt_immune%TYPE DEFAULT NULL,
        dt_immune_nin              IN BOOLEAN := TRUE,
        create_user_in             IN pat_vacc_adm.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN pat_vacc_adm.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN pat_vacc_adm.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN pat_vacc_adm.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN pat_vacc_adm.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN pat_vacc_adm.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        flg_type_date_in           IN pat_vacc_adm.flg_type_date%TYPE DEFAULT NULL,
        flg_type_date_nin          IN BOOLEAN := TRUE,
        id_vacc_manufacturer_in    IN pat_vacc_adm.id_vacc_manufacturer%TYPE DEFAULT NULL,
        id_vacc_manufacturer_nin   IN BOOLEAN := TRUE,
        code_mvx_in                IN pat_vacc_adm.code_mvx%TYPE DEFAULT NULL,
        code_mvx_nin               IN BOOLEAN := TRUE,
        dosage_unit_measure_in     IN pat_vacc_adm.dosage_unit_measure%TYPE DEFAULT NULL,
        dosage_unit_measure_nin    IN BOOLEAN := TRUE,
        dosage_admin_in            IN pat_vacc_adm.dosage_admin%TYPE DEFAULT NULL,
        dosage_admin_nin           IN BOOLEAN := TRUE,
        flg_reported_in            IN pat_vacc_adm.flg_reported%TYPE DEFAULT NULL,
        flg_reported_nin           IN BOOLEAN := TRUE,
        id_parent_in               IN pat_vacc_adm.id_parent%TYPE DEFAULT NULL,
        id_parent_nin              IN BOOLEAN := TRUE,
        where_in                   VARCHAR2,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(dt_pat_vacc_adm_in         => dt_pat_vacc_adm_in,
            dt_pat_vacc_adm_nin        => dt_pat_vacc_adm_nin,
            id_prof_writes_in          => id_prof_writes_in,
            id_prof_writes_nin         => id_prof_writes_nin,
            id_vacc_in                 => id_vacc_in,
            id_vacc_nin                => id_vacc_nin,
            id_patient_in              => id_patient_in,
            id_patient_nin             => id_patient_nin,
            id_episode_in              => id_episode_in,
            id_episode_nin             => id_episode_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            dt_cancel_in               => dt_cancel_in,
            dt_cancel_nin              => dt_cancel_nin,
            id_prof_cancel_in          => id_prof_cancel_in,
            id_prof_cancel_nin         => id_prof_cancel_nin,
            notes_cancel_in            => notes_cancel_in,
            notes_cancel_nin           => notes_cancel_nin,
            flg_time_in                => flg_time_in,
            flg_time_nin               => flg_time_nin,
            takes_in                   => takes_in,
            takes_nin                  => takes_nin,
            dosage_in                  => dosage_in,
            dosage_nin                 => dosage_nin,
            flg_orig_in                => flg_orig_in,
            flg_orig_nin               => flg_orig_nin,
            dt_presc_in                => dt_presc_in,
            dt_presc_nin               => dt_presc_nin,
            notes_presc_in             => notes_presc_in,
            notes_presc_nin            => notes_presc_nin,
            prof_presc_in              => prof_presc_in,
            prof_presc_nin             => prof_presc_nin,
            adw_last_update_in         => adw_last_update_in,
            adw_last_update_nin        => adw_last_update_nin,
            id_episode_origin_in       => id_episode_origin_in,
            id_episode_origin_nin      => id_episode_origin_nin,
            id_episode_destination_in  => id_episode_destination_in,
            id_episode_destination_nin => id_episode_destination_nin,
            dt_immune_in               => dt_immune_in,
            dt_immune_nin              => dt_immune_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            flg_type_date_in           => flg_type_date_in,
            flg_type_date_nin          => flg_type_date_nin,
            id_vacc_manufacturer_in    => id_vacc_manufacturer_in,
            id_vacc_manufacturer_nin   => id_vacc_manufacturer_nin,
            code_mvx_in                => code_mvx_in,
            code_mvx_nin               => code_mvx_nin,
            dosage_unit_measure_in     => dosage_unit_measure_in,
            dosage_unit_measure_nin    => dosage_unit_measure_nin,
            dosage_admin_in            => dosage_admin_in,
            dosage_admin_nin           => dosage_admin_nin,
            flg_reported_in            => flg_reported_in,
            flg_reported_nin           => flg_reported_nin,
            id_parent_in               => id_parent_in,
            id_parent_nin              => id_parent_nin,
            where_in                   => where_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_vacc_adm%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_vacc_adm_in        => rec_in.id_pat_vacc_adm,
            dt_pat_vacc_adm_in        => rec_in.dt_pat_vacc_adm,
            id_prof_writes_in         => rec_in.id_prof_writes,
            id_vacc_in                => rec_in.id_vacc,
            id_patient_in             => rec_in.id_patient,
            id_episode_in             => rec_in.id_episode,
            flg_status_in             => rec_in.flg_status,
            dt_cancel_in              => rec_in.dt_cancel,
            id_prof_cancel_in         => rec_in.id_prof_cancel,
            notes_cancel_in           => rec_in.notes_cancel,
            flg_time_in               => rec_in.flg_time,
            takes_in                  => rec_in.takes,
            dosage_in                 => rec_in.dosage,
            flg_orig_in               => rec_in.flg_orig,
            dt_presc_in               => rec_in.dt_presc,
            notes_presc_in            => rec_in.notes_presc,
            prof_presc_in             => rec_in.prof_presc,
            adw_last_update_in        => rec_in.adw_last_update,
            id_episode_origin_in      => rec_in.id_episode_origin,
            id_episode_destination_in => rec_in.id_episode_destination,
            dt_immune_in              => rec_in.dt_immune,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            flg_type_date_in          => rec_in.flg_type_date,
            id_vacc_manufacturer_in   => rec_in.id_vacc_manufacturer,
            code_mvx_in               => rec_in.code_mvx,
            dosage_unit_measure_in    => rec_in.dosage_unit_measure,
            dosage_admin_in           => rec_in.dosage_admin,
            flg_reported_in           => rec_in.flg_reported,
            id_parent_in              => rec_in.id_parent
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_vacc_adm%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_vacc_adm_in        => rec_in.id_pat_vacc_adm,
            dt_pat_vacc_adm_in        => rec_in.dt_pat_vacc_adm,
            id_prof_writes_in         => rec_in.id_prof_writes,
            id_vacc_in                => rec_in.id_vacc,
            id_patient_in             => rec_in.id_patient,
            id_episode_in             => rec_in.id_episode,
            flg_status_in             => rec_in.flg_status,
            dt_cancel_in              => rec_in.dt_cancel,
            id_prof_cancel_in         => rec_in.id_prof_cancel,
            notes_cancel_in           => rec_in.notes_cancel,
            flg_time_in               => rec_in.flg_time,
            takes_in                  => rec_in.takes,
            dosage_in                 => rec_in.dosage,
            flg_orig_in               => rec_in.flg_orig,
            dt_presc_in               => rec_in.dt_presc,
            notes_presc_in            => rec_in.notes_presc,
            prof_presc_in             => rec_in.prof_presc,
            adw_last_update_in        => rec_in.adw_last_update,
            id_episode_origin_in      => rec_in.id_episode_origin,
            id_episode_destination_in => rec_in.id_episode_destination,
            dt_immune_in              => rec_in.dt_immune,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            flg_type_date_in          => rec_in.flg_type_date,
            id_vacc_manufacturer_in   => rec_in.id_vacc_manufacturer,
            code_mvx_in               => rec_in.code_mvx,
            dosage_unit_measure_in    => rec_in.dosage_unit_measure,
            dosage_admin_in           => rec_in.dosage_admin,
            flg_reported_in           => rec_in.flg_reported,
            id_parent_in              => rec_in.id_parent
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_pat_vacc_adm_in        IN pat_vacc_adm.id_pat_vacc_adm%TYPE,
        dt_pat_vacc_adm_in        IN pat_vacc_adm.dt_pat_vacc_adm%TYPE DEFAULT NULL,
        id_prof_writes_in         IN pat_vacc_adm.id_prof_writes%TYPE DEFAULT NULL,
        id_vacc_in                IN pat_vacc_adm.id_vacc%TYPE DEFAULT NULL,
        id_patient_in             IN pat_vacc_adm.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN pat_vacc_adm.id_episode%TYPE DEFAULT NULL,
        flg_status_in             IN pat_vacc_adm.flg_status%TYPE DEFAULT NULL,
        dt_cancel_in              IN pat_vacc_adm.dt_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_vacc_adm.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_vacc_adm.notes_cancel%TYPE DEFAULT NULL,
        flg_time_in               IN pat_vacc_adm.flg_time%TYPE DEFAULT NULL,
        takes_in                  IN pat_vacc_adm.takes%TYPE DEFAULT NULL,
        dosage_in                 IN pat_vacc_adm.dosage%TYPE DEFAULT NULL,
        flg_orig_in               IN pat_vacc_adm.flg_orig%TYPE DEFAULT NULL,
        dt_presc_in               IN pat_vacc_adm.dt_presc%TYPE DEFAULT NULL,
        notes_presc_in            IN pat_vacc_adm.notes_presc%TYPE DEFAULT NULL,
        prof_presc_in             IN pat_vacc_adm.prof_presc%TYPE DEFAULT NULL,
        adw_last_update_in        IN pat_vacc_adm.adw_last_update%TYPE DEFAULT NULL,
        id_episode_origin_in      IN pat_vacc_adm.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in IN pat_vacc_adm.id_episode_destination%TYPE DEFAULT NULL,
        dt_immune_in              IN pat_vacc_adm.dt_immune%TYPE DEFAULT NULL,
        create_user_in            IN pat_vacc_adm.create_user%TYPE DEFAULT NULL,
        create_time_in            IN pat_vacc_adm.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN pat_vacc_adm.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN pat_vacc_adm.update_user%TYPE DEFAULT NULL,
        update_time_in            IN pat_vacc_adm.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN pat_vacc_adm.update_institution%TYPE DEFAULT NULL,
        flg_type_date_in          IN pat_vacc_adm.flg_type_date%TYPE DEFAULT NULL,
        id_vacc_manufacturer_in   IN pat_vacc_adm.id_vacc_manufacturer%TYPE DEFAULT NULL,
        code_mvx_in               IN pat_vacc_adm.code_mvx%TYPE DEFAULT NULL,
        dosage_unit_measure_in    IN pat_vacc_adm.dosage_unit_measure%TYPE DEFAULT NULL,
        dosage_admin_in           IN pat_vacc_adm.dosage_admin%TYPE DEFAULT NULL,
        flg_reported_in           IN pat_vacc_adm.flg_reported%TYPE DEFAULT NULL,
        id_parent_in              IN pat_vacc_adm.id_parent%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_vacc_adm_in        => id_pat_vacc_adm_in,
            dt_pat_vacc_adm_in        => dt_pat_vacc_adm_in,
            id_prof_writes_in         => id_prof_writes_in,
            id_vacc_in                => id_vacc_in,
            id_patient_in             => id_patient_in,
            id_episode_in             => id_episode_in,
            flg_status_in             => flg_status_in,
            dt_cancel_in              => dt_cancel_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            notes_cancel_in           => notes_cancel_in,
            flg_time_in               => flg_time_in,
            takes_in                  => takes_in,
            dosage_in                 => dosage_in,
            flg_orig_in               => flg_orig_in,
            dt_presc_in               => dt_presc_in,
            notes_presc_in            => notes_presc_in,
            prof_presc_in             => prof_presc_in,
            adw_last_update_in        => adw_last_update_in,
            id_episode_origin_in      => id_episode_origin_in,
            id_episode_destination_in => id_episode_destination_in,
            dt_immune_in              => dt_immune_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            flg_type_date_in          => flg_type_date_in,
            id_vacc_manufacturer_in   => id_vacc_manufacturer_in,
            code_mvx_in               => code_mvx_in,
            dosage_unit_measure_in    => dosage_unit_measure_in,
            dosage_admin_in           => dosage_admin_in,
            flg_reported_in           => flg_reported_in,
            id_parent_in              => id_parent_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_pat_vacc_adm_in        => id_pat_vacc_adm_in,
                dt_pat_vacc_adm_in        => dt_pat_vacc_adm_in,
                id_prof_writes_in         => id_prof_writes_in,
                id_vacc_in                => id_vacc_in,
                id_patient_in             => id_patient_in,
                id_episode_in             => id_episode_in,
                flg_status_in             => flg_status_in,
                dt_cancel_in              => dt_cancel_in,
                id_prof_cancel_in         => id_prof_cancel_in,
                notes_cancel_in           => notes_cancel_in,
                flg_time_in               => flg_time_in,
                takes_in                  => takes_in,
                dosage_in                 => dosage_in,
                flg_orig_in               => flg_orig_in,
                dt_presc_in               => dt_presc_in,
                notes_presc_in            => notes_presc_in,
                prof_presc_in             => prof_presc_in,
                adw_last_update_in        => adw_last_update_in,
                id_episode_origin_in      => id_episode_origin_in,
                id_episode_destination_in => id_episode_destination_in,
                dt_immune_in              => dt_immune_in,
                create_user_in            => create_user_in,
                create_time_in            => create_time_in,
                create_institution_in     => create_institution_in,
                update_user_in            => update_user_in,
                update_time_in            => update_time_in,
                update_institution_in     => update_institution_in,
                flg_type_date_in          => flg_type_date_in,
                id_vacc_manufacturer_in   => id_vacc_manufacturer_in,
                code_mvx_in               => code_mvx_in,
                dosage_unit_measure_in    => dosage_unit_measure_in,
                dosage_admin_in           => dosage_admin_in,
                flg_reported_in           => flg_reported_in,
                id_parent_in              => id_parent_in,
                handle_error_in           => handle_error_in,
                rows_out                  => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_pat_vacc_adm_in        IN pat_vacc_adm.id_pat_vacc_adm%TYPE,
        dt_pat_vacc_adm_in        IN pat_vacc_adm.dt_pat_vacc_adm%TYPE DEFAULT NULL,
        id_prof_writes_in         IN pat_vacc_adm.id_prof_writes%TYPE DEFAULT NULL,
        id_vacc_in                IN pat_vacc_adm.id_vacc%TYPE DEFAULT NULL,
        id_patient_in             IN pat_vacc_adm.id_patient%TYPE DEFAULT NULL,
        id_episode_in             IN pat_vacc_adm.id_episode%TYPE DEFAULT NULL,
        flg_status_in             IN pat_vacc_adm.flg_status%TYPE DEFAULT NULL,
        dt_cancel_in              IN pat_vacc_adm.dt_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN pat_vacc_adm.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in           IN pat_vacc_adm.notes_cancel%TYPE DEFAULT NULL,
        flg_time_in               IN pat_vacc_adm.flg_time%TYPE DEFAULT NULL,
        takes_in                  IN pat_vacc_adm.takes%TYPE DEFAULT NULL,
        dosage_in                 IN pat_vacc_adm.dosage%TYPE DEFAULT NULL,
        flg_orig_in               IN pat_vacc_adm.flg_orig%TYPE DEFAULT NULL,
        dt_presc_in               IN pat_vacc_adm.dt_presc%TYPE DEFAULT NULL,
        notes_presc_in            IN pat_vacc_adm.notes_presc%TYPE DEFAULT NULL,
        prof_presc_in             IN pat_vacc_adm.prof_presc%TYPE DEFAULT NULL,
        adw_last_update_in        IN pat_vacc_adm.adw_last_update%TYPE DEFAULT NULL,
        id_episode_origin_in      IN pat_vacc_adm.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in IN pat_vacc_adm.id_episode_destination%TYPE DEFAULT NULL,
        dt_immune_in              IN pat_vacc_adm.dt_immune%TYPE DEFAULT NULL,
        create_user_in            IN pat_vacc_adm.create_user%TYPE DEFAULT NULL,
        create_time_in            IN pat_vacc_adm.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN pat_vacc_adm.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN pat_vacc_adm.update_user%TYPE DEFAULT NULL,
        update_time_in            IN pat_vacc_adm.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN pat_vacc_adm.update_institution%TYPE DEFAULT NULL,
        flg_type_date_in          IN pat_vacc_adm.flg_type_date%TYPE DEFAULT NULL,
        id_vacc_manufacturer_in   IN pat_vacc_adm.id_vacc_manufacturer%TYPE DEFAULT NULL,
        code_mvx_in               IN pat_vacc_adm.code_mvx%TYPE DEFAULT NULL,
        dosage_unit_measure_in    IN pat_vacc_adm.dosage_unit_measure%TYPE DEFAULT NULL,
        dosage_admin_in           IN pat_vacc_adm.dosage_admin%TYPE DEFAULT NULL,
        flg_reported_in           IN pat_vacc_adm.flg_reported%TYPE DEFAULT NULL,
        id_parent_in              IN pat_vacc_adm.id_parent%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_pat_vacc_adm_in,
                dt_pat_vacc_adm_in,
                id_prof_writes_in,
                id_vacc_in,
                id_patient_in,
                id_episode_in,
                flg_status_in,
                dt_cancel_in,
                id_prof_cancel_in,
                notes_cancel_in,
                flg_time_in,
                takes_in,
                dosage_in,
                flg_orig_in,
                dt_presc_in,
                notes_presc_in,
                prof_presc_in,
                adw_last_update_in,
                id_episode_origin_in,
                id_episode_destination_in,
                dt_immune_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                flg_type_date_in,
                id_vacc_manufacturer_in,
                code_mvx_in,
                dosage_unit_measure_in,
                dosage_admin_in,
                flg_reported_in,
                id_parent_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN pat_vacc_adm_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_pat_vacc_adm        id_pat_vacc_adm_cc;
        l_dt_pat_vacc_adm        dt_pat_vacc_adm_cc;
        l_id_prof_writes         id_prof_writes_cc;
        l_id_vacc                id_vacc_cc;
        l_id_patient             id_patient_cc;
        l_id_episode             id_episode_cc;
        l_flg_status             flg_status_cc;
        l_dt_cancel              dt_cancel_cc;
        l_id_prof_cancel         id_prof_cancel_cc;
        l_notes_cancel           notes_cancel_cc;
        l_flg_time               flg_time_cc;
        l_takes                  takes_cc;
        l_dosage                 dosage_cc;
        l_flg_orig               flg_orig_cc;
        l_dt_presc               dt_presc_cc;
        l_notes_presc            notes_presc_cc;
        l_prof_presc             prof_presc_cc;
        l_adw_last_update        adw_last_update_cc;
        l_id_episode_origin      id_episode_origin_cc;
        l_id_episode_destination id_episode_destination_cc;
        l_dt_immune              dt_immune_cc;
        l_create_user            create_user_cc;
        l_create_time            create_time_cc;
        l_create_institution     create_institution_cc;
        l_update_user            update_user_cc;
        l_update_time            update_time_cc;
        l_update_institution     update_institution_cc;
        l_flg_type_date          flg_type_date_cc;
        l_id_vacc_manufacturer   id_vacc_manufacturer_cc;
        l_code_mvx               code_mvx_cc;
        l_dosage_unit_measure    dosage_unit_measure_cc;
        l_dosage_admin           dosage_admin_cc;
        l_flg_reported           flg_reported_cc;
        l_id_parent              id_parent_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_pat_vacc_adm(i) := col_in(i).id_pat_vacc_adm;
            l_dt_pat_vacc_adm(i) := col_in(i).dt_pat_vacc_adm;
            l_id_prof_writes(i) := col_in(i).id_prof_writes;
            l_id_vacc(i) := col_in(i).id_vacc;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_episode(i) := col_in(i).id_episode;
            l_flg_status(i) := col_in(i).flg_status;
            l_dt_cancel(i) := col_in(i).dt_cancel;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_flg_time(i) := col_in(i).flg_time;
            l_takes(i) := col_in(i).takes;
            l_dosage(i) := col_in(i).dosage;
            l_flg_orig(i) := col_in(i).flg_orig;
            l_dt_presc(i) := col_in(i).dt_presc;
            l_notes_presc(i) := col_in(i).notes_presc;
            l_prof_presc(i) := col_in(i).prof_presc;
            l_adw_last_update(i) := col_in(i).adw_last_update;
            l_id_episode_origin(i) := col_in(i).id_episode_origin;
            l_id_episode_destination(i) := col_in(i).id_episode_destination;
            l_dt_immune(i) := col_in(i).dt_immune;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_flg_type_date(i) := col_in(i).flg_type_date;
            l_id_vacc_manufacturer(i) := col_in(i).id_vacc_manufacturer;
            l_code_mvx(i) := col_in(i).code_mvx;
            l_dosage_unit_measure(i) := col_in(i).dosage_unit_measure;
            l_dosage_admin(i) := col_in(i).dosage_admin;
            l_flg_reported(i) := col_in(i).flg_reported;
            l_id_parent(i) := col_in(i).id_parent;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE pat_vacc_adm
                   SET dt_pat_vacc_adm        = nvl(l_dt_pat_vacc_adm(i), dt_pat_vacc_adm),
                       id_prof_writes         = nvl(l_id_prof_writes(i), id_prof_writes),
                       id_vacc                = nvl(l_id_vacc(i), id_vacc),
                       id_patient             = nvl(l_id_patient(i), id_patient),
                       id_episode             = nvl(l_id_episode(i), id_episode),
                       flg_status             = nvl(l_flg_status(i), flg_status),
                       dt_cancel              = nvl(l_dt_cancel(i), dt_cancel),
                       id_prof_cancel         = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       notes_cancel           = nvl(l_notes_cancel(i), notes_cancel),
                       flg_time               = nvl(l_flg_time(i), flg_time),
                       takes                  = nvl(l_takes(i), takes),
                       dosage                 = nvl(l_dosage(i), dosage),
                       flg_orig               = nvl(l_flg_orig(i), flg_orig),
                       dt_presc               = nvl(l_dt_presc(i), dt_presc),
                       notes_presc            = nvl(l_notes_presc(i), notes_presc),
                       prof_presc             = nvl(l_prof_presc(i), prof_presc),
                       adw_last_update        = nvl(l_adw_last_update(i), adw_last_update),
                       id_episode_origin      = nvl(l_id_episode_origin(i), id_episode_origin),
                       id_episode_destination = nvl(l_id_episode_destination(i), id_episode_destination),
                       dt_immune              = nvl(l_dt_immune(i), dt_immune),
                       create_user            = nvl(l_create_user(i), create_user),
                       create_time            = nvl(l_create_time(i), create_time),
                       create_institution     = nvl(l_create_institution(i), create_institution),
                       update_user            = nvl(l_update_user(i), update_user),
                       update_time            = nvl(l_update_time(i), update_time),
                       update_institution     = nvl(l_update_institution(i), update_institution),
                       flg_type_date          = nvl(l_flg_type_date(i), flg_type_date),
                       id_vacc_manufacturer   = nvl(l_id_vacc_manufacturer(i), id_vacc_manufacturer),
                       code_mvx               = nvl(l_code_mvx(i), code_mvx),
                       dosage_unit_measure    = nvl(l_dosage_unit_measure(i), dosage_unit_measure),
                       dosage_admin           = nvl(l_dosage_admin(i), dosage_admin),
                       flg_reported           = nvl(l_flg_reported(i), flg_reported),
                       id_parent              = nvl(l_id_parent(i), id_parent)
                 WHERE id_pat_vacc_adm = l_id_pat_vacc_adm(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE pat_vacc_adm
                   SET dt_pat_vacc_adm        = l_dt_pat_vacc_adm(i),
                       id_prof_writes         = l_id_prof_writes(i),
                       id_vacc                = l_id_vacc(i),
                       id_patient             = l_id_patient(i),
                       id_episode             = l_id_episode(i),
                       flg_status             = l_flg_status(i),
                       dt_cancel              = l_dt_cancel(i),
                       id_prof_cancel         = l_id_prof_cancel(i),
                       notes_cancel           = l_notes_cancel(i),
                       flg_time               = l_flg_time(i),
                       takes                  = l_takes(i),
                       dosage                 = l_dosage(i),
                       flg_orig               = l_flg_orig(i),
                       dt_presc               = l_dt_presc(i),
                       notes_presc            = l_notes_presc(i),
                       prof_presc             = l_prof_presc(i),
                       adw_last_update        = l_adw_last_update(i),
                       id_episode_origin      = l_id_episode_origin(i),
                       id_episode_destination = l_id_episode_destination(i),
                       dt_immune              = l_dt_immune(i),
                       create_user            = l_create_user(i),
                       create_time            = l_create_time(i),
                       create_institution     = l_create_institution(i),
                       update_user            = l_update_user(i),
                       update_time            = l_update_time(i),
                       update_institution     = l_update_institution(i),
                       flg_type_date          = l_flg_type_date(i),
                       id_vacc_manufacturer   = l_id_vacc_manufacturer(i),
                       code_mvx               = l_code_mvx(i),
                       dosage_unit_measure    = l_dosage_unit_measure(i),
                       dosage_admin           = l_dosage_admin(i),
                       flg_reported           = l_flg_reported(i),
                       id_parent              = l_id_parent(i)
                 WHERE id_pat_vacc_adm = l_id_pat_vacc_adm(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN pat_vacc_adm_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE PAT_VACC_ADM
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE PAT_VACC_ADM
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE PAT_VACC_ADM set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE PAT_VACC_ADM set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_pat_vacc_adm_in IN pat_vacc_adm.id_pat_vacc_adm%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_vacc_adm
         WHERE id_pat_vacc_adm = id_pat_vacc_adm_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_pat_vacc_adm_in IN pat_vacc_adm.id_pat_vacc_adm%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_pat_vacc_adm_in => id_pat_vacc_adm_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_PAT_VACC_ADM
    PROCEDURE del_id_pat_vacc_adm
    (
        id_pat_vacc_adm_in IN pat_vacc_adm.id_pat_vacc_adm%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_vacc_adm
         WHERE id_pat_vacc_adm = id_pat_vacc_adm_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_pat_vacc_adm;

    -- Delete all rows for primary key column ID_PAT_VACC_ADM
    PROCEDURE del_id_pat_vacc_adm
    (
        id_pat_vacc_adm_in IN pat_vacc_adm.id_pat_vacc_adm%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_pat_vacc_adm(id_pat_vacc_adm_in => id_pat_vacc_adm_in,
                            handle_error_in    => handle_error_in,
                            rows_out           => rows_out);
    END del_id_pat_vacc_adm;

    PROCEDURE del_pavaa_epis_fk
    (
        id_episode_in   IN pat_vacc_adm.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_vacc_adm
         WHERE id_episode = del_pavaa_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pavaa_epis_fk;

    PROCEDURE del_pavaa_epis_fk
    (
        id_episode_in   IN pat_vacc_adm.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pavaa_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pavaa_epis_fk;

    PROCEDURE del_pavaa_pat_fk
    (
        id_patient_in   IN pat_vacc_adm.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_vacc_adm
         WHERE id_patient = del_pavaa_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pavaa_pat_fk;

    PROCEDURE del_pavaa_pat_fk
    (
        id_patient_in   IN pat_vacc_adm.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pavaa_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_pavaa_pat_fk;

    PROCEDURE del_pavaa_prof_cancel_fk
    (
        id_prof_cancel_in IN pat_vacc_adm.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_vacc_adm
         WHERE id_prof_cancel = del_pavaa_prof_cancel_fk.id_prof_cancel_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pavaa_prof_cancel_fk;

    PROCEDURE del_pavaa_prof_cancel_fk
    (
        id_prof_cancel_in IN pat_vacc_adm.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pavaa_prof_cancel_fk(id_prof_cancel_in => id_prof_cancel_in,
                                 handle_error_in   => handle_error_in,
                                 rows_out          => rows_out);
    END del_pavaa_prof_cancel_fk;

    PROCEDURE del_pavaa_prof_writes_fk
    (
        id_prof_writes_in IN pat_vacc_adm.id_prof_writes%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_vacc_adm
         WHERE id_prof_writes = del_pavaa_prof_writes_fk.id_prof_writes_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pavaa_prof_writes_fk;

    PROCEDURE del_pavaa_prof_writes_fk
    (
        id_prof_writes_in IN pat_vacc_adm.id_prof_writes%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pavaa_prof_writes_fk(id_prof_writes_in => id_prof_writes_in,
                                 handle_error_in   => handle_error_in,
                                 rows_out          => rows_out);
    END del_pavaa_prof_writes_fk;

    PROCEDURE del_pva_ume_fk
    (
        dosage_unit_measure_in IN pat_vacc_adm.dosage_unit_measure%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_vacc_adm
         WHERE dosage_unit_measure = del_pva_ume_fk.dosage_unit_measure_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_pva_ume_fk;

    PROCEDURE del_pva_ume_fk
    (
        dosage_unit_measure_in IN pat_vacc_adm.dosage_unit_measure%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pva_ume_fk(dosage_unit_measure_in => dosage_unit_measure_in,
                       handle_error_in        => handle_error_in,
                       rows_out               => rows_out);
    END del_pva_ume_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM PAT_VACC_ADM';
        ELSE
            RETURN 'DELETE FROM PAT_VACC_ADM WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_VACC_ADM');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_VACC_ADM');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(pat_vacc_adm_inout IN OUT pat_vacc_adm%ROWTYPE) IS
    BEGIN
        pat_vacc_adm_inout.id_pat_vacc_adm        := NULL;
        pat_vacc_adm_inout.dt_pat_vacc_adm        := NULL;
        pat_vacc_adm_inout.id_prof_writes         := NULL;
        pat_vacc_adm_inout.id_vacc                := NULL;
        pat_vacc_adm_inout.id_patient             := NULL;
        pat_vacc_adm_inout.id_episode             := NULL;
        pat_vacc_adm_inout.flg_status             := NULL;
        pat_vacc_adm_inout.dt_cancel              := NULL;
        pat_vacc_adm_inout.id_prof_cancel         := NULL;
        pat_vacc_adm_inout.notes_cancel           := NULL;
        pat_vacc_adm_inout.flg_time               := NULL;
        pat_vacc_adm_inout.takes                  := NULL;
        pat_vacc_adm_inout.dosage                 := NULL;
        pat_vacc_adm_inout.flg_orig               := NULL;
        pat_vacc_adm_inout.dt_presc               := NULL;
        pat_vacc_adm_inout.notes_presc            := NULL;
        pat_vacc_adm_inout.prof_presc             := NULL;
        pat_vacc_adm_inout.adw_last_update        := NULL;
        pat_vacc_adm_inout.id_episode_origin      := NULL;
        pat_vacc_adm_inout.id_episode_destination := NULL;
        pat_vacc_adm_inout.dt_immune              := NULL;
        pat_vacc_adm_inout.create_user            := NULL;
        pat_vacc_adm_inout.create_time            := NULL;
        pat_vacc_adm_inout.create_institution     := NULL;
        pat_vacc_adm_inout.update_user            := NULL;
        pat_vacc_adm_inout.update_time            := NULL;
        pat_vacc_adm_inout.update_institution     := NULL;
        pat_vacc_adm_inout.flg_type_date          := NULL;
        pat_vacc_adm_inout.id_vacc_manufacturer   := NULL;
        pat_vacc_adm_inout.code_mvx               := NULL;
        pat_vacc_adm_inout.dosage_unit_measure    := NULL;
        pat_vacc_adm_inout.dosage_admin           := NULL;
        pat_vacc_adm_inout.flg_reported           := NULL;
        pat_vacc_adm_inout.id_parent              := NULL;
    END initrec;

    FUNCTION initrec RETURN pat_vacc_adm%ROWTYPE IS
        l_pat_vacc_adm pat_vacc_adm%ROWTYPE;
    BEGIN
        RETURN l_pat_vacc_adm;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN pat_vacc_adm_tc IS
        data pat_vacc_adm_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM pat_vacc_adm
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN pat_vacc_adm_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data pat_vacc_adm_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_pat_vacc_adm;
/
