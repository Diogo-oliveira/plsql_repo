/*-- Last Change Revision: $Rev: 2028242 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:37 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_interv_prescription
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: June 17, 2015 15:55:56
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_interv_prescription_in      IN interv_prescription.id_interv_prescription%TYPE,
        id_episode_in                  IN interv_prescription.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN interv_prescription.id_professional%TYPE DEFAULT NULL,
        id_institution_in              IN interv_prescription.id_institution%TYPE DEFAULT NULL,
        flg_time_in                    IN interv_prescription.flg_time%TYPE DEFAULT NULL,
        flg_status_in                  IN interv_prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN interv_prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN interv_prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_in                       IN interv_prescription.notes%TYPE DEFAULT NULL,
        id_episode_origin_in           IN interv_prescription.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in      IN interv_prescription.id_episode_destination%TYPE DEFAULT NULL,
        id_prev_episode_in             IN interv_prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_interv_prescription_tstz_in IN interv_prescription.dt_interv_prescription_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in               IN interv_prescription.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN interv_prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_patient_in                  IN interv_prescription.id_patient%TYPE DEFAULT NULL,
        create_user_in                 IN interv_prescription.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN interv_prescription.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN interv_prescription.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN interv_prescription.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN interv_prescription.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN interv_prescription.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN interv_prescription.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN interv_prescription.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO interv_prescription
            (id_interv_prescription,
             id_episode,
             id_professional,
             id_institution,
             flg_time,
             flg_status,
             id_prof_cancel,
             notes_cancel,
             notes,
             id_episode_origin,
             id_episode_destination,
             id_prev_episode,
             dt_interv_prescription_tstz,
             dt_begin_tstz,
             dt_cancel_tstz,
             id_patient,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_prof_last_update,
             dt_last_update_tstz)
        VALUES
            (id_interv_prescription_in,
             id_episode_in,
             id_professional_in,
             id_institution_in,
             flg_time_in,
             flg_status_in,
             id_prof_cancel_in,
             notes_cancel_in,
             notes_in,
             id_episode_origin_in,
             id_episode_destination_in,
             id_prev_episode_in,
             dt_interv_prescription_tstz_in,
             dt_begin_tstz_in,
             dt_cancel_tstz_in,
             id_patient_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_prof_last_update_in,
             dt_last_update_tstz_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'INTERV_PRESCRIPTION');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    IF l_name = 'PRESC_EPIS_DEST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_DESTINATION',
                                                        value_in           => id_episode_destination_in);
                    END IF;
                    IF l_name = 'PRESC_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PRESC_EPIS_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PREV_EPISODE',
                                                        value_in           => id_prev_episode_in);
                    END IF;
                    IF l_name = 'PRESC_EPIS_ORIGIN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN',
                                                        value_in           => id_episode_origin_in);
                    END IF;
                    IF l_name = 'PRESC_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PRESC_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PRESC_PROF_CANCEL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'PRESC_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_interv_prescription_in      IN interv_prescription.id_interv_prescription%TYPE,
        id_episode_in                  IN interv_prescription.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN interv_prescription.id_professional%TYPE DEFAULT NULL,
        id_institution_in              IN interv_prescription.id_institution%TYPE DEFAULT NULL,
        flg_time_in                    IN interv_prescription.flg_time%TYPE DEFAULT NULL,
        flg_status_in                  IN interv_prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN interv_prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN interv_prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_in                       IN interv_prescription.notes%TYPE DEFAULT NULL,
        id_episode_origin_in           IN interv_prescription.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in      IN interv_prescription.id_episode_destination%TYPE DEFAULT NULL,
        id_prev_episode_in             IN interv_prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_interv_prescription_tstz_in IN interv_prescription.dt_interv_prescription_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in               IN interv_prescription.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN interv_prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_patient_in                  IN interv_prescription.id_patient%TYPE DEFAULT NULL,
        create_user_in                 IN interv_prescription.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN interv_prescription.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN interv_prescription.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN interv_prescription.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN interv_prescription.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN interv_prescription.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN interv_prescription.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN interv_prescription.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_interv_prescription_in      => id_interv_prescription_in,
            id_episode_in                  => id_episode_in,
            id_professional_in             => id_professional_in,
            id_institution_in              => id_institution_in,
            flg_time_in                    => flg_time_in,
            flg_status_in                  => flg_status_in,
            id_prof_cancel_in              => id_prof_cancel_in,
            notes_cancel_in                => notes_cancel_in,
            notes_in                       => notes_in,
            id_episode_origin_in           => id_episode_origin_in,
            id_episode_destination_in      => id_episode_destination_in,
            id_prev_episode_in             => id_prev_episode_in,
            dt_interv_prescription_tstz_in => dt_interv_prescription_tstz_in,
            dt_begin_tstz_in               => dt_begin_tstz_in,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            id_patient_in                  => id_patient_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            id_prof_last_update_in         => id_prof_last_update_in,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN interv_prescription%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec interv_prescription%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_interv_prescription := next_key(sequence_in);
        END IF;
        ins(id_interv_prescription_in      => l_rec.id_interv_prescription,
            id_episode_in                  => l_rec.id_episode,
            id_professional_in             => l_rec.id_professional,
            id_institution_in              => l_rec.id_institution,
            flg_time_in                    => l_rec.flg_time,
            flg_status_in                  => l_rec.flg_status,
            id_prof_cancel_in              => l_rec.id_prof_cancel,
            notes_cancel_in                => l_rec.notes_cancel,
            notes_in                       => l_rec.notes,
            id_episode_origin_in           => l_rec.id_episode_origin,
            id_episode_destination_in      => l_rec.id_episode_destination,
            id_prev_episode_in             => l_rec.id_prev_episode,
            dt_interv_prescription_tstz_in => l_rec.dt_interv_prescription_tstz,
            dt_begin_tstz_in               => l_rec.dt_begin_tstz,
            dt_cancel_tstz_in              => l_rec.dt_cancel_tstz,
            id_patient_in                  => l_rec.id_patient,
            create_user_in                 => l_rec.create_user,
            create_time_in                 => l_rec.create_time,
            create_institution_in          => l_rec.create_institution,
            update_user_in                 => l_rec.update_user,
            update_time_in                 => l_rec.update_time,
            update_institution_in          => l_rec.update_institution,
            id_prof_last_update_in         => l_rec.id_prof_last_update,
            dt_last_update_tstz_in         => l_rec.dt_last_update_tstz,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN interv_prescription%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN interv_prescription.id_interv_prescription%TYPE
    
     IS
        retval interv_prescription.id_interv_prescription%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_interv_prescription.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_INTERV_PRESCRIPTION'));
    END next_key;

    PROCEDURE ins
    (
        id_episode_in                  IN interv_prescription.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN interv_prescription.id_professional%TYPE DEFAULT NULL,
        id_institution_in              IN interv_prescription.id_institution%TYPE DEFAULT NULL,
        flg_time_in                    IN interv_prescription.flg_time%TYPE DEFAULT NULL,
        flg_status_in                  IN interv_prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN interv_prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN interv_prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_in                       IN interv_prescription.notes%TYPE DEFAULT NULL,
        id_episode_origin_in           IN interv_prescription.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in      IN interv_prescription.id_episode_destination%TYPE DEFAULT NULL,
        id_prev_episode_in             IN interv_prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_interv_prescription_tstz_in IN interv_prescription.dt_interv_prescription_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in               IN interv_prescription.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN interv_prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_patient_in                  IN interv_prescription.id_patient%TYPE DEFAULT NULL,
        create_user_in                 IN interv_prescription.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN interv_prescription.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN interv_prescription.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN interv_prescription.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN interv_prescription.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN interv_prescription.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN interv_prescription.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN interv_prescription.dt_last_update_tstz%TYPE DEFAULT NULL,
        id_interv_prescription_out     IN OUT interv_prescription.id_interv_prescription%TYPE,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       OUT table_varchar
    ) IS
        l_pky interv_prescription.id_interv_prescription%TYPE := next_key;
    BEGIN
        ins(id_interv_prescription_in      => l_pky,
            id_episode_in                  => id_episode_in,
            id_professional_in             => id_professional_in,
            id_institution_in              => id_institution_in,
            flg_time_in                    => flg_time_in,
            flg_status_in                  => flg_status_in,
            id_prof_cancel_in              => id_prof_cancel_in,
            notes_cancel_in                => notes_cancel_in,
            notes_in                       => notes_in,
            id_episode_origin_in           => id_episode_origin_in,
            id_episode_destination_in      => id_episode_destination_in,
            id_prev_episode_in             => id_prev_episode_in,
            dt_interv_prescription_tstz_in => dt_interv_prescription_tstz_in,
            dt_begin_tstz_in               => dt_begin_tstz_in,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            id_patient_in                  => id_patient_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            id_prof_last_update_in         => id_prof_last_update_in,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
        id_interv_prescription_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_episode_in                  IN interv_prescription.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN interv_prescription.id_professional%TYPE DEFAULT NULL,
        id_institution_in              IN interv_prescription.id_institution%TYPE DEFAULT NULL,
        flg_time_in                    IN interv_prescription.flg_time%TYPE DEFAULT NULL,
        flg_status_in                  IN interv_prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN interv_prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN interv_prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_in                       IN interv_prescription.notes%TYPE DEFAULT NULL,
        id_episode_origin_in           IN interv_prescription.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in      IN interv_prescription.id_episode_destination%TYPE DEFAULT NULL,
        id_prev_episode_in             IN interv_prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_interv_prescription_tstz_in IN interv_prescription.dt_interv_prescription_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in               IN interv_prescription.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN interv_prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_patient_in                  IN interv_prescription.id_patient%TYPE DEFAULT NULL,
        create_user_in                 IN interv_prescription.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN interv_prescription.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN interv_prescription.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN interv_prescription.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN interv_prescription.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN interv_prescription.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN interv_prescription.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN interv_prescription.dt_last_update_tstz%TYPE DEFAULT NULL,
        id_interv_prescription_out     IN OUT interv_prescription.id_interv_prescription%TYPE,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in                  => id_episode_in,
            id_professional_in             => id_professional_in,
            id_institution_in              => id_institution_in,
            flg_time_in                    => flg_time_in,
            flg_status_in                  => flg_status_in,
            id_prof_cancel_in              => id_prof_cancel_in,
            notes_cancel_in                => notes_cancel_in,
            notes_in                       => notes_in,
            id_episode_origin_in           => id_episode_origin_in,
            id_episode_destination_in      => id_episode_destination_in,
            id_prev_episode_in             => id_prev_episode_in,
            dt_interv_prescription_tstz_in => dt_interv_prescription_tstz_in,
            dt_begin_tstz_in               => dt_begin_tstz_in,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            id_patient_in                  => id_patient_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            id_prof_last_update_in         => id_prof_last_update_in,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            id_interv_prescription_out     => id_interv_prescription_out,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END ins;

    FUNCTION ins
    (
        id_episode_in                  IN interv_prescription.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN interv_prescription.id_professional%TYPE DEFAULT NULL,
        id_institution_in              IN interv_prescription.id_institution%TYPE DEFAULT NULL,
        flg_time_in                    IN interv_prescription.flg_time%TYPE DEFAULT NULL,
        flg_status_in                  IN interv_prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN interv_prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN interv_prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_in                       IN interv_prescription.notes%TYPE DEFAULT NULL,
        id_episode_origin_in           IN interv_prescription.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in      IN interv_prescription.id_episode_destination%TYPE DEFAULT NULL,
        id_prev_episode_in             IN interv_prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_interv_prescription_tstz_in IN interv_prescription.dt_interv_prescription_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in               IN interv_prescription.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN interv_prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_patient_in                  IN interv_prescription.id_patient%TYPE DEFAULT NULL,
        create_user_in                 IN interv_prescription.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN interv_prescription.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN interv_prescription.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN interv_prescription.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN interv_prescription.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN interv_prescription.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN interv_prescription.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN interv_prescription.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       OUT table_varchar
    ) RETURN interv_prescription.id_interv_prescription%TYPE IS
        l_pky interv_prescription.id_interv_prescription%TYPE := next_key;
    BEGIN
        ins(id_interv_prescription_in      => l_pky,
            id_episode_in                  => id_episode_in,
            id_professional_in             => id_professional_in,
            id_institution_in              => id_institution_in,
            flg_time_in                    => flg_time_in,
            flg_status_in                  => flg_status_in,
            id_prof_cancel_in              => id_prof_cancel_in,
            notes_cancel_in                => notes_cancel_in,
            notes_in                       => notes_in,
            id_episode_origin_in           => id_episode_origin_in,
            id_episode_destination_in      => id_episode_destination_in,
            id_prev_episode_in             => id_prev_episode_in,
            dt_interv_prescription_tstz_in => dt_interv_prescription_tstz_in,
            dt_begin_tstz_in               => dt_begin_tstz_in,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            id_patient_in                  => id_patient_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            id_prof_last_update_in         => id_prof_last_update_in,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_episode_in                  IN interv_prescription.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN interv_prescription.id_professional%TYPE DEFAULT NULL,
        id_institution_in              IN interv_prescription.id_institution%TYPE DEFAULT NULL,
        flg_time_in                    IN interv_prescription.flg_time%TYPE DEFAULT NULL,
        flg_status_in                  IN interv_prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN interv_prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN interv_prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_in                       IN interv_prescription.notes%TYPE DEFAULT NULL,
        id_episode_origin_in           IN interv_prescription.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in      IN interv_prescription.id_episode_destination%TYPE DEFAULT NULL,
        id_prev_episode_in             IN interv_prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_interv_prescription_tstz_in IN interv_prescription.dt_interv_prescription_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in               IN interv_prescription.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN interv_prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_patient_in                  IN interv_prescription.id_patient%TYPE DEFAULT NULL,
        create_user_in                 IN interv_prescription.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN interv_prescription.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN interv_prescription.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN interv_prescription.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN interv_prescription.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN interv_prescription.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN interv_prescription.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN interv_prescription.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in                IN BOOLEAN := TRUE
    ) RETURN interv_prescription.id_interv_prescription%TYPE IS
        l_pky    interv_prescription.id_interv_prescription%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_interv_prescription_in      => l_pky,
            id_episode_in                  => id_episode_in,
            id_professional_in             => id_professional_in,
            id_institution_in              => id_institution_in,
            flg_time_in                    => flg_time_in,
            flg_status_in                  => flg_status_in,
            id_prof_cancel_in              => id_prof_cancel_in,
            notes_cancel_in                => notes_cancel_in,
            notes_in                       => notes_in,
            id_episode_origin_in           => id_episode_origin_in,
            id_episode_destination_in      => id_episode_destination_in,
            id_prev_episode_in             => id_prev_episode_in,
            dt_interv_prescription_tstz_in => dt_interv_prescription_tstz_in,
            dt_begin_tstz_in               => dt_begin_tstz_in,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            id_patient_in                  => id_patient_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            id_prof_last_update_in         => id_prof_last_update_in,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_episode_in                  IN interv_prescription.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN interv_prescription.id_professional%TYPE DEFAULT NULL,
        id_institution_in              IN interv_prescription.id_institution%TYPE DEFAULT NULL,
        flg_time_in                    IN interv_prescription.flg_time%TYPE DEFAULT NULL,
        flg_status_in                  IN interv_prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN interv_prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN interv_prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_in                       IN interv_prescription.notes%TYPE DEFAULT NULL,
        id_episode_origin_in           IN interv_prescription.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in      IN interv_prescription.id_episode_destination%TYPE DEFAULT NULL,
        id_prev_episode_in             IN interv_prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_interv_prescription_tstz_in IN interv_prescription.dt_interv_prescription_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in               IN interv_prescription.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN interv_prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_patient_in                  IN interv_prescription.id_patient%TYPE DEFAULT NULL,
        create_user_in                 IN interv_prescription.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN interv_prescription.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN interv_prescription.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN interv_prescription.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN interv_prescription.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN interv_prescription.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN interv_prescription.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN interv_prescription.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       OUT table_varchar
    ) IS
        l_pky interv_prescription.id_interv_prescription%TYPE := next_key;
    BEGIN
        ins(id_interv_prescription_in      => l_pky,
            id_episode_in                  => id_episode_in,
            id_professional_in             => id_professional_in,
            id_institution_in              => id_institution_in,
            flg_time_in                    => flg_time_in,
            flg_status_in                  => flg_status_in,
            id_prof_cancel_in              => id_prof_cancel_in,
            notes_cancel_in                => notes_cancel_in,
            notes_in                       => notes_in,
            id_episode_origin_in           => id_episode_origin_in,
            id_episode_destination_in      => id_episode_destination_in,
            id_prev_episode_in             => id_prev_episode_in,
            dt_interv_prescription_tstz_in => dt_interv_prescription_tstz_in,
            dt_begin_tstz_in               => dt_begin_tstz_in,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            id_patient_in                  => id_patient_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            id_prof_last_update_in         => id_prof_last_update_in,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_episode_in                  IN interv_prescription.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN interv_prescription.id_professional%TYPE DEFAULT NULL,
        id_institution_in              IN interv_prescription.id_institution%TYPE DEFAULT NULL,
        flg_time_in                    IN interv_prescription.flg_time%TYPE DEFAULT NULL,
        flg_status_in                  IN interv_prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN interv_prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN interv_prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_in                       IN interv_prescription.notes%TYPE DEFAULT NULL,
        id_episode_origin_in           IN interv_prescription.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in      IN interv_prescription.id_episode_destination%TYPE DEFAULT NULL,
        id_prev_episode_in             IN interv_prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_interv_prescription_tstz_in IN interv_prescription.dt_interv_prescription_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in               IN interv_prescription.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN interv_prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_patient_in                  IN interv_prescription.id_patient%TYPE DEFAULT NULL,
        create_user_in                 IN interv_prescription.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN interv_prescription.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN interv_prescription.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN interv_prescription.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN interv_prescription.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN interv_prescription.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN interv_prescription.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN interv_prescription.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        l_pky    interv_prescription.id_interv_prescription%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_interv_prescription_in      => l_pky,
            id_episode_in                  => id_episode_in,
            id_professional_in             => id_professional_in,
            id_institution_in              => id_institution_in,
            flg_time_in                    => flg_time_in,
            flg_status_in                  => flg_status_in,
            id_prof_cancel_in              => id_prof_cancel_in,
            notes_cancel_in                => notes_cancel_in,
            notes_in                       => notes_in,
            id_episode_origin_in           => id_episode_origin_in,
            id_episode_destination_in      => id_episode_destination_in,
            id_prev_episode_in             => id_prev_episode_in,
            dt_interv_prescription_tstz_in => dt_interv_prescription_tstz_in,
            dt_begin_tstz_in               => dt_begin_tstz_in,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            id_patient_in                  => id_patient_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            id_prof_last_update_in         => id_prof_last_update_in,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN interv_prescription_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO interv_prescription
                    (id_interv_prescription,
                     id_episode,
                     id_professional,
                     id_institution,
                     flg_time,
                     flg_status,
                     id_prof_cancel,
                     notes_cancel,
                     notes,
                     id_episode_origin,
                     id_episode_destination,
                     id_prev_episode,
                     dt_interv_prescription_tstz,
                     dt_begin_tstz,
                     dt_cancel_tstz,
                     id_patient,
                     create_user,
                     create_time,
                     create_institution,
                     update_user,
                     update_time,
                     update_institution,
                     id_prof_last_update,
                     dt_last_update_tstz)
                VALUES
                    (rows_in(indx).id_interv_prescription,
                     rows_in(indx).id_episode,
                     rows_in(indx).id_professional,
                     rows_in(indx).id_institution,
                     rows_in(indx).flg_time,
                     rows_in(indx).flg_status,
                     rows_in(indx).id_prof_cancel,
                     rows_in(indx).notes_cancel,
                     rows_in(indx).notes,
                     rows_in(indx).id_episode_origin,
                     rows_in(indx).id_episode_destination,
                     rows_in(indx).id_prev_episode,
                     rows_in(indx).dt_interv_prescription_tstz,
                     rows_in(indx).dt_begin_tstz,
                     rows_in(indx).dt_cancel_tstz,
                     rows_in(indx).id_patient,
                     rows_in(indx).create_user,
                     rows_in(indx).create_time,
                     rows_in(indx).create_institution,
                     rows_in(indx).update_user,
                     rows_in(indx).update_time,
                     rows_in(indx).update_institution,
                     rows_in(indx).id_prof_last_update,
                     rows_in(indx).dt_last_update_tstz)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INTERV_PRESCRIPTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_interv_prescription,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CANCEL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CANCEL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .notes_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode_origin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE_DESTINATION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode_destination,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PREV_EPISODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prev_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_INTERV_PRESCRIPTION_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_interv_prescription_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_BEGIN_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_begin_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CANCEL_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_cancel_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_LAST_UPDATE_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_last_update_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'INTERV_PRESCRIPTION',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN interv_prescription_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_interv_prescription_in      IN interv_prescription.id_interv_prescription%TYPE,
        id_episode_in                  IN interv_prescription.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                 IN BOOLEAN := TRUE,
        id_professional_in             IN interv_prescription.id_professional%TYPE DEFAULT NULL,
        id_professional_nin            IN BOOLEAN := TRUE,
        id_institution_in              IN interv_prescription.id_institution%TYPE DEFAULT NULL,
        id_institution_nin             IN BOOLEAN := TRUE,
        flg_time_in                    IN interv_prescription.flg_time%TYPE DEFAULT NULL,
        flg_time_nin                   IN BOOLEAN := TRUE,
        flg_status_in                  IN interv_prescription.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                 IN BOOLEAN := TRUE,
        id_prof_cancel_in              IN interv_prescription.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin             IN BOOLEAN := TRUE,
        notes_cancel_in                IN interv_prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin               IN BOOLEAN := TRUE,
        notes_in                       IN interv_prescription.notes%TYPE DEFAULT NULL,
        notes_nin                      IN BOOLEAN := TRUE,
        id_episode_origin_in           IN interv_prescription.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin          IN BOOLEAN := TRUE,
        id_episode_destination_in      IN interv_prescription.id_episode_destination%TYPE DEFAULT NULL,
        id_episode_destination_nin     IN BOOLEAN := TRUE,
        id_prev_episode_in             IN interv_prescription.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin            IN BOOLEAN := TRUE,
        dt_interv_prescription_tstz_in IN interv_prescription.dt_interv_prescription_tstz%TYPE DEFAULT NULL,
        dt_interv_presc_tstz_nin       IN BOOLEAN := TRUE,
        dt_begin_tstz_in               IN interv_prescription.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin              IN BOOLEAN := TRUE,
        dt_cancel_tstz_in              IN interv_prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin             IN BOOLEAN := TRUE,
        id_patient_in                  IN interv_prescription.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                 IN BOOLEAN := TRUE,
        create_user_in                 IN interv_prescription.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN interv_prescription.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN interv_prescription.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN interv_prescription.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN interv_prescription.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN interv_prescription.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        id_prof_last_update_in         IN interv_prescription.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin        IN BOOLEAN := TRUE,
        dt_last_update_tstz_in         IN interv_prescription.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin        IN BOOLEAN := TRUE,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       IN OUT table_varchar
    ) IS
        l_rows_out                 table_varchar;
        l_id_episode_n             NUMBER(1);
        l_id_professional_n        NUMBER(1);
        l_id_institution_n         NUMBER(1);
        l_flg_time_n               NUMBER(1);
        l_flg_status_n             NUMBER(1);
        l_id_prof_cancel_n         NUMBER(1);
        l_notes_cancel_n           NUMBER(1);
        l_notes_n                  NUMBER(1);
        l_id_episode_origin_n      NUMBER(1);
        l_id_episode_destination_n NUMBER(1);
        l_id_prev_episode_n        NUMBER(1);
        l_dt_interv_presc_tstz_n   NUMBER(1);
        l_dt_begin_tstz_n          NUMBER(1);
        l_dt_cancel_tstz_n         NUMBER(1);
        l_id_patient_n             NUMBER(1);
        l_create_user_n            NUMBER(1);
        l_create_time_n            NUMBER(1);
        l_create_institution_n     NUMBER(1);
        l_update_user_n            NUMBER(1);
        l_update_time_n            NUMBER(1);
        l_update_institution_n     NUMBER(1);
        l_id_prof_last_update_n    NUMBER(1);
        l_dt_last_update_tstz_n    NUMBER(1);
    BEGIN
    
        l_id_episode_n             := sys.diutil.bool_to_int(id_episode_nin);
        l_id_professional_n        := sys.diutil.bool_to_int(id_professional_nin);
        l_id_institution_n         := sys.diutil.bool_to_int(id_institution_nin);
        l_flg_time_n               := sys.diutil.bool_to_int(flg_time_nin);
        l_flg_status_n             := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_cancel_n         := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n           := sys.diutil.bool_to_int(notes_cancel_nin);
        l_notes_n                  := sys.diutil.bool_to_int(notes_nin);
        l_id_episode_origin_n      := sys.diutil.bool_to_int(id_episode_origin_nin);
        l_id_episode_destination_n := sys.diutil.bool_to_int(id_episode_destination_nin);
        l_id_prev_episode_n        := sys.diutil.bool_to_int(id_prev_episode_nin);
        l_dt_interv_presc_tstz_n   := sys.diutil.bool_to_int(dt_interv_presc_tstz_nin);
        l_dt_begin_tstz_n          := sys.diutil.bool_to_int(dt_begin_tstz_nin);
        l_dt_cancel_tstz_n         := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_id_patient_n             := sys.diutil.bool_to_int(id_patient_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
        l_id_prof_last_update_n    := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_tstz_n    := sys.diutil.bool_to_int(dt_last_update_tstz_nin);
    
        UPDATE interv_prescription
           SET id_episode                  = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_professional             = decode(l_id_professional_n,
                                                    0,
                                                    id_professional_in,
                                                    nvl(id_professional_in, id_professional)),
               id_institution              = decode(l_id_institution_n,
                                                    0,
                                                    id_institution_in,
                                                    nvl(id_institution_in, id_institution)),
               flg_time                    = decode(l_flg_time_n, 0, flg_time_in, nvl(flg_time_in, flg_time)),
               flg_status                  = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_prof_cancel              = decode(l_id_prof_cancel_n,
                                                    0,
                                                    id_prof_cancel_in,
                                                    nvl(id_prof_cancel_in, id_prof_cancel)),
               notes_cancel                = decode(l_notes_cancel_n,
                                                    0,
                                                    notes_cancel_in,
                                                    nvl(notes_cancel_in, notes_cancel)),
               notes                       = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               id_episode_origin           = decode(l_id_episode_origin_n,
                                                    0,
                                                    id_episode_origin_in,
                                                    nvl(id_episode_origin_in, id_episode_origin)),
               id_episode_destination      = decode(l_id_episode_destination_n,
                                                    0,
                                                    id_episode_destination_in,
                                                    nvl(id_episode_destination_in, id_episode_destination)),
               id_prev_episode             = decode(l_id_prev_episode_n,
                                                    0,
                                                    id_prev_episode_in,
                                                    nvl(id_prev_episode_in, id_prev_episode)),
               dt_interv_prescription_tstz = decode(l_dt_interv_presc_tstz_n,
                                                    0,
                                                    dt_interv_prescription_tstz_in,
                                                    nvl(dt_interv_prescription_tstz_in, dt_interv_prescription_tstz)),
               dt_begin_tstz               = decode(l_dt_begin_tstz_n,
                                                    0,
                                                    dt_begin_tstz_in,
                                                    nvl(dt_begin_tstz_in, dt_begin_tstz)),
               dt_cancel_tstz              = decode(l_dt_cancel_tstz_n,
                                                    0,
                                                    dt_cancel_tstz_in,
                                                    nvl(dt_cancel_tstz_in, dt_cancel_tstz)),
               id_patient                  = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               create_user                 = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time                 = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution          = decode(l_create_institution_n,
                                                    0,
                                                    create_institution_in,
                                                    nvl(create_institution_in, create_institution)),
               update_user                 = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time                 = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution          = decode(l_update_institution_n,
                                                    0,
                                                    update_institution_in,
                                                    nvl(update_institution_in, update_institution)),
               id_prof_last_update         = decode(l_id_prof_last_update_n,
                                                    0,
                                                    id_prof_last_update_in,
                                                    nvl(id_prof_last_update_in, id_prof_last_update)),
               dt_last_update_tstz         = decode(l_dt_last_update_tstz_n,
                                                    0,
                                                    dt_last_update_tstz_in,
                                                    nvl(dt_last_update_tstz_in, dt_last_update_tstz))
         WHERE id_interv_prescription = id_interv_prescription_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'INTERV_PRESCRIPTION');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    IF l_name = 'PRESC_EPIS_DEST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_DESTINATION',
                                                        value_in           => id_episode_destination_in);
                    END IF;
                    IF l_name = 'PRESC_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PRESC_EPIS_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PREV_EPISODE',
                                                        value_in           => id_prev_episode_in);
                    END IF;
                    IF l_name = 'PRESC_EPIS_ORIGIN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN',
                                                        value_in           => id_episode_origin_in);
                    END IF;
                    IF l_name = 'PRESC_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PRESC_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PRESC_PROF_CANCEL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'PRESC_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_interv_prescription_in      IN interv_prescription.id_interv_prescription%TYPE,
        id_episode_in                  IN interv_prescription.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                 IN BOOLEAN := TRUE,
        id_professional_in             IN interv_prescription.id_professional%TYPE DEFAULT NULL,
        id_professional_nin            IN BOOLEAN := TRUE,
        id_institution_in              IN interv_prescription.id_institution%TYPE DEFAULT NULL,
        id_institution_nin             IN BOOLEAN := TRUE,
        flg_time_in                    IN interv_prescription.flg_time%TYPE DEFAULT NULL,
        flg_time_nin                   IN BOOLEAN := TRUE,
        flg_status_in                  IN interv_prescription.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                 IN BOOLEAN := TRUE,
        id_prof_cancel_in              IN interv_prescription.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin             IN BOOLEAN := TRUE,
        notes_cancel_in                IN interv_prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin               IN BOOLEAN := TRUE,
        notes_in                       IN interv_prescription.notes%TYPE DEFAULT NULL,
        notes_nin                      IN BOOLEAN := TRUE,
        id_episode_origin_in           IN interv_prescription.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin          IN BOOLEAN := TRUE,
        id_episode_destination_in      IN interv_prescription.id_episode_destination%TYPE DEFAULT NULL,
        id_episode_destination_nin     IN BOOLEAN := TRUE,
        id_prev_episode_in             IN interv_prescription.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin            IN BOOLEAN := TRUE,
        dt_interv_prescription_tstz_in IN interv_prescription.dt_interv_prescription_tstz%TYPE DEFAULT NULL,
        dt_interv_presc_tstz_nin       IN BOOLEAN := TRUE,
        dt_begin_tstz_in               IN interv_prescription.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin              IN BOOLEAN := TRUE,
        dt_cancel_tstz_in              IN interv_prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin             IN BOOLEAN := TRUE,
        id_patient_in                  IN interv_prescription.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                 IN BOOLEAN := TRUE,
        create_user_in                 IN interv_prescription.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN interv_prescription.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN interv_prescription.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN interv_prescription.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN interv_prescription.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN interv_prescription.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        id_prof_last_update_in         IN interv_prescription.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin        IN BOOLEAN := TRUE,
        dt_last_update_tstz_in         IN interv_prescription.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin        IN BOOLEAN := TRUE,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_interv_prescription_in      => id_interv_prescription_in,
            id_episode_in                  => id_episode_in,
            id_episode_nin                 => id_episode_nin,
            id_professional_in             => id_professional_in,
            id_professional_nin            => id_professional_nin,
            id_institution_in              => id_institution_in,
            id_institution_nin             => id_institution_nin,
            flg_time_in                    => flg_time_in,
            flg_time_nin                   => flg_time_nin,
            flg_status_in                  => flg_status_in,
            flg_status_nin                 => flg_status_nin,
            id_prof_cancel_in              => id_prof_cancel_in,
            id_prof_cancel_nin             => id_prof_cancel_nin,
            notes_cancel_in                => notes_cancel_in,
            notes_cancel_nin               => notes_cancel_nin,
            notes_in                       => notes_in,
            notes_nin                      => notes_nin,
            id_episode_origin_in           => id_episode_origin_in,
            id_episode_origin_nin          => id_episode_origin_nin,
            id_episode_destination_in      => id_episode_destination_in,
            id_episode_destination_nin     => id_episode_destination_nin,
            id_prev_episode_in             => id_prev_episode_in,
            id_prev_episode_nin            => id_prev_episode_nin,
            dt_interv_prescription_tstz_in => dt_interv_prescription_tstz_in,
            dt_interv_presc_tstz_nin       => dt_interv_presc_tstz_nin,
            dt_begin_tstz_in               => dt_begin_tstz_in,
            dt_begin_tstz_nin              => dt_begin_tstz_nin,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            dt_cancel_tstz_nin             => dt_cancel_tstz_nin,
            id_patient_in                  => id_patient_in,
            id_patient_nin                 => id_patient_nin,
            create_user_in                 => create_user_in,
            create_user_nin                => create_user_nin,
            create_time_in                 => create_time_in,
            create_time_nin                => create_time_nin,
            create_institution_in          => create_institution_in,
            create_institution_nin         => create_institution_nin,
            update_user_in                 => update_user_in,
            update_user_nin                => update_user_nin,
            update_time_in                 => update_time_in,
            update_time_nin                => update_time_nin,
            update_institution_in          => update_institution_in,
            update_institution_nin         => update_institution_nin,
            id_prof_last_update_in         => id_prof_last_update_in,
            id_prof_last_update_nin        => id_prof_last_update_nin,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            dt_last_update_tstz_nin        => dt_last_update_tstz_nin,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_episode_in                  IN interv_prescription.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                 IN BOOLEAN := TRUE,
        id_professional_in             IN interv_prescription.id_professional%TYPE DEFAULT NULL,
        id_professional_nin            IN BOOLEAN := TRUE,
        id_institution_in              IN interv_prescription.id_institution%TYPE DEFAULT NULL,
        id_institution_nin             IN BOOLEAN := TRUE,
        flg_time_in                    IN interv_prescription.flg_time%TYPE DEFAULT NULL,
        flg_time_nin                   IN BOOLEAN := TRUE,
        flg_status_in                  IN interv_prescription.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                 IN BOOLEAN := TRUE,
        id_prof_cancel_in              IN interv_prescription.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin             IN BOOLEAN := TRUE,
        notes_cancel_in                IN interv_prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin               IN BOOLEAN := TRUE,
        notes_in                       IN interv_prescription.notes%TYPE DEFAULT NULL,
        notes_nin                      IN BOOLEAN := TRUE,
        id_episode_origin_in           IN interv_prescription.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin          IN BOOLEAN := TRUE,
        id_episode_destination_in      IN interv_prescription.id_episode_destination%TYPE DEFAULT NULL,
        id_episode_destination_nin     IN BOOLEAN := TRUE,
        id_prev_episode_in             IN interv_prescription.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin            IN BOOLEAN := TRUE,
        dt_interv_prescription_tstz_in IN interv_prescription.dt_interv_prescription_tstz%TYPE DEFAULT NULL,
        dt_interv_presc_tstz_nin       IN BOOLEAN := TRUE,
        dt_begin_tstz_in               IN interv_prescription.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin              IN BOOLEAN := TRUE,
        dt_cancel_tstz_in              IN interv_prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin             IN BOOLEAN := TRUE,
        id_patient_in                  IN interv_prescription.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                 IN BOOLEAN := TRUE,
        create_user_in                 IN interv_prescription.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN interv_prescription.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN interv_prescription.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN interv_prescription.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN interv_prescription.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN interv_prescription.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        id_prof_last_update_in         IN interv_prescription.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin        IN BOOLEAN := TRUE,
        dt_last_update_tstz_in         IN interv_prescription.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin        IN BOOLEAN := TRUE,
        where_in                       VARCHAR2,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       IN OUT table_varchar
    ) IS
        l_sql                      VARCHAR2(32767);
        l_rows_out                 table_varchar;
        l_id_episode_n             NUMBER(1);
        l_id_professional_n        NUMBER(1);
        l_id_institution_n         NUMBER(1);
        l_flg_time_n               NUMBER(1);
        l_flg_status_n             NUMBER(1);
        l_id_prof_cancel_n         NUMBER(1);
        l_notes_cancel_n           NUMBER(1);
        l_notes_n                  NUMBER(1);
        l_id_episode_origin_n      NUMBER(1);
        l_id_episode_destination_n NUMBER(1);
        l_id_prev_episode_n        NUMBER(1);
        l_dt_interv_presc_tstz_n   NUMBER(1);
        l_dt_begin_tstz_n          NUMBER(1);
        l_dt_cancel_tstz_n         NUMBER(1);
        l_id_patient_n             NUMBER(1);
        l_create_user_n            NUMBER(1);
        l_create_time_n            NUMBER(1);
        l_create_institution_n     NUMBER(1);
        l_update_user_n            NUMBER(1);
        l_update_time_n            NUMBER(1);
        l_update_institution_n     NUMBER(1);
        l_id_prof_last_update_n    NUMBER(1);
        l_dt_last_update_tstz_n    NUMBER(1);
        id_interv_prescription_in  interv_prescription.id_interv_prescription%TYPE;
    BEGIN
    
        l_id_episode_n             := sys.diutil.bool_to_int(id_episode_nin);
        l_id_professional_n        := sys.diutil.bool_to_int(id_professional_nin);
        l_id_institution_n         := sys.diutil.bool_to_int(id_institution_nin);
        l_flg_time_n               := sys.diutil.bool_to_int(flg_time_nin);
        l_flg_status_n             := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_cancel_n         := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n           := sys.diutil.bool_to_int(notes_cancel_nin);
        l_notes_n                  := sys.diutil.bool_to_int(notes_nin);
        l_id_episode_origin_n      := sys.diutil.bool_to_int(id_episode_origin_nin);
        l_id_episode_destination_n := sys.diutil.bool_to_int(id_episode_destination_nin);
        l_id_prev_episode_n        := sys.diutil.bool_to_int(id_prev_episode_nin);
        l_dt_interv_presc_tstz_n   := sys.diutil.bool_to_int(dt_interv_presc_tstz_nin);
        l_dt_begin_tstz_n          := sys.diutil.bool_to_int(dt_begin_tstz_nin);
        l_dt_cancel_tstz_n         := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_id_patient_n             := sys.diutil.bool_to_int(id_patient_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
        l_id_prof_last_update_n    := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_tstz_n    := sys.diutil.bool_to_int(dt_last_update_tstz_nin);
    
        l_sql := 'UPDATE INTERV_PRESCRIPTION SET ' || ' ID_EPISODE = decode (' || l_id_episode_n ||
                 ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' || ' ID_PROFESSIONAL = decode (' ||
                 l_id_professional_n || ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) ' || ',' ||
                 ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                 ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' || ' FLG_TIME = decode (' ||
                 l_flg_time_n || ',0,:flg_time_in, NVL (:flg_time_in, FLG_TIME)) ' || ',' || ' FLG_STATUS = decode (' ||
                 l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                 ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) ' || ',' ||
                 ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                 ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) ' || ',' || ' NOTES = decode (' ||
                 l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' || ' ID_EPISODE_ORIGIN = decode (' ||
                 l_id_episode_origin_n || ',0,:id_episode_origin_in, NVL (:id_episode_origin_in, ID_EPISODE_ORIGIN)) ' || ',' ||
                 ' ID_EPISODE_DESTINATION = decode (' || l_id_episode_destination_n ||
                 ',0,:id_episode_destination_in, NVL (:id_episode_destination_in, ID_EPISODE_DESTINATION)) ' || ',' ||
                 ' ID_PREV_EPISODE = decode (' || l_id_prev_episode_n ||
                 ',0,:id_prev_episode_in, NVL (:id_prev_episode_in, ID_PREV_EPISODE)) ' || ',' ||
                 ' DT_INTERV_PRESCRIPTION_TSTZ = decode (' || l_dt_interv_presc_tstz_n ||
                 ',0,:dt_interv_prescription_tstz_in, NVL (:dt_interv_prescription_tstz_in, DT_INTERV_PRESCRIPTION_TSTZ)) ' || ',' ||
                 ' DT_BEGIN_TSTZ = decode (' || l_dt_begin_tstz_n ||
                 ',0,:dt_begin_tstz_in, NVL (:dt_begin_tstz_in, DT_BEGIN_TSTZ)) ' || ',' ||
                 ' DT_CANCEL_TSTZ = decode (' || l_dt_cancel_tstz_n ||
                 ',0,:dt_cancel_tstz_in, NVL (:dt_cancel_tstz_in, DT_CANCEL_TSTZ)) ' || ',' || ' ID_PATIENT = decode (' ||
                 l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' ID_PROF_LAST_UPDATE = decode (' || l_id_prof_last_update_n ||
                 ',0,:id_prof_last_update_in, NVL (:id_prof_last_update_in, ID_PROF_LAST_UPDATE)) ' || ',' ||
                 ' DT_LAST_UPDATE_TSTZ = decode (' || l_dt_last_update_tstz_n ||
                 ',0,:dt_last_update_tstz_in, NVL (:dt_last_update_tstz_in, DT_LAST_UPDATE_TSTZ)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_episode_in, id_professional_in, id_institution_in, flg_time_in, flg_status_in, id_prof_cancel_in, notes_cancel_in, notes_in, id_episode_origin_in, id_episode_destination_in, id_prev_episode_in, dt_interv_prescription_tstz_in, dt_begin_tstz_in, dt_cancel_tstz_in, id_patient_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_prof_last_update_in, dt_last_update_tstz_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'INTERV_PRESCRIPTION');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    IF l_name = 'PRESC_EPIS_DEST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_DESTINATION',
                                                        value_in           => id_episode_destination_in);
                    END IF;
                    IF l_name = 'PRESC_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PRESC_EPIS_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PREV_EPISODE',
                                                        value_in           => id_prev_episode_in);
                    END IF;
                    IF l_name = 'PRESC_EPIS_ORIGIN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_ORIGIN',
                                                        value_in           => id_episode_origin_in);
                    END IF;
                    IF l_name = 'PRESC_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'PRESC_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'PRESC_PROF_CANCEL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'PRESC_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_episode_in                  IN interv_prescription.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                 IN BOOLEAN := TRUE,
        id_professional_in             IN interv_prescription.id_professional%TYPE DEFAULT NULL,
        id_professional_nin            IN BOOLEAN := TRUE,
        id_institution_in              IN interv_prescription.id_institution%TYPE DEFAULT NULL,
        id_institution_nin             IN BOOLEAN := TRUE,
        flg_time_in                    IN interv_prescription.flg_time%TYPE DEFAULT NULL,
        flg_time_nin                   IN BOOLEAN := TRUE,
        flg_status_in                  IN interv_prescription.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                 IN BOOLEAN := TRUE,
        id_prof_cancel_in              IN interv_prescription.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin             IN BOOLEAN := TRUE,
        notes_cancel_in                IN interv_prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin               IN BOOLEAN := TRUE,
        notes_in                       IN interv_prescription.notes%TYPE DEFAULT NULL,
        notes_nin                      IN BOOLEAN := TRUE,
        id_episode_origin_in           IN interv_prescription.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_origin_nin          IN BOOLEAN := TRUE,
        id_episode_destination_in      IN interv_prescription.id_episode_destination%TYPE DEFAULT NULL,
        id_episode_destination_nin     IN BOOLEAN := TRUE,
        id_prev_episode_in             IN interv_prescription.id_prev_episode%TYPE DEFAULT NULL,
        id_prev_episode_nin            IN BOOLEAN := TRUE,
        dt_interv_prescription_tstz_in IN interv_prescription.dt_interv_prescription_tstz%TYPE DEFAULT NULL,
        dt_interv_presc_tstz_nin       IN BOOLEAN := TRUE,
        dt_begin_tstz_in               IN interv_prescription.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin              IN BOOLEAN := TRUE,
        dt_cancel_tstz_in              IN interv_prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin             IN BOOLEAN := TRUE,
        id_patient_in                  IN interv_prescription.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                 IN BOOLEAN := TRUE,
        create_user_in                 IN interv_prescription.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN interv_prescription.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN interv_prescription.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN interv_prescription.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN interv_prescription.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN interv_prescription.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        id_prof_last_update_in         IN interv_prescription.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin        IN BOOLEAN := TRUE,
        dt_last_update_tstz_in         IN interv_prescription.dt_last_update_tstz%TYPE DEFAULT NULL,
        dt_last_update_tstz_nin        IN BOOLEAN := TRUE,
        where_in                       VARCHAR2,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in                  => id_episode_in,
            id_episode_nin                 => id_episode_nin,
            id_professional_in             => id_professional_in,
            id_professional_nin            => id_professional_nin,
            id_institution_in              => id_institution_in,
            id_institution_nin             => id_institution_nin,
            flg_time_in                    => flg_time_in,
            flg_time_nin                   => flg_time_nin,
            flg_status_in                  => flg_status_in,
            flg_status_nin                 => flg_status_nin,
            id_prof_cancel_in              => id_prof_cancel_in,
            id_prof_cancel_nin             => id_prof_cancel_nin,
            notes_cancel_in                => notes_cancel_in,
            notes_cancel_nin               => notes_cancel_nin,
            notes_in                       => notes_in,
            notes_nin                      => notes_nin,
            id_episode_origin_in           => id_episode_origin_in,
            id_episode_origin_nin          => id_episode_origin_nin,
            id_episode_destination_in      => id_episode_destination_in,
            id_episode_destination_nin     => id_episode_destination_nin,
            id_prev_episode_in             => id_prev_episode_in,
            id_prev_episode_nin            => id_prev_episode_nin,
            dt_interv_prescription_tstz_in => dt_interv_prescription_tstz_in,
            dt_interv_presc_tstz_nin       => dt_interv_presc_tstz_nin,
            dt_begin_tstz_in               => dt_begin_tstz_in,
            dt_begin_tstz_nin              => dt_begin_tstz_nin,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            dt_cancel_tstz_nin             => dt_cancel_tstz_nin,
            id_patient_in                  => id_patient_in,
            id_patient_nin                 => id_patient_nin,
            create_user_in                 => create_user_in,
            create_user_nin                => create_user_nin,
            create_time_in                 => create_time_in,
            create_time_nin                => create_time_nin,
            create_institution_in          => create_institution_in,
            create_institution_nin         => create_institution_nin,
            update_user_in                 => update_user_in,
            update_user_nin                => update_user_nin,
            update_time_in                 => update_time_in,
            update_time_nin                => update_time_nin,
            update_institution_in          => update_institution_in,
            update_institution_nin         => update_institution_nin,
            id_prof_last_update_in         => id_prof_last_update_in,
            id_prof_last_update_nin        => id_prof_last_update_nin,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            dt_last_update_tstz_nin        => dt_last_update_tstz_nin,
            where_in                       => where_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN interv_prescription%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_interv_prescription_in      => rec_in.id_interv_prescription,
            id_episode_in                  => rec_in.id_episode,
            id_professional_in             => rec_in.id_professional,
            id_institution_in              => rec_in.id_institution,
            flg_time_in                    => rec_in.flg_time,
            flg_status_in                  => rec_in.flg_status,
            id_prof_cancel_in              => rec_in.id_prof_cancel,
            notes_cancel_in                => rec_in.notes_cancel,
            notes_in                       => rec_in.notes,
            id_episode_origin_in           => rec_in.id_episode_origin,
            id_episode_destination_in      => rec_in.id_episode_destination,
            id_prev_episode_in             => rec_in.id_prev_episode,
            dt_interv_prescription_tstz_in => rec_in.dt_interv_prescription_tstz,
            dt_begin_tstz_in               => rec_in.dt_begin_tstz,
            dt_cancel_tstz_in              => rec_in.dt_cancel_tstz,
            id_patient_in                  => rec_in.id_patient,
            create_user_in                 => rec_in.create_user,
            create_time_in                 => rec_in.create_time,
            create_institution_in          => rec_in.create_institution,
            update_user_in                 => rec_in.update_user,
            update_time_in                 => rec_in.update_time,
            update_institution_in          => rec_in.update_institution,
            id_prof_last_update_in         => rec_in.id_prof_last_update,
            dt_last_update_tstz_in         => rec_in.dt_last_update_tstz
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN interv_prescription%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_interv_prescription_in      => rec_in.id_interv_prescription,
            id_episode_in                  => rec_in.id_episode,
            id_professional_in             => rec_in.id_professional,
            id_institution_in              => rec_in.id_institution,
            flg_time_in                    => rec_in.flg_time,
            flg_status_in                  => rec_in.flg_status,
            id_prof_cancel_in              => rec_in.id_prof_cancel,
            notes_cancel_in                => rec_in.notes_cancel,
            notes_in                       => rec_in.notes,
            id_episode_origin_in           => rec_in.id_episode_origin,
            id_episode_destination_in      => rec_in.id_episode_destination,
            id_prev_episode_in             => rec_in.id_prev_episode,
            dt_interv_prescription_tstz_in => rec_in.dt_interv_prescription_tstz,
            dt_begin_tstz_in               => rec_in.dt_begin_tstz,
            dt_cancel_tstz_in              => rec_in.dt_cancel_tstz,
            id_patient_in                  => rec_in.id_patient,
            create_user_in                 => rec_in.create_user,
            create_time_in                 => rec_in.create_time,
            create_institution_in          => rec_in.create_institution,
            update_user_in                 => rec_in.update_user,
            update_time_in                 => rec_in.update_time,
            update_institution_in          => rec_in.update_institution,
            id_prof_last_update_in         => rec_in.id_prof_last_update,
            dt_last_update_tstz_in         => rec_in.dt_last_update_tstz
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_interv_prescription_in      IN interv_prescription.id_interv_prescription%TYPE,
        id_episode_in                  IN interv_prescription.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN interv_prescription.id_professional%TYPE DEFAULT NULL,
        id_institution_in              IN interv_prescription.id_institution%TYPE DEFAULT NULL,
        flg_time_in                    IN interv_prescription.flg_time%TYPE DEFAULT NULL,
        flg_status_in                  IN interv_prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN interv_prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN interv_prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_in                       IN interv_prescription.notes%TYPE DEFAULT NULL,
        id_episode_origin_in           IN interv_prescription.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in      IN interv_prescription.id_episode_destination%TYPE DEFAULT NULL,
        id_prev_episode_in             IN interv_prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_interv_prescription_tstz_in IN interv_prescription.dt_interv_prescription_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in               IN interv_prescription.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN interv_prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_patient_in                  IN interv_prescription.id_patient%TYPE DEFAULT NULL,
        create_user_in                 IN interv_prescription.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN interv_prescription.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN interv_prescription.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN interv_prescription.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN interv_prescription.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN interv_prescription.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN interv_prescription.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN interv_prescription.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       OUT table_varchar
    ) IS
    BEGIN
        upd(id_interv_prescription_in      => id_interv_prescription_in,
            id_episode_in                  => id_episode_in,
            id_professional_in             => id_professional_in,
            id_institution_in              => id_institution_in,
            flg_time_in                    => flg_time_in,
            flg_status_in                  => flg_status_in,
            id_prof_cancel_in              => id_prof_cancel_in,
            notes_cancel_in                => notes_cancel_in,
            notes_in                       => notes_in,
            id_episode_origin_in           => id_episode_origin_in,
            id_episode_destination_in      => id_episode_destination_in,
            id_prev_episode_in             => id_prev_episode_in,
            dt_interv_prescription_tstz_in => dt_interv_prescription_tstz_in,
            dt_begin_tstz_in               => dt_begin_tstz_in,
            dt_cancel_tstz_in              => dt_cancel_tstz_in,
            id_patient_in                  => id_patient_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            id_prof_last_update_in         => id_prof_last_update_in,
            dt_last_update_tstz_in         => dt_last_update_tstz_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_interv_prescription_in      => id_interv_prescription_in,
                id_episode_in                  => id_episode_in,
                id_professional_in             => id_professional_in,
                id_institution_in              => id_institution_in,
                flg_time_in                    => flg_time_in,
                flg_status_in                  => flg_status_in,
                id_prof_cancel_in              => id_prof_cancel_in,
                notes_cancel_in                => notes_cancel_in,
                notes_in                       => notes_in,
                id_episode_origin_in           => id_episode_origin_in,
                id_episode_destination_in      => id_episode_destination_in,
                id_prev_episode_in             => id_prev_episode_in,
                dt_interv_prescription_tstz_in => dt_interv_prescription_tstz_in,
                dt_begin_tstz_in               => dt_begin_tstz_in,
                dt_cancel_tstz_in              => dt_cancel_tstz_in,
                id_patient_in                  => id_patient_in,
                create_user_in                 => create_user_in,
                create_time_in                 => create_time_in,
                create_institution_in          => create_institution_in,
                update_user_in                 => update_user_in,
                update_time_in                 => update_time_in,
                update_institution_in          => update_institution_in,
                id_prof_last_update_in         => id_prof_last_update_in,
                dt_last_update_tstz_in         => dt_last_update_tstz_in,
                handle_error_in                => handle_error_in,
                rows_out                       => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_interv_prescription_in      IN interv_prescription.id_interv_prescription%TYPE,
        id_episode_in                  IN interv_prescription.id_episode%TYPE DEFAULT NULL,
        id_professional_in             IN interv_prescription.id_professional%TYPE DEFAULT NULL,
        id_institution_in              IN interv_prescription.id_institution%TYPE DEFAULT NULL,
        flg_time_in                    IN interv_prescription.flg_time%TYPE DEFAULT NULL,
        flg_status_in                  IN interv_prescription.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in              IN interv_prescription.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in                IN interv_prescription.notes_cancel%TYPE DEFAULT NULL,
        notes_in                       IN interv_prescription.notes%TYPE DEFAULT NULL,
        id_episode_origin_in           IN interv_prescription.id_episode_origin%TYPE DEFAULT NULL,
        id_episode_destination_in      IN interv_prescription.id_episode_destination%TYPE DEFAULT NULL,
        id_prev_episode_in             IN interv_prescription.id_prev_episode%TYPE DEFAULT NULL,
        dt_interv_prescription_tstz_in IN interv_prescription.dt_interv_prescription_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in               IN interv_prescription.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in              IN interv_prescription.dt_cancel_tstz%TYPE DEFAULT NULL,
        id_patient_in                  IN interv_prescription.id_patient%TYPE DEFAULT NULL,
        create_user_in                 IN interv_prescription.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN interv_prescription.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN interv_prescription.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN interv_prescription.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN interv_prescription.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN interv_prescription.update_institution%TYPE DEFAULT NULL,
        id_prof_last_update_in         IN interv_prescription.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_tstz_in         IN interv_prescription.dt_last_update_tstz%TYPE DEFAULT NULL,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_interv_prescription_in,
                id_episode_in,
                id_professional_in,
                id_institution_in,
                flg_time_in,
                flg_status_in,
                id_prof_cancel_in,
                notes_cancel_in,
                notes_in,
                id_episode_origin_in,
                id_episode_destination_in,
                id_prev_episode_in,
                dt_interv_prescription_tstz_in,
                dt_begin_tstz_in,
                dt_cancel_tstz_in,
                id_patient_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_prof_last_update_in,
                dt_last_update_tstz_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN interv_prescription_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_interv_prescription      id_interv_prescription_cc;
        l_id_episode                  id_episode_cc;
        l_id_professional             id_professional_cc;
        l_id_institution              id_institution_cc;
        l_flg_time                    flg_time_cc;
        l_flg_status                  flg_status_cc;
        l_id_prof_cancel              id_prof_cancel_cc;
        l_notes_cancel                notes_cancel_cc;
        l_notes                       notes_cc;
        l_id_episode_origin           id_episode_origin_cc;
        l_id_episode_destination      id_episode_destination_cc;
        l_id_prev_episode             id_prev_episode_cc;
        l_dt_interv_prescription_tstz dt_interv_prescription_tstz_cc;
        l_dt_begin_tstz               dt_begin_tstz_cc;
        l_dt_cancel_tstz              dt_cancel_tstz_cc;
        l_id_patient                  id_patient_cc;
        l_create_user                 create_user_cc;
        l_create_time                 create_time_cc;
        l_create_institution          create_institution_cc;
        l_update_user                 update_user_cc;
        l_update_time                 update_time_cc;
        l_update_institution          update_institution_cc;
        l_id_prof_last_update         id_prof_last_update_cc;
        l_dt_last_update_tstz         dt_last_update_tstz_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_interv_prescription(i) := col_in(i).id_interv_prescription;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_professional(i) := col_in(i).id_professional;
            l_id_institution(i) := col_in(i).id_institution;
            l_flg_time(i) := col_in(i).flg_time;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_notes(i) := col_in(i).notes;
            l_id_episode_origin(i) := col_in(i).id_episode_origin;
            l_id_episode_destination(i) := col_in(i).id_episode_destination;
            l_id_prev_episode(i) := col_in(i).id_prev_episode;
            l_dt_interv_prescription_tstz(i) := col_in(i).dt_interv_prescription_tstz;
            l_dt_begin_tstz(i) := col_in(i).dt_begin_tstz;
            l_dt_cancel_tstz(i) := col_in(i).dt_cancel_tstz;
            l_id_patient(i) := col_in(i).id_patient;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_prof_last_update(i) := col_in(i).id_prof_last_update;
            l_dt_last_update_tstz(i) := col_in(i).dt_last_update_tstz;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE interv_prescription
                   SET id_episode                  = nvl(l_id_episode(i), id_episode),
                       id_professional             = nvl(l_id_professional(i), id_professional),
                       id_institution              = nvl(l_id_institution(i), id_institution),
                       flg_time                    = nvl(l_flg_time(i), flg_time),
                       flg_status                  = nvl(l_flg_status(i), flg_status),
                       id_prof_cancel              = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       notes_cancel                = nvl(l_notes_cancel(i), notes_cancel),
                       notes                       = nvl(l_notes(i), notes),
                       id_episode_origin           = nvl(l_id_episode_origin(i), id_episode_origin),
                       id_episode_destination      = nvl(l_id_episode_destination(i), id_episode_destination),
                       id_prev_episode             = nvl(l_id_prev_episode(i), id_prev_episode),
                       dt_interv_prescription_tstz = nvl(l_dt_interv_prescription_tstz(i), dt_interv_prescription_tstz),
                       dt_begin_tstz               = nvl(l_dt_begin_tstz(i), dt_begin_tstz),
                       dt_cancel_tstz              = nvl(l_dt_cancel_tstz(i), dt_cancel_tstz),
                       id_patient                  = nvl(l_id_patient(i), id_patient),
                       create_user                 = nvl(l_create_user(i), create_user),
                       create_time                 = nvl(l_create_time(i), create_time),
                       create_institution          = nvl(l_create_institution(i), create_institution),
                       update_user                 = nvl(l_update_user(i), update_user),
                       update_time                 = nvl(l_update_time(i), update_time),
                       update_institution          = nvl(l_update_institution(i), update_institution),
                       id_prof_last_update         = nvl(l_id_prof_last_update(i), id_prof_last_update),
                       dt_last_update_tstz         = nvl(l_dt_last_update_tstz(i), dt_last_update_tstz)
                 WHERE id_interv_prescription = l_id_interv_prescription(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE interv_prescription
                   SET id_episode                  = l_id_episode(i),
                       id_professional             = l_id_professional(i),
                       id_institution              = l_id_institution(i),
                       flg_time                    = l_flg_time(i),
                       flg_status                  = l_flg_status(i),
                       id_prof_cancel              = l_id_prof_cancel(i),
                       notes_cancel                = l_notes_cancel(i),
                       notes                       = l_notes(i),
                       id_episode_origin           = l_id_episode_origin(i),
                       id_episode_destination      = l_id_episode_destination(i),
                       id_prev_episode             = l_id_prev_episode(i),
                       dt_interv_prescription_tstz = l_dt_interv_prescription_tstz(i),
                       dt_begin_tstz               = l_dt_begin_tstz(i),
                       dt_cancel_tstz              = l_dt_cancel_tstz(i),
                       id_patient                  = l_id_patient(i),
                       create_user                 = l_create_user(i),
                       create_time                 = l_create_time(i),
                       create_institution          = l_create_institution(i),
                       update_user                 = l_update_user(i),
                       update_time                 = l_update_time(i),
                       update_institution          = l_update_institution(i),
                       id_prof_last_update         = l_id_prof_last_update(i),
                       dt_last_update_tstz         = l_dt_last_update_tstz(i)
                 WHERE id_interv_prescription = l_id_interv_prescription(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN interv_prescription_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE INTERV_PRESCRIPTION
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE INTERV_PRESCRIPTION
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE INTERV_PRESCRIPTION set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE INTERV_PRESCRIPTION set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_interv_prescription_in IN interv_prescription.id_interv_prescription%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_prescription
         WHERE id_interv_prescription = id_interv_prescription_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_interv_prescription_in IN interv_prescription.id_interv_prescription%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_interv_prescription_in => id_interv_prescription_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_INTERV_PRESCRIPTION
    PROCEDURE del_id_interv_prescription
    (
        id_interv_prescription_in IN interv_prescription.id_interv_prescription%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_prescription
         WHERE id_interv_prescription = id_interv_prescription_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_interv_prescription;

    -- Delete all rows for primary key column ID_INTERV_PRESCRIPTION
    PROCEDURE del_id_interv_prescription
    (
        id_interv_prescription_in IN interv_prescription.id_interv_prescription%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_interv_prescription(id_interv_prescription_in => id_interv_prescription_in,
                                   handle_error_in           => handle_error_in,
                                   rows_out                  => rows_out);
    END del_id_interv_prescription;

    PROCEDURE del_presc_epis_dest_fk
    (
        id_episode_destination_in IN interv_prescription.id_episode_destination%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_prescription
         WHERE id_episode_destination = del_presc_epis_dest_fk.id_episode_destination_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_presc_epis_dest_fk;

    PROCEDURE del_presc_epis_dest_fk
    (
        id_episode_destination_in IN interv_prescription.id_episode_destination%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_presc_epis_dest_fk(id_episode_destination_in => id_episode_destination_in,
                               handle_error_in           => handle_error_in,
                               rows_out                  => rows_out);
    END del_presc_epis_dest_fk;

    PROCEDURE del_presc_epis_fk
    (
        id_episode_in   IN interv_prescription.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_prescription
         WHERE id_episode = del_presc_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_presc_epis_fk;

    PROCEDURE del_presc_epis_fk
    (
        id_episode_in   IN interv_prescription.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_presc_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_presc_epis_fk;

    PROCEDURE del_presc_epis_fk2
    (
        id_prev_episode_in IN interv_prescription.id_prev_episode%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_prescription
         WHERE id_prev_episode = del_presc_epis_fk2.id_prev_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_presc_epis_fk2;

    PROCEDURE del_presc_epis_fk2
    (
        id_prev_episode_in IN interv_prescription.id_prev_episode%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_presc_epis_fk2(id_prev_episode_in => id_prev_episode_in,
                           handle_error_in    => handle_error_in,
                           rows_out           => rows_out);
    END del_presc_epis_fk2;

    PROCEDURE del_presc_epis_origin_fk
    (
        id_episode_origin_in IN interv_prescription.id_episode_origin%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_prescription
         WHERE id_episode_origin = del_presc_epis_origin_fk.id_episode_origin_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_presc_epis_origin_fk;

    PROCEDURE del_presc_epis_origin_fk
    (
        id_episode_origin_in IN interv_prescription.id_episode_origin%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_presc_epis_origin_fk(id_episode_origin_in => id_episode_origin_in,
                                 handle_error_in      => handle_error_in,
                                 rows_out             => rows_out);
    END del_presc_epis_origin_fk;

    PROCEDURE del_presc_inst_fk
    (
        id_institution_in IN interv_prescription.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_prescription
         WHERE id_institution = del_presc_inst_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_presc_inst_fk;

    PROCEDURE del_presc_inst_fk
    (
        id_institution_in IN interv_prescription.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_presc_inst_fk(id_institution_in => id_institution_in,
                          handle_error_in   => handle_error_in,
                          rows_out          => rows_out);
    END del_presc_inst_fk;

    PROCEDURE del_presc_pat_fk
    (
        id_patient_in   IN interv_prescription.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_prescription
         WHERE id_patient = del_presc_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_presc_pat_fk;

    PROCEDURE del_presc_pat_fk
    (
        id_patient_in   IN interv_prescription.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_presc_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_presc_pat_fk;

    PROCEDURE del_presc_prof_cancel_fk
    (
        id_prof_cancel_in IN interv_prescription.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_prescription
         WHERE id_prof_cancel = del_presc_prof_cancel_fk.id_prof_cancel_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_presc_prof_cancel_fk;

    PROCEDURE del_presc_prof_cancel_fk
    (
        id_prof_cancel_in IN interv_prescription.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_presc_prof_cancel_fk(id_prof_cancel_in => id_prof_cancel_in,
                                 handle_error_in   => handle_error_in,
                                 rows_out          => rows_out);
    END del_presc_prof_cancel_fk;

    PROCEDURE del_presc_prof_fk
    (
        id_professional_in IN interv_prescription.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM interv_prescription
         WHERE id_professional = del_presc_prof_fk.id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_presc_prof_fk;

    PROCEDURE del_presc_prof_fk
    (
        id_professional_in IN interv_prescription.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_presc_prof_fk(id_professional_in => id_professional_in,
                          handle_error_in    => handle_error_in,
                          rows_out           => rows_out);
    END del_presc_prof_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM INTERV_PRESCRIPTION';
        ELSE
            RETURN 'DELETE FROM INTERV_PRESCRIPTION WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'INTERV_PRESCRIPTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'INTERV_PRESCRIPTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(interv_prescription_inout IN OUT interv_prescription%ROWTYPE) IS
    BEGIN
        interv_prescription_inout.id_interv_prescription      := NULL;
        interv_prescription_inout.id_episode                  := NULL;
        interv_prescription_inout.id_professional             := NULL;
        interv_prescription_inout.id_institution              := NULL;
        interv_prescription_inout.flg_time                    := NULL;
        interv_prescription_inout.flg_status                  := NULL;
        interv_prescription_inout.id_prof_cancel              := NULL;
        interv_prescription_inout.notes_cancel                := NULL;
        interv_prescription_inout.notes                       := NULL;
        interv_prescription_inout.id_episode_origin           := NULL;
        interv_prescription_inout.id_episode_destination      := NULL;
        interv_prescription_inout.id_prev_episode             := NULL;
        interv_prescription_inout.dt_interv_prescription_tstz := NULL;
        interv_prescription_inout.dt_begin_tstz               := NULL;
        interv_prescription_inout.dt_cancel_tstz              := NULL;
        interv_prescription_inout.id_patient                  := NULL;
        interv_prescription_inout.create_user                 := NULL;
        interv_prescription_inout.create_time                 := NULL;
        interv_prescription_inout.create_institution          := NULL;
        interv_prescription_inout.update_user                 := NULL;
        interv_prescription_inout.update_time                 := NULL;
        interv_prescription_inout.update_institution          := NULL;
        interv_prescription_inout.id_prof_last_update         := NULL;
        interv_prescription_inout.dt_last_update_tstz         := NULL;
    END initrec;

    FUNCTION initrec RETURN interv_prescription%ROWTYPE IS
        l_interv_prescription interv_prescription%ROWTYPE;
    BEGIN
        RETURN l_interv_prescription;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN interv_prescription_tc IS
        data interv_prescription_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM interv_prescription
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN interv_prescription_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data interv_prescription_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_interv_prescription;
/
