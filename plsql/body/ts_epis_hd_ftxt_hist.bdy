/*-- Last Change Revision: $Rev: 2028087 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:09 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_epis_hd_ftxt_hist
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Junho 15, 2011 10:4:33
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_epis_hidrics_det_ftxt_in IN epis_hd_ftxt_hist.id_epis_hidrics_det_ftxt%TYPE,
        dt_epis_hd_ftxt_hist_in     IN epis_hd_ftxt_hist.dt_epis_hd_ftxt_hist%TYPE,
        id_way_in                   IN epis_hd_ftxt_hist.id_way%TYPE DEFAULT NULL,
        id_hidrics_location_in      IN epis_hd_ftxt_hist.id_hidrics_location%TYPE DEFAULT NULL,
        id_hidrics_in               IN epis_hd_ftxt_hist.id_hidrics%TYPE DEFAULT NULL,
        id_hidrics_charact_in       IN epis_hd_ftxt_hist.id_hidrics_charact%TYPE DEFAULT NULL,
        free_text_in                IN epis_hd_ftxt_hist.free_text%TYPE DEFAULT NULL,
        create_user_in              IN epis_hd_ftxt_hist.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_hd_ftxt_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_hd_ftxt_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_hd_ftxt_hist.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_hd_ftxt_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_hd_ftxt_hist.update_institution%TYPE DEFAULT NULL,
        id_prof_last_change_in      IN epis_hd_ftxt_hist.id_prof_last_change%TYPE DEFAULT NULL,
        dt_eh_det_ftxt_in           IN epis_hd_ftxt_hist.dt_eh_det_ftxt%TYPE DEFAULT NULL,
        id_hidrics_device_in        IN epis_hd_ftxt_hist.id_hidrics_device%TYPE DEFAULT NULL,
        id_patient_in               IN epis_hd_ftxt_hist.id_patient%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO epis_hd_ftxt_hist
            (id_epis_hidrics_det_ftxt,
             dt_epis_hd_ftxt_hist,
             id_way,
             id_hidrics_location,
             id_hidrics,
             id_hidrics_charact,
             free_text,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_prof_last_change,
             dt_eh_det_ftxt,
             id_hidrics_device,
             id_patient)
        VALUES
            (id_epis_hidrics_det_ftxt_in,
             dt_epis_hd_ftxt_hist_in,
             id_way_in,
             id_hidrics_location_in,
             id_hidrics_in,
             id_hidrics_charact_in,
             free_text_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_prof_last_change_in,
             dt_eh_det_ftxt_in,
             id_hidrics_device_in,
             id_patient_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_HD_FTXT_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    IF l_name = 'EHDFTH_EHDFT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_HIDRICS_DET_FTXT',
                                                        value_in           => id_epis_hidrics_det_ftxt_in);
                    END IF;
                    IF l_name = 'EHDFTH_HC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS_CHARACT',
                                                        value_in           => id_hidrics_charact_in);
                    END IF;
                    IF l_name = 'EHDFTH_H_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS',
                                                        value_in           => id_hidrics_in);
                    END IF;
                    IF l_name = 'EHDFTH_HL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS_LOCATION',
                                                        value_in           => id_hidrics_location_in);
                    END IF;
                    IF l_name = 'EHDFTH_HW_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WAY',
                                                        value_in           => id_way_in);
                    END IF;
                    IF l_name = 'EHDFTH_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_LAST_CHANGE',
                                                        value_in           => id_prof_last_change_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_epis_hidrics_det_ftxt_in IN epis_hd_ftxt_hist.id_epis_hidrics_det_ftxt%TYPE,
        dt_epis_hd_ftxt_hist_in     IN epis_hd_ftxt_hist.dt_epis_hd_ftxt_hist%TYPE,
        id_way_in                   IN epis_hd_ftxt_hist.id_way%TYPE DEFAULT NULL,
        id_hidrics_location_in      IN epis_hd_ftxt_hist.id_hidrics_location%TYPE DEFAULT NULL,
        id_hidrics_in               IN epis_hd_ftxt_hist.id_hidrics%TYPE DEFAULT NULL,
        id_hidrics_charact_in       IN epis_hd_ftxt_hist.id_hidrics_charact%TYPE DEFAULT NULL,
        free_text_in                IN epis_hd_ftxt_hist.free_text%TYPE DEFAULT NULL,
        create_user_in              IN epis_hd_ftxt_hist.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_hd_ftxt_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_hd_ftxt_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_hd_ftxt_hist.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_hd_ftxt_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_hd_ftxt_hist.update_institution%TYPE DEFAULT NULL,
        id_prof_last_change_in      IN epis_hd_ftxt_hist.id_prof_last_change%TYPE DEFAULT NULL,
        dt_eh_det_ftxt_in           IN epis_hd_ftxt_hist.dt_eh_det_ftxt%TYPE DEFAULT NULL,
        id_hidrics_device_in        IN epis_hd_ftxt_hist.id_hidrics_device%TYPE DEFAULT NULL,
        id_patient_in               IN epis_hd_ftxt_hist.id_patient%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_epis_hidrics_det_ftxt_in => id_epis_hidrics_det_ftxt_in,
            dt_epis_hd_ftxt_hist_in     => dt_epis_hd_ftxt_hist_in,
            id_way_in                   => id_way_in,
            id_hidrics_location_in      => id_hidrics_location_in,
            id_hidrics_in               => id_hidrics_in,
            id_hidrics_charact_in       => id_hidrics_charact_in,
            free_text_in                => free_text_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_prof_last_change_in      => id_prof_last_change_in,
            dt_eh_det_ftxt_in           => dt_eh_det_ftxt_in,
            id_hidrics_device_in        => id_hidrics_device_in,
            id_patient_in               => id_patient_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_hd_ftxt_hist%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec epis_hd_ftxt_hist%ROWTYPE := rec_in;
    BEGIN
        ins(id_epis_hidrics_det_ftxt_in => l_rec.id_epis_hidrics_det_ftxt,
            dt_epis_hd_ftxt_hist_in     => l_rec.dt_epis_hd_ftxt_hist,
            id_way_in                   => l_rec.id_way,
            id_hidrics_location_in      => l_rec.id_hidrics_location,
            id_hidrics_in               => l_rec.id_hidrics,
            id_hidrics_charact_in       => l_rec.id_hidrics_charact,
            free_text_in                => l_rec.free_text,
            create_user_in              => l_rec.create_user,
            create_time_in              => l_rec.create_time,
            create_institution_in       => l_rec.create_institution,
            update_user_in              => l_rec.update_user,
            update_time_in              => l_rec.update_time,
            update_institution_in       => l_rec.update_institution,
            id_prof_last_change_in      => l_rec.id_prof_last_change,
            dt_eh_det_ftxt_in           => l_rec.dt_eh_det_ftxt,
            id_hidrics_device_in        => l_rec.id_hidrics_device,
            id_patient_in               => l_rec.id_patient,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_hd_ftxt_hist%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN epis_hd_ftxt_hist_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO epis_hd_ftxt_hist
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_HIDRICS_DET_FTXT _' || indx,
                                                        value_in           => rows_in(indx).id_epis_hidrics_det_ftxt,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_EPIS_HD_FTXT_HIST _' || indx,
                                                        value_in           => rows_in(indx).dt_epis_hd_ftxt_hist,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_WAY _' || indx,
                                                        value_in           => rows_in(indx).id_way,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_HIDRICS_LOCATION _' || indx,
                                                        value_in           => rows_in(indx).id_hidrics_location,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_HIDRICS _' || indx,
                                                        value_in           => rows_in(indx).id_hidrics,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_HIDRICS_CHARACT _' || indx,
                                                        value_in           => rows_in(indx).id_hidrics_charact,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FREE_TEXT _' || indx,
                                                        value_in           => rows_in(indx).free_text,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_LAST_CHANGE _' || indx,
                                                        value_in           => rows_in(indx).id_prof_last_change,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_EH_DET_FTXT _' || indx,
                                                        value_in           => rows_in(indx).dt_eh_det_ftxt,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_HIDRICS_DEVICE _' || indx,
                                                        value_in           => rows_in(indx).id_hidrics_device,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'EPIS_HD_FTXT_HIST',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN epis_hd_ftxt_hist_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_epis_hidrics_det_ftxt_in IN epis_hd_ftxt_hist.id_epis_hidrics_det_ftxt%TYPE,
        dt_epis_hd_ftxt_hist_in     IN epis_hd_ftxt_hist.dt_epis_hd_ftxt_hist%TYPE,
        id_way_in                   IN epis_hd_ftxt_hist.id_way%TYPE DEFAULT NULL,
        id_way_nin                  IN BOOLEAN := TRUE,
        id_hidrics_location_in      IN epis_hd_ftxt_hist.id_hidrics_location%TYPE DEFAULT NULL,
        id_hidrics_location_nin     IN BOOLEAN := TRUE,
        id_hidrics_in               IN epis_hd_ftxt_hist.id_hidrics%TYPE DEFAULT NULL,
        id_hidrics_nin              IN BOOLEAN := TRUE,
        id_hidrics_charact_in       IN epis_hd_ftxt_hist.id_hidrics_charact%TYPE DEFAULT NULL,
        id_hidrics_charact_nin      IN BOOLEAN := TRUE,
        free_text_in                IN epis_hd_ftxt_hist.free_text%TYPE DEFAULT NULL,
        free_text_nin               IN BOOLEAN := TRUE,
        create_user_in              IN epis_hd_ftxt_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN epis_hd_ftxt_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN epis_hd_ftxt_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN epis_hd_ftxt_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN epis_hd_ftxt_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN epis_hd_ftxt_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        id_prof_last_change_in      IN epis_hd_ftxt_hist.id_prof_last_change%TYPE DEFAULT NULL,
        id_prof_last_change_nin     IN BOOLEAN := TRUE,
        dt_eh_det_ftxt_in           IN epis_hd_ftxt_hist.dt_eh_det_ftxt%TYPE DEFAULT NULL,
        dt_eh_det_ftxt_nin          IN BOOLEAN := TRUE,
        id_hidrics_device_in        IN epis_hd_ftxt_hist.id_hidrics_device%TYPE DEFAULT NULL,
        id_hidrics_device_nin       IN BOOLEAN := TRUE,
        id_patient_in               IN epis_hd_ftxt_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin              IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_id_way_n              NUMBER(1);
        l_id_hidrics_location_n NUMBER(1);
        l_id_hidrics_n          NUMBER(1);
        l_id_hidrics_charact_n  NUMBER(1);
        l_free_text_n           NUMBER(1);
        l_create_user_n         NUMBER(1);
        l_create_time_n         NUMBER(1);
        l_create_institution_n  NUMBER(1);
        l_update_user_n         NUMBER(1);
        l_update_time_n         NUMBER(1);
        l_update_institution_n  NUMBER(1);
        l_id_prof_last_change_n NUMBER(1);
        l_dt_eh_det_ftxt_n      NUMBER(1);
        l_id_hidrics_device_n   NUMBER(1);
        l_id_patient_n          NUMBER(1);
    BEGIN
    
        l_id_way_n              := sys.diutil.bool_to_int(id_way_nin);
        l_id_hidrics_location_n := sys.diutil.bool_to_int(id_hidrics_location_nin);
        l_id_hidrics_n          := sys.diutil.bool_to_int(id_hidrics_nin);
        l_id_hidrics_charact_n  := sys.diutil.bool_to_int(id_hidrics_charact_nin);
        l_free_text_n           := sys.diutil.bool_to_int(free_text_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_id_prof_last_change_n := sys.diutil.bool_to_int(id_prof_last_change_nin);
        l_dt_eh_det_ftxt_n      := sys.diutil.bool_to_int(dt_eh_det_ftxt_nin);
        l_id_hidrics_device_n   := sys.diutil.bool_to_int(id_hidrics_device_nin);
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
    
        UPDATE epis_hd_ftxt_hist
           SET id_way              = decode(l_id_way_n, 0, id_way_in, nvl(id_way_in, id_way)),
               id_hidrics_location = decode(l_id_hidrics_location_n,
                                            0,
                                            id_hidrics_location_in,
                                            nvl(id_hidrics_location_in, id_hidrics_location)),
               id_hidrics          = decode(l_id_hidrics_n, 0, id_hidrics_in, nvl(id_hidrics_in, id_hidrics)),
               id_hidrics_charact  = decode(l_id_hidrics_charact_n,
                                            0,
                                            id_hidrics_charact_in,
                                            nvl(id_hidrics_charact_in, id_hidrics_charact)),
               free_text           = decode(l_free_text_n, 0, free_text_in, nvl(free_text_in, free_text)),
               create_user         = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time         = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution  = decode(l_create_institution_n,
                                            0,
                                            create_institution_in,
                                            nvl(create_institution_in, create_institution)),
               update_user         = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time         = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution  = decode(l_update_institution_n,
                                            0,
                                            update_institution_in,
                                            nvl(update_institution_in, update_institution)),
               id_prof_last_change = decode(l_id_prof_last_change_n,
                                            0,
                                            id_prof_last_change_in,
                                            nvl(id_prof_last_change_in, id_prof_last_change)),
               dt_eh_det_ftxt      = decode(l_dt_eh_det_ftxt_n,
                                            0,
                                            dt_eh_det_ftxt_in,
                                            nvl(dt_eh_det_ftxt_in, dt_eh_det_ftxt)),
               id_hidrics_device   = decode(l_id_hidrics_device_n,
                                            0,
                                            id_hidrics_device_in,
                                            nvl(id_hidrics_device_in, id_hidrics_device)),
               id_patient          = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient))
         WHERE id_epis_hidrics_det_ftxt = id_epis_hidrics_det_ftxt_in
           AND dt_epis_hd_ftxt_hist = dt_epis_hd_ftxt_hist_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_HD_FTXT_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    IF l_name = 'EHDFTH_EHDFT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_HIDRICS_DET_FTXT',
                                                        value_in           => id_epis_hidrics_det_ftxt_in);
                    END IF;
                    IF l_name = 'EHDFTH_HC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS_CHARACT',
                                                        value_in           => id_hidrics_charact_in);
                    END IF;
                    IF l_name = 'EHDFTH_H_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS',
                                                        value_in           => id_hidrics_in);
                    END IF;
                    IF l_name = 'EHDFTH_HL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS_LOCATION',
                                                        value_in           => id_hidrics_location_in);
                    END IF;
                    IF l_name = 'EHDFTH_HW_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WAY',
                                                        value_in           => id_way_in);
                    END IF;
                    IF l_name = 'EHDFTH_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_LAST_CHANGE',
                                                        value_in           => id_prof_last_change_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_epis_hidrics_det_ftxt_in IN epis_hd_ftxt_hist.id_epis_hidrics_det_ftxt%TYPE,
        dt_epis_hd_ftxt_hist_in     IN epis_hd_ftxt_hist.dt_epis_hd_ftxt_hist%TYPE,
        id_way_in                   IN epis_hd_ftxt_hist.id_way%TYPE DEFAULT NULL,
        id_way_nin                  IN BOOLEAN := TRUE,
        id_hidrics_location_in      IN epis_hd_ftxt_hist.id_hidrics_location%TYPE DEFAULT NULL,
        id_hidrics_location_nin     IN BOOLEAN := TRUE,
        id_hidrics_in               IN epis_hd_ftxt_hist.id_hidrics%TYPE DEFAULT NULL,
        id_hidrics_nin              IN BOOLEAN := TRUE,
        id_hidrics_charact_in       IN epis_hd_ftxt_hist.id_hidrics_charact%TYPE DEFAULT NULL,
        id_hidrics_charact_nin      IN BOOLEAN := TRUE,
        free_text_in                IN epis_hd_ftxt_hist.free_text%TYPE DEFAULT NULL,
        free_text_nin               IN BOOLEAN := TRUE,
        create_user_in              IN epis_hd_ftxt_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN epis_hd_ftxt_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN epis_hd_ftxt_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN epis_hd_ftxt_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN epis_hd_ftxt_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN epis_hd_ftxt_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        id_prof_last_change_in      IN epis_hd_ftxt_hist.id_prof_last_change%TYPE DEFAULT NULL,
        id_prof_last_change_nin     IN BOOLEAN := TRUE,
        dt_eh_det_ftxt_in           IN epis_hd_ftxt_hist.dt_eh_det_ftxt%TYPE DEFAULT NULL,
        dt_eh_det_ftxt_nin          IN BOOLEAN := TRUE,
        id_hidrics_device_in        IN epis_hd_ftxt_hist.id_hidrics_device%TYPE DEFAULT NULL,
        id_hidrics_device_nin       IN BOOLEAN := TRUE,
        id_patient_in               IN epis_hd_ftxt_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin              IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_hidrics_det_ftxt_in => id_epis_hidrics_det_ftxt_in,
            dt_epis_hd_ftxt_hist_in     => dt_epis_hd_ftxt_hist_in,
            id_way_in                   => id_way_in,
            id_way_nin                  => id_way_nin,
            id_hidrics_location_in      => id_hidrics_location_in,
            id_hidrics_location_nin     => id_hidrics_location_nin,
            id_hidrics_in               => id_hidrics_in,
            id_hidrics_nin              => id_hidrics_nin,
            id_hidrics_charact_in       => id_hidrics_charact_in,
            id_hidrics_charact_nin      => id_hidrics_charact_nin,
            free_text_in                => free_text_in,
            free_text_nin               => free_text_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            id_prof_last_change_in      => id_prof_last_change_in,
            id_prof_last_change_nin     => id_prof_last_change_nin,
            dt_eh_det_ftxt_in           => dt_eh_det_ftxt_in,
            dt_eh_det_ftxt_nin          => dt_eh_det_ftxt_nin,
            id_hidrics_device_in        => id_hidrics_device_in,
            id_hidrics_device_nin       => id_hidrics_device_nin,
            id_patient_in               => id_patient_in,
            id_patient_nin              => id_patient_nin,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_way_in               IN epis_hd_ftxt_hist.id_way%TYPE DEFAULT NULL,
        id_way_nin              IN BOOLEAN := TRUE,
        id_hidrics_location_in  IN epis_hd_ftxt_hist.id_hidrics_location%TYPE DEFAULT NULL,
        id_hidrics_location_nin IN BOOLEAN := TRUE,
        id_hidrics_in           IN epis_hd_ftxt_hist.id_hidrics%TYPE DEFAULT NULL,
        id_hidrics_nin          IN BOOLEAN := TRUE,
        id_hidrics_charact_in   IN epis_hd_ftxt_hist.id_hidrics_charact%TYPE DEFAULT NULL,
        id_hidrics_charact_nin  IN BOOLEAN := TRUE,
        free_text_in            IN epis_hd_ftxt_hist.free_text%TYPE DEFAULT NULL,
        free_text_nin           IN BOOLEAN := TRUE,
        create_user_in          IN epis_hd_ftxt_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_hd_ftxt_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_hd_ftxt_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_hd_ftxt_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_hd_ftxt_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_hd_ftxt_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_prof_last_change_in  IN epis_hd_ftxt_hist.id_prof_last_change%TYPE DEFAULT NULL,
        id_prof_last_change_nin IN BOOLEAN := TRUE,
        dt_eh_det_ftxt_in       IN epis_hd_ftxt_hist.dt_eh_det_ftxt%TYPE DEFAULT NULL,
        dt_eh_det_ftxt_nin      IN BOOLEAN := TRUE,
        id_hidrics_device_in    IN epis_hd_ftxt_hist.id_hidrics_device%TYPE DEFAULT NULL,
        id_hidrics_device_nin   IN BOOLEAN := TRUE,
        id_patient_in           IN epis_hd_ftxt_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                       VARCHAR2(32767);
        l_rows_out                  table_varchar;
        l_id_way_n                  NUMBER(1);
        l_id_hidrics_location_n     NUMBER(1);
        l_id_hidrics_n              NUMBER(1);
        l_id_hidrics_charact_n      NUMBER(1);
        l_free_text_n               NUMBER(1);
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_update_institution_n      NUMBER(1);
        l_id_prof_last_change_n     NUMBER(1);
        l_dt_eh_det_ftxt_n          NUMBER(1);
        l_id_hidrics_device_n       NUMBER(1);
        l_id_patient_n              NUMBER(1);
        id_epis_hidrics_det_ftxt_in epis_hd_ftxt_hist.id_epis_hidrics_det_ftxt%TYPE;
        dt_epis_hd_ftxt_hist_in     epis_hd_ftxt_hist.dt_epis_hd_ftxt_hist%TYPE;
    BEGIN
    
        l_id_way_n              := sys.diutil.bool_to_int(id_way_nin);
        l_id_hidrics_location_n := sys.diutil.bool_to_int(id_hidrics_location_nin);
        l_id_hidrics_n          := sys.diutil.bool_to_int(id_hidrics_nin);
        l_id_hidrics_charact_n  := sys.diutil.bool_to_int(id_hidrics_charact_nin);
        l_free_text_n           := sys.diutil.bool_to_int(free_text_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_id_prof_last_change_n := sys.diutil.bool_to_int(id_prof_last_change_nin);
        l_dt_eh_det_ftxt_n      := sys.diutil.bool_to_int(dt_eh_det_ftxt_nin);
        l_id_hidrics_device_n   := sys.diutil.bool_to_int(id_hidrics_device_nin);
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
    
        l_sql := 'UPDATE EPIS_HD_FTXT_HIST SET ' || ' ID_WAY = decode (' || l_id_way_n ||
                 ',0,:id_way_in, NVL (:id_way_in, ID_WAY)) ' || ',' || ' ID_HIDRICS_LOCATION = decode (' ||
                 l_id_hidrics_location_n ||
                 ',0,:id_hidrics_location_in, NVL (:id_hidrics_location_in, ID_HIDRICS_LOCATION)) ' || ',' ||
                 ' ID_HIDRICS = decode (' || l_id_hidrics_n || ',0,:id_hidrics_in, NVL (:id_hidrics_in, ID_HIDRICS)) ' || ',' ||
                 ' ID_HIDRICS_CHARACT = decode (' || l_id_hidrics_charact_n ||
                 ',0,:id_hidrics_charact_in, NVL (:id_hidrics_charact_in, ID_HIDRICS_CHARACT)) ' || ',' ||
                 ' FREE_TEXT = decode (' || l_free_text_n || ',0,:free_text_in, NVL (:free_text_in, FREE_TEXT)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' ID_PROF_LAST_CHANGE = decode (' || l_id_prof_last_change_n ||
                 ',0,:id_prof_last_change_in, NVL (:id_prof_last_change_in, ID_PROF_LAST_CHANGE)) ' || ',' ||
                 ' DT_EH_DET_FTXT = decode (' || l_dt_eh_det_ftxt_n ||
                 ',0,:dt_eh_det_ftxt_in, NVL (:dt_eh_det_ftxt_in, DT_EH_DET_FTXT)) ' || ',' ||
                 ' ID_HIDRICS_DEVICE = decode (' || l_id_hidrics_device_n ||
                 ',0,:id_hidrics_device_in, NVL (:id_hidrics_device_in, ID_HIDRICS_DEVICE)) ' || ',' ||
                 ' ID_PATIENT = decode (' || l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' ||
                 ' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_way_in, id_hidrics_location_in, id_hidrics_in, id_hidrics_charact_in, free_text_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_prof_last_change_in, dt_eh_det_ftxt_in, id_hidrics_device_in, id_patient_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_HD_FTXT_HIST');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    IF l_name = 'EHDFTH_EHDFT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPIS_HIDRICS_DET_FTXT',
                                                        value_in           => id_epis_hidrics_det_ftxt_in);
                    END IF;
                    IF l_name = 'EHDFTH_HC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS_CHARACT',
                                                        value_in           => id_hidrics_charact_in);
                    END IF;
                    IF l_name = 'EHDFTH_H_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS',
                                                        value_in           => id_hidrics_in);
                    END IF;
                    IF l_name = 'EHDFTH_HL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS_LOCATION',
                                                        value_in           => id_hidrics_location_in);
                    END IF;
                    IF l_name = 'EHDFTH_HW_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_WAY',
                                                        value_in           => id_way_in);
                    END IF;
                    IF l_name = 'EHDFTH_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_LAST_CHANGE',
                                                        value_in           => id_prof_last_change_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_way_in               IN epis_hd_ftxt_hist.id_way%TYPE DEFAULT NULL,
        id_way_nin              IN BOOLEAN := TRUE,
        id_hidrics_location_in  IN epis_hd_ftxt_hist.id_hidrics_location%TYPE DEFAULT NULL,
        id_hidrics_location_nin IN BOOLEAN := TRUE,
        id_hidrics_in           IN epis_hd_ftxt_hist.id_hidrics%TYPE DEFAULT NULL,
        id_hidrics_nin          IN BOOLEAN := TRUE,
        id_hidrics_charact_in   IN epis_hd_ftxt_hist.id_hidrics_charact%TYPE DEFAULT NULL,
        id_hidrics_charact_nin  IN BOOLEAN := TRUE,
        free_text_in            IN epis_hd_ftxt_hist.free_text%TYPE DEFAULT NULL,
        free_text_nin           IN BOOLEAN := TRUE,
        create_user_in          IN epis_hd_ftxt_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_hd_ftxt_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_hd_ftxt_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_hd_ftxt_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_hd_ftxt_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_hd_ftxt_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_prof_last_change_in  IN epis_hd_ftxt_hist.id_prof_last_change%TYPE DEFAULT NULL,
        id_prof_last_change_nin IN BOOLEAN := TRUE,
        dt_eh_det_ftxt_in       IN epis_hd_ftxt_hist.dt_eh_det_ftxt%TYPE DEFAULT NULL,
        dt_eh_det_ftxt_nin      IN BOOLEAN := TRUE,
        id_hidrics_device_in    IN epis_hd_ftxt_hist.id_hidrics_device%TYPE DEFAULT NULL,
        id_hidrics_device_nin   IN BOOLEAN := TRUE,
        id_patient_in           IN epis_hd_ftxt_hist.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_way_in               => id_way_in,
            id_way_nin              => id_way_nin,
            id_hidrics_location_in  => id_hidrics_location_in,
            id_hidrics_location_nin => id_hidrics_location_nin,
            id_hidrics_in           => id_hidrics_in,
            id_hidrics_nin          => id_hidrics_nin,
            id_hidrics_charact_in   => id_hidrics_charact_in,
            id_hidrics_charact_nin  => id_hidrics_charact_nin,
            free_text_in            => free_text_in,
            free_text_nin           => free_text_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            id_prof_last_change_in  => id_prof_last_change_in,
            id_prof_last_change_nin => id_prof_last_change_nin,
            dt_eh_det_ftxt_in       => dt_eh_det_ftxt_in,
            dt_eh_det_ftxt_nin      => dt_eh_det_ftxt_nin,
            id_hidrics_device_in    => id_hidrics_device_in,
            id_hidrics_device_nin   => id_hidrics_device_nin,
            id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN epis_hd_ftxt_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_hidrics_det_ftxt_in => rec_in.id_epis_hidrics_det_ftxt,
            dt_epis_hd_ftxt_hist_in     => rec_in.dt_epis_hd_ftxt_hist,
            id_way_in                   => rec_in.id_way,
            id_hidrics_location_in      => rec_in.id_hidrics_location,
            id_hidrics_in               => rec_in.id_hidrics,
            id_hidrics_charact_in       => rec_in.id_hidrics_charact,
            free_text_in                => rec_in.free_text,
            create_user_in              => rec_in.create_user,
            create_time_in              => rec_in.create_time,
            create_institution_in       => rec_in.create_institution,
            update_user_in              => rec_in.update_user,
            update_time_in              => rec_in.update_time,
            update_institution_in       => rec_in.update_institution,
            id_prof_last_change_in      => rec_in.id_prof_last_change,
            dt_eh_det_ftxt_in           => rec_in.dt_eh_det_ftxt,
            id_hidrics_device_in        => rec_in.id_hidrics_device,
            id_patient_in               => rec_in.id_patient
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN epis_hd_ftxt_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_hidrics_det_ftxt_in => rec_in.id_epis_hidrics_det_ftxt,
            dt_epis_hd_ftxt_hist_in     => rec_in.dt_epis_hd_ftxt_hist,
            id_way_in                   => rec_in.id_way,
            id_hidrics_location_in      => rec_in.id_hidrics_location,
            id_hidrics_in               => rec_in.id_hidrics,
            id_hidrics_charact_in       => rec_in.id_hidrics_charact,
            free_text_in                => rec_in.free_text,
            create_user_in              => rec_in.create_user,
            create_time_in              => rec_in.create_time,
            create_institution_in       => rec_in.create_institution,
            update_user_in              => rec_in.update_user,
            update_time_in              => rec_in.update_time,
            update_institution_in       => rec_in.update_institution,
            id_prof_last_change_in      => rec_in.id_prof_last_change,
            dt_eh_det_ftxt_in           => rec_in.dt_eh_det_ftxt,
            id_hidrics_device_in        => rec_in.id_hidrics_device,
            id_patient_in               => rec_in.id_patient
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_epis_hidrics_det_ftxt_in IN epis_hd_ftxt_hist.id_epis_hidrics_det_ftxt%TYPE,
        dt_epis_hd_ftxt_hist_in     IN epis_hd_ftxt_hist.dt_epis_hd_ftxt_hist%TYPE,
        id_way_in                   IN epis_hd_ftxt_hist.id_way%TYPE DEFAULT NULL,
        id_hidrics_location_in      IN epis_hd_ftxt_hist.id_hidrics_location%TYPE DEFAULT NULL,
        id_hidrics_in               IN epis_hd_ftxt_hist.id_hidrics%TYPE DEFAULT NULL,
        id_hidrics_charact_in       IN epis_hd_ftxt_hist.id_hidrics_charact%TYPE DEFAULT NULL,
        free_text_in                IN epis_hd_ftxt_hist.free_text%TYPE DEFAULT NULL,
        create_user_in              IN epis_hd_ftxt_hist.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_hd_ftxt_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_hd_ftxt_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_hd_ftxt_hist.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_hd_ftxt_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_hd_ftxt_hist.update_institution%TYPE DEFAULT NULL,
        id_prof_last_change_in      IN epis_hd_ftxt_hist.id_prof_last_change%TYPE DEFAULT NULL,
        dt_eh_det_ftxt_in           IN epis_hd_ftxt_hist.dt_eh_det_ftxt%TYPE DEFAULT NULL,
        id_hidrics_device_in        IN epis_hd_ftxt_hist.id_hidrics_device%TYPE DEFAULT NULL,
        id_patient_in               IN epis_hd_ftxt_hist.id_patient%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_hidrics_det_ftxt_in => id_epis_hidrics_det_ftxt_in,
            dt_epis_hd_ftxt_hist_in     => dt_epis_hd_ftxt_hist_in,
            id_way_in                   => id_way_in,
            id_hidrics_location_in      => id_hidrics_location_in,
            id_hidrics_in               => id_hidrics_in,
            id_hidrics_charact_in       => id_hidrics_charact_in,
            free_text_in                => free_text_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_prof_last_change_in      => id_prof_last_change_in,
            dt_eh_det_ftxt_in           => dt_eh_det_ftxt_in,
            id_hidrics_device_in        => id_hidrics_device_in,
            id_patient_in               => id_patient_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_epis_hidrics_det_ftxt_in => id_epis_hidrics_det_ftxt_in,
                dt_epis_hd_ftxt_hist_in     => dt_epis_hd_ftxt_hist_in,
                id_way_in                   => id_way_in,
                id_hidrics_location_in      => id_hidrics_location_in,
                id_hidrics_in               => id_hidrics_in,
                id_hidrics_charact_in       => id_hidrics_charact_in,
                free_text_in                => free_text_in,
                create_user_in              => create_user_in,
                create_time_in              => create_time_in,
                create_institution_in       => create_institution_in,
                update_user_in              => update_user_in,
                update_time_in              => update_time_in,
                update_institution_in       => update_institution_in,
                id_prof_last_change_in      => id_prof_last_change_in,
                dt_eh_det_ftxt_in           => dt_eh_det_ftxt_in,
                id_hidrics_device_in        => id_hidrics_device_in,
                id_patient_in               => id_patient_in,
                handle_error_in             => handle_error_in,
                rows_out                    => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_epis_hidrics_det_ftxt_in IN epis_hd_ftxt_hist.id_epis_hidrics_det_ftxt%TYPE,
        dt_epis_hd_ftxt_hist_in     IN epis_hd_ftxt_hist.dt_epis_hd_ftxt_hist%TYPE,
        id_way_in                   IN epis_hd_ftxt_hist.id_way%TYPE DEFAULT NULL,
        id_hidrics_location_in      IN epis_hd_ftxt_hist.id_hidrics_location%TYPE DEFAULT NULL,
        id_hidrics_in               IN epis_hd_ftxt_hist.id_hidrics%TYPE DEFAULT NULL,
        id_hidrics_charact_in       IN epis_hd_ftxt_hist.id_hidrics_charact%TYPE DEFAULT NULL,
        free_text_in                IN epis_hd_ftxt_hist.free_text%TYPE DEFAULT NULL,
        create_user_in              IN epis_hd_ftxt_hist.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_hd_ftxt_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_hd_ftxt_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_hd_ftxt_hist.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_hd_ftxt_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_hd_ftxt_hist.update_institution%TYPE DEFAULT NULL,
        id_prof_last_change_in      IN epis_hd_ftxt_hist.id_prof_last_change%TYPE DEFAULT NULL,
        dt_eh_det_ftxt_in           IN epis_hd_ftxt_hist.dt_eh_det_ftxt%TYPE DEFAULT NULL,
        id_hidrics_device_in        IN epis_hd_ftxt_hist.id_hidrics_device%TYPE DEFAULT NULL,
        id_patient_in               IN epis_hd_ftxt_hist.id_patient%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_epis_hidrics_det_ftxt_in,
                dt_epis_hd_ftxt_hist_in,
                id_way_in,
                id_hidrics_location_in,
                id_hidrics_in,
                id_hidrics_charact_in,
                free_text_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_prof_last_change_in,
                dt_eh_det_ftxt_in,
                id_hidrics_device_in,
                id_patient_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN epis_hd_ftxt_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_epis_hidrics_det_ftxt id_epis_hidrics_det_ftxt_cc;
        l_dt_epis_hd_ftxt_hist     dt_epis_hd_ftxt_hist_cc;
        l_id_way                   id_way_cc;
        l_id_hidrics_location      id_hidrics_location_cc;
        l_id_hidrics               id_hidrics_cc;
        l_id_hidrics_charact       id_hidrics_charact_cc;
        l_free_text                free_text_cc;
        l_create_user              create_user_cc;
        l_create_time              create_time_cc;
        l_create_institution       create_institution_cc;
        l_update_user              update_user_cc;
        l_update_time              update_time_cc;
        l_update_institution       update_institution_cc;
        l_id_prof_last_change      id_prof_last_change_cc;
        l_dt_eh_det_ftxt           dt_eh_det_ftxt_cc;
        l_id_hidrics_device        id_hidrics_device_cc;
        l_id_patient               id_patient_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_epis_hidrics_det_ftxt(i) := col_in(i).id_epis_hidrics_det_ftxt;
            l_dt_epis_hd_ftxt_hist(i) := col_in(i).dt_epis_hd_ftxt_hist;
            l_id_way(i) := col_in(i).id_way;
            l_id_hidrics_location(i) := col_in(i).id_hidrics_location;
            l_id_hidrics(i) := col_in(i).id_hidrics;
            l_id_hidrics_charact(i) := col_in(i).id_hidrics_charact;
            l_free_text(i) := col_in(i).free_text;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_prof_last_change(i) := col_in(i).id_prof_last_change;
            l_dt_eh_det_ftxt(i) := col_in(i).dt_eh_det_ftxt;
            l_id_hidrics_device(i) := col_in(i).id_hidrics_device;
            l_id_patient(i) := col_in(i).id_patient;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_hd_ftxt_hist
                   SET id_way              = nvl(l_id_way(i), id_way),
                       id_hidrics_location = nvl(l_id_hidrics_location(i), id_hidrics_location),
                       id_hidrics          = nvl(l_id_hidrics(i), id_hidrics),
                       id_hidrics_charact  = nvl(l_id_hidrics_charact(i), id_hidrics_charact),
                       free_text           = nvl(l_free_text(i), free_text),
                       create_user         = nvl(l_create_user(i), create_user),
                       create_time         = nvl(l_create_time(i), create_time),
                       create_institution  = nvl(l_create_institution(i), create_institution),
                       update_user         = nvl(l_update_user(i), update_user),
                       update_time         = nvl(l_update_time(i), update_time),
                       update_institution  = nvl(l_update_institution(i), update_institution),
                       id_prof_last_change = nvl(l_id_prof_last_change(i), id_prof_last_change),
                       dt_eh_det_ftxt      = nvl(l_dt_eh_det_ftxt(i), dt_eh_det_ftxt),
                       id_hidrics_device   = nvl(l_id_hidrics_device(i), id_hidrics_device),
                       id_patient          = nvl(l_id_patient(i), id_patient)
                 WHERE id_epis_hidrics_det_ftxt = l_id_epis_hidrics_det_ftxt(i)
                   AND dt_epis_hd_ftxt_hist = l_dt_epis_hd_ftxt_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_hd_ftxt_hist
                   SET id_way              = l_id_way(i),
                       id_hidrics_location = l_id_hidrics_location(i),
                       id_hidrics          = l_id_hidrics(i),
                       id_hidrics_charact  = l_id_hidrics_charact(i),
                       free_text           = l_free_text(i),
                       create_user         = l_create_user(i),
                       create_time         = l_create_time(i),
                       create_institution  = l_create_institution(i),
                       update_user         = l_update_user(i),
                       update_time         = l_update_time(i),
                       update_institution  = l_update_institution(i),
                       id_prof_last_change = l_id_prof_last_change(i),
                       dt_eh_det_ftxt      = l_dt_eh_det_ftxt(i),
                       id_hidrics_device   = l_id_hidrics_device(i),
                       id_patient          = l_id_patient(i)
                 WHERE id_epis_hidrics_det_ftxt = l_id_epis_hidrics_det_ftxt(i)
                   AND dt_epis_hd_ftxt_hist = l_dt_epis_hd_ftxt_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN epis_hd_ftxt_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE EPIS_HD_FTXT_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE EPIS_HD_FTXT_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE EPIS_HD_FTXT_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE EPIS_HD_FTXT_HIST set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_epis_hidrics_det_ftxt_in IN epis_hd_ftxt_hist.id_epis_hidrics_det_ftxt%TYPE,
        dt_epis_hd_ftxt_hist_in     IN epis_hd_ftxt_hist.dt_epis_hd_ftxt_hist%TYPE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hd_ftxt_hist
         WHERE id_epis_hidrics_det_ftxt = id_epis_hidrics_det_ftxt_in
           AND dt_epis_hd_ftxt_hist = dt_epis_hd_ftxt_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_epis_hidrics_det_ftxt_in IN epis_hd_ftxt_hist.id_epis_hidrics_det_ftxt%TYPE,
        dt_epis_hd_ftxt_hist_in     IN epis_hd_ftxt_hist.dt_epis_hd_ftxt_hist%TYPE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_epis_hidrics_det_ftxt_in => id_epis_hidrics_det_ftxt_in,
            dt_epis_hd_ftxt_hist_in     => dt_epis_hd_ftxt_hist_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_EPIS_HIDRICS_DET_FTXT
    PROCEDURE del_id_epis_hidrics_det_ftxt
    (
        id_epis_hidrics_det_ftxt_in IN epis_hd_ftxt_hist.id_epis_hidrics_det_ftxt%TYPE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hd_ftxt_hist
         WHERE id_epis_hidrics_det_ftxt = id_epis_hidrics_det_ftxt_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_epis_hidrics_det_ftxt;

    -- Delete all rows for primary key column DT_EPIS_HD_FTXT_HIST
    PROCEDURE del_dt_epis_hd_ftxt_hist
    (
        dt_epis_hd_ftxt_hist_in IN epis_hd_ftxt_hist.dt_epis_hd_ftxt_hist%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hd_ftxt_hist
         WHERE dt_epis_hd_ftxt_hist = dt_epis_hd_ftxt_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_dt_epis_hd_ftxt_hist;

    -- Delete all rows for primary key column ID_EPIS_HIDRICS_DET_FTXT
    PROCEDURE del_id_epis_hidrics_det_ftxt
    (
        id_epis_hidrics_det_ftxt_in IN epis_hd_ftxt_hist.id_epis_hidrics_det_ftxt%TYPE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_epis_hidrics_det_ftxt(id_epis_hidrics_det_ftxt_in => id_epis_hidrics_det_ftxt_in,
                                     handle_error_in             => handle_error_in,
                                     rows_out                    => rows_out);
    END del_id_epis_hidrics_det_ftxt;

    -- Delete all rows for primary key column DT_EPIS_HD_FTXT_HIST
    PROCEDURE del_dt_epis_hd_ftxt_hist
    (
        dt_epis_hd_ftxt_hist_in IN epis_hd_ftxt_hist.dt_epis_hd_ftxt_hist%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dt_epis_hd_ftxt_hist(dt_epis_hd_ftxt_hist_in => dt_epis_hd_ftxt_hist_in,
                                 handle_error_in         => handle_error_in,
                                 rows_out                => rows_out);
    END del_dt_epis_hd_ftxt_hist;

    PROCEDURE del_ehdfth_ehdft_fk
    (
        id_epis_hidrics_det_ftxt_in IN epis_hd_ftxt_hist.id_epis_hidrics_det_ftxt%TYPE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hd_ftxt_hist
         WHERE id_epis_hidrics_det_ftxt = del_ehdfth_ehdft_fk.id_epis_hidrics_det_ftxt_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ehdfth_ehdft_fk;

    PROCEDURE del_ehdfth_ehdft_fk
    (
        id_epis_hidrics_det_ftxt_in IN epis_hd_ftxt_hist.id_epis_hidrics_det_ftxt%TYPE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ehdfth_ehdft_fk(id_epis_hidrics_det_ftxt_in => id_epis_hidrics_det_ftxt_in,
                            handle_error_in             => handle_error_in,
                            rows_out                    => rows_out);
    END del_ehdfth_ehdft_fk;

    PROCEDURE del_ehdfth_hc_fk
    (
        id_hidrics_charact_in IN epis_hd_ftxt_hist.id_hidrics_charact%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hd_ftxt_hist
         WHERE id_hidrics_charact = del_ehdfth_hc_fk.id_hidrics_charact_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ehdfth_hc_fk;

    PROCEDURE del_ehdfth_hc_fk
    (
        id_hidrics_charact_in IN epis_hd_ftxt_hist.id_hidrics_charact%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ehdfth_hc_fk(id_hidrics_charact_in => id_hidrics_charact_in,
                         handle_error_in       => handle_error_in,
                         rows_out              => rows_out);
    END del_ehdfth_hc_fk;

    PROCEDURE del_ehdfth_h_fk
    (
        id_hidrics_in   IN epis_hd_ftxt_hist.id_hidrics%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hd_ftxt_hist
         WHERE id_hidrics = del_ehdfth_h_fk.id_hidrics_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ehdfth_h_fk;

    PROCEDURE del_ehdfth_h_fk
    (
        id_hidrics_in   IN epis_hd_ftxt_hist.id_hidrics%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ehdfth_h_fk(id_hidrics_in => id_hidrics_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ehdfth_h_fk;

    PROCEDURE del_ehdfth_hl_fk
    (
        id_hidrics_location_in IN epis_hd_ftxt_hist.id_hidrics_location%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hd_ftxt_hist
         WHERE id_hidrics_location = del_ehdfth_hl_fk.id_hidrics_location_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ehdfth_hl_fk;

    PROCEDURE del_ehdfth_hl_fk
    (
        id_hidrics_location_in IN epis_hd_ftxt_hist.id_hidrics_location%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ehdfth_hl_fk(id_hidrics_location_in => id_hidrics_location_in,
                         handle_error_in        => handle_error_in,
                         rows_out               => rows_out);
    END del_ehdfth_hl_fk;

    PROCEDURE del_ehdfth_hw_fk
    (
        id_way_in       IN epis_hd_ftxt_hist.id_way%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hd_ftxt_hist
         WHERE id_way = del_ehdfth_hw_fk.id_way_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ehdfth_hw_fk;

    PROCEDURE del_ehdfth_hw_fk
    (
        id_way_in       IN epis_hd_ftxt_hist.id_way%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ehdfth_hw_fk(id_way_in => id_way_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ehdfth_hw_fk;

    PROCEDURE del_ehdfth_prof_fk
    (
        id_prof_last_change_in IN epis_hd_ftxt_hist.id_prof_last_change%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hd_ftxt_hist
         WHERE id_prof_last_change = del_ehdfth_prof_fk.id_prof_last_change_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ehdfth_prof_fk;

    PROCEDURE del_ehdfth_prof_fk
    (
        id_prof_last_change_in IN epis_hd_ftxt_hist.id_prof_last_change%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ehdfth_prof_fk(id_prof_last_change_in => id_prof_last_change_in,
                           handle_error_in        => handle_error_in,
                           rows_out               => rows_out);
    END del_ehdfth_prof_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM EPIS_HD_FTXT_HIST';
        ELSE
            RETURN 'DELETE FROM EPIS_HD_FTXT_HIST WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HD_FTXT_HIST');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HD_FTXT_HIST');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(epis_hd_ftxt_hist_inout IN OUT epis_hd_ftxt_hist%ROWTYPE) IS
    BEGIN
        epis_hd_ftxt_hist_inout.id_epis_hidrics_det_ftxt := NULL;
        epis_hd_ftxt_hist_inout.dt_epis_hd_ftxt_hist     := NULL;
        epis_hd_ftxt_hist_inout.id_way                   := NULL;
        epis_hd_ftxt_hist_inout.id_hidrics_location      := NULL;
        epis_hd_ftxt_hist_inout.id_hidrics               := NULL;
        epis_hd_ftxt_hist_inout.id_hidrics_charact       := NULL;
        epis_hd_ftxt_hist_inout.free_text                := NULL;
        epis_hd_ftxt_hist_inout.create_user              := NULL;
        epis_hd_ftxt_hist_inout.create_time              := NULL;
        epis_hd_ftxt_hist_inout.create_institution       := NULL;
        epis_hd_ftxt_hist_inout.update_user              := NULL;
        epis_hd_ftxt_hist_inout.update_time              := NULL;
        epis_hd_ftxt_hist_inout.update_institution       := NULL;
        epis_hd_ftxt_hist_inout.id_prof_last_change      := NULL;
        epis_hd_ftxt_hist_inout.dt_eh_det_ftxt           := NULL;
        epis_hd_ftxt_hist_inout.id_hidrics_device        := NULL;
        epis_hd_ftxt_hist_inout.id_patient               := NULL;
    END initrec;

    FUNCTION initrec RETURN epis_hd_ftxt_hist%ROWTYPE IS
        l_epis_hd_ftxt_hist epis_hd_ftxt_hist%ROWTYPE;
    BEGIN
        RETURN l_epis_hd_ftxt_hist;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_hd_ftxt_hist_tc IS
        data epis_hd_ftxt_hist_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM epis_hd_ftxt_hist
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_hd_ftxt_hist_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data epis_hd_ftxt_hist_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_epis_hd_ftxt_hist;
/
