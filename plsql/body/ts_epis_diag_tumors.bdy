/*-- Last Change Revision: $Rev: 2028055 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:04 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY TS_EPIS_DIAG_TUMORS
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: MarÃ§o 14, 2012 14:9:10
| Created By: ALERT
*/
IS


   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_epis_diagnosis_in IN EPIS_DIAG_TUMORS.ID_EPIS_DIAGNOSIS%TYPE,
      tumor_num_in IN EPIS_DIAG_TUMORS.TUMOR_NUM%TYPE
      ,
      id_topography_in IN EPIS_DIAG_TUMORS.ID_TOPOGRAPHY%TYPE DEFAULT NULL,
      id_topog_inst_owner_in IN EPIS_DIAG_TUMORS.ID_TOPOG_INST_OWNER%TYPE DEFAULT NULL,
      id_laterality_in IN EPIS_DIAG_TUMORS.ID_LATERALITY%TYPE DEFAULT NULL,
      id_lat_inst_owner_in IN EPIS_DIAG_TUMORS.ID_LAT_INST_OWNER%TYPE DEFAULT NULL,
      id_morphology_in IN EPIS_DIAG_TUMORS.ID_MORPHOLOGY%TYPE DEFAULT NULL,
      id_morph_inst_owner_in IN EPIS_DIAG_TUMORS.ID_MORPH_INST_OWNER%TYPE DEFAULT NULL,
      id_behavior_in IN EPIS_DIAG_TUMORS.ID_BEHAVIOR%TYPE DEFAULT NULL,
      id_behav_inst_owner_in IN EPIS_DIAG_TUMORS.ID_BEHAV_INST_OWNER%TYPE DEFAULT NULL,
      id_histological_grade_in IN EPIS_DIAG_TUMORS.ID_HISTOLOGICAL_GRADE%TYPE DEFAULT NULL,
      id_hgrade_inst_owner_in IN EPIS_DIAG_TUMORS.ID_HGRADE_INST_OWNER%TYPE DEFAULT NULL,
      id_other_grading_sys_in IN EPIS_DIAG_TUMORS.ID_OTHER_GRADING_SYS%TYPE DEFAULT NULL,
      id_ogradsys_inst_owner_in IN EPIS_DIAG_TUMORS.ID_OGRADSYS_INST_OWNER%TYPE DEFAULT NULL,
      flg_unknown_dimension_in IN EPIS_DIAG_TUMORS.FLG_UNKNOWN_DIMENSION%TYPE DEFAULT NULL,
      num_dimension_in IN EPIS_DIAG_TUMORS.NUM_DIMENSION%TYPE DEFAULT NULL,
      desc_dimension_in IN EPIS_DIAG_TUMORS.DESC_DIMENSION%TYPE DEFAULT NULL,
      additional_pathol_info_in IN EPIS_DIAG_TUMORS.ADDITIONAL_PATHOL_INFO%TYPE DEFAULT NULL,
      dt_epis_diagnosis_tumors_in IN EPIS_DIAG_TUMORS.DT_EPIS_DIAGNOSIS_TUMORS%TYPE DEFAULT NULL,
      create_user_in IN EPIS_DIAG_TUMORS.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN EPIS_DIAG_TUMORS.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN EPIS_DIAG_TUMORS.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN EPIS_DIAG_TUMORS.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN EPIS_DIAG_TUMORS.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN EPIS_DIAG_TUMORS.UPDATE_INSTITUTION%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO EPIS_DIAG_TUMORS (
         ID_EPIS_DIAGNOSIS,
         TUMOR_NUM,
         ID_TOPOGRAPHY,
         ID_TOPOG_INST_OWNER,
         ID_LATERALITY,
         ID_LAT_INST_OWNER,
         ID_MORPHOLOGY,
         ID_MORPH_INST_OWNER,
         ID_BEHAVIOR,
         ID_BEHAV_INST_OWNER,
         ID_HISTOLOGICAL_GRADE,
         ID_HGRADE_INST_OWNER,
         ID_OTHER_GRADING_SYS,
         ID_OGRADSYS_INST_OWNER,
         FLG_UNKNOWN_DIMENSION,
         NUM_DIMENSION,
         DESC_DIMENSION,
         ADDITIONAL_PATHOL_INFO,
         DT_EPIS_DIAGNOSIS_TUMORS,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION
         )
      VALUES (
         id_epis_diagnosis_in,
         tumor_num_in,
         id_topography_in,
         id_topog_inst_owner_in,
         id_laterality_in,
         id_lat_inst_owner_in,
         id_morphology_in,
         id_morph_inst_owner_in,
         id_behavior_in,
         id_behav_inst_owner_in,
         id_histological_grade_in,
         id_hgrade_inst_owner_in,
         id_other_grading_sys_in,
         id_ogradsys_inst_owner_in,
         flg_unknown_dimension_in,
         num_dimension_in,
         desc_dimension_in,
         additional_pathol_info_in,
         dt_epis_diagnosis_tumors_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'EPIS_DIAG_TUMORS');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           IF l_name = 'EDTMRS_CNCPTTR1_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_TOPOGRAPHY'
               , value_in => id_topography_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_TOPOG_INST_OWNER'
               , value_in => id_topog_inst_owner_in);
           END IF;
           IF l_name = 'EDTMRS_CNCPTTR2_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_LATERALITY'
               , value_in => id_laterality_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_LAT_INST_OWNER'
               , value_in => id_lat_inst_owner_in);
           END IF;
           IF l_name = 'EDTMRS_CNCPTTR3_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_MORPHOLOGY'
               , value_in => id_morphology_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_MORPH_INST_OWNER'
               , value_in => id_morph_inst_owner_in);
           END IF;
           IF l_name = 'EDTMRS_CNCPTTR4_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_BEHAVIOR'
               , value_in => id_behavior_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_BEHAV_INST_OWNER'
               , value_in => id_behav_inst_owner_in);
           END IF;
           IF l_name = 'EDTMRS_CNCPTTR5_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_HISTOLOGICAL_GRADE'
               , value_in => id_histological_grade_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_HGRADE_INST_OWNER'
               , value_in => id_hgrade_inst_owner_in);
           END IF;
           IF l_name = 'EDTMRS_CNCPTTR6_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_OTHER_GRADING_SYS'
               , value_in => id_other_grading_sys_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_OGRADSYS_INST_OWNER'
               , value_in => id_ogradsys_inst_owner_in);
           END IF;
           IF l_name = 'EDTMRS_ED_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_DIAGNOSIS'
               , value_in => id_epis_diagnosis_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_epis_diagnosis_in IN EPIS_DIAG_TUMORS.ID_EPIS_DIAGNOSIS%TYPE,
      tumor_num_in IN EPIS_DIAG_TUMORS.TUMOR_NUM%TYPE
      ,
      id_topography_in IN EPIS_DIAG_TUMORS.ID_TOPOGRAPHY%TYPE DEFAULT NULL,
      id_topog_inst_owner_in IN EPIS_DIAG_TUMORS.ID_TOPOG_INST_OWNER%TYPE DEFAULT NULL,
      id_laterality_in IN EPIS_DIAG_TUMORS.ID_LATERALITY%TYPE DEFAULT NULL,
      id_lat_inst_owner_in IN EPIS_DIAG_TUMORS.ID_LAT_INST_OWNER%TYPE DEFAULT NULL,
      id_morphology_in IN EPIS_DIAG_TUMORS.ID_MORPHOLOGY%TYPE DEFAULT NULL,
      id_morph_inst_owner_in IN EPIS_DIAG_TUMORS.ID_MORPH_INST_OWNER%TYPE DEFAULT NULL,
      id_behavior_in IN EPIS_DIAG_TUMORS.ID_BEHAVIOR%TYPE DEFAULT NULL,
      id_behav_inst_owner_in IN EPIS_DIAG_TUMORS.ID_BEHAV_INST_OWNER%TYPE DEFAULT NULL,
      id_histological_grade_in IN EPIS_DIAG_TUMORS.ID_HISTOLOGICAL_GRADE%TYPE DEFAULT NULL,
      id_hgrade_inst_owner_in IN EPIS_DIAG_TUMORS.ID_HGRADE_INST_OWNER%TYPE DEFAULT NULL,
      id_other_grading_sys_in IN EPIS_DIAG_TUMORS.ID_OTHER_GRADING_SYS%TYPE DEFAULT NULL,
      id_ogradsys_inst_owner_in IN EPIS_DIAG_TUMORS.ID_OGRADSYS_INST_OWNER%TYPE DEFAULT NULL,
      flg_unknown_dimension_in IN EPIS_DIAG_TUMORS.FLG_UNKNOWN_DIMENSION%TYPE DEFAULT NULL,
      num_dimension_in IN EPIS_DIAG_TUMORS.NUM_DIMENSION%TYPE DEFAULT NULL,
      desc_dimension_in IN EPIS_DIAG_TUMORS.DESC_DIMENSION%TYPE DEFAULT NULL,
      additional_pathol_info_in IN EPIS_DIAG_TUMORS.ADDITIONAL_PATHOL_INFO%TYPE DEFAULT NULL,
      dt_epis_diagnosis_tumors_in IN EPIS_DIAG_TUMORS.DT_EPIS_DIAGNOSIS_TUMORS%TYPE DEFAULT NULL,
      create_user_in IN EPIS_DIAG_TUMORS.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN EPIS_DIAG_TUMORS.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN EPIS_DIAG_TUMORS.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN EPIS_DIAG_TUMORS.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN EPIS_DIAG_TUMORS.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN EPIS_DIAG_TUMORS.UPDATE_INSTITUTION%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_epis_diagnosis_in => id_epis_diagnosis_in,
      tumor_num_in => tumor_num_in
      ,
      id_topography_in => id_topography_in,
      id_topog_inst_owner_in => id_topog_inst_owner_in,
      id_laterality_in => id_laterality_in,
      id_lat_inst_owner_in => id_lat_inst_owner_in,
      id_morphology_in => id_morphology_in,
      id_morph_inst_owner_in => id_morph_inst_owner_in,
      id_behavior_in => id_behavior_in,
      id_behav_inst_owner_in => id_behav_inst_owner_in,
      id_histological_grade_in => id_histological_grade_in,
      id_hgrade_inst_owner_in => id_hgrade_inst_owner_in,
      id_other_grading_sys_in => id_other_grading_sys_in,
      id_ogradsys_inst_owner_in => id_ogradsys_inst_owner_in,
      flg_unknown_dimension_in => flg_unknown_dimension_in,
      num_dimension_in => num_dimension_in,
      desc_dimension_in => desc_dimension_in,
      additional_pathol_info_in => additional_pathol_info_in,
      dt_epis_diagnosis_tumors_in => dt_epis_diagnosis_tumors_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN EPIS_DIAG_TUMORS%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec EPIS_DIAG_TUMORS%ROWTYPE := rec_in;
   BEGIN
      ins (
         id_epis_diagnosis_in => l_rec.ID_EPIS_DIAGNOSIS,
         tumor_num_in => l_rec.TUMOR_NUM
         ,
         id_topography_in => l_rec.ID_TOPOGRAPHY,
         id_topog_inst_owner_in => l_rec.ID_TOPOG_INST_OWNER,
         id_laterality_in => l_rec.ID_LATERALITY,
         id_lat_inst_owner_in => l_rec.ID_LAT_INST_OWNER,
         id_morphology_in => l_rec.ID_MORPHOLOGY,
         id_morph_inst_owner_in => l_rec.ID_MORPH_INST_OWNER,
         id_behavior_in => l_rec.ID_BEHAVIOR,
         id_behav_inst_owner_in => l_rec.ID_BEHAV_INST_OWNER,
         id_histological_grade_in => l_rec.ID_HISTOLOGICAL_GRADE,
         id_hgrade_inst_owner_in => l_rec.ID_HGRADE_INST_OWNER,
         id_other_grading_sys_in => l_rec.ID_OTHER_GRADING_SYS,
         id_ogradsys_inst_owner_in => l_rec.ID_OGRADSYS_INST_OWNER,
         flg_unknown_dimension_in => l_rec.FLG_UNKNOWN_DIMENSION,
         num_dimension_in => l_rec.NUM_DIMENSION,
         desc_dimension_in => l_rec.DESC_DIMENSION,
         additional_pathol_info_in => l_rec.ADDITIONAL_PATHOL_INFO,
         dt_epis_diagnosis_tumors_in => l_rec.DT_EPIS_DIAGNOSIS_TUMORS,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN EPIS_DIAG_TUMORS%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

    PROCEDURE ins (
      rows_in IN EPIS_DIAG_TUMORS_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
         FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO EPIS_DIAG_TUMORS VALUES rows_in (indx) RETURNING ROWID BULK COLLECT INTO rows_out;
      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_CODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPIS_DIAGNOSIS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_EPIS_DIAGNOSIS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'TUMOR_NUM _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).TUMOR_NUM
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_TOPOGRAPHY _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_TOPOGRAPHY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_TOPOG_INST_OWNER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_TOPOG_INST_OWNER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_LATERALITY _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_LATERALITY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_LAT_INST_OWNER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_LAT_INST_OWNER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_MORPHOLOGY _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_MORPHOLOGY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_MORPH_INST_OWNER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_MORPH_INST_OWNER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_BEHAVIOR _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_BEHAVIOR
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_BEHAV_INST_OWNER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_BEHAV_INST_OWNER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_HISTOLOGICAL_GRADE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_HISTOLOGICAL_GRADE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_HGRADE_INST_OWNER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_HGRADE_INST_OWNER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_OTHER_GRADING_SYS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_OTHER_GRADING_SYS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_OGRADSYS_INST_OWNER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_OGRADSYS_INST_OWNER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_UNKNOWN_DIMENSION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_UNKNOWN_DIMENSION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NUM_DIMENSION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NUM_DIMENSION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DESC_DIMENSION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DESC_DIMENSION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ADDITIONAL_PATHOL_INFO _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ADDITIONAL_PATHOL_INFO
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_EPIS_DIAGNOSIS_TUMORS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_EPIS_DIAGNOSIS_TUMORS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'EPIS_DIAG_TUMORS'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN EPIS_DIAG_TUMORS_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_epis_diagnosis_in IN EPIS_DIAG_TUMORS.ID_EPIS_DIAGNOSIS%TYPE,
      tumor_num_in IN EPIS_DIAG_TUMORS.TUMOR_NUM%TYPE,
      id_topography_in IN EPIS_DIAG_TUMORS.ID_TOPOGRAPHY%TYPE DEFAULT NULL,
      ID_TOPOGRAPHY_nin IN BOOLEAN := TRUE,
      id_topog_inst_owner_in IN EPIS_DIAG_TUMORS.ID_TOPOG_INST_OWNER%TYPE DEFAULT NULL,
      ID_TOPOG_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_laterality_in IN EPIS_DIAG_TUMORS.ID_LATERALITY%TYPE DEFAULT NULL,
      ID_LATERALITY_nin IN BOOLEAN := TRUE,
      id_lat_inst_owner_in IN EPIS_DIAG_TUMORS.ID_LAT_INST_OWNER%TYPE DEFAULT NULL,
      ID_LAT_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_morphology_in IN EPIS_DIAG_TUMORS.ID_MORPHOLOGY%TYPE DEFAULT NULL,
      ID_MORPHOLOGY_nin IN BOOLEAN := TRUE,
      id_morph_inst_owner_in IN EPIS_DIAG_TUMORS.ID_MORPH_INST_OWNER%TYPE DEFAULT NULL,
      ID_MORPH_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_behavior_in IN EPIS_DIAG_TUMORS.ID_BEHAVIOR%TYPE DEFAULT NULL,
      ID_BEHAVIOR_nin IN BOOLEAN := TRUE,
      id_behav_inst_owner_in IN EPIS_DIAG_TUMORS.ID_BEHAV_INST_OWNER%TYPE DEFAULT NULL,
      ID_BEHAV_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_histological_grade_in IN EPIS_DIAG_TUMORS.ID_HISTOLOGICAL_GRADE%TYPE DEFAULT NULL,
      ID_HISTOLOGICAL_GRADE_nin IN BOOLEAN := TRUE,
      id_hgrade_inst_owner_in IN EPIS_DIAG_TUMORS.ID_HGRADE_INST_OWNER%TYPE DEFAULT NULL,
      ID_HGRADE_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_other_grading_sys_in IN EPIS_DIAG_TUMORS.ID_OTHER_GRADING_SYS%TYPE DEFAULT NULL,
      ID_OTHER_GRADING_SYS_nin IN BOOLEAN := TRUE,
      id_ogradsys_inst_owner_in IN EPIS_DIAG_TUMORS.ID_OGRADSYS_INST_OWNER%TYPE DEFAULT NULL,
      ID_OGRADSYS_INST_OWNER_nin IN BOOLEAN := TRUE,
      flg_unknown_dimension_in IN EPIS_DIAG_TUMORS.FLG_UNKNOWN_DIMENSION%TYPE DEFAULT NULL,
      FLG_UNKNOWN_DIMENSION_nin IN BOOLEAN := TRUE,
      num_dimension_in IN EPIS_DIAG_TUMORS.NUM_DIMENSION%TYPE DEFAULT NULL,
      NUM_DIMENSION_nin IN BOOLEAN := TRUE,
      desc_dimension_in IN EPIS_DIAG_TUMORS.DESC_DIMENSION%TYPE DEFAULT NULL,
      DESC_DIMENSION_nin IN BOOLEAN := TRUE,
      additional_pathol_info_in IN EPIS_DIAG_TUMORS.ADDITIONAL_PATHOL_INFO%TYPE DEFAULT NULL,
      ADDITIONAL_PATHOL_INFO_nin IN BOOLEAN := TRUE,
      dt_epis_diagnosis_tumors_in IN EPIS_DIAG_TUMORS.DT_EPIS_DIAGNOSIS_TUMORS%TYPE DEFAULT NULL,
      DT_EPIS_DIAGNOSIS_TUMORS_nin IN BOOLEAN := TRUE,
      create_user_in IN EPIS_DIAG_TUMORS.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN EPIS_DIAG_TUMORS.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN EPIS_DIAG_TUMORS.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN EPIS_DIAG_TUMORS.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN EPIS_DIAG_TUMORS.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN EPIS_DIAG_TUMORS.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_TOPOGRAPHY_n NUMBER(1);
   l_ID_TOPOG_INST_OWNER_n NUMBER(1);
   l_ID_LATERALITY_n NUMBER(1);
   l_ID_LAT_INST_OWNER_n NUMBER(1);
   l_ID_MORPHOLOGY_n NUMBER(1);
   l_ID_MORPH_INST_OWNER_n NUMBER(1);
   l_ID_BEHAVIOR_n NUMBER(1);
   l_ID_BEHAV_INST_OWNER_n NUMBER(1);
   l_ID_HISTOLOGICAL_GRADE_n NUMBER(1);
   l_ID_HGRADE_INST_OWNER_n NUMBER(1);
   l_ID_OTHER_GRADING_SYS_n NUMBER(1);
   l_ID_OGRADSYS_INST_OWNER_n NUMBER(1);
   l_FLG_UNKNOWN_DIMENSION_n NUMBER(1);
   l_NUM_DIMENSION_n NUMBER(1);
   l_DESC_DIMENSION_n NUMBER(1);
   l_ADDITIONAL_PATHOL_INFO_n NUMBER(1);
   l_DT_EPIS_DIAGNOSIS_TUMORS_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   BEGIN

   l_ID_TOPOGRAPHY_n := sys.diutil.bool_to_int(ID_TOPOGRAPHY_nin);
   l_ID_TOPOG_INST_OWNER_n := sys.diutil.bool_to_int(ID_TOPOG_INST_OWNER_nin);
   l_ID_LATERALITY_n := sys.diutil.bool_to_int(ID_LATERALITY_nin);
   l_ID_LAT_INST_OWNER_n := sys.diutil.bool_to_int(ID_LAT_INST_OWNER_nin);
   l_ID_MORPHOLOGY_n := sys.diutil.bool_to_int(ID_MORPHOLOGY_nin);
   l_ID_MORPH_INST_OWNER_n := sys.diutil.bool_to_int(ID_MORPH_INST_OWNER_nin);
   l_ID_BEHAVIOR_n := sys.diutil.bool_to_int(ID_BEHAVIOR_nin);
   l_ID_BEHAV_INST_OWNER_n := sys.diutil.bool_to_int(ID_BEHAV_INST_OWNER_nin);
   l_ID_HISTOLOGICAL_GRADE_n := sys.diutil.bool_to_int(ID_HISTOLOGICAL_GRADE_nin);
   l_ID_HGRADE_INST_OWNER_n := sys.diutil.bool_to_int(ID_HGRADE_INST_OWNER_nin);
   l_ID_OTHER_GRADING_SYS_n := sys.diutil.bool_to_int(ID_OTHER_GRADING_SYS_nin);
   l_ID_OGRADSYS_INST_OWNER_n := sys.diutil.bool_to_int(ID_OGRADSYS_INST_OWNER_nin);
   l_FLG_UNKNOWN_DIMENSION_n := sys.diutil.bool_to_int(FLG_UNKNOWN_DIMENSION_nin);
   l_NUM_DIMENSION_n := sys.diutil.bool_to_int(NUM_DIMENSION_nin);
   l_DESC_DIMENSION_n := sys.diutil.bool_to_int(DESC_DIMENSION_nin);
   l_ADDITIONAL_PATHOL_INFO_n := sys.diutil.bool_to_int(ADDITIONAL_PATHOL_INFO_nin);
   l_DT_EPIS_DIAGNOSIS_TUMORS_n := sys.diutil.bool_to_int(DT_EPIS_DIAGNOSIS_TUMORS_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);


         UPDATE EPIS_DIAG_TUMORS SET
     ID_TOPOGRAPHY = decode (l_ID_TOPOGRAPHY_n,0,id_topography_in, NVL (id_topography_in, ID_TOPOGRAPHY)),
     ID_TOPOG_INST_OWNER = decode (l_ID_TOPOG_INST_OWNER_n,0,id_topog_inst_owner_in, NVL (id_topog_inst_owner_in, ID_TOPOG_INST_OWNER)),
     ID_LATERALITY = decode (l_ID_LATERALITY_n,0,id_laterality_in, NVL (id_laterality_in, ID_LATERALITY)),
     ID_LAT_INST_OWNER = decode (l_ID_LAT_INST_OWNER_n,0,id_lat_inst_owner_in, NVL (id_lat_inst_owner_in, ID_LAT_INST_OWNER)),
     ID_MORPHOLOGY = decode (l_ID_MORPHOLOGY_n,0,id_morphology_in, NVL (id_morphology_in, ID_MORPHOLOGY)),
     ID_MORPH_INST_OWNER = decode (l_ID_MORPH_INST_OWNER_n,0,id_morph_inst_owner_in, NVL (id_morph_inst_owner_in, ID_MORPH_INST_OWNER)),
     ID_BEHAVIOR = decode (l_ID_BEHAVIOR_n,0,id_behavior_in, NVL (id_behavior_in, ID_BEHAVIOR)),
     ID_BEHAV_INST_OWNER = decode (l_ID_BEHAV_INST_OWNER_n,0,id_behav_inst_owner_in, NVL (id_behav_inst_owner_in, ID_BEHAV_INST_OWNER)),
     ID_HISTOLOGICAL_GRADE = decode (l_ID_HISTOLOGICAL_GRADE_n,0,id_histological_grade_in, NVL (id_histological_grade_in, ID_HISTOLOGICAL_GRADE)),
     ID_HGRADE_INST_OWNER = decode (l_ID_HGRADE_INST_OWNER_n,0,id_hgrade_inst_owner_in, NVL (id_hgrade_inst_owner_in, ID_HGRADE_INST_OWNER)),
     ID_OTHER_GRADING_SYS = decode (l_ID_OTHER_GRADING_SYS_n,0,id_other_grading_sys_in, NVL (id_other_grading_sys_in, ID_OTHER_GRADING_SYS)),
     ID_OGRADSYS_INST_OWNER = decode (l_ID_OGRADSYS_INST_OWNER_n,0,id_ogradsys_inst_owner_in, NVL (id_ogradsys_inst_owner_in, ID_OGRADSYS_INST_OWNER)),
     FLG_UNKNOWN_DIMENSION = decode (l_FLG_UNKNOWN_DIMENSION_n,0,flg_unknown_dimension_in, NVL (flg_unknown_dimension_in, FLG_UNKNOWN_DIMENSION)),
     NUM_DIMENSION = decode (l_NUM_DIMENSION_n,0,num_dimension_in, NVL (num_dimension_in, NUM_DIMENSION)),
     DESC_DIMENSION = decode (l_DESC_DIMENSION_n,0,desc_dimension_in, NVL (desc_dimension_in, DESC_DIMENSION)),
     ADDITIONAL_PATHOL_INFO = decode (l_ADDITIONAL_PATHOL_INFO_n,0,additional_pathol_info_in, NVL (additional_pathol_info_in, ADDITIONAL_PATHOL_INFO)),
     DT_EPIS_DIAGNOSIS_TUMORS = decode (l_DT_EPIS_DIAGNOSIS_TUMORS_n,0,dt_epis_diagnosis_tumors_in, NVL (dt_epis_diagnosis_tumors_in, DT_EPIS_DIAGNOSIS_TUMORS)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION))
          WHERE
             ID_EPIS_DIAGNOSIS = id_epis_diagnosis_in AND
             TUMOR_NUM = tumor_num_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'EPIS_DIAG_TUMORS');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           IF l_name = 'EDTMRS_CNCPTTR1_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_TOPOGRAPHY'
               , value_in => id_topography_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_TOPOG_INST_OWNER'
               , value_in => id_topog_inst_owner_in);
           END IF;
           IF l_name = 'EDTMRS_CNCPTTR2_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_LATERALITY'
               , value_in => id_laterality_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_LAT_INST_OWNER'
               , value_in => id_lat_inst_owner_in);
           END IF;
           IF l_name = 'EDTMRS_CNCPTTR3_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_MORPHOLOGY'
               , value_in => id_morphology_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_MORPH_INST_OWNER'
               , value_in => id_morph_inst_owner_in);
           END IF;
           IF l_name = 'EDTMRS_CNCPTTR4_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_BEHAVIOR'
               , value_in => id_behavior_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_BEHAV_INST_OWNER'
               , value_in => id_behav_inst_owner_in);
           END IF;
           IF l_name = 'EDTMRS_CNCPTTR5_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_HISTOLOGICAL_GRADE'
               , value_in => id_histological_grade_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_HGRADE_INST_OWNER'
               , value_in => id_hgrade_inst_owner_in);
           END IF;
           IF l_name = 'EDTMRS_CNCPTTR6_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_OTHER_GRADING_SYS'
               , value_in => id_other_grading_sys_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_OGRADSYS_INST_OWNER'
               , value_in => id_ogradsys_inst_owner_in);
           END IF;
           IF l_name = 'EDTMRS_ED_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_DIAGNOSIS'
               , value_in => id_epis_diagnosis_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_epis_diagnosis_in IN EPIS_DIAG_TUMORS.ID_EPIS_DIAGNOSIS%TYPE,
      tumor_num_in IN EPIS_DIAG_TUMORS.TUMOR_NUM%TYPE,
      id_topography_in IN EPIS_DIAG_TUMORS.ID_TOPOGRAPHY%TYPE DEFAULT NULL,
      ID_TOPOGRAPHY_nin IN BOOLEAN := TRUE,
      id_topog_inst_owner_in IN EPIS_DIAG_TUMORS.ID_TOPOG_INST_OWNER%TYPE DEFAULT NULL,
      ID_TOPOG_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_laterality_in IN EPIS_DIAG_TUMORS.ID_LATERALITY%TYPE DEFAULT NULL,
      ID_LATERALITY_nin IN BOOLEAN := TRUE,
      id_lat_inst_owner_in IN EPIS_DIAG_TUMORS.ID_LAT_INST_OWNER%TYPE DEFAULT NULL,
      ID_LAT_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_morphology_in IN EPIS_DIAG_TUMORS.ID_MORPHOLOGY%TYPE DEFAULT NULL,
      ID_MORPHOLOGY_nin IN BOOLEAN := TRUE,
      id_morph_inst_owner_in IN EPIS_DIAG_TUMORS.ID_MORPH_INST_OWNER%TYPE DEFAULT NULL,
      ID_MORPH_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_behavior_in IN EPIS_DIAG_TUMORS.ID_BEHAVIOR%TYPE DEFAULT NULL,
      ID_BEHAVIOR_nin IN BOOLEAN := TRUE,
      id_behav_inst_owner_in IN EPIS_DIAG_TUMORS.ID_BEHAV_INST_OWNER%TYPE DEFAULT NULL,
      ID_BEHAV_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_histological_grade_in IN EPIS_DIAG_TUMORS.ID_HISTOLOGICAL_GRADE%TYPE DEFAULT NULL,
      ID_HISTOLOGICAL_GRADE_nin IN BOOLEAN := TRUE,
      id_hgrade_inst_owner_in IN EPIS_DIAG_TUMORS.ID_HGRADE_INST_OWNER%TYPE DEFAULT NULL,
      ID_HGRADE_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_other_grading_sys_in IN EPIS_DIAG_TUMORS.ID_OTHER_GRADING_SYS%TYPE DEFAULT NULL,
      ID_OTHER_GRADING_SYS_nin IN BOOLEAN := TRUE,
      id_ogradsys_inst_owner_in IN EPIS_DIAG_TUMORS.ID_OGRADSYS_INST_OWNER%TYPE DEFAULT NULL,
      ID_OGRADSYS_INST_OWNER_nin IN BOOLEAN := TRUE,
      flg_unknown_dimension_in IN EPIS_DIAG_TUMORS.FLG_UNKNOWN_DIMENSION%TYPE DEFAULT NULL,
      FLG_UNKNOWN_DIMENSION_nin IN BOOLEAN := TRUE,
      num_dimension_in IN EPIS_DIAG_TUMORS.NUM_DIMENSION%TYPE DEFAULT NULL,
      NUM_DIMENSION_nin IN BOOLEAN := TRUE,
      desc_dimension_in IN EPIS_DIAG_TUMORS.DESC_DIMENSION%TYPE DEFAULT NULL,
      DESC_DIMENSION_nin IN BOOLEAN := TRUE,
      additional_pathol_info_in IN EPIS_DIAG_TUMORS.ADDITIONAL_PATHOL_INFO%TYPE DEFAULT NULL,
      ADDITIONAL_PATHOL_INFO_nin IN BOOLEAN := TRUE,
      dt_epis_diagnosis_tumors_in IN EPIS_DIAG_TUMORS.DT_EPIS_DIAGNOSIS_TUMORS%TYPE DEFAULT NULL,
      DT_EPIS_DIAGNOSIS_TUMORS_nin IN BOOLEAN := TRUE,
      create_user_in IN EPIS_DIAG_TUMORS.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN EPIS_DIAG_TUMORS.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN EPIS_DIAG_TUMORS.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN EPIS_DIAG_TUMORS.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN EPIS_DIAG_TUMORS.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN EPIS_DIAG_TUMORS.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_epis_diagnosis_in => id_epis_diagnosis_in,
      tumor_num_in => tumor_num_in,
      id_topography_in => id_topography_in,
      ID_TOPOGRAPHY_nin => ID_TOPOGRAPHY_nin,
      id_topog_inst_owner_in => id_topog_inst_owner_in,
      ID_TOPOG_INST_OWNER_nin => ID_TOPOG_INST_OWNER_nin,
      id_laterality_in => id_laterality_in,
      ID_LATERALITY_nin => ID_LATERALITY_nin,
      id_lat_inst_owner_in => id_lat_inst_owner_in,
      ID_LAT_INST_OWNER_nin => ID_LAT_INST_OWNER_nin,
      id_morphology_in => id_morphology_in,
      ID_MORPHOLOGY_nin => ID_MORPHOLOGY_nin,
      id_morph_inst_owner_in => id_morph_inst_owner_in,
      ID_MORPH_INST_OWNER_nin => ID_MORPH_INST_OWNER_nin,
      id_behavior_in => id_behavior_in,
      ID_BEHAVIOR_nin => ID_BEHAVIOR_nin,
      id_behav_inst_owner_in => id_behav_inst_owner_in,
      ID_BEHAV_INST_OWNER_nin => ID_BEHAV_INST_OWNER_nin,
      id_histological_grade_in => id_histological_grade_in,
      ID_HISTOLOGICAL_GRADE_nin => ID_HISTOLOGICAL_GRADE_nin,
      id_hgrade_inst_owner_in => id_hgrade_inst_owner_in,
      ID_HGRADE_INST_OWNER_nin => ID_HGRADE_INST_OWNER_nin,
      id_other_grading_sys_in => id_other_grading_sys_in,
      ID_OTHER_GRADING_SYS_nin => ID_OTHER_GRADING_SYS_nin,
      id_ogradsys_inst_owner_in => id_ogradsys_inst_owner_in,
      ID_OGRADSYS_INST_OWNER_nin => ID_OGRADSYS_INST_OWNER_nin,
      flg_unknown_dimension_in => flg_unknown_dimension_in,
      FLG_UNKNOWN_DIMENSION_nin => FLG_UNKNOWN_DIMENSION_nin,
      num_dimension_in => num_dimension_in,
      NUM_DIMENSION_nin => NUM_DIMENSION_nin,
      desc_dimension_in => desc_dimension_in,
      DESC_DIMENSION_nin => DESC_DIMENSION_nin,
      additional_pathol_info_in => additional_pathol_info_in,
      ADDITIONAL_PATHOL_INFO_nin => ADDITIONAL_PATHOL_INFO_nin,
      dt_epis_diagnosis_tumors_in => dt_epis_diagnosis_tumors_in,
      DT_EPIS_DIAGNOSIS_TUMORS_nin => DT_EPIS_DIAGNOSIS_TUMORS_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_topography_in IN EPIS_DIAG_TUMORS.ID_TOPOGRAPHY%TYPE DEFAULT NULL,
      ID_TOPOGRAPHY_nin IN BOOLEAN := TRUE,
      id_topog_inst_owner_in IN EPIS_DIAG_TUMORS.ID_TOPOG_INST_OWNER%TYPE DEFAULT NULL,
      ID_TOPOG_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_laterality_in IN EPIS_DIAG_TUMORS.ID_LATERALITY%TYPE DEFAULT NULL,
      ID_LATERALITY_nin IN BOOLEAN := TRUE,
      id_lat_inst_owner_in IN EPIS_DIAG_TUMORS.ID_LAT_INST_OWNER%TYPE DEFAULT NULL,
      ID_LAT_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_morphology_in IN EPIS_DIAG_TUMORS.ID_MORPHOLOGY%TYPE DEFAULT NULL,
      ID_MORPHOLOGY_nin IN BOOLEAN := TRUE,
      id_morph_inst_owner_in IN EPIS_DIAG_TUMORS.ID_MORPH_INST_OWNER%TYPE DEFAULT NULL,
      ID_MORPH_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_behavior_in IN EPIS_DIAG_TUMORS.ID_BEHAVIOR%TYPE DEFAULT NULL,
      ID_BEHAVIOR_nin IN BOOLEAN := TRUE,
      id_behav_inst_owner_in IN EPIS_DIAG_TUMORS.ID_BEHAV_INST_OWNER%TYPE DEFAULT NULL,
      ID_BEHAV_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_histological_grade_in IN EPIS_DIAG_TUMORS.ID_HISTOLOGICAL_GRADE%TYPE DEFAULT NULL,
      ID_HISTOLOGICAL_GRADE_nin IN BOOLEAN := TRUE,
      id_hgrade_inst_owner_in IN EPIS_DIAG_TUMORS.ID_HGRADE_INST_OWNER%TYPE DEFAULT NULL,
      ID_HGRADE_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_other_grading_sys_in IN EPIS_DIAG_TUMORS.ID_OTHER_GRADING_SYS%TYPE DEFAULT NULL,
      ID_OTHER_GRADING_SYS_nin IN BOOLEAN := TRUE,
      id_ogradsys_inst_owner_in IN EPIS_DIAG_TUMORS.ID_OGRADSYS_INST_OWNER%TYPE DEFAULT NULL,
      ID_OGRADSYS_INST_OWNER_nin IN BOOLEAN := TRUE,
      flg_unknown_dimension_in IN EPIS_DIAG_TUMORS.FLG_UNKNOWN_DIMENSION%TYPE DEFAULT NULL,
      FLG_UNKNOWN_DIMENSION_nin IN BOOLEAN := TRUE,
      num_dimension_in IN EPIS_DIAG_TUMORS.NUM_DIMENSION%TYPE DEFAULT NULL,
      NUM_DIMENSION_nin IN BOOLEAN := TRUE,
      desc_dimension_in IN EPIS_DIAG_TUMORS.DESC_DIMENSION%TYPE DEFAULT NULL,
      DESC_DIMENSION_nin IN BOOLEAN := TRUE,
      additional_pathol_info_in IN EPIS_DIAG_TUMORS.ADDITIONAL_PATHOL_INFO%TYPE DEFAULT NULL,
      ADDITIONAL_PATHOL_INFO_nin IN BOOLEAN := TRUE,
      dt_epis_diagnosis_tumors_in IN EPIS_DIAG_TUMORS.DT_EPIS_DIAGNOSIS_TUMORS%TYPE DEFAULT NULL,
      DT_EPIS_DIAGNOSIS_TUMORS_nin IN BOOLEAN := TRUE,
      create_user_in IN EPIS_DIAG_TUMORS.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN EPIS_DIAG_TUMORS.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN EPIS_DIAG_TUMORS.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN EPIS_DIAG_TUMORS.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN EPIS_DIAG_TUMORS.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN EPIS_DIAG_TUMORS.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_ID_TOPOGRAPHY_n NUMBER(1);
   l_ID_TOPOG_INST_OWNER_n NUMBER(1);
   l_ID_LATERALITY_n NUMBER(1);
   l_ID_LAT_INST_OWNER_n NUMBER(1);
   l_ID_MORPHOLOGY_n NUMBER(1);
   l_ID_MORPH_INST_OWNER_n NUMBER(1);
   l_ID_BEHAVIOR_n NUMBER(1);
   l_ID_BEHAV_INST_OWNER_n NUMBER(1);
   l_ID_HISTOLOGICAL_GRADE_n NUMBER(1);
   l_ID_HGRADE_INST_OWNER_n NUMBER(1);
   l_ID_OTHER_GRADING_SYS_n NUMBER(1);
   l_ID_OGRADSYS_INST_OWNER_n NUMBER(1);
   l_FLG_UNKNOWN_DIMENSION_n NUMBER(1);
   l_NUM_DIMENSION_n NUMBER(1);
   l_DESC_DIMENSION_n NUMBER(1);
   l_ADDITIONAL_PATHOL_INFO_n NUMBER(1);
   l_DT_EPIS_DIAGNOSIS_TUMORS_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
      id_epis_diagnosis_in EPIS_DIAG_TUMORS.ID_EPIS_DIAGNOSIS%TYPE;
      tumor_num_in EPIS_DIAG_TUMORS.TUMOR_NUM%TYPE;
   BEGIN



      l_ID_TOPOGRAPHY_n := sys.diutil.bool_to_int(ID_TOPOGRAPHY_nin);
      l_ID_TOPOG_INST_OWNER_n := sys.diutil.bool_to_int(ID_TOPOG_INST_OWNER_nin);
      l_ID_LATERALITY_n := sys.diutil.bool_to_int(ID_LATERALITY_nin);
      l_ID_LAT_INST_OWNER_n := sys.diutil.bool_to_int(ID_LAT_INST_OWNER_nin);
      l_ID_MORPHOLOGY_n := sys.diutil.bool_to_int(ID_MORPHOLOGY_nin);
      l_ID_MORPH_INST_OWNER_n := sys.diutil.bool_to_int(ID_MORPH_INST_OWNER_nin);
      l_ID_BEHAVIOR_n := sys.diutil.bool_to_int(ID_BEHAVIOR_nin);
      l_ID_BEHAV_INST_OWNER_n := sys.diutil.bool_to_int(ID_BEHAV_INST_OWNER_nin);
      l_ID_HISTOLOGICAL_GRADE_n := sys.diutil.bool_to_int(ID_HISTOLOGICAL_GRADE_nin);
      l_ID_HGRADE_INST_OWNER_n := sys.diutil.bool_to_int(ID_HGRADE_INST_OWNER_nin);
      l_ID_OTHER_GRADING_SYS_n := sys.diutil.bool_to_int(ID_OTHER_GRADING_SYS_nin);
      l_ID_OGRADSYS_INST_OWNER_n := sys.diutil.bool_to_int(ID_OGRADSYS_INST_OWNER_nin);
      l_FLG_UNKNOWN_DIMENSION_n := sys.diutil.bool_to_int(FLG_UNKNOWN_DIMENSION_nin);
      l_NUM_DIMENSION_n := sys.diutil.bool_to_int(NUM_DIMENSION_nin);
      l_DESC_DIMENSION_n := sys.diutil.bool_to_int(DESC_DIMENSION_nin);
      l_ADDITIONAL_PATHOL_INFO_n := sys.diutil.bool_to_int(ADDITIONAL_PATHOL_INFO_nin);
      l_DT_EPIS_DIAGNOSIS_TUMORS_n := sys.diutil.bool_to_int(DT_EPIS_DIAGNOSIS_TUMORS_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);



l_sql := 'UPDATE EPIS_DIAG_TUMORS SET '
     || ' ID_TOPOGRAPHY = decode (' || l_ID_TOPOGRAPHY_n || ',0,:id_topography_in, NVL (:id_topography_in, ID_TOPOGRAPHY)) '|| ','
     || ' ID_TOPOG_INST_OWNER = decode (' || l_ID_TOPOG_INST_OWNER_n || ',0,:id_topog_inst_owner_in, NVL (:id_topog_inst_owner_in, ID_TOPOG_INST_OWNER)) '|| ','
     || ' ID_LATERALITY = decode (' || l_ID_LATERALITY_n || ',0,:id_laterality_in, NVL (:id_laterality_in, ID_LATERALITY)) '|| ','
     || ' ID_LAT_INST_OWNER = decode (' || l_ID_LAT_INST_OWNER_n || ',0,:id_lat_inst_owner_in, NVL (:id_lat_inst_owner_in, ID_LAT_INST_OWNER)) '|| ','
     || ' ID_MORPHOLOGY = decode (' || l_ID_MORPHOLOGY_n || ',0,:id_morphology_in, NVL (:id_morphology_in, ID_MORPHOLOGY)) '|| ','
     || ' ID_MORPH_INST_OWNER = decode (' || l_ID_MORPH_INST_OWNER_n || ',0,:id_morph_inst_owner_in, NVL (:id_morph_inst_owner_in, ID_MORPH_INST_OWNER)) '|| ','
     || ' ID_BEHAVIOR = decode (' || l_ID_BEHAVIOR_n || ',0,:id_behavior_in, NVL (:id_behavior_in, ID_BEHAVIOR)) '|| ','
     || ' ID_BEHAV_INST_OWNER = decode (' || l_ID_BEHAV_INST_OWNER_n || ',0,:id_behav_inst_owner_in, NVL (:id_behav_inst_owner_in, ID_BEHAV_INST_OWNER)) '|| ','
     || ' ID_HISTOLOGICAL_GRADE = decode (' || l_ID_HISTOLOGICAL_GRADE_n || ',0,:id_histological_grade_in, NVL (:id_histological_grade_in, ID_HISTOLOGICAL_GRADE)) '|| ','
     || ' ID_HGRADE_INST_OWNER = decode (' || l_ID_HGRADE_INST_OWNER_n || ',0,:id_hgrade_inst_owner_in, NVL (:id_hgrade_inst_owner_in, ID_HGRADE_INST_OWNER)) '|| ','
     || ' ID_OTHER_GRADING_SYS = decode (' || l_ID_OTHER_GRADING_SYS_n || ',0,:id_other_grading_sys_in, NVL (:id_other_grading_sys_in, ID_OTHER_GRADING_SYS)) '|| ','
     || ' ID_OGRADSYS_INST_OWNER = decode (' || l_ID_OGRADSYS_INST_OWNER_n || ',0,:id_ogradsys_inst_owner_in, NVL (:id_ogradsys_inst_owner_in, ID_OGRADSYS_INST_OWNER)) '|| ','
     || ' FLG_UNKNOWN_DIMENSION = decode (' || l_FLG_UNKNOWN_DIMENSION_n || ',0,:flg_unknown_dimension_in, NVL (:flg_unknown_dimension_in, FLG_UNKNOWN_DIMENSION)) '|| ','
     || ' NUM_DIMENSION = decode (' || l_NUM_DIMENSION_n || ',0,:num_dimension_in, NVL (:num_dimension_in, NUM_DIMENSION)) '|| ','
     || ' DESC_DIMENSION = decode (' || l_DESC_DIMENSION_n || ',0,:desc_dimension_in, NVL (:desc_dimension_in, DESC_DIMENSION)) '|| ','
     || ' ADDITIONAL_PATHOL_INFO = decode (' || l_ADDITIONAL_PATHOL_INFO_n || ',0,:additional_pathol_info_in, NVL (:additional_pathol_info_in, ADDITIONAL_PATHOL_INFO)) '|| ','
     || ' DT_EPIS_DIAGNOSIS_TUMORS = decode (' || l_DT_EPIS_DIAGNOSIS_TUMORS_n || ',0,:dt_epis_diagnosis_tumors_in, NVL (:dt_epis_diagnosis_tumors_in, DT_EPIS_DIAGNOSIS_TUMORS)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_topography_in,
     id_topog_inst_owner_in,
     id_laterality_in,
     id_lat_inst_owner_in,
     id_morphology_in,
     id_morph_inst_owner_in,
     id_behavior_in,
     id_behav_inst_owner_in,
     id_histological_grade_in,
     id_hgrade_inst_owner_in,
     id_other_grading_sys_in,
     id_ogradsys_inst_owner_in,
     flg_unknown_dimension_in,
     num_dimension_in,
     desc_dimension_in,
     additional_pathol_info_in,
     dt_epis_diagnosis_tumors_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'EPIS_DIAG_TUMORS');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           IF l_name = 'EDTMRS_CNCPTTR1_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_TOPOGRAPHY'
               , value_in => id_topography_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_TOPOG_INST_OWNER'
               , value_in => id_topog_inst_owner_in);
           END IF;
           IF l_name = 'EDTMRS_CNCPTTR2_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_LATERALITY'
               , value_in => id_laterality_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_LAT_INST_OWNER'
               , value_in => id_lat_inst_owner_in);
           END IF;
           IF l_name = 'EDTMRS_CNCPTTR3_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_MORPHOLOGY'
               , value_in => id_morphology_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_MORPH_INST_OWNER'
               , value_in => id_morph_inst_owner_in);
           END IF;
           IF l_name = 'EDTMRS_CNCPTTR4_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_BEHAVIOR'
               , value_in => id_behavior_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_BEHAV_INST_OWNER'
               , value_in => id_behav_inst_owner_in);
           END IF;
           IF l_name = 'EDTMRS_CNCPTTR5_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_HISTOLOGICAL_GRADE'
               , value_in => id_histological_grade_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_HGRADE_INST_OWNER'
               , value_in => id_hgrade_inst_owner_in);
           END IF;
           IF l_name = 'EDTMRS_CNCPTTR6_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_OTHER_GRADING_SYS'
               , value_in => id_other_grading_sys_in);
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_OGRADSYS_INST_OWNER'
               , value_in => id_ogradsys_inst_owner_in);
           END IF;
           IF l_name = 'EDTMRS_ED_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_DIAGNOSIS'
               , value_in => id_epis_diagnosis_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_topography_in IN EPIS_DIAG_TUMORS.ID_TOPOGRAPHY%TYPE DEFAULT NULL,
      ID_TOPOGRAPHY_nin IN BOOLEAN := TRUE,
      id_topog_inst_owner_in IN EPIS_DIAG_TUMORS.ID_TOPOG_INST_OWNER%TYPE DEFAULT NULL,
      ID_TOPOG_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_laterality_in IN EPIS_DIAG_TUMORS.ID_LATERALITY%TYPE DEFAULT NULL,
      ID_LATERALITY_nin IN BOOLEAN := TRUE,
      id_lat_inst_owner_in IN EPIS_DIAG_TUMORS.ID_LAT_INST_OWNER%TYPE DEFAULT NULL,
      ID_LAT_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_morphology_in IN EPIS_DIAG_TUMORS.ID_MORPHOLOGY%TYPE DEFAULT NULL,
      ID_MORPHOLOGY_nin IN BOOLEAN := TRUE,
      id_morph_inst_owner_in IN EPIS_DIAG_TUMORS.ID_MORPH_INST_OWNER%TYPE DEFAULT NULL,
      ID_MORPH_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_behavior_in IN EPIS_DIAG_TUMORS.ID_BEHAVIOR%TYPE DEFAULT NULL,
      ID_BEHAVIOR_nin IN BOOLEAN := TRUE,
      id_behav_inst_owner_in IN EPIS_DIAG_TUMORS.ID_BEHAV_INST_OWNER%TYPE DEFAULT NULL,
      ID_BEHAV_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_histological_grade_in IN EPIS_DIAG_TUMORS.ID_HISTOLOGICAL_GRADE%TYPE DEFAULT NULL,
      ID_HISTOLOGICAL_GRADE_nin IN BOOLEAN := TRUE,
      id_hgrade_inst_owner_in IN EPIS_DIAG_TUMORS.ID_HGRADE_INST_OWNER%TYPE DEFAULT NULL,
      ID_HGRADE_INST_OWNER_nin IN BOOLEAN := TRUE,
      id_other_grading_sys_in IN EPIS_DIAG_TUMORS.ID_OTHER_GRADING_SYS%TYPE DEFAULT NULL,
      ID_OTHER_GRADING_SYS_nin IN BOOLEAN := TRUE,
      id_ogradsys_inst_owner_in IN EPIS_DIAG_TUMORS.ID_OGRADSYS_INST_OWNER%TYPE DEFAULT NULL,
      ID_OGRADSYS_INST_OWNER_nin IN BOOLEAN := TRUE,
      flg_unknown_dimension_in IN EPIS_DIAG_TUMORS.FLG_UNKNOWN_DIMENSION%TYPE DEFAULT NULL,
      FLG_UNKNOWN_DIMENSION_nin IN BOOLEAN := TRUE,
      num_dimension_in IN EPIS_DIAG_TUMORS.NUM_DIMENSION%TYPE DEFAULT NULL,
      NUM_DIMENSION_nin IN BOOLEAN := TRUE,
      desc_dimension_in IN EPIS_DIAG_TUMORS.DESC_DIMENSION%TYPE DEFAULT NULL,
      DESC_DIMENSION_nin IN BOOLEAN := TRUE,
      additional_pathol_info_in IN EPIS_DIAG_TUMORS.ADDITIONAL_PATHOL_INFO%TYPE DEFAULT NULL,
      ADDITIONAL_PATHOL_INFO_nin IN BOOLEAN := TRUE,
      dt_epis_diagnosis_tumors_in IN EPIS_DIAG_TUMORS.DT_EPIS_DIAGNOSIS_TUMORS%TYPE DEFAULT NULL,
      DT_EPIS_DIAGNOSIS_TUMORS_nin IN BOOLEAN := TRUE,
      create_user_in IN EPIS_DIAG_TUMORS.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN EPIS_DIAG_TUMORS.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN EPIS_DIAG_TUMORS.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN EPIS_DIAG_TUMORS.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN EPIS_DIAG_TUMORS.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN EPIS_DIAG_TUMORS.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_topography_in => id_topography_in,
      ID_TOPOGRAPHY_nin => ID_TOPOGRAPHY_nin,
      id_topog_inst_owner_in => id_topog_inst_owner_in,
      ID_TOPOG_INST_OWNER_nin => ID_TOPOG_INST_OWNER_nin,
      id_laterality_in => id_laterality_in,
      ID_LATERALITY_nin => ID_LATERALITY_nin,
      id_lat_inst_owner_in => id_lat_inst_owner_in,
      ID_LAT_INST_OWNER_nin => ID_LAT_INST_OWNER_nin,
      id_morphology_in => id_morphology_in,
      ID_MORPHOLOGY_nin => ID_MORPHOLOGY_nin,
      id_morph_inst_owner_in => id_morph_inst_owner_in,
      ID_MORPH_INST_OWNER_nin => ID_MORPH_INST_OWNER_nin,
      id_behavior_in => id_behavior_in,
      ID_BEHAVIOR_nin => ID_BEHAVIOR_nin,
      id_behav_inst_owner_in => id_behav_inst_owner_in,
      ID_BEHAV_INST_OWNER_nin => ID_BEHAV_INST_OWNER_nin,
      id_histological_grade_in => id_histological_grade_in,
      ID_HISTOLOGICAL_GRADE_nin => ID_HISTOLOGICAL_GRADE_nin,
      id_hgrade_inst_owner_in => id_hgrade_inst_owner_in,
      ID_HGRADE_INST_OWNER_nin => ID_HGRADE_INST_OWNER_nin,
      id_other_grading_sys_in => id_other_grading_sys_in,
      ID_OTHER_GRADING_SYS_nin => ID_OTHER_GRADING_SYS_nin,
      id_ogradsys_inst_owner_in => id_ogradsys_inst_owner_in,
      ID_OGRADSYS_INST_OWNER_nin => ID_OGRADSYS_INST_OWNER_nin,
      flg_unknown_dimension_in => flg_unknown_dimension_in,
      FLG_UNKNOWN_DIMENSION_nin => FLG_UNKNOWN_DIMENSION_nin,
      num_dimension_in => num_dimension_in,
      NUM_DIMENSION_nin => NUM_DIMENSION_nin,
      desc_dimension_in => desc_dimension_in,
      DESC_DIMENSION_nin => DESC_DIMENSION_nin,
      additional_pathol_info_in => additional_pathol_info_in,
      ADDITIONAL_PATHOL_INFO_nin => ADDITIONAL_PATHOL_INFO_nin,
      dt_epis_diagnosis_tumors_in => dt_epis_diagnosis_tumors_in,
      DT_EPIS_DIAGNOSIS_TUMORS_nin => DT_EPIS_DIAGNOSIS_TUMORS_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN EPIS_DIAG_TUMORS%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_epis_diagnosis_in => rec_in.ID_EPIS_DIAGNOSIS,
         tumor_num_in => rec_in.TUMOR_NUM,
         id_topography_in => rec_in.ID_TOPOGRAPHY,
         id_topog_inst_owner_in => rec_in.ID_TOPOG_INST_OWNER,
         id_laterality_in => rec_in.ID_LATERALITY,
         id_lat_inst_owner_in => rec_in.ID_LAT_INST_OWNER,
         id_morphology_in => rec_in.ID_MORPHOLOGY,
         id_morph_inst_owner_in => rec_in.ID_MORPH_INST_OWNER,
         id_behavior_in => rec_in.ID_BEHAVIOR,
         id_behav_inst_owner_in => rec_in.ID_BEHAV_INST_OWNER,
         id_histological_grade_in => rec_in.ID_HISTOLOGICAL_GRADE,
         id_hgrade_inst_owner_in => rec_in.ID_HGRADE_INST_OWNER,
         id_other_grading_sys_in => rec_in.ID_OTHER_GRADING_SYS,
         id_ogradsys_inst_owner_in => rec_in.ID_OGRADSYS_INST_OWNER,
         flg_unknown_dimension_in => rec_in.FLG_UNKNOWN_DIMENSION,
         num_dimension_in => rec_in.NUM_DIMENSION,
         desc_dimension_in => rec_in.DESC_DIMENSION,
         additional_pathol_info_in => rec_in.ADDITIONAL_PATHOL_INFO,
         dt_epis_diagnosis_tumors_in => rec_in.DT_EPIS_DIAGNOSIS_TUMORS,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN EPIS_DIAG_TUMORS%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_epis_diagnosis_in => rec_in.ID_EPIS_DIAGNOSIS,
         tumor_num_in => rec_in.TUMOR_NUM,
         id_topography_in => rec_in.ID_TOPOGRAPHY,
         id_topog_inst_owner_in => rec_in.ID_TOPOG_INST_OWNER,
         id_laterality_in => rec_in.ID_LATERALITY,
         id_lat_inst_owner_in => rec_in.ID_LAT_INST_OWNER,
         id_morphology_in => rec_in.ID_MORPHOLOGY,
         id_morph_inst_owner_in => rec_in.ID_MORPH_INST_OWNER,
         id_behavior_in => rec_in.ID_BEHAVIOR,
         id_behav_inst_owner_in => rec_in.ID_BEHAV_INST_OWNER,
         id_histological_grade_in => rec_in.ID_HISTOLOGICAL_GRADE,
         id_hgrade_inst_owner_in => rec_in.ID_HGRADE_INST_OWNER,
         id_other_grading_sys_in => rec_in.ID_OTHER_GRADING_SYS,
         id_ogradsys_inst_owner_in => rec_in.ID_OGRADSYS_INST_OWNER,
         flg_unknown_dimension_in => rec_in.FLG_UNKNOWN_DIMENSION,
         num_dimension_in => rec_in.NUM_DIMENSION,
         desc_dimension_in => rec_in.DESC_DIMENSION,
         additional_pathol_info_in => rec_in.ADDITIONAL_PATHOL_INFO,
         dt_epis_diagnosis_tumors_in => rec_in.DT_EPIS_DIAGNOSIS_TUMORS,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_epis_diagnosis_in IN EPIS_DIAG_TUMORS.ID_EPIS_DIAGNOSIS%TYPE,
      tumor_num_in IN EPIS_DIAG_TUMORS.TUMOR_NUM%TYPE,
      id_topography_in IN EPIS_DIAG_TUMORS.ID_TOPOGRAPHY%TYPE DEFAULT NULL,
      id_topog_inst_owner_in IN EPIS_DIAG_TUMORS.ID_TOPOG_INST_OWNER%TYPE DEFAULT NULL,
      id_laterality_in IN EPIS_DIAG_TUMORS.ID_LATERALITY%TYPE DEFAULT NULL,
      id_lat_inst_owner_in IN EPIS_DIAG_TUMORS.ID_LAT_INST_OWNER%TYPE DEFAULT NULL,
      id_morphology_in IN EPIS_DIAG_TUMORS.ID_MORPHOLOGY%TYPE DEFAULT NULL,
      id_morph_inst_owner_in IN EPIS_DIAG_TUMORS.ID_MORPH_INST_OWNER%TYPE DEFAULT NULL,
      id_behavior_in IN EPIS_DIAG_TUMORS.ID_BEHAVIOR%TYPE DEFAULT NULL,
      id_behav_inst_owner_in IN EPIS_DIAG_TUMORS.ID_BEHAV_INST_OWNER%TYPE DEFAULT NULL,
      id_histological_grade_in IN EPIS_DIAG_TUMORS.ID_HISTOLOGICAL_GRADE%TYPE DEFAULT NULL,
      id_hgrade_inst_owner_in IN EPIS_DIAG_TUMORS.ID_HGRADE_INST_OWNER%TYPE DEFAULT NULL,
      id_other_grading_sys_in IN EPIS_DIAG_TUMORS.ID_OTHER_GRADING_SYS%TYPE DEFAULT NULL,
      id_ogradsys_inst_owner_in IN EPIS_DIAG_TUMORS.ID_OGRADSYS_INST_OWNER%TYPE DEFAULT NULL,
      flg_unknown_dimension_in IN EPIS_DIAG_TUMORS.FLG_UNKNOWN_DIMENSION%TYPE DEFAULT NULL,
      num_dimension_in IN EPIS_DIAG_TUMORS.NUM_DIMENSION%TYPE DEFAULT NULL,
      desc_dimension_in IN EPIS_DIAG_TUMORS.DESC_DIMENSION%TYPE DEFAULT NULL,
      additional_pathol_info_in IN EPIS_DIAG_TUMORS.ADDITIONAL_PATHOL_INFO%TYPE DEFAULT NULL,
      dt_epis_diagnosis_tumors_in IN EPIS_DIAG_TUMORS.DT_EPIS_DIAGNOSIS_TUMORS%TYPE DEFAULT NULL,
      create_user_in IN EPIS_DIAG_TUMORS.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN EPIS_DIAG_TUMORS.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN EPIS_DIAG_TUMORS.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN EPIS_DIAG_TUMORS.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN EPIS_DIAG_TUMORS.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN EPIS_DIAG_TUMORS.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_epis_diagnosis_in => id_epis_diagnosis_in,
         tumor_num_in => tumor_num_in,
         id_topography_in => id_topography_in,
         id_topog_inst_owner_in => id_topog_inst_owner_in,
         id_laterality_in => id_laterality_in,
         id_lat_inst_owner_in => id_lat_inst_owner_in,
         id_morphology_in => id_morphology_in,
         id_morph_inst_owner_in => id_morph_inst_owner_in,
         id_behavior_in => id_behavior_in,
         id_behav_inst_owner_in => id_behav_inst_owner_in,
         id_histological_grade_in => id_histological_grade_in,
         id_hgrade_inst_owner_in => id_hgrade_inst_owner_in,
         id_other_grading_sys_in => id_other_grading_sys_in,
         id_ogradsys_inst_owner_in => id_ogradsys_inst_owner_in,
         flg_unknown_dimension_in => flg_unknown_dimension_in,
         num_dimension_in => num_dimension_in,
         desc_dimension_in => desc_dimension_in,
         additional_pathol_info_in => additional_pathol_info_in,
         dt_epis_diagnosis_tumors_in => dt_epis_diagnosis_tumors_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_epis_diagnosis_in => id_epis_diagnosis_in,
            tumor_num_in => tumor_num_in,
            id_topography_in => id_topography_in,
            id_topog_inst_owner_in => id_topog_inst_owner_in,
            id_laterality_in => id_laterality_in,
            id_lat_inst_owner_in => id_lat_inst_owner_in,
            id_morphology_in => id_morphology_in,
            id_morph_inst_owner_in => id_morph_inst_owner_in,
            id_behavior_in => id_behavior_in,
            id_behav_inst_owner_in => id_behav_inst_owner_in,
            id_histological_grade_in => id_histological_grade_in,
            id_hgrade_inst_owner_in => id_hgrade_inst_owner_in,
            id_other_grading_sys_in => id_other_grading_sys_in,
            id_ogradsys_inst_owner_in => id_ogradsys_inst_owner_in,
            flg_unknown_dimension_in => flg_unknown_dimension_in,
            num_dimension_in => num_dimension_in,
            desc_dimension_in => desc_dimension_in,
            additional_pathol_info_in => additional_pathol_info_in,
            dt_epis_diagnosis_tumors_in => dt_epis_diagnosis_tumors_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_epis_diagnosis_in IN EPIS_DIAG_TUMORS.ID_EPIS_DIAGNOSIS%TYPE,
      tumor_num_in IN EPIS_DIAG_TUMORS.TUMOR_NUM%TYPE,
      id_topography_in IN EPIS_DIAG_TUMORS.ID_TOPOGRAPHY%TYPE DEFAULT NULL,
      id_topog_inst_owner_in IN EPIS_DIAG_TUMORS.ID_TOPOG_INST_OWNER%TYPE DEFAULT NULL,
      id_laterality_in IN EPIS_DIAG_TUMORS.ID_LATERALITY%TYPE DEFAULT NULL,
      id_lat_inst_owner_in IN EPIS_DIAG_TUMORS.ID_LAT_INST_OWNER%TYPE DEFAULT NULL,
      id_morphology_in IN EPIS_DIAG_TUMORS.ID_MORPHOLOGY%TYPE DEFAULT NULL,
      id_morph_inst_owner_in IN EPIS_DIAG_TUMORS.ID_MORPH_INST_OWNER%TYPE DEFAULT NULL,
      id_behavior_in IN EPIS_DIAG_TUMORS.ID_BEHAVIOR%TYPE DEFAULT NULL,
      id_behav_inst_owner_in IN EPIS_DIAG_TUMORS.ID_BEHAV_INST_OWNER%TYPE DEFAULT NULL,
      id_histological_grade_in IN EPIS_DIAG_TUMORS.ID_HISTOLOGICAL_GRADE%TYPE DEFAULT NULL,
      id_hgrade_inst_owner_in IN EPIS_DIAG_TUMORS.ID_HGRADE_INST_OWNER%TYPE DEFAULT NULL,
      id_other_grading_sys_in IN EPIS_DIAG_TUMORS.ID_OTHER_GRADING_SYS%TYPE DEFAULT NULL,
      id_ogradsys_inst_owner_in IN EPIS_DIAG_TUMORS.ID_OGRADSYS_INST_OWNER%TYPE DEFAULT NULL,
      flg_unknown_dimension_in IN EPIS_DIAG_TUMORS.FLG_UNKNOWN_DIMENSION%TYPE DEFAULT NULL,
      num_dimension_in IN EPIS_DIAG_TUMORS.NUM_DIMENSION%TYPE DEFAULT NULL,
      desc_dimension_in IN EPIS_DIAG_TUMORS.DESC_DIMENSION%TYPE DEFAULT NULL,
      additional_pathol_info_in IN EPIS_DIAG_TUMORS.ADDITIONAL_PATHOL_INFO%TYPE DEFAULT NULL,
      dt_epis_diagnosis_tumors_in IN EPIS_DIAG_TUMORS.DT_EPIS_DIAGNOSIS_TUMORS%TYPE DEFAULT NULL,
      create_user_in IN EPIS_DIAG_TUMORS.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN EPIS_DIAG_TUMORS.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN EPIS_DIAG_TUMORS.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN EPIS_DIAG_TUMORS.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN EPIS_DIAG_TUMORS.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN EPIS_DIAG_TUMORS.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_epis_diagnosis_in,
      tumor_num_in,
      id_topography_in,
      id_topog_inst_owner_in,
      id_laterality_in,
      id_lat_inst_owner_in,
      id_morphology_in,
      id_morph_inst_owner_in,
      id_behavior_in,
      id_behav_inst_owner_in,
      id_histological_grade_in,
      id_hgrade_inst_owner_in,
      id_other_grading_sys_in,
      id_ogradsys_inst_owner_in,
      flg_unknown_dimension_in,
      num_dimension_in,
      desc_dimension_in,
      additional_pathol_info_in,
      dt_epis_diagnosis_tumors_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN EPIS_DIAG_TUMORS_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_EPIS_DIAGNOSIS ID_EPIS_DIAGNOSIS_cc;
      l_TUMOR_NUM TUMOR_NUM_cc;
      l_ID_TOPOGRAPHY ID_TOPOGRAPHY_cc;
      l_ID_TOPOG_INST_OWNER ID_TOPOG_INST_OWNER_cc;
      l_ID_LATERALITY ID_LATERALITY_cc;
      l_ID_LAT_INST_OWNER ID_LAT_INST_OWNER_cc;
      l_ID_MORPHOLOGY ID_MORPHOLOGY_cc;
      l_ID_MORPH_INST_OWNER ID_MORPH_INST_OWNER_cc;
      l_ID_BEHAVIOR ID_BEHAVIOR_cc;
      l_ID_BEHAV_INST_OWNER ID_BEHAV_INST_OWNER_cc;
      l_ID_HISTOLOGICAL_GRADE ID_HISTOLOGICAL_GRADE_cc;
      l_ID_HGRADE_INST_OWNER ID_HGRADE_INST_OWNER_cc;
      l_ID_OTHER_GRADING_SYS ID_OTHER_GRADING_SYS_cc;
      l_ID_OGRADSYS_INST_OWNER ID_OGRADSYS_INST_OWNER_cc;
      l_FLG_UNKNOWN_DIMENSION FLG_UNKNOWN_DIMENSION_cc;
      l_NUM_DIMENSION NUM_DIMENSION_cc;
      l_DESC_DIMENSION DESC_DIMENSION_cc;
      l_ADDITIONAL_PATHOL_INFO ADDITIONAL_PATHOL_INFO_cc;
      l_DT_EPIS_DIAGNOSIS_TUMORS DT_EPIS_DIAGNOSIS_TUMORS_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_EPIS_DIAGNOSIS(i) := col_in(i).ID_EPIS_DIAGNOSIS;
         l_TUMOR_NUM(i) := col_in(i).TUMOR_NUM;
         l_ID_TOPOGRAPHY(i) := col_in(i).ID_TOPOGRAPHY;
         l_ID_TOPOG_INST_OWNER(i) := col_in(i).ID_TOPOG_INST_OWNER;
         l_ID_LATERALITY(i) := col_in(i).ID_LATERALITY;
         l_ID_LAT_INST_OWNER(i) := col_in(i).ID_LAT_INST_OWNER;
         l_ID_MORPHOLOGY(i) := col_in(i).ID_MORPHOLOGY;
         l_ID_MORPH_INST_OWNER(i) := col_in(i).ID_MORPH_INST_OWNER;
         l_ID_BEHAVIOR(i) := col_in(i).ID_BEHAVIOR;
         l_ID_BEHAV_INST_OWNER(i) := col_in(i).ID_BEHAV_INST_OWNER;
         l_ID_HISTOLOGICAL_GRADE(i) := col_in(i).ID_HISTOLOGICAL_GRADE;
         l_ID_HGRADE_INST_OWNER(i) := col_in(i).ID_HGRADE_INST_OWNER;
         l_ID_OTHER_GRADING_SYS(i) := col_in(i).ID_OTHER_GRADING_SYS;
         l_ID_OGRADSYS_INST_OWNER(i) := col_in(i).ID_OGRADSYS_INST_OWNER;
         l_FLG_UNKNOWN_DIMENSION(i) := col_in(i).FLG_UNKNOWN_DIMENSION;
         l_NUM_DIMENSION(i) := col_in(i).NUM_DIMENSION;
         l_DESC_DIMENSION(i) := col_in(i).DESC_DIMENSION;
         l_ADDITIONAL_PATHOL_INFO(i) := col_in(i).ADDITIONAL_PATHOL_INFO;
         l_DT_EPIS_DIAGNOSIS_TUMORS(i) := col_in(i).DT_EPIS_DIAGNOSIS_TUMORS;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE EPIS_DIAG_TUMORS SET
               ID_TOPOGRAPHY = NVL (l_ID_TOPOGRAPHY(i), ID_TOPOGRAPHY),
               ID_TOPOG_INST_OWNER = NVL (l_ID_TOPOG_INST_OWNER(i), ID_TOPOG_INST_OWNER),
               ID_LATERALITY = NVL (l_ID_LATERALITY(i), ID_LATERALITY),
               ID_LAT_INST_OWNER = NVL (l_ID_LAT_INST_OWNER(i), ID_LAT_INST_OWNER),
               ID_MORPHOLOGY = NVL (l_ID_MORPHOLOGY(i), ID_MORPHOLOGY),
               ID_MORPH_INST_OWNER = NVL (l_ID_MORPH_INST_OWNER(i), ID_MORPH_INST_OWNER),
               ID_BEHAVIOR = NVL (l_ID_BEHAVIOR(i), ID_BEHAVIOR),
               ID_BEHAV_INST_OWNER = NVL (l_ID_BEHAV_INST_OWNER(i), ID_BEHAV_INST_OWNER),
               ID_HISTOLOGICAL_GRADE = NVL (l_ID_HISTOLOGICAL_GRADE(i), ID_HISTOLOGICAL_GRADE),
               ID_HGRADE_INST_OWNER = NVL (l_ID_HGRADE_INST_OWNER(i), ID_HGRADE_INST_OWNER),
               ID_OTHER_GRADING_SYS = NVL (l_ID_OTHER_GRADING_SYS(i), ID_OTHER_GRADING_SYS),
               ID_OGRADSYS_INST_OWNER = NVL (l_ID_OGRADSYS_INST_OWNER(i), ID_OGRADSYS_INST_OWNER),
               FLG_UNKNOWN_DIMENSION = NVL (l_FLG_UNKNOWN_DIMENSION(i), FLG_UNKNOWN_DIMENSION),
               NUM_DIMENSION = NVL (l_NUM_DIMENSION(i), NUM_DIMENSION),
               DESC_DIMENSION = NVL (l_DESC_DIMENSION(i), DESC_DIMENSION),
               ADDITIONAL_PATHOL_INFO = NVL (l_ADDITIONAL_PATHOL_INFO(i), ADDITIONAL_PATHOL_INFO),
               DT_EPIS_DIAGNOSIS_TUMORS = NVL (l_DT_EPIS_DIAGNOSIS_TUMORS(i), DT_EPIS_DIAGNOSIS_TUMORS),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION)
             WHERE
                ID_EPIS_DIAGNOSIS = l_ID_EPIS_DIAGNOSIS(i) AND
                TUMOR_NUM = l_TUMOR_NUM(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE EPIS_DIAG_TUMORS SET
               ID_TOPOGRAPHY = l_ID_TOPOGRAPHY(i),
               ID_TOPOG_INST_OWNER = l_ID_TOPOG_INST_OWNER(i),
               ID_LATERALITY = l_ID_LATERALITY(i),
               ID_LAT_INST_OWNER = l_ID_LAT_INST_OWNER(i),
               ID_MORPHOLOGY = l_ID_MORPHOLOGY(i),
               ID_MORPH_INST_OWNER = l_ID_MORPH_INST_OWNER(i),
               ID_BEHAVIOR = l_ID_BEHAVIOR(i),
               ID_BEHAV_INST_OWNER = l_ID_BEHAV_INST_OWNER(i),
               ID_HISTOLOGICAL_GRADE = l_ID_HISTOLOGICAL_GRADE(i),
               ID_HGRADE_INST_OWNER = l_ID_HGRADE_INST_OWNER(i),
               ID_OTHER_GRADING_SYS = l_ID_OTHER_GRADING_SYS(i),
               ID_OGRADSYS_INST_OWNER = l_ID_OGRADSYS_INST_OWNER(i),
               FLG_UNKNOWN_DIMENSION = l_FLG_UNKNOWN_DIMENSION(i),
               NUM_DIMENSION = l_NUM_DIMENSION(i),
               DESC_DIMENSION = l_DESC_DIMENSION(i),
               ADDITIONAL_PATHOL_INFO = l_ADDITIONAL_PATHOL_INFO(i),
               DT_EPIS_DIAGNOSIS_TUMORS = l_DT_EPIS_DIAGNOSIS_TUMORS(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i)
             WHERE
                ID_EPIS_DIAGNOSIS = l_ID_EPIS_DIAGNOSIS(i) AND
                TUMOR_NUM = l_TUMOR_NUM(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN EPIS_DIAG_TUMORS_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE EPIS_DIAG_TUMORS
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE EPIS_DIAG_TUMORS
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE EPIS_DIAG_TUMORS set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE EPIS_DIAG_TUMORS set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_epis_diagnosis_in IN EPIS_DIAG_TUMORS.ID_EPIS_DIAGNOSIS%TYPE,
      tumor_num_in IN EPIS_DIAG_TUMORS.TUMOR_NUM%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_DIAG_TUMORS
       WHERE
          ID_EPIS_DIAGNOSIS = id_epis_diagnosis_in AND
          TUMOR_NUM = tumor_num_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_epis_diagnosis_in IN EPIS_DIAG_TUMORS.ID_EPIS_DIAGNOSIS%TYPE,
      tumor_num_in IN EPIS_DIAG_TUMORS.TUMOR_NUM%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_epis_diagnosis_in => id_epis_diagnosis_in,
      tumor_num_in => tumor_num_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_EPIS_DIAGNOSIS
   PROCEDURE del_ID_EPIS_DIAGNOSIS (
      id_epis_diagnosis_in IN EPIS_DIAG_TUMORS.ID_EPIS_DIAGNOSIS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM EPIS_DIAG_TUMORS
       WHERE ID_EPIS_DIAGNOSIS = id_epis_diagnosis_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_EPIS_DIAGNOSIS;

   -- Delete all rows for primary key column TUMOR_NUM
   PROCEDURE del_TUMOR_NUM (
      tumor_num_in IN EPIS_DIAG_TUMORS.TUMOR_NUM%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM EPIS_DIAG_TUMORS
       WHERE TUMOR_NUM = tumor_num_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_TUMOR_NUM;






   -- Delete all rows for primary key column ID_EPIS_DIAGNOSIS
   PROCEDURE del_ID_EPIS_DIAGNOSIS (
      id_epis_diagnosis_in IN EPIS_DIAG_TUMORS.ID_EPIS_DIAGNOSIS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_EPIS_DIAGNOSIS (
      id_epis_diagnosis_in => id_epis_diagnosis_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_EPIS_DIAGNOSIS;

   -- Delete all rows for primary key column TUMOR_NUM
   PROCEDURE del_TUMOR_NUM (
      tumor_num_in IN EPIS_DIAG_TUMORS.TUMOR_NUM%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_TUMOR_NUM (
      tumor_num_in => tumor_num_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_TUMOR_NUM;















   PROCEDURE del_EDTMRS_CNCPTTR1_FK (
      id_topography_in IN EPIS_DIAG_TUMORS.ID_TOPOGRAPHY%TYPE,
      id_topog_inst_owner_in IN EPIS_DIAG_TUMORS.ID_TOPOG_INST_OWNER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_DIAG_TUMORS
       WHERE
          ID_TOPOGRAPHY = del_EDTMRS_CNCPTTR1_FK.id_topography_in AND
          ID_TOPOG_INST_OWNER = del_EDTMRS_CNCPTTR1_FK.id_topog_inst_owner_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EDTMRS_CNCPTTR1_FK;



PROCEDURE del_EDTMRS_CNCPTTR1_FK (
      id_topography_in IN EPIS_DIAG_TUMORS.ID_TOPOGRAPHY%TYPE,
      id_topog_inst_owner_in IN EPIS_DIAG_TUMORS.ID_TOPOG_INST_OWNER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EDTMRS_CNCPTTR1_FK (
      id_topography_in => id_topography_in,
      id_topog_inst_owner_in => id_topog_inst_owner_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EDTMRS_CNCPTTR1_FK;





   PROCEDURE del_EDTMRS_CNCPTTR2_FK (
      id_laterality_in IN EPIS_DIAG_TUMORS.ID_LATERALITY%TYPE,
      id_lat_inst_owner_in IN EPIS_DIAG_TUMORS.ID_LAT_INST_OWNER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_DIAG_TUMORS
       WHERE
          ID_LATERALITY = del_EDTMRS_CNCPTTR2_FK.id_laterality_in AND
          ID_LAT_INST_OWNER = del_EDTMRS_CNCPTTR2_FK.id_lat_inst_owner_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EDTMRS_CNCPTTR2_FK;



PROCEDURE del_EDTMRS_CNCPTTR2_FK (
      id_laterality_in IN EPIS_DIAG_TUMORS.ID_LATERALITY%TYPE,
      id_lat_inst_owner_in IN EPIS_DIAG_TUMORS.ID_LAT_INST_OWNER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EDTMRS_CNCPTTR2_FK (
      id_laterality_in => id_laterality_in,
      id_lat_inst_owner_in => id_lat_inst_owner_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EDTMRS_CNCPTTR2_FK;





   PROCEDURE del_EDTMRS_CNCPTTR3_FK (
      id_morphology_in IN EPIS_DIAG_TUMORS.ID_MORPHOLOGY%TYPE,
      id_morph_inst_owner_in IN EPIS_DIAG_TUMORS.ID_MORPH_INST_OWNER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_DIAG_TUMORS
       WHERE
          ID_MORPHOLOGY = del_EDTMRS_CNCPTTR3_FK.id_morphology_in AND
          ID_MORPH_INST_OWNER = del_EDTMRS_CNCPTTR3_FK.id_morph_inst_owner_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EDTMRS_CNCPTTR3_FK;



PROCEDURE del_EDTMRS_CNCPTTR3_FK (
      id_morphology_in IN EPIS_DIAG_TUMORS.ID_MORPHOLOGY%TYPE,
      id_morph_inst_owner_in IN EPIS_DIAG_TUMORS.ID_MORPH_INST_OWNER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EDTMRS_CNCPTTR3_FK (
      id_morphology_in => id_morphology_in,
      id_morph_inst_owner_in => id_morph_inst_owner_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EDTMRS_CNCPTTR3_FK;





   PROCEDURE del_EDTMRS_CNCPTTR4_FK (
      id_behavior_in IN EPIS_DIAG_TUMORS.ID_BEHAVIOR%TYPE,
      id_behav_inst_owner_in IN EPIS_DIAG_TUMORS.ID_BEHAV_INST_OWNER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_DIAG_TUMORS
       WHERE
          ID_BEHAVIOR = del_EDTMRS_CNCPTTR4_FK.id_behavior_in AND
          ID_BEHAV_INST_OWNER = del_EDTMRS_CNCPTTR4_FK.id_behav_inst_owner_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EDTMRS_CNCPTTR4_FK;



PROCEDURE del_EDTMRS_CNCPTTR4_FK (
      id_behavior_in IN EPIS_DIAG_TUMORS.ID_BEHAVIOR%TYPE,
      id_behav_inst_owner_in IN EPIS_DIAG_TUMORS.ID_BEHAV_INST_OWNER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EDTMRS_CNCPTTR4_FK (
      id_behavior_in => id_behavior_in,
      id_behav_inst_owner_in => id_behav_inst_owner_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EDTMRS_CNCPTTR4_FK;





   PROCEDURE del_EDTMRS_CNCPTTR5_FK (
      id_histological_grade_in IN EPIS_DIAG_TUMORS.ID_HISTOLOGICAL_GRADE%TYPE,
      id_hgrade_inst_owner_in IN EPIS_DIAG_TUMORS.ID_HGRADE_INST_OWNER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_DIAG_TUMORS
       WHERE
          ID_HISTOLOGICAL_GRADE = del_EDTMRS_CNCPTTR5_FK.id_histological_grade_in AND
          ID_HGRADE_INST_OWNER = del_EDTMRS_CNCPTTR5_FK.id_hgrade_inst_owner_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EDTMRS_CNCPTTR5_FK;



PROCEDURE del_EDTMRS_CNCPTTR5_FK (
      id_histological_grade_in IN EPIS_DIAG_TUMORS.ID_HISTOLOGICAL_GRADE%TYPE,
      id_hgrade_inst_owner_in IN EPIS_DIAG_TUMORS.ID_HGRADE_INST_OWNER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EDTMRS_CNCPTTR5_FK (
      id_histological_grade_in => id_histological_grade_in,
      id_hgrade_inst_owner_in => id_hgrade_inst_owner_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EDTMRS_CNCPTTR5_FK;





   PROCEDURE del_EDTMRS_CNCPTTR6_FK (
      id_other_grading_sys_in IN EPIS_DIAG_TUMORS.ID_OTHER_GRADING_SYS%TYPE,
      id_ogradsys_inst_owner_in IN EPIS_DIAG_TUMORS.ID_OGRADSYS_INST_OWNER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_DIAG_TUMORS
       WHERE
          ID_OTHER_GRADING_SYS = del_EDTMRS_CNCPTTR6_FK.id_other_grading_sys_in AND
          ID_OGRADSYS_INST_OWNER = del_EDTMRS_CNCPTTR6_FK.id_ogradsys_inst_owner_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EDTMRS_CNCPTTR6_FK;



PROCEDURE del_EDTMRS_CNCPTTR6_FK (
      id_other_grading_sys_in IN EPIS_DIAG_TUMORS.ID_OTHER_GRADING_SYS%TYPE,
      id_ogradsys_inst_owner_in IN EPIS_DIAG_TUMORS.ID_OGRADSYS_INST_OWNER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EDTMRS_CNCPTTR6_FK (
      id_other_grading_sys_in => id_other_grading_sys_in,
      id_ogradsys_inst_owner_in => id_ogradsys_inst_owner_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EDTMRS_CNCPTTR6_FK;





   PROCEDURE del_EDTMRS_ED_FK (
      id_epis_diagnosis_in IN EPIS_DIAG_TUMORS.ID_EPIS_DIAGNOSIS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_DIAG_TUMORS
       WHERE
          ID_EPIS_DIAGNOSIS = del_EDTMRS_ED_FK.id_epis_diagnosis_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EDTMRS_ED_FK;



PROCEDURE del_EDTMRS_ED_FK (
      id_epis_diagnosis_in IN EPIS_DIAG_TUMORS.ID_EPIS_DIAGNOSIS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EDTMRS_ED_FK (
      id_epis_diagnosis_in => id_epis_diagnosis_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EDTMRS_ED_FK;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM EPIS_DIAG_TUMORS';
      ELSE
         RETURN
            'DELETE FROM EPIS_DIAG_TUMORS WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_DIAG_TUMORS');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_DIAG_TUMORS');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      epis_diag_tumors_inout IN OUT EPIS_DIAG_TUMORS%ROWTYPE
   )
   IS
   BEGIN
      epis_diag_tumors_inout.ID_EPIS_DIAGNOSIS := NULL;
      epis_diag_tumors_inout.TUMOR_NUM := NULL;
      epis_diag_tumors_inout.ID_TOPOGRAPHY := NULL;
      epis_diag_tumors_inout.ID_TOPOG_INST_OWNER := NULL;
      epis_diag_tumors_inout.ID_LATERALITY := NULL;
      epis_diag_tumors_inout.ID_LAT_INST_OWNER := NULL;
      epis_diag_tumors_inout.ID_MORPHOLOGY := NULL;
      epis_diag_tumors_inout.ID_MORPH_INST_OWNER := NULL;
      epis_diag_tumors_inout.ID_BEHAVIOR := NULL;
      epis_diag_tumors_inout.ID_BEHAV_INST_OWNER := NULL;
      epis_diag_tumors_inout.ID_HISTOLOGICAL_GRADE := NULL;
      epis_diag_tumors_inout.ID_HGRADE_INST_OWNER := NULL;
      epis_diag_tumors_inout.ID_OTHER_GRADING_SYS := NULL;
      epis_diag_tumors_inout.ID_OGRADSYS_INST_OWNER := NULL;
      epis_diag_tumors_inout.FLG_UNKNOWN_DIMENSION := NULL;
      epis_diag_tumors_inout.NUM_DIMENSION := NULL;
      epis_diag_tumors_inout.DESC_DIMENSION := NULL;
      epis_diag_tumors_inout.ADDITIONAL_PATHOL_INFO := NULL;
      epis_diag_tumors_inout.DT_EPIS_DIAGNOSIS_TUMORS := NULL;
      epis_diag_tumors_inout.CREATE_USER := NULL;
      epis_diag_tumors_inout.CREATE_TIME := NULL;
      epis_diag_tumors_inout.CREATE_INSTITUTION := NULL;
      epis_diag_tumors_inout.UPDATE_USER := NULL;
      epis_diag_tumors_inout.UPDATE_TIME := NULL;
      epis_diag_tumors_inout.UPDATE_INSTITUTION := NULL;
   END initrec;

   FUNCTION initrec RETURN EPIS_DIAG_TUMORS%ROWTYPE
   IS
      l_epis_diag_tumors EPIS_DIAG_TUMORS%ROWTYPE;
   BEGIN
      RETURN l_epis_diag_tumors;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN EPIS_DIAG_TUMORS_tc
   IS
        data EPIS_DIAG_TUMORS_tc;
   BEGIN
        select * bulk collect into data from EPIS_DIAG_TUMORS where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN EPIS_DIAG_TUMORS_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data EPIS_DIAG_TUMORS_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_EPIS_DIAG_TUMORS;
/
