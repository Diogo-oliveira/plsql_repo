/*-- Last Change Revision: $Rev: 2028280 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:50 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_opinion_reason
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2022-04-12 12:10:52
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    PROCEDURE ins
    (
        id_diagnosis_in       IN opinion_reason.id_diagnosis%TYPE,
        id_opinion_in         IN opinion_reason.id_opinion%TYPE,
        create_user_in        IN opinion_reason.create_user%TYPE DEFAULT NULL,
        create_time_in        IN opinion_reason.create_time%TYPE DEFAULT NULL,
        create_institution_in IN opinion_reason.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN opinion_reason.update_user%TYPE DEFAULT NULL,
        update_time_in        IN opinion_reason.update_time%TYPE DEFAULT NULL,
        update_institution_in IN opinion_reason.update_institution%TYPE DEFAULT NULL,
        id_diag_inst_owner_in IN opinion_reason.id_diag_inst_owner%TYPE DEFAULT 0,
        diagnosis_desc_in     IN opinion_reason.diagnosis_desc%TYPE DEFAULT NULL,
        id_alert_diagnosis_in IN opinion_reason.id_alert_diagnosis%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := FALSE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO opinion_reason
            (id_diagnosis,
             id_opinion,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_diag_inst_owner,
             diagnosis_desc,
             id_alert_diagnosis)
        VALUES
            (id_diagnosis_in,
             id_opinion_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_diag_inst_owner_in,
             diagnosis_desc_in,
             id_alert_diagnosis_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_diagnosis_in       IN opinion_reason.id_diagnosis%TYPE,
        id_opinion_in         IN opinion_reason.id_opinion%TYPE,
        create_user_in        IN opinion_reason.create_user%TYPE DEFAULT NULL,
        create_time_in        IN opinion_reason.create_time%TYPE DEFAULT NULL,
        create_institution_in IN opinion_reason.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN opinion_reason.update_user%TYPE DEFAULT NULL,
        update_time_in        IN opinion_reason.update_time%TYPE DEFAULT NULL,
        update_institution_in IN opinion_reason.update_institution%TYPE DEFAULT NULL,
        id_diag_inst_owner_in IN opinion_reason.id_diag_inst_owner%TYPE DEFAULT 0,
        diagnosis_desc_in     IN opinion_reason.diagnosis_desc%TYPE DEFAULT NULL,
        id_alert_diagnosis_in IN opinion_reason.id_alert_diagnosis%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_diagnosis_in       => id_diagnosis_in,
            id_opinion_in         => id_opinion_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            id_diag_inst_owner_in => id_diag_inst_owner_in,
            diagnosis_desc_in     => diagnosis_desc_in,
            id_alert_diagnosis_in => id_alert_diagnosis_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN opinion_reason%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
        l_rec opinion_reason%ROWTYPE := rec_in;
    BEGIN
    
        ins(id_diagnosis_in       => l_rec.id_diagnosis,
            id_opinion_in         => l_rec.id_opinion,
            create_user_in        => l_rec.create_user,
            create_time_in        => l_rec.create_time,
            create_institution_in => l_rec.create_institution,
            update_user_in        => l_rec.update_user,
            update_time_in        => l_rec.update_time,
            update_institution_in => l_rec.update_institution,
            id_diag_inst_owner_in => l_rec.id_diag_inst_owner,
            diagnosis_desc_in     => l_rec.diagnosis_desc,
            id_alert_diagnosis_in => l_rec.id_alert_diagnosis,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN opinion_reason%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN opinion_reason_tc,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO opinion_reason
                    (id_opinion, id_diagnosis, id_diag_inst_owner, diagnosis_desc, id_alert_diagnosis)
                VALUES
                    (rows_in(indx).id_opinion,
                     rows_in(indx).id_diagnosis,
                     rows_in(indx).id_diag_inst_owner,
                     rows_in(indx).diagnosis_desc,
                     rows_in(indx).id_alert_diagnosis)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN opinion_reason_tc,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_diagnosis_in        IN opinion_reason.id_diagnosis%TYPE,
        id_opinion_in          IN opinion_reason.id_opinion%TYPE,
        create_user_in         IN opinion_reason.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN opinion_reason.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN opinion_reason.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN opinion_reason.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN opinion_reason.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN opinion_reason.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        id_diag_inst_owner_in  IN opinion_reason.id_diag_inst_owner%TYPE DEFAULT NULL,
        id_diag_inst_owner_nin IN BOOLEAN := TRUE,
        diagnosis_desc_in      IN opinion_reason.diagnosis_desc%TYPE DEFAULT NULL,
        diagnosis_desc_nin     IN BOOLEAN := TRUE,
        id_alert_diagnosis_in  IN opinion_reason.id_alert_diagnosis%TYPE DEFAULT NULL,
        id_alert_diagnosis_nin IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := FALSE,
        rows_out               IN OUT table_varchar
    ) IS
        l_rows_out             table_varchar;
        l_create_user_n        NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_diag_inst_owner_n NUMBER(1) := sys.diutil.bool_to_int(id_diag_inst_owner_nin);
        l_diagnosis_desc_n     NUMBER(1) := sys.diutil.bool_to_int(diagnosis_desc_nin);
        l_id_alert_diagnosis_n NUMBER(1) := sys.diutil.bool_to_int(id_alert_diagnosis_nin);
    BEGIN
    
        UPDATE opinion_reason
           SET create_user        = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time        = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution = decode(l_create_institution_n,
                                           0,
                                           create_institution_in,
                                           nvl(create_institution_in, create_institution)),
               update_user        = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time        = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution = decode(l_update_institution_n,
                                           0,
                                           update_institution_in,
                                           nvl(update_institution_in, update_institution)),
               id_diag_inst_owner = decode(l_id_diag_inst_owner_n,
                                           0,
                                           id_diag_inst_owner_in,
                                           nvl(id_diag_inst_owner_in, id_diag_inst_owner)),
               diagnosis_desc     = decode(l_diagnosis_desc_n,
                                           0,
                                           diagnosis_desc_in,
                                           nvl(diagnosis_desc_in, diagnosis_desc)),
               id_alert_diagnosis = decode(l_id_alert_diagnosis_n,
                                           0,
                                           id_alert_diagnosis_in,
                                           nvl(id_alert_diagnosis_in, id_alert_diagnosis))
         WHERE id_diagnosis = id_diagnosis_in
           AND id_opinion = id_opinion_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_diagnosis_in        IN opinion_reason.id_diagnosis%TYPE,
        id_opinion_in          IN opinion_reason.id_opinion%TYPE,
        create_user_in         IN opinion_reason.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN opinion_reason.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN opinion_reason.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN opinion_reason.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN opinion_reason.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN opinion_reason.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        id_diag_inst_owner_in  IN opinion_reason.id_diag_inst_owner%TYPE DEFAULT NULL,
        id_diag_inst_owner_nin IN BOOLEAN := TRUE,
        diagnosis_desc_in      IN opinion_reason.diagnosis_desc%TYPE DEFAULT NULL,
        diagnosis_desc_nin     IN BOOLEAN := TRUE,
        id_alert_diagnosis_in  IN opinion_reason.id_alert_diagnosis%TYPE DEFAULT NULL,
        id_alert_diagnosis_nin IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_diagnosis_in        => id_diagnosis_in,
            id_opinion_in          => id_opinion_in,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            id_diag_inst_owner_in  => id_diag_inst_owner_in,
            id_diag_inst_owner_nin => id_diag_inst_owner_nin,
            diagnosis_desc_in      => diagnosis_desc_in,
            diagnosis_desc_nin     => diagnosis_desc_nin,
            id_alert_diagnosis_in  => id_alert_diagnosis_in,
            id_alert_diagnosis_nin => id_alert_diagnosis_nin,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        create_user_in         IN opinion_reason.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN opinion_reason.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN opinion_reason.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN opinion_reason.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN opinion_reason.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN opinion_reason.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        id_diag_inst_owner_in  IN opinion_reason.id_diag_inst_owner%TYPE DEFAULT NULL,
        id_diag_inst_owner_nin IN BOOLEAN := TRUE,
        diagnosis_desc_in      IN opinion_reason.diagnosis_desc%TYPE DEFAULT NULL,
        diagnosis_desc_nin     IN BOOLEAN := TRUE,
        id_alert_diagnosis_in  IN opinion_reason.id_alert_diagnosis%TYPE DEFAULT NULL,
        id_alert_diagnosis_nin IN BOOLEAN := TRUE,
        where_in               IN VARCHAR2,
        handle_error_in        IN BOOLEAN := FALSE,
        rows_out               IN OUT table_varchar
    ) IS
        l_sql                  VARCHAR2(32767);
        l_rows_out             table_varchar;
        l_create_user_n        NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_diag_inst_owner_n NUMBER(1) := sys.diutil.bool_to_int(id_diag_inst_owner_nin);
        l_diagnosis_desc_n     NUMBER(1) := sys.diutil.bool_to_int(diagnosis_desc_nin);
        l_id_alert_diagnosis_n NUMBER(1) := sys.diutil.bool_to_int(id_alert_diagnosis_nin);
    BEGIN
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_id_diag_inst_owner_n := sys.diutil.bool_to_int(id_diag_inst_owner_nin);
        l_diagnosis_desc_n     := sys.diutil.bool_to_int(diagnosis_desc_nin);
        l_id_alert_diagnosis_n := sys.diutil.bool_to_int(id_alert_diagnosis_nin);
        l_sql                  := 'UPDATE opinion_reason SET' || ' CREATE_USER = decode (' || l_create_user_n ||
                                  ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                  ' CREATE_TIME = decode (' || l_create_time_n ||
                                  ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                  ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                  ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                  ' UPDATE_USER = decode (' || l_update_user_n ||
                                  ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                  ' UPDATE_TIME = decode (' || l_update_time_n ||
                                  ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                  ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                  ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                  ' ID_DIAG_INST_OWNER = decode (' || l_id_diag_inst_owner_n ||
                                  ',0,:ID_DIAG_INST_OWNER_in, NVL (:ID_DIAG_INST_OWNER_in, ID_DIAG_INST_OWNER)) ' || ',' ||
                                  ' DIAGNOSIS_DESC = decode (' || l_diagnosis_desc_n ||
                                  ',0,:DIAGNOSIS_DESC_in, NVL (:DIAGNOSIS_DESC_in, DIAGNOSIS_DESC)) ' || ',' ||
                                  ' ID_ALERT_DIAGNOSIS = decode (' || l_id_alert_diagnosis_n ||
                                  ',0,:ID_ALERT_DIAGNOSIS_in, NVL (:ID_ALERT_DIAGNOSIS_in, ID_ALERT_DIAGNOSIS)) ' ||
                                  ' where ' || nvl(where_in, '(1=1)') ||
                                  ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_diag_inst_owner_in, diagnosis_desc_in, id_alert_diagnosis_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        create_user_in         IN opinion_reason.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN opinion_reason.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN opinion_reason.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN opinion_reason.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN opinion_reason.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN opinion_reason.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        id_diag_inst_owner_in  IN opinion_reason.id_diag_inst_owner%TYPE DEFAULT NULL,
        id_diag_inst_owner_nin IN BOOLEAN := TRUE,
        diagnosis_desc_in      IN opinion_reason.diagnosis_desc%TYPE DEFAULT NULL,
        diagnosis_desc_nin     IN BOOLEAN := TRUE,
        id_alert_diagnosis_in  IN opinion_reason.id_alert_diagnosis%TYPE DEFAULT NULL,
        id_alert_diagnosis_nin IN BOOLEAN := TRUE,
        where_in               IN VARCHAR2,
        handle_error_in        IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            id_diag_inst_owner_in  => id_diag_inst_owner_in,
            id_diag_inst_owner_nin => id_diag_inst_owner_nin,
            diagnosis_desc_in      => diagnosis_desc_in,
            diagnosis_desc_nin     => diagnosis_desc_nin,
            id_alert_diagnosis_in  => id_alert_diagnosis_in,
            id_alert_diagnosis_nin => id_alert_diagnosis_nin,
            where_in               => where_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_diagnosis_in       IN opinion_reason.id_diagnosis%TYPE,
        id_opinion_in         IN opinion_reason.id_opinion%TYPE,
        create_user_in        IN opinion_reason.create_user%TYPE DEFAULT NULL,
        create_time_in        IN opinion_reason.create_time%TYPE DEFAULT NULL,
        create_institution_in IN opinion_reason.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN opinion_reason.update_user%TYPE DEFAULT NULL,
        update_time_in        IN opinion_reason.update_time%TYPE DEFAULT NULL,
        update_institution_in IN opinion_reason.update_institution%TYPE DEFAULT NULL,
        id_diag_inst_owner_in IN opinion_reason.id_diag_inst_owner%TYPE DEFAULT NULL,
        diagnosis_desc_in     IN opinion_reason.diagnosis_desc%TYPE DEFAULT NULL,
        id_alert_diagnosis_in IN opinion_reason.id_alert_diagnosis%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := FALSE,
        rows_out              IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_diagnosis_in       => id_diagnosis_in,
            id_opinion_in         => id_opinion_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            id_diag_inst_owner_in => id_diag_inst_owner_in,
            diagnosis_desc_in     => diagnosis_desc_in,
            id_alert_diagnosis_in => id_alert_diagnosis_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_diagnosis_in       => id_diagnosis_in,
                id_opinion_in         => id_opinion_in,
                create_user_in        => create_user_in,
                create_time_in        => create_time_in,
                create_institution_in => create_institution_in,
                update_user_in        => update_user_in,
                update_time_in        => update_time_in,
                update_institution_in => update_institution_in,
                id_diag_inst_owner_in => id_diag_inst_owner_in,
                diagnosis_desc_in     => diagnosis_desc_in,
                id_alert_diagnosis_in => id_alert_diagnosis_in,
                handle_error_in       => handle_error_in,
                rows_out              => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_diagnosis_in       IN opinion_reason.id_diagnosis%TYPE,
        id_opinion_in         IN opinion_reason.id_opinion%TYPE,
        create_user_in        IN opinion_reason.create_user%TYPE DEFAULT NULL,
        create_time_in        IN opinion_reason.create_time%TYPE DEFAULT NULL,
        create_institution_in IN opinion_reason.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN opinion_reason.update_user%TYPE DEFAULT NULL,
        update_time_in        IN opinion_reason.update_time%TYPE DEFAULT NULL,
        update_institution_in IN opinion_reason.update_institution%TYPE DEFAULT NULL,
        id_diag_inst_owner_in IN opinion_reason.id_diag_inst_owner%TYPE DEFAULT NULL,
        diagnosis_desc_in     IN opinion_reason.diagnosis_desc%TYPE DEFAULT NULL,
        id_alert_diagnosis_in IN opinion_reason.id_alert_diagnosis%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_diagnosis_in,
                id_opinion_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_diag_inst_owner_in,
                diagnosis_desc_in,
                id_alert_diagnosis_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN opinion_reason%ROWTYPE,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_diagnosis_in       => rec_in.id_diagnosis,
            id_opinion_in         => rec_in.id_opinion,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            id_diag_inst_owner_in => rec_in.id_diag_inst_owner,
            diagnosis_desc_in     => rec_in.diagnosis_desc,
            id_alert_diagnosis_in => rec_in.id_alert_diagnosis,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN opinion_reason%ROWTYPE,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_diagnosis_in       => rec_in.id_diagnosis,
            id_opinion_in         => rec_in.id_opinion,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            id_diag_inst_owner_in => rec_in.id_diag_inst_owner,
            diagnosis_desc_in     => rec_in.diagnosis_desc,
            id_alert_diagnosis_in => rec_in.id_alert_diagnosis,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN opinion_reason_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := FALSE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_diagnosis       id_diagnosis_cc;
        l_id_opinion         id_opinion_cc;
        l_create_user        create_user_cc;
        l_create_time        create_time_cc;
        l_create_institution create_institution_cc;
        l_update_user        update_user_cc;
        l_update_time        update_time_cc;
        l_update_institution update_institution_cc;
        l_id_diag_inst_owner id_diag_inst_owner_cc;
        l_diagnosis_desc     diagnosis_desc_cc;
        l_id_alert_diagnosis id_alert_diagnosis_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_diagnosis(i) := col_in(i).id_diagnosis;
            l_id_opinion(i) := col_in(i).id_opinion;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_diag_inst_owner(i) := col_in(i).id_diag_inst_owner;
            l_diagnosis_desc(i) := col_in(i).diagnosis_desc;
            l_id_alert_diagnosis(i) := col_in(i).id_alert_diagnosis;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE opinion_reason
                   SET create_user        = nvl(l_create_user(i), create_user),
                       create_time        = nvl(l_create_time(i), create_time),
                       create_institution = nvl(l_create_institution(i), create_institution),
                       update_user        = nvl(l_update_user(i), update_user),
                       update_time        = nvl(l_update_time(i), update_time),
                       update_institution = nvl(l_update_institution(i), update_institution),
                       id_diag_inst_owner = nvl(l_id_diag_inst_owner(i), id_diag_inst_owner),
                       diagnosis_desc     = nvl(l_diagnosis_desc(i), diagnosis_desc),
                       id_alert_diagnosis = nvl(l_id_alert_diagnosis(i), id_alert_diagnosis)
                 WHERE id_diagnosis = l_id_diagnosis(i)
                   AND id_opinion = l_id_opinion(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE opinion_reason
                   SET create_user        = l_create_user(i),
                       create_time        = l_create_time(i),
                       create_institution = l_create_institution(i),
                       update_user        = l_update_user(i),
                       update_time        = l_update_time(i),
                       update_institution = l_update_institution(i),
                       id_diag_inst_owner = l_id_diag_inst_owner(i),
                       diagnosis_desc     = l_diagnosis_desc(i),
                       id_alert_diagnosis = l_id_alert_diagnosis(i)
                 WHERE id_diagnosis = l_id_diagnosis(i)
                   AND id_opinion = l_id_opinion(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN opinion_reason_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE opinion_reason
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := FALSE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE opinion_reason
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE opinion_reason
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_diagnosis_in IN opinion_reason.id_diagnosis%TYPE,
        id_opinion_in   IN opinion_reason.id_opinion%TYPE,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion_reason
         WHERE id_diagnosis = id_diagnosis_in
           AND id_opinion = id_opinion_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_diagnosis_in IN opinion_reason.id_diagnosis%TYPE,
        id_opinion_in   IN opinion_reason.id_opinion%TYPE,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_diagnosis_in => id_diagnosis_in,
            id_opinion_in   => id_opinion_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END del;

    -- Delete all rows for this OPR_DIAGNOSIS_FK foreign key value
    PROCEDURE del_opr_diagnosis_fk
    (
        id_diagnosis_in       IN opinion_reason.id_diagnosis%TYPE,
        id_diag_inst_owner_in IN opinion_reason.id_diag_inst_owner%TYPE,
        handle_error_in       IN BOOLEAN := FALSE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion_reason
         WHERE id_diagnosis = id_diagnosis_in
           AND id_diag_inst_owner = id_diag_inst_owner_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_opr_diagnosis_fk;

    -- Delete all rows for this OPR_OPINION_FK foreign key value
    PROCEDURE del_opr_opinion_fk
    (
        id_opinion_in   IN opinion_reason.id_opinion%TYPE,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion_reason
         WHERE id_opinion = id_opinion_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_opr_opinion_fk;

    -- Delete all rows for this OPR_DIAGNOSIS_FK foreign key value
    PROCEDURE del_opr_diagnosis_fk
    (
        id_diagnosis_in       IN opinion_reason.id_diagnosis%TYPE,
        id_diag_inst_owner_in IN opinion_reason.id_diag_inst_owner%TYPE,
        handle_error_in       IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opr_diagnosis_fk(id_diagnosis_in       => id_diagnosis_in,
                             id_diag_inst_owner_in => id_diag_inst_owner_in,
                             handle_error_in       => handle_error_in,
                             rows_out              => rows_out);
    END del_opr_diagnosis_fk;

    -- Delete all rows for this OPR_OPINION_FK foreign key value
    PROCEDURE del_opr_opinion_fk
    (
        id_opinion_in   IN opinion_reason.id_opinion%TYPE,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opr_opinion_fk(id_opinion_in => id_opinion_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_opr_opinion_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM opinion_reason';
        ELSE
            RETURN 'DELETE FROM opinion_reason WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(opinion_reason_inout IN OUT opinion_reason%ROWTYPE) IS
    BEGIN
        opinion_reason_inout.id_diagnosis       := NULL;
        opinion_reason_inout.id_opinion         := NULL;
        opinion_reason_inout.create_user        := NULL;
        opinion_reason_inout.create_time        := NULL;
        opinion_reason_inout.create_institution := NULL;
        opinion_reason_inout.update_user        := NULL;
        opinion_reason_inout.update_time        := NULL;
        opinion_reason_inout.update_institution := NULL;
        opinion_reason_inout.id_diag_inst_owner := NULL;
        opinion_reason_inout.diagnosis_desc     := NULL;
        opinion_reason_inout.id_alert_diagnosis := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN opinion_reason%ROWTYPE IS
        l_opinion_reason opinion_reason%ROWTYPE;
    BEGIN
        RETURN l_opinion_reason;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN opinion_reason_tc IS
        data opinion_reason_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM opinion_reason
         WHERE ROWID IN (SELECT /*+ OPT_ESTIMATE(TABLE t ROWS=1) */
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN opinion_reason_tc IS
        data opinion_reason_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_opinion_reason;
/
