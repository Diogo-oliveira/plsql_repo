/*-- Last Change Revision: $Rev: 2028007 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:43:56 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY TS_DISCHARGE_NOTES
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Outubro 29, 2014 21:43:1
| Created By: ALERT
*/
IS


   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_discharge_notes_in IN DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE
      ,
      id_episode_in IN DISCHARGE_NOTES.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN DISCHARGE_NOTES.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      epis_complaint_in IN DISCHARGE_NOTES.EPIS_COMPLAINT%TYPE DEFAULT NULL,
      epis_diagnosis_in IN DISCHARGE_NOTES.EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      epis_tests_in IN DISCHARGE_NOTES.EPIS_TESTS%TYPE DEFAULT NULL,
      epis_drugs_in IN DISCHARGE_NOTES.EPIS_DRUGS%TYPE DEFAULT NULL,
      recommended_in IN DISCHARGE_NOTES.RECOMMENDED%TYPE DEFAULT NULL,
      flg_status_in IN DISCHARGE_NOTES.FLG_STATUS%TYPE DEFAULT NULL,
      adw_last_update_in IN DISCHARGE_NOTES.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      id_prof_cancel_in IN DISCHARGE_NOTES.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN DISCHARGE_NOTES.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DISCHARGE_NOTES.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      release_from_in IN DISCHARGE_NOTES.RELEASE_FROM%TYPE DEFAULT NULL,
      dt_from_in IN DISCHARGE_NOTES.DT_FROM%TYPE DEFAULT NULL,
      dt_until_in IN DISCHARGE_NOTES.DT_UNTIL%TYPE DEFAULT NULL,
      notes_release_in IN DISCHARGE_NOTES.NOTES_RELEASE%TYPE DEFAULT NULL,
      follow_up_with_in IN DISCHARGE_NOTES.FOLLOW_UP_WITH%TYPE DEFAULT NULL,
      follow_up_in_in IN DISCHARGE_NOTES.FOLLOW_UP_IN%TYPE DEFAULT NULL,
      instructions_discussed_in IN DISCHARGE_NOTES.INSTRUCTIONS_DISCUSSED%TYPE DEFAULT NULL,
      id_follow_up_type_in IN DISCHARGE_NOTES.ID_FOLLOW_UP_TYPE%TYPE DEFAULT NULL,
      id_epis_report_in IN DISCHARGE_NOTES.ID_EPIS_REPORT%TYPE DEFAULT NULL,
      id_patient_in IN DISCHARGE_NOTES.ID_PATIENT%TYPE DEFAULT NULL,
      id_pending_issue_in IN DISCHARGE_NOTES.ID_PENDING_ISSUE%TYPE DEFAULT NULL,
      create_user_in IN DISCHARGE_NOTES.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DISCHARGE_NOTES.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DISCHARGE_NOTES.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DISCHARGE_NOTES.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DISCHARGE_NOTES.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DISCHARGE_NOTES.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_issue_assign_in IN DISCHARGE_NOTES.FLG_ISSUE_ASSIGN%TYPE DEFAULT NULL,
      discharge_instructions_in IN DISCHARGE_NOTES.DISCHARGE_INSTRUCTIONS%TYPE DEFAULT NULL,
      flg_csg_patient_in IN DISCHARGE_NOTES.FLG_CSG_PATIENT%TYPE DEFAULT NULL,
      dt_csg_patient_in IN DISCHARGE_NOTES.DT_CSG_PATIENT%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO DISCHARGE_NOTES (
         ID_DISCHARGE_NOTES,
         ID_EPISODE,
         ID_PROFESSIONAL,
         EPIS_COMPLAINT,
         EPIS_DIAGNOSIS,
         EPIS_TESTS,
         EPIS_DRUGS,
         RECOMMENDED,
         FLG_STATUS,
         ADW_LAST_UPDATE,
         ID_PROF_CANCEL,
         DT_CREATION_TSTZ,
         DT_CANCEL_TSTZ,
         RELEASE_FROM,
         DT_FROM,
         DT_UNTIL,
         NOTES_RELEASE,
         FOLLOW_UP_WITH,
         FOLLOW_UP_IN,
         INSTRUCTIONS_DISCUSSED,
         ID_FOLLOW_UP_TYPE,
         ID_EPIS_REPORT,
         ID_PATIENT,
         ID_PENDING_ISSUE,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION,
         FLG_ISSUE_ASSIGN,
         DISCHARGE_INSTRUCTIONS,
         FLG_CSG_PATIENT,
         DT_CSG_PATIENT
         )
      VALUES (
         id_discharge_notes_in,
         id_episode_in,
         id_professional_in,
         epis_complaint_in,
         epis_diagnosis_in,
         epis_tests_in,
         epis_drugs_in,
         recommended_in,
         flg_status_in,
         adw_last_update_in,
         id_prof_cancel_in,
         dt_creation_tstz_in,
         dt_cancel_tstz_in,
         release_from_in,
         dt_from_in,
         dt_until_in,
         notes_release_in,
         follow_up_with_in,
         follow_up_in_in,
         instructions_discussed_in,
         id_follow_up_type_in,
         id_epis_report_in,
         id_patient_in,
         id_pending_issue_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in,
         flg_issue_assign_in,
         discharge_instructions_in,
         flg_csg_patient_in,
         dt_csg_patient_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'DISCHARGE_NOTES');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           IF l_name = 'DNT_EPI_RPT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_REPORT'
               , value_in => id_epis_report_in);
           END IF;
           IF l_name = 'DNT_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'DNT_F_UP_TY_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_FOLLOW_UP_TYPE'
               , value_in => id_follow_up_type_in);
           END IF;
           IF l_name = 'DNT_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'DNT_PENDISSUE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PENDING_ISSUE'
               , value_in => id_pending_issue_in);
           END IF;
           IF l_name = 'DNT_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           IF l_name = 'DNT_PROF_FK2'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_discharge_notes_in IN DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE
      ,
      id_episode_in IN DISCHARGE_NOTES.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN DISCHARGE_NOTES.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      epis_complaint_in IN DISCHARGE_NOTES.EPIS_COMPLAINT%TYPE DEFAULT NULL,
      epis_diagnosis_in IN DISCHARGE_NOTES.EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      epis_tests_in IN DISCHARGE_NOTES.EPIS_TESTS%TYPE DEFAULT NULL,
      epis_drugs_in IN DISCHARGE_NOTES.EPIS_DRUGS%TYPE DEFAULT NULL,
      recommended_in IN DISCHARGE_NOTES.RECOMMENDED%TYPE DEFAULT NULL,
      flg_status_in IN DISCHARGE_NOTES.FLG_STATUS%TYPE DEFAULT NULL,
      adw_last_update_in IN DISCHARGE_NOTES.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      id_prof_cancel_in IN DISCHARGE_NOTES.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN DISCHARGE_NOTES.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DISCHARGE_NOTES.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      release_from_in IN DISCHARGE_NOTES.RELEASE_FROM%TYPE DEFAULT NULL,
      dt_from_in IN DISCHARGE_NOTES.DT_FROM%TYPE DEFAULT NULL,
      dt_until_in IN DISCHARGE_NOTES.DT_UNTIL%TYPE DEFAULT NULL,
      notes_release_in IN DISCHARGE_NOTES.NOTES_RELEASE%TYPE DEFAULT NULL,
      follow_up_with_in IN DISCHARGE_NOTES.FOLLOW_UP_WITH%TYPE DEFAULT NULL,
      follow_up_in_in IN DISCHARGE_NOTES.FOLLOW_UP_IN%TYPE DEFAULT NULL,
      instructions_discussed_in IN DISCHARGE_NOTES.INSTRUCTIONS_DISCUSSED%TYPE DEFAULT NULL,
      id_follow_up_type_in IN DISCHARGE_NOTES.ID_FOLLOW_UP_TYPE%TYPE DEFAULT NULL,
      id_epis_report_in IN DISCHARGE_NOTES.ID_EPIS_REPORT%TYPE DEFAULT NULL,
      id_patient_in IN DISCHARGE_NOTES.ID_PATIENT%TYPE DEFAULT NULL,
      id_pending_issue_in IN DISCHARGE_NOTES.ID_PENDING_ISSUE%TYPE DEFAULT NULL,
      create_user_in IN DISCHARGE_NOTES.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DISCHARGE_NOTES.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DISCHARGE_NOTES.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DISCHARGE_NOTES.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DISCHARGE_NOTES.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DISCHARGE_NOTES.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_issue_assign_in IN DISCHARGE_NOTES.FLG_ISSUE_ASSIGN%TYPE DEFAULT NULL,
      discharge_instructions_in IN DISCHARGE_NOTES.DISCHARGE_INSTRUCTIONS%TYPE DEFAULT NULL,
      flg_csg_patient_in IN DISCHARGE_NOTES.FLG_CSG_PATIENT%TYPE DEFAULT NULL,
      dt_csg_patient_in IN DISCHARGE_NOTES.DT_CSG_PATIENT%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_discharge_notes_in => id_discharge_notes_in
      ,
      id_episode_in => id_episode_in,
      id_professional_in => id_professional_in,
      epis_complaint_in => epis_complaint_in,
      epis_diagnosis_in => epis_diagnosis_in,
      epis_tests_in => epis_tests_in,
      epis_drugs_in => epis_drugs_in,
      recommended_in => recommended_in,
      flg_status_in => flg_status_in,
      adw_last_update_in => adw_last_update_in,
      id_prof_cancel_in => id_prof_cancel_in,
      dt_creation_tstz_in => dt_creation_tstz_in,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      release_from_in => release_from_in,
      dt_from_in => dt_from_in,
      dt_until_in => dt_until_in,
      notes_release_in => notes_release_in,
      follow_up_with_in => follow_up_with_in,
      follow_up_in_in => follow_up_in_in,
      instructions_discussed_in => instructions_discussed_in,
      id_follow_up_type_in => id_follow_up_type_in,
      id_epis_report_in => id_epis_report_in,
      id_patient_in => id_patient_in,
      id_pending_issue_in => id_pending_issue_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      flg_issue_assign_in => flg_issue_assign_in,
      discharge_instructions_in => discharge_instructions_in,
      flg_csg_patient_in => flg_csg_patient_in,
      dt_csg_patient_in => dt_csg_patient_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;

   /*
   START Special logic for handling LOB columns....
   */

   PROCEDURE n_ins_clobs_in_chunks (
      id_discharge_notes_in IN DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE,
      id_episode_in IN DISCHARGE_NOTES.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN DISCHARGE_NOTES.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      epis_complaint_in IN DISCHARGE_NOTES.EPIS_COMPLAINT%TYPE DEFAULT NULL,
      epis_diagnosis_in IN DISCHARGE_NOTES.EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      epis_tests_in IN DISCHARGE_NOTES.EPIS_TESTS%TYPE DEFAULT NULL,
      epis_drugs_in IN DISCHARGE_NOTES.EPIS_DRUGS%TYPE DEFAULT NULL,
      recommended_in IN DISCHARGE_NOTES.RECOMMENDED%TYPE DEFAULT NULL,
      flg_status_in IN DISCHARGE_NOTES.FLG_STATUS%TYPE DEFAULT NULL,
      adw_last_update_in IN DISCHARGE_NOTES.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      id_prof_cancel_in IN DISCHARGE_NOTES.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN DISCHARGE_NOTES.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DISCHARGE_NOTES.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      release_from_in IN DISCHARGE_NOTES.RELEASE_FROM%TYPE DEFAULT NULL,
      dt_from_in IN DISCHARGE_NOTES.DT_FROM%TYPE DEFAULT NULL,
      dt_until_in IN DISCHARGE_NOTES.DT_UNTIL%TYPE DEFAULT NULL,
      notes_release_in IN DISCHARGE_NOTES.NOTES_RELEASE%TYPE DEFAULT NULL,
      follow_up_with_in IN DISCHARGE_NOTES.FOLLOW_UP_WITH%TYPE DEFAULT NULL,
      follow_up_in_in IN DISCHARGE_NOTES.FOLLOW_UP_IN%TYPE DEFAULT NULL,
      instructions_discussed_in IN DISCHARGE_NOTES.INSTRUCTIONS_DISCUSSED%TYPE DEFAULT NULL,
      id_follow_up_type_in IN DISCHARGE_NOTES.ID_FOLLOW_UP_TYPE%TYPE DEFAULT NULL,
      id_epis_report_in IN DISCHARGE_NOTES.ID_EPIS_REPORT%TYPE DEFAULT NULL,
      id_patient_in IN DISCHARGE_NOTES.ID_PATIENT%TYPE DEFAULT NULL,
      id_pending_issue_in IN DISCHARGE_NOTES.ID_PENDING_ISSUE%TYPE DEFAULT NULL,
      create_user_in IN DISCHARGE_NOTES.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DISCHARGE_NOTES.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DISCHARGE_NOTES.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DISCHARGE_NOTES.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DISCHARGE_NOTES.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DISCHARGE_NOTES.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_issue_assign_in IN DISCHARGE_NOTES.FLG_ISSUE_ASSIGN%TYPE DEFAULT NULL,
      flg_csg_patient_in IN DISCHARGE_NOTES.FLG_CSG_PATIENT%TYPE DEFAULT NULL,
      dt_csg_patient_in IN DISCHARGE_NOTES.DT_CSG_PATIENT%TYPE DEFAULT NULL,
      handle_error_in IN BOOLEAN := TRUE,
      clob_columns_in IN varchar2_t,
      clob_pieces_in IN  varchar2_t
   ) IS
        l_DISCHARGE_INSTRUCTIONS clob;
      i                PLS_INTEGER;
      current_column varchar2(30) := '';
   BEGIN
      /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
         variables from pointing to the same temporary CLOB (it creates copies).
         Otherwise, the code could have been written a bit more compactly. */

      FOR i IN clob_columns_in.FIRST .. clob_columns_in.LAST
      LOOP
         /* Even when all clobs are null, DOA must send 1 row so skip it. */
         IF clob_columns_in (i) IS NOT NULL
         THEN
            IF current_column <> clob_columns_in (i) OR current_column IS NULL
            THEN
               current_column := LOWER (clob_columns_in (i));

               CASE current_column
                  WHEN 'discharge_instructions_in'
                  THEN
                     IF l_DISCHARGE_INSTRUCTIONS IS NULL
                     THEN
                       DBMS_LOB.createtemporary (
                         l_DISCHARGE_INSTRUCTIONS, TRUE, DBMS_LOB.CALL);
                     END IF;
               END CASE;
            END IF;

            CASE current_column
              WHEN 'discharge_instructions_in'
              THEN
                  DBMS_LOB.writeappend (l_DISCHARGE_INSTRUCTIONS
                                      , LENGTH (clob_pieces_in (i))
                                      , clob_pieces_in (i)
                                       );
            END CASE;
         END IF;
      END LOOP;

      ins (
         id_discharge_notes_in => id_discharge_notes_in,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         epis_complaint_in => epis_complaint_in,
         epis_diagnosis_in => epis_diagnosis_in,
         epis_tests_in => epis_tests_in,
         epis_drugs_in => epis_drugs_in,
         recommended_in => recommended_in,
         flg_status_in => flg_status_in,
         adw_last_update_in => adw_last_update_in,
         id_prof_cancel_in => id_prof_cancel_in,
         dt_creation_tstz_in => dt_creation_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         release_from_in => release_from_in,
         dt_from_in => dt_from_in,
         dt_until_in => dt_until_in,
         notes_release_in => notes_release_in,
         follow_up_with_in => follow_up_with_in,
         follow_up_in_in => follow_up_in_in,
         instructions_discussed_in => instructions_discussed_in,
         id_follow_up_type_in => id_follow_up_type_in,
         id_epis_report_in => id_epis_report_in,
         id_patient_in => id_patient_in,
         id_pending_issue_in => id_pending_issue_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_issue_assign_in => flg_issue_assign_in,
         discharge_instructions_in => l_DISCHARGE_INSTRUCTIONS,
         flg_csg_patient_in => flg_csg_patient_in,
         dt_csg_patient_in => dt_csg_patient_in,
         handle_error_in => handle_error_in
         );

   END n_ins_clobs_in_chunks;

   PROCEDURE n_upd_clobs_in_chunks (
      id_discharge_notes_in IN DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE,
      id_episode_in IN DISCHARGE_NOTES.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN DISCHARGE_NOTES.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      epis_complaint_in IN DISCHARGE_NOTES.EPIS_COMPLAINT%TYPE DEFAULT NULL,
      epis_diagnosis_in IN DISCHARGE_NOTES.EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      epis_tests_in IN DISCHARGE_NOTES.EPIS_TESTS%TYPE DEFAULT NULL,
      epis_drugs_in IN DISCHARGE_NOTES.EPIS_DRUGS%TYPE DEFAULT NULL,
      recommended_in IN DISCHARGE_NOTES.RECOMMENDED%TYPE DEFAULT NULL,
      flg_status_in IN DISCHARGE_NOTES.FLG_STATUS%TYPE DEFAULT NULL,
      adw_last_update_in IN DISCHARGE_NOTES.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      id_prof_cancel_in IN DISCHARGE_NOTES.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN DISCHARGE_NOTES.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DISCHARGE_NOTES.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      release_from_in IN DISCHARGE_NOTES.RELEASE_FROM%TYPE DEFAULT NULL,
      dt_from_in IN DISCHARGE_NOTES.DT_FROM%TYPE DEFAULT NULL,
      dt_until_in IN DISCHARGE_NOTES.DT_UNTIL%TYPE DEFAULT NULL,
      notes_release_in IN DISCHARGE_NOTES.NOTES_RELEASE%TYPE DEFAULT NULL,
      follow_up_with_in IN DISCHARGE_NOTES.FOLLOW_UP_WITH%TYPE DEFAULT NULL,
      follow_up_in_in IN DISCHARGE_NOTES.FOLLOW_UP_IN%TYPE DEFAULT NULL,
      instructions_discussed_in IN DISCHARGE_NOTES.INSTRUCTIONS_DISCUSSED%TYPE DEFAULT NULL,
      id_follow_up_type_in IN DISCHARGE_NOTES.ID_FOLLOW_UP_TYPE%TYPE DEFAULT NULL,
      id_epis_report_in IN DISCHARGE_NOTES.ID_EPIS_REPORT%TYPE DEFAULT NULL,
      id_patient_in IN DISCHARGE_NOTES.ID_PATIENT%TYPE DEFAULT NULL,
      id_pending_issue_in IN DISCHARGE_NOTES.ID_PENDING_ISSUE%TYPE DEFAULT NULL,
      create_user_in IN DISCHARGE_NOTES.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DISCHARGE_NOTES.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DISCHARGE_NOTES.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DISCHARGE_NOTES.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DISCHARGE_NOTES.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DISCHARGE_NOTES.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_issue_assign_in IN DISCHARGE_NOTES.FLG_ISSUE_ASSIGN%TYPE DEFAULT NULL,
      flg_csg_patient_in IN DISCHARGE_NOTES.FLG_CSG_PATIENT%TYPE DEFAULT NULL,
      dt_csg_patient_in IN DISCHARGE_NOTES.DT_CSG_PATIENT%TYPE DEFAULT NULL,
      ignore_if_null_in IN BOOLEAN := TRUE,
      handle_error_in IN BOOLEAN := TRUE,
      clob_columns_in IN varchar2_t,
      clob_pieces_in IN  varchar2_t
      )
   IS
       l_DISCHARGE_INSTRUCTIONS clob;
      i                PLS_INTEGER;
      current_column varchar2(30) := '';
      l_rows PLS_INTEGER;
   BEGIN

      /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
         variables from pointing to the same temporary CLOB (it creates copies).
         Otherwise, the code could have been written a bit more compactly. */

      FOR i IN clob_columns_in.FIRST .. clob_columns_in.LAST
      LOOP
         /* Even when all clobs are null, DOA must send 1 row so skip it. */
         IF clob_columns_in (i) IS NOT NULL
         THEN
            IF current_column <> clob_columns_in (i) OR current_column IS NULL
            THEN
               current_column := LOWER (clob_columns_in (i));

               CASE current_column
                  WHEN 'discharge_instructions_in'
                  THEN
                    IF l_DISCHARGE_INSTRUCTIONS IS NULL
                    THEN
                      DBMS_LOB.createtemporary (
                         l_DISCHARGE_INSTRUCTIONS, TRUE, DBMS_LOB.CALL);
                    END IF;
               END CASE;
            END IF;

            CASE current_column
              WHEN 'discharge_instructions_in'
              THEN
                  DBMS_LOB.writeappend (l_DISCHARGE_INSTRUCTIONS
                                      , LENGTH (clob_pieces_in (i))
                                      , clob_pieces_in (i)
                                       );
            END CASE;
         END IF;
      END LOOP;

      upd (
         id_discharge_notes_in => id_discharge_notes_in,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         epis_complaint_in => epis_complaint_in,
         epis_diagnosis_in => epis_diagnosis_in,
         epis_tests_in => epis_tests_in,
         epis_drugs_in => epis_drugs_in,
         recommended_in => recommended_in,
         flg_status_in => flg_status_in,
         adw_last_update_in => adw_last_update_in,
         id_prof_cancel_in => id_prof_cancel_in,
         dt_creation_tstz_in => dt_creation_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         release_from_in => release_from_in,
         dt_from_in => dt_from_in,
         dt_until_in => dt_until_in,
         notes_release_in => notes_release_in,
         follow_up_with_in => follow_up_with_in,
         follow_up_in_in => follow_up_in_in,
         instructions_discussed_in => instructions_discussed_in,
         id_follow_up_type_in => id_follow_up_type_in,
         id_epis_report_in => id_epis_report_in,
         id_patient_in => id_patient_in,
         id_pending_issue_in => id_pending_issue_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_issue_assign_in => flg_issue_assign_in,
         discharge_instructions_in => l_DISCHARGE_INSTRUCTIONS,
         flg_csg_patient_in => flg_csg_patient_in,
         dt_csg_patient_in => dt_csg_patient_in,
         handle_error_in => handle_error_in
         );
   END n_upd_clobs_in_chunks;

   PROCEDURE n_upd_ins_clobs_in_chunks (
      id_discharge_notes_in IN DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE,
      id_episode_in IN DISCHARGE_NOTES.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN DISCHARGE_NOTES.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      epis_complaint_in IN DISCHARGE_NOTES.EPIS_COMPLAINT%TYPE DEFAULT NULL,
      epis_diagnosis_in IN DISCHARGE_NOTES.EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      epis_tests_in IN DISCHARGE_NOTES.EPIS_TESTS%TYPE DEFAULT NULL,
      epis_drugs_in IN DISCHARGE_NOTES.EPIS_DRUGS%TYPE DEFAULT NULL,
      recommended_in IN DISCHARGE_NOTES.RECOMMENDED%TYPE DEFAULT NULL,
      flg_status_in IN DISCHARGE_NOTES.FLG_STATUS%TYPE DEFAULT NULL,
      adw_last_update_in IN DISCHARGE_NOTES.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      id_prof_cancel_in IN DISCHARGE_NOTES.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN DISCHARGE_NOTES.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DISCHARGE_NOTES.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      release_from_in IN DISCHARGE_NOTES.RELEASE_FROM%TYPE DEFAULT NULL,
      dt_from_in IN DISCHARGE_NOTES.DT_FROM%TYPE DEFAULT NULL,
      dt_until_in IN DISCHARGE_NOTES.DT_UNTIL%TYPE DEFAULT NULL,
      notes_release_in IN DISCHARGE_NOTES.NOTES_RELEASE%TYPE DEFAULT NULL,
      follow_up_with_in IN DISCHARGE_NOTES.FOLLOW_UP_WITH%TYPE DEFAULT NULL,
      follow_up_in_in IN DISCHARGE_NOTES.FOLLOW_UP_IN%TYPE DEFAULT NULL,
      instructions_discussed_in IN DISCHARGE_NOTES.INSTRUCTIONS_DISCUSSED%TYPE DEFAULT NULL,
      id_follow_up_type_in IN DISCHARGE_NOTES.ID_FOLLOW_UP_TYPE%TYPE DEFAULT NULL,
      id_epis_report_in IN DISCHARGE_NOTES.ID_EPIS_REPORT%TYPE DEFAULT NULL,
      id_patient_in IN DISCHARGE_NOTES.ID_PATIENT%TYPE DEFAULT NULL,
      id_pending_issue_in IN DISCHARGE_NOTES.ID_PENDING_ISSUE%TYPE DEFAULT NULL,
      create_user_in IN DISCHARGE_NOTES.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DISCHARGE_NOTES.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DISCHARGE_NOTES.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DISCHARGE_NOTES.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DISCHARGE_NOTES.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DISCHARGE_NOTES.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_issue_assign_in IN DISCHARGE_NOTES.FLG_ISSUE_ASSIGN%TYPE DEFAULT NULL,
      flg_csg_patient_in IN DISCHARGE_NOTES.FLG_CSG_PATIENT%TYPE DEFAULT NULL,
      dt_csg_patient_in IN DISCHARGE_NOTES.DT_CSG_PATIENT%TYPE DEFAULT NULL,
      ignore_if_null_in IN BOOLEAN DEFAULT TRUE,
      handle_error_in IN BOOLEAN DEFAULT TRUE,
      clob_columns_in IN varchar2_t,
      clob_pieces_in IN  varchar2_t
      )
   IS
   BEGIN
      n_upd_clobs_in_chunks (
         id_discharge_notes_in => id_discharge_notes_in,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         epis_complaint_in => epis_complaint_in,
         epis_diagnosis_in => epis_diagnosis_in,
         epis_tests_in => epis_tests_in,
         epis_drugs_in => epis_drugs_in,
         recommended_in => recommended_in,
         flg_status_in => flg_status_in,
         adw_last_update_in => adw_last_update_in,
         id_prof_cancel_in => id_prof_cancel_in,
         dt_creation_tstz_in => dt_creation_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         release_from_in => release_from_in,
         dt_from_in => dt_from_in,
         dt_until_in => dt_until_in,
         notes_release_in => notes_release_in,
         follow_up_with_in => follow_up_with_in,
         follow_up_in_in => follow_up_in_in,
         instructions_discussed_in => instructions_discussed_in,
         id_follow_up_type_in => id_follow_up_type_in,
         id_epis_report_in => id_epis_report_in,
         id_patient_in => id_patient_in,
         id_pending_issue_in => id_pending_issue_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_issue_assign_in => flg_issue_assign_in,
         flg_csg_patient_in => flg_csg_patient_in,
         dt_csg_patient_in => dt_csg_patient_in,
         clob_columns_in => clob_columns_in ,
         clob_pieces_in => clob_pieces_in ,
         ignore_if_null_in => ignore_if_null_in,
         handle_error_in => handle_error_in
       );

      IF SQL%ROWCOUNT = 0
      THEN
         n_ins_clobs_in_chunks (
            id_discharge_notes_in => id_discharge_notes_in,
            id_episode_in => id_episode_in,
            id_professional_in => id_professional_in,
            epis_complaint_in => epis_complaint_in,
            epis_diagnosis_in => epis_diagnosis_in,
            epis_tests_in => epis_tests_in,
            epis_drugs_in => epis_drugs_in,
            recommended_in => recommended_in,
            flg_status_in => flg_status_in,
            adw_last_update_in => adw_last_update_in,
            id_prof_cancel_in => id_prof_cancel_in,
            dt_creation_tstz_in => dt_creation_tstz_in,
            dt_cancel_tstz_in => dt_cancel_tstz_in,
            release_from_in => release_from_in,
            dt_from_in => dt_from_in,
            dt_until_in => dt_until_in,
            notes_release_in => notes_release_in,
            follow_up_with_in => follow_up_with_in,
            follow_up_in_in => follow_up_in_in,
            instructions_discussed_in => instructions_discussed_in,
            id_follow_up_type_in => id_follow_up_type_in,
            id_epis_report_in => id_epis_report_in,
            id_patient_in => id_patient_in,
            id_pending_issue_in => id_pending_issue_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            flg_issue_assign_in => flg_issue_assign_in,
            flg_csg_patient_in => flg_csg_patient_in,
            dt_csg_patient_in => dt_csg_patient_in,
            clob_columns_in => clob_columns_in ,
            clob_pieces_in => clob_pieces_in ,
            handle_error_in => handle_error_in
         );
      END IF;
   END n_upd_ins_clobs_in_chunks;

   /*
   END Special logic for handling LOB columns.
   */

   PROCEDURE ins (
      rec_in IN DISCHARGE_NOTES%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec DISCHARGE_NOTES%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_DISCHARGE_NOTES := next_key (sequence_in);
      END IF;
      ins (
         id_discharge_notes_in => l_rec.ID_DISCHARGE_NOTES
         ,
         id_episode_in => l_rec.ID_EPISODE,
         id_professional_in => l_rec.ID_PROFESSIONAL,
         epis_complaint_in => l_rec.EPIS_COMPLAINT,
         epis_diagnosis_in => l_rec.EPIS_DIAGNOSIS,
         epis_tests_in => l_rec.EPIS_TESTS,
         epis_drugs_in => l_rec.EPIS_DRUGS,
         recommended_in => l_rec.RECOMMENDED,
         flg_status_in => l_rec.FLG_STATUS,
         adw_last_update_in => l_rec.ADW_LAST_UPDATE,
         id_prof_cancel_in => l_rec.ID_PROF_CANCEL,
         dt_creation_tstz_in => l_rec.DT_CREATION_TSTZ,
         dt_cancel_tstz_in => l_rec.DT_CANCEL_TSTZ,
         release_from_in => l_rec.RELEASE_FROM,
         dt_from_in => l_rec.DT_FROM,
         dt_until_in => l_rec.DT_UNTIL,
         notes_release_in => l_rec.NOTES_RELEASE,
         follow_up_with_in => l_rec.FOLLOW_UP_WITH,
         follow_up_in_in => l_rec.FOLLOW_UP_IN,
         instructions_discussed_in => l_rec.INSTRUCTIONS_DISCUSSED,
         id_follow_up_type_in => l_rec.ID_FOLLOW_UP_TYPE,
         id_epis_report_in => l_rec.ID_EPIS_REPORT,
         id_patient_in => l_rec.ID_PATIENT,
         id_pending_issue_in => l_rec.ID_PENDING_ISSUE,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION,
         flg_issue_assign_in => l_rec.FLG_ISSUE_ASSIGN,
         discharge_instructions_in => l_rec.DISCHARGE_INSTRUCTIONS,
         flg_csg_patient_in => l_rec.FLG_CSG_PATIENT,
         dt_csg_patient_in => l_rec.DT_CSG_PATIENT
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN DISCHARGE_NOTES%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE

   IS
     retval DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_DISCHARGE_NOTES.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_DISCHARGE_NOTES')
           );
   END next_key;

   PROCEDURE ins (
      id_episode_in IN DISCHARGE_NOTES.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN DISCHARGE_NOTES.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      epis_complaint_in IN DISCHARGE_NOTES.EPIS_COMPLAINT%TYPE DEFAULT NULL,
      epis_diagnosis_in IN DISCHARGE_NOTES.EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      epis_tests_in IN DISCHARGE_NOTES.EPIS_TESTS%TYPE DEFAULT NULL,
      epis_drugs_in IN DISCHARGE_NOTES.EPIS_DRUGS%TYPE DEFAULT NULL,
      recommended_in IN DISCHARGE_NOTES.RECOMMENDED%TYPE DEFAULT NULL,
      flg_status_in IN DISCHARGE_NOTES.FLG_STATUS%TYPE DEFAULT NULL,
      adw_last_update_in IN DISCHARGE_NOTES.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      id_prof_cancel_in IN DISCHARGE_NOTES.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN DISCHARGE_NOTES.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DISCHARGE_NOTES.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      release_from_in IN DISCHARGE_NOTES.RELEASE_FROM%TYPE DEFAULT NULL,
      dt_from_in IN DISCHARGE_NOTES.DT_FROM%TYPE DEFAULT NULL,
      dt_until_in IN DISCHARGE_NOTES.DT_UNTIL%TYPE DEFAULT NULL,
      notes_release_in IN DISCHARGE_NOTES.NOTES_RELEASE%TYPE DEFAULT NULL,
      follow_up_with_in IN DISCHARGE_NOTES.FOLLOW_UP_WITH%TYPE DEFAULT NULL,
      follow_up_in_in IN DISCHARGE_NOTES.FOLLOW_UP_IN%TYPE DEFAULT NULL,
      instructions_discussed_in IN DISCHARGE_NOTES.INSTRUCTIONS_DISCUSSED%TYPE DEFAULT NULL,
      id_follow_up_type_in IN DISCHARGE_NOTES.ID_FOLLOW_UP_TYPE%TYPE DEFAULT NULL,
      id_epis_report_in IN DISCHARGE_NOTES.ID_EPIS_REPORT%TYPE DEFAULT NULL,
      id_patient_in IN DISCHARGE_NOTES.ID_PATIENT%TYPE DEFAULT NULL,
      id_pending_issue_in IN DISCHARGE_NOTES.ID_PENDING_ISSUE%TYPE DEFAULT NULL,
      create_user_in IN DISCHARGE_NOTES.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DISCHARGE_NOTES.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DISCHARGE_NOTES.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DISCHARGE_NOTES.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DISCHARGE_NOTES.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DISCHARGE_NOTES.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_issue_assign_in IN DISCHARGE_NOTES.FLG_ISSUE_ASSIGN%TYPE DEFAULT NULL,
      discharge_instructions_in IN DISCHARGE_NOTES.DISCHARGE_INSTRUCTIONS%TYPE DEFAULT NULL,
      flg_csg_patient_in IN DISCHARGE_NOTES.FLG_CSG_PATIENT%TYPE DEFAULT NULL,
      dt_csg_patient_in IN DISCHARGE_NOTES.DT_CSG_PATIENT%TYPE DEFAULT NULL,
      id_discharge_notes_out IN OUT DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE := next_key;
   BEGIN
      ins (
         id_discharge_notes_in => l_pky,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         epis_complaint_in => epis_complaint_in,
         epis_diagnosis_in => epis_diagnosis_in,
         epis_tests_in => epis_tests_in,
         epis_drugs_in => epis_drugs_in,
         recommended_in => recommended_in,
         flg_status_in => flg_status_in,
         adw_last_update_in => adw_last_update_in,
         id_prof_cancel_in => id_prof_cancel_in,
         dt_creation_tstz_in => dt_creation_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         release_from_in => release_from_in,
         dt_from_in => dt_from_in,
         dt_until_in => dt_until_in,
         notes_release_in => notes_release_in,
         follow_up_with_in => follow_up_with_in,
         follow_up_in_in => follow_up_in_in,
         instructions_discussed_in => instructions_discussed_in,
         id_follow_up_type_in => id_follow_up_type_in,
         id_epis_report_in => id_epis_report_in,
         id_patient_in => id_patient_in,
         id_pending_issue_in => id_pending_issue_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_issue_assign_in => flg_issue_assign_in,
         discharge_instructions_in => discharge_instructions_in,
         flg_csg_patient_in => flg_csg_patient_in,
         dt_csg_patient_in => dt_csg_patient_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_discharge_notes_out := l_pky;
   END ins;

   PROCEDURE ins (
      id_episode_in IN DISCHARGE_NOTES.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN DISCHARGE_NOTES.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      epis_complaint_in IN DISCHARGE_NOTES.EPIS_COMPLAINT%TYPE DEFAULT NULL,
      epis_diagnosis_in IN DISCHARGE_NOTES.EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      epis_tests_in IN DISCHARGE_NOTES.EPIS_TESTS%TYPE DEFAULT NULL,
      epis_drugs_in IN DISCHARGE_NOTES.EPIS_DRUGS%TYPE DEFAULT NULL,
      recommended_in IN DISCHARGE_NOTES.RECOMMENDED%TYPE DEFAULT NULL,
      flg_status_in IN DISCHARGE_NOTES.FLG_STATUS%TYPE DEFAULT NULL,
      adw_last_update_in IN DISCHARGE_NOTES.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      id_prof_cancel_in IN DISCHARGE_NOTES.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN DISCHARGE_NOTES.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DISCHARGE_NOTES.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      release_from_in IN DISCHARGE_NOTES.RELEASE_FROM%TYPE DEFAULT NULL,
      dt_from_in IN DISCHARGE_NOTES.DT_FROM%TYPE DEFAULT NULL,
      dt_until_in IN DISCHARGE_NOTES.DT_UNTIL%TYPE DEFAULT NULL,
      notes_release_in IN DISCHARGE_NOTES.NOTES_RELEASE%TYPE DEFAULT NULL,
      follow_up_with_in IN DISCHARGE_NOTES.FOLLOW_UP_WITH%TYPE DEFAULT NULL,
      follow_up_in_in IN DISCHARGE_NOTES.FOLLOW_UP_IN%TYPE DEFAULT NULL,
      instructions_discussed_in IN DISCHARGE_NOTES.INSTRUCTIONS_DISCUSSED%TYPE DEFAULT NULL,
      id_follow_up_type_in IN DISCHARGE_NOTES.ID_FOLLOW_UP_TYPE%TYPE DEFAULT NULL,
      id_epis_report_in IN DISCHARGE_NOTES.ID_EPIS_REPORT%TYPE DEFAULT NULL,
      id_patient_in IN DISCHARGE_NOTES.ID_PATIENT%TYPE DEFAULT NULL,
      id_pending_issue_in IN DISCHARGE_NOTES.ID_PENDING_ISSUE%TYPE DEFAULT NULL,
      create_user_in IN DISCHARGE_NOTES.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DISCHARGE_NOTES.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DISCHARGE_NOTES.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DISCHARGE_NOTES.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DISCHARGE_NOTES.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DISCHARGE_NOTES.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_issue_assign_in IN DISCHARGE_NOTES.FLG_ISSUE_ASSIGN%TYPE DEFAULT NULL,
      discharge_instructions_in IN DISCHARGE_NOTES.DISCHARGE_INSTRUCTIONS%TYPE DEFAULT NULL,
      flg_csg_patient_in IN DISCHARGE_NOTES.FLG_CSG_PATIENT%TYPE DEFAULT NULL,
      dt_csg_patient_in IN DISCHARGE_NOTES.DT_CSG_PATIENT%TYPE DEFAULT NULL,
      id_discharge_notes_out IN OUT DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      id_episode_in => id_episode_in,
      id_professional_in => id_professional_in,
      epis_complaint_in => epis_complaint_in,
      epis_diagnosis_in => epis_diagnosis_in,
      epis_tests_in => epis_tests_in,
      epis_drugs_in => epis_drugs_in,
      recommended_in => recommended_in,
      flg_status_in => flg_status_in,
      adw_last_update_in => adw_last_update_in,
      id_prof_cancel_in => id_prof_cancel_in,
      dt_creation_tstz_in => dt_creation_tstz_in,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      release_from_in => release_from_in,
      dt_from_in => dt_from_in,
      dt_until_in => dt_until_in,
      notes_release_in => notes_release_in,
      follow_up_with_in => follow_up_with_in,
      follow_up_in_in => follow_up_in_in,
      instructions_discussed_in => instructions_discussed_in,
      id_follow_up_type_in => id_follow_up_type_in,
      id_epis_report_in => id_epis_report_in,
      id_patient_in => id_patient_in,
      id_pending_issue_in => id_pending_issue_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      flg_issue_assign_in => flg_issue_assign_in,
      discharge_instructions_in => discharge_instructions_in,
      flg_csg_patient_in => flg_csg_patient_in,
      dt_csg_patient_in => dt_csg_patient_in,
      id_discharge_notes_out => id_discharge_notes_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      id_episode_in IN DISCHARGE_NOTES.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN DISCHARGE_NOTES.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      epis_complaint_in IN DISCHARGE_NOTES.EPIS_COMPLAINT%TYPE DEFAULT NULL,
      epis_diagnosis_in IN DISCHARGE_NOTES.EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      epis_tests_in IN DISCHARGE_NOTES.EPIS_TESTS%TYPE DEFAULT NULL,
      epis_drugs_in IN DISCHARGE_NOTES.EPIS_DRUGS%TYPE DEFAULT NULL,
      recommended_in IN DISCHARGE_NOTES.RECOMMENDED%TYPE DEFAULT NULL,
      flg_status_in IN DISCHARGE_NOTES.FLG_STATUS%TYPE DEFAULT NULL,
      adw_last_update_in IN DISCHARGE_NOTES.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      id_prof_cancel_in IN DISCHARGE_NOTES.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN DISCHARGE_NOTES.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DISCHARGE_NOTES.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      release_from_in IN DISCHARGE_NOTES.RELEASE_FROM%TYPE DEFAULT NULL,
      dt_from_in IN DISCHARGE_NOTES.DT_FROM%TYPE DEFAULT NULL,
      dt_until_in IN DISCHARGE_NOTES.DT_UNTIL%TYPE DEFAULT NULL,
      notes_release_in IN DISCHARGE_NOTES.NOTES_RELEASE%TYPE DEFAULT NULL,
      follow_up_with_in IN DISCHARGE_NOTES.FOLLOW_UP_WITH%TYPE DEFAULT NULL,
      follow_up_in_in IN DISCHARGE_NOTES.FOLLOW_UP_IN%TYPE DEFAULT NULL,
      instructions_discussed_in IN DISCHARGE_NOTES.INSTRUCTIONS_DISCUSSED%TYPE DEFAULT NULL,
      id_follow_up_type_in IN DISCHARGE_NOTES.ID_FOLLOW_UP_TYPE%TYPE DEFAULT NULL,
      id_epis_report_in IN DISCHARGE_NOTES.ID_EPIS_REPORT%TYPE DEFAULT NULL,
      id_patient_in IN DISCHARGE_NOTES.ID_PATIENT%TYPE DEFAULT NULL,
      id_pending_issue_in IN DISCHARGE_NOTES.ID_PENDING_ISSUE%TYPE DEFAULT NULL,
      create_user_in IN DISCHARGE_NOTES.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DISCHARGE_NOTES.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DISCHARGE_NOTES.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DISCHARGE_NOTES.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DISCHARGE_NOTES.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DISCHARGE_NOTES.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_issue_assign_in IN DISCHARGE_NOTES.FLG_ISSUE_ASSIGN%TYPE DEFAULT NULL,
      discharge_instructions_in IN DISCHARGE_NOTES.DISCHARGE_INSTRUCTIONS%TYPE DEFAULT NULL,
      flg_csg_patient_in IN DISCHARGE_NOTES.FLG_CSG_PATIENT%TYPE DEFAULT NULL,
      dt_csg_patient_in IN DISCHARGE_NOTES.DT_CSG_PATIENT%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE
   IS
        l_pky DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE := next_key;
   BEGIN
      ins (
         id_discharge_notes_in => l_pky,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         epis_complaint_in => epis_complaint_in,
         epis_diagnosis_in => epis_diagnosis_in,
         epis_tests_in => epis_tests_in,
         epis_drugs_in => epis_drugs_in,
         recommended_in => recommended_in,
         flg_status_in => flg_status_in,
         adw_last_update_in => adw_last_update_in,
         id_prof_cancel_in => id_prof_cancel_in,
         dt_creation_tstz_in => dt_creation_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         release_from_in => release_from_in,
         dt_from_in => dt_from_in,
         dt_until_in => dt_until_in,
         notes_release_in => notes_release_in,
         follow_up_with_in => follow_up_with_in,
         follow_up_in_in => follow_up_in_in,
         instructions_discussed_in => instructions_discussed_in,
         id_follow_up_type_in => id_follow_up_type_in,
         id_epis_report_in => id_epis_report_in,
         id_patient_in => id_patient_in,
         id_pending_issue_in => id_pending_issue_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_issue_assign_in => flg_issue_assign_in,
         discharge_instructions_in => discharge_instructions_in,
         flg_csg_patient_in => flg_csg_patient_in,
         dt_csg_patient_in => dt_csg_patient_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      id_episode_in IN DISCHARGE_NOTES.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN DISCHARGE_NOTES.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      epis_complaint_in IN DISCHARGE_NOTES.EPIS_COMPLAINT%TYPE DEFAULT NULL,
      epis_diagnosis_in IN DISCHARGE_NOTES.EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      epis_tests_in IN DISCHARGE_NOTES.EPIS_TESTS%TYPE DEFAULT NULL,
      epis_drugs_in IN DISCHARGE_NOTES.EPIS_DRUGS%TYPE DEFAULT NULL,
      recommended_in IN DISCHARGE_NOTES.RECOMMENDED%TYPE DEFAULT NULL,
      flg_status_in IN DISCHARGE_NOTES.FLG_STATUS%TYPE DEFAULT NULL,
      adw_last_update_in IN DISCHARGE_NOTES.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      id_prof_cancel_in IN DISCHARGE_NOTES.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN DISCHARGE_NOTES.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DISCHARGE_NOTES.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      release_from_in IN DISCHARGE_NOTES.RELEASE_FROM%TYPE DEFAULT NULL,
      dt_from_in IN DISCHARGE_NOTES.DT_FROM%TYPE DEFAULT NULL,
      dt_until_in IN DISCHARGE_NOTES.DT_UNTIL%TYPE DEFAULT NULL,
      notes_release_in IN DISCHARGE_NOTES.NOTES_RELEASE%TYPE DEFAULT NULL,
      follow_up_with_in IN DISCHARGE_NOTES.FOLLOW_UP_WITH%TYPE DEFAULT NULL,
      follow_up_in_in IN DISCHARGE_NOTES.FOLLOW_UP_IN%TYPE DEFAULT NULL,
      instructions_discussed_in IN DISCHARGE_NOTES.INSTRUCTIONS_DISCUSSED%TYPE DEFAULT NULL,
      id_follow_up_type_in IN DISCHARGE_NOTES.ID_FOLLOW_UP_TYPE%TYPE DEFAULT NULL,
      id_epis_report_in IN DISCHARGE_NOTES.ID_EPIS_REPORT%TYPE DEFAULT NULL,
      id_patient_in IN DISCHARGE_NOTES.ID_PATIENT%TYPE DEFAULT NULL,
      id_pending_issue_in IN DISCHARGE_NOTES.ID_PENDING_ISSUE%TYPE DEFAULT NULL,
      create_user_in IN DISCHARGE_NOTES.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DISCHARGE_NOTES.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DISCHARGE_NOTES.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DISCHARGE_NOTES.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DISCHARGE_NOTES.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DISCHARGE_NOTES.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_issue_assign_in IN DISCHARGE_NOTES.FLG_ISSUE_ASSIGN%TYPE DEFAULT NULL,
      discharge_instructions_in IN DISCHARGE_NOTES.DISCHARGE_INSTRUCTIONS%TYPE DEFAULT NULL,
      flg_csg_patient_in IN DISCHARGE_NOTES.FLG_CSG_PATIENT%TYPE DEFAULT NULL,
      dt_csg_patient_in IN DISCHARGE_NOTES.DT_CSG_PATIENT%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE
   IS
        l_pky DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_discharge_notes_in => l_pky,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         epis_complaint_in => epis_complaint_in,
         epis_diagnosis_in => epis_diagnosis_in,
         epis_tests_in => epis_tests_in,
         epis_drugs_in => epis_drugs_in,
         recommended_in => recommended_in,
         flg_status_in => flg_status_in,
         adw_last_update_in => adw_last_update_in,
         id_prof_cancel_in => id_prof_cancel_in,
         dt_creation_tstz_in => dt_creation_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         release_from_in => release_from_in,
         dt_from_in => dt_from_in,
         dt_until_in => dt_until_in,
         notes_release_in => notes_release_in,
         follow_up_with_in => follow_up_with_in,
         follow_up_in_in => follow_up_in_in,
         instructions_discussed_in => instructions_discussed_in,
         id_follow_up_type_in => id_follow_up_type_in,
         id_epis_report_in => id_epis_report_in,
         id_patient_in => id_patient_in,
         id_pending_issue_in => id_pending_issue_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_issue_assign_in => flg_issue_assign_in,
         discharge_instructions_in => discharge_instructions_in,
         flg_csg_patient_in => flg_csg_patient_in,
         dt_csg_patient_in => dt_csg_patient_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      id_episode_in IN DISCHARGE_NOTES.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN DISCHARGE_NOTES.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      epis_complaint_in IN DISCHARGE_NOTES.EPIS_COMPLAINT%TYPE DEFAULT NULL,
      epis_diagnosis_in IN DISCHARGE_NOTES.EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      epis_tests_in IN DISCHARGE_NOTES.EPIS_TESTS%TYPE DEFAULT NULL,
      epis_drugs_in IN DISCHARGE_NOTES.EPIS_DRUGS%TYPE DEFAULT NULL,
      recommended_in IN DISCHARGE_NOTES.RECOMMENDED%TYPE DEFAULT NULL,
      flg_status_in IN DISCHARGE_NOTES.FLG_STATUS%TYPE DEFAULT NULL,
      adw_last_update_in IN DISCHARGE_NOTES.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      id_prof_cancel_in IN DISCHARGE_NOTES.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN DISCHARGE_NOTES.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DISCHARGE_NOTES.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      release_from_in IN DISCHARGE_NOTES.RELEASE_FROM%TYPE DEFAULT NULL,
      dt_from_in IN DISCHARGE_NOTES.DT_FROM%TYPE DEFAULT NULL,
      dt_until_in IN DISCHARGE_NOTES.DT_UNTIL%TYPE DEFAULT NULL,
      notes_release_in IN DISCHARGE_NOTES.NOTES_RELEASE%TYPE DEFAULT NULL,
      follow_up_with_in IN DISCHARGE_NOTES.FOLLOW_UP_WITH%TYPE DEFAULT NULL,
      follow_up_in_in IN DISCHARGE_NOTES.FOLLOW_UP_IN%TYPE DEFAULT NULL,
      instructions_discussed_in IN DISCHARGE_NOTES.INSTRUCTIONS_DISCUSSED%TYPE DEFAULT NULL,
      id_follow_up_type_in IN DISCHARGE_NOTES.ID_FOLLOW_UP_TYPE%TYPE DEFAULT NULL,
      id_epis_report_in IN DISCHARGE_NOTES.ID_EPIS_REPORT%TYPE DEFAULT NULL,
      id_patient_in IN DISCHARGE_NOTES.ID_PATIENT%TYPE DEFAULT NULL,
      id_pending_issue_in IN DISCHARGE_NOTES.ID_PENDING_ISSUE%TYPE DEFAULT NULL,
      create_user_in IN DISCHARGE_NOTES.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DISCHARGE_NOTES.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DISCHARGE_NOTES.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DISCHARGE_NOTES.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DISCHARGE_NOTES.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DISCHARGE_NOTES.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_issue_assign_in IN DISCHARGE_NOTES.FLG_ISSUE_ASSIGN%TYPE DEFAULT NULL,
      discharge_instructions_in IN DISCHARGE_NOTES.DISCHARGE_INSTRUCTIONS%TYPE DEFAULT NULL,
      flg_csg_patient_in IN DISCHARGE_NOTES.FLG_CSG_PATIENT%TYPE DEFAULT NULL,
      dt_csg_patient_in IN DISCHARGE_NOTES.DT_CSG_PATIENT%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE := next_key;
   BEGIN
      ins (
         id_discharge_notes_in => l_pky,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         epis_complaint_in => epis_complaint_in,
         epis_diagnosis_in => epis_diagnosis_in,
         epis_tests_in => epis_tests_in,
         epis_drugs_in => epis_drugs_in,
         recommended_in => recommended_in,
         flg_status_in => flg_status_in,
         adw_last_update_in => adw_last_update_in,
         id_prof_cancel_in => id_prof_cancel_in,
         dt_creation_tstz_in => dt_creation_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         release_from_in => release_from_in,
         dt_from_in => dt_from_in,
         dt_until_in => dt_until_in,
         notes_release_in => notes_release_in,
         follow_up_with_in => follow_up_with_in,
         follow_up_in_in => follow_up_in_in,
         instructions_discussed_in => instructions_discussed_in,
         id_follow_up_type_in => id_follow_up_type_in,
         id_epis_report_in => id_epis_report_in,
         id_patient_in => id_patient_in,
         id_pending_issue_in => id_pending_issue_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_issue_assign_in => flg_issue_assign_in,
         discharge_instructions_in => discharge_instructions_in,
         flg_csg_patient_in => flg_csg_patient_in,
         dt_csg_patient_in => dt_csg_patient_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      id_episode_in IN DISCHARGE_NOTES.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN DISCHARGE_NOTES.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      epis_complaint_in IN DISCHARGE_NOTES.EPIS_COMPLAINT%TYPE DEFAULT NULL,
      epis_diagnosis_in IN DISCHARGE_NOTES.EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      epis_tests_in IN DISCHARGE_NOTES.EPIS_TESTS%TYPE DEFAULT NULL,
      epis_drugs_in IN DISCHARGE_NOTES.EPIS_DRUGS%TYPE DEFAULT NULL,
      recommended_in IN DISCHARGE_NOTES.RECOMMENDED%TYPE DEFAULT NULL,
      flg_status_in IN DISCHARGE_NOTES.FLG_STATUS%TYPE DEFAULT NULL,
      adw_last_update_in IN DISCHARGE_NOTES.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      id_prof_cancel_in IN DISCHARGE_NOTES.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN DISCHARGE_NOTES.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DISCHARGE_NOTES.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      release_from_in IN DISCHARGE_NOTES.RELEASE_FROM%TYPE DEFAULT NULL,
      dt_from_in IN DISCHARGE_NOTES.DT_FROM%TYPE DEFAULT NULL,
      dt_until_in IN DISCHARGE_NOTES.DT_UNTIL%TYPE DEFAULT NULL,
      notes_release_in IN DISCHARGE_NOTES.NOTES_RELEASE%TYPE DEFAULT NULL,
      follow_up_with_in IN DISCHARGE_NOTES.FOLLOW_UP_WITH%TYPE DEFAULT NULL,
      follow_up_in_in IN DISCHARGE_NOTES.FOLLOW_UP_IN%TYPE DEFAULT NULL,
      instructions_discussed_in IN DISCHARGE_NOTES.INSTRUCTIONS_DISCUSSED%TYPE DEFAULT NULL,
      id_follow_up_type_in IN DISCHARGE_NOTES.ID_FOLLOW_UP_TYPE%TYPE DEFAULT NULL,
      id_epis_report_in IN DISCHARGE_NOTES.ID_EPIS_REPORT%TYPE DEFAULT NULL,
      id_patient_in IN DISCHARGE_NOTES.ID_PATIENT%TYPE DEFAULT NULL,
      id_pending_issue_in IN DISCHARGE_NOTES.ID_PENDING_ISSUE%TYPE DEFAULT NULL,
      create_user_in IN DISCHARGE_NOTES.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DISCHARGE_NOTES.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DISCHARGE_NOTES.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DISCHARGE_NOTES.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DISCHARGE_NOTES.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DISCHARGE_NOTES.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_issue_assign_in IN DISCHARGE_NOTES.FLG_ISSUE_ASSIGN%TYPE DEFAULT NULL,
      discharge_instructions_in IN DISCHARGE_NOTES.DISCHARGE_INSTRUCTIONS%TYPE DEFAULT NULL,
      flg_csg_patient_in IN DISCHARGE_NOTES.FLG_CSG_PATIENT%TYPE DEFAULT NULL,
      dt_csg_patient_in IN DISCHARGE_NOTES.DT_CSG_PATIENT%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_discharge_notes_in => l_pky,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         epis_complaint_in => epis_complaint_in,
         epis_diagnosis_in => epis_diagnosis_in,
         epis_tests_in => epis_tests_in,
         epis_drugs_in => epis_drugs_in,
         recommended_in => recommended_in,
         flg_status_in => flg_status_in,
         adw_last_update_in => adw_last_update_in,
         id_prof_cancel_in => id_prof_cancel_in,
         dt_creation_tstz_in => dt_creation_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         release_from_in => release_from_in,
         dt_from_in => dt_from_in,
         dt_until_in => dt_until_in,
         notes_release_in => notes_release_in,
         follow_up_with_in => follow_up_with_in,
         follow_up_in_in => follow_up_in_in,
         instructions_discussed_in => instructions_discussed_in,
         id_follow_up_type_in => id_follow_up_type_in,
         id_epis_report_in => id_epis_report_in,
         id_patient_in => id_patient_in,
         id_pending_issue_in => id_pending_issue_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_issue_assign_in => flg_issue_assign_in,
         discharge_instructions_in => discharge_instructions_in,
         flg_csg_patient_in => flg_csg_patient_in,
         dt_csg_patient_in => dt_csg_patient_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN DISCHARGE_NOTES_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
       FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO DISCHARGE_NOTES (
               ID_DISCHARGE_NOTES,
               ID_EPISODE,
               ID_PROFESSIONAL,
               EPIS_COMPLAINT,
               EPIS_DIAGNOSIS,
               EPIS_TESTS,
               EPIS_DRUGS,
               RECOMMENDED,
               FLG_STATUS,
               ADW_LAST_UPDATE,
               ID_PROF_CANCEL,
               DT_CREATION_TSTZ,
               DT_CANCEL_TSTZ,
               RELEASE_FROM,
               DT_FROM,
               DT_UNTIL,
               NOTES_RELEASE,
               FOLLOW_UP_WITH,
               FOLLOW_UP_IN,
               INSTRUCTIONS_DISCUSSED,
               ID_FOLLOW_UP_TYPE,
               ID_EPIS_REPORT,
               ID_PATIENT,
               ID_PENDING_ISSUE,
               CREATE_USER,
               CREATE_TIME,
               CREATE_INSTITUTION,
               UPDATE_USER,
               UPDATE_TIME,
               UPDATE_INSTITUTION,
               FLG_ISSUE_ASSIGN,
               DISCHARGE_INSTRUCTIONS,
               FLG_CSG_PATIENT,
               DT_CSG_PATIENT
               )
            VALUES (
               rows_in(indx).ID_DISCHARGE_NOTES,
               rows_in(indx).ID_EPISODE,
               rows_in(indx).ID_PROFESSIONAL,
               rows_in(indx).EPIS_COMPLAINT,
               rows_in(indx).EPIS_DIAGNOSIS,
               rows_in(indx).EPIS_TESTS,
               rows_in(indx).EPIS_DRUGS,
               rows_in(indx).RECOMMENDED,
               rows_in(indx).FLG_STATUS,
               rows_in(indx).ADW_LAST_UPDATE,
               rows_in(indx).ID_PROF_CANCEL,
               rows_in(indx).DT_CREATION_TSTZ,
               rows_in(indx).DT_CANCEL_TSTZ,
               rows_in(indx).RELEASE_FROM,
               rows_in(indx).DT_FROM,
               rows_in(indx).DT_UNTIL,
               rows_in(indx).NOTES_RELEASE,
               rows_in(indx).FOLLOW_UP_WITH,
               rows_in(indx).FOLLOW_UP_IN,
               rows_in(indx).INSTRUCTIONS_DISCUSSED,
               rows_in(indx).ID_FOLLOW_UP_TYPE,
               rows_in(indx).ID_EPIS_REPORT,
               rows_in(indx).ID_PATIENT,
               rows_in(indx).ID_PENDING_ISSUE,
               rows_in(indx).CREATE_USER,
               rows_in(indx).CREATE_TIME,
               rows_in(indx).CREATE_INSTITUTION,
               rows_in(indx).UPDATE_USER,
               rows_in(indx).UPDATE_TIME,
               rows_in(indx).UPDATE_INSTITUTION,
               rows_in(indx).FLG_ISSUE_ASSIGN,
               rows_in(indx).DISCHARGE_INSTRUCTIONS,
               rows_in(indx).FLG_CSG_PATIENT,
               rows_in(indx).DT_CSG_PATIENT
               ) RETURNING ROWID BULK COLLECT INTO rows_out;

      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQLERRM (-SQL%BULK_EXCEPTIONS (indx).ERROR_CODE)
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_DISCHARGE_NOTES _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_DISCHARGE_NOTES
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPISODE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_EPISODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROFESSIONAL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROFESSIONAL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'EPIS_COMPLAINT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).EPIS_COMPLAINT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'EPIS_DIAGNOSIS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).EPIS_DIAGNOSIS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'EPIS_TESTS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).EPIS_TESTS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'EPIS_DRUGS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).EPIS_DRUGS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'RECOMMENDED _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).RECOMMENDED
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATUS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_STATUS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ADW_LAST_UPDATE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ADW_LAST_UPDATE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_CANCEL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROF_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CREATION_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_CREATION_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CANCEL_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_CANCEL_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'RELEASE_FROM _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).RELEASE_FROM
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_FROM _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_FROM
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_UNTIL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_UNTIL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES_RELEASE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NOTES_RELEASE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FOLLOW_UP_WITH _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FOLLOW_UP_WITH
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FOLLOW_UP_IN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FOLLOW_UP_IN
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'INSTRUCTIONS_DISCUSSED _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).INSTRUCTIONS_DISCUSSED
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_FOLLOW_UP_TYPE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_FOLLOW_UP_TYPE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPIS_REPORT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_EPIS_REPORT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PATIENT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PATIENT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PENDING_ISSUE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PENDING_ISSUE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_ISSUE_ASSIGN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_ISSUE_ASSIGN
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_CSG_PATIENT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_CSG_PATIENT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CSG_PATIENT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_CSG_PATIENT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'DISCHARGE_NOTES'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN DISCHARGE_NOTES_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_discharge_notes_in IN DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE,
      id_episode_in IN DISCHARGE_NOTES.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_professional_in IN DISCHARGE_NOTES.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      epis_complaint_in IN DISCHARGE_NOTES.EPIS_COMPLAINT%TYPE DEFAULT NULL,
      EPIS_COMPLAINT_nin IN BOOLEAN := TRUE,
      epis_diagnosis_in IN DISCHARGE_NOTES.EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      EPIS_DIAGNOSIS_nin IN BOOLEAN := TRUE,
      epis_tests_in IN DISCHARGE_NOTES.EPIS_TESTS%TYPE DEFAULT NULL,
      EPIS_TESTS_nin IN BOOLEAN := TRUE,
      epis_drugs_in IN DISCHARGE_NOTES.EPIS_DRUGS%TYPE DEFAULT NULL,
      EPIS_DRUGS_nin IN BOOLEAN := TRUE,
      recommended_in IN DISCHARGE_NOTES.RECOMMENDED%TYPE DEFAULT NULL,
      RECOMMENDED_nin IN BOOLEAN := TRUE,
      flg_status_in IN DISCHARGE_NOTES.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN DISCHARGE_NOTES.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN DISCHARGE_NOTES.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      dt_creation_tstz_in IN DISCHARGE_NOTES.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      DT_CREATION_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN DISCHARGE_NOTES.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      release_from_in IN DISCHARGE_NOTES.RELEASE_FROM%TYPE DEFAULT NULL,
      RELEASE_FROM_nin IN BOOLEAN := TRUE,
      dt_from_in IN DISCHARGE_NOTES.DT_FROM%TYPE DEFAULT NULL,
      DT_FROM_nin IN BOOLEAN := TRUE,
      dt_until_in IN DISCHARGE_NOTES.DT_UNTIL%TYPE DEFAULT NULL,
      DT_UNTIL_nin IN BOOLEAN := TRUE,
      notes_release_in IN DISCHARGE_NOTES.NOTES_RELEASE%TYPE DEFAULT NULL,
      NOTES_RELEASE_nin IN BOOLEAN := TRUE,
      follow_up_with_in IN DISCHARGE_NOTES.FOLLOW_UP_WITH%TYPE DEFAULT NULL,
      FOLLOW_UP_WITH_nin IN BOOLEAN := TRUE,
      follow_up_in_in IN DISCHARGE_NOTES.FOLLOW_UP_IN%TYPE DEFAULT NULL,
      FOLLOW_UP_IN_nin IN BOOLEAN := TRUE,
      instructions_discussed_in IN DISCHARGE_NOTES.INSTRUCTIONS_DISCUSSED%TYPE DEFAULT NULL,
      INSTRUCTIONS_DISCUSSED_nin IN BOOLEAN := TRUE,
      id_follow_up_type_in IN DISCHARGE_NOTES.ID_FOLLOW_UP_TYPE%TYPE DEFAULT NULL,
      ID_FOLLOW_UP_TYPE_nin IN BOOLEAN := TRUE,
      id_epis_report_in IN DISCHARGE_NOTES.ID_EPIS_REPORT%TYPE DEFAULT NULL,
      ID_EPIS_REPORT_nin IN BOOLEAN := TRUE,
      id_patient_in IN DISCHARGE_NOTES.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_pending_issue_in IN DISCHARGE_NOTES.ID_PENDING_ISSUE%TYPE DEFAULT NULL,
      ID_PENDING_ISSUE_nin IN BOOLEAN := TRUE,
      create_user_in IN DISCHARGE_NOTES.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN DISCHARGE_NOTES.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN DISCHARGE_NOTES.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN DISCHARGE_NOTES.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN DISCHARGE_NOTES.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN DISCHARGE_NOTES.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_issue_assign_in IN DISCHARGE_NOTES.FLG_ISSUE_ASSIGN%TYPE DEFAULT NULL,
      FLG_ISSUE_ASSIGN_nin IN BOOLEAN := TRUE,
      discharge_instructions_in IN DISCHARGE_NOTES.DISCHARGE_INSTRUCTIONS%TYPE DEFAULT NULL,
      DISCHARGE_INSTRUCTIONS_nin IN BOOLEAN := TRUE,
      flg_csg_patient_in IN DISCHARGE_NOTES.FLG_CSG_PATIENT%TYPE DEFAULT NULL,
      FLG_CSG_PATIENT_nin IN BOOLEAN := TRUE,
      dt_csg_patient_in IN DISCHARGE_NOTES.DT_CSG_PATIENT%TYPE DEFAULT NULL,
      DT_CSG_PATIENT_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_EPISODE_n NUMBER(1);
   l_ID_PROFESSIONAL_n NUMBER(1);
   l_EPIS_COMPLAINT_n NUMBER(1);
   l_EPIS_DIAGNOSIS_n NUMBER(1);
   l_EPIS_TESTS_n NUMBER(1);
   l_EPIS_DRUGS_n NUMBER(1);
   l_RECOMMENDED_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_ADW_LAST_UPDATE_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_DT_CREATION_TSTZ_n NUMBER(1);
   l_DT_CANCEL_TSTZ_n NUMBER(1);
   l_RELEASE_FROM_n NUMBER(1);
   l_DT_FROM_n NUMBER(1);
   l_DT_UNTIL_n NUMBER(1);
   l_NOTES_RELEASE_n NUMBER(1);
   l_FOLLOW_UP_WITH_n NUMBER(1);
   l_FOLLOW_UP_IN_n NUMBER(1);
   l_INSTRUCTIONS_DISCUSSED_n NUMBER(1);
   l_ID_FOLLOW_UP_TYPE_n NUMBER(1);
   l_ID_EPIS_REPORT_n NUMBER(1);
   l_ID_PATIENT_n NUMBER(1);
   l_ID_PENDING_ISSUE_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_FLG_ISSUE_ASSIGN_n NUMBER(1);
   l_DISCHARGE_INSTRUCTIONS_n NUMBER(1);
   l_FLG_CSG_PATIENT_n NUMBER(1);
   l_DT_CSG_PATIENT_n NUMBER(1);
   BEGIN

   l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
   l_ID_PROFESSIONAL_n := sys.diutil.bool_to_int(ID_PROFESSIONAL_nin);
   l_EPIS_COMPLAINT_n := sys.diutil.bool_to_int(EPIS_COMPLAINT_nin);
   l_EPIS_DIAGNOSIS_n := sys.diutil.bool_to_int(EPIS_DIAGNOSIS_nin);
   l_EPIS_TESTS_n := sys.diutil.bool_to_int(EPIS_TESTS_nin);
   l_EPIS_DRUGS_n := sys.diutil.bool_to_int(EPIS_DRUGS_nin);
   l_RECOMMENDED_n := sys.diutil.bool_to_int(RECOMMENDED_nin);
   l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
   l_ADW_LAST_UPDATE_n := sys.diutil.bool_to_int(ADW_LAST_UPDATE_nin);
   l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
   l_DT_CREATION_TSTZ_n := sys.diutil.bool_to_int(DT_CREATION_TSTZ_nin);
   l_DT_CANCEL_TSTZ_n := sys.diutil.bool_to_int(DT_CANCEL_TSTZ_nin);
   l_RELEASE_FROM_n := sys.diutil.bool_to_int(RELEASE_FROM_nin);
   l_DT_FROM_n := sys.diutil.bool_to_int(DT_FROM_nin);
   l_DT_UNTIL_n := sys.diutil.bool_to_int(DT_UNTIL_nin);
   l_NOTES_RELEASE_n := sys.diutil.bool_to_int(NOTES_RELEASE_nin);
   l_FOLLOW_UP_WITH_n := sys.diutil.bool_to_int(FOLLOW_UP_WITH_nin);
   l_FOLLOW_UP_IN_n := sys.diutil.bool_to_int(FOLLOW_UP_IN_nin);
   l_INSTRUCTIONS_DISCUSSED_n := sys.diutil.bool_to_int(INSTRUCTIONS_DISCUSSED_nin);
   l_ID_FOLLOW_UP_TYPE_n := sys.diutil.bool_to_int(ID_FOLLOW_UP_TYPE_nin);
   l_ID_EPIS_REPORT_n := sys.diutil.bool_to_int(ID_EPIS_REPORT_nin);
   l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
   l_ID_PENDING_ISSUE_n := sys.diutil.bool_to_int(ID_PENDING_ISSUE_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
   l_FLG_ISSUE_ASSIGN_n := sys.diutil.bool_to_int(FLG_ISSUE_ASSIGN_nin);
   l_DISCHARGE_INSTRUCTIONS_n := sys.diutil.bool_to_int(DISCHARGE_INSTRUCTIONS_nin);
   l_FLG_CSG_PATIENT_n := sys.diutil.bool_to_int(FLG_CSG_PATIENT_nin);
   l_DT_CSG_PATIENT_n := sys.diutil.bool_to_int(DT_CSG_PATIENT_nin);


         UPDATE DISCHARGE_NOTES SET
     ID_EPISODE = decode (l_ID_EPISODE_n,0,id_episode_in, NVL (id_episode_in, ID_EPISODE)),
     ID_PROFESSIONAL = decode (l_ID_PROFESSIONAL_n,0,id_professional_in, NVL (id_professional_in, ID_PROFESSIONAL)),
     EPIS_COMPLAINT = decode (l_EPIS_COMPLAINT_n,0,epis_complaint_in, NVL (epis_complaint_in, EPIS_COMPLAINT)),
     EPIS_DIAGNOSIS = decode (l_EPIS_DIAGNOSIS_n,0,epis_diagnosis_in, NVL (epis_diagnosis_in, EPIS_DIAGNOSIS)),
     EPIS_TESTS = decode (l_EPIS_TESTS_n,0,epis_tests_in, NVL (epis_tests_in, EPIS_TESTS)),
     EPIS_DRUGS = decode (l_EPIS_DRUGS_n,0,epis_drugs_in, NVL (epis_drugs_in, EPIS_DRUGS)),
     RECOMMENDED = decode (l_RECOMMENDED_n,0,recommended_in, NVL (recommended_in, RECOMMENDED)),
     FLG_STATUS = decode (l_FLG_STATUS_n,0,flg_status_in, NVL (flg_status_in, FLG_STATUS)),
     ADW_LAST_UPDATE = decode (l_ADW_LAST_UPDATE_n,0,adw_last_update_in, NVL (adw_last_update_in, ADW_LAST_UPDATE)),
     ID_PROF_CANCEL = decode (l_ID_PROF_CANCEL_n,0,id_prof_cancel_in, NVL (id_prof_cancel_in, ID_PROF_CANCEL)),
     DT_CREATION_TSTZ = decode (l_DT_CREATION_TSTZ_n,0,dt_creation_tstz_in, NVL (dt_creation_tstz_in, DT_CREATION_TSTZ)),
     DT_CANCEL_TSTZ = decode (l_DT_CANCEL_TSTZ_n,0,dt_cancel_tstz_in, NVL (dt_cancel_tstz_in, DT_CANCEL_TSTZ)),
     RELEASE_FROM = decode (l_RELEASE_FROM_n,0,release_from_in, NVL (release_from_in, RELEASE_FROM)),
     DT_FROM = decode (l_DT_FROM_n,0,dt_from_in, NVL (dt_from_in, DT_FROM)),
     DT_UNTIL = decode (l_DT_UNTIL_n,0,dt_until_in, NVL (dt_until_in, DT_UNTIL)),
     NOTES_RELEASE = decode (l_NOTES_RELEASE_n,0,notes_release_in, NVL (notes_release_in, NOTES_RELEASE)),
     FOLLOW_UP_WITH = decode (l_FOLLOW_UP_WITH_n,0,follow_up_with_in, NVL (follow_up_with_in, FOLLOW_UP_WITH)),
     FOLLOW_UP_IN = decode (l_FOLLOW_UP_IN_n,0,follow_up_in_in, NVL (follow_up_in_in, FOLLOW_UP_IN)),
     INSTRUCTIONS_DISCUSSED = decode (l_INSTRUCTIONS_DISCUSSED_n,0,instructions_discussed_in, NVL (instructions_discussed_in, INSTRUCTIONS_DISCUSSED)),
     ID_FOLLOW_UP_TYPE = decode (l_ID_FOLLOW_UP_TYPE_n,0,id_follow_up_type_in, NVL (id_follow_up_type_in, ID_FOLLOW_UP_TYPE)),
     ID_EPIS_REPORT = decode (l_ID_EPIS_REPORT_n,0,id_epis_report_in, NVL (id_epis_report_in, ID_EPIS_REPORT)),
     ID_PATIENT = decode (l_ID_PATIENT_n,0,id_patient_in, NVL (id_patient_in, ID_PATIENT)),
     ID_PENDING_ISSUE = decode (l_ID_PENDING_ISSUE_n,0,id_pending_issue_in, NVL (id_pending_issue_in, ID_PENDING_ISSUE)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION)),
     FLG_ISSUE_ASSIGN = decode (l_FLG_ISSUE_ASSIGN_n,0,flg_issue_assign_in, NVL (flg_issue_assign_in, FLG_ISSUE_ASSIGN)),
     DISCHARGE_INSTRUCTIONS = decode (l_DISCHARGE_INSTRUCTIONS_n,0,discharge_instructions_in, NVL (discharge_instructions_in, DISCHARGE_INSTRUCTIONS)),
     FLG_CSG_PATIENT = decode (l_FLG_CSG_PATIENT_n,0,flg_csg_patient_in, NVL (flg_csg_patient_in, FLG_CSG_PATIENT)),
     DT_CSG_PATIENT = decode (l_DT_CSG_PATIENT_n,0,dt_csg_patient_in, NVL (dt_csg_patient_in, DT_CSG_PATIENT))
          WHERE
             ID_DISCHARGE_NOTES = id_discharge_notes_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'DISCHARGE_NOTES');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           IF l_name = 'DNT_EPI_RPT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_REPORT'
               , value_in => id_epis_report_in);
           END IF;
           IF l_name = 'DNT_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'DNT_F_UP_TY_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_FOLLOW_UP_TYPE'
               , value_in => id_follow_up_type_in);
           END IF;
           IF l_name = 'DNT_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'DNT_PENDISSUE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PENDING_ISSUE'
               , value_in => id_pending_issue_in);
           END IF;
           IF l_name = 'DNT_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           IF l_name = 'DNT_PROF_FK2'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_discharge_notes_in IN DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE,
      id_episode_in IN DISCHARGE_NOTES.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_professional_in IN DISCHARGE_NOTES.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      epis_complaint_in IN DISCHARGE_NOTES.EPIS_COMPLAINT%TYPE DEFAULT NULL,
      EPIS_COMPLAINT_nin IN BOOLEAN := TRUE,
      epis_diagnosis_in IN DISCHARGE_NOTES.EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      EPIS_DIAGNOSIS_nin IN BOOLEAN := TRUE,
      epis_tests_in IN DISCHARGE_NOTES.EPIS_TESTS%TYPE DEFAULT NULL,
      EPIS_TESTS_nin IN BOOLEAN := TRUE,
      epis_drugs_in IN DISCHARGE_NOTES.EPIS_DRUGS%TYPE DEFAULT NULL,
      EPIS_DRUGS_nin IN BOOLEAN := TRUE,
      recommended_in IN DISCHARGE_NOTES.RECOMMENDED%TYPE DEFAULT NULL,
      RECOMMENDED_nin IN BOOLEAN := TRUE,
      flg_status_in IN DISCHARGE_NOTES.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN DISCHARGE_NOTES.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN DISCHARGE_NOTES.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      dt_creation_tstz_in IN DISCHARGE_NOTES.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      DT_CREATION_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN DISCHARGE_NOTES.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      release_from_in IN DISCHARGE_NOTES.RELEASE_FROM%TYPE DEFAULT NULL,
      RELEASE_FROM_nin IN BOOLEAN := TRUE,
      dt_from_in IN DISCHARGE_NOTES.DT_FROM%TYPE DEFAULT NULL,
      DT_FROM_nin IN BOOLEAN := TRUE,
      dt_until_in IN DISCHARGE_NOTES.DT_UNTIL%TYPE DEFAULT NULL,
      DT_UNTIL_nin IN BOOLEAN := TRUE,
      notes_release_in IN DISCHARGE_NOTES.NOTES_RELEASE%TYPE DEFAULT NULL,
      NOTES_RELEASE_nin IN BOOLEAN := TRUE,
      follow_up_with_in IN DISCHARGE_NOTES.FOLLOW_UP_WITH%TYPE DEFAULT NULL,
      FOLLOW_UP_WITH_nin IN BOOLEAN := TRUE,
      follow_up_in_in IN DISCHARGE_NOTES.FOLLOW_UP_IN%TYPE DEFAULT NULL,
      FOLLOW_UP_IN_nin IN BOOLEAN := TRUE,
      instructions_discussed_in IN DISCHARGE_NOTES.INSTRUCTIONS_DISCUSSED%TYPE DEFAULT NULL,
      INSTRUCTIONS_DISCUSSED_nin IN BOOLEAN := TRUE,
      id_follow_up_type_in IN DISCHARGE_NOTES.ID_FOLLOW_UP_TYPE%TYPE DEFAULT NULL,
      ID_FOLLOW_UP_TYPE_nin IN BOOLEAN := TRUE,
      id_epis_report_in IN DISCHARGE_NOTES.ID_EPIS_REPORT%TYPE DEFAULT NULL,
      ID_EPIS_REPORT_nin IN BOOLEAN := TRUE,
      id_patient_in IN DISCHARGE_NOTES.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_pending_issue_in IN DISCHARGE_NOTES.ID_PENDING_ISSUE%TYPE DEFAULT NULL,
      ID_PENDING_ISSUE_nin IN BOOLEAN := TRUE,
      create_user_in IN DISCHARGE_NOTES.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN DISCHARGE_NOTES.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN DISCHARGE_NOTES.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN DISCHARGE_NOTES.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN DISCHARGE_NOTES.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN DISCHARGE_NOTES.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_issue_assign_in IN DISCHARGE_NOTES.FLG_ISSUE_ASSIGN%TYPE DEFAULT NULL,
      FLG_ISSUE_ASSIGN_nin IN BOOLEAN := TRUE,
      discharge_instructions_in IN DISCHARGE_NOTES.DISCHARGE_INSTRUCTIONS%TYPE DEFAULT NULL,
      DISCHARGE_INSTRUCTIONS_nin IN BOOLEAN := TRUE,
      flg_csg_patient_in IN DISCHARGE_NOTES.FLG_CSG_PATIENT%TYPE DEFAULT NULL,
      FLG_CSG_PATIENT_nin IN BOOLEAN := TRUE,
      dt_csg_patient_in IN DISCHARGE_NOTES.DT_CSG_PATIENT%TYPE DEFAULT NULL,
      DT_CSG_PATIENT_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_discharge_notes_in => id_discharge_notes_in,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      id_professional_in => id_professional_in,
      ID_PROFESSIONAL_nin => ID_PROFESSIONAL_nin,
      epis_complaint_in => epis_complaint_in,
      EPIS_COMPLAINT_nin => EPIS_COMPLAINT_nin,
      epis_diagnosis_in => epis_diagnosis_in,
      EPIS_DIAGNOSIS_nin => EPIS_DIAGNOSIS_nin,
      epis_tests_in => epis_tests_in,
      EPIS_TESTS_nin => EPIS_TESTS_nin,
      epis_drugs_in => epis_drugs_in,
      EPIS_DRUGS_nin => EPIS_DRUGS_nin,
      recommended_in => recommended_in,
      RECOMMENDED_nin => RECOMMENDED_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      adw_last_update_in => adw_last_update_in,
      ADW_LAST_UPDATE_nin => ADW_LAST_UPDATE_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      dt_creation_tstz_in => dt_creation_tstz_in,
      DT_CREATION_TSTZ_nin => DT_CREATION_TSTZ_nin,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      DT_CANCEL_TSTZ_nin => DT_CANCEL_TSTZ_nin,
      release_from_in => release_from_in,
      RELEASE_FROM_nin => RELEASE_FROM_nin,
      dt_from_in => dt_from_in,
      DT_FROM_nin => DT_FROM_nin,
      dt_until_in => dt_until_in,
      DT_UNTIL_nin => DT_UNTIL_nin,
      notes_release_in => notes_release_in,
      NOTES_RELEASE_nin => NOTES_RELEASE_nin,
      follow_up_with_in => follow_up_with_in,
      FOLLOW_UP_WITH_nin => FOLLOW_UP_WITH_nin,
      follow_up_in_in => follow_up_in_in,
      FOLLOW_UP_IN_nin => FOLLOW_UP_IN_nin,
      instructions_discussed_in => instructions_discussed_in,
      INSTRUCTIONS_DISCUSSED_nin => INSTRUCTIONS_DISCUSSED_nin,
      id_follow_up_type_in => id_follow_up_type_in,
      ID_FOLLOW_UP_TYPE_nin => ID_FOLLOW_UP_TYPE_nin,
      id_epis_report_in => id_epis_report_in,
      ID_EPIS_REPORT_nin => ID_EPIS_REPORT_nin,
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      id_pending_issue_in => id_pending_issue_in,
      ID_PENDING_ISSUE_nin => ID_PENDING_ISSUE_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      flg_issue_assign_in => flg_issue_assign_in,
      FLG_ISSUE_ASSIGN_nin => FLG_ISSUE_ASSIGN_nin,
      discharge_instructions_in => discharge_instructions_in,
      DISCHARGE_INSTRUCTIONS_nin => DISCHARGE_INSTRUCTIONS_nin,
      flg_csg_patient_in => flg_csg_patient_in,
      FLG_CSG_PATIENT_nin => FLG_CSG_PATIENT_nin,
      dt_csg_patient_in => dt_csg_patient_in,
      DT_CSG_PATIENT_nin => DT_CSG_PATIENT_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_episode_in IN DISCHARGE_NOTES.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_professional_in IN DISCHARGE_NOTES.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      epis_complaint_in IN DISCHARGE_NOTES.EPIS_COMPLAINT%TYPE DEFAULT NULL,
      EPIS_COMPLAINT_nin IN BOOLEAN := TRUE,
      epis_diagnosis_in IN DISCHARGE_NOTES.EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      EPIS_DIAGNOSIS_nin IN BOOLEAN := TRUE,
      epis_tests_in IN DISCHARGE_NOTES.EPIS_TESTS%TYPE DEFAULT NULL,
      EPIS_TESTS_nin IN BOOLEAN := TRUE,
      epis_drugs_in IN DISCHARGE_NOTES.EPIS_DRUGS%TYPE DEFAULT NULL,
      EPIS_DRUGS_nin IN BOOLEAN := TRUE,
      recommended_in IN DISCHARGE_NOTES.RECOMMENDED%TYPE DEFAULT NULL,
      RECOMMENDED_nin IN BOOLEAN := TRUE,
      flg_status_in IN DISCHARGE_NOTES.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN DISCHARGE_NOTES.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN DISCHARGE_NOTES.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      dt_creation_tstz_in IN DISCHARGE_NOTES.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      DT_CREATION_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN DISCHARGE_NOTES.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      release_from_in IN DISCHARGE_NOTES.RELEASE_FROM%TYPE DEFAULT NULL,
      RELEASE_FROM_nin IN BOOLEAN := TRUE,
      dt_from_in IN DISCHARGE_NOTES.DT_FROM%TYPE DEFAULT NULL,
      DT_FROM_nin IN BOOLEAN := TRUE,
      dt_until_in IN DISCHARGE_NOTES.DT_UNTIL%TYPE DEFAULT NULL,
      DT_UNTIL_nin IN BOOLEAN := TRUE,
      notes_release_in IN DISCHARGE_NOTES.NOTES_RELEASE%TYPE DEFAULT NULL,
      NOTES_RELEASE_nin IN BOOLEAN := TRUE,
      follow_up_with_in IN DISCHARGE_NOTES.FOLLOW_UP_WITH%TYPE DEFAULT NULL,
      FOLLOW_UP_WITH_nin IN BOOLEAN := TRUE,
      follow_up_in_in IN DISCHARGE_NOTES.FOLLOW_UP_IN%TYPE DEFAULT NULL,
      FOLLOW_UP_IN_nin IN BOOLEAN := TRUE,
      instructions_discussed_in IN DISCHARGE_NOTES.INSTRUCTIONS_DISCUSSED%TYPE DEFAULT NULL,
      INSTRUCTIONS_DISCUSSED_nin IN BOOLEAN := TRUE,
      id_follow_up_type_in IN DISCHARGE_NOTES.ID_FOLLOW_UP_TYPE%TYPE DEFAULT NULL,
      ID_FOLLOW_UP_TYPE_nin IN BOOLEAN := TRUE,
      id_epis_report_in IN DISCHARGE_NOTES.ID_EPIS_REPORT%TYPE DEFAULT NULL,
      ID_EPIS_REPORT_nin IN BOOLEAN := TRUE,
      id_patient_in IN DISCHARGE_NOTES.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_pending_issue_in IN DISCHARGE_NOTES.ID_PENDING_ISSUE%TYPE DEFAULT NULL,
      ID_PENDING_ISSUE_nin IN BOOLEAN := TRUE,
      create_user_in IN DISCHARGE_NOTES.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN DISCHARGE_NOTES.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN DISCHARGE_NOTES.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN DISCHARGE_NOTES.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN DISCHARGE_NOTES.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN DISCHARGE_NOTES.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_issue_assign_in IN DISCHARGE_NOTES.FLG_ISSUE_ASSIGN%TYPE DEFAULT NULL,
      FLG_ISSUE_ASSIGN_nin IN BOOLEAN := TRUE,
      discharge_instructions_in IN DISCHARGE_NOTES.DISCHARGE_INSTRUCTIONS%TYPE DEFAULT NULL,
      DISCHARGE_INSTRUCTIONS_nin IN BOOLEAN := TRUE,
      flg_csg_patient_in IN DISCHARGE_NOTES.FLG_CSG_PATIENT%TYPE DEFAULT NULL,
      FLG_CSG_PATIENT_nin IN BOOLEAN := TRUE,
      dt_csg_patient_in IN DISCHARGE_NOTES.DT_CSG_PATIENT%TYPE DEFAULT NULL,
      DT_CSG_PATIENT_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_ID_EPISODE_n NUMBER(1);
   l_ID_PROFESSIONAL_n NUMBER(1);
   l_EPIS_COMPLAINT_n NUMBER(1);
   l_EPIS_DIAGNOSIS_n NUMBER(1);
   l_EPIS_TESTS_n NUMBER(1);
   l_EPIS_DRUGS_n NUMBER(1);
   l_RECOMMENDED_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_ADW_LAST_UPDATE_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_DT_CREATION_TSTZ_n NUMBER(1);
   l_DT_CANCEL_TSTZ_n NUMBER(1);
   l_RELEASE_FROM_n NUMBER(1);
   l_DT_FROM_n NUMBER(1);
   l_DT_UNTIL_n NUMBER(1);
   l_NOTES_RELEASE_n NUMBER(1);
   l_FOLLOW_UP_WITH_n NUMBER(1);
   l_FOLLOW_UP_IN_n NUMBER(1);
   l_INSTRUCTIONS_DISCUSSED_n NUMBER(1);
   l_ID_FOLLOW_UP_TYPE_n NUMBER(1);
   l_ID_EPIS_REPORT_n NUMBER(1);
   l_ID_PATIENT_n NUMBER(1);
   l_ID_PENDING_ISSUE_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_FLG_ISSUE_ASSIGN_n NUMBER(1);
   l_DISCHARGE_INSTRUCTIONS_n NUMBER(1);
   l_FLG_CSG_PATIENT_n NUMBER(1);
   l_DT_CSG_PATIENT_n NUMBER(1);
      id_discharge_notes_in DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE;
   BEGIN



      l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
      l_ID_PROFESSIONAL_n := sys.diutil.bool_to_int(ID_PROFESSIONAL_nin);
      l_EPIS_COMPLAINT_n := sys.diutil.bool_to_int(EPIS_COMPLAINT_nin);
      l_EPIS_DIAGNOSIS_n := sys.diutil.bool_to_int(EPIS_DIAGNOSIS_nin);
      l_EPIS_TESTS_n := sys.diutil.bool_to_int(EPIS_TESTS_nin);
      l_EPIS_DRUGS_n := sys.diutil.bool_to_int(EPIS_DRUGS_nin);
      l_RECOMMENDED_n := sys.diutil.bool_to_int(RECOMMENDED_nin);
      l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
      l_ADW_LAST_UPDATE_n := sys.diutil.bool_to_int(ADW_LAST_UPDATE_nin);
      l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
      l_DT_CREATION_TSTZ_n := sys.diutil.bool_to_int(DT_CREATION_TSTZ_nin);
      l_DT_CANCEL_TSTZ_n := sys.diutil.bool_to_int(DT_CANCEL_TSTZ_nin);
      l_RELEASE_FROM_n := sys.diutil.bool_to_int(RELEASE_FROM_nin);
      l_DT_FROM_n := sys.diutil.bool_to_int(DT_FROM_nin);
      l_DT_UNTIL_n := sys.diutil.bool_to_int(DT_UNTIL_nin);
      l_NOTES_RELEASE_n := sys.diutil.bool_to_int(NOTES_RELEASE_nin);
      l_FOLLOW_UP_WITH_n := sys.diutil.bool_to_int(FOLLOW_UP_WITH_nin);
      l_FOLLOW_UP_IN_n := sys.diutil.bool_to_int(FOLLOW_UP_IN_nin);
      l_INSTRUCTIONS_DISCUSSED_n := sys.diutil.bool_to_int(INSTRUCTIONS_DISCUSSED_nin);
      l_ID_FOLLOW_UP_TYPE_n := sys.diutil.bool_to_int(ID_FOLLOW_UP_TYPE_nin);
      l_ID_EPIS_REPORT_n := sys.diutil.bool_to_int(ID_EPIS_REPORT_nin);
      l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
      l_ID_PENDING_ISSUE_n := sys.diutil.bool_to_int(ID_PENDING_ISSUE_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
      l_FLG_ISSUE_ASSIGN_n := sys.diutil.bool_to_int(FLG_ISSUE_ASSIGN_nin);
      l_DISCHARGE_INSTRUCTIONS_n := sys.diutil.bool_to_int(DISCHARGE_INSTRUCTIONS_nin);
      l_FLG_CSG_PATIENT_n := sys.diutil.bool_to_int(FLG_CSG_PATIENT_nin);
      l_DT_CSG_PATIENT_n := sys.diutil.bool_to_int(DT_CSG_PATIENT_nin);



l_sql := 'UPDATE DISCHARGE_NOTES SET '
     || ' ID_EPISODE = decode (' || l_ID_EPISODE_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) '|| ','
     || ' ID_PROFESSIONAL = decode (' || l_ID_PROFESSIONAL_n || ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) '|| ','
     || ' EPIS_COMPLAINT = decode (' || l_EPIS_COMPLAINT_n || ',0,:epis_complaint_in, NVL (:epis_complaint_in, EPIS_COMPLAINT)) '|| ','
     || ' EPIS_DIAGNOSIS = decode (' || l_EPIS_DIAGNOSIS_n || ',0,:epis_diagnosis_in, NVL (:epis_diagnosis_in, EPIS_DIAGNOSIS)) '|| ','
     || ' EPIS_TESTS = decode (' || l_EPIS_TESTS_n || ',0,:epis_tests_in, NVL (:epis_tests_in, EPIS_TESTS)) '|| ','
     || ' EPIS_DRUGS = decode (' || l_EPIS_DRUGS_n || ',0,:epis_drugs_in, NVL (:epis_drugs_in, EPIS_DRUGS)) '|| ','
     || ' RECOMMENDED = decode (' || l_RECOMMENDED_n || ',0,:recommended_in, NVL (:recommended_in, RECOMMENDED)) '|| ','
     || ' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) '|| ','
     || ' ADW_LAST_UPDATE = decode (' || l_ADW_LAST_UPDATE_n || ',0,:adw_last_update_in, NVL (:adw_last_update_in, ADW_LAST_UPDATE)) '|| ','
     || ' ID_PROF_CANCEL = decode (' || l_ID_PROF_CANCEL_n || ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) '|| ','
     || ' DT_CREATION_TSTZ = decode (' || l_DT_CREATION_TSTZ_n || ',0,:dt_creation_tstz_in, NVL (:dt_creation_tstz_in, DT_CREATION_TSTZ)) '|| ','
     || ' DT_CANCEL_TSTZ = decode (' || l_DT_CANCEL_TSTZ_n || ',0,:dt_cancel_tstz_in, NVL (:dt_cancel_tstz_in, DT_CANCEL_TSTZ)) '|| ','
     || ' RELEASE_FROM = decode (' || l_RELEASE_FROM_n || ',0,:release_from_in, NVL (:release_from_in, RELEASE_FROM)) '|| ','
     || ' DT_FROM = decode (' || l_DT_FROM_n || ',0,:dt_from_in, NVL (:dt_from_in, DT_FROM)) '|| ','
     || ' DT_UNTIL = decode (' || l_DT_UNTIL_n || ',0,:dt_until_in, NVL (:dt_until_in, DT_UNTIL)) '|| ','
     || ' NOTES_RELEASE = decode (' || l_NOTES_RELEASE_n || ',0,:notes_release_in, NVL (:notes_release_in, NOTES_RELEASE)) '|| ','
     || ' FOLLOW_UP_WITH = decode (' || l_FOLLOW_UP_WITH_n || ',0,:follow_up_with_in, NVL (:follow_up_with_in, FOLLOW_UP_WITH)) '|| ','
     || ' FOLLOW_UP_IN = decode (' || l_FOLLOW_UP_IN_n || ',0,:follow_up_in_in, NVL (:follow_up_in_in, FOLLOW_UP_IN)) '|| ','
     || ' INSTRUCTIONS_DISCUSSED = decode (' || l_INSTRUCTIONS_DISCUSSED_n || ',0,:instructions_discussed_in, NVL (:instructions_discussed_in, INSTRUCTIONS_DISCUSSED)) '|| ','
     || ' ID_FOLLOW_UP_TYPE = decode (' || l_ID_FOLLOW_UP_TYPE_n || ',0,:id_follow_up_type_in, NVL (:id_follow_up_type_in, ID_FOLLOW_UP_TYPE)) '|| ','
     || ' ID_EPIS_REPORT = decode (' || l_ID_EPIS_REPORT_n || ',0,:id_epis_report_in, NVL (:id_epis_report_in, ID_EPIS_REPORT)) '|| ','
     || ' ID_PATIENT = decode (' || l_ID_PATIENT_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) '|| ','
     || ' ID_PENDING_ISSUE = decode (' || l_ID_PENDING_ISSUE_n || ',0,:id_pending_issue_in, NVL (:id_pending_issue_in, ID_PENDING_ISSUE)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '|| ','
     || ' FLG_ISSUE_ASSIGN = decode (' || l_FLG_ISSUE_ASSIGN_n || ',0,:flg_issue_assign_in, NVL (:flg_issue_assign_in, FLG_ISSUE_ASSIGN)) '|| ','
     || ' DISCHARGE_INSTRUCTIONS = decode (' || l_DISCHARGE_INSTRUCTIONS_n || ',0,:discharge_instructions_in, NVL (:discharge_instructions_in, DISCHARGE_INSTRUCTIONS)) '|| ','
     || ' FLG_CSG_PATIENT = decode (' || l_FLG_CSG_PATIENT_n || ',0,:flg_csg_patient_in, NVL (:flg_csg_patient_in, FLG_CSG_PATIENT)) '|| ','
     || ' DT_CSG_PATIENT = decode (' || l_DT_CSG_PATIENT_n || ',0,:dt_csg_patient_in, NVL (:dt_csg_patient_in, DT_CSG_PATIENT)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_episode_in,
     id_professional_in,
     epis_complaint_in,
     epis_diagnosis_in,
     epis_tests_in,
     epis_drugs_in,
     recommended_in,
     flg_status_in,
     adw_last_update_in,
     id_prof_cancel_in,
     dt_creation_tstz_in,
     dt_cancel_tstz_in,
     release_from_in,
     dt_from_in,
     dt_until_in,
     notes_release_in,
     follow_up_with_in,
     follow_up_in_in,
     instructions_discussed_in,
     id_follow_up_type_in,
     id_epis_report_in,
     id_patient_in,
     id_pending_issue_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
     flg_issue_assign_in,
     discharge_instructions_in,
     flg_csg_patient_in,
     dt_csg_patient_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'DISCHARGE_NOTES');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           IF l_name = 'DNT_EPI_RPT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_REPORT'
               , value_in => id_epis_report_in);
           END IF;
           IF l_name = 'DNT_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'DNT_F_UP_TY_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_FOLLOW_UP_TYPE'
               , value_in => id_follow_up_type_in);
           END IF;
           IF l_name = 'DNT_PAT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PATIENT'
               , value_in => id_patient_in);
           END IF;
           IF l_name = 'DNT_PENDISSUE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PENDING_ISSUE'
               , value_in => id_pending_issue_in);
           END IF;
           IF l_name = 'DNT_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           IF l_name = 'DNT_PROF_FK2'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_episode_in IN DISCHARGE_NOTES.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_professional_in IN DISCHARGE_NOTES.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      epis_complaint_in IN DISCHARGE_NOTES.EPIS_COMPLAINT%TYPE DEFAULT NULL,
      EPIS_COMPLAINT_nin IN BOOLEAN := TRUE,
      epis_diagnosis_in IN DISCHARGE_NOTES.EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      EPIS_DIAGNOSIS_nin IN BOOLEAN := TRUE,
      epis_tests_in IN DISCHARGE_NOTES.EPIS_TESTS%TYPE DEFAULT NULL,
      EPIS_TESTS_nin IN BOOLEAN := TRUE,
      epis_drugs_in IN DISCHARGE_NOTES.EPIS_DRUGS%TYPE DEFAULT NULL,
      EPIS_DRUGS_nin IN BOOLEAN := TRUE,
      recommended_in IN DISCHARGE_NOTES.RECOMMENDED%TYPE DEFAULT NULL,
      RECOMMENDED_nin IN BOOLEAN := TRUE,
      flg_status_in IN DISCHARGE_NOTES.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN DISCHARGE_NOTES.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN DISCHARGE_NOTES.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      dt_creation_tstz_in IN DISCHARGE_NOTES.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      DT_CREATION_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN DISCHARGE_NOTES.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      release_from_in IN DISCHARGE_NOTES.RELEASE_FROM%TYPE DEFAULT NULL,
      RELEASE_FROM_nin IN BOOLEAN := TRUE,
      dt_from_in IN DISCHARGE_NOTES.DT_FROM%TYPE DEFAULT NULL,
      DT_FROM_nin IN BOOLEAN := TRUE,
      dt_until_in IN DISCHARGE_NOTES.DT_UNTIL%TYPE DEFAULT NULL,
      DT_UNTIL_nin IN BOOLEAN := TRUE,
      notes_release_in IN DISCHARGE_NOTES.NOTES_RELEASE%TYPE DEFAULT NULL,
      NOTES_RELEASE_nin IN BOOLEAN := TRUE,
      follow_up_with_in IN DISCHARGE_NOTES.FOLLOW_UP_WITH%TYPE DEFAULT NULL,
      FOLLOW_UP_WITH_nin IN BOOLEAN := TRUE,
      follow_up_in_in IN DISCHARGE_NOTES.FOLLOW_UP_IN%TYPE DEFAULT NULL,
      FOLLOW_UP_IN_nin IN BOOLEAN := TRUE,
      instructions_discussed_in IN DISCHARGE_NOTES.INSTRUCTIONS_DISCUSSED%TYPE DEFAULT NULL,
      INSTRUCTIONS_DISCUSSED_nin IN BOOLEAN := TRUE,
      id_follow_up_type_in IN DISCHARGE_NOTES.ID_FOLLOW_UP_TYPE%TYPE DEFAULT NULL,
      ID_FOLLOW_UP_TYPE_nin IN BOOLEAN := TRUE,
      id_epis_report_in IN DISCHARGE_NOTES.ID_EPIS_REPORT%TYPE DEFAULT NULL,
      ID_EPIS_REPORT_nin IN BOOLEAN := TRUE,
      id_patient_in IN DISCHARGE_NOTES.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      id_pending_issue_in IN DISCHARGE_NOTES.ID_PENDING_ISSUE%TYPE DEFAULT NULL,
      ID_PENDING_ISSUE_nin IN BOOLEAN := TRUE,
      create_user_in IN DISCHARGE_NOTES.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN DISCHARGE_NOTES.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN DISCHARGE_NOTES.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN DISCHARGE_NOTES.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN DISCHARGE_NOTES.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN DISCHARGE_NOTES.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_issue_assign_in IN DISCHARGE_NOTES.FLG_ISSUE_ASSIGN%TYPE DEFAULT NULL,
      FLG_ISSUE_ASSIGN_nin IN BOOLEAN := TRUE,
      discharge_instructions_in IN DISCHARGE_NOTES.DISCHARGE_INSTRUCTIONS%TYPE DEFAULT NULL,
      DISCHARGE_INSTRUCTIONS_nin IN BOOLEAN := TRUE,
      flg_csg_patient_in IN DISCHARGE_NOTES.FLG_CSG_PATIENT%TYPE DEFAULT NULL,
      FLG_CSG_PATIENT_nin IN BOOLEAN := TRUE,
      dt_csg_patient_in IN DISCHARGE_NOTES.DT_CSG_PATIENT%TYPE DEFAULT NULL,
      DT_CSG_PATIENT_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      id_professional_in => id_professional_in,
      ID_PROFESSIONAL_nin => ID_PROFESSIONAL_nin,
      epis_complaint_in => epis_complaint_in,
      EPIS_COMPLAINT_nin => EPIS_COMPLAINT_nin,
      epis_diagnosis_in => epis_diagnosis_in,
      EPIS_DIAGNOSIS_nin => EPIS_DIAGNOSIS_nin,
      epis_tests_in => epis_tests_in,
      EPIS_TESTS_nin => EPIS_TESTS_nin,
      epis_drugs_in => epis_drugs_in,
      EPIS_DRUGS_nin => EPIS_DRUGS_nin,
      recommended_in => recommended_in,
      RECOMMENDED_nin => RECOMMENDED_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      adw_last_update_in => adw_last_update_in,
      ADW_LAST_UPDATE_nin => ADW_LAST_UPDATE_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      dt_creation_tstz_in => dt_creation_tstz_in,
      DT_CREATION_TSTZ_nin => DT_CREATION_TSTZ_nin,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      DT_CANCEL_TSTZ_nin => DT_CANCEL_TSTZ_nin,
      release_from_in => release_from_in,
      RELEASE_FROM_nin => RELEASE_FROM_nin,
      dt_from_in => dt_from_in,
      DT_FROM_nin => DT_FROM_nin,
      dt_until_in => dt_until_in,
      DT_UNTIL_nin => DT_UNTIL_nin,
      notes_release_in => notes_release_in,
      NOTES_RELEASE_nin => NOTES_RELEASE_nin,
      follow_up_with_in => follow_up_with_in,
      FOLLOW_UP_WITH_nin => FOLLOW_UP_WITH_nin,
      follow_up_in_in => follow_up_in_in,
      FOLLOW_UP_IN_nin => FOLLOW_UP_IN_nin,
      instructions_discussed_in => instructions_discussed_in,
      INSTRUCTIONS_DISCUSSED_nin => INSTRUCTIONS_DISCUSSED_nin,
      id_follow_up_type_in => id_follow_up_type_in,
      ID_FOLLOW_UP_TYPE_nin => ID_FOLLOW_UP_TYPE_nin,
      id_epis_report_in => id_epis_report_in,
      ID_EPIS_REPORT_nin => ID_EPIS_REPORT_nin,
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      id_pending_issue_in => id_pending_issue_in,
      ID_PENDING_ISSUE_nin => ID_PENDING_ISSUE_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      flg_issue_assign_in => flg_issue_assign_in,
      FLG_ISSUE_ASSIGN_nin => FLG_ISSUE_ASSIGN_nin,
      discharge_instructions_in => discharge_instructions_in,
      DISCHARGE_INSTRUCTIONS_nin => DISCHARGE_INSTRUCTIONS_nin,
      flg_csg_patient_in => flg_csg_patient_in,
      FLG_CSG_PATIENT_nin => FLG_CSG_PATIENT_nin,
      dt_csg_patient_in => dt_csg_patient_in,
      DT_CSG_PATIENT_nin => DT_CSG_PATIENT_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN DISCHARGE_NOTES%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_discharge_notes_in => rec_in.ID_DISCHARGE_NOTES,
         id_episode_in => rec_in.ID_EPISODE,
         id_professional_in => rec_in.ID_PROFESSIONAL,
         epis_complaint_in => rec_in.EPIS_COMPLAINT,
         epis_diagnosis_in => rec_in.EPIS_DIAGNOSIS,
         epis_tests_in => rec_in.EPIS_TESTS,
         epis_drugs_in => rec_in.EPIS_DRUGS,
         recommended_in => rec_in.RECOMMENDED,
         flg_status_in => rec_in.FLG_STATUS,
         adw_last_update_in => rec_in.ADW_LAST_UPDATE,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         dt_creation_tstz_in => rec_in.DT_CREATION_TSTZ,
         dt_cancel_tstz_in => rec_in.DT_CANCEL_TSTZ,
         release_from_in => rec_in.RELEASE_FROM,
         dt_from_in => rec_in.DT_FROM,
         dt_until_in => rec_in.DT_UNTIL,
         notes_release_in => rec_in.NOTES_RELEASE,
         follow_up_with_in => rec_in.FOLLOW_UP_WITH,
         follow_up_in_in => rec_in.FOLLOW_UP_IN,
         instructions_discussed_in => rec_in.INSTRUCTIONS_DISCUSSED,
         id_follow_up_type_in => rec_in.ID_FOLLOW_UP_TYPE,
         id_epis_report_in => rec_in.ID_EPIS_REPORT,
         id_patient_in => rec_in.ID_PATIENT,
         id_pending_issue_in => rec_in.ID_PENDING_ISSUE,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         flg_issue_assign_in => rec_in.FLG_ISSUE_ASSIGN,
         discharge_instructions_in => rec_in.DISCHARGE_INSTRUCTIONS,
         flg_csg_patient_in => rec_in.FLG_CSG_PATIENT,
         dt_csg_patient_in => rec_in.DT_CSG_PATIENT

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN DISCHARGE_NOTES%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_discharge_notes_in => rec_in.ID_DISCHARGE_NOTES,
         id_episode_in => rec_in.ID_EPISODE,
         id_professional_in => rec_in.ID_PROFESSIONAL,
         epis_complaint_in => rec_in.EPIS_COMPLAINT,
         epis_diagnosis_in => rec_in.EPIS_DIAGNOSIS,
         epis_tests_in => rec_in.EPIS_TESTS,
         epis_drugs_in => rec_in.EPIS_DRUGS,
         recommended_in => rec_in.RECOMMENDED,
         flg_status_in => rec_in.FLG_STATUS,
         adw_last_update_in => rec_in.ADW_LAST_UPDATE,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         dt_creation_tstz_in => rec_in.DT_CREATION_TSTZ,
         dt_cancel_tstz_in => rec_in.DT_CANCEL_TSTZ,
         release_from_in => rec_in.RELEASE_FROM,
         dt_from_in => rec_in.DT_FROM,
         dt_until_in => rec_in.DT_UNTIL,
         notes_release_in => rec_in.NOTES_RELEASE,
         follow_up_with_in => rec_in.FOLLOW_UP_WITH,
         follow_up_in_in => rec_in.FOLLOW_UP_IN,
         instructions_discussed_in => rec_in.INSTRUCTIONS_DISCUSSED,
         id_follow_up_type_in => rec_in.ID_FOLLOW_UP_TYPE,
         id_epis_report_in => rec_in.ID_EPIS_REPORT,
         id_patient_in => rec_in.ID_PATIENT,
         id_pending_issue_in => rec_in.ID_PENDING_ISSUE,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         flg_issue_assign_in => rec_in.FLG_ISSUE_ASSIGN,
         discharge_instructions_in => rec_in.DISCHARGE_INSTRUCTIONS,
         flg_csg_patient_in => rec_in.FLG_CSG_PATIENT,
         dt_csg_patient_in => rec_in.DT_CSG_PATIENT

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_discharge_notes_in IN DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE,
      id_episode_in IN DISCHARGE_NOTES.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN DISCHARGE_NOTES.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      epis_complaint_in IN DISCHARGE_NOTES.EPIS_COMPLAINT%TYPE DEFAULT NULL,
      epis_diagnosis_in IN DISCHARGE_NOTES.EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      epis_tests_in IN DISCHARGE_NOTES.EPIS_TESTS%TYPE DEFAULT NULL,
      epis_drugs_in IN DISCHARGE_NOTES.EPIS_DRUGS%TYPE DEFAULT NULL,
      recommended_in IN DISCHARGE_NOTES.RECOMMENDED%TYPE DEFAULT NULL,
      flg_status_in IN DISCHARGE_NOTES.FLG_STATUS%TYPE DEFAULT NULL,
      adw_last_update_in IN DISCHARGE_NOTES.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      id_prof_cancel_in IN DISCHARGE_NOTES.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN DISCHARGE_NOTES.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DISCHARGE_NOTES.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      release_from_in IN DISCHARGE_NOTES.RELEASE_FROM%TYPE DEFAULT NULL,
      dt_from_in IN DISCHARGE_NOTES.DT_FROM%TYPE DEFAULT NULL,
      dt_until_in IN DISCHARGE_NOTES.DT_UNTIL%TYPE DEFAULT NULL,
      notes_release_in IN DISCHARGE_NOTES.NOTES_RELEASE%TYPE DEFAULT NULL,
      follow_up_with_in IN DISCHARGE_NOTES.FOLLOW_UP_WITH%TYPE DEFAULT NULL,
      follow_up_in_in IN DISCHARGE_NOTES.FOLLOW_UP_IN%TYPE DEFAULT NULL,
      instructions_discussed_in IN DISCHARGE_NOTES.INSTRUCTIONS_DISCUSSED%TYPE DEFAULT NULL,
      id_follow_up_type_in IN DISCHARGE_NOTES.ID_FOLLOW_UP_TYPE%TYPE DEFAULT NULL,
      id_epis_report_in IN DISCHARGE_NOTES.ID_EPIS_REPORT%TYPE DEFAULT NULL,
      id_patient_in IN DISCHARGE_NOTES.ID_PATIENT%TYPE DEFAULT NULL,
      id_pending_issue_in IN DISCHARGE_NOTES.ID_PENDING_ISSUE%TYPE DEFAULT NULL,
      create_user_in IN DISCHARGE_NOTES.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DISCHARGE_NOTES.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DISCHARGE_NOTES.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DISCHARGE_NOTES.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DISCHARGE_NOTES.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DISCHARGE_NOTES.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_issue_assign_in IN DISCHARGE_NOTES.FLG_ISSUE_ASSIGN%TYPE DEFAULT NULL,
      discharge_instructions_in IN DISCHARGE_NOTES.DISCHARGE_INSTRUCTIONS%TYPE DEFAULT NULL,
      flg_csg_patient_in IN DISCHARGE_NOTES.FLG_CSG_PATIENT%TYPE DEFAULT NULL,
      dt_csg_patient_in IN DISCHARGE_NOTES.DT_CSG_PATIENT%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_discharge_notes_in => id_discharge_notes_in,
         id_episode_in => id_episode_in,
         id_professional_in => id_professional_in,
         epis_complaint_in => epis_complaint_in,
         epis_diagnosis_in => epis_diagnosis_in,
         epis_tests_in => epis_tests_in,
         epis_drugs_in => epis_drugs_in,
         recommended_in => recommended_in,
         flg_status_in => flg_status_in,
         adw_last_update_in => adw_last_update_in,
         id_prof_cancel_in => id_prof_cancel_in,
         dt_creation_tstz_in => dt_creation_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         release_from_in => release_from_in,
         dt_from_in => dt_from_in,
         dt_until_in => dt_until_in,
         notes_release_in => notes_release_in,
         follow_up_with_in => follow_up_with_in,
         follow_up_in_in => follow_up_in_in,
         instructions_discussed_in => instructions_discussed_in,
         id_follow_up_type_in => id_follow_up_type_in,
         id_epis_report_in => id_epis_report_in,
         id_patient_in => id_patient_in,
         id_pending_issue_in => id_pending_issue_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_issue_assign_in => flg_issue_assign_in,
         discharge_instructions_in => discharge_instructions_in,
         flg_csg_patient_in => flg_csg_patient_in,
         dt_csg_patient_in => dt_csg_patient_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_discharge_notes_in => id_discharge_notes_in,
            id_episode_in => id_episode_in,
            id_professional_in => id_professional_in,
            epis_complaint_in => epis_complaint_in,
            epis_diagnosis_in => epis_diagnosis_in,
            epis_tests_in => epis_tests_in,
            epis_drugs_in => epis_drugs_in,
            recommended_in => recommended_in,
            flg_status_in => flg_status_in,
            adw_last_update_in => adw_last_update_in,
            id_prof_cancel_in => id_prof_cancel_in,
            dt_creation_tstz_in => dt_creation_tstz_in,
            dt_cancel_tstz_in => dt_cancel_tstz_in,
            release_from_in => release_from_in,
            dt_from_in => dt_from_in,
            dt_until_in => dt_until_in,
            notes_release_in => notes_release_in,
            follow_up_with_in => follow_up_with_in,
            follow_up_in_in => follow_up_in_in,
            instructions_discussed_in => instructions_discussed_in,
            id_follow_up_type_in => id_follow_up_type_in,
            id_epis_report_in => id_epis_report_in,
            id_patient_in => id_patient_in,
            id_pending_issue_in => id_pending_issue_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            flg_issue_assign_in => flg_issue_assign_in,
            discharge_instructions_in => discharge_instructions_in,
            flg_csg_patient_in => flg_csg_patient_in,
            dt_csg_patient_in => dt_csg_patient_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_discharge_notes_in IN DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE,
      id_episode_in IN DISCHARGE_NOTES.ID_EPISODE%TYPE DEFAULT NULL,
      id_professional_in IN DISCHARGE_NOTES.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      epis_complaint_in IN DISCHARGE_NOTES.EPIS_COMPLAINT%TYPE DEFAULT NULL,
      epis_diagnosis_in IN DISCHARGE_NOTES.EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
      epis_tests_in IN DISCHARGE_NOTES.EPIS_TESTS%TYPE DEFAULT NULL,
      epis_drugs_in IN DISCHARGE_NOTES.EPIS_DRUGS%TYPE DEFAULT NULL,
      recommended_in IN DISCHARGE_NOTES.RECOMMENDED%TYPE DEFAULT NULL,
      flg_status_in IN DISCHARGE_NOTES.FLG_STATUS%TYPE DEFAULT NULL,
      adw_last_update_in IN DISCHARGE_NOTES.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      id_prof_cancel_in IN DISCHARGE_NOTES.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_creation_tstz_in IN DISCHARGE_NOTES.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN DISCHARGE_NOTES.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      release_from_in IN DISCHARGE_NOTES.RELEASE_FROM%TYPE DEFAULT NULL,
      dt_from_in IN DISCHARGE_NOTES.DT_FROM%TYPE DEFAULT NULL,
      dt_until_in IN DISCHARGE_NOTES.DT_UNTIL%TYPE DEFAULT NULL,
      notes_release_in IN DISCHARGE_NOTES.NOTES_RELEASE%TYPE DEFAULT NULL,
      follow_up_with_in IN DISCHARGE_NOTES.FOLLOW_UP_WITH%TYPE DEFAULT NULL,
      follow_up_in_in IN DISCHARGE_NOTES.FOLLOW_UP_IN%TYPE DEFAULT NULL,
      instructions_discussed_in IN DISCHARGE_NOTES.INSTRUCTIONS_DISCUSSED%TYPE DEFAULT NULL,
      id_follow_up_type_in IN DISCHARGE_NOTES.ID_FOLLOW_UP_TYPE%TYPE DEFAULT NULL,
      id_epis_report_in IN DISCHARGE_NOTES.ID_EPIS_REPORT%TYPE DEFAULT NULL,
      id_patient_in IN DISCHARGE_NOTES.ID_PATIENT%TYPE DEFAULT NULL,
      id_pending_issue_in IN DISCHARGE_NOTES.ID_PENDING_ISSUE%TYPE DEFAULT NULL,
      create_user_in IN DISCHARGE_NOTES.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN DISCHARGE_NOTES.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN DISCHARGE_NOTES.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN DISCHARGE_NOTES.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN DISCHARGE_NOTES.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN DISCHARGE_NOTES.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_issue_assign_in IN DISCHARGE_NOTES.FLG_ISSUE_ASSIGN%TYPE DEFAULT NULL,
      discharge_instructions_in IN DISCHARGE_NOTES.DISCHARGE_INSTRUCTIONS%TYPE DEFAULT NULL,
      flg_csg_patient_in IN DISCHARGE_NOTES.FLG_CSG_PATIENT%TYPE DEFAULT NULL,
      dt_csg_patient_in IN DISCHARGE_NOTES.DT_CSG_PATIENT%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_discharge_notes_in,
      id_episode_in,
      id_professional_in,
      epis_complaint_in,
      epis_diagnosis_in,
      epis_tests_in,
      epis_drugs_in,
      recommended_in,
      flg_status_in,
      adw_last_update_in,
      id_prof_cancel_in,
      dt_creation_tstz_in,
      dt_cancel_tstz_in,
      release_from_in,
      dt_from_in,
      dt_until_in,
      notes_release_in,
      follow_up_with_in,
      follow_up_in_in,
      instructions_discussed_in,
      id_follow_up_type_in,
      id_epis_report_in,
      id_patient_in,
      id_pending_issue_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
      flg_issue_assign_in,
      discharge_instructions_in,
      flg_csg_patient_in,
      dt_csg_patient_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN DISCHARGE_NOTES_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_DISCHARGE_NOTES ID_DISCHARGE_NOTES_cc;
      l_ID_EPISODE ID_EPISODE_cc;
      l_ID_PROFESSIONAL ID_PROFESSIONAL_cc;
      l_EPIS_COMPLAINT EPIS_COMPLAINT_cc;
      l_EPIS_DIAGNOSIS EPIS_DIAGNOSIS_cc;
      l_EPIS_TESTS EPIS_TESTS_cc;
      l_EPIS_DRUGS EPIS_DRUGS_cc;
      l_RECOMMENDED RECOMMENDED_cc;
      l_FLG_STATUS FLG_STATUS_cc;
      l_ADW_LAST_UPDATE ADW_LAST_UPDATE_cc;
      l_ID_PROF_CANCEL ID_PROF_CANCEL_cc;
      l_DT_CREATION_TSTZ DT_CREATION_TSTZ_cc;
      l_DT_CANCEL_TSTZ DT_CANCEL_TSTZ_cc;
      l_RELEASE_FROM RELEASE_FROM_cc;
      l_DT_FROM DT_FROM_cc;
      l_DT_UNTIL DT_UNTIL_cc;
      l_NOTES_RELEASE NOTES_RELEASE_cc;
      l_FOLLOW_UP_WITH FOLLOW_UP_WITH_cc;
      l_FOLLOW_UP_IN FOLLOW_UP_IN_cc;
      l_INSTRUCTIONS_DISCUSSED INSTRUCTIONS_DISCUSSED_cc;
      l_ID_FOLLOW_UP_TYPE ID_FOLLOW_UP_TYPE_cc;
      l_ID_EPIS_REPORT ID_EPIS_REPORT_cc;
      l_ID_PATIENT ID_PATIENT_cc;
      l_ID_PENDING_ISSUE ID_PENDING_ISSUE_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
      l_FLG_ISSUE_ASSIGN FLG_ISSUE_ASSIGN_cc;
      l_DISCHARGE_INSTRUCTIONS DISCHARGE_INSTRUCTIONS_cc;
      l_FLG_CSG_PATIENT FLG_CSG_PATIENT_cc;
      l_DT_CSG_PATIENT DT_CSG_PATIENT_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_DISCHARGE_NOTES(i) := col_in(i).ID_DISCHARGE_NOTES;
         l_ID_EPISODE(i) := col_in(i).ID_EPISODE;
         l_ID_PROFESSIONAL(i) := col_in(i).ID_PROFESSIONAL;
         l_EPIS_COMPLAINT(i) := col_in(i).EPIS_COMPLAINT;
         l_EPIS_DIAGNOSIS(i) := col_in(i).EPIS_DIAGNOSIS;
         l_EPIS_TESTS(i) := col_in(i).EPIS_TESTS;
         l_EPIS_DRUGS(i) := col_in(i).EPIS_DRUGS;
         l_RECOMMENDED(i) := col_in(i).RECOMMENDED;
         l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
         l_ADW_LAST_UPDATE(i) := col_in(i).ADW_LAST_UPDATE;
         l_ID_PROF_CANCEL(i) := col_in(i).ID_PROF_CANCEL;
         l_DT_CREATION_TSTZ(i) := col_in(i).DT_CREATION_TSTZ;
         l_DT_CANCEL_TSTZ(i) := col_in(i).DT_CANCEL_TSTZ;
         l_RELEASE_FROM(i) := col_in(i).RELEASE_FROM;
         l_DT_FROM(i) := col_in(i).DT_FROM;
         l_DT_UNTIL(i) := col_in(i).DT_UNTIL;
         l_NOTES_RELEASE(i) := col_in(i).NOTES_RELEASE;
         l_FOLLOW_UP_WITH(i) := col_in(i).FOLLOW_UP_WITH;
         l_FOLLOW_UP_IN(i) := col_in(i).FOLLOW_UP_IN;
         l_INSTRUCTIONS_DISCUSSED(i) := col_in(i).INSTRUCTIONS_DISCUSSED;
         l_ID_FOLLOW_UP_TYPE(i) := col_in(i).ID_FOLLOW_UP_TYPE;
         l_ID_EPIS_REPORT(i) := col_in(i).ID_EPIS_REPORT;
         l_ID_PATIENT(i) := col_in(i).ID_PATIENT;
         l_ID_PENDING_ISSUE(i) := col_in(i).ID_PENDING_ISSUE;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
         l_FLG_ISSUE_ASSIGN(i) := col_in(i).FLG_ISSUE_ASSIGN;
         l_DISCHARGE_INSTRUCTIONS(i) := col_in(i).DISCHARGE_INSTRUCTIONS;
         l_FLG_CSG_PATIENT(i) := col_in(i).FLG_CSG_PATIENT;
         l_DT_CSG_PATIENT(i) := col_in(i).DT_CSG_PATIENT;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE DISCHARGE_NOTES SET
               ID_EPISODE = NVL (l_ID_EPISODE(i), ID_EPISODE),
               ID_PROFESSIONAL = NVL (l_ID_PROFESSIONAL(i), ID_PROFESSIONAL),
               EPIS_COMPLAINT = NVL (l_EPIS_COMPLAINT(i), EPIS_COMPLAINT),
               EPIS_DIAGNOSIS = NVL (l_EPIS_DIAGNOSIS(i), EPIS_DIAGNOSIS),
               EPIS_TESTS = NVL (l_EPIS_TESTS(i), EPIS_TESTS),
               EPIS_DRUGS = NVL (l_EPIS_DRUGS(i), EPIS_DRUGS),
               RECOMMENDED = NVL (l_RECOMMENDED(i), RECOMMENDED),
               FLG_STATUS = NVL (l_FLG_STATUS(i), FLG_STATUS),
               ADW_LAST_UPDATE = NVL (l_ADW_LAST_UPDATE(i), ADW_LAST_UPDATE),
               ID_PROF_CANCEL = NVL (l_ID_PROF_CANCEL(i), ID_PROF_CANCEL),
               DT_CREATION_TSTZ = NVL (l_DT_CREATION_TSTZ(i), DT_CREATION_TSTZ),
               DT_CANCEL_TSTZ = NVL (l_DT_CANCEL_TSTZ(i), DT_CANCEL_TSTZ),
               RELEASE_FROM = NVL (l_RELEASE_FROM(i), RELEASE_FROM),
               DT_FROM = NVL (l_DT_FROM(i), DT_FROM),
               DT_UNTIL = NVL (l_DT_UNTIL(i), DT_UNTIL),
               NOTES_RELEASE = NVL (l_NOTES_RELEASE(i), NOTES_RELEASE),
               FOLLOW_UP_WITH = NVL (l_FOLLOW_UP_WITH(i), FOLLOW_UP_WITH),
               FOLLOW_UP_IN = NVL (l_FOLLOW_UP_IN(i), FOLLOW_UP_IN),
               INSTRUCTIONS_DISCUSSED = NVL (l_INSTRUCTIONS_DISCUSSED(i), INSTRUCTIONS_DISCUSSED),
               ID_FOLLOW_UP_TYPE = NVL (l_ID_FOLLOW_UP_TYPE(i), ID_FOLLOW_UP_TYPE),
               ID_EPIS_REPORT = NVL (l_ID_EPIS_REPORT(i), ID_EPIS_REPORT),
               ID_PATIENT = NVL (l_ID_PATIENT(i), ID_PATIENT),
               ID_PENDING_ISSUE = NVL (l_ID_PENDING_ISSUE(i), ID_PENDING_ISSUE),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
               FLG_ISSUE_ASSIGN = NVL (l_FLG_ISSUE_ASSIGN(i), FLG_ISSUE_ASSIGN),
               DISCHARGE_INSTRUCTIONS = NVL (l_DISCHARGE_INSTRUCTIONS(i), DISCHARGE_INSTRUCTIONS),
               FLG_CSG_PATIENT = NVL (l_FLG_CSG_PATIENT(i), FLG_CSG_PATIENT),
               DT_CSG_PATIENT = NVL (l_DT_CSG_PATIENT(i), DT_CSG_PATIENT)
             WHERE
                ID_DISCHARGE_NOTES = l_ID_DISCHARGE_NOTES(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE DISCHARGE_NOTES SET
               ID_EPISODE = l_ID_EPISODE(i),
               ID_PROFESSIONAL = l_ID_PROFESSIONAL(i),
               EPIS_COMPLAINT = l_EPIS_COMPLAINT(i),
               EPIS_DIAGNOSIS = l_EPIS_DIAGNOSIS(i),
               EPIS_TESTS = l_EPIS_TESTS(i),
               EPIS_DRUGS = l_EPIS_DRUGS(i),
               RECOMMENDED = l_RECOMMENDED(i),
               FLG_STATUS = l_FLG_STATUS(i),
               ADW_LAST_UPDATE = l_ADW_LAST_UPDATE(i),
               ID_PROF_CANCEL = l_ID_PROF_CANCEL(i),
               DT_CREATION_TSTZ = l_DT_CREATION_TSTZ(i),
               DT_CANCEL_TSTZ = l_DT_CANCEL_TSTZ(i),
               RELEASE_FROM = l_RELEASE_FROM(i),
               DT_FROM = l_DT_FROM(i),
               DT_UNTIL = l_DT_UNTIL(i),
               NOTES_RELEASE = l_NOTES_RELEASE(i),
               FOLLOW_UP_WITH = l_FOLLOW_UP_WITH(i),
               FOLLOW_UP_IN = l_FOLLOW_UP_IN(i),
               INSTRUCTIONS_DISCUSSED = l_INSTRUCTIONS_DISCUSSED(i),
               ID_FOLLOW_UP_TYPE = l_ID_FOLLOW_UP_TYPE(i),
               ID_EPIS_REPORT = l_ID_EPIS_REPORT(i),
               ID_PATIENT = l_ID_PATIENT(i),
               ID_PENDING_ISSUE = l_ID_PENDING_ISSUE(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
               FLG_ISSUE_ASSIGN = l_FLG_ISSUE_ASSIGN(i),
               DISCHARGE_INSTRUCTIONS = l_DISCHARGE_INSTRUCTIONS(i),
               FLG_CSG_PATIENT = l_FLG_CSG_PATIENT(i),
               DT_CSG_PATIENT = l_DT_CSG_PATIENT(i)
             WHERE
                ID_DISCHARGE_NOTES = l_ID_DISCHARGE_NOTES(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN DISCHARGE_NOTES_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE DISCHARGE_NOTES
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE DISCHARGE_NOTES
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE DISCHARGE_NOTES set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE DISCHARGE_NOTES set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_discharge_notes_in IN DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DISCHARGE_NOTES
       WHERE
          ID_DISCHARGE_NOTES = id_discharge_notes_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_discharge_notes_in IN DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_discharge_notes_in => id_discharge_notes_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_DISCHARGE_NOTES
   PROCEDURE del_ID_DISCHARGE_NOTES (
      id_discharge_notes_in IN DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM DISCHARGE_NOTES
       WHERE ID_DISCHARGE_NOTES = id_discharge_notes_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_DISCHARGE_NOTES;






   -- Delete all rows for primary key column ID_DISCHARGE_NOTES
   PROCEDURE del_ID_DISCHARGE_NOTES (
      id_discharge_notes_in IN DISCHARGE_NOTES.ID_DISCHARGE_NOTES%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_DISCHARGE_NOTES (
      id_discharge_notes_in => id_discharge_notes_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_DISCHARGE_NOTES;















   PROCEDURE del_DNT_EPI_RPT_FK (
      id_epis_report_in IN DISCHARGE_NOTES.ID_EPIS_REPORT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DISCHARGE_NOTES
       WHERE
          ID_EPIS_REPORT = del_DNT_EPI_RPT_FK.id_epis_report_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DNT_EPI_RPT_FK;



PROCEDURE del_DNT_EPI_RPT_FK (
      id_epis_report_in IN DISCHARGE_NOTES.ID_EPIS_REPORT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DNT_EPI_RPT_FK (
      id_epis_report_in => id_epis_report_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DNT_EPI_RPT_FK;





   PROCEDURE del_DNT_EPIS_FK (
      id_episode_in IN DISCHARGE_NOTES.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DISCHARGE_NOTES
       WHERE
          ID_EPISODE = del_DNT_EPIS_FK.id_episode_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DNT_EPIS_FK;



PROCEDURE del_DNT_EPIS_FK (
      id_episode_in IN DISCHARGE_NOTES.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DNT_EPIS_FK (
      id_episode_in => id_episode_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DNT_EPIS_FK;





   PROCEDURE del_DNT_F_UP_TY_FK (
      id_follow_up_type_in IN DISCHARGE_NOTES.ID_FOLLOW_UP_TYPE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DISCHARGE_NOTES
       WHERE
          ID_FOLLOW_UP_TYPE = del_DNT_F_UP_TY_FK.id_follow_up_type_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DNT_F_UP_TY_FK;



PROCEDURE del_DNT_F_UP_TY_FK (
      id_follow_up_type_in IN DISCHARGE_NOTES.ID_FOLLOW_UP_TYPE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DNT_F_UP_TY_FK (
      id_follow_up_type_in => id_follow_up_type_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DNT_F_UP_TY_FK;





   PROCEDURE del_DNT_PAT_FK (
      id_patient_in IN DISCHARGE_NOTES.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DISCHARGE_NOTES
       WHERE
          ID_PATIENT = del_DNT_PAT_FK.id_patient_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DNT_PAT_FK;



PROCEDURE del_DNT_PAT_FK (
      id_patient_in IN DISCHARGE_NOTES.ID_PATIENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DNT_PAT_FK (
      id_patient_in => id_patient_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DNT_PAT_FK;





   PROCEDURE del_DNT_PENDISSUE_FK (
      id_pending_issue_in IN DISCHARGE_NOTES.ID_PENDING_ISSUE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DISCHARGE_NOTES
       WHERE
          ID_PENDING_ISSUE = del_DNT_PENDISSUE_FK.id_pending_issue_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DNT_PENDISSUE_FK;



PROCEDURE del_DNT_PENDISSUE_FK (
      id_pending_issue_in IN DISCHARGE_NOTES.ID_PENDING_ISSUE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DNT_PENDISSUE_FK (
      id_pending_issue_in => id_pending_issue_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DNT_PENDISSUE_FK;





   PROCEDURE del_DNT_PROF_FK (
      id_professional_in IN DISCHARGE_NOTES.ID_PROFESSIONAL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DISCHARGE_NOTES
       WHERE
          ID_PROFESSIONAL = del_DNT_PROF_FK.id_professional_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DNT_PROF_FK;



PROCEDURE del_DNT_PROF_FK (
      id_professional_in IN DISCHARGE_NOTES.ID_PROFESSIONAL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DNT_PROF_FK (
      id_professional_in => id_professional_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DNT_PROF_FK;





   PROCEDURE del_DNT_PROF_FK2 (
      id_prof_cancel_in IN DISCHARGE_NOTES.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM DISCHARGE_NOTES
       WHERE
          ID_PROF_CANCEL = del_DNT_PROF_FK2.id_prof_cancel_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DNT_PROF_FK2;



PROCEDURE del_DNT_PROF_FK2 (
      id_prof_cancel_in IN DISCHARGE_NOTES.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DNT_PROF_FK2 (
      id_prof_cancel_in => id_prof_cancel_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_DNT_PROF_FK2;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM DISCHARGE_NOTES';
      ELSE
         RETURN
            'DELETE FROM DISCHARGE_NOTES WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'DISCHARGE_NOTES');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'DISCHARGE_NOTES');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      discharge_notes_inout IN OUT DISCHARGE_NOTES%ROWTYPE
   )
   IS
   BEGIN
      discharge_notes_inout.ID_DISCHARGE_NOTES := NULL;
      discharge_notes_inout.ID_EPISODE := NULL;
      discharge_notes_inout.ID_PROFESSIONAL := NULL;
      discharge_notes_inout.EPIS_COMPLAINT := NULL;
      discharge_notes_inout.EPIS_DIAGNOSIS := NULL;
      discharge_notes_inout.EPIS_TESTS := NULL;
      discharge_notes_inout.EPIS_DRUGS := NULL;
      discharge_notes_inout.RECOMMENDED := NULL;
      discharge_notes_inout.FLG_STATUS := NULL;
      discharge_notes_inout.ADW_LAST_UPDATE := sysdate;
      discharge_notes_inout.ID_PROF_CANCEL := NULL;
      discharge_notes_inout.DT_CREATION_TSTZ := NULL;
      discharge_notes_inout.DT_CANCEL_TSTZ := NULL;
      discharge_notes_inout.RELEASE_FROM := NULL;
      discharge_notes_inout.DT_FROM := NULL;
      discharge_notes_inout.DT_UNTIL := NULL;
      discharge_notes_inout.NOTES_RELEASE := NULL;
      discharge_notes_inout.FOLLOW_UP_WITH := NULL;
      discharge_notes_inout.FOLLOW_UP_IN := NULL;
      discharge_notes_inout.INSTRUCTIONS_DISCUSSED := NULL;
      discharge_notes_inout.ID_FOLLOW_UP_TYPE := NULL;
      discharge_notes_inout.ID_EPIS_REPORT := NULL;
      discharge_notes_inout.ID_PATIENT := NULL;
      discharge_notes_inout.ID_PENDING_ISSUE := NULL;
      discharge_notes_inout.CREATE_USER := NULL;
      discharge_notes_inout.CREATE_TIME := NULL;
      discharge_notes_inout.CREATE_INSTITUTION := NULL;
      discharge_notes_inout.UPDATE_USER := NULL;
      discharge_notes_inout.UPDATE_TIME := NULL;
      discharge_notes_inout.UPDATE_INSTITUTION := NULL;
      discharge_notes_inout.FLG_ISSUE_ASSIGN := NULL;
      discharge_notes_inout.DISCHARGE_INSTRUCTIONS := NULL;
      discharge_notes_inout.FLG_CSG_PATIENT := NULL;
      discharge_notes_inout.DT_CSG_PATIENT := NULL;
   END initrec;

   FUNCTION initrec RETURN DISCHARGE_NOTES%ROWTYPE
   IS
      l_discharge_notes DISCHARGE_NOTES%ROWTYPE;
   BEGIN
      l_discharge_notes.ADW_LAST_UPDATE := sysdate;
      RETURN l_discharge_notes;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN DISCHARGE_NOTES_tc
   IS
        data DISCHARGE_NOTES_tc;
   BEGIN
        select * bulk collect into data from DISCHARGE_NOTES where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN DISCHARGE_NOTES_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data DISCHARGE_NOTES_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_DISCHARGE_NOTES;
/
