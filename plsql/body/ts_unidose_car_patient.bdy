/*-- Last Change Revision: $Rev: 2028408 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:35 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_unidose_car_patient
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Novembro 21, 2008 18:26:40
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_unidose_car_patient_in IN unidose_car_patient.id_unidose_car_patient%TYPE,
        id_unidose_car_in         IN unidose_car_patient.id_unidose_car%TYPE DEFAULT NULL,
        id_institution_in         IN unidose_car_patient.id_institution%TYPE DEFAULT NULL,
        id_patient_in             IN unidose_car_patient.id_patient%TYPE DEFAULT NULL,
        id_container_in           IN unidose_car_patient.id_container%TYPE DEFAULT NULL,
        id_unidose_car_route_in   IN unidose_car_patient.id_unidose_car_route%TYPE DEFAULT NULL,
        flg_available_in          IN unidose_car_patient.flg_available%TYPE DEFAULT NULL,
        adw_date_in               IN unidose_car_patient.adw_date%TYPE DEFAULT NULL,
        bar_code_in               IN unidose_car_patient.bar_code%TYPE DEFAULT NULL,
        id_episode_in             IN unidose_car_patient.id_episode%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO unidose_car_patient
            (id_unidose_car_patient,
             id_unidose_car,
             id_institution,
             id_patient,
             id_container,
             id_unidose_car_route,
             flg_available,
             adw_date,
             bar_code,
             id_episode)
        VALUES
            (id_unidose_car_patient_in,
             id_unidose_car_in,
             id_institution_in,
             id_patient_in,
             id_container_in,
             id_unidose_car_route_in,
             flg_available_in,
             adw_date_in,
             bar_code_in,
             id_episode_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'UNIDOSE_CAR_PATIENT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    IF l_name = 'FK_UNIDOSE_CAR_PATIENT_C'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_UNIDOSE_CAR',
                                                        value_in           => id_unidose_car_in);
                    END IF;
                    IF l_name = 'FK_UNIDOSE_CAR_PATIENT_I'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'FK_UNIDOSE_CAR_PATIENT_P'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'FK_UNIDOSE_CAR_PATIENT_R'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_UNIDOSE_CAR_ROUTE',
                                                        value_in           => id_unidose_car_route_in);
                    END IF;
                    IF l_name = 'UCT_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_unidose_car_patient_in IN unidose_car_patient.id_unidose_car_patient%TYPE,
        id_unidose_car_in         IN unidose_car_patient.id_unidose_car%TYPE DEFAULT NULL,
        id_institution_in         IN unidose_car_patient.id_institution%TYPE DEFAULT NULL,
        id_patient_in             IN unidose_car_patient.id_patient%TYPE DEFAULT NULL,
        id_container_in           IN unidose_car_patient.id_container%TYPE DEFAULT NULL,
        id_unidose_car_route_in   IN unidose_car_patient.id_unidose_car_route%TYPE DEFAULT NULL,
        flg_available_in          IN unidose_car_patient.flg_available%TYPE DEFAULT NULL,
        adw_date_in               IN unidose_car_patient.adw_date%TYPE DEFAULT NULL,
        bar_code_in               IN unidose_car_patient.bar_code%TYPE DEFAULT NULL,
        id_episode_in             IN unidose_car_patient.id_episode%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_unidose_car_patient_in => id_unidose_car_patient_in,
            id_unidose_car_in         => id_unidose_car_in,
            id_institution_in         => id_institution_in,
            id_patient_in             => id_patient_in,
            id_container_in           => id_container_in,
            id_unidose_car_route_in   => id_unidose_car_route_in,
            flg_available_in          => flg_available_in,
            adw_date_in               => adw_date_in,
            bar_code_in               => bar_code_in,
            id_episode_in             => id_episode_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN unidose_car_patient%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec unidose_car_patient%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_unidose_car_patient := next_key(sequence_in);
        END IF;
        ins(id_unidose_car_patient_in => l_rec.id_unidose_car_patient,
            id_unidose_car_in         => l_rec.id_unidose_car,
            id_institution_in         => l_rec.id_institution,
            id_patient_in             => l_rec.id_patient,
            id_container_in           => l_rec.id_container,
            id_unidose_car_route_in   => l_rec.id_unidose_car_route,
            flg_available_in          => l_rec.flg_available,
            adw_date_in               => l_rec.adw_date,
            bar_code_in               => l_rec.bar_code,
            id_episode_in             => l_rec.id_episode,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN unidose_car_patient%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN unidose_car_patient.id_unidose_car_patient%TYPE
    
     IS
        retval unidose_car_patient.id_unidose_car_patient%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_unidose_car_patient.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_UNIDOSE_CAR_PATIENT'));
    END next_key;

    PROCEDURE ins
    (
        id_unidose_car_in          IN unidose_car_patient.id_unidose_car%TYPE DEFAULT NULL,
        id_institution_in          IN unidose_car_patient.id_institution%TYPE DEFAULT NULL,
        id_patient_in              IN unidose_car_patient.id_patient%TYPE DEFAULT NULL,
        id_container_in            IN unidose_car_patient.id_container%TYPE DEFAULT NULL,
        id_unidose_car_route_in    IN unidose_car_patient.id_unidose_car_route%TYPE DEFAULT NULL,
        flg_available_in           IN unidose_car_patient.flg_available%TYPE DEFAULT NULL,
        adw_date_in                IN unidose_car_patient.adw_date%TYPE DEFAULT NULL,
        bar_code_in                IN unidose_car_patient.bar_code%TYPE DEFAULT NULL,
        id_episode_in              IN unidose_car_patient.id_episode%TYPE DEFAULT NULL,
        id_unidose_car_patient_out IN OUT unidose_car_patient.id_unidose_car_patient%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
        l_pky unidose_car_patient.id_unidose_car_patient%TYPE := next_key;
    BEGIN
        ins(id_unidose_car_patient_in => l_pky,
            id_unidose_car_in         => id_unidose_car_in,
            id_institution_in         => id_institution_in,
            id_patient_in             => id_patient_in,
            id_container_in           => id_container_in,
            id_unidose_car_route_in   => id_unidose_car_route_in,
            flg_available_in          => flg_available_in,
            adw_date_in               => adw_date_in,
            bar_code_in               => bar_code_in,
            id_episode_in             => id_episode_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        id_unidose_car_patient_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_unidose_car_in          IN unidose_car_patient.id_unidose_car%TYPE DEFAULT NULL,
        id_institution_in          IN unidose_car_patient.id_institution%TYPE DEFAULT NULL,
        id_patient_in              IN unidose_car_patient.id_patient%TYPE DEFAULT NULL,
        id_container_in            IN unidose_car_patient.id_container%TYPE DEFAULT NULL,
        id_unidose_car_route_in    IN unidose_car_patient.id_unidose_car_route%TYPE DEFAULT NULL,
        flg_available_in           IN unidose_car_patient.flg_available%TYPE DEFAULT NULL,
        adw_date_in                IN unidose_car_patient.adw_date%TYPE DEFAULT NULL,
        bar_code_in                IN unidose_car_patient.bar_code%TYPE DEFAULT NULL,
        id_episode_in              IN unidose_car_patient.id_episode%TYPE DEFAULT NULL,
        id_unidose_car_patient_out IN OUT unidose_car_patient.id_unidose_car_patient%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_unidose_car_in          => id_unidose_car_in,
            id_institution_in          => id_institution_in,
            id_patient_in              => id_patient_in,
            id_container_in            => id_container_in,
            id_unidose_car_route_in    => id_unidose_car_route_in,
            flg_available_in           => flg_available_in,
            adw_date_in                => adw_date_in,
            bar_code_in                => bar_code_in,
            id_episode_in              => id_episode_in,
            id_unidose_car_patient_out => id_unidose_car_patient_out,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    FUNCTION ins
    (
        id_unidose_car_in       IN unidose_car_patient.id_unidose_car%TYPE DEFAULT NULL,
        id_institution_in       IN unidose_car_patient.id_institution%TYPE DEFAULT NULL,
        id_patient_in           IN unidose_car_patient.id_patient%TYPE DEFAULT NULL,
        id_container_in         IN unidose_car_patient.id_container%TYPE DEFAULT NULL,
        id_unidose_car_route_in IN unidose_car_patient.id_unidose_car_route%TYPE DEFAULT NULL,
        flg_available_in        IN unidose_car_patient.flg_available%TYPE DEFAULT NULL,
        adw_date_in             IN unidose_car_patient.adw_date%TYPE DEFAULT NULL,
        bar_code_in             IN unidose_car_patient.bar_code%TYPE DEFAULT NULL,
        id_episode_in           IN unidose_car_patient.id_episode%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) RETURN unidose_car_patient.id_unidose_car_patient%TYPE IS
        l_pky unidose_car_patient.id_unidose_car_patient%TYPE := next_key;
    BEGIN
        ins(id_unidose_car_patient_in => l_pky,
            id_unidose_car_in         => id_unidose_car_in,
            id_institution_in         => id_institution_in,
            id_patient_in             => id_patient_in,
            id_container_in           => id_container_in,
            id_unidose_car_route_in   => id_unidose_car_route_in,
            flg_available_in          => flg_available_in,
            adw_date_in               => adw_date_in,
            bar_code_in               => bar_code_in,
            id_episode_in             => id_episode_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_unidose_car_in       IN unidose_car_patient.id_unidose_car%TYPE DEFAULT NULL,
        id_institution_in       IN unidose_car_patient.id_institution%TYPE DEFAULT NULL,
        id_patient_in           IN unidose_car_patient.id_patient%TYPE DEFAULT NULL,
        id_container_in         IN unidose_car_patient.id_container%TYPE DEFAULT NULL,
        id_unidose_car_route_in IN unidose_car_patient.id_unidose_car_route%TYPE DEFAULT NULL,
        flg_available_in        IN unidose_car_patient.flg_available%TYPE DEFAULT NULL,
        adw_date_in             IN unidose_car_patient.adw_date%TYPE DEFAULT NULL,
        bar_code_in             IN unidose_car_patient.bar_code%TYPE DEFAULT NULL,
        id_episode_in           IN unidose_car_patient.id_episode%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) RETURN unidose_car_patient.id_unidose_car_patient%TYPE IS
        l_pky    unidose_car_patient.id_unidose_car_patient%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_unidose_car_patient_in => l_pky,
            id_unidose_car_in         => id_unidose_car_in,
            id_institution_in         => id_institution_in,
            id_patient_in             => id_patient_in,
            id_container_in           => id_container_in,
            id_unidose_car_route_in   => id_unidose_car_route_in,
            flg_available_in          => flg_available_in,
            adw_date_in               => adw_date_in,
            bar_code_in               => bar_code_in,
            id_episode_in             => id_episode_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_unidose_car_in       IN unidose_car_patient.id_unidose_car%TYPE DEFAULT NULL,
        id_institution_in       IN unidose_car_patient.id_institution%TYPE DEFAULT NULL,
        id_patient_in           IN unidose_car_patient.id_patient%TYPE DEFAULT NULL,
        id_container_in         IN unidose_car_patient.id_container%TYPE DEFAULT NULL,
        id_unidose_car_route_in IN unidose_car_patient.id_unidose_car_route%TYPE DEFAULT NULL,
        flg_available_in        IN unidose_car_patient.flg_available%TYPE DEFAULT NULL,
        adw_date_in             IN unidose_car_patient.adw_date%TYPE DEFAULT NULL,
        bar_code_in             IN unidose_car_patient.bar_code%TYPE DEFAULT NULL,
        id_episode_in           IN unidose_car_patient.id_episode%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
        l_pky unidose_car_patient.id_unidose_car_patient%TYPE := next_key;
    BEGIN
        ins(id_unidose_car_patient_in => l_pky,
            id_unidose_car_in         => id_unidose_car_in,
            id_institution_in         => id_institution_in,
            id_patient_in             => id_patient_in,
            id_container_in           => id_container_in,
            id_unidose_car_route_in   => id_unidose_car_route_in,
            flg_available_in          => flg_available_in,
            adw_date_in               => adw_date_in,
            bar_code_in               => bar_code_in,
            id_episode_in             => id_episode_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_unidose_car_in       IN unidose_car_patient.id_unidose_car%TYPE DEFAULT NULL,
        id_institution_in       IN unidose_car_patient.id_institution%TYPE DEFAULT NULL,
        id_patient_in           IN unidose_car_patient.id_patient%TYPE DEFAULT NULL,
        id_container_in         IN unidose_car_patient.id_container%TYPE DEFAULT NULL,
        id_unidose_car_route_in IN unidose_car_patient.id_unidose_car_route%TYPE DEFAULT NULL,
        flg_available_in        IN unidose_car_patient.flg_available%TYPE DEFAULT NULL,
        adw_date_in             IN unidose_car_patient.adw_date%TYPE DEFAULT NULL,
        bar_code_in             IN unidose_car_patient.bar_code%TYPE DEFAULT NULL,
        id_episode_in           IN unidose_car_patient.id_episode%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        l_pky    unidose_car_patient.id_unidose_car_patient%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_unidose_car_patient_in => l_pky,
            id_unidose_car_in         => id_unidose_car_in,
            id_institution_in         => id_institution_in,
            id_patient_in             => id_patient_in,
            id_container_in           => id_container_in,
            id_unidose_car_route_in   => id_unidose_car_route_in,
            flg_available_in          => flg_available_in,
            adw_date_in               => adw_date_in,
            bar_code_in               => bar_code_in,
            id_episode_in             => id_episode_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN unidose_car_patient_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO unidose_car_patient
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_UNIDOSE_CAR_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_unidose_car_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_UNIDOSE_CAR _' || indx,
                                                        value_in           => rows_in(indx).id_unidose_car,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CONTAINER _' || indx,
                                                        value_in           => rows_in(indx).id_container,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_UNIDOSE_CAR_ROUTE _' || indx,
                                                        value_in           => rows_in(indx).id_unidose_car_route,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_AVAILABLE _' || indx,
                                                        value_in           => rows_in(indx).flg_available,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ADW_DATE _' || indx,
                                                        value_in           => rows_in(indx).adw_date,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BAR_CODE _' || indx,
                                                        value_in           => rows_in(indx).bar_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'UNIDOSE_CAR_PATIENT',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN unidose_car_patient_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_unidose_car_patient_in IN unidose_car_patient.id_unidose_car_patient%TYPE,
        id_unidose_car_in         IN unidose_car_patient.id_unidose_car%TYPE DEFAULT NULL,
        id_unidose_car_nin        IN BOOLEAN := TRUE,
        id_institution_in         IN unidose_car_patient.id_institution%TYPE DEFAULT NULL,
        id_institution_nin        IN BOOLEAN := TRUE,
        id_patient_in             IN unidose_car_patient.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_container_in           IN unidose_car_patient.id_container%TYPE DEFAULT NULL,
        id_container_nin          IN BOOLEAN := TRUE,
        id_unidose_car_route_in   IN unidose_car_patient.id_unidose_car_route%TYPE DEFAULT NULL,
        id_unidose_car_route_nin  IN BOOLEAN := TRUE,
        flg_available_in          IN unidose_car_patient.flg_available%TYPE DEFAULT NULL,
        flg_available_nin         IN BOOLEAN := TRUE,
        adw_date_in               IN unidose_car_patient.adw_date%TYPE DEFAULT NULL,
        adw_date_nin              IN BOOLEAN := TRUE,
        bar_code_in               IN unidose_car_patient.bar_code%TYPE DEFAULT NULL,
        bar_code_nin              IN BOOLEAN := TRUE,
        id_episode_in             IN unidose_car_patient.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_rows_out               table_varchar;
        l_id_unidose_car_n       NUMBER(1);
        l_id_institution_n       NUMBER(1);
        l_id_patient_n           NUMBER(1);
        l_id_container_n         NUMBER(1);
        l_id_unidose_car_route_n NUMBER(1);
        l_flg_available_n        NUMBER(1);
        l_adw_date_n             NUMBER(1);
        l_bar_code_n             NUMBER(1);
        l_id_episode_n           NUMBER(1);
    BEGIN
    
        l_id_unidose_car_n       := sys.diutil.bool_to_int(id_unidose_car_nin);
        l_id_institution_n       := sys.diutil.bool_to_int(id_institution_nin);
        l_id_patient_n           := sys.diutil.bool_to_int(id_patient_nin);
        l_id_container_n         := sys.diutil.bool_to_int(id_container_nin);
        l_id_unidose_car_route_n := sys.diutil.bool_to_int(id_unidose_car_route_nin);
        l_flg_available_n        := sys.diutil.bool_to_int(flg_available_nin);
        l_adw_date_n             := sys.diutil.bool_to_int(adw_date_nin);
        l_bar_code_n             := sys.diutil.bool_to_int(bar_code_nin);
        l_id_episode_n           := sys.diutil.bool_to_int(id_episode_nin);
    
        UPDATE unidose_car_patient
           SET id_unidose_car       = decode(l_id_unidose_car_n,
                                             0,
                                             id_unidose_car_in,
                                             nvl(id_unidose_car_in, id_unidose_car)),
               id_institution       = decode(l_id_institution_n,
                                             0,
                                             id_institution_in,
                                             nvl(id_institution_in, id_institution)),
               id_patient           = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_container         = decode(l_id_container_n, 0, id_container_in, nvl(id_container_in, id_container)),
               id_unidose_car_route = decode(l_id_unidose_car_route_n,
                                             0,
                                             id_unidose_car_route_in,
                                             nvl(id_unidose_car_route_in, id_unidose_car_route)),
               flg_available        = decode(l_flg_available_n,
                                             0,
                                             flg_available_in,
                                             nvl(flg_available_in, flg_available)),
               adw_date             = decode(l_adw_date_n, 0, adw_date_in, nvl(adw_date_in, adw_date)),
               bar_code             = decode(l_bar_code_n, 0, bar_code_in, nvl(bar_code_in, bar_code)),
               id_episode           = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode))
         WHERE id_unidose_car_patient = id_unidose_car_patient_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'UNIDOSE_CAR_PATIENT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    IF l_name = 'FK_UNIDOSE_CAR_PATIENT_C'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_UNIDOSE_CAR',
                                                        value_in           => id_unidose_car_in);
                    END IF;
                    IF l_name = 'FK_UNIDOSE_CAR_PATIENT_I'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'FK_UNIDOSE_CAR_PATIENT_P'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'FK_UNIDOSE_CAR_PATIENT_R'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_UNIDOSE_CAR_ROUTE',
                                                        value_in           => id_unidose_car_route_in);
                    END IF;
                    IF l_name = 'UCT_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_unidose_car_patient_in IN unidose_car_patient.id_unidose_car_patient%TYPE,
        id_unidose_car_in         IN unidose_car_patient.id_unidose_car%TYPE DEFAULT NULL,
        id_unidose_car_nin        IN BOOLEAN := TRUE,
        id_institution_in         IN unidose_car_patient.id_institution%TYPE DEFAULT NULL,
        id_institution_nin        IN BOOLEAN := TRUE,
        id_patient_in             IN unidose_car_patient.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_container_in           IN unidose_car_patient.id_container%TYPE DEFAULT NULL,
        id_container_nin          IN BOOLEAN := TRUE,
        id_unidose_car_route_in   IN unidose_car_patient.id_unidose_car_route%TYPE DEFAULT NULL,
        id_unidose_car_route_nin  IN BOOLEAN := TRUE,
        flg_available_in          IN unidose_car_patient.flg_available%TYPE DEFAULT NULL,
        flg_available_nin         IN BOOLEAN := TRUE,
        adw_date_in               IN unidose_car_patient.adw_date%TYPE DEFAULT NULL,
        adw_date_nin              IN BOOLEAN := TRUE,
        bar_code_in               IN unidose_car_patient.bar_code%TYPE DEFAULT NULL,
        bar_code_nin              IN BOOLEAN := TRUE,
        id_episode_in             IN unidose_car_patient.id_episode%TYPE DEFAULT NULL,
        id_episode_nin            IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_unidose_car_patient_in => id_unidose_car_patient_in,
            id_unidose_car_in         => id_unidose_car_in,
            id_unidose_car_nin        => id_unidose_car_nin,
            id_institution_in         => id_institution_in,
            id_institution_nin        => id_institution_nin,
            id_patient_in             => id_patient_in,
            id_patient_nin            => id_patient_nin,
            id_container_in           => id_container_in,
            id_container_nin          => id_container_nin,
            id_unidose_car_route_in   => id_unidose_car_route_in,
            id_unidose_car_route_nin  => id_unidose_car_route_nin,
            flg_available_in          => flg_available_in,
            flg_available_nin         => flg_available_nin,
            adw_date_in               => adw_date_in,
            adw_date_nin              => adw_date_nin,
            bar_code_in               => bar_code_in,
            bar_code_nin              => bar_code_nin,
            id_episode_in             => id_episode_in,
            id_episode_nin            => id_episode_nin,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_unidose_car_in        IN unidose_car_patient.id_unidose_car%TYPE DEFAULT NULL,
        id_unidose_car_nin       IN BOOLEAN := TRUE,
        id_institution_in        IN unidose_car_patient.id_institution%TYPE DEFAULT NULL,
        id_institution_nin       IN BOOLEAN := TRUE,
        id_patient_in            IN unidose_car_patient.id_patient%TYPE DEFAULT NULL,
        id_patient_nin           IN BOOLEAN := TRUE,
        id_container_in          IN unidose_car_patient.id_container%TYPE DEFAULT NULL,
        id_container_nin         IN BOOLEAN := TRUE,
        id_unidose_car_route_in  IN unidose_car_patient.id_unidose_car_route%TYPE DEFAULT NULL,
        id_unidose_car_route_nin IN BOOLEAN := TRUE,
        flg_available_in         IN unidose_car_patient.flg_available%TYPE DEFAULT NULL,
        flg_available_nin        IN BOOLEAN := TRUE,
        adw_date_in              IN unidose_car_patient.adw_date%TYPE DEFAULT NULL,
        adw_date_nin             IN BOOLEAN := TRUE,
        bar_code_in              IN unidose_car_patient.bar_code%TYPE DEFAULT NULL,
        bar_code_nin             IN BOOLEAN := TRUE,
        id_episode_in            IN unidose_car_patient.id_episode%TYPE DEFAULT NULL,
        id_episode_nin           IN BOOLEAN := TRUE,
        where_in                 VARCHAR2 DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    ) IS
        l_sql                     VARCHAR2(32767);
        l_rows_out                table_varchar;
        l_id_unidose_car_n        NUMBER(1);
        l_id_institution_n        NUMBER(1);
        l_id_patient_n            NUMBER(1);
        l_id_container_n          NUMBER(1);
        l_id_unidose_car_route_n  NUMBER(1);
        l_flg_available_n         NUMBER(1);
        l_adw_date_n              NUMBER(1);
        l_bar_code_n              NUMBER(1);
        l_id_episode_n            NUMBER(1);
        id_unidose_car_patient_in unidose_car_patient.id_unidose_car_patient%TYPE;
    BEGIN
    
        l_id_unidose_car_n       := sys.diutil.bool_to_int(id_unidose_car_nin);
        l_id_institution_n       := sys.diutil.bool_to_int(id_institution_nin);
        l_id_patient_n           := sys.diutil.bool_to_int(id_patient_nin);
        l_id_container_n         := sys.diutil.bool_to_int(id_container_nin);
        l_id_unidose_car_route_n := sys.diutil.bool_to_int(id_unidose_car_route_nin);
        l_flg_available_n        := sys.diutil.bool_to_int(flg_available_nin);
        l_adw_date_n             := sys.diutil.bool_to_int(adw_date_nin);
        l_bar_code_n             := sys.diutil.bool_to_int(bar_code_nin);
        l_id_episode_n           := sys.diutil.bool_to_int(id_episode_nin);
    
        l_sql := 'UPDATE UNIDOSE_CAR_PATIENT SET ' || ' ID_UNIDOSE_CAR = decode (' || l_id_unidose_car_n ||
                 ',0,:id_unidose_car_in, NVL (:id_unidose_car_in, ID_UNIDOSE_CAR)) ' || ',' ||
                 ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                 ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' || ' ID_PATIENT = decode (' ||
                 l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' ID_CONTAINER = decode (' || l_id_container_n ||
                 ',0,:id_container_in, NVL (:id_container_in, ID_CONTAINER)) ' || ',' ||
                 ' ID_UNIDOSE_CAR_ROUTE = decode (' || l_id_unidose_car_route_n ||
                 ',0,:id_unidose_car_route_in, NVL (:id_unidose_car_route_in, ID_UNIDOSE_CAR_ROUTE)) ' || ',' ||
                 ' FLG_AVAILABLE = decode (' || l_flg_available_n ||
                 ',0,:flg_available_in, NVL (:flg_available_in, FLG_AVAILABLE)) ' || ',' || ' ADW_DATE = decode (' ||
                 l_adw_date_n || ',0,:adw_date_in, NVL (:adw_date_in, ADW_DATE)) ' || ',' || ' BAR_CODE = decode (' ||
                 l_bar_code_n || ',0,:bar_code_in, NVL (:bar_code_in, BAR_CODE)) ' || ',' || ' ID_EPISODE = decode (' ||
                 l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_unidose_car_in, id_institution_in, id_patient_in, id_container_in, id_unidose_car_route_in, flg_available_in, adw_date_in, bar_code_in, id_episode_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'UNIDOSE_CAR_PATIENT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    IF l_name = 'FK_UNIDOSE_CAR_PATIENT_C'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_UNIDOSE_CAR',
                                                        value_in           => id_unidose_car_in);
                    END IF;
                    IF l_name = 'FK_UNIDOSE_CAR_PATIENT_I'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'FK_UNIDOSE_CAR_PATIENT_P'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'FK_UNIDOSE_CAR_PATIENT_R'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_UNIDOSE_CAR_ROUTE',
                                                        value_in           => id_unidose_car_route_in);
                    END IF;
                    IF l_name = 'UCT_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_unidose_car_in        IN unidose_car_patient.id_unidose_car%TYPE DEFAULT NULL,
        id_unidose_car_nin       IN BOOLEAN := TRUE,
        id_institution_in        IN unidose_car_patient.id_institution%TYPE DEFAULT NULL,
        id_institution_nin       IN BOOLEAN := TRUE,
        id_patient_in            IN unidose_car_patient.id_patient%TYPE DEFAULT NULL,
        id_patient_nin           IN BOOLEAN := TRUE,
        id_container_in          IN unidose_car_patient.id_container%TYPE DEFAULT NULL,
        id_container_nin         IN BOOLEAN := TRUE,
        id_unidose_car_route_in  IN unidose_car_patient.id_unidose_car_route%TYPE DEFAULT NULL,
        id_unidose_car_route_nin IN BOOLEAN := TRUE,
        flg_available_in         IN unidose_car_patient.flg_available%TYPE DEFAULT NULL,
        flg_available_nin        IN BOOLEAN := TRUE,
        adw_date_in              IN unidose_car_patient.adw_date%TYPE DEFAULT NULL,
        adw_date_nin             IN BOOLEAN := TRUE,
        bar_code_in              IN unidose_car_patient.bar_code%TYPE DEFAULT NULL,
        bar_code_nin             IN BOOLEAN := TRUE,
        id_episode_in            IN unidose_car_patient.id_episode%TYPE DEFAULT NULL,
        id_episode_nin           IN BOOLEAN := TRUE,
        where_in                 VARCHAR2 DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_unidose_car_in        => id_unidose_car_in,
            id_unidose_car_nin       => id_unidose_car_nin,
            id_institution_in        => id_institution_in,
            id_institution_nin       => id_institution_nin,
            id_patient_in            => id_patient_in,
            id_patient_nin           => id_patient_nin,
            id_container_in          => id_container_in,
            id_container_nin         => id_container_nin,
            id_unidose_car_route_in  => id_unidose_car_route_in,
            id_unidose_car_route_nin => id_unidose_car_route_nin,
            flg_available_in         => flg_available_in,
            flg_available_nin        => flg_available_nin,
            adw_date_in              => adw_date_in,
            adw_date_nin             => adw_date_nin,
            bar_code_in              => bar_code_in,
            bar_code_nin             => bar_code_nin,
            id_episode_in            => id_episode_in,
            id_episode_nin           => id_episode_nin,
            where_in                 => where_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN unidose_car_patient%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_unidose_car_patient_in => rec_in.id_unidose_car_patient,
            id_unidose_car_in         => rec_in.id_unidose_car,
            id_institution_in         => rec_in.id_institution,
            id_patient_in             => rec_in.id_patient,
            id_container_in           => rec_in.id_container,
            id_unidose_car_route_in   => rec_in.id_unidose_car_route,
            flg_available_in          => rec_in.flg_available,
            adw_date_in               => rec_in.adw_date,
            bar_code_in               => rec_in.bar_code,
            id_episode_in             => rec_in.id_episode
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN unidose_car_patient%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_unidose_car_patient_in => rec_in.id_unidose_car_patient,
            id_unidose_car_in         => rec_in.id_unidose_car,
            id_institution_in         => rec_in.id_institution,
            id_patient_in             => rec_in.id_patient,
            id_container_in           => rec_in.id_container,
            id_unidose_car_route_in   => rec_in.id_unidose_car_route,
            flg_available_in          => rec_in.flg_available,
            adw_date_in               => rec_in.adw_date,
            bar_code_in               => rec_in.bar_code,
            id_episode_in             => rec_in.id_episode
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_unidose_car_patient_in IN unidose_car_patient.id_unidose_car_patient%TYPE,
        id_unidose_car_in         IN unidose_car_patient.id_unidose_car%TYPE DEFAULT NULL,
        id_institution_in         IN unidose_car_patient.id_institution%TYPE DEFAULT NULL,
        id_patient_in             IN unidose_car_patient.id_patient%TYPE DEFAULT NULL,
        id_container_in           IN unidose_car_patient.id_container%TYPE DEFAULT NULL,
        id_unidose_car_route_in   IN unidose_car_patient.id_unidose_car_route%TYPE DEFAULT NULL,
        flg_available_in          IN unidose_car_patient.flg_available%TYPE DEFAULT NULL,
        adw_date_in               IN unidose_car_patient.adw_date%TYPE DEFAULT NULL,
        bar_code_in               IN unidose_car_patient.bar_code%TYPE DEFAULT NULL,
        id_episode_in             IN unidose_car_patient.id_episode%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        upd(id_unidose_car_patient_in => id_unidose_car_patient_in,
            id_unidose_car_in         => id_unidose_car_in,
            id_institution_in         => id_institution_in,
            id_patient_in             => id_patient_in,
            id_container_in           => id_container_in,
            id_unidose_car_route_in   => id_unidose_car_route_in,
            flg_available_in          => flg_available_in,
            adw_date_in               => adw_date_in,
            bar_code_in               => bar_code_in,
            id_episode_in             => id_episode_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_unidose_car_patient_in => id_unidose_car_patient_in,
                id_unidose_car_in         => id_unidose_car_in,
                id_institution_in         => id_institution_in,
                id_patient_in             => id_patient_in,
                id_container_in           => id_container_in,
                id_unidose_car_route_in   => id_unidose_car_route_in,
                flg_available_in          => flg_available_in,
                adw_date_in               => adw_date_in,
                bar_code_in               => bar_code_in,
                id_episode_in             => id_episode_in,
                handle_error_in           => handle_error_in,
                rows_out                  => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_unidose_car_patient_in IN unidose_car_patient.id_unidose_car_patient%TYPE,
        id_unidose_car_in         IN unidose_car_patient.id_unidose_car%TYPE DEFAULT NULL,
        id_institution_in         IN unidose_car_patient.id_institution%TYPE DEFAULT NULL,
        id_patient_in             IN unidose_car_patient.id_patient%TYPE DEFAULT NULL,
        id_container_in           IN unidose_car_patient.id_container%TYPE DEFAULT NULL,
        id_unidose_car_route_in   IN unidose_car_patient.id_unidose_car_route%TYPE DEFAULT NULL,
        flg_available_in          IN unidose_car_patient.flg_available%TYPE DEFAULT NULL,
        adw_date_in               IN unidose_car_patient.adw_date%TYPE DEFAULT NULL,
        bar_code_in               IN unidose_car_patient.bar_code%TYPE DEFAULT NULL,
        id_episode_in             IN unidose_car_patient.id_episode%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_unidose_car_patient_in,
                id_unidose_car_in,
                id_institution_in,
                id_patient_in,
                id_container_in,
                id_unidose_car_route_in,
                flg_available_in,
                adw_date_in,
                bar_code_in,
                id_episode_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN unidose_car_patient_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_unidose_car_patient id_unidose_car_patient_cc;
        l_id_unidose_car         id_unidose_car_cc;
        l_id_institution         id_institution_cc;
        l_id_patient             id_patient_cc;
        l_id_container           id_container_cc;
        l_id_unidose_car_route   id_unidose_car_route_cc;
        l_flg_available          flg_available_cc;
        l_adw_date               adw_date_cc;
        l_bar_code               bar_code_cc;
        l_id_episode             id_episode_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_unidose_car_patient(i) := col_in(i).id_unidose_car_patient;
            l_id_unidose_car(i) := col_in(i).id_unidose_car;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_container(i) := col_in(i).id_container;
            l_id_unidose_car_route(i) := col_in(i).id_unidose_car_route;
            l_flg_available(i) := col_in(i).flg_available;
            l_adw_date(i) := col_in(i).adw_date;
            l_bar_code(i) := col_in(i).bar_code;
            l_id_episode(i) := col_in(i).id_episode;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE unidose_car_patient
                   SET id_unidose_car       = nvl(l_id_unidose_car(i), id_unidose_car),
                       id_institution       = nvl(l_id_institution(i), id_institution),
                       id_patient           = nvl(l_id_patient(i), id_patient),
                       id_container         = nvl(l_id_container(i), id_container),
                       id_unidose_car_route = nvl(l_id_unidose_car_route(i), id_unidose_car_route),
                       flg_available        = nvl(l_flg_available(i), flg_available),
                       adw_date             = nvl(l_adw_date(i), adw_date),
                       bar_code             = nvl(l_bar_code(i), bar_code),
                       id_episode           = nvl(l_id_episode(i), id_episode)
                 WHERE id_unidose_car_patient = l_id_unidose_car_patient(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE unidose_car_patient
                   SET id_unidose_car       = l_id_unidose_car(i),
                       id_institution       = l_id_institution(i),
                       id_patient           = l_id_patient(i),
                       id_container         = l_id_container(i),
                       id_unidose_car_route = l_id_unidose_car_route(i),
                       flg_available        = l_flg_available(i),
                       adw_date             = l_adw_date(i),
                       bar_code             = l_bar_code(i),
                       id_episode           = l_id_episode(i)
                 WHERE id_unidose_car_patient = l_id_unidose_car_patient(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN unidose_car_patient_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE UNIDOSE_CAR_PATIENT
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE UNIDOSE_CAR_PATIENT
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE UNIDOSE_CAR_PATIENT set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE UNIDOSE_CAR_PATIENT set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_unidose_car_patient_in IN unidose_car_patient.id_unidose_car_patient%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM unidose_car_patient
         WHERE id_unidose_car_patient = id_unidose_car_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_unidose_car_patient_in IN unidose_car_patient.id_unidose_car_patient%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_unidose_car_patient_in => id_unidose_car_patient_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_UNIDOSE_CAR_PATIENT
    PROCEDURE del_id_unidose_car_patient
    (
        id_unidose_car_patient_in IN unidose_car_patient.id_unidose_car_patient%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM unidose_car_patient
         WHERE id_unidose_car_patient = id_unidose_car_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_unidose_car_patient;

    -- Delete all rows for primary key column ID_UNIDOSE_CAR_PATIENT
    PROCEDURE del_id_unidose_car_patient
    (
        id_unidose_car_patient_in IN unidose_car_patient.id_unidose_car_patient%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_unidose_car_patient(id_unidose_car_patient_in => id_unidose_car_patient_in,
                                   handle_error_in           => handle_error_in,
                                   rows_out                  => rows_out);
    END del_id_unidose_car_patient;

    PROCEDURE del_fk_unidose_car_patient_c
    (
        id_unidose_car_in IN unidose_car_patient.id_unidose_car%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM unidose_car_patient
         WHERE id_unidose_car = del_fk_unidose_car_patient_c.id_unidose_car_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_fk_unidose_car_patient_c;

    PROCEDURE del_fk_unidose_car_patient_c
    (
        id_unidose_car_in IN unidose_car_patient.id_unidose_car%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_fk_unidose_car_patient_c(id_unidose_car_in => id_unidose_car_in,
                                     handle_error_in   => handle_error_in,
                                     rows_out          => rows_out);
    END del_fk_unidose_car_patient_c;

    PROCEDURE del_fk_unidose_car_patient_i
    (
        id_institution_in IN unidose_car_patient.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM unidose_car_patient
         WHERE id_institution = del_fk_unidose_car_patient_i.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_fk_unidose_car_patient_i;

    PROCEDURE del_fk_unidose_car_patient_i
    (
        id_institution_in IN unidose_car_patient.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_fk_unidose_car_patient_i(id_institution_in => id_institution_in,
                                     handle_error_in   => handle_error_in,
                                     rows_out          => rows_out);
    END del_fk_unidose_car_patient_i;

    PROCEDURE del_fk_unidose_car_patient_p
    (
        id_patient_in   IN unidose_car_patient.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM unidose_car_patient
         WHERE id_patient = del_fk_unidose_car_patient_p.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_fk_unidose_car_patient_p;

    PROCEDURE del_fk_unidose_car_patient_p
    (
        id_patient_in   IN unidose_car_patient.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_fk_unidose_car_patient_p(id_patient_in   => id_patient_in,
                                     handle_error_in => handle_error_in,
                                     rows_out        => rows_out);
    END del_fk_unidose_car_patient_p;

    PROCEDURE del_fk_unidose_car_patient_r
    (
        id_unidose_car_route_in IN unidose_car_patient.id_unidose_car_route%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM unidose_car_patient
         WHERE id_unidose_car_route = del_fk_unidose_car_patient_r.id_unidose_car_route_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_fk_unidose_car_patient_r;

    PROCEDURE del_fk_unidose_car_patient_r
    (
        id_unidose_car_route_in IN unidose_car_patient.id_unidose_car_route%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_fk_unidose_car_patient_r(id_unidose_car_route_in => id_unidose_car_route_in,
                                     handle_error_in         => handle_error_in,
                                     rows_out                => rows_out);
    END del_fk_unidose_car_patient_r;

    PROCEDURE del_uct_epis_fk
    (
        id_episode_in   IN unidose_car_patient.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM unidose_car_patient
         WHERE id_episode = del_uct_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_uct_epis_fk;

    PROCEDURE del_uct_epis_fk
    (
        id_episode_in   IN unidose_car_patient.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_uct_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_uct_epis_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM UNIDOSE_CAR_PATIENT';
        ELSE
            RETURN 'DELETE FROM UNIDOSE_CAR_PATIENT WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'UNIDOSE_CAR_PATIENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'UNIDOSE_CAR_PATIENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(unidose_car_patient_inout IN OUT unidose_car_patient%ROWTYPE) IS
    BEGIN
        unidose_car_patient_inout.id_unidose_car_patient := NULL;
        unidose_car_patient_inout.id_unidose_car         := NULL;
        unidose_car_patient_inout.id_institution         := NULL;
        unidose_car_patient_inout.id_patient             := NULL;
        unidose_car_patient_inout.id_container           := NULL;
        unidose_car_patient_inout.id_unidose_car_route   := NULL;
        unidose_car_patient_inout.flg_available          := NULL;
        unidose_car_patient_inout.adw_date               := NULL;
        unidose_car_patient_inout.bar_code               := NULL;
        unidose_car_patient_inout.id_episode             := NULL;
    END initrec;

    FUNCTION initrec RETURN unidose_car_patient%ROWTYPE IS
        l_unidose_car_patient unidose_car_patient%ROWTYPE;
    BEGIN
        RETURN l_unidose_car_patient;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN unidose_car_patient_tc IS
        data unidose_car_patient_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM unidose_car_patient
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN unidose_car_patient_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data unidose_car_patient_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_unidose_car_patient;
/
