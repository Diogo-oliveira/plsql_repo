/*-- Last Change Revision: $Rev: 2027970 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:43:50 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_bmng_department_ea
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Julho 29, 2009 15:57:33
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_department_in            IN bmng_department_ea.id_department%TYPE,
        total_ocuppied_nch_hours_in IN bmng_department_ea.total_ocuppied_nch_hours%TYPE DEFAULT 0,
        total_unavailable_beds_in   IN bmng_department_ea.total_unavailable_beds%TYPE DEFAULT 0,
        beds_blocked_in             IN bmng_department_ea.beds_blocked%TYPE DEFAULT 0,
        beds_reserved_in            IN bmng_department_ea.beds_reserved%TYPE DEFAULT 0,
        beds_ocuppied_in            IN bmng_department_ea.beds_ocuppied%TYPE DEFAULT 0,
        total_available_beds_in     IN bmng_department_ea.total_available_beds%TYPE DEFAULT 0,
        create_user_in              IN bmng_department_ea.create_user%TYPE DEFAULT NULL,
        create_time_in              IN bmng_department_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN bmng_department_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN bmng_department_ea.update_user%TYPE DEFAULT NULL,
        update_time_in              IN bmng_department_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN bmng_department_ea.update_institution%TYPE DEFAULT NULL,
        total_avail_nch_hours_in    IN bmng_department_ea.total_avail_nch_hours%TYPE DEFAULT NULL,
        dt_dg_last_update_in        IN bmng_department_ea.dt_dg_last_update%TYPE DEFAULT current_timestamp,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO bmng_department_ea
            (id_department,
             total_ocuppied_nch_hours,
             total_unavailable_beds,
             beds_blocked,
             beds_reserved,
             beds_ocuppied,
             total_available_beds,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             total_avail_nch_hours,
             dt_dg_last_update)
        VALUES
            (id_department_in,
             total_ocuppied_nch_hours_in,
             total_unavailable_beds_in,
             beds_blocked_in,
             beds_reserved_in,
             beds_ocuppied_in,
             total_available_beds_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             total_avail_nch_hours_in,
             dt_dg_last_update_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'BMNG_DEPARTMENT_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_DEPARTMENT_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_DEPARTMENT_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_department_in            IN bmng_department_ea.id_department%TYPE,
        total_ocuppied_nch_hours_in IN bmng_department_ea.total_ocuppied_nch_hours%TYPE DEFAULT 0,
        total_unavailable_beds_in   IN bmng_department_ea.total_unavailable_beds%TYPE DEFAULT 0,
        beds_blocked_in             IN bmng_department_ea.beds_blocked%TYPE DEFAULT 0,
        beds_reserved_in            IN bmng_department_ea.beds_reserved%TYPE DEFAULT 0,
        beds_ocuppied_in            IN bmng_department_ea.beds_ocuppied%TYPE DEFAULT 0,
        total_available_beds_in     IN bmng_department_ea.total_available_beds%TYPE DEFAULT 0,
        create_user_in              IN bmng_department_ea.create_user%TYPE DEFAULT NULL,
        create_time_in              IN bmng_department_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN bmng_department_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN bmng_department_ea.update_user%TYPE DEFAULT NULL,
        update_time_in              IN bmng_department_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN bmng_department_ea.update_institution%TYPE DEFAULT NULL,
        total_avail_nch_hours_in    IN bmng_department_ea.total_avail_nch_hours%TYPE DEFAULT NULL,
        dt_dg_last_update_in        IN bmng_department_ea.dt_dg_last_update%TYPE DEFAULT current_timestamp,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_department_in            => id_department_in,
            total_ocuppied_nch_hours_in => total_ocuppied_nch_hours_in,
            total_unavailable_beds_in   => total_unavailable_beds_in,
            beds_blocked_in             => beds_blocked_in,
            beds_reserved_in            => beds_reserved_in,
            beds_ocuppied_in            => beds_ocuppied_in,
            total_available_beds_in     => total_available_beds_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            total_avail_nch_hours_in    => total_avail_nch_hours_in,
            dt_dg_last_update_in        => dt_dg_last_update_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN bmng_department_ea%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec bmng_department_ea%ROWTYPE := rec_in;
    BEGIN
        ins(id_department_in            => l_rec.id_department,
            total_ocuppied_nch_hours_in => l_rec.total_ocuppied_nch_hours,
            total_unavailable_beds_in   => l_rec.total_unavailable_beds,
            beds_blocked_in             => l_rec.beds_blocked,
            beds_reserved_in            => l_rec.beds_reserved,
            beds_ocuppied_in            => l_rec.beds_ocuppied,
            total_available_beds_in     => l_rec.total_available_beds,
            create_user_in              => l_rec.create_user,
            create_time_in              => l_rec.create_time,
            create_institution_in       => l_rec.create_institution,
            update_user_in              => l_rec.update_user,
            update_time_in              => l_rec.update_time,
            update_institution_in       => l_rec.update_institution,
            total_avail_nch_hours_in    => l_rec.total_avail_nch_hours,
            dt_dg_last_update_in        => l_rec.dt_dg_last_update,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN bmng_department_ea%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN bmng_department_ea_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO bmng_department_ea
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DEPARTMENT _' || indx,
                                                        value_in           => rows_in(indx).id_department,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TOTAL_OCUPPIED_NCH_HOURS _' || indx,
                                                        value_in           => rows_in(indx).total_ocuppied_nch_hours,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TOTAL_UNAVAILABLE_BEDS _' || indx,
                                                        value_in           => rows_in(indx).total_unavailable_beds,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BEDS_BLOCKED _' || indx,
                                                        value_in           => rows_in(indx).beds_blocked,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BEDS_RESERVED _' || indx,
                                                        value_in           => rows_in(indx).beds_reserved,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BEDS_OCUPPIED _' || indx,
                                                        value_in           => rows_in(indx).beds_ocuppied,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TOTAL_AVAILABLE_BEDS _' || indx,
                                                        value_in           => rows_in(indx).total_available_beds,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TOTAL_AVAIL_NCH_HOURS _' || indx,
                                                        value_in           => rows_in(indx).total_avail_nch_hours,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_DG_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(indx).dt_dg_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'BMNG_DEPARTMENT_EA',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN bmng_department_ea_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_department_in             IN bmng_department_ea.id_department%TYPE,
        total_ocuppied_nch_hours_in  IN bmng_department_ea.total_ocuppied_nch_hours%TYPE DEFAULT NULL,
        total_ocuppied_nch_hours_nin IN BOOLEAN := TRUE,
        total_unavailable_beds_in    IN bmng_department_ea.total_unavailable_beds%TYPE DEFAULT NULL,
        total_unavailable_beds_nin   IN BOOLEAN := TRUE,
        beds_blocked_in              IN bmng_department_ea.beds_blocked%TYPE DEFAULT NULL,
        beds_blocked_nin             IN BOOLEAN := TRUE,
        beds_reserved_in             IN bmng_department_ea.beds_reserved%TYPE DEFAULT NULL,
        beds_reserved_nin            IN BOOLEAN := TRUE,
        beds_ocuppied_in             IN bmng_department_ea.beds_ocuppied%TYPE DEFAULT NULL,
        beds_ocuppied_nin            IN BOOLEAN := TRUE,
        total_available_beds_in      IN bmng_department_ea.total_available_beds%TYPE DEFAULT NULL,
        total_available_beds_nin     IN BOOLEAN := TRUE,
        create_user_in               IN bmng_department_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN bmng_department_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN bmng_department_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN bmng_department_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN bmng_department_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN bmng_department_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        total_avail_nch_hours_in     IN bmng_department_ea.total_avail_nch_hours%TYPE DEFAULT NULL,
        total_avail_nch_hours_nin    IN BOOLEAN := TRUE,
        dt_dg_last_update_in         IN bmng_department_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin        IN BOOLEAN := TRUE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     IN OUT table_varchar
    ) IS
        l_rows_out                   table_varchar;
        l_total_ocuppied_nch_hours_n NUMBER(1);
        l_total_unavailable_beds_n   NUMBER(1);
        l_beds_blocked_n             NUMBER(1);
        l_beds_reserved_n            NUMBER(1);
        l_beds_ocuppied_n            NUMBER(1);
        l_total_available_beds_n     NUMBER(1);
        l_create_user_n              NUMBER(1);
        l_create_time_n              NUMBER(1);
        l_create_institution_n       NUMBER(1);
        l_update_user_n              NUMBER(1);
        l_update_time_n              NUMBER(1);
        l_update_institution_n       NUMBER(1);
        l_total_avail_nch_hours_n    NUMBER(1);
        l_dt_dg_last_update_n        NUMBER(1);
    BEGIN
    
        l_total_ocuppied_nch_hours_n := sys.diutil.bool_to_int(total_ocuppied_nch_hours_nin);
        l_total_unavailable_beds_n   := sys.diutil.bool_to_int(total_unavailable_beds_nin);
        l_beds_blocked_n             := sys.diutil.bool_to_int(beds_blocked_nin);
        l_beds_reserved_n            := sys.diutil.bool_to_int(beds_reserved_nin);
        l_beds_ocuppied_n            := sys.diutil.bool_to_int(beds_ocuppied_nin);
        l_total_available_beds_n     := sys.diutil.bool_to_int(total_available_beds_nin);
        l_create_user_n              := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n              := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n       := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n              := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n              := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n       := sys.diutil.bool_to_int(update_institution_nin);
        l_total_avail_nch_hours_n    := sys.diutil.bool_to_int(total_avail_nch_hours_nin);
        l_dt_dg_last_update_n        := sys.diutil.bool_to_int(dt_dg_last_update_nin);
    
        UPDATE bmng_department_ea
           SET total_ocuppied_nch_hours = decode(l_total_ocuppied_nch_hours_n,
                                                 0,
                                                 total_ocuppied_nch_hours_in,
                                                 nvl(total_ocuppied_nch_hours_in, total_ocuppied_nch_hours)),
               total_unavailable_beds   = decode(l_total_unavailable_beds_n,
                                                 0,
                                                 total_unavailable_beds_in,
                                                 nvl(total_unavailable_beds_in, total_unavailable_beds)),
               beds_blocked             = decode(l_beds_blocked_n,
                                                 0,
                                                 beds_blocked_in,
                                                 nvl(beds_blocked_in, beds_blocked)),
               beds_reserved            = decode(l_beds_reserved_n,
                                                 0,
                                                 beds_reserved_in,
                                                 nvl(beds_reserved_in, beds_reserved)),
               beds_ocuppied            = decode(l_beds_ocuppied_n,
                                                 0,
                                                 beds_ocuppied_in,
                                                 nvl(beds_ocuppied_in, beds_ocuppied)),
               total_available_beds     = decode(l_total_available_beds_n,
                                                 0,
                                                 total_available_beds_in,
                                                 nvl(total_available_beds_in, total_available_beds)),
               create_user              = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time              = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution       = decode(l_create_institution_n,
                                                 0,
                                                 create_institution_in,
                                                 nvl(create_institution_in, create_institution)),
               update_user              = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time              = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution       = decode(l_update_institution_n,
                                                 0,
                                                 update_institution_in,
                                                 nvl(update_institution_in, update_institution)),
               total_avail_nch_hours    = decode(l_total_avail_nch_hours_n,
                                                 0,
                                                 total_avail_nch_hours_in,
                                                 nvl(total_avail_nch_hours_in, total_avail_nch_hours)),
               dt_dg_last_update        = nvl(dt_dg_last_update_in, current_timestamp)
         WHERE id_department = id_department_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'BMNG_DEPARTMENT_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_DEPARTMENT_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_DEPARTMENT_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_department_in             IN bmng_department_ea.id_department%TYPE,
        total_ocuppied_nch_hours_in  IN bmng_department_ea.total_ocuppied_nch_hours%TYPE DEFAULT NULL,
        total_ocuppied_nch_hours_nin IN BOOLEAN := TRUE,
        total_unavailable_beds_in    IN bmng_department_ea.total_unavailable_beds%TYPE DEFAULT NULL,
        total_unavailable_beds_nin   IN BOOLEAN := TRUE,
        beds_blocked_in              IN bmng_department_ea.beds_blocked%TYPE DEFAULT NULL,
        beds_blocked_nin             IN BOOLEAN := TRUE,
        beds_reserved_in             IN bmng_department_ea.beds_reserved%TYPE DEFAULT NULL,
        beds_reserved_nin            IN BOOLEAN := TRUE,
        beds_ocuppied_in             IN bmng_department_ea.beds_ocuppied%TYPE DEFAULT NULL,
        beds_ocuppied_nin            IN BOOLEAN := TRUE,
        total_available_beds_in      IN bmng_department_ea.total_available_beds%TYPE DEFAULT NULL,
        total_available_beds_nin     IN BOOLEAN := TRUE,
        create_user_in               IN bmng_department_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN bmng_department_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN bmng_department_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN bmng_department_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN bmng_department_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN bmng_department_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        total_avail_nch_hours_in     IN bmng_department_ea.total_avail_nch_hours%TYPE DEFAULT NULL,
        total_avail_nch_hours_nin    IN BOOLEAN := TRUE,
        dt_dg_last_update_in         IN bmng_department_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin        IN BOOLEAN := TRUE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_department_in             => id_department_in,
            total_ocuppied_nch_hours_in  => total_ocuppied_nch_hours_in,
            total_ocuppied_nch_hours_nin => total_ocuppied_nch_hours_nin,
            total_unavailable_beds_in    => total_unavailable_beds_in,
            total_unavailable_beds_nin   => total_unavailable_beds_nin,
            beds_blocked_in              => beds_blocked_in,
            beds_blocked_nin             => beds_blocked_nin,
            beds_reserved_in             => beds_reserved_in,
            beds_reserved_nin            => beds_reserved_nin,
            beds_ocuppied_in             => beds_ocuppied_in,
            beds_ocuppied_nin            => beds_ocuppied_nin,
            total_available_beds_in      => total_available_beds_in,
            total_available_beds_nin     => total_available_beds_nin,
            create_user_in               => create_user_in,
            create_user_nin              => create_user_nin,
            create_time_in               => create_time_in,
            create_time_nin              => create_time_nin,
            create_institution_in        => create_institution_in,
            create_institution_nin       => create_institution_nin,
            update_user_in               => update_user_in,
            update_user_nin              => update_user_nin,
            update_time_in               => update_time_in,
            update_time_nin              => update_time_nin,
            update_institution_in        => update_institution_in,
            update_institution_nin       => update_institution_nin,
            total_avail_nch_hours_in     => total_avail_nch_hours_in,
            total_avail_nch_hours_nin    => total_avail_nch_hours_nin,
            dt_dg_last_update_in         => dt_dg_last_update_in,
            dt_dg_last_update_nin        => dt_dg_last_update_nin,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END upd;

    PROCEDURE upd
    (
        total_ocuppied_nch_hours_in  IN bmng_department_ea.total_ocuppied_nch_hours%TYPE DEFAULT NULL,
        total_ocuppied_nch_hours_nin IN BOOLEAN := TRUE,
        total_unavailable_beds_in    IN bmng_department_ea.total_unavailable_beds%TYPE DEFAULT NULL,
        total_unavailable_beds_nin   IN BOOLEAN := TRUE,
        beds_blocked_in              IN bmng_department_ea.beds_blocked%TYPE DEFAULT NULL,
        beds_blocked_nin             IN BOOLEAN := TRUE,
        beds_reserved_in             IN bmng_department_ea.beds_reserved%TYPE DEFAULT NULL,
        beds_reserved_nin            IN BOOLEAN := TRUE,
        beds_ocuppied_in             IN bmng_department_ea.beds_ocuppied%TYPE DEFAULT NULL,
        beds_ocuppied_nin            IN BOOLEAN := TRUE,
        total_available_beds_in      IN bmng_department_ea.total_available_beds%TYPE DEFAULT NULL,
        total_available_beds_nin     IN BOOLEAN := TRUE,
        create_user_in               IN bmng_department_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN bmng_department_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN bmng_department_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN bmng_department_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN bmng_department_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN bmng_department_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        total_avail_nch_hours_in     IN bmng_department_ea.total_avail_nch_hours%TYPE DEFAULT NULL,
        total_avail_nch_hours_nin    IN BOOLEAN := TRUE,
        dt_dg_last_update_in         IN bmng_department_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin        IN BOOLEAN := TRUE,
        where_in                     VARCHAR2 DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     IN OUT table_varchar
    ) IS
        l_sql                        VARCHAR2(32767);
        l_rows_out                   table_varchar;
        l_total_ocuppied_nch_hours_n NUMBER(1);
        l_total_unavailable_beds_n   NUMBER(1);
        l_beds_blocked_n             NUMBER(1);
        l_beds_reserved_n            NUMBER(1);
        l_beds_ocuppied_n            NUMBER(1);
        l_total_available_beds_n     NUMBER(1);
        l_create_user_n              NUMBER(1);
        l_create_time_n              NUMBER(1);
        l_create_institution_n       NUMBER(1);
        l_update_user_n              NUMBER(1);
        l_update_time_n              NUMBER(1);
        l_update_institution_n       NUMBER(1);
        l_total_avail_nch_hours_n    NUMBER(1);
        l_dt_dg_last_update_n        NUMBER(1);
        id_department_in             bmng_department_ea.id_department%TYPE;
    BEGIN
    
        l_total_ocuppied_nch_hours_n := sys.diutil.bool_to_int(total_ocuppied_nch_hours_nin);
        l_total_unavailable_beds_n   := sys.diutil.bool_to_int(total_unavailable_beds_nin);
        l_beds_blocked_n             := sys.diutil.bool_to_int(beds_blocked_nin);
        l_beds_reserved_n            := sys.diutil.bool_to_int(beds_reserved_nin);
        l_beds_ocuppied_n            := sys.diutil.bool_to_int(beds_ocuppied_nin);
        l_total_available_beds_n     := sys.diutil.bool_to_int(total_available_beds_nin);
        l_create_user_n              := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n              := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n       := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n              := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n              := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n       := sys.diutil.bool_to_int(update_institution_nin);
        l_total_avail_nch_hours_n    := sys.diutil.bool_to_int(total_avail_nch_hours_nin);
        l_dt_dg_last_update_n        := sys.diutil.bool_to_int(dt_dg_last_update_nin);
    
        l_sql := 'UPDATE BMNG_DEPARTMENT_EA SET ' || ' TOTAL_OCUPPIED_NCH_HOURS = decode (' ||
                 l_total_ocuppied_nch_hours_n ||
                 ',0,:total_ocuppied_nch_hours_in, NVL (:total_ocuppied_nch_hours_in, TOTAL_OCUPPIED_NCH_HOURS)) ' || ',' ||
                 ' TOTAL_UNAVAILABLE_BEDS = decode (' || l_total_unavailable_beds_n ||
                 ',0,:total_unavailable_beds_in, NVL (:total_unavailable_beds_in, TOTAL_UNAVAILABLE_BEDS)) ' || ',' ||
                 ' BEDS_BLOCKED = decode (' || l_beds_blocked_n ||
                 ',0,:beds_blocked_in, NVL (:beds_blocked_in, BEDS_BLOCKED)) ' || ',' || ' BEDS_RESERVED = decode (' ||
                 l_beds_reserved_n || ',0,:beds_reserved_in, NVL (:beds_reserved_in, BEDS_RESERVED)) ' || ',' ||
                 ' BEDS_OCUPPIED = decode (' || l_beds_ocuppied_n ||
                 ',0,:beds_ocuppied_in, NVL (:beds_ocuppied_in, BEDS_OCUPPIED)) ' || ',' ||
                 ' TOTAL_AVAILABLE_BEDS = decode (' || l_total_available_beds_n ||
                 ',0,:total_available_beds_in, NVL (:total_available_beds_in, TOTAL_AVAILABLE_BEDS)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' TOTAL_AVAIL_NCH_HOURS = decode (' || l_total_avail_nch_hours_n ||
                 ',0,:total_avail_nch_hours_in, NVL (:total_avail_nch_hours_in, TOTAL_AVAIL_NCH_HOURS)) ' || ',' ||
                 ' DT_DG_LAST_UPDATE = nvl(:dt_dg_last_update_in,current_timestamp) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN total_ocuppied_nch_hours_in, total_unavailable_beds_in, beds_blocked_in, beds_reserved_in, beds_ocuppied_in, total_available_beds_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, total_avail_nch_hours_in, dt_dg_last_update_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'BMNG_DEPARTMENT_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_DEPARTMENT_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_DEPARTMENT_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        total_ocuppied_nch_hours_in  IN bmng_department_ea.total_ocuppied_nch_hours%TYPE DEFAULT NULL,
        total_ocuppied_nch_hours_nin IN BOOLEAN := TRUE,
        total_unavailable_beds_in    IN bmng_department_ea.total_unavailable_beds%TYPE DEFAULT NULL,
        total_unavailable_beds_nin   IN BOOLEAN := TRUE,
        beds_blocked_in              IN bmng_department_ea.beds_blocked%TYPE DEFAULT NULL,
        beds_blocked_nin             IN BOOLEAN := TRUE,
        beds_reserved_in             IN bmng_department_ea.beds_reserved%TYPE DEFAULT NULL,
        beds_reserved_nin            IN BOOLEAN := TRUE,
        beds_ocuppied_in             IN bmng_department_ea.beds_ocuppied%TYPE DEFAULT NULL,
        beds_ocuppied_nin            IN BOOLEAN := TRUE,
        total_available_beds_in      IN bmng_department_ea.total_available_beds%TYPE DEFAULT NULL,
        total_available_beds_nin     IN BOOLEAN := TRUE,
        create_user_in               IN bmng_department_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN bmng_department_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN bmng_department_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN bmng_department_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN bmng_department_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN bmng_department_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        total_avail_nch_hours_in     IN bmng_department_ea.total_avail_nch_hours%TYPE DEFAULT NULL,
        total_avail_nch_hours_nin    IN BOOLEAN := TRUE,
        dt_dg_last_update_in         IN bmng_department_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin        IN BOOLEAN := TRUE,
        where_in                     VARCHAR2 DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(total_ocuppied_nch_hours_in  => total_ocuppied_nch_hours_in,
            total_ocuppied_nch_hours_nin => total_ocuppied_nch_hours_nin,
            total_unavailable_beds_in    => total_unavailable_beds_in,
            total_unavailable_beds_nin   => total_unavailable_beds_nin,
            beds_blocked_in              => beds_blocked_in,
            beds_blocked_nin             => beds_blocked_nin,
            beds_reserved_in             => beds_reserved_in,
            beds_reserved_nin            => beds_reserved_nin,
            beds_ocuppied_in             => beds_ocuppied_in,
            beds_ocuppied_nin            => beds_ocuppied_nin,
            total_available_beds_in      => total_available_beds_in,
            total_available_beds_nin     => total_available_beds_nin,
            create_user_in               => create_user_in,
            create_user_nin              => create_user_nin,
            create_time_in               => create_time_in,
            create_time_nin              => create_time_nin,
            create_institution_in        => create_institution_in,
            create_institution_nin       => create_institution_nin,
            update_user_in               => update_user_in,
            update_user_nin              => update_user_nin,
            update_time_in               => update_time_in,
            update_time_nin              => update_time_nin,
            update_institution_in        => update_institution_in,
            update_institution_nin       => update_institution_nin,
            total_avail_nch_hours_in     => total_avail_nch_hours_in,
            total_avail_nch_hours_nin    => total_avail_nch_hours_nin,
            dt_dg_last_update_in         => dt_dg_last_update_in,
            dt_dg_last_update_nin        => dt_dg_last_update_nin,
            where_in                     => where_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN bmng_department_ea%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_department_in            => rec_in.id_department,
            total_ocuppied_nch_hours_in => rec_in.total_ocuppied_nch_hours,
            total_unavailable_beds_in   => rec_in.total_unavailable_beds,
            beds_blocked_in             => rec_in.beds_blocked,
            beds_reserved_in            => rec_in.beds_reserved,
            beds_ocuppied_in            => rec_in.beds_ocuppied,
            total_available_beds_in     => rec_in.total_available_beds,
            create_user_in              => rec_in.create_user,
            create_time_in              => rec_in.create_time,
            create_institution_in       => rec_in.create_institution,
            update_user_in              => rec_in.update_user,
            update_time_in              => rec_in.update_time,
            update_institution_in       => rec_in.update_institution,
            total_avail_nch_hours_in    => rec_in.total_avail_nch_hours,
            dt_dg_last_update_in        => rec_in.dt_dg_last_update
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN bmng_department_ea%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_department_in            => rec_in.id_department,
            total_ocuppied_nch_hours_in => rec_in.total_ocuppied_nch_hours,
            total_unavailable_beds_in   => rec_in.total_unavailable_beds,
            beds_blocked_in             => rec_in.beds_blocked,
            beds_reserved_in            => rec_in.beds_reserved,
            beds_ocuppied_in            => rec_in.beds_ocuppied,
            total_available_beds_in     => rec_in.total_available_beds,
            create_user_in              => rec_in.create_user,
            create_time_in              => rec_in.create_time,
            create_institution_in       => rec_in.create_institution,
            update_user_in              => rec_in.update_user,
            update_time_in              => rec_in.update_time,
            update_institution_in       => rec_in.update_institution,
            total_avail_nch_hours_in    => rec_in.total_avail_nch_hours,
            dt_dg_last_update_in        => rec_in.dt_dg_last_update
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_department_in            IN bmng_department_ea.id_department%TYPE,
        total_ocuppied_nch_hours_in IN bmng_department_ea.total_ocuppied_nch_hours%TYPE DEFAULT NULL,
        total_unavailable_beds_in   IN bmng_department_ea.total_unavailable_beds%TYPE DEFAULT NULL,
        beds_blocked_in             IN bmng_department_ea.beds_blocked%TYPE DEFAULT NULL,
        beds_reserved_in            IN bmng_department_ea.beds_reserved%TYPE DEFAULT NULL,
        beds_ocuppied_in            IN bmng_department_ea.beds_ocuppied%TYPE DEFAULT NULL,
        total_available_beds_in     IN bmng_department_ea.total_available_beds%TYPE DEFAULT NULL,
        create_user_in              IN bmng_department_ea.create_user%TYPE DEFAULT NULL,
        create_time_in              IN bmng_department_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN bmng_department_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN bmng_department_ea.update_user%TYPE DEFAULT NULL,
        update_time_in              IN bmng_department_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN bmng_department_ea.update_institution%TYPE DEFAULT NULL,
        total_avail_nch_hours_in    IN bmng_department_ea.total_avail_nch_hours%TYPE DEFAULT NULL,
        dt_dg_last_update_in        IN bmng_department_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
        upd(id_department_in            => id_department_in,
            total_ocuppied_nch_hours_in => total_ocuppied_nch_hours_in,
            total_unavailable_beds_in   => total_unavailable_beds_in,
            beds_blocked_in             => beds_blocked_in,
            beds_reserved_in            => beds_reserved_in,
            beds_ocuppied_in            => beds_ocuppied_in,
            total_available_beds_in     => total_available_beds_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            total_avail_nch_hours_in    => total_avail_nch_hours_in,
            dt_dg_last_update_in        => dt_dg_last_update_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_department_in            => id_department_in,
                total_ocuppied_nch_hours_in => total_ocuppied_nch_hours_in,
                total_unavailable_beds_in   => total_unavailable_beds_in,
                beds_blocked_in             => beds_blocked_in,
                beds_reserved_in            => beds_reserved_in,
                beds_ocuppied_in            => beds_ocuppied_in,
                total_available_beds_in     => total_available_beds_in,
                create_user_in              => create_user_in,
                create_time_in              => create_time_in,
                create_institution_in       => create_institution_in,
                update_user_in              => update_user_in,
                update_time_in              => update_time_in,
                update_institution_in       => update_institution_in,
                total_avail_nch_hours_in    => total_avail_nch_hours_in,
                dt_dg_last_update_in        => dt_dg_last_update_in,
                handle_error_in             => handle_error_in,
                rows_out                    => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_department_in            IN bmng_department_ea.id_department%TYPE,
        total_ocuppied_nch_hours_in IN bmng_department_ea.total_ocuppied_nch_hours%TYPE DEFAULT NULL,
        total_unavailable_beds_in   IN bmng_department_ea.total_unavailable_beds%TYPE DEFAULT NULL,
        beds_blocked_in             IN bmng_department_ea.beds_blocked%TYPE DEFAULT NULL,
        beds_reserved_in            IN bmng_department_ea.beds_reserved%TYPE DEFAULT NULL,
        beds_ocuppied_in            IN bmng_department_ea.beds_ocuppied%TYPE DEFAULT NULL,
        total_available_beds_in     IN bmng_department_ea.total_available_beds%TYPE DEFAULT NULL,
        create_user_in              IN bmng_department_ea.create_user%TYPE DEFAULT NULL,
        create_time_in              IN bmng_department_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN bmng_department_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN bmng_department_ea.update_user%TYPE DEFAULT NULL,
        update_time_in              IN bmng_department_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN bmng_department_ea.update_institution%TYPE DEFAULT NULL,
        total_avail_nch_hours_in    IN bmng_department_ea.total_avail_nch_hours%TYPE DEFAULT NULL,
        dt_dg_last_update_in        IN bmng_department_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_department_in,
                total_ocuppied_nch_hours_in,
                total_unavailable_beds_in,
                beds_blocked_in,
                beds_reserved_in,
                beds_ocuppied_in,
                total_available_beds_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                total_avail_nch_hours_in,
                dt_dg_last_update_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN bmng_department_ea_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_department            id_department_cc;
        l_total_ocuppied_nch_hours total_ocuppied_nch_hours_cc;
        l_total_unavailable_beds   total_unavailable_beds_cc;
        l_beds_blocked             beds_blocked_cc;
        l_beds_reserved            beds_reserved_cc;
        l_beds_ocuppied            beds_ocuppied_cc;
        l_total_available_beds     total_available_beds_cc;
        l_create_user              create_user_cc;
        l_create_time              create_time_cc;
        l_create_institution       create_institution_cc;
        l_update_user              update_user_cc;
        l_update_time              update_time_cc;
        l_update_institution       update_institution_cc;
        l_total_avail_nch_hours    total_avail_nch_hours_cc;
        l_dt_dg_last_update        dt_dg_last_update_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_department(i) := col_in(i).id_department;
            l_total_ocuppied_nch_hours(i) := col_in(i).total_ocuppied_nch_hours;
            l_total_unavailable_beds(i) := col_in(i).total_unavailable_beds;
            l_beds_blocked(i) := col_in(i).beds_blocked;
            l_beds_reserved(i) := col_in(i).beds_reserved;
            l_beds_ocuppied(i) := col_in(i).beds_ocuppied;
            l_total_available_beds(i) := col_in(i).total_available_beds;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_total_avail_nch_hours(i) := col_in(i).total_avail_nch_hours;
            l_dt_dg_last_update(i) := col_in(i).dt_dg_last_update;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE bmng_department_ea
                   SET total_ocuppied_nch_hours = nvl(l_total_ocuppied_nch_hours(i), total_ocuppied_nch_hours),
                       total_unavailable_beds   = nvl(l_total_unavailable_beds(i), total_unavailable_beds),
                       beds_blocked             = nvl(l_beds_blocked(i), beds_blocked),
                       beds_reserved            = nvl(l_beds_reserved(i), beds_reserved),
                       beds_ocuppied            = nvl(l_beds_ocuppied(i), beds_ocuppied),
                       total_available_beds     = nvl(l_total_available_beds(i), total_available_beds),
                       create_user              = nvl(l_create_user(i), create_user),
                       create_time              = nvl(l_create_time(i), create_time),
                       create_institution       = nvl(l_create_institution(i), create_institution),
                       update_user              = nvl(l_update_user(i), update_user),
                       update_time              = nvl(l_update_time(i), update_time),
                       update_institution       = nvl(l_update_institution(i), update_institution),
                       total_avail_nch_hours    = nvl(l_total_avail_nch_hours(i), total_avail_nch_hours),
                       dt_dg_last_update        = nvl(l_dt_dg_last_update(i), current_timestamp)
                 WHERE id_department = l_id_department(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE bmng_department_ea
                   SET total_ocuppied_nch_hours = l_total_ocuppied_nch_hours(i),
                       total_unavailable_beds   = l_total_unavailable_beds(i),
                       beds_blocked             = l_beds_blocked(i),
                       beds_reserved            = l_beds_reserved(i),
                       beds_ocuppied            = l_beds_ocuppied(i),
                       total_available_beds     = l_total_available_beds(i),
                       create_user              = l_create_user(i),
                       create_time              = l_create_time(i),
                       create_institution       = l_create_institution(i),
                       update_user              = l_update_user(i),
                       update_time              = l_update_time(i),
                       update_institution       = l_update_institution(i),
                       total_avail_nch_hours    = l_total_avail_nch_hours(i),
                       dt_dg_last_update        = nvl(l_dt_dg_last_update(i), current_timestamp)
                 WHERE id_department = l_id_department(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN bmng_department_ea_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE BMNG_DEPARTMENT_EA
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE BMNG_DEPARTMENT_EA
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE BMNG_DEPARTMENT_EA set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_DEPARTMENT_EA');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_DEPARTMENT_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_DEPARTMENT_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE BMNG_DEPARTMENT_EA set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_DEPARTMENT_EA');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_DEPARTMENT_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_DEPARTMENT_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_department_in IN bmng_department_ea.id_department%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_department_ea
         WHERE id_department = id_department_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_DEPARTMENT_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_DEPARTMENT_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_department_in IN bmng_department_ea.id_department%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_department_in => id_department_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_DEPARTMENT
    PROCEDURE del_id_department
    (
        id_department_in IN bmng_department_ea.id_department%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_department_ea
         WHERE id_department = id_department_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_DEPARTMENT_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_DEPARTMENT_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_department;

    -- Delete all rows for primary key column ID_DEPARTMENT
    PROCEDURE del_id_department
    (
        id_department_in IN bmng_department_ea.id_department%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_department(id_department_in => id_department_in,
                          handle_error_in  => handle_error_in,
                          rows_out         => rows_out);
    END del_id_department;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM BMNG_DEPARTMENT_EA';
        ELSE
            RETURN 'DELETE FROM BMNG_DEPARTMENT_EA WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_DEPARTMENT_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_DEPARTMENT_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_DEPARTMENT_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_DEPARTMENT_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_DEPARTMENT_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_DEPARTMENT_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_DEPARTMENT_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_DEPARTMENT_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_DEPARTMENT_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_DEPARTMENT_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_DEPARTMENT_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_DEPARTMENT_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_DEPARTMENT_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_DEPARTMENT_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_DEPARTMENT_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_DEPARTMENT_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_DEPARTMENT_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_DEPARTMENT_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_DEPARTMENT_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_DEPARTMENT_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(bmng_department_ea_inout IN OUT bmng_department_ea%ROWTYPE) IS
    BEGIN
        bmng_department_ea_inout.id_department            := NULL;
        bmng_department_ea_inout.total_ocuppied_nch_hours := 0;
        bmng_department_ea_inout.total_unavailable_beds   := 0;
        bmng_department_ea_inout.beds_blocked             := 0;
        bmng_department_ea_inout.beds_reserved            := 0;
        bmng_department_ea_inout.beds_ocuppied            := 0;
        bmng_department_ea_inout.total_available_beds     := 0;
        bmng_department_ea_inout.create_user              := NULL;
        bmng_department_ea_inout.create_time              := NULL;
        bmng_department_ea_inout.create_institution       := NULL;
        bmng_department_ea_inout.update_user              := NULL;
        bmng_department_ea_inout.update_time              := NULL;
        bmng_department_ea_inout.update_institution       := NULL;
        bmng_department_ea_inout.total_avail_nch_hours    := NULL;
        bmng_department_ea_inout.dt_dg_last_update        := current_timestamp;
    END initrec;

    FUNCTION initrec RETURN bmng_department_ea%ROWTYPE IS
        l_bmng_department_ea bmng_department_ea%ROWTYPE;
    BEGIN
        l_bmng_department_ea.total_ocuppied_nch_hours := 0;
        l_bmng_department_ea.total_unavailable_beds   := 0;
        l_bmng_department_ea.beds_blocked             := 0;
        l_bmng_department_ea.beds_reserved            := 0;
        l_bmng_department_ea.beds_ocuppied            := 0;
        l_bmng_department_ea.total_available_beds     := 0;
        l_bmng_department_ea.total_avail_nch_hours    := NULL;
        l_bmng_department_ea.dt_dg_last_update        := current_timestamp;
        RETURN l_bmng_department_ea;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN bmng_department_ea_tc IS
        data bmng_department_ea_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM bmng_department_ea
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN bmng_department_ea_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data bmng_department_ea_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_bmng_department_ea;
/
