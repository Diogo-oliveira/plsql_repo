/*-- Last Change Revision: $Rev: 2054554 $*/
/*-- Last Change by: $Author: elisabete.bugalho $*/
/*-- Date of last change: $Date: 2023-01-13 14:56:49 +0000 (sex, 13 jan 2023) $*/
CREATE OR REPLACE PACKAGE BODY ts_epis_prognosis_hist
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2023-01-09 17:29:20
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN epis_prognosis_hist.id_epis_prognosis_hist%TYPE IS
        retval epis_prognosis_hist.id_epis_prognosis_hist%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_epis_prognosis_hist.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        dt_epis_prognosis_hist_in IN epis_prognosis_hist.dt_epis_prognosis_hist%TYPE DEFAULT NULL,
        id_epis_prognosis_in      IN epis_prognosis_hist.id_epis_prognosis%TYPE DEFAULT NULL,
        id_episode_in             IN epis_prognosis_hist.id_episode%TYPE DEFAULT NULL,
        flg_status_in             IN epis_prognosis_hist.flg_status%TYPE DEFAULT NULL,
        prognosis_notes_in        IN epis_prognosis_hist.prognosis_notes%TYPE DEFAULT NULL,
        id_prof_create_in         IN epis_prognosis_hist.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in              IN epis_prognosis_hist.dt_create%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN epis_prognosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN epis_prognosis_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN epis_prognosis_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN epis_prognosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in           IN epis_prognosis_hist.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN epis_prognosis_hist.dt_cancel%TYPE DEFAULT NULL,
        create_user_in            IN epis_prognosis_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN epis_prognosis_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN epis_prognosis_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN epis_prognosis_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN epis_prognosis_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN epis_prognosis_hist.update_institution%TYPE DEFAULT NULL,
        id_prognosis_in           IN epis_prognosis_hist.id_prognosis%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
        l_pky epis_prognosis_hist.id_epis_prognosis_hist%TYPE := next_key;
    BEGIN
        ins(id_epis_prognosis_hist_in => l_pky,
            dt_epis_prognosis_hist_in => dt_epis_prognosis_hist_in,
            id_epis_prognosis_in      => id_epis_prognosis_in,
            id_episode_in             => id_episode_in,
            flg_status_in             => flg_status_in,
            prognosis_notes_in        => prognosis_notes_in,
            id_prof_create_in         => id_prof_create_in,
            dt_create_in              => dt_create_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_prognosis_in           => id_prognosis_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        dt_epis_prognosis_hist_in IN epis_prognosis_hist.dt_epis_prognosis_hist%TYPE DEFAULT NULL,
        id_epis_prognosis_in      IN epis_prognosis_hist.id_epis_prognosis%TYPE DEFAULT NULL,
        id_episode_in             IN epis_prognosis_hist.id_episode%TYPE DEFAULT NULL,
        flg_status_in             IN epis_prognosis_hist.flg_status%TYPE DEFAULT NULL,
        prognosis_notes_in        IN epis_prognosis_hist.prognosis_notes%TYPE DEFAULT NULL,
        id_prof_create_in         IN epis_prognosis_hist.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in              IN epis_prognosis_hist.dt_create%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN epis_prognosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN epis_prognosis_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN epis_prognosis_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN epis_prognosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in           IN epis_prognosis_hist.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN epis_prognosis_hist.dt_cancel%TYPE DEFAULT NULL,
        create_user_in            IN epis_prognosis_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN epis_prognosis_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN epis_prognosis_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN epis_prognosis_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN epis_prognosis_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN epis_prognosis_hist.update_institution%TYPE DEFAULT NULL,
        id_prognosis_in           IN epis_prognosis_hist.id_prognosis%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(dt_epis_prognosis_hist_in => dt_epis_prognosis_hist_in,
            id_epis_prognosis_in      => id_epis_prognosis_in,
            id_episode_in             => id_episode_in,
            flg_status_in             => flg_status_in,
            prognosis_notes_in        => prognosis_notes_in,
            id_prof_create_in         => id_prof_create_in,
            dt_create_in              => dt_create_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_prognosis_in           => id_prognosis_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        dt_epis_prognosis_hist_in  IN epis_prognosis_hist.dt_epis_prognosis_hist%TYPE DEFAULT NULL,
        id_epis_prognosis_in       IN epis_prognosis_hist.id_epis_prognosis%TYPE DEFAULT NULL,
        id_episode_in              IN epis_prognosis_hist.id_episode%TYPE DEFAULT NULL,
        flg_status_in              IN epis_prognosis_hist.flg_status%TYPE DEFAULT NULL,
        prognosis_notes_in         IN epis_prognosis_hist.prognosis_notes%TYPE DEFAULT NULL,
        id_prof_create_in          IN epis_prognosis_hist.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in               IN epis_prognosis_hist.dt_create%TYPE DEFAULT NULL,
        id_prof_last_update_in     IN epis_prognosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in          IN epis_prognosis_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_cancel_in          IN epis_prognosis_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN epis_prognosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in            IN epis_prognosis_hist.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in               IN epis_prognosis_hist.dt_cancel%TYPE DEFAULT NULL,
        create_user_in             IN epis_prognosis_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN epis_prognosis_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN epis_prognosis_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN epis_prognosis_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN epis_prognosis_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN epis_prognosis_hist.update_institution%TYPE DEFAULT NULL,
        id_prognosis_in            IN epis_prognosis_hist.id_prognosis%TYPE DEFAULT NULL,
        id_epis_prognosis_hist_out IN OUT epis_prognosis_hist.id_epis_prognosis_hist%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
        l_pky epis_prognosis_hist.id_epis_prognosis_hist%TYPE := next_key;
    BEGIN
        ins(id_epis_prognosis_hist_in => l_pky,
            dt_epis_prognosis_hist_in => dt_epis_prognosis_hist_in,
            id_epis_prognosis_in      => id_epis_prognosis_in,
            id_episode_in             => id_episode_in,
            flg_status_in             => flg_status_in,
            prognosis_notes_in        => prognosis_notes_in,
            id_prof_create_in         => id_prof_create_in,
            dt_create_in              => dt_create_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_prognosis_in           => id_prognosis_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        id_epis_prognosis_hist_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        dt_epis_prognosis_hist_in  IN epis_prognosis_hist.dt_epis_prognosis_hist%TYPE DEFAULT NULL,
        id_epis_prognosis_in       IN epis_prognosis_hist.id_epis_prognosis%TYPE DEFAULT NULL,
        id_episode_in              IN epis_prognosis_hist.id_episode%TYPE DEFAULT NULL,
        flg_status_in              IN epis_prognosis_hist.flg_status%TYPE DEFAULT NULL,
        prognosis_notes_in         IN epis_prognosis_hist.prognosis_notes%TYPE DEFAULT NULL,
        id_prof_create_in          IN epis_prognosis_hist.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in               IN epis_prognosis_hist.dt_create%TYPE DEFAULT NULL,
        id_prof_last_update_in     IN epis_prognosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in          IN epis_prognosis_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_cancel_in          IN epis_prognosis_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN epis_prognosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in            IN epis_prognosis_hist.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in               IN epis_prognosis_hist.dt_cancel%TYPE DEFAULT NULL,
        create_user_in             IN epis_prognosis_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN epis_prognosis_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN epis_prognosis_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN epis_prognosis_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN epis_prognosis_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN epis_prognosis_hist.update_institution%TYPE DEFAULT NULL,
        id_prognosis_in            IN epis_prognosis_hist.id_prognosis%TYPE DEFAULT NULL,
        id_epis_prognosis_hist_out IN OUT epis_prognosis_hist.id_epis_prognosis_hist%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(dt_epis_prognosis_hist_in  => dt_epis_prognosis_hist_in,
            id_epis_prognosis_in       => id_epis_prognosis_in,
            id_episode_in              => id_episode_in,
            flg_status_in              => flg_status_in,
            prognosis_notes_in         => prognosis_notes_in,
            id_prof_create_in          => id_prof_create_in,
            dt_create_in               => dt_create_in,
            id_prof_last_update_in     => id_prof_last_update_in,
            dt_last_update_in          => dt_last_update_in,
            id_prof_cancel_in          => id_prof_cancel_in,
            id_cancel_reason_in        => id_cancel_reason_in,
            cancel_notes_in            => cancel_notes_in,
            dt_cancel_in               => dt_cancel_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_prognosis_in            => id_prognosis_in,
            id_epis_prognosis_hist_out => id_epis_prognosis_hist_out,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        dt_epis_prognosis_hist_in IN epis_prognosis_hist.dt_epis_prognosis_hist%TYPE DEFAULT NULL,
        id_epis_prognosis_in      IN epis_prognosis_hist.id_epis_prognosis%TYPE DEFAULT NULL,
        id_episode_in             IN epis_prognosis_hist.id_episode%TYPE DEFAULT NULL,
        flg_status_in             IN epis_prognosis_hist.flg_status%TYPE DEFAULT NULL,
        prognosis_notes_in        IN epis_prognosis_hist.prognosis_notes%TYPE DEFAULT NULL,
        id_prof_create_in         IN epis_prognosis_hist.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in              IN epis_prognosis_hist.dt_create%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN epis_prognosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN epis_prognosis_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN epis_prognosis_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN epis_prognosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in           IN epis_prognosis_hist.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN epis_prognosis_hist.dt_cancel%TYPE DEFAULT NULL,
        create_user_in            IN epis_prognosis_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN epis_prognosis_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN epis_prognosis_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN epis_prognosis_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN epis_prognosis_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN epis_prognosis_hist.update_institution%TYPE DEFAULT NULL,
        id_prognosis_in           IN epis_prognosis_hist.id_prognosis%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) RETURN epis_prognosis_hist.id_epis_prognosis_hist%TYPE IS
        l_pky epis_prognosis_hist.id_epis_prognosis_hist%TYPE := next_key;
    BEGIN
        ins(id_epis_prognosis_hist_in => l_pky,
            dt_epis_prognosis_hist_in => dt_epis_prognosis_hist_in,
            id_epis_prognosis_in      => id_epis_prognosis_in,
            id_episode_in             => id_episode_in,
            flg_status_in             => flg_status_in,
            prognosis_notes_in        => prognosis_notes_in,
            id_prof_create_in         => id_prof_create_in,
            dt_create_in              => dt_create_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_prognosis_in           => id_prognosis_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        dt_epis_prognosis_hist_in IN epis_prognosis_hist.dt_epis_prognosis_hist%TYPE DEFAULT NULL,
        id_epis_prognosis_in      IN epis_prognosis_hist.id_epis_prognosis%TYPE DEFAULT NULL,
        id_episode_in             IN epis_prognosis_hist.id_episode%TYPE DEFAULT NULL,
        flg_status_in             IN epis_prognosis_hist.flg_status%TYPE DEFAULT NULL,
        prognosis_notes_in        IN epis_prognosis_hist.prognosis_notes%TYPE DEFAULT NULL,
        id_prof_create_in         IN epis_prognosis_hist.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in              IN epis_prognosis_hist.dt_create%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN epis_prognosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN epis_prognosis_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN epis_prognosis_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN epis_prognosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in           IN epis_prognosis_hist.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN epis_prognosis_hist.dt_cancel%TYPE DEFAULT NULL,
        create_user_in            IN epis_prognosis_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN epis_prognosis_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN epis_prognosis_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN epis_prognosis_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN epis_prognosis_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN epis_prognosis_hist.update_institution%TYPE DEFAULT NULL,
        id_prognosis_in           IN epis_prognosis_hist.id_prognosis%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := FALSE
    ) RETURN epis_prognosis_hist.id_epis_prognosis_hist%TYPE IS
        l_pky    epis_prognosis_hist.id_epis_prognosis_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_epis_prognosis_hist_in => l_pky,
            dt_epis_prognosis_hist_in => dt_epis_prognosis_hist_in,
            id_epis_prognosis_in      => id_epis_prognosis_in,
            id_episode_in             => id_episode_in,
            flg_status_in             => flg_status_in,
            prognosis_notes_in        => prognosis_notes_in,
            id_prof_create_in         => id_prof_create_in,
            dt_create_in              => dt_create_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_prognosis_in           => id_prognosis_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_epis_prognosis_hist_in IN epis_prognosis_hist.id_epis_prognosis_hist%TYPE,
        dt_epis_prognosis_hist_in IN epis_prognosis_hist.dt_epis_prognosis_hist%TYPE DEFAULT NULL,
        id_epis_prognosis_in      IN epis_prognosis_hist.id_epis_prognosis%TYPE DEFAULT NULL,
        id_episode_in             IN epis_prognosis_hist.id_episode%TYPE DEFAULT NULL,
        flg_status_in             IN epis_prognosis_hist.flg_status%TYPE DEFAULT NULL,
        prognosis_notes_in        IN epis_prognosis_hist.prognosis_notes%TYPE DEFAULT NULL,
        id_prof_create_in         IN epis_prognosis_hist.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in              IN epis_prognosis_hist.dt_create%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN epis_prognosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN epis_prognosis_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN epis_prognosis_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN epis_prognosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in           IN epis_prognosis_hist.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN epis_prognosis_hist.dt_cancel%TYPE DEFAULT NULL,
        create_user_in            IN epis_prognosis_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN epis_prognosis_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN epis_prognosis_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN epis_prognosis_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN epis_prognosis_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN epis_prognosis_hist.update_institution%TYPE DEFAULT NULL,
        id_prognosis_in           IN epis_prognosis_hist.id_prognosis%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := FALSE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO epis_prognosis_hist
            (id_epis_prognosis_hist,
             dt_epis_prognosis_hist,
             id_epis_prognosis,
             id_episode,
             flg_status,
             prognosis_notes,
             id_prof_create,
             dt_create,
             id_prof_last_update,
             dt_last_update,
             id_prof_cancel,
             id_cancel_reason,
             cancel_notes,
             dt_cancel,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_prognosis)
        VALUES
            (id_epis_prognosis_hist_in,
             dt_epis_prognosis_hist_in,
             id_epis_prognosis_in,
             id_episode_in,
             flg_status_in,
             prognosis_notes_in,
             id_prof_create_in,
             dt_create_in,
             id_prof_last_update_in,
             dt_last_update_in,
             id_prof_cancel_in,
             id_cancel_reason_in,
             cancel_notes_in,
             dt_cancel_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_prognosis_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_epis_prognosis_hist_in IN epis_prognosis_hist.id_epis_prognosis_hist%TYPE,
        dt_epis_prognosis_hist_in IN epis_prognosis_hist.dt_epis_prognosis_hist%TYPE DEFAULT NULL,
        id_epis_prognosis_in      IN epis_prognosis_hist.id_epis_prognosis%TYPE DEFAULT NULL,
        id_episode_in             IN epis_prognosis_hist.id_episode%TYPE DEFAULT NULL,
        flg_status_in             IN epis_prognosis_hist.flg_status%TYPE DEFAULT NULL,
        prognosis_notes_in        IN epis_prognosis_hist.prognosis_notes%TYPE DEFAULT NULL,
        id_prof_create_in         IN epis_prognosis_hist.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in              IN epis_prognosis_hist.dt_create%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN epis_prognosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN epis_prognosis_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN epis_prognosis_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN epis_prognosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in           IN epis_prognosis_hist.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN epis_prognosis_hist.dt_cancel%TYPE DEFAULT NULL,
        create_user_in            IN epis_prognosis_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN epis_prognosis_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN epis_prognosis_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN epis_prognosis_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN epis_prognosis_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN epis_prognosis_hist.update_institution%TYPE DEFAULT NULL,
        id_prognosis_in           IN epis_prognosis_hist.id_prognosis%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_epis_prognosis_hist_in => id_epis_prognosis_hist_in,
            dt_epis_prognosis_hist_in => dt_epis_prognosis_hist_in,
            id_epis_prognosis_in      => id_epis_prognosis_in,
            id_episode_in             => id_episode_in,
            flg_status_in             => flg_status_in,
            prognosis_notes_in        => prognosis_notes_in,
            id_prof_create_in         => id_prof_create_in,
            dt_create_in              => dt_create_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_prognosis_in           => id_prognosis_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_prognosis_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
        l_rec epis_prognosis_hist%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_epis_prognosis_hist := next_key(sequence_in);
        END IF;
    
        ins(id_epis_prognosis_hist_in => l_rec.id_epis_prognosis_hist,
            dt_epis_prognosis_hist_in => l_rec.dt_epis_prognosis_hist,
            id_epis_prognosis_in      => l_rec.id_epis_prognosis,
            id_episode_in             => l_rec.id_episode,
            flg_status_in             => l_rec.flg_status,
            prognosis_notes_in        => l_rec.prognosis_notes,
            id_prof_create_in         => l_rec.id_prof_create,
            dt_create_in              => l_rec.dt_create,
            id_prof_last_update_in    => l_rec.id_prof_last_update,
            dt_last_update_in         => l_rec.dt_last_update,
            id_prof_cancel_in         => l_rec.id_prof_cancel,
            id_cancel_reason_in       => l_rec.id_cancel_reason,
            cancel_notes_in           => l_rec.cancel_notes,
            dt_cancel_in              => l_rec.dt_cancel,
            create_user_in            => l_rec.create_user,
            create_time_in            => l_rec.create_time,
            create_institution_in     => l_rec.create_institution,
            update_user_in            => l_rec.update_user,
            update_time_in            => l_rec.update_time,
            update_institution_in     => l_rec.update_institution,
            id_prognosis_in           => l_rec.id_prognosis,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_prognosis_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_prognosis_hist_tc,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO epis_prognosis_hist
                    (id_epis_prognosis_hist,
                     dt_epis_prognosis_hist,
                     id_epis_prognosis,
                     id_episode,
                     flg_status,
                     prognosis_notes,
                     id_prof_create,
                     dt_create,
                     id_prof_last_update,
                     dt_last_update,
                     id_prof_cancel,
                     id_cancel_reason,
                     cancel_notes,
                     dt_cancel,
                     id_prognosis)
                VALUES
                    (rows_in(indx).id_epis_prognosis_hist,
                     rows_in(indx).dt_epis_prognosis_hist,
                     rows_in(indx).id_epis_prognosis,
                     rows_in(indx).id_episode,
                     rows_in(indx).flg_status,
                     rows_in(indx).prognosis_notes,
                     rows_in(indx).id_prof_create,
                     rows_in(indx).dt_create,
                     rows_in(indx).id_prof_last_update,
                     rows_in(indx).dt_last_update,
                     rows_in(indx).id_prof_cancel,
                     rows_in(indx).id_cancel_reason,
                     rows_in(indx).cancel_notes,
                     rows_in(indx).dt_cancel,
                     rows_in(indx).id_prognosis)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_prognosis_hist_tc,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_prognosis_hist_in  IN epis_prognosis_hist.id_epis_prognosis_hist%TYPE,
        dt_epis_prognosis_hist_in  IN epis_prognosis_hist.dt_epis_prognosis_hist%TYPE DEFAULT NULL,
        dt_epis_prognosis_hist_nin IN BOOLEAN := TRUE,
        id_epis_prognosis_in       IN epis_prognosis_hist.id_epis_prognosis%TYPE DEFAULT NULL,
        id_epis_prognosis_nin      IN BOOLEAN := TRUE,
        id_episode_in              IN epis_prognosis_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        flg_status_in              IN epis_prognosis_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        prognosis_notes_in         IN epis_prognosis_hist.prognosis_notes%TYPE DEFAULT NULL,
        prognosis_notes_nin        IN BOOLEAN := TRUE,
        id_prof_create_in          IN epis_prognosis_hist.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin         IN BOOLEAN := TRUE,
        dt_create_in               IN epis_prognosis_hist.dt_create%TYPE DEFAULT NULL,
        dt_create_nin              IN BOOLEAN := TRUE,
        id_prof_last_update_in     IN epis_prognosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin    IN BOOLEAN := TRUE,
        dt_last_update_in          IN epis_prognosis_hist.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin         IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN epis_prognosis_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN epis_prognosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        cancel_notes_in            IN epis_prognosis_hist.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin           IN BOOLEAN := TRUE,
        dt_cancel_in               IN epis_prognosis_hist.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        create_user_in             IN epis_prognosis_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN epis_prognosis_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN epis_prognosis_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN epis_prognosis_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN epis_prognosis_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN epis_prognosis_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        id_prognosis_in            IN epis_prognosis_hist.id_prognosis%TYPE DEFAULT NULL,
        id_prognosis_nin           IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := FALSE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_rows_out                 table_varchar;
        l_dt_epis_prognosis_hist_n NUMBER(1) := sys.diutil.bool_to_int(dt_epis_prognosis_hist_nin);
        l_id_epis_prognosis_n      NUMBER(1) := sys.diutil.bool_to_int(id_epis_prognosis_nin);
        l_id_episode_n             NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_flg_status_n             NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_prognosis_notes_n        NUMBER(1) := sys.diutil.bool_to_int(prognosis_notes_nin);
        l_id_prof_create_n         NUMBER(1) := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_create_n              NUMBER(1) := sys.diutil.bool_to_int(dt_create_nin);
        l_id_prof_last_update_n    NUMBER(1) := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_n         NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_nin);
        l_id_prof_cancel_n         NUMBER(1) := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_id_cancel_reason_n       NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_cancel_notes_n           NUMBER(1) := sys.diutil.bool_to_int(cancel_notes_nin);
        l_dt_cancel_n              NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_nin);
        l_create_user_n            NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_prognosis_n           NUMBER(1) := sys.diutil.bool_to_int(id_prognosis_nin);
    BEGIN
    
        UPDATE epis_prognosis_hist
           SET dt_epis_prognosis_hist = decode(l_dt_epis_prognosis_hist_n,
                                               0,
                                               dt_epis_prognosis_hist_in,
                                               nvl(dt_epis_prognosis_hist_in, dt_epis_prognosis_hist)),
               id_epis_prognosis      = decode(l_id_epis_prognosis_n,
                                               0,
                                               id_epis_prognosis_in,
                                               nvl(id_epis_prognosis_in, id_epis_prognosis)),
               id_episode             = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               flg_status             = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               prognosis_notes        = decode(l_prognosis_notes_n,
                                               0,
                                               prognosis_notes_in,
                                               nvl(prognosis_notes_in, prognosis_notes)),
               id_prof_create         = decode(l_id_prof_create_n,
                                               0,
                                               id_prof_create_in,
                                               nvl(id_prof_create_in, id_prof_create)),
               dt_create              = decode(l_dt_create_n, 0, dt_create_in, nvl(dt_create_in, dt_create)),
               id_prof_last_update    = decode(l_id_prof_last_update_n,
                                               0,
                                               id_prof_last_update_in,
                                               nvl(id_prof_last_update_in, id_prof_last_update)),
               dt_last_update         = decode(l_dt_last_update_n,
                                               0,
                                               dt_last_update_in,
                                               nvl(dt_last_update_in, dt_last_update)),
               id_prof_cancel         = decode(l_id_prof_cancel_n,
                                               0,
                                               id_prof_cancel_in,
                                               nvl(id_prof_cancel_in, id_prof_cancel)),
               id_cancel_reason       = decode(l_id_cancel_reason_n,
                                               0,
                                               id_cancel_reason_in,
                                               nvl(id_cancel_reason_in, id_cancel_reason)),
               cancel_notes           = decode(l_cancel_notes_n, 0, cancel_notes_in, nvl(cancel_notes_in, cancel_notes)),
               dt_cancel              = decode(l_dt_cancel_n, 0, dt_cancel_in, nvl(dt_cancel_in, dt_cancel)),
               create_user            = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time            = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution     = decode(l_create_institution_n,
                                               0,
                                               create_institution_in,
                                               nvl(create_institution_in, create_institution)),
               update_user            = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time            = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution     = decode(l_update_institution_n,
                                               0,
                                               update_institution_in,
                                               nvl(update_institution_in, update_institution)),
               id_prognosis           = decode(l_id_prognosis_n, 0, id_prognosis_in, nvl(id_prognosis_in, id_prognosis))
         WHERE id_epis_prognosis_hist = id_epis_prognosis_hist_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_prognosis_hist_in  IN epis_prognosis_hist.id_epis_prognosis_hist%TYPE,
        dt_epis_prognosis_hist_in  IN epis_prognosis_hist.dt_epis_prognosis_hist%TYPE DEFAULT NULL,
        dt_epis_prognosis_hist_nin IN BOOLEAN := TRUE,
        id_epis_prognosis_in       IN epis_prognosis_hist.id_epis_prognosis%TYPE DEFAULT NULL,
        id_epis_prognosis_nin      IN BOOLEAN := TRUE,
        id_episode_in              IN epis_prognosis_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        flg_status_in              IN epis_prognosis_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        prognosis_notes_in         IN epis_prognosis_hist.prognosis_notes%TYPE DEFAULT NULL,
        prognosis_notes_nin        IN BOOLEAN := TRUE,
        id_prof_create_in          IN epis_prognosis_hist.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin         IN BOOLEAN := TRUE,
        dt_create_in               IN epis_prognosis_hist.dt_create%TYPE DEFAULT NULL,
        dt_create_nin              IN BOOLEAN := TRUE,
        id_prof_last_update_in     IN epis_prognosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin    IN BOOLEAN := TRUE,
        dt_last_update_in          IN epis_prognosis_hist.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin         IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN epis_prognosis_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN epis_prognosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        cancel_notes_in            IN epis_prognosis_hist.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin           IN BOOLEAN := TRUE,
        dt_cancel_in               IN epis_prognosis_hist.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        create_user_in             IN epis_prognosis_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN epis_prognosis_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN epis_prognosis_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN epis_prognosis_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN epis_prognosis_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN epis_prognosis_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        id_prognosis_in            IN epis_prognosis_hist.id_prognosis%TYPE DEFAULT NULL,
        id_prognosis_nin           IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_prognosis_hist_in  => id_epis_prognosis_hist_in,
            dt_epis_prognosis_hist_in  => dt_epis_prognosis_hist_in,
            dt_epis_prognosis_hist_nin => dt_epis_prognosis_hist_nin,
            id_epis_prognosis_in       => id_epis_prognosis_in,
            id_epis_prognosis_nin      => id_epis_prognosis_nin,
            id_episode_in              => id_episode_in,
            id_episode_nin             => id_episode_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            prognosis_notes_in         => prognosis_notes_in,
            prognosis_notes_nin        => prognosis_notes_nin,
            id_prof_create_in          => id_prof_create_in,
            id_prof_create_nin         => id_prof_create_nin,
            dt_create_in               => dt_create_in,
            dt_create_nin              => dt_create_nin,
            id_prof_last_update_in     => id_prof_last_update_in,
            id_prof_last_update_nin    => id_prof_last_update_nin,
            dt_last_update_in          => dt_last_update_in,
            dt_last_update_nin         => dt_last_update_nin,
            id_prof_cancel_in          => id_prof_cancel_in,
            id_prof_cancel_nin         => id_prof_cancel_nin,
            id_cancel_reason_in        => id_cancel_reason_in,
            id_cancel_reason_nin       => id_cancel_reason_nin,
            cancel_notes_in            => cancel_notes_in,
            cancel_notes_nin           => cancel_notes_nin,
            dt_cancel_in               => dt_cancel_in,
            dt_cancel_nin              => dt_cancel_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            id_prognosis_in            => id_prognosis_in,
            id_prognosis_nin           => id_prognosis_nin,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        dt_epis_prognosis_hist_in  IN epis_prognosis_hist.dt_epis_prognosis_hist%TYPE DEFAULT NULL,
        dt_epis_prognosis_hist_nin IN BOOLEAN := TRUE,
        id_epis_prognosis_in       IN epis_prognosis_hist.id_epis_prognosis%TYPE DEFAULT NULL,
        id_epis_prognosis_nin      IN BOOLEAN := TRUE,
        id_episode_in              IN epis_prognosis_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        flg_status_in              IN epis_prognosis_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        prognosis_notes_in         IN epis_prognosis_hist.prognosis_notes%TYPE DEFAULT NULL,
        prognosis_notes_nin        IN BOOLEAN := TRUE,
        id_prof_create_in          IN epis_prognosis_hist.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin         IN BOOLEAN := TRUE,
        dt_create_in               IN epis_prognosis_hist.dt_create%TYPE DEFAULT NULL,
        dt_create_nin              IN BOOLEAN := TRUE,
        id_prof_last_update_in     IN epis_prognosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin    IN BOOLEAN := TRUE,
        dt_last_update_in          IN epis_prognosis_hist.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin         IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN epis_prognosis_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN epis_prognosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        cancel_notes_in            IN epis_prognosis_hist.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin           IN BOOLEAN := TRUE,
        dt_cancel_in               IN epis_prognosis_hist.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        create_user_in             IN epis_prognosis_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN epis_prognosis_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN epis_prognosis_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN epis_prognosis_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN epis_prognosis_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN epis_prognosis_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        id_prognosis_in            IN epis_prognosis_hist.id_prognosis%TYPE DEFAULT NULL,
        id_prognosis_nin           IN BOOLEAN := TRUE,
        where_in                   IN VARCHAR2,
        handle_error_in            IN BOOLEAN := FALSE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_sql                      VARCHAR2(32767);
        l_rows_out                 table_varchar;
        l_dt_epis_prognosis_hist_n NUMBER(1) := sys.diutil.bool_to_int(dt_epis_prognosis_hist_nin);
        l_id_epis_prognosis_n      NUMBER(1) := sys.diutil.bool_to_int(id_epis_prognosis_nin);
        l_id_episode_n             NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_flg_status_n             NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_prognosis_notes_n        NUMBER(1) := sys.diutil.bool_to_int(prognosis_notes_nin);
        l_id_prof_create_n         NUMBER(1) := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_create_n              NUMBER(1) := sys.diutil.bool_to_int(dt_create_nin);
        l_id_prof_last_update_n    NUMBER(1) := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_n         NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_nin);
        l_id_prof_cancel_n         NUMBER(1) := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_id_cancel_reason_n       NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_cancel_notes_n           NUMBER(1) := sys.diutil.bool_to_int(cancel_notes_nin);
        l_dt_cancel_n              NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_nin);
        l_create_user_n            NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_prognosis_n           NUMBER(1) := sys.diutil.bool_to_int(id_prognosis_nin);
    BEGIN
        l_dt_epis_prognosis_hist_n := sys.diutil.bool_to_int(dt_epis_prognosis_hist_nin);
        l_id_epis_prognosis_n      := sys.diutil.bool_to_int(id_epis_prognosis_nin);
        l_id_episode_n             := sys.diutil.bool_to_int(id_episode_nin);
        l_flg_status_n             := sys.diutil.bool_to_int(flg_status_nin);
        l_prognosis_notes_n        := sys.diutil.bool_to_int(prognosis_notes_nin);
        l_id_prof_create_n         := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_create_n              := sys.diutil.bool_to_int(dt_create_nin);
        l_id_prof_last_update_n    := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_n         := sys.diutil.bool_to_int(dt_last_update_nin);
        l_id_prof_cancel_n         := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_id_cancel_reason_n       := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_cancel_notes_n           := sys.diutil.bool_to_int(cancel_notes_nin);
        l_dt_cancel_n              := sys.diutil.bool_to_int(dt_cancel_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
        l_id_prognosis_n           := sys.diutil.bool_to_int(id_prognosis_nin);
        l_sql                      := 'UPDATE epis_prognosis_hist SET' || ' DT_EPIS_PROGNOSIS_HIST = decode (' ||
                                      l_dt_epis_prognosis_hist_n ||
                                      ',0,:DT_EPIS_PROGNOSIS_HIST_in, NVL (:DT_EPIS_PROGNOSIS_HIST_in, DT_EPIS_PROGNOSIS_HIST)) ' || ',' ||
                                      ' ID_EPIS_PROGNOSIS = decode (' || l_id_epis_prognosis_n ||
                                      ',0,:ID_EPIS_PROGNOSIS_in, NVL (:ID_EPIS_PROGNOSIS_in, ID_EPIS_PROGNOSIS)) ' || ',' ||
                                      ' ID_EPISODE = decode (' || l_id_episode_n ||
                                      ',0,:ID_EPISODE_in, NVL (:ID_EPISODE_in, ID_EPISODE)) ' || ',' ||
                                      ' FLG_STATUS = decode (' || l_flg_status_n ||
                                      ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' || ',' ||
                                      ' PROGNOSIS_NOTES = decode (' || l_prognosis_notes_n ||
                                      ',0,:PROGNOSIS_NOTES_in, NVL (:PROGNOSIS_NOTES_in, PROGNOSIS_NOTES)) ' || ',' ||
                                      ' ID_PROF_CREATE = decode (' || l_id_prof_create_n ||
                                      ',0,:ID_PROF_CREATE_in, NVL (:ID_PROF_CREATE_in, ID_PROF_CREATE)) ' || ',' ||
                                      ' DT_CREATE = decode (' || l_dt_create_n ||
                                      ',0,:DT_CREATE_in, NVL (:DT_CREATE_in, DT_CREATE)) ' || ',' ||
                                      ' ID_PROF_LAST_UPDATE = decode (' || l_id_prof_last_update_n ||
                                      ',0,:ID_PROF_LAST_UPDATE_in, NVL (:ID_PROF_LAST_UPDATE_in, ID_PROF_LAST_UPDATE)) ' || ',' ||
                                      ' DT_LAST_UPDATE = decode (' || l_dt_last_update_n ||
                                      ',0,:DT_LAST_UPDATE_in, NVL (:DT_LAST_UPDATE_in, DT_LAST_UPDATE)) ' || ',' ||
                                      ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                                      ',0,:ID_PROF_CANCEL_in, NVL (:ID_PROF_CANCEL_in, ID_PROF_CANCEL)) ' || ',' ||
                                      ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                                      ',0,:ID_CANCEL_REASON_in, NVL (:ID_CANCEL_REASON_in, ID_CANCEL_REASON)) ' || ',' ||
                                      ' CANCEL_NOTES = decode (' || l_cancel_notes_n ||
                                      ',0,:CANCEL_NOTES_in, NVL (:CANCEL_NOTES_in, CANCEL_NOTES)) ' || ',' ||
                                      ' DT_CANCEL = decode (' || l_dt_cancel_n ||
                                      ',0,:DT_CANCEL_in, NVL (:DT_CANCEL_in, DT_CANCEL)) ' || ',' ||
                                      ' CREATE_USER = decode (' || l_create_user_n ||
                                      ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                      ' CREATE_TIME = decode (' || l_create_time_n ||
                                      ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                      ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                      ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                      ' UPDATE_USER = decode (' || l_update_user_n ||
                                      ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                      ' UPDATE_TIME = decode (' || l_update_time_n ||
                                      ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                      ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                      ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                      ' ID_PROGNOSIS = decode (' || l_id_prognosis_n ||
                                      ',0,:ID_PROGNOSIS_in, NVL (:ID_PROGNOSIS_in, ID_PROGNOSIS)) ' || ' where ' ||
                                      nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN dt_epis_prognosis_hist_in, id_epis_prognosis_in, id_episode_in, flg_status_in, prognosis_notes_in, id_prof_create_in, dt_create_in, id_prof_last_update_in, dt_last_update_in, id_prof_cancel_in, id_cancel_reason_in, cancel_notes_in, dt_cancel_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_prognosis_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        dt_epis_prognosis_hist_in  IN epis_prognosis_hist.dt_epis_prognosis_hist%TYPE DEFAULT NULL,
        dt_epis_prognosis_hist_nin IN BOOLEAN := TRUE,
        id_epis_prognosis_in       IN epis_prognosis_hist.id_epis_prognosis%TYPE DEFAULT NULL,
        id_epis_prognosis_nin      IN BOOLEAN := TRUE,
        id_episode_in              IN epis_prognosis_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin             IN BOOLEAN := TRUE,
        flg_status_in              IN epis_prognosis_hist.flg_status%TYPE DEFAULT NULL,
        flg_status_nin             IN BOOLEAN := TRUE,
        prognosis_notes_in         IN epis_prognosis_hist.prognosis_notes%TYPE DEFAULT NULL,
        prognosis_notes_nin        IN BOOLEAN := TRUE,
        id_prof_create_in          IN epis_prognosis_hist.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin         IN BOOLEAN := TRUE,
        dt_create_in               IN epis_prognosis_hist.dt_create%TYPE DEFAULT NULL,
        dt_create_nin              IN BOOLEAN := TRUE,
        id_prof_last_update_in     IN epis_prognosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin    IN BOOLEAN := TRUE,
        dt_last_update_in          IN epis_prognosis_hist.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin         IN BOOLEAN := TRUE,
        id_prof_cancel_in          IN epis_prognosis_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin         IN BOOLEAN := TRUE,
        id_cancel_reason_in        IN epis_prognosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin       IN BOOLEAN := TRUE,
        cancel_notes_in            IN epis_prognosis_hist.cancel_notes%TYPE DEFAULT NULL,
        cancel_notes_nin           IN BOOLEAN := TRUE,
        dt_cancel_in               IN epis_prognosis_hist.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin              IN BOOLEAN := TRUE,
        create_user_in             IN epis_prognosis_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN epis_prognosis_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN epis_prognosis_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN epis_prognosis_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN epis_prognosis_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN epis_prognosis_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        id_prognosis_in            IN epis_prognosis_hist.id_prognosis%TYPE DEFAULT NULL,
        id_prognosis_nin           IN BOOLEAN := TRUE,
        where_in                   IN VARCHAR2,
        handle_error_in            IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(dt_epis_prognosis_hist_in  => dt_epis_prognosis_hist_in,
            dt_epis_prognosis_hist_nin => dt_epis_prognosis_hist_nin,
            id_epis_prognosis_in       => id_epis_prognosis_in,
            id_epis_prognosis_nin      => id_epis_prognosis_nin,
            id_episode_in              => id_episode_in,
            id_episode_nin             => id_episode_nin,
            flg_status_in              => flg_status_in,
            flg_status_nin             => flg_status_nin,
            prognosis_notes_in         => prognosis_notes_in,
            prognosis_notes_nin        => prognosis_notes_nin,
            id_prof_create_in          => id_prof_create_in,
            id_prof_create_nin         => id_prof_create_nin,
            dt_create_in               => dt_create_in,
            dt_create_nin              => dt_create_nin,
            id_prof_last_update_in     => id_prof_last_update_in,
            id_prof_last_update_nin    => id_prof_last_update_nin,
            dt_last_update_in          => dt_last_update_in,
            dt_last_update_nin         => dt_last_update_nin,
            id_prof_cancel_in          => id_prof_cancel_in,
            id_prof_cancel_nin         => id_prof_cancel_nin,
            id_cancel_reason_in        => id_cancel_reason_in,
            id_cancel_reason_nin       => id_cancel_reason_nin,
            cancel_notes_in            => cancel_notes_in,
            cancel_notes_nin           => cancel_notes_nin,
            dt_cancel_in               => dt_cancel_in,
            dt_cancel_nin              => dt_cancel_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            id_prognosis_in            => id_prognosis_in,
            id_prognosis_nin           => id_prognosis_nin,
            where_in                   => where_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_epis_prognosis_hist_in IN epis_prognosis_hist.id_epis_prognosis_hist%TYPE,
        dt_epis_prognosis_hist_in IN epis_prognosis_hist.dt_epis_prognosis_hist%TYPE DEFAULT NULL,
        id_epis_prognosis_in      IN epis_prognosis_hist.id_epis_prognosis%TYPE DEFAULT NULL,
        id_episode_in             IN epis_prognosis_hist.id_episode%TYPE DEFAULT NULL,
        flg_status_in             IN epis_prognosis_hist.flg_status%TYPE DEFAULT NULL,
        prognosis_notes_in        IN epis_prognosis_hist.prognosis_notes%TYPE DEFAULT NULL,
        id_prof_create_in         IN epis_prognosis_hist.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in              IN epis_prognosis_hist.dt_create%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN epis_prognosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN epis_prognosis_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN epis_prognosis_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN epis_prognosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in           IN epis_prognosis_hist.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN epis_prognosis_hist.dt_cancel%TYPE DEFAULT NULL,
        create_user_in            IN epis_prognosis_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN epis_prognosis_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN epis_prognosis_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN epis_prognosis_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN epis_prognosis_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN epis_prognosis_hist.update_institution%TYPE DEFAULT NULL,
        id_prognosis_in           IN epis_prognosis_hist.id_prognosis%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := FALSE,
        rows_out                  IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_prognosis_hist_in => id_epis_prognosis_hist_in,
            dt_epis_prognosis_hist_in => dt_epis_prognosis_hist_in,
            id_epis_prognosis_in      => id_epis_prognosis_in,
            id_episode_in             => id_episode_in,
            flg_status_in             => flg_status_in,
            prognosis_notes_in        => prognosis_notes_in,
            id_prof_create_in         => id_prof_create_in,
            dt_create_in              => dt_create_in,
            id_prof_last_update_in    => id_prof_last_update_in,
            dt_last_update_in         => dt_last_update_in,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_cancel_reason_in       => id_cancel_reason_in,
            cancel_notes_in           => cancel_notes_in,
            dt_cancel_in              => dt_cancel_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            id_prognosis_in           => id_prognosis_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_epis_prognosis_hist_in => id_epis_prognosis_hist_in,
                dt_epis_prognosis_hist_in => dt_epis_prognosis_hist_in,
                id_epis_prognosis_in      => id_epis_prognosis_in,
                id_episode_in             => id_episode_in,
                flg_status_in             => flg_status_in,
                prognosis_notes_in        => prognosis_notes_in,
                id_prof_create_in         => id_prof_create_in,
                dt_create_in              => dt_create_in,
                id_prof_last_update_in    => id_prof_last_update_in,
                dt_last_update_in         => dt_last_update_in,
                id_prof_cancel_in         => id_prof_cancel_in,
                id_cancel_reason_in       => id_cancel_reason_in,
                cancel_notes_in           => cancel_notes_in,
                dt_cancel_in              => dt_cancel_in,
                create_user_in            => create_user_in,
                create_time_in            => create_time_in,
                create_institution_in     => create_institution_in,
                update_user_in            => update_user_in,
                update_time_in            => update_time_in,
                update_institution_in     => update_institution_in,
                id_prognosis_in           => id_prognosis_in,
                handle_error_in           => handle_error_in,
                rows_out                  => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_epis_prognosis_hist_in IN epis_prognosis_hist.id_epis_prognosis_hist%TYPE,
        dt_epis_prognosis_hist_in IN epis_prognosis_hist.dt_epis_prognosis_hist%TYPE DEFAULT NULL,
        id_epis_prognosis_in      IN epis_prognosis_hist.id_epis_prognosis%TYPE DEFAULT NULL,
        id_episode_in             IN epis_prognosis_hist.id_episode%TYPE DEFAULT NULL,
        flg_status_in             IN epis_prognosis_hist.flg_status%TYPE DEFAULT NULL,
        prognosis_notes_in        IN epis_prognosis_hist.prognosis_notes%TYPE DEFAULT NULL,
        id_prof_create_in         IN epis_prognosis_hist.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in              IN epis_prognosis_hist.dt_create%TYPE DEFAULT NULL,
        id_prof_last_update_in    IN epis_prognosis_hist.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in         IN epis_prognosis_hist.dt_last_update%TYPE DEFAULT NULL,
        id_prof_cancel_in         IN epis_prognosis_hist.id_prof_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in       IN epis_prognosis_hist.id_cancel_reason%TYPE DEFAULT NULL,
        cancel_notes_in           IN epis_prognosis_hist.cancel_notes%TYPE DEFAULT NULL,
        dt_cancel_in              IN epis_prognosis_hist.dt_cancel%TYPE DEFAULT NULL,
        create_user_in            IN epis_prognosis_hist.create_user%TYPE DEFAULT NULL,
        create_time_in            IN epis_prognosis_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN epis_prognosis_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN epis_prognosis_hist.update_user%TYPE DEFAULT NULL,
        update_time_in            IN epis_prognosis_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN epis_prognosis_hist.update_institution%TYPE DEFAULT NULL,
        id_prognosis_in           IN epis_prognosis_hist.id_prognosis%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_epis_prognosis_hist_in,
                dt_epis_prognosis_hist_in,
                id_epis_prognosis_in,
                id_episode_in,
                flg_status_in,
                prognosis_notes_in,
                id_prof_create_in,
                dt_create_in,
                id_prof_last_update_in,
                dt_last_update_in,
                id_prof_cancel_in,
                id_cancel_reason_in,
                cancel_notes_in,
                dt_cancel_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_prognosis_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_prognosis_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_prognosis_hist_in => rec_in.id_epis_prognosis_hist,
            dt_epis_prognosis_hist_in => rec_in.dt_epis_prognosis_hist,
            id_epis_prognosis_in      => rec_in.id_epis_prognosis,
            id_episode_in             => rec_in.id_episode,
            flg_status_in             => rec_in.flg_status,
            prognosis_notes_in        => rec_in.prognosis_notes,
            id_prof_create_in         => rec_in.id_prof_create,
            dt_create_in              => rec_in.dt_create,
            id_prof_last_update_in    => rec_in.id_prof_last_update,
            dt_last_update_in         => rec_in.dt_last_update,
            id_prof_cancel_in         => rec_in.id_prof_cancel,
            id_cancel_reason_in       => rec_in.id_cancel_reason,
            cancel_notes_in           => rec_in.cancel_notes,
            dt_cancel_in              => rec_in.dt_cancel,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            id_prognosis_in           => rec_in.id_prognosis,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_prognosis_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_prognosis_hist_in => rec_in.id_epis_prognosis_hist,
            dt_epis_prognosis_hist_in => rec_in.dt_epis_prognosis_hist,
            id_epis_prognosis_in      => rec_in.id_epis_prognosis,
            id_episode_in             => rec_in.id_episode,
            flg_status_in             => rec_in.flg_status,
            prognosis_notes_in        => rec_in.prognosis_notes,
            id_prof_create_in         => rec_in.id_prof_create,
            dt_create_in              => rec_in.dt_create,
            id_prof_last_update_in    => rec_in.id_prof_last_update,
            dt_last_update_in         => rec_in.dt_last_update,
            id_prof_cancel_in         => rec_in.id_prof_cancel,
            id_cancel_reason_in       => rec_in.id_cancel_reason,
            cancel_notes_in           => rec_in.cancel_notes,
            dt_cancel_in              => rec_in.dt_cancel,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            id_prognosis_in           => rec_in.id_prognosis,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_prognosis_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := FALSE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_epis_prognosis_hist id_epis_prognosis_hist_cc;
        l_dt_epis_prognosis_hist dt_epis_prognosis_hist_cc;
        l_id_epis_prognosis      id_epis_prognosis_cc;
        l_id_episode             id_episode_cc;
        l_flg_status             flg_status_cc;
        l_prognosis_notes        prognosis_notes_cc;
        l_id_prof_create         id_prof_create_cc;
        l_dt_create              dt_create_cc;
        l_id_prof_last_update    id_prof_last_update_cc;
        l_dt_last_update         dt_last_update_cc;
        l_id_prof_cancel         id_prof_cancel_cc;
        l_id_cancel_reason       id_cancel_reason_cc;
        l_cancel_notes           cancel_notes_cc;
        l_dt_cancel              dt_cancel_cc;
        l_create_user            create_user_cc;
        l_create_time            create_time_cc;
        l_create_institution     create_institution_cc;
        l_update_user            update_user_cc;
        l_update_time            update_time_cc;
        l_update_institution     update_institution_cc;
        l_id_prognosis           id_prognosis_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_epis_prognosis_hist(i) := col_in(i).id_epis_prognosis_hist;
            l_dt_epis_prognosis_hist(i) := col_in(i).dt_epis_prognosis_hist;
            l_id_epis_prognosis(i) := col_in(i).id_epis_prognosis;
            l_id_episode(i) := col_in(i).id_episode;
            l_flg_status(i) := col_in(i).flg_status;
            l_prognosis_notes(i) := col_in(i).prognosis_notes;
            l_id_prof_create(i) := col_in(i).id_prof_create;
            l_dt_create(i) := col_in(i).dt_create;
            l_id_prof_last_update(i) := col_in(i).id_prof_last_update;
            l_dt_last_update(i) := col_in(i).dt_last_update;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_cancel_notes(i) := col_in(i).cancel_notes;
            l_dt_cancel(i) := col_in(i).dt_cancel;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_prognosis(i) := col_in(i).id_prognosis;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_prognosis_hist
                   SET dt_epis_prognosis_hist = nvl(l_dt_epis_prognosis_hist(i), dt_epis_prognosis_hist),
                       id_epis_prognosis      = nvl(l_id_epis_prognosis(i), id_epis_prognosis),
                       id_episode             = nvl(l_id_episode(i), id_episode),
                       flg_status             = nvl(l_flg_status(i), flg_status),
                       prognosis_notes        = nvl(l_prognosis_notes(i), prognosis_notes),
                       id_prof_create         = nvl(l_id_prof_create(i), id_prof_create),
                       dt_create              = nvl(l_dt_create(i), dt_create),
                       id_prof_last_update    = nvl(l_id_prof_last_update(i), id_prof_last_update),
                       dt_last_update         = nvl(l_dt_last_update(i), dt_last_update),
                       id_prof_cancel         = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       id_cancel_reason       = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       cancel_notes           = nvl(l_cancel_notes(i), cancel_notes),
                       dt_cancel              = nvl(l_dt_cancel(i), dt_cancel),
                       create_user            = nvl(l_create_user(i), create_user),
                       create_time            = nvl(l_create_time(i), create_time),
                       create_institution     = nvl(l_create_institution(i), create_institution),
                       update_user            = nvl(l_update_user(i), update_user),
                       update_time            = nvl(l_update_time(i), update_time),
                       update_institution     = nvl(l_update_institution(i), update_institution),
                       id_prognosis           = nvl(l_id_prognosis(i), id_prognosis)
                 WHERE id_epis_prognosis_hist = l_id_epis_prognosis_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_prognosis_hist
                   SET dt_epis_prognosis_hist = l_dt_epis_prognosis_hist(i),
                       id_epis_prognosis      = l_id_epis_prognosis(i),
                       id_episode             = l_id_episode(i),
                       flg_status             = l_flg_status(i),
                       prognosis_notes        = l_prognosis_notes(i),
                       id_prof_create         = l_id_prof_create(i),
                       dt_create              = l_dt_create(i),
                       id_prof_last_update    = l_id_prof_last_update(i),
                       dt_last_update         = l_dt_last_update(i),
                       id_prof_cancel         = l_id_prof_cancel(i),
                       id_cancel_reason       = l_id_cancel_reason(i),
                       cancel_notes           = l_cancel_notes(i),
                       dt_cancel              = l_dt_cancel(i),
                       create_user            = l_create_user(i),
                       create_time            = l_create_time(i),
                       create_institution     = l_create_institution(i),
                       update_user            = l_update_user(i),
                       update_time            = l_update_time(i),
                       update_institution     = l_update_institution(i),
                       id_prognosis           = l_id_prognosis(i)
                 WHERE id_epis_prognosis_hist = l_id_epis_prognosis_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_prognosis_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE epis_prognosis_hist
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := FALSE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE epis_prognosis_hist
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE epis_prognosis_hist
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_prognosis_hist_in IN epis_prognosis_hist.id_epis_prognosis_hist%TYPE,
        handle_error_in           IN BOOLEAN := FALSE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_prognosis_hist
         WHERE id_epis_prognosis_hist = id_epis_prognosis_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_prognosis_hist_in IN epis_prognosis_hist.id_epis_prognosis_hist%TYPE,
        handle_error_in           IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_epis_prognosis_hist_in => id_epis_prognosis_hist_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END del;

    -- Delete all rows for this EPH_EP_FK foreign key value
    PROCEDURE del_eph_ep_fk
    (
        id_epis_prognosis_in IN epis_prognosis_hist.id_epis_prognosis%TYPE,
        handle_error_in      IN BOOLEAN := FALSE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_prognosis_hist
         WHERE id_epis_prognosis = id_epis_prognosis_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_eph_ep_fk;

    -- Delete all rows for this EPH_EP_FK foreign key value
    PROCEDURE del_eph_ep_fk
    (
        id_epis_prognosis_in IN epis_prognosis_hist.id_epis_prognosis%TYPE,
        handle_error_in      IN BOOLEAN := FALSE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eph_ep_fk(id_epis_prognosis_in => id_epis_prognosis_in,
                      handle_error_in      => handle_error_in,
                      rows_out             => rows_out);
    END del_eph_ep_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM epis_prognosis_hist';
        ELSE
            RETURN 'DELETE FROM epis_prognosis_hist WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := FALSE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := FALSE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(epis_prognosis_hist_inout IN OUT epis_prognosis_hist%ROWTYPE) IS
    BEGIN
        epis_prognosis_hist_inout.id_epis_prognosis_hist := NULL;
        epis_prognosis_hist_inout.dt_epis_prognosis_hist := NULL;
        epis_prognosis_hist_inout.id_epis_prognosis      := NULL;
        epis_prognosis_hist_inout.id_episode             := NULL;
        epis_prognosis_hist_inout.flg_status             := NULL;
        epis_prognosis_hist_inout.prognosis_notes        := NULL;
        epis_prognosis_hist_inout.id_prof_create         := NULL;
        epis_prognosis_hist_inout.dt_create              := NULL;
        epis_prognosis_hist_inout.id_prof_last_update    := NULL;
        epis_prognosis_hist_inout.dt_last_update         := NULL;
        epis_prognosis_hist_inout.id_prof_cancel         := NULL;
        epis_prognosis_hist_inout.id_cancel_reason       := NULL;
        epis_prognosis_hist_inout.cancel_notes           := NULL;
        epis_prognosis_hist_inout.dt_cancel              := NULL;
        epis_prognosis_hist_inout.create_user            := NULL;
        epis_prognosis_hist_inout.create_time            := NULL;
        epis_prognosis_hist_inout.create_institution     := NULL;
        epis_prognosis_hist_inout.update_user            := NULL;
        epis_prognosis_hist_inout.update_time            := NULL;
        epis_prognosis_hist_inout.update_institution     := NULL;
        epis_prognosis_hist_inout.id_prognosis           := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN epis_prognosis_hist%ROWTYPE IS
        l_epis_prognosis_hist epis_prognosis_hist%ROWTYPE;
    BEGIN
        RETURN l_epis_prognosis_hist;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_prognosis_hist_tc IS
        data epis_prognosis_hist_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM epis_prognosis_hist
         WHERE ROWID IN (SELECT /*+ OPT_ESTIMATE(TABLE t ROWS=1) */
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_prognosis_hist_tc IS
        data epis_prognosis_hist_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_epis_prognosis_hist;
/
