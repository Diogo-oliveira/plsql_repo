CREATE OR REPLACE PACKAGE BODY pk_events AS
    /********************************************************************************************
    * get epis type from consult_req
    *
    * @param      i_consult_req       id consult req  
    *
    * @return  id_epis_type
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/09/30
    **********************************************************************************************/
    FUNCTION get_epis_type_consult_req(i_consult_req IN consult_req.id_consult_req%TYPE) RETURN VARCHAR2 IS
        l_epis_type epis_type.id_epis_type%TYPE;
    BEGIN
        SELECT decode(s.id_software, 1, 1, 3, 8, 12, 11)
          INTO l_epis_type
          FROM consult_req cr
          JOIN dep_clin_serv dcs
            ON dcs.id_dep_clin_serv = cr.id_dep_clin_serv
          JOIN department d
            ON d.id_department = dcs.id_department
          JOIN dept dpt
            ON dpt.id_dept = d.id_dept
          JOIN software_dept sd
            ON sd.id_dept = d.id_dept
          JOIN software s
            ON s.id_software = sd.id_software
         WHERE s.id_software IN (1, 3, 12)
           AND id_consult_req = i_consult_req
           AND rownum = 1;
    
        RETURN l_epis_type;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_epis_type_consult_req;
    /********************************************************************************************
    * get event type icon
    *
    * @param      i_event_type       event type   
    *
    * @return  event type  description 
    * @author  Sérgio Santos
    * @version 1.0
    * @since  2010/05/25
    **********************************************************************************************/
    FUNCTION get_event_type_icon(i_event_type IN future_event_type.id_epis_type%TYPE) RETURN VARCHAR2 IS
        l_event_type_icon future_event_type.icon%TYPE;
    BEGIN
        SELECT f.icon
          INTO l_event_type_icon
          FROM future_event_type f
         WHERE f.id_future_event_type = i_event_type;
    
        RETURN l_event_type_icon;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_event_type_icon;

    /********************************************************************************************
    * get event type by episisode type
    *
    * @param      i_epis_type       episode type   
    *
    * @return  event type  description 
    * @author  Sérgio Santos
    * @version 1.0
    * @since  2010/05/25
    **********************************************************************************************/
    FUNCTION get_event_type_by_epis_type(i_epis_type IN future_event_type.id_epis_type%TYPE) RETURN NUMBER IS
        l_event_type future_event_type.id_epis_type%TYPE;
    BEGIN
        SELECT f.id_future_event_type
          INTO l_event_type
          FROM future_event_type f
         WHERE f.id_epis_type = i_epis_type;
    
        RETURN l_event_type;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_event_type_by_epis_type;

    /********************************************************************************************
    * get task type by future_event_type
    *
    * @param      i_future_event_type       episode type   
    *
    * @return  event type  description 
    * @author  paulo teixeira
    * @version 1.0
    * @since  2010/06/29
    **********************************************************************************************/
    FUNCTION get_task_type_by_fet(i_future_event_type IN future_event_type.id_future_event_type%TYPE) RETURN NUMBER IS
        l_task_type future_event_type.id_task_type%TYPE;
    BEGIN
        SELECT f.id_task_type
          INTO l_task_type
          FROM future_event_type f
         WHERE f.id_future_event_type = i_future_event_type;
    
        RETURN l_task_type;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_task_type_by_fet;

    /********************************************************************************************
    * get fe using task type
    *
    * @param    i_lang              Língua registada como preferência do profissional
    * @param    i_prof              profissional identifier
    * @param    i_id_task_type      task type identifier
    *
    * @return  future event type
    * @author  Sérgio Santos
    * @version 1.0
    * @since  2010/06/29
    **********************************************************************************************/
    FUNCTION get_fet_by_task_type
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_id_task_type IN task_type.id_task_type%TYPE
    ) RETURN NUMBER IS
        l_future_event_type future_event_type.id_future_event_type%TYPE;
        l_epis_type         future_event_type.id_epis_type%TYPE;
        l_flg_type          future_event_type.flg_type%TYPE;
        l_title             pk_translation.t_desc_translation;
        l_error             t_error_out;
    BEGIN
    
        IF NOT get_fet_ep_by_task_type(i_lang              => i_lang,
                                       i_prof              => i_prof,
                                       i_id_task_type      => i_id_task_type,
                                       o_future_event_type => l_future_event_type,
                                       o_epis_type         => l_epis_type,
                                       o_flg_type          => l_flg_type,
                                       o_title             => l_title,
                                       o_error             => l_error)
        THEN
            RETURN NULL;
        END IF;
    
        RETURN l_future_event_type;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_fet_by_task_type;
    /********************************************************************************************
    * get future_event_type and epis_type using task type
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_id_task_type       id_task_type 
    * @param      o_future_event_type  cfuture_event_type  
    * @param      o_epis_type          epis_type     
    * @param      o_flg_type           flg_type
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Sérgio Santos
    * @version 1.0
    * @since  2010/06/29
    **********************************************************************************************/
    FUNCTION get_fet_ep_by_task_type
    (
        i_lang              IN language.id_language%TYPE,
        i_prof              IN profissional,
        i_id_task_type      IN task_type.id_task_type%TYPE,
        o_future_event_type OUT future_event_type.id_future_event_type%TYPE,
        o_epis_type         OUT future_event_type.id_epis_type%TYPE,
        o_flg_type          OUT future_event_type.flg_type%TYPE,
        o_title             OUT pk_translation.t_desc_translation,
        o_error             OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_FET_EP_BY_TASK_TYPE';
    BEGIN
    
        g_error := 'GET FUTURE_EVENT_TYPE ID';
        BEGIN
            SELECT *
              INTO o_future_event_type, o_epis_type, o_flg_type, o_title
              FROM (SELECT fet.id_future_event_type,
                           fet.id_epis_type,
                           fet.flg_type,
                           pk_translation.get_translation(i_lang, fet.code_future_event_title)
                      FROM future_event_type fet
                     WHERE fet.id_task_type = i_id_task_type
                       AND (fet.id_epis_type = pk_sysconfig.get_config('ID_EPIS_TYPE_MEDICAL', i_prof) OR
                           fet.id_task_type <> 30)
                     ORDER BY fet.id_future_event_type)
             WHERE rownum <= 1; -- this is hardcoded and it will use the OUTP future event type when repetitions were found
        EXCEPTION
            WHEN OTHERS THEN
                o_future_event_type := NULL;
                o_epis_type         := NULL;
                o_flg_type          := NULL;
                o_title             := NULL;
        END;
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            o_future_event_type := NULL;
            o_epis_type         := NULL;
            o_flg_type          := NULL;
            o_title             := NULL;
            RETURN FALSE;
    END get_fet_ep_by_task_type;
    /********************************************************************************************
    * get event type name
    *
    * @param      i_lang       language identifier 
    * @param      i_epis_type        episode type   
    *
    * @return  event type  description 
    * @author  Sérgio Santos
    * @version 1.0
    * @since  2010/05/25
    **********************************************************************************************/
    FUNCTION get_event_type_name
    (
        i_lang              IN language.id_language%TYPE,
        i_future_event_type IN future_event_type.id_future_event_type%TYPE
    ) RETURN VARCHAR2 IS
        l_event_name pk_translation.t_desc_translation;
    BEGIN
        SELECT pk_translation.get_translation(i_lang, f.code_future_event_type)
          INTO l_event_name
          FROM future_event_type f
         WHERE f.id_future_event_type = i_future_event_type;
    
        RETURN l_event_name;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
        
    END get_event_type_name;

    /********************************************************************************************
    * get event type name using task type
    *
    * @param      i_lang         language identifier 
    * @param      id_task_type   Task type identifier 
    *
    * @return  event type  description 
    * @author  Sérgio Santos
    * @version 1.0
    * @since  2010/05/25
    **********************************************************************************************/
    FUNCTION get_fe_desc_by_tk
    (
        i_lang      IN language.id_language%TYPE,
        i_task_type IN task_type.id_task_type%TYPE
    ) RETURN VARCHAR2 IS
        l_event_name pk_translation.t_desc_translation;
    BEGIN
        SELECT pk_translation.get_translation(i_lang, f.code_future_event_type)
          INTO l_event_name
          FROM future_event_type f
         WHERE f.id_task_type = i_task_type
           AND rownum <= 1;
    
        RETURN l_event_name;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
        
    END get_fe_desc_by_tk;

    /********************************************************************************************
    * get event type title
    *
    * @param      i_lang       language identifier
    * @param      i_epis_type        episode type   
    *
    * @return  event type  description 
    * @author  Sérgio Santos
    * @version 1.0
    * @since  2010/05/25
    **********************************************************************************************/
    FUNCTION get_event_type_title
    (
        i_lang              IN language.id_language%TYPE,
        i_future_event_type IN future_event_type.id_future_event_type%TYPE
    ) RETURN VARCHAR2 IS
        l_event_name pk_translation.t_desc_translation;
    BEGIN
        SELECT pk_translation.get_translation(i_lang, f.code_future_event_title)
          INTO l_event_name
          FROM future_event_type f
         WHERE f.id_future_event_type = i_future_event_type;
    
        RETURN l_event_name;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_event_type_title;

    /********************************************************************************************
    * result search patient
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_id_sys_btn_crit    criteria identifier
    * @param      i_crit_val           criteria value
    * @param      o_all_patients       patients
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/04
    **********************************************************************************************/
    FUNCTION get_search_patients
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_sys_btn_crit IN table_number,
        i_crit_val        IN table_varchar,
        o_all_patients    OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_SEARCH_PATIENTS';
    BEGIN
        g_error := 'GET_SEARCH_PATIENTS';
        IF NOT get_search_patients(i_lang            => i_lang,
                                   i_prof            => i_prof,
                                   i_id_sys_btn_crit => i_id_sys_btn_crit,
                                   i_crit_val        => i_crit_val,
                                   i_patient         => NULL,
                                   o_all_patients    => o_all_patients,
                                   o_error           => o_error)
        THEN
            RETURN FALSE;
        END IF;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_all_patients);
            RETURN FALSE;
    END;

    /********************************************************************************************
    * result search patient
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_id_sys_btn_crit    criteria identifier
    * @param      i_crit_val           criteria value
    * @param      i_patient            patient identifier
    * @param      o_all_patients       patients
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/04
    **********************************************************************************************/
    FUNCTION get_search_patients
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_sys_btn_crit IN table_number,
        i_crit_val        IN table_varchar,
        i_patient         IN consult_req.id_patient%TYPE,
        o_all_patients    OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name   CONSTANT VARCHAR2(60 CHAR) := 'GET_SEARCH_PATIENTS';
        l_ss_doc_type CONSTANT doc_type.id_doc_type%TYPE := 1032; -- social security doc type id
        --String para a parte variavel da cláusula where
        l_where VARCHAR2(4000);
        l_from  VARCHAR2(32767);
        l_hint  VARCHAR2(32767);
    
        l_patient     VARCHAR2(4000);
        l_patient_aux VARCHAR2(4000);
        --Apenas para o B.I.
        l_pat_doc_type doc_type.id_doc_type%TYPE := pk_sysconfig.get_config('DOC_TYPE_PID', i_prof);
        --Limite máx de linhas retornadas
        l_limit sys_config.value%TYPE;
        --Nº de registos retornados
        l_count NUMBER;
        --String temporária para parte da query variável
        aux_sql_temp VARCHAR2(32767);
        --Apenas registos clinicos activos
        l_clin_rec_flag_status CONSTANT clin_record.flg_status%TYPE := 'A';
        l_institutions table_number;
        l_def_date   CONSTANT doc_external.dt_inserted%TYPE := to_timestamp_tz('19000101', 'yyyymmdd');
        l_pfp_status CONSTANT pat_family_prof.flg_status%TYPE := 'A';
        l_market market.id_market%TYPE;
    BEGIN
        --Configuração do nº máx de linhas a retornar
        l_limit := pk_sysconfig.get_config('NUM_RECORD_SEARCH', i_prof);
        l_count := 0;
        --Leitura das condições de pesquisa
        l_where := pk_search.get_read_search_criteria(i_lang, i_prof, i_id_sys_btn_crit, i_crit_val, o_error);
    
        g_error := 'GET FROM';
        IF (NOT pk_search.get_from(i_criteria => i_id_sys_btn_crit,
                                   i_crit_val => i_crit_val,
                                   i_lang     => i_lang,
                                   i_prof     => i_prof,
                                   o_from     => l_from,
                                   o_hint     => l_hint))
        THEN
            l_from := NULL;
        END IF;
    
        IF i_patient IS NULL
        THEN
            l_patient_aux := 'NULL';
        ELSE
            l_patient_aux := i_patient;
        END IF;
        l_patient := ' and pat.id_patient = nvl(' || l_patient_aux || ',pat.id_patient)';
    
        l_institutions := pk_list.tf_get_all_inst_group(i_prof.institution, g_inst_grp_flg_rel_adt);
    
        l_market := pk_core.get_inst_mkt(i_id_institution => i_prof.institution);
    
        --Contagem do nº de registos
        aux_sql_temp := 'SELECT COUNT(pat.id_patient) ' || --
                        '  FROM patient pat ' || --
                        ' INNER JOIN clin_record cr ON pat.id_patient = cr.id_patient ' || --
                        ' INNER JOIN ( ' || --
                        '             SELECT column_value id_institution ' || --
                        '               FROM TABLE(:l_institutions) ' || --
                        '            ) tbl_inst_grp ON tbl_inst_grp.id_institution = cr.id_institution ' || l_from || --
                        ' WHERE rownum <= :l_limit + 1  AND pk_adt.is_contact(:i_lang,:i_prof,pat.id_patient) = ''N''' || --
                        l_patient || ' ' || l_where;
    
        g_error := 'COUNT Nº PATIENTS';
        EXECUTE IMMEDIATE aux_sql_temp
            INTO l_count
            USING --
        l_institutions, --
        l_limit, i_lang, i_prof;
    
        --Verificação no nº de registos!
        IF l_count = 0
        THEN
            RAISE pk_search.e_noresults;
        ELSIF l_count > l_limit
        THEN
            RAISE pk_search.e_overlimit;
        ELSE
            g_error      := 'GET CURSOR WITH ALL PATIENTS';
            aux_sql_temp := 'SELECT t.id_patient, ' || --
                            '       pk_patphoto.get_pat_photo(:i_lang, :i_prof, t.id_patient, NULL, NULL) pat_photo, ' || --
                            '       pk_patient.get_pat_age(:i_lang, t.id_patient, :i_prof) pat_age, ' || --
                            '       pk_sysdomain.get_domain(''PATIENT.GENDER.ABBR'', t.gender, :i_lang) pat_gender, ' || --
                           
                            '       decode(:i_prof_software, :g_software_care, ' || --
                            '              pk_search.get_software_prof_photo(:i_lang, :i_prof, PK_EVENTS.get_family_doctor(t.id_patient), NULL, ''P''), ' || --
                            '              pk_search.get_software_prof_photo(:i_lang, :i_prof, NULL, t.id_patient, ''P'')) prof_photo, ' || --
                            '       decode(:i_prof_software, :g_software_care, ' || --
                            '              pk_search.get_software_prof_photo(:i_lang, :i_prof, PK_EVENTS.get_family_doctor(t.id_patient), NULL, ''N''), ' || --
                            '              pk_search.get_software_prof_photo(:i_lang, :i_prof, NULL, t.id_patient, ''N'')) prof_name, ' || --
                           
                            '       (SELECT cr.num_clin_record
                                  FROM clin_record cr
                                 WHERE cr.id_patient = t.id_patient
                                   AND cr.id_institution = :i_prof_institution
                                   AND rownum < 2) num_clin_record, ' || --
                            '       decode(:l_market, ' || --
                            '              :g_id_market_usa, ' || --
                            '              pk_doc.get_pat_doc_num(t.id_patient, :l_ss_doc_type), ' || --
                            '              pk_patient.get_nhs_number(:i_lang, :i_prof, t.id_patient)) sns, ' || --
                            '       pk_hea_prv_aux.get_health_plan(:i_lang, :i_prof, t.id_patient, null, null) health_plan, ' || --
                            '       t.name, ' || --
                            '       t.name_pat_sort, ' || --
                            '       t.pat_ndo, ' || --
                            '       t.pat_nd_icon, ' || --
                            '       decode(t.dt_birth, ' || --
                            '              NULL, ' || --
                            '              NULL, ' || --
                            '              pk_date_utils.dt_chr(:i_lang, t.dt_birth, :i_prof_institution, :i_prof_software)) dt_birth, ' || --
                            '       pk_date_utils.date_send(:i_lang, dt_birth, :i_prof) pat_dt_birth_order,' || --
                            '       pk_doc.get_pat_doc_num(t.id_patient, :l_pat_doc_type) bi, ' || --
                            '       pk_patient.get_pat_location(:i_prof_institution, :g_inst_grp_flg_rel_adt, t.id_patient) location, ' || --
                            '       (SELECT pk_prof_utils.get_name_signature(:i_lang, :i_prof, pfp.id_professional)
                      FROM pat_family_prof pfp
                      JOIN (SELECT column_value id_institution
                             FROM TABLE(:l_institutions)) tbl_inst_grp ON tbl_inst_grp.id_institution =
                                                                                                     pfp.id_institution
                     WHERE (pfp.id_patient = t.id_patient OR pfp.id_pat_family = t.id_pat_family)
                       AND pfp.flg_status = :l_pfp_status
                       AND coalesce(pfp.dt_end_tstz, pfp.dt_begin_tstz, :l_def_date) =
                           (SELECT MAX(coalesce(pfp.dt_end_tstz, pfp.dt_begin_tstz, :l_def_date))
                              FROM pat_family_prof pfp2
                             WHERE pfp2.id_institution = tbl_inst_grp.id_institution
                               AND (pfp2.id_patient = t.id_patient OR pfp2.id_pat_family = t.id_pat_family)
                               AND pfp2.flg_status = :l_pfp_status)
                       AND rownum = 1) family_doctor ' || --
                            '  FROM (SELECT DISTINCT ' || nvl(l_hint, 'NULL position, ') || --
                            '                        pat.id_patient id_patient, ' || --
                            '                        pk_adt.get_patient_name(:i_lang, :i_prof, pat.id_patient, 0) name,' || --
                            '                        pk_patient.get_pat_name_to_sort(:i_lang, :i_prof, pat.id_patient, 0) name_pat_sort,' || --
                            '                        pk_adt.get_pat_non_disc_options(:i_lang, :i_prof, pat.id_patient) pat_ndo, ' || --
                            '                        pk_adt.get_pat_non_disclosure_icon(:i_lang, :i_prof, pat.id_patient) pat_nd_icon, ' || --
                            '                        pat.gender, pat.dt_birth, ' || --
                            '                        nvl(cr.id_pat_family, pat.id_pat_family) id_pat_family ' || --
                            '          FROM patient pat ' || --
                            '         INNER JOIN clin_record cr ON pat.id_patient = cr.id_patient ' || --
                            '         INNER JOIN (SELECT column_value id_institution ' || --
                            '                      FROM TABLE(:l_institutions)) tbl_inst_grp ON tbl_inst_grp.id_institution = cr.id_institution ' ||
                            l_from || --
                            '         WHERE cr.flg_status = :l_clin_rec_flag_status AND pk_adt.is_contact(:i_lang,:i_prof,pat.id_patient) = ''N''' || --                         
                            l_patient || ' ' || l_where || --
                            '         ORDER BY position, name, pat.dt_birth) t ' || --
                            ' WHERE rownum <= :l_limit ';
        
            g_error := 'OPEN SEARCH RESULT';
            --pk_alertlog.log_debug(aux_sql_temp);
            OPEN o_all_patients FOR aux_sql_temp --
                USING i_lang, --
            i_prof, --
            i_lang, --
            i_prof, --
            i_lang, --
            i_prof.software, --
            g_software_care, --
            i_lang, --
            i_prof, --
            i_lang, --
            i_prof, --
            i_prof.software, --
            g_software_care, --
            i_lang, --
            i_prof, --
            i_lang, --
            i_prof, --
            i_prof.institution, --
            l_market, --
            pk_alert_constant.g_id_market_usa, --
            l_ss_doc_type, --
            i_lang, --
            i_prof, --
            i_lang, --
            i_prof, --
            i_lang, --
            i_prof.institution, --
            i_prof.software, --            
            i_lang, --
            i_prof, --
            l_pat_doc_type, --
            i_prof.institution, --
            g_inst_grp_flg_rel_adt, --
            i_lang, --
            i_prof, --
            l_institutions, --
            l_pfp_status, --
            l_def_date, --
            l_def_date, --  
            l_pfp_status, --
            i_lang, --
            i_prof, --
            i_lang, --
            i_prof, --
            i_lang, --
            i_prof, --
            i_lang, --
            i_prof, --
            l_institutions, --
            l_clin_rec_flag_status, --                                 
            i_lang, i_prof, l_limit;
        
            RETURN TRUE;
        END IF;
    
    EXCEPTION
        WHEN pk_search.e_overlimit THEN
            pk_types.open_my_cursor(o_all_patients);
            RETURN pk_search.overlimit_handler(i_lang, i_prof, g_package_name, l_func_name, o_error);
        
        WHEN pk_search.e_noresults THEN
            pk_types.open_my_cursor(o_all_patients);
            RETURN pk_search.noresult_handler(i_lang, i_prof, g_package_name, l_func_name, o_error);
        
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_all_patients);
            RETURN FALSE;
    END get_search_patients;

    /********************************************************************************************
    * result patient events
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_patient            patient identifier    
    * @param      o_events             events
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/05
    **********************************************************************************************/
    FUNCTION get_patient_events_pl
    (
        i_lang    IN language.id_language%TYPE,
        i_prof    IN profissional,
        i_patient IN consult_req.id_patient%TYPE
    ) RETURN t_coll_future_event
        PIPELINED IS
        l_msg_suggested     sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                    i_prof,
                                                                                    'FUTURE_EVENTS_T065');
        l_msg_scheduled     sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                    i_prof,
                                                                                    'FUTURE_EVENTS_T066');
        l_date_sep          sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                    i_prof,
                                                                                    'FUTURE_EVENTS_T073');
        l_na                sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'N/A');
        l_msg_no_dependency sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                    i_prof,
                                                                                    'FUTURE_EVENTS_T074');
        l_msg_in_progress   sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                    i_prof,
                                                                                    'FUTURE_EVENTS_T078');
        l_problem_list_t069 sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'PROBLEM_LIST_T069');
        l_msg_concluded     sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                    i_prof,
                                                                                    'FUTURE_EVENTS_T079');
        l_epis_type_count   NUMBER;
        l_epis_type_acc     table_number;
        l_grp_insts         table_number;
        v_tab               t_rec_future_event;
        c_result            pk_types.cursor_type;
        l_access_bet_inst   sys_config.value%TYPE := pk_sysconfig.get_config('ACCESS_EPISODES_BETWEEN_INSTITUTIONS',
                                                                             i_prof);
    
        l_id_profile_template  profile_template.id_profile_template%TYPE;
        l_id_category          category.id_category%TYPE;
        l_future_events_t017   sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T017');
        l_sch_complaint_origin sys_config.value%TYPE := nvl(pk_sysconfig.get_config(g_sch_complaint_origin, i_prof),
                                                            g_complaint);
    BEGIN
        g_error := 'GET INSTITUTIONS GROUP';
        SELECT column_value
          BULK COLLECT
          INTO l_grp_insts
          FROM TABLE(pk_list.tf_get_all_inst_group(i_prof.institution, g_inst_grp_flg_rel_adt));
    
        /*        SELECT eta.id_epis_type
         BULK COLLECT
         INTO l_epis_type_acc
         FROM epis_type_access eta, prof_profile_template ppt
        WHERE eta.id_institution = decode((SELECT eta.id_epis_type
                                            FROM epis_type_access eta, prof_profile_template ppt
                                           WHERE eta.id_institution = i_prof.institution
                                             AND ppt.id_profile_template = eta.id_profile_template
                                             AND ppt.id_professional = i_prof.id
                                             AND ppt.id_institution = eta.id_institution
                                             AND ppt.id_software = i_prof.software
                                             AND rownum <= 1),
                                          NULL,
                                          0,
                                          i_prof.institution)
          AND ppt.id_profile_template = eta.id_profile_template
          AND ppt.id_professional = i_prof.id
          AND ppt.id_institution = i_prof.institution
          AND ppt.id_software = i_prof.software
          AND eta.id_epis_type != 0;*/
        l_epis_type_acc := pk_episode.get_epis_type_access(i_prof, pk_alert_constant.g_no);
    
        l_epis_type_count := l_epis_type_acc.count;
    
        l_id_profile_template := pk_tools.get_prof_profile_template(i_prof);
        l_id_category         := pk_prof_utils.get_id_category(i_lang => i_lang, i_prof => i_prof);
    
        OPEN c_result FOR
            SELECT cr.id_consult_req     id_event,
                   cr.id_episode_to_exec id_episode,
                   cr.id_schedule        id_schedule,
                   NULL                  id_exam_req_det,
                   NULL                  id_exam_req,
                   -- get_event_type_by_epis_type(cr.id_epis_type) id_event_type,
                   'FUTURE_EVENTS' event_type,
                   get_event_type_icon(get_event_type_by_epis_type(nvl(nvl(cr.id_epis_type,
                                                                           get_epis_type_consult_req(cr.id_consult_req)),
                                                                       pk_alert_constant.g_epis_type_outpatient))) event_type_icon,
                   get_event_type_title(i_lang,
                                        get_event_type_by_epis_type(nvl(nvl(cr.id_epis_type,
                                                                            get_epis_type_consult_req(cr.id_consult_req)),
                                                                        pk_alert_constant.g_epis_type_outpatient))) event_type_name_title,
                   pk_translation.get_translation(i_lang, cs.code_clinical_service) event_type_clinical_service,
                   NULL event_type_procedure,
                   l_msg_no_dependency desc_dependency,
                   nvl(pk_date_utils.dt_chr(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                          cr.id_instit_requests,
                                                                                          NULL),
                                                                             cr.dt_scheduled_tstz),
                                            i_prof),
                       nvl2(cr.dt_end_event,
                            pk_date_utils.dt_chr(i_lang,
                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                               cr.id_instit_requests,
                                                                                               NULL),
                                                                                  cr.dt_begin_event),
                                                 i_prof) || g_space || l_date_sep || g_space ||
                            pk_date_utils.dt_chr(i_lang,
                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                               cr.id_instit_requests,
                                                                                               NULL),
                                                                                  cr.dt_end_event),
                                                 i_prof),
                            pk_date_utils.dt_chr(i_lang,
                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                               cr.id_instit_requests,
                                                                                               NULL),
                                                                                  cr.dt_begin_event),
                                                 i_prof))) request_date,
                   
                   CASE
                        WHEN cr.flg_status IN ('W', 'PC', 'PCR', 'H', 'R', 'F', 'P', 'A') THEN
                         l_msg_suggested
                        WHEN cr.flg_status IN ('EA', 'T', 'V', 'S', 'M') THEN
                         l_msg_scheduled
                        ELSE
                         NULL
                    END request_status_desc,
                   
                   pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_req) requested_by,
                   
                   nvl2(cr.id_prof_requested,
                        pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_requested),
                        pk_events.get_fe_request_prof_str(i_lang, i_prof, cr.id_consult_req, pk_alert_constant.g_no)) professional,
                   NULL id_prof_resp,
                   NULL id_first_nurse_resp,
                   nvl(pk_date_utils.dt_chr(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                          cr.id_instit_requests,
                                                                                          NULL),
                                                                             cr.dt_scheduled_tstz),
                                            i_prof),
                       nvl2(cr.dt_end_event,
                            pk_date_utils.dt_chr(i_lang,
                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                               cr.id_instit_requests,
                                                                                               NULL),
                                                                                  cr.dt_begin_event),
                                                 i_prof) || g_space || l_date_sep || g_space ||
                            pk_date_utils.dt_chr(i_lang,
                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                               cr.id_instit_requests,
                                                                                               NULL),
                                                                                  cr.dt_end_event),
                                                 i_prof),
                            pk_date_utils.dt_chr(i_lang,
                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                               cr.id_instit_requests,
                                                                                               NULL),
                                                                                  cr.dt_begin_event),
                                                 i_prof))) event_date,
                   pk_sysdomain.get_domain('CONSULT_REQ.FLG_STATUS', cr.flg_status, i_lang) status,
                   cr.flg_status flg_status,
                   pk_utils.get_institution_name(i_lang, cr.id_inst_requested) location,
                   cr.id_inst_requested id_location,
                   CASE
                        WHEN cr.flg_status = pk_consult_req.g_consult_req_stat_req
                             AND i_prof.id NOT IN
                             (SELECT column_value
                                    FROM TABLE(get_fe_approval_prof_ids(cr.id_consult_req))) THEN
                         pk_utils.get_status_string_immediate(i_lang,
                                                              i_prof,
                                                              pk_alert_constant.g_display_type_icon,
                                                              'W',
                                                              NULL,
                                                              NULL,
                                                              'CONSULT_REQ.FLG_STATUS',
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL)
                        WHEN cr.flg_status = pk_consult_req.g_consult_req_stat_reply THEN
                         pk_utils.get_status_string_immediate(i_lang,
                                                              i_prof,
                                                              pk_alert_constant.g_display_type_icon,
                                                              decode(nvl(cr.flg_recurrence, g_flg_not_repeat),
                                                                     g_flg_not_repeat,
                                                                     'PC',
                                                                     'PCR'),
                                                              NULL,
                                                              NULL,
                                                              'CONSULT_REQ.FLG_STATUS',
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL)
                        WHEN cr.flg_status = pk_consult_req.g_consult_req_hold_list THEN
                         pk_utils.get_status_string_immediate(i_lang,
                                                              i_prof,
                                                              pk_alert_constant.g_display_type_icon,
                                                              pk_consult_req.g_consult_req_hold_list,
                                                              NULL,
                                                              NULL,
                                                              'CONSULT_REQ.FLG_STATUS',
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL)
                        ELSE
                         pk_utils.get_status_string(i_lang,
                                                    i_prof,
                                                    cr.status_str,
                                                    cr.status_msg,
                                                    cr.status_icon,
                                                    cr.status_flg)
                    END status_icon,
                   pk_date_utils.date_send_tsz(i_lang, nvl(cr.dt_scheduled_tstz, cr.dt_begin_event), i_prof) order_date,
                   fet.id_future_event_type id_future_event_type,
                   get_id_fet_parent(fet.id_future_event_type) id_fet_parent,
                   decode((SELECT pk_alert_constant.g_yes
                            FROM dual
                           WHERE i_prof.id IN (SELECT column_value
                                                 FROM TABLE(get_fe_approval_prof_ids(cr.id_consult_req)))),
                          pk_alert_constant.g_yes,
                          decode(cr.flg_status,
                                 pk_consult_req.g_consult_req_stat_req,
                                 pk_alert_constant.g_yes,
                                 pk_consult_req.g_consult_req_stat_read,
                                 pk_alert_constant.g_yes,
                                 pk_consult_req.g_cons_req_prof_deny,
                                 pk_alert_constant.g_yes,
                                 pk_alert_constant.g_no),
                          pk_alert_constant.g_no) flg_can_approve,
                   decode((SELECT pk_alert_constant.g_yes
                            FROM dual
                           WHERE i_prof.id IN (SELECT column_value
                                                 FROM TABLE(get_fe_approval_prof_ids(cr.id_consult_req)))),
                          pk_alert_constant.g_yes,
                          decode(cr.flg_status,
                                 pk_consult_req.g_consult_req_stat_req,
                                 pk_alert_constant.g_yes,
                                 pk_consult_req.g_consult_req_stat_read,
                                 pk_alert_constant.g_yes,
                                 pk_consult_req.g_cons_req_prof_accept,
                                 pk_alert_constant.g_yes,
                                 pk_alert_constant.g_no),
                          pk_alert_constant.g_no) flg_can_reject,
                   decode(cr.flg_status,
                          pk_consult_req.g_consult_req_stat_cancel,
                          pk_alert_constant.g_no,
                          pk_consult_req.g_consult_req_stat_sched,
                          pk_alert_constant.g_no,
                          pk_consult_req.g_consult_req_stat_proc,
                          pk_alert_constant.g_no,
                          pk_consult_req.g_consult_req_stat_rejected,
                          pk_alert_constant.g_no,
                          decode(i_prof.id, cr.id_prof_req, pk_alert_constant.g_yes, pk_alert_constant.g_no)) flg_can_cancel,
                   decode(cr.flg_status,
                          pk_consult_req.g_consult_req_stat_reply,
                          pk_alert_constant.g_yes,
                          pk_consult_req.g_consult_req_hold_list,
                          pk_alert_constant.g_yes,
                          pk_alert_constant.g_no) flg_can_schedule,
                   pk_alert_constant.g_no flg_can_admit,
                   pk_alert_constant.g_no flg_ok,
                   'PRESENT_FUTURE' time_state,
                   dcs.id_dep_clin_serv dep_clin_serv,
                   cr.id_sch_event sch_event,
                   pk_alert_constant.g_no show_report,
                   NULL id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, cr.dt_scheduled_tstz, i_prof) dt_sched,
                   pk_date_utils.date_send_tsz(i_lang, cr.dt_begin_event, i_prof) dt_req_begin,
                   pk_date_utils.date_send_tsz(i_lang, cr.dt_end_event, i_prof) dt_req_end,
                   NULL icon_name,
                   pk_date_utils.date_char_tsz(i_lang,
                                               nvl(cr.dt_last_update, cr.dt_consult_req_tstz),
                                               i_prof.institution,
                                               i_prof.software) || g_semicolon ||
                   pk_prof_utils.get_name_signature(i_lang, i_prof, nvl(cr.id_prof_last_update, cr.id_prof_req)) || ' (' ||
                   nvl(pk_prof_utils.get_spec_signature(i_lang,
                                                        i_prof,
                                                        nvl(cr.id_prof_last_update, cr.id_prof_req),
                                                        nvl(cr.dt_last_update, cr.dt_consult_req_tstz),
                                                        cr.id_episode),
                       l_problem_list_t069) || ')' registered,
                   pk_events.get_fe_approval_prof_str(i_lang, i_prof, cr.id_consult_req, pk_alert_constant.g_no) approval_prof,
                   cr.request_reason request_reason,
                   NULL id_exam,
                   nvl(cr.id_prof_requested,
                       (SELECT rp.id_professional
                          FROM request_prof rp
                         WHERE rp.id_consult_req = cr.id_consult_req
                           AND rp.flg_active = pk_alert_constant.g_yes
                           AND rownum = 1)) id_dest_professional,
                   nvl(cr.id_prof_last_update, cr.id_prof_req) id_sched_professional,
                   pk_date_utils.date_send_tsz(i_lang, nvl(cr.dt_last_update, cr.dt_consult_req_tstz), i_prof) dt_sched_event,
                   pk_date_utils.date_char_tsz(i_lang,
                                               nvl(cr.dt_last_update, cr.dt_consult_req_tstz),
                                               i_prof.institution,
                                               i_prof.software) dt_sched_event_str,
                   get_id_prof_create_consult_req(cr.id_consult_req) id_created_professional,
                   cr.notes notes,
                   cr.flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   CASE
                        WHEN l_sch_complaint_origin = g_complaint THEN
                         cr.id_complaint
                        ELSE
                         NULL
                    END id_complaint,
                   CASE
                        WHEN l_sch_complaint_origin = g_complaint THEN
                         pk_translation.get_translation(i_lang, c.code_complaint)
                        ELSE
                         cr.reason_for_visit
                    END desc_complaint,
                   g_resourcetype flg_type_of_external_resource,
                   nvl(cr.id_prof_requested,
                       (SELECT rp.id_professional
                          FROM request_prof rp
                         WHERE rp.id_consult_req = cr.id_consult_req
                           AND rp.flg_active = pk_alert_constant.g_yes
                           AND rownum = 1)) id_external_resource,
                   NULL id_efect_episode,
                   NULL id_waiting_list,
                   NULL status_icon_c,
                   NULL id_epis_hhc_req
              FROM consult_req cr
              JOIN dep_clin_serv dcs
                ON (dcs.id_dep_clin_serv = cr.id_dep_clin_serv)
              JOIN clinical_service cs
                ON (cs.id_clinical_service = dcs.id_clinical_service)
              JOIN department d
                ON (dcs.id_department = d.id_department)
              JOIN dept dept
                ON (d.id_dept = dept.id_dept)
              LEFT JOIN schedule sch
                ON (sch.id_schedule = cr.id_schedule)
              LEFT JOIN episode e
                ON e.id_episode = cr.id_episode
              LEFT JOIN future_event_type fet
                ON (fet.id_epis_type = nvl(cr.id_epis_type, get_epis_type_consult_req(cr.id_consult_req)))
              LEFT JOIN complaint c
                ON c.id_complaint = cr.id_complaint
             WHERE cr.id_patient = i_patient
               AND cr.flg_status NOT IN pk_consult_req.g_consult_req_stat_proc
            UNION ALL
            --o_sched_all 
            SELECT NULL id_event,
                   s.id_episode id_episode,
                   s.id_schedule id_schedule,
                   NULL id_exam_req_det,
                   NULL id_exam_req,
                   'SCHEDULED_EPISODES' event_type,
                   get_event_type_icon(get_event_type_by_epis_type(so.id_epis_type)) event_type_icon,
                   get_event_type_title(i_lang, get_event_type_by_epis_type(so.id_epis_type)) event_type_name_title,
                   pk_translation.get_translation(i_lang, cs.code_clinical_service) event_type_clinical_service,
                   NULL event_type_procedure,
                   l_msg_no_dependency desc_dependency,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, s.id_instit_requests, NULL),
                                                                         s.dt_begin_tstz),
                                        i_prof) request_date,
                   
                   CASE
                       WHEN s.flg_status IN ('P', 'R', 'T') THEN
                        l_msg_suggested
                       WHEN s.flg_status IN ('A') THEN
                        l_msg_scheduled
                       ELSE
                        NULL
                   END request_status_desc,
                   
                   pk_prof_utils.get_name_signature(i_lang, i_prof, s.id_prof_requests) requested_by,
                   
                   get_multi_name_signature(i_lang, i_prof, s.id_schedule) professional,
                   NULL id_prof_resp,
                   NULL id_first_nurse_resp,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, s.id_instit_requests, NULL),
                                                                         s.dt_begin_tstz),
                                        i_prof) event_date,
                   pk_sysdomain.get_domain('SCHEDULE.FLG_STATUS', s.flg_status, i_lang) status,
                   s.flg_status flg_status,
                   pk_utils.get_institution_name(i_lang, s.id_instit_requested) location,
                   s.id_instit_requested id_location,
                   pk_utils.get_status_string_immediate(i_lang,
                                                        i_prof,
                                                        pk_alert_constant.g_display_type_icon,
                                                        s.flg_status,
                                                        NULL,
                                                        NULL,
                                                        'SCHEDULE.FLG_STATUS') status_icon,
                   pk_date_utils.date_send_tsz(i_lang, s.dt_begin_tstz, i_prof) order_date,
                   get_event_type_by_epis_type(so.id_epis_type) id_future_event_type,
                   get_id_fet_parent(get_event_type_by_epis_type(so.id_epis_type)) id_fet_parent,
                   pk_alert_constant.g_no flg_can_approve,
                   pk_alert_constant.g_no flg_can_reject,
                   pk_alert_constant.g_no flg_can_cancel,
                   pk_alert_constant.g_no flg_can_schedule,
                   pk_alert_constant.g_no flg_can_admit,
                   CASE
                       WHEN i_prof.institution <> s.id_instit_requested
                            AND l_access_bet_inst = pk_alert_constant.g_no THEN
                        pk_alert_constant.g_no
                       ELSE
                        pk_alert_constant.g_yes
                   END flg_ok,
                   'PRESENT_FUTURE' time_state,
                   s.id_dcs_requested dep_clin_serv,
                   s.id_sch_event sch_event,
                   pk_alert_constant.g_no show_report,
                   NULL id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, s.dt_schedule_tstz, i_prof) dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   NULL icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   NULL id_exam,
                   NULL id_dest_professional,
                   s.id_prof_schedules id_sched_professional,
                   pk_date_utils.date_send_tsz(i_lang, s.dt_schedule_tstz, i_prof) dt_sched_event,
                   pk_date_utils.date_char_tsz(i_lang, s.dt_schedule_tstz, i_prof.institution, i_prof.software) dt_sched_event_str,
                   NULL id_created_professional,
                   NULL notes,
                   sg.flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   '' flg_type_of_external_resource,
                   NULL id_external_resource,
                   NULL id_efect_episode,
                   NULL id_waiting_list,
                   NULL status_icon_c,
                   decode(i_prof.software,
                          pk_alert_constant.g_soft_home_care,
                          decode(so.id_epis_type,
                                 pk_alert_constant.g_epis_type_home_health_care,
                                 pk_hhc_core.get_id_hhc_req_by_epis(s.id_episode))) id_epis_hhc_req
              FROM schedule s
              JOIN sch_group sg
                ON (s.id_schedule = sg.id_schedule)
              JOIN schedule_outp so
                ON (s.id_schedule = so.id_schedule)
            -- JOIN sch_prof_outp spo ON (spo.id_schedule_outp = so.id_schedule_outp)
              LEFT JOIN dep_clin_serv dcs
                ON (dcs.id_dep_clin_serv = s.id_dcs_requested)
              LEFT JOIN clinical_service cs
                ON (cs.id_clinical_service = dcs.id_clinical_service)
             WHERE sg.id_patient = i_patient
               AND s.flg_status <> pk_schedule.g_sched_status_cache
                  -- agendamentos temporários (SCH 3.0)
               AND so.id_epis_type IN (SELECT etsi.id_epis_type
                                         FROM epis_type_soft_inst etsi
                                        WHERE etsi.id_software = i_prof.software
                                          AND etsi.id_institution IN (i_prof.institution, 0))
               AND s.id_episode NOT IN (SELECT ei.id_episode
                                          FROM epis_info ei
                                          JOIN episode e
                                            ON (ei.id_episode = e.id_episode)
                                         WHERE e.id_patient = i_patient
                                              --AND e.flg_ehr IN (g_flg_ehr_scheduled)
                                           AND ei.id_schedule IS NOT NULL)
            UNION ALL
            SELECT get_id_consult_req(e.id_episode) id_event,
                   e.id_episode id_episode,
                   s.id_schedule id_schedule,
                   NULL id_exam_req_det,
                   NULL id_exam_req,
                   'SCHEDULED_EPISODES_2' event_type,
                   get_event_type_icon(get_event_type_by_epis_type(e.id_epis_type)) event_type_icon,
                   get_event_type_title(i_lang, get_event_type_by_epis_type(e.id_epis_type)) event_type_name_title,
                   pk_translation.get_translation(i_lang, cs.code_clinical_service) event_type_clinical_service,
                   NULL event_type_procedure,
                   l_msg_no_dependency desc_dependency,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, e.id_institution, NULL),
                                                                         s.dt_begin_tstz),
                                        i_prof) request_date,
                   CASE
                       WHEN s.flg_status IN ('P', 'R', 'T') THEN
                        l_msg_suggested
                       WHEN s.flg_status IN ('A') THEN
                        l_msg_scheduled
                       ELSE
                        NULL
                   END request_status_desc,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, s.id_prof_requests) requested_by,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, nvl(ei.id_professional, ei.id_first_nurse_resp)) professional,
                   ei.id_professional id_prof_resp,
                   ei.id_first_nurse_resp id_first_nurse_resp,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, e.id_institution, NULL),
                                                                         s.dt_begin_tstz),
                                        i_prof) event_date,
                   pk_sysdomain.get_domain('EPISODE.FLG_STATUS', s.flg_status, i_lang) status,
                   s.flg_status flg_status,
                   pk_utils.get_institution_name(i_lang, s.id_instit_requested) location,
                   s.id_instit_requested id_location,
                   pk_utils.get_status_string_immediate(i_lang,
                                                        i_prof,
                                                        pk_alert_constant.g_display_type_icon,
                                                        s.flg_status,
                                                        NULL,
                                                        NULL,
                                                        'SCHEDULE.FLG_STATUS',
                                                        NULL,
                                                        NULL,
                                                        decode(s.flg_status,
                                                               pk_schedule.g_sched_status_cancelled,
                                                               pk_alert_constant.g_color_icon_medium_grey,
                                                               NULL),
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL) status_icon,
                   pk_date_utils.date_send_tsz(i_lang, s.dt_begin_tstz, i_prof) order_date,
                   get_event_type_by_epis_type(e.id_epis_type) id_future_event_type,
                   get_id_fet_parent(get_event_type_by_epis_type(e.id_epis_type)) id_fet_parent,
                   pk_alert_constant.g_no flg_can_approve,
                   pk_alert_constant.g_no flg_can_reject,
                   pk_alert_constant.g_no flg_can_cancel,
                   pk_alert_constant.g_no flg_can_schedule,
                   pk_alert_constant.g_no flg_can_admit,
                   CASE
                       WHEN ei.id_software <> i_prof.software
                            AND e.id_epis_type NOT IN (SELECT column_value
                                                         FROM TABLE(l_epis_type_acc)) THEN
                       
                        pk_alert_constant.g_no
                       ELSE
                        CASE
                            WHEN i_prof.institution <> s.id_instit_requested
                                 AND l_access_bet_inst = pk_alert_constant.g_no THEN
                             pk_alert_constant.g_no
                            ELSE
                             pk_alert_constant.g_yes
                        END
                   END flg_ok,
                   'PRESENT_FUTURE' time_state,
                   s.id_dcs_requested dep_clin_serv,
                   s.id_sch_event sch_event,
                   pk_alert_constant.g_no show_report,
                   ei.id_software id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, s.dt_begin_tstz, i_prof) dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   NULL icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   NULL id_exam,
                   NULL id_dest_professional,
                   s.id_prof_schedules id_sched_professional,
                   pk_date_utils.date_send_tsz(i_lang, s.dt_schedule_tstz, i_prof) dt_sched_event,
                   pk_date_utils.date_char_tsz(i_lang, s.dt_schedule_tstz, i_prof.institution, i_prof.software) dt_sched_event_str,
                   NULL id_created_professional,
                   NULL notes,
                   sg.flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   '' flg_type_of_external_resource,
                   NULL id_external_resource,
                   NULL id_efect_episode,
                   NULL id_waiting_list,
                   NULL status_icon_c,
                   decode(i_prof.software,
                          pk_alert_constant.g_soft_home_care,
                          decode(e.id_epis_type,
                                 pk_alert_constant.g_epis_type_home_health_care,
                                 pk_hhc_core.get_id_hhc_req_by_epis(e.id_episode))) id_epis_hhc_req
              FROM episode e
              JOIN epis_info ei
                ON ei.id_episode = e.id_episode
              LEFT JOIN dep_clin_serv dcs
                ON (dcs.id_dep_clin_serv = ei.id_dep_clin_serv)
              LEFT JOIN clinical_service cs
                ON (cs.id_clinical_service = dcs.id_clinical_service)
              JOIN schedule s
                ON ei.id_schedule = s.id_schedule
              LEFT JOIN sch_group sg
                ON ei.id_schedule = sg.id_schedule
             WHERE ei.id_schedule <> -1
               AND (s.flg_status <> pk_schedule.g_sched_status_cache OR s.flg_status IS NULL)
               AND e.id_institution IN
                   (SELECT column_value
                      FROM TABLE(pk_list.tf_get_all_inst_group(i_prof.institution, g_inst_grp_flg_rel_adt)))
                  --ALERT-248409       
                  /* AND (e.id_epis_type IN (SELECT column_value
                                        FROM TABLE(l_epis_type_acc)) OR
                  (l_epis_type_count = 0 AND ei.id_software IN (0, i_prof.software)))*/
               AND e.id_patient = i_patient
                  --AND e.flg_status IN (g_epis_active)
               AND e.flg_ehr = g_flg_ehr_scheduled
            UNION ALL -- episodios tipo 'S' sem linha na schedule
            SELECT NULL id_event,
                   e.id_episode id_episode,
                   s.id_schedule id_schedule,
                   NULL id_exam_req_det,
                   NULL id_exam_req,
                   'SCHEDULED_EPISODES_3' event_type,
                   get_event_type_icon(get_event_type_by_epis_type(e.id_epis_type)) event_type_icon,
                   get_event_type_title(i_lang, get_event_type_by_epis_type(e.id_epis_type)) event_type_name_title,
                   pk_translation.get_translation(i_lang, cs.code_clinical_service) event_type_clinical_service,
                   pk_sr_clinical_info.get_proposed_surgery(i_lang, e.id_episode, i_prof, pk_alert_constant.g_no) event_type_procedure,
                   l_msg_no_dependency desc_dependency,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, e.id_institution, NULL),
                                                                         e.dt_begin_tstz),
                                        i_prof) request_date,
                   CASE
                       WHEN s.flg_status IN ('P', 'R', 'T') THEN
                        l_msg_suggested
                       WHEN s.flg_status IN ('A') THEN
                        l_msg_scheduled
                       ELSE
                        NULL
                   END request_status_desc,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, nvl(ei.id_professional, ei.id_first_nurse_resp)) requested_by,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, nvl(ei.id_professional, ei.id_first_nurse_resp)) professional,
                   ei.id_professional id_prof_resp,
                   ei.id_first_nurse_resp id_first_nurse_resp,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, e.id_institution, NULL),
                                                                         e.dt_begin_tstz),
                                        i_prof) event_date,
                   pk_sysdomain.get_domain('EPISODE.FLG_STATUS', e.flg_status, i_lang) status,
                   e.flg_status flg_status,
                   pk_utils.get_institution_name(i_lang, e.id_institution) location,
                   e.id_institution id_location,
                   pk_utils.get_status_string_immediate(i_lang,
                                                        i_prof,
                                                        pk_alert_constant.g_display_type_icon,
                                                        nvl(s.flg_status, e.flg_status),
                                                        NULL,
                                                        NULL,
                                                        'SCHEDULE.FLG_STATUS',
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL) status_icon,
                   pk_date_utils.date_send_tsz(i_lang, e.dt_begin_tstz, i_prof) order_date,
                   get_event_type_by_epis_type(e.id_epis_type) id_future_event_type,
                   get_id_fet_parent(get_event_type_by_epis_type(e.id_epis_type)) id_fet_parent,
                   pk_alert_constant.g_no flg_can_approve,
                   pk_alert_constant.g_no flg_can_reject,
                   pk_alert_constant.g_no flg_can_cancel,
                   pk_alert_constant.g_no flg_can_schedule,
                   pk_alert_constant.g_no flg_can_admit,
                   CASE
                       WHEN ei.id_software <> i_prof.software
                            AND e.id_epis_type NOT IN (SELECT column_value
                                                         FROM TABLE(l_epis_type_acc)) THEN
                       
                        CASE
                            WHEN i_prof.institution <> e.id_institution
                                 AND l_access_bet_inst = pk_alert_constant.g_no THEN
                             pk_alert_constant.g_no
                            ELSE
                             pk_alert_constant.g_yes
                        END
                       ELSE
                       
                        pk_alert_constant.g_no
                   END flg_ok,
                   'PRESENT_FUTURE' time_state,
                   s.id_dcs_requested dep_clin_serv,
                   s.id_sch_event sch_event,
                   pk_alert_constant.g_no show_report,
                   NULL id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, e.dt_begin_tstz, i_prof) dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   NULL icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   NULL id_exam,
                   NULL id_dest_professional,
                   s.id_prof_schedules id_sched_professional,
                   pk_date_utils.date_send_tsz(i_lang, s.dt_schedule_tstz, i_prof) dt_sched_event,
                   pk_date_utils.date_char_tsz(i_lang, s.dt_schedule_tstz, i_prof.institution, i_prof.software) dt_sched_event_str,
                   NULL id_created_professional,
                   NULL notes,
                   sg.flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   '' flg_type_of_external_resource,
                   NULL id_external_resource,
                   NULL id_efect_episode,
                   NULL id_waiting_list,
                   NULL status_icon_c,
                   decode(i_prof.software,
                          pk_alert_constant.g_soft_home_care,
                          decode(e.id_epis_type,
                                 pk_alert_constant.g_epis_type_home_health_care,
                                 pk_hhc_core.get_id_hhc_req_by_epis(e.id_episode))) id_epis_hhc_req
              FROM episode e
              JOIN epis_info ei
                ON ei.id_episode = e.id_episode
              LEFT JOIN dep_clin_serv dcs
                ON (dcs.id_dep_clin_serv = ei.id_dep_clin_serv)
              LEFT JOIN clinical_service cs
                ON (cs.id_clinical_service = dcs.id_clinical_service)
              LEFT JOIN schedule s
                ON s.id_schedule = ei.id_schedule
               AND s.id_schedule != -1
              LEFT JOIN sch_group sg
                ON sg.id_schedule = s.id_schedule
             WHERE NOT EXISTS
             (SELECT 'X'
                      FROM schedule s
                     WHERE s.id_schedule = decode(ei.id_schedule, -1, NULL, ei.id_schedule))
               AND e.id_patient = i_patient
               AND e.id_institution = i_prof.institution
                  /* AND (e.id_epis_type IN (SELECT column_value
                                        FROM TABLE(l_epis_type_acc)) OR
                  (l_epis_type_count = 0 AND ei.id_software IN (0, i_prof.software)))*/
               AND e.flg_status IN (g_epis_active)
               AND e.flg_ehr = g_flg_ehr_scheduled
               AND e.id_episode NOT IN
                   (SELECT column_value
                      FROM TABLE(CAST(MULTISET (SELECT we.id_episode
                                         FROM wtl_epis we
                                        INNER JOIN waiting_list wl
                                           ON (wl.id_waiting_list = we.id_waiting_list)
                                         LEFT JOIN schedule_sr ssr
                                           ON (ssr.id_waiting_list = wl.id_waiting_list)
                                         LEFT JOIN (SELECT id_schedule_sr
                                                     FROM (SELECT sps.id_schedule_sr,
                                                                  rank() over(PARTITION BY sps.id_schedule_sr ORDER BY sps.dt_req DESC, sps.dt_reg DESC) origin_rank
                                                             FROM sr_pos_schedule sps
                                                            WHERE sps.flg_status = pk_alert_constant.g_active) t
                                                    WHERE t.origin_rank = 1) pos
                                           ON (pos.id_schedule_sr = ssr.id_schedule_sr)) AS table_number)))
            UNION ALL
            -------------------  EXAMES DE IMAGEM  -----------------                      
            SELECT ex.id_exam_req_det id_event, --
                   ex.id_episode id_episode,
                   ex.id_schedule id_schedule,
                   ex.id_exam_req_det,
                   ex.id_exam_req,
                   'IMAGING_EXAMS' event_type, --
                   get_event_type_icon(pk_events.g_event_type_iexam) event_type_icon, --
                   get_event_type_title(i_lang, pk_events.g_event_type_iexam) event_type_name_title, --
                   pk_exams_api_db.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || ex.id_exam, NULL) event_type_clinical_service, --
                   NULL event_type_procedure,
                   l_msg_no_dependency desc_dependency, --
                   pk_date_utils.dt_chr_tsz(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL, ex.id_institution, NULL),
                                                                             nvl(ex.dt_begin_tstz, ex.dt_schedule_tstz)),
                                            i_prof) request_date, --
                   decode(nvl(ex.dt_begin_tstz, ex.dt_schedule_tstz),
                          NULL,
                          NULL,
                          decode(flg_status_req_det, 'PA', l_msg_suggested, l_msg_scheduled)) request_status_desc, --
                   pk_prof_utils.get_name_signature(i_lang, i_prof, ex.id_prof_req) requested_by, --
                   NULL professional, --
                   NULL id_prof_resp,
                   NULL id_first_nurse_resp,
                   pk_date_utils.dt_chr_tsz(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL, ex.id_institution, NULL),
                                                                             nvl(ex.dt_begin_tstz, ex.dt_schedule_tstz)),
                                            i_prof) event_date, --
                   pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ_DET.FLG_STATUS', ex.flg_status_req_det, NULL) status, --
                   ex.flg_status_req_det flg_status, --
                   pk_utils.get_institution_name(i_lang, ex.id_institution) location,
                   ex.id_institution id_location, --
                   pk_utils.get_status_string_immediate(i_lang,
                                                        i_prof,
                                                        pk_alert_constant.g_display_type_icon,
                                                        ex.flg_status_req_det,
                                                        NULL,
                                                        NULL,
                                                        'EXAM_REQ_DET.FLG_STATUS') status_icon, --
                   pk_date_utils.date_send_tsz(i_lang, nvl(ex.dt_begin_tstz, ex.dt_schedule_tstz), i_prof) order_date, --
                   pk_events.g_event_type_iexam id_future_event_type, --
                   get_id_fet_parent(pk_events.g_event_type_iexam) id_fet_parent,
                   NULL flg_can_approve, --
                   NULL flg_can_reject, --
                   NULL flg_can_cancel, --
                   decode(flg_status_req_det, pk_grid.g_exam_req_sched, pk_alert_constant.g_no, pk_alert_constant.g_yes) flg_can_schedule, --
                   pk_alert_constant.g_no flg_can_admit,
                   CASE
                       WHEN i_prof.institution <> ex.id_institution
                            AND l_access_bet_inst = pk_alert_constant.g_no THEN
                        pk_alert_constant.g_no
                       ELSE
                        pk_alert_constant.g_yes
                   END flg_ok,
                   'PRESENT_FUTURE' time_state, --
                   NULL dep_clin_serv, --
                   NULL sch_event, --
                   pk_alert_constant.g_no show_report,
                   NULL id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, nvl(ex.dt_begin_tstz, ex.dt_schedule_tstz), i_prof) dt_sched,
                   pk_date_utils.date_send_tsz(i_lang, nvl(ex.dt_begin_tstz, ex.dt_schedule_tstz), i_prof) dt_req_begin,
                   NULL dt_req_end,
                   pk_sysdomain.get_img(i_lang, 'EXAM_REQ.FLG_REQ_ORIGIN_MODULE', ex.flg_req_origin_module) icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   ex.id_exam,
                   NULL id_dest_professional,
                   NULL id_sched_professional,
                   NULL dt_sched_event,
                   NULL dt_sched_event_srt,
                   ex.id_prof_req id_created_professional,
                   NULL notes,
                   NULL flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   g_flgtype flg_type_of_external_resource,
                   ex.id_room id_external_resource,
                   NULL id_efect_episode,
                   NULL id_waiting_list,
                   NULL status_icon_c,
                   NULL id_epis_hhc_req
              FROM (SELECT DISTINCT gti.id_patient,
                                    gti.pat_gender,
                                    gti.pat_age,
                                    gti.num_clin_record,
                                    gti.id_episode,
                                    gti.id_dept,
                                    gti.id_clinical_service,
                                    gti.id_professional,
                                    gti.id_exam_cat,
                                    gti.id_exam,
                                    gti.dt_schedule_tstz,
                                    er.notes,
                                    gti.dt_begin_tstz,
                                    gti.id_exam_req,
                                    gti.id_exam_req_det,
                                    gti.flg_status_req_det,
                                    gti.dt_req_tstz,
                                    er.id_prof_req,
                                    er.id_institution,
                                    er.id_schedule,
                                    gti.flg_req_origin_module,
                                    gti.id_room
                      FROM grid_task_img gti, exam_req er, exam_cat_dcs ecdcs
                     WHERE gti.id_institution = i_prof.institution
                       AND gti.flg_status_req_det IN
                           (pk_grid.g_exam_req_nr, pk_grid.g_exam_req_tosched, pk_grid.g_exam_req_sched)
                       AND gti.id_exam_req = er.id_exam_req
                       AND gti.id_exam_cat = ecdcs.id_exam_cat
                       AND gti.id_patient = i_patient
                       AND EXISTS (SELECT 1
                              FROM prof_dep_clin_serv pdcs
                             WHERE pdcs.id_professional = i_prof.id
                               AND pdcs.flg_status = pk_grid.g_selected
                               AND pdcs.id_institution = i_prof.institution
                               AND pdcs.id_dep_clin_serv = ecdcs.id_dep_clin_serv)) ex
            UNION ALL
            -------------------  OUTROS EXAMES  -----------------                                            
            SELECT ox.id_exam_req_det id_event, --
                   ox.id_episode id_episode,
                   ox.id_schedule id_schedule,
                   ox.id_exam_req_det,
                   ox.id_exam_req,
                   'OTHER_EXAMS' event_type, --
                   get_event_type_icon(pk_events.g_event_type_oexam) event_type_icon, --
                   get_event_type_title(i_lang, pk_events.g_event_type_oexam) event_type_name_title, --
                   pk_exams_api_db.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || ox.id_exam, NULL) event_type_clinical_service, --
                   NULL event_type_procedure,
                   l_msg_no_dependency desc_dependency, --
                   pk_date_utils.dt_chr_tsz(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL, ox.id_institution, NULL),
                                                                             nvl(nvl(ox.dt_begin_tstz,
                                                                                     ox.dt_schedule_tstz),
                                                                                 ox.dt_req_tstz)),
                                            i_prof) request_date, --
                   decode(nvl(ox.dt_begin_tstz, ox.dt_schedule_tstz),
                          NULL,
                          NULL,
                          decode(flg_status_req_det, 'PA', l_msg_suggested, l_msg_scheduled)) request_status_desc, --
                   pk_prof_utils.get_name_signature(i_lang, i_prof, ox.id_prof_req) requested_by, --
                   NULL professional, --
                   NULL id_prof_resp,
                   NULL id_first_nurse_resp,
                   pk_date_utils.dt_chr_tsz(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL, ox.id_institution, NULL),
                                                                             nvl(nvl(ox.dt_begin_tstz,
                                                                                     ox.dt_schedule_tstz),
                                                                                 ox.dt_req_tstz)),
                                            i_prof) event_date, --
                   pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ_DET.FLG_STATUS', ox.flg_status_req_det, NULL) status, --
                   ox.flg_status_req_det flg_status, --
                   pk_utils.get_institution_name(i_lang, ox.id_institution) location, --
                   ox.id_institution id_location,
                   pk_utils.get_status_string_immediate(i_lang,
                                                        i_prof,
                                                        pk_alert_constant.g_display_type_icon,
                                                        ox.flg_status_req_det,
                                                        NULL,
                                                        NULL,
                                                        'EXAM_REQ_DET.FLG_STATUS') status_icon, --
                   pk_date_utils.date_send_tsz(i_lang,
                                               nvl(nvl(ox.dt_begin_tstz, ox.dt_schedule_tstz), ox.dt_req_tstz),
                                               i_prof) order_date, --
                   pk_events.g_event_type_oexam id_future_event_type, --
                   get_id_fet_parent(pk_events.g_event_type_oexam) id_fet_parent,
                   NULL flg_can_approve, --
                   NULL flg_can_reject, --
                   NULL flg_can_cancel, --
                   decode(flg_status_req_det, pk_grid.g_exam_req_sched, pk_alert_constant.g_no, pk_alert_constant.g_yes) flg_can_schedule, --
                   pk_alert_constant.g_no flg_can_admit,
                   CASE
                       WHEN i_prof.institution <> ox.id_institution
                            AND l_access_bet_inst = pk_alert_constant.g_no THEN
                        pk_alert_constant.g_no
                       ELSE
                        pk_alert_constant.g_yes
                   END flg_ok,
                   'PRESENT_FUTURE' time_state, --
                   NULL dep_clin_serv, --
                   NULL sch_event, --
                   pk_alert_constant.g_no show_report,
                   NULL id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang,
                                               nvl(nvl(ox.dt_begin_tstz, ox.dt_schedule_tstz), ox.dt_req_tstz),
                                               i_prof) dt_sched,
                   pk_date_utils.date_send_tsz(i_lang,
                                               nvl(nvl(ox.dt_begin_tstz, ox.dt_schedule_tstz), ox.dt_req_tstz),
                                               i_prof) dt_req_begin,
                   NULL dt_req_end,
                   pk_sysdomain.get_img(i_lang, 'EXAM_REQ.FLG_REQ_ORIGIN_MODULE', ox.flg_req_origin_module) icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   ox.id_exam,
                   NULL id_dest_professional,
                   NULL id_sched_professional,
                   NULL dt_sched_event,
                   NULL dt_sched_event_srt,
                   ox.id_prof_req id_created_professional,
                   NULL notes,
                   NULL flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   '' flg_type_of_external_resource,
                   NULL id_external_resource,
                   NULL id_efect_episode,
                   NULL id_waiting_list,
                   NULL status_icon_c,
                   NULL id_epis_hhc_req
              FROM (SELECT DISTINCT gtoe.id_patient,
                                    gtoe.gender,
                                    gtoe.pat_age,
                                    gtoe.num_clin_record,
                                    gtoe.id_episode,
                                    gtoe.id_dept,
                                    gtoe.id_clinical_service,
                                    gtoe.nick_name,
                                    gtoe.id_exam_cat,
                                    gtoe.id_exam,
                                    gtoe.dt_schedule_tstz,
                                    er.notes,
                                    gtoe.dt_begin_tstz,
                                    gtoe.id_exam_req,
                                    gtoe.id_exam_req_det,
                                    gtoe.flg_status_req_det,
                                    gtoe.dt_req_tstz,
                                    er.id_prof_req,
                                    er.id_institution,
                                    er.id_schedule,
                                    gtoe.flg_req_origin_module
                      FROM grid_task_oth_exm gtoe, exam_req er, exam_cat_dcs ecdcs
                     WHERE gtoe.id_institution = i_prof.institution
                       AND gtoe.id_exam_req = er.id_exam_req
                       AND gtoe.flg_status_req_det IN
                           (pk_grid.g_exam_req_nr, pk_grid.g_exam_req_tosched, pk_grid.g_exam_req_sched)
                       AND gtoe.id_exam_cat = ecdcs.id_exam_cat
                       AND gtoe.id_patient = i_patient
                       AND EXISTS (SELECT 1
                              FROM prof_dep_clin_serv pdcs
                             WHERE pdcs.id_professional = i_prof.id
                               AND pdcs.flg_status = pk_grid.g_selected
                               AND pdcs.id_institution = i_prof.institution
                               AND pdcs.id_dep_clin_serv = ecdcs.id_dep_clin_serv)) ox
            UNION ALL
            --get_encounters o_past_enc
            SELECT er.id_epis_encounter id_event,
                   e.id_episode id_episode,
                   s.id_schedule id_schedule,
                   NULL id_exam_req_det,
                   NULL id_exam_req,
                   'PAST_ENCOUNTERS' event_type,
                   get_event_type_icon(get_event_type_by_epis_type(e.id_epis_type)) event_type_icon,
                   get_event_type_title(i_lang, get_event_type_by_epis_type(e.id_epis_type)) event_type_name_title,
                   pk_translation.get_translation(i_lang, cs.code_clinical_service) event_type_clinical_service,
                   NULL event_type_procedure,
                   l_msg_no_dependency desc_dependency,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, e.id_institution, NULL),
                                                                         er.dt_epis_encounter),
                                        i_prof) request_date,
                   l_msg_concluded request_status_desc,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, er.id_professional) requested_by,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, er.id_professional) professional,
                   ei.id_professional id_prof_resp,
                   ei.id_first_nurse_resp id_first_nurse_resp,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, e.id_institution, NULL),
                                                                         er.dt_epis_encounter),
                                        i_prof) event_date,
                   pk_sysdomain.get_domain('EPISODE.FLG_STATUS', e.flg_status, i_lang) status,
                   e.flg_status flg_status,
                   pk_utils.get_institution_name(i_lang, e.id_institution) location,
                   e.id_institution id_location,
                   pk_utils.get_status_string_immediate(i_lang,
                                                        i_prof,
                                                        pk_alert_constant.g_display_type_icon,
                                                        pk_events.g_status_finish,
                                                        NULL,
                                                        NULL,
                                                        'CONSULT_REQ.FLG_STATUS',
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL) status_icon,
                   pk_date_utils.date_send_tsz(i_lang, er.dt_epis_encounter, i_prof) order_date,
                   get_event_type_by_epis_type(e.id_epis_type) id_future_event_type,
                   get_id_fet_parent(get_event_type_by_epis_type(e.id_epis_type)) id_fet_parent,
                   pk_alert_constant.g_no flg_can_approve,
                   pk_alert_constant.g_no flg_can_reject,
                   pk_alert_constant.g_no flg_can_cancel,
                   pk_alert_constant.g_no flg_can_schedule,
                   pk_alert_constant.g_no flg_can_admit,
                   pk_alert_constant.g_no flg_ok,
                   'PAST' time_state,
                   dcs.id_dep_clin_serv dep_clin_serv,
                   s.id_sch_event sch_event,
                   pk_alert_constant.g_no show_report,
                   ei.id_software,
                   decode(ei.id_software,
                          pk_alert_constant.g_soft_edis,
                          pk_alert_constant.g_yes,
                          pk_alert_constant.g_soft_ubu,
                          pk_alert_constant.g_yes,
                          pk_alert_constant.g_soft_triage,
                          pk_alert_constant.g_yes,
                          pk_alert_constant.g_soft_inpatient,
                          pk_alert_constant.g_yes,
                          pk_alert_constant.g_no) reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, er.dt_epis_encounter, i_prof) dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   NULL icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   NULL id_exam,
                   NULL id_dest_professional,
                   s.id_prof_schedules id_sched_professional,
                   pk_date_utils.date_send_tsz(i_lang, s.dt_schedule_tstz, i_prof) dt_sched_event,
                   pk_date_utils.date_char_tsz(i_lang, s.dt_schedule_tstz, i_prof.institution, i_prof.software) dt_sched_event_str,
                   NULL id_created_professional,
                   NULL notes,
                   sg.flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   '' flg_type_of_external_resource,
                   NULL id_external_resource,
                   NULL id_efect_episode,
                   NULL id_waiting_list,
                   NULL status_icon_c,
                   NULL id_epis_hhc_req
              FROM epis_encounter er
              JOIN episode e
                ON e.id_episode = er.id_episode
              JOIN epis_info ei
                ON ei.id_episode = e.id_episode
              LEFT JOIN dep_clin_serv dcs
                ON (dcs.id_dep_clin_serv = ei.id_dep_clin_serv)
              LEFT JOIN clinical_service cs
                ON (cs.id_clinical_service = dcs.id_clinical_service)
              LEFT JOIN schedule s
                ON s.id_schedule = ei.id_schedule
              LEFT JOIN sch_group sg
                ON sg.id_schedule = ei.id_schedule
             WHERE er.id_patient = i_patient
               AND er.flg_status = pk_case_management.g_enc_flg_status_i
            
            UNION ALL
            --get_encounters o_cur_enc
            SELECT er.id_epis_encounter id_event,
                   e.id_episode id_episode,
                   s.id_schedule id_schedule,
                   NULL id_exam_req_det,
                   NULL id_exam_req,
                   'CURRENT_ENCOUNTERS' event_type,
                   get_event_type_icon(get_event_type_by_epis_type(e.id_epis_type)) event_type_icon,
                   get_event_type_title(i_lang, get_event_type_by_epis_type(e.id_epis_type)) event_type_name_title,
                   pk_translation.get_translation(i_lang, cs.code_clinical_service) event_type_clinical_service,
                   NULL event_type_procedure,
                   l_msg_no_dependency desc_dependency,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, e.id_institution, NULL),
                                                                         er.dt_epis_encounter),
                                        i_prof) request_date,
                   l_msg_in_progress request_status_desc,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, er.id_professional) requested_by,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, er.id_professional) professional,
                   ei.id_professional id_prof_resp,
                   ei.id_first_nurse_resp id_first_nurse_resp,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, e.id_institution, NULL),
                                                                         er.dt_epis_encounter),
                                        i_prof) event_date,
                   pk_sysdomain.get_domain('EPISODE.FLG_STATUS', e.flg_status, i_lang) status,
                   e.flg_status flg_status,
                   pk_utils.get_institution_name(i_lang, e.id_institution) location,
                   e.id_institution id_location,
                   pk_utils.get_status_string_immediate(i_lang,
                                                        i_prof,
                                                        pk_alert_constant.g_display_type_icon,
                                                        pk_events.g_status_in_progress,
                                                        NULL,
                                                        NULL,
                                                        'CONSULT_REQ.FLG_STATUS',
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL) status_icon,
                   pk_date_utils.date_send_tsz(i_lang, er.dt_epis_encounter, i_prof) order_date,
                   get_event_type_by_epis_type(e.id_epis_type) id_future_event_type,
                   get_id_fet_parent(get_event_type_by_epis_type(e.id_epis_type)) id_fet_parent,
                   pk_alert_constant.g_no flg_can_approve,
                   pk_alert_constant.g_no flg_can_reject,
                   pk_alert_constant.g_no flg_can_cancel,
                   pk_alert_constant.g_no flg_can_schedule,
                   pk_alert_constant.g_no flg_can_admit,
                   pk_alert_constant.g_no flg_ok,
                   'PRESENT_FUTURE' time_state,
                   dcs.id_dep_clin_serv dep_clin_serv,
                   s.id_sch_event sch_event,
                   pk_alert_constant.g_no show_report,
                   ei.id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, er.dt_epis_encounter, i_prof) dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   NULL icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   NULL id_exam,
                   NULL id_dest_professional,
                   s.id_prof_schedules id_sched_professional,
                   pk_date_utils.date_send_tsz(i_lang, s.dt_schedule_tstz, i_prof) dt_sched_event,
                   pk_date_utils.date_char_tsz(i_lang, s.dt_schedule_tstz, i_prof.institution, i_prof.software) dt_sched_event_str,
                   NULL id_created_professional,
                   NULL notes,
                   sg.flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   '' flg_type_of_external_resource,
                   NULL id_external_resource,
                   NULL id_efect_episode,
                   NULL id_waiting_list,
                   NULL status_icon_c,
                   NULL id_epis_hhc_req
              FROM epis_encounter er
              JOIN episode e
                ON e.id_episode = er.id_episode
              JOIN epis_info ei
                ON ei.id_episode = e.id_episode
              LEFT JOIN dep_clin_serv dcs
                ON (dcs.id_dep_clin_serv = ei.id_dep_clin_serv)
              LEFT JOIN clinical_service cs
                ON (cs.id_clinical_service = dcs.id_clinical_service)
              LEFT JOIN schedule s
                ON s.id_schedule = ei.id_schedule
              LEFT JOIN sch_group sg
                ON sg.id_schedule = ei.id_schedule
             WHERE er.id_patient = i_patient
               AND er.flg_status = pk_case_management.g_enc_flg_status_a
            
            UNION ALL
            --o_ehr_all
            SELECT NULL id_event,
                   e.id_episode id_episode,
                   s.id_schedule id_schedule,
                   NULL id_exam_req_det,
                   NULL id_exam_req,
                   'EHR_EVENTS' event_type,
                   get_event_type_icon(g_event_type_ehr_event) event_type_icon,
                   get_event_type_title(i_lang, g_event_type_ehr_event) event_type_name_title,
                   pk_translation.get_translation(i_lang, cs.code_clinical_service) event_type_clinical_service,
                   NULL event_type_procedure,
                   l_msg_no_dependency desc_dependency,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, e.id_institution, NULL),
                                                                         e.dt_begin_tstz),
                                        i_prof) request_date,
                   l_na request_status_desc,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, nvl(ei.id_professional, ei.id_first_nurse_resp)) requested_by,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, nvl(ei.id_professional, ei.id_first_nurse_resp)) professional,
                   ei.id_professional id_prof_resp,
                   ei.id_first_nurse_resp id_first_nurse_resp,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, e.id_institution, NULL),
                                                                         e.dt_begin_tstz),
                                        i_prof) event_date,
                   pk_sysdomain.get_domain('EPISODE.FLG_STATUS', e.flg_status, i_lang) status,
                   e.flg_status flg_status,
                   pk_utils.get_institution_name(i_lang, e.id_institution) location,
                   e.id_institution id_location,
                   pk_utils.get_status_string_immediate(i_lang,
                                                        i_prof,
                                                        pk_alert_constant.g_display_type_icon,
                                                        pk_events.g_status_finish,
                                                        NULL,
                                                        NULL,
                                                        'CONSULT_REQ.FLG_STATUS',
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL) status_icon,
                   pk_date_utils.date_send_tsz(i_lang, e.dt_begin_tstz, i_prof) order_date,
                   get_event_type_by_epis_type(e.id_epis_type) id_future_event_type,
                   get_id_fet_parent(get_event_type_by_epis_type(e.id_epis_type)) id_fet_parent,
                   pk_alert_constant.g_no flg_can_approve,
                   pk_alert_constant.g_no flg_can_reject,
                   pk_alert_constant.g_no flg_can_cancel,
                   pk_alert_constant.g_no flg_can_schedule,
                   pk_alert_constant.g_no flg_can_admit,
                   /*                  CASE
                       WHEN (SELECT COUNT(1)
                               FROM epis_type_soft_inst etsi
                              WHERE etsi.id_institution IN (0, i_prof.institution)
                                AND etsi.id_software = i_prof.software
                                AND etsi.id_epis_type = e.id_epis_type) > 0 THEN
                        pk_alert_constant.g_yes
                       ELSE
                        pk_alert_constant.g_no
                   END flg_ok,
                   */
                   CASE
                       WHEN ei.id_software <> i_prof.software
                            AND e.id_epis_type NOT IN (SELECT column_value
                                                         FROM TABLE(l_epis_type_acc)) THEN
                       
                        pk_alert_constant.g_no
                       ELSE
                        CASE
                            WHEN i_prof.institution <> e.id_institution
                                 AND l_access_bet_inst = pk_alert_constant.g_no THEN
                             pk_alert_constant.g_no
                            ELSE
                             pk_alert_constant.g_yes
                        END
                   END flg_ok,
                   'PAST' time_state,
                   dcs.id_dep_clin_serv dep_clin_serv,
                   s.id_sch_event sch_event,
                   pk_alert_constant.g_no show_report,
                   ei.id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, e.dt_begin_tstz, i_prof) dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   NULL icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   NULL id_exam,
                   NULL id_dest_professional,
                   s.id_prof_schedules id_sched_professional,
                   pk_date_utils.date_send_tsz(i_lang, s.dt_schedule_tstz, i_prof) dt_sched_event,
                   pk_date_utils.date_char_tsz(i_lang, s.dt_schedule_tstz, i_prof.institution, i_prof.software) dt_sched_event_str,
                   NULL id_created_professional,
                   NULL notes,
                   sg.flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   '' flg_type_of_external_resource,
                   NULL id_external_resource,
                   NULL id_efect_episode,
                   NULL id_waiting_list,
                   NULL status_icon_c,
                   decode(i_prof.software,
                          pk_alert_constant.g_soft_home_care,
                          decode(e.id_epis_type,
                                 pk_alert_constant.g_epis_type_home_health_care,
                                 pk_hhc_core.get_id_hhc_req_by_epis(e.id_episode))) id_epis_hhc_req
              FROM episode e
              JOIN epis_info ei
                ON ei.id_episode = e.id_episode
              LEFT JOIN dep_clin_serv dcs
                ON (dcs.id_dep_clin_serv = ei.id_dep_clin_serv)
              LEFT JOIN clinical_service cs
                ON (cs.id_clinical_service = dcs.id_clinical_service)
              LEFT JOIN schedule s
                ON s.id_schedule = ei.id_schedule
              LEFT JOIN sch_group sg
                ON sg.id_schedule = ei.id_schedule
             WHERE e.id_patient = i_patient
                  --AND (i_prof.software, e.id_epis_type) IN
                  --    (SELECT etsi.id_software, etsi.id_epis_type
                  --       FROM epis_type_soft_inst etsi
                  --      WHERE etsi.id_institution IN (0, i_prof.institution))
               AND e.flg_ehr = g_flg_ehr_ehr
            
            UNION ALL
            --o_current_all 
            SELECT NULL id_event,
                   e.id_episode id_episode,
                   s.id_schedule id_schedule,
                   NULL id_exam_req_det,
                   NULL id_exam_req,
                   'CURRENT_EPISODES' event_type,
                   get_event_type_icon(get_event_type_by_epis_type(e.id_epis_type)) event_type_icon,
                   get_event_type_title(i_lang, get_event_type_by_epis_type(e.id_epis_type)) event_type_name_title,
                   pk_translation.get_translation(i_lang, cs.code_clinical_service) event_type_clinical_service,
                   NULL event_type_procedure,
                   l_msg_no_dependency desc_dependency,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, e.id_institution, NULL),
                                                                         e.dt_begin_tstz),
                                        i_prof) request_date,
                   l_msg_in_progress request_status_desc,
                   pk_prof_utils.get_name_signature(i_lang,
                                                    i_prof,
                                                    pk_ehr_access.get_epis_sch_prof(ei.id_schedule_outp, e.id_episode)) requested_by,
                   pk_prof_utils.get_name_signature(i_lang,
                                                    i_prof,
                                                    pk_ehr_access.get_epis_sch_prof(ei.id_schedule_outp, e.id_episode)) professional,
                   ei.id_professional id_prof_resp,
                   ei.id_first_nurse_resp id_first_nurse_resp,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, e.id_institution, NULL),
                                                                         e.dt_begin_tstz),
                                        i_prof) event_date,
                   pk_sysdomain.get_domain('EPISODE.FLG_STATUS', e.flg_status, i_lang) status,
                   e.flg_status flg_status,
                   pk_utils.get_institution_name(i_lang, e.id_institution) location,
                   e.id_institution id_location,
                   pk_utils.get_status_string_immediate(i_lang,
                                                        i_prof,
                                                        pk_alert_constant.g_display_type_icon,
                                                        pk_events.g_status_in_progress,
                                                        NULL,
                                                        NULL,
                                                        'CONSULT_REQ.FLG_STATUS',
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL) status_icon,
                   pk_date_utils.date_send_tsz(i_lang, e.dt_begin_tstz, i_prof) order_date,
                   get_event_type_by_epis_type(e.id_epis_type) id_future_event_type,
                   get_id_fet_parent(get_event_type_by_epis_type(e.id_epis_type)) id_fet_parent,
                   pk_alert_constant.g_no flg_can_approve,
                   pk_alert_constant.g_no flg_can_reject,
                   pk_alert_constant.g_no flg_can_cancel,
                   pk_alert_constant.g_no flg_can_schedule,
                   pk_alert_constant.g_no flg_can_admit,
                   CASE
                       WHEN ei.id_software <> i_prof.software
                            AND e.id_epis_type NOT IN (SELECT column_value
                                                         FROM TABLE(l_epis_type_acc)) THEN
                       
                        pk_alert_constant.g_no
                       ELSE
                        CASE
                            WHEN i_prof.institution <> e.id_institution
                                 AND l_access_bet_inst = pk_alert_constant.g_no THEN
                             pk_alert_constant.g_no
                            ELSE
                             pk_alert_constant.g_yes
                        END
                   END flg_ok,
                   'PRESENT_FUTURE' time_state,
                   dcs.id_dep_clin_serv dep_clin_serv,
                   s.id_sch_event sch_event,
                   CASE
                       WHEN pk_sysconfig.get_config('TL_REPORT',
                                                    profissional(i_prof.id, i_prof.institution, ei.id_software)) IS NULL THEN
                        pk_alert_constant.g_no
                       WHEN e.id_institution = i_prof.institution
                            AND e.id_epis_type IN (SELECT column_value
                                                     FROM TABLE(l_epis_type_acc)) THEN
                        pk_alert_constant.g_no
                       WHEN e.id_institution = i_prof.institution
                            AND l_epis_type_count = 0
                            AND ei.id_software IN (0, i_prof.software) THEN
                        pk_alert_constant.g_no
                       WHEN e.id_institution IN (SELECT column_value
                                                   FROM TABLE(l_grp_insts))
                            AND l_access_bet_inst = pk_alert_constant.g_yes THEN
                        pk_alert_constant.g_no
                       ELSE
                        pk_alert_constant.g_yes
                   END show_report,
                   ei.id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, e.dt_begin_tstz, i_prof) dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   NULL icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   NULL id_exam,
                   NULL id_dest_professional,
                   s.id_prof_schedules id_sched_professional,
                   pk_date_utils.date_send_tsz(i_lang, s.dt_schedule_tstz, i_prof) dt_sched_event,
                   pk_date_utils.date_char_tsz(i_lang, s.dt_schedule_tstz, i_prof.institution, i_prof.software) dt_sched_event_str,
                   NULL id_created_professional,
                   NULL notes,
                   sg.flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   '' flg_type_of_external_resource,
                   NULL id_external_resource,
                   NULL id_efect_episode,
                   NULL id_waiting_list,
                   NULL status_icon_c,
                   decode(i_prof.software,
                          pk_alert_constant.g_soft_home_care,
                          decode(e.id_epis_type,
                                 pk_alert_constant.g_epis_type_home_health_care,
                                 pk_hhc_core.get_id_hhc_req_by_epis(e.id_episode))) id_epis_hhc_req
              FROM episode e
              JOIN epis_info ei
                ON ei.id_episode = e.id_episode
              LEFT JOIN dep_clin_serv dcs
                ON (dcs.id_dep_clin_serv = ei.id_dep_clin_serv)
              LEFT JOIN clinical_service cs
                ON (cs.id_clinical_service = dcs.id_clinical_service)
              LEFT JOIN schedule s
                ON s.id_schedule = ei.id_schedule
              LEFT JOIN sch_group sg
                ON sg.id_schedule = ei.id_schedule
             WHERE e.id_patient = i_patient
               AND (e.id_institution IN (SELECT column_value
                                           FROM TABLE(l_grp_insts)) OR
                   pk_transfer_institution.check_transfer_access(e.id_episode, i_prof) = pk_alert_constant.g_yes)
               AND e.flg_status IN (g_epis_active)
               AND e.flg_ehr = g_flg_ehr_normal
               AND e.id_epis_type <> pk_hhc_constant.k_hhc_epis_type
            UNION ALL
            --o_prev_all 
            SELECT NULL id_event,
                   e.id_episode id_episode,
                   s.id_schedule id_schedule,
                   NULL id_exam_req_det,
                   NULL id_exam_req,
                   'PREVIOUS_EPISODES' event_type,
                   get_event_type_icon(get_event_type_by_epis_type(e.id_epis_type)) event_type_icon,
                   get_event_type_title(i_lang, get_event_type_by_epis_type(e.id_epis_type)) event_type_name_title,
                   pk_translation.get_translation(i_lang, cs.code_clinical_service) event_type_clinical_service,
                   NULL event_type_procedure,
                   l_msg_no_dependency desc_dependency,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, e.id_institution, NULL),
                                                                         e.dt_begin_tstz),
                                        i_prof) request_date,
                   l_msg_concluded request_status_desc,
                   pk_prof_utils.get_name_signature(i_lang,
                                                    i_prof,
                                                    pk_ehr_access.get_epis_sch_prof(ei.id_schedule_outp, e.id_episode)) requested_by,
                   pk_prof_utils.get_name_signature(i_lang,
                                                    i_prof,
                                                    pk_ehr_access.get_epis_sch_prof(ei.id_schedule_outp, e.id_episode)) professional,
                   ei.id_professional id_prof_resp,
                   ei.id_first_nurse_resp id_first_nurse_resp,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, e.id_institution, NULL),
                                                                         e.dt_begin_tstz),
                                        i_prof) event_date,
                   pk_sysdomain.get_domain('EPISODE.FLG_STATUS', e.flg_status, i_lang) status,
                   e.flg_status flg_status,
                   pk_utils.get_institution_name(i_lang, e.id_institution) location,
                   e.id_institution id_location,
                   pk_utils.get_status_string_immediate(i_lang,
                                                        i_prof,
                                                        pk_alert_constant.g_display_type_icon,
                                                        pk_events.g_status_finish,
                                                        NULL,
                                                        NULL,
                                                        'CONSULT_REQ.FLG_STATUS',
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL) status_icon,
                   pk_date_utils.date_send_tsz(i_lang, e.dt_begin_tstz, i_prof) order_date,
                   get_event_type_by_epis_type(e.id_epis_type) id_future_event_type,
                   get_id_fet_parent(get_event_type_by_epis_type(e.id_epis_type)) id_fet_parent,
                   pk_alert_constant.g_no flg_can_approve,
                   pk_alert_constant.g_no flg_can_reject,
                   pk_alert_constant.g_no flg_can_cancel,
                   pk_alert_constant.g_no flg_can_schedule,
                   pk_alert_constant.g_no flg_can_admit,
                   CASE
                       WHEN ei.id_software <> i_prof.software
                            AND e.id_epis_type NOT IN (SELECT column_value
                                                         FROM TABLE(l_epis_type_acc)) THEN
                       
                        pk_alert_constant.g_no
                       ELSE
                        CASE
                            WHEN i_prof.institution <> e.id_institution
                                 AND l_access_bet_inst = pk_alert_constant.g_no THEN
                             pk_alert_constant.g_no
                            ELSE
                             pk_alert_constant.g_yes
                        END
                   END flg_ok,
                   'PAST' time_state,
                   dcs.id_dep_clin_serv dep_clin_serv,
                   s.id_sch_event sch_event,
                   CASE
                       WHEN pk_sysconfig.get_config('TL_REPORT',
                                                    profissional(i_prof.id, i_prof.institution, ei.id_software)) IS NULL THEN
                        pk_alert_constant.g_no
                       WHEN e.id_institution = i_prof.institution
                            AND e.id_epis_type IN (SELECT column_value
                                                     FROM TABLE(l_epis_type_acc)) THEN
                        pk_alert_constant.g_no
                       WHEN e.id_institution = i_prof.institution
                            AND l_epis_type_count = 0
                            AND ei.id_software IN (0, i_prof.software) THEN
                        pk_alert_constant.g_no
                       WHEN e.id_institution IN (SELECT column_value
                                                   FROM TABLE(l_grp_insts))
                            AND l_access_bet_inst = pk_alert_constant.g_yes THEN
                        pk_alert_constant.g_no
                       ELSE
                        pk_alert_constant.g_yes
                   END show_report,
                   ei.id_software,
                   decode(ei.id_software,
                          pk_alert_constant.g_soft_edis,
                          pk_alert_constant.g_yes,
                          pk_alert_constant.g_soft_ubu,
                          pk_alert_constant.g_yes,
                          pk_alert_constant.g_soft_triage,
                          pk_alert_constant.g_yes,
                          pk_alert_constant.g_soft_inpatient,
                          pk_alert_constant.g_yes,
                          pk_alert_constant.g_no) reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, e.dt_begin_tstz, i_prof) dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   NULL icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   NULL id_exam,
                   NULL id_dest_professional,
                   s.id_prof_schedules id_sched_professional,
                   pk_date_utils.date_send_tsz(i_lang, s.dt_schedule_tstz, i_prof) dt_sched_event,
                   pk_date_utils.date_char_tsz(i_lang, s.dt_schedule_tstz, i_prof.institution, i_prof.software) dt_sched_event_str,
                   NULL id_created_professional,
                   NULL notes,
                   sg.flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   '' flg_type_of_external_resource,
                   NULL id_external_resource,
                   NULL id_efect_episode,
                   NULL id_waiting_list,
                   NULL status_icon_c,
                   decode(i_prof.software,
                          pk_alert_constant.g_soft_home_care,
                          decode(e.id_epis_type,
                                 pk_alert_constant.g_epis_type_home_health_care,
                                 pk_hhc_core.get_id_hhc_req_by_epis(e.id_episode))) id_epis_hhc_req
              FROM episode e
              JOIN epis_info ei
                ON ei.id_episode = e.id_episode
              LEFT JOIN dep_clin_serv dcs
                ON (dcs.id_dep_clin_serv = ei.id_dep_clin_serv)
              LEFT JOIN clinical_service cs
                ON (cs.id_clinical_service = dcs.id_clinical_service)
              LEFT JOIN schedule s
                ON s.id_schedule = ei.id_schedule
              LEFT JOIN sch_group sg
                ON sg.id_schedule = ei.id_schedule
             WHERE e.id_patient = i_patient
               AND (e.id_institution IN (SELECT column_value
                                           FROM TABLE(l_grp_insts)) OR
                   pk_transfer_institution.check_transfer_access(e.id_episode, i_prof) = pk_alert_constant.g_yes)
               AND e.flg_status IN (g_epis_inactive, g_epis_pending)
               AND e.flg_ehr = g_flg_ehr_normal
               AND e.id_epis_type <> pk_hhc_constant.k_hhc_epis_type
            UNION ALL
            -------------------  INTERNAMENTO E CIRURGIA  -----------------                                      
            
            SELECT t_grid.id_adm_request id_event,
                   t_grid.id_episode id_episode,
                   t_grid.id_schedule id_schedule,
                   NULL id_exam_req_det,
                   NULL id_exam_req,
                   'ADMISSION_SURGERY' event_type, --
                   'InpatientEpisodeIcon' event_type_icon,
                   pk_admission_request.get_fe_desc(i_lang, i_prof, t_grid.id_episode) event_type_name_title,
                   coalesce(pk_translation.get_translation(i_lang, cs.code_clinical_service),
                            pk_admission_request.get_all_diagnosis_str(i_lang, t_grid.id_episode)) event_type_clinical_service, --                   
                   decode(t_grid.desc_admission,
                          pk_admission_request.get_all_diagnosis_str(i_lang, t_grid.id_episode),
                          '',
                          t_grid.desc_admission) event_type_procedure, --
                   l_msg_no_dependency desc_dependency, --
                   pk_date_utils.dt_chr_tsz(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                          t_grid.id_dest_inst,
                                                                                          NULL),
                                                                             t_grid.dt_admission_tsz),
                                            i_prof) request_date, --
                   t_grid.schedule_flg_status request_status_desc, --
                   pk_prof_utils.get_name_signature(i_lang, i_prof, t_grid.id_prof_req) requested_by, --
                   pk_prof_utils.get_name_signature(i_lang, i_prof, t_grid.id_dest_prof) professional, --
                   NULL id_prof_resp,
                   NULL id_first_nurse_resp,
                   pk_date_utils.dt_chr_tsz(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                          t_grid.id_dest_inst,
                                                                                          NULL),
                                                                             t_grid.dt_admission_tsz),
                                            i_prof) event_date, --
                   NULL status, --
                   t_grid.flg_status flg_status, --
                   t_grid.inst_adm_name location, --
                   t_grid.id_dest_inst id_location,
                   t_grid.admiss_status status_icon, --
                   pk_date_utils.date_send_tsz(i_lang, t_grid.dt_admission_tsz, i_prof) order_date, --
                   pk_events.g_event_type_adm_cir id_future_event_type, --
                   get_id_fet_parent(pk_events.g_event_type_adm_cir) id_fet_parent, --
                   pk_alert_constant.get_no flg_can_approve, --
                   pk_alert_constant.get_no flg_can_reject, --
                   pk_alert_constant.get_no flg_can_cancel, --
                   pk_alert_constant.get_no flg_can_schedule, --
                   pk_alert_constant.g_no flg_can_admit,
                   pk_alert_constant.g_no flg_ok,
                   CASE
                       WHEN t_grid.flg_status IN ('U', 'A', 'S', 'P') THEN
                        'PRESENT_FUTURE'
                       ELSE
                        'PAST'
                   END time_state, --
                   t_grid.id_dep_clin_serv dep_clin_serv, --
                   NULL sch_event, --
                   pk_alert_constant.g_no show_report,
                   NULL id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, dt_admission_tsz, i_prof) dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   NULL icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   NULL id_exam,
                   NULL id_dest_professional,
                   NULL id_sched_professional,
                   NULL dt_sched_event,
                   NULL dt_sched_event_str,
                   NULL id_created_professional,
                   NULL notes,
                   NULL flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   '' flg_type_of_external_resource,
                   NULL id_external_resource,
                   NULL id_efect_episode,
                   NULL id_waiting_list,
                   NULL status_icon_c,
                   NULL id_epis_hhc_req
              FROM TABLE(pk_admission_request.get_ar_episodes(i_lang, i_prof, i_patient, NULL, NULL)) t_grid
              LEFT JOIN dep_clin_serv dcs
                ON t_grid.id_dep_clin_serv = dcs.id_dep_clin_serv
              LEFT JOIN clinical_service cs
                ON dcs.id_clinical_service = cs.id_clinical_service
             WHERE t_grid.flg_status NOT IN ('U', 'C')
               AND t_grid.id_episode NOT IN
                   (SELECT e.id_episode
                      FROM episode e
                      JOIN epis_info ei
                        ON ei.id_episode = e.id_episode
                     WHERE e.id_patient = i_patient
                       AND (e.id_institution IN (SELECT column_value
                                                   FROM TABLE(l_grp_insts)) OR
                           pk_transfer_institution.check_transfer_access(e.id_episode, i_prof) =
                           pk_alert_constant.g_yes)
                       AND e.flg_status IN (g_epis_active)
                       AND e.flg_ehr = g_flg_ehr_normal)
            
            UNION ALL
            SELECT t_grid.id_adm_request id_event,
                   t_grid.id_episode,
                   t_grid.id_schedule,
                   NULL id_exam_req_det,
                   NULL id_exam_req,
                   'ADMISSION_SURGERY2' event_type, --
                   'SurgeryIcon' event_type_icon,
                   pk_surgery_request.get_fe_desc(i_lang, i_prof, t_grid.id_episode) event_type_name_title,
                   t_grid.desc_admission event_type_clinical_service, --
                   t_grid.surg_proc event_type_procedure, --
                   l_msg_no_dependency desc_dependency, --
                   t_grid.dt_surgery request_date, --
                   t_grid.schedule_flg_status request_status_desc, --
                   pk_prof_utils.get_name_signature(i_lang, i_prof, t_grid.id_prof_req) requested_by, --
                   pk_prof_utils.get_name_signature(i_lang, i_prof, t_grid.id_dest_prof) professional, --   
                   NULL id_prof_resp,
                   NULL id_first_nurse_resp,
                   pk_date_utils.dt_chr_tsz(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                          t_grid.id_dest_inst,
                                                                                          NULL),
                                                                             t_grid.dt_admission_tsz),
                                            i_prof) event_date, --
                   NULL status, --
                   t_grid.flg_status flg_status, --
                   t_grid.inst_adm_name location, --
                   t_grid.id_dest_inst id_location,
                   t_grid.oris_status status_icon, --
                   pk_date_utils.date_send_tsz(i_lang, t_grid.dt_admission_tsz, i_prof) order_date, --
                   pk_events.g_event_type_adm_cir id_future_event_type, --
                   get_id_fet_parent(pk_events.g_event_type_adm_cir) id_fet_parent, --
                   pk_alert_constant.get_no flg_can_approve, --
                   pk_alert_constant.get_no flg_can_reject, --
                   pk_alert_constant.get_no flg_can_cancel, --
                   pk_alert_constant.get_no flg_can_schedule, --
                   pk_admission_request.get_can_admit(i_lang, i_prof, t_grid.id_episode) flg_can_admit,
                   pk_alert_constant.g_no flg_ok,
                   CASE
                       WHEN t_grid.flg_status IN ('U', 'A', 'S', 'P') THEN
                        'PRESENT_FUTURE'
                       ELSE
                        'PAST'
                   END time_state, --
                   t_grid.id_dep_clin_serv dep_clin_serv, --
                   NULL sch_event, --
                   pk_alert_constant.g_no show_report,
                   NULL id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, dt_admission_tsz, i_prof) dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   NULL icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   NULL id_exam,
                   NULL id_dest_professional,
                   NULL id_sched_professional,
                   NULL dt_sched_event,
                   NULL dt_sched_event_str,
                   NULL id_created_professional,
                   NULL notes,
                   NULL flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   '' flg_type_of_external_resource,
                   NULL id_external_resource,
                   NULL id_efect_episode,
                   t_grid.id_waiting_list,
                   NULL status_icon_c,
                   NULL id_epis_hhc_req
              FROM TABLE(pk_surgery_request.get_sr_episodes(i_lang, i_prof, i_patient, NULL, NULL)) t_grid
              JOIN episode e
                ON e.id_episode = t_grid.id_episode
             WHERE t_grid.flg_status NOT IN ('U', 'C')
               AND e.flg_ehr = pk_alert_constant.g_epis_ehr_schedule
            -- LAB
            UNION ALL
            SELECT t.id_event, --
                   t.id_episode,
                   t.id_schedule,
                   t.id_exam_req_det,
                   t.id_exam_req,
                   t.event_type, --
                   t.event_type_icon, --
                   t.event_type_name_title, --
                   t.event_type_clinical_service, --
                   t.event_type_procedure, --
                   t.desc_dependency, --
                   t.request_date, --
                   t.request_status_desc, --
                   t.requested_by, --
                   t.professional, --
                   t.id_prof_resp,
                   t.id_first_nurse_resp,
                   t.event_date, --
                   t.status, --
                   t.flg_status, --
                   t.location,
                   t.id_location, --
                   t.status_icon, --
                   t.order_date, --
                   t.id_future_event_type, --
                   t.id_fet_parent, --
                   t.flg_can_approve, --
                   t.flg_can_reject, --
                   t.flg_can_cancel, --
                   t.flg_can_schedule, --
                   t.flg_can_admit,
                   pk_alert_constant.g_no          flg_ok,
                   t.time_state, --
                   NULL                            dep_clin_serv, --
                   1                               sch_event, --
                   t.show_report,
                   t.id_software,
                   t.reopen_episode,
                   t.dt_sched,
                   t.dt_req_begin,
                   t.dt_req_end,
                   t.icon_name,
                   t.registered,
                   t.approval_prof,
                   NULL                            request_reason,
                   t.id_exam,
                   t.id_dest_professional,
                   t.id_sched_professional,
                   t.dt_sched_event,
                   t.dt_sched_event_str,
                   t.id_created_professional,
                   t.notes,
                   t.flg_contact_type,
                   t.id_content,
                   t.id_workflow,
                   t.id_complaint,
                   t.desc_complaint,
                   t.flg_type_of_external_resource,
                   t.id_external_resource,
                   t.id_efect_episode,
                   NULL                            id_waiting_list,
                   NULL                            status_icon_c,
                   NULL                            id_epis_hc_req
              FROM (SELECT *
                      FROM TABLE(get_lab_events_pl(i_lang, i_prof, i_patient, pk_events.g_origin_pe))) t
            UNION ALL
            -------------------------------------------
            -- REFERRALs
            SELECT r.id_external_request id_event,
                   r.id_episode id_episode,
                   NULL id_schedule,
                   NULL id_exam_req_det,
                   NULL id_exam_req,
                   'REFERRAL' event_type,
                   pk_events.get_event_type_icon(pk_events.g_event_type_referral) event_type_icon,
                   pk_events.get_event_type_title(i_lang, pk_events.g_event_type_referral) event_type_name_title,
                   decode(r.id_workflow,
                          pk_ref_constant.g_wf_srv_srv,
                          -- if is internal workflow, than shows the desc of clinical service
                          pk_translation.get_translation(i_lang,
                                                         'CLINICAL_SERVICE.CODE_CLINICAL_SERVICE.' ||
                                                         (SELECT cs.id_clinical_service
                                                            FROM dep_clin_serv dcs
                                                            JOIN clinical_service cs
                                                              ON (cs.id_clinical_service = dcs.id_clinical_service)
                                                           WHERE dcs.id_dep_clin_serv = r.id_dep_clin_serv)),
                          -- else  (other than internal workflow)
                          pk_translation.get_translation(i_lang, 'P1_SPECIALITY.CODE_SPECIALITY.' || r.id_speciality)) event_type_clinical_service,
                   NULL event_type_procedure,
                   l_msg_no_dependency desc_dependency,
                   NULL request_date,
                   NULL request_status_desc,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, r.id_prof_requested) requested_by,
                   nvl(pk_prof_utils.get_name_signature(i_lang,
                                                        i_prof,
                                                        (SELECT pk_ref_dest_phy.get_suggested_physician(i_lang,
                                                                                                        i_prof,
                                                                                                        r.id_external_request)
                                                           FROM dual)),
                       l_future_events_t017) professional,
                   NULL id_prof_resp,
                   NULL id_first_nurse_resp,
                   NULL event_date,
                   NULL status,
                   r.flg_status || r.decision_urg_level flg_status, -- needed to order cursor
                   pk_utils.get_institution_name(i_lang, r.id_inst_dest) location,
                   r.id_inst_dest id_location,
                   pk_utils.get_status_string_immediate(i_lang,
                                                        i_prof,
                                                        pk_alert_constant.g_display_type_date_icon, -- i_display_type
                                                        to_char(nvl(r.decision_urg_level,
                                                                    pk_ref_constant.g_decision_urg_level_normal)), -- i_flg_state
                                                        NULL,
                                                        to_char(r.dt_status_tstz,
                                                                pk_alert_constant.g_dt_yyyymmddhh24miss), -- i_value_date
                                                        'P1_TOSCHEDULE_GRID_ICON.1', -- i_value_icon
                                                        NULL,
                                                        NULL, -- i_back_color
                                                        NULL, -- i_icon_color
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        current_timestamp) status_icon,
                   pk_date_utils.date_send_tsz(i_lang, r.dt_status_tstz, i_prof) order_date, -- needed to order cursor
                   pk_events.g_event_type_referral id_future_event_type,
                   get_id_fet_parent(pk_events.g_event_type_referral) id_fet_parent, --
                   pk_alert_constant.g_no flg_can_approve,
                   pk_alert_constant.g_no flg_can_reject,
                   -- flg_can_cancel referral
                   pk_ref_core.can_cancel(i_lang,
                                          i_prof,
                                          r.id_external_request,
                                          r.flg_status,
                                          nvl(r.id_workflow, pk_ref_constant.g_wf_pcc_hosp),
                                          l_id_profile_template,
                                          (SELECT pk_ref_core.get_prof_func(i_lang, i_prof, r.id_dep_clin_serv)
                                             FROM dual),
                                          l_id_category,
                                          r.id_patient,
                                          r.id_inst_orig,
                                          r.id_inst_dest,
                                          r.id_dep_clin_serv,
                                          r.id_speciality,
                                          r.flg_type,
                                          r.id_prof_requested,
                                          r.id_prof_redirected,
                                          r.id_prof_status,
                                          r.id_external_sys,
                                          r.decision_urg_level) flg_can_cancel,
                   -- flg_can_schedule
                   pk_ref_core.can_schedule(i_lang,
                                            i_prof,
                                            r.id_external_request,
                                            r.flg_status,
                                            nvl(r.id_workflow, pk_ref_constant.g_wf_pcc_hosp),
                                            l_id_profile_template,
                                            (SELECT pk_ref_core.get_prof_func(i_lang, i_prof, r.id_dep_clin_serv)
                                               FROM dual),
                                            l_id_category,
                                            r.id_patient,
                                            r.id_inst_orig,
                                            r.id_inst_dest,
                                            r.id_dep_clin_serv,
                                            r.id_speciality,
                                            r.flg_type,
                                            r.id_prof_requested,
                                            r.id_prof_redirected,
                                            r.id_prof_status,
                                            r.id_external_sys,
                                            r.decision_urg_level) flg_can_schedule,
                   pk_alert_constant.g_no flg_can_admit,
                   pk_alert_constant.g_no flg_ok,
                   'PRESENT_FUTURE' time_state,
                   r.id_dep_clin_serv dep_clin_serv,
                   NULL sch_event,
                   pk_alert_constant.g_no show_report,
                   NULL id_software,
                   pk_alert_constant.g_no reopen_episode,
                   NULL dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   NULL icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   NULL id_exam,
                   (SELECT pk_ref_dest_phy.get_suggested_physician(i_lang, i_prof, r.id_external_request)
                      FROM dual) id_dest_professional,
                   NULL id_sched_professional,
                   NULL dt_sched_event,
                   NULL dt_sched_event_str,
                   NULL id_created_professional,
                   NULL notes,
                   r.flg_type flg_contact_type, -- referral type
                   pk_ref_core.get_content(i_lang,
                                           i_prof,
                                           r.id_dep_clin_serv,
                                           (SELECT pk_ref_dest_phy.get_suggested_physician(i_lang,
                                                                                           i_prof,
                                                                                           r.id_external_request)
                                              FROM dual)) id_content,
                   r.id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   g_resourcetype flg_type_of_external_resource,
                   (SELECT pk_ref_dest_phy.get_suggested_physician(i_lang, i_prof, r.id_external_request)
                      FROM dual) id_external_resource,
                   NULL id_efect_episode,
                   NULL id_waiting_list,
                   NULL status_icon_c,
                   NULL id_epis_hhc_req
              FROM (SELECT p.id_external_request,
                           p.flg_status,
                           p.id_workflow,
                           p.id_patient,
                           p.id_speciality,
                           p.id_episode,
                           p.id_inst_orig,
                           p.id_inst_dest,
                           p.id_dep_clin_serv,
                           p.dt_status_tstz,
                           p.flg_type,
                           p.id_prof_requested,
                           p.id_prof_redirected,
                           p.id_prof_status,
                           p.id_external_sys,
                           p.decision_urg_level
                      FROM p1_external_request p
                     WHERE p.flg_status = pk_ref_constant.g_p1_status_a
                       AND EXISTS (SELECT 1
                              FROM prof_dep_clin_serv pdcs
                             WHERE pdcs.id_professional = i_prof.id
                               AND pdcs.flg_status = pk_grid.g_selected
                               AND pdcs.id_institution = i_prof.institution
                               AND pdcs.id_dep_clin_serv = p.id_dep_clin_serv)
                       AND p.id_inst_dest = i_prof.institution
                       AND p.id_patient = i_patient) r;
    
        LOOP
            FETCH c_result
                INTO v_tab;
            EXIT WHEN c_result%NOTFOUND;
            PIPE ROW(v_tab);
        END LOOP;
    
        RETURN;
    END get_patient_events_pl;

    FUNCTION get_events_task_is_draft
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_id_episode   IN episode.id_episode%TYPE,
        i_fut_evt_type IN future_event_type.flg_type%TYPE
    ) RETURN VARCHAR2 IS
        l_flg_ret VARCHAR2(1 CHAR) := pk_alert_constant.g_no;
        l_error   t_error_out;
        l_exception EXCEPTION;
    BEGIN
    
        /* Lab tests */
        IF NOT pk_lab_tests_external_api_db.check_draft_in_episode(i_lang      => i_lang,
                                                                   i_prof      => i_prof,
                                                                   i_episode   => i_id_episode,
                                                                   o_has_draft => l_flg_ret,
                                                                   o_error     => l_error)
        THEN
            RAISE l_exception;
        END IF;
    
        IF l_flg_ret = pk_alert_constant.g_yes
        THEN
            RETURN pk_alert_constant.g_yes;
        END IF;
    
        /* Exams */
        IF NOT pk_exams_external_api_db.check_draft_in_episode(i_lang      => i_lang,
                                                               i_prof      => i_prof,
                                                               i_episode   => i_id_episode,
                                                               o_has_draft => l_flg_ret,
                                                               o_error     => l_error)
        THEN
            RAISE l_exception;
        END IF;
    
        IF l_flg_ret = pk_alert_constant.g_yes
        THEN
            RETURN pk_alert_constant.g_yes;
        END IF;
    
        /* Procedures */
        IF NOT pk_procedures_external_api_db.check_draft_in_episode(i_lang      => i_lang,
                                                                    i_prof      => i_prof,
                                                                    i_episode   => i_id_episode,
                                                                    o_has_draft => l_flg_ret,
                                                                    o_error     => l_error)
        THEN
            RAISE l_exception;
        END IF;
    
        IF l_flg_ret = pk_alert_constant.g_yes
        THEN
            RETURN pk_alert_constant.g_yes;
        END IF;
    
        /* Patient Education */
        IF NOT pk_patient_education_api_db.get_pat_education_draft(i_lang      => i_lang,
                                                                   i_prof      => i_prof,
                                                                   i_episode   => i_id_episode,
                                                                   o_has_draft => l_flg_ret,
                                                                   o_error     => l_error)
        THEN
            RAISE l_exception;
        END IF;
    
        IF l_flg_ret = pk_alert_constant.g_yes
        THEN
            RETURN pk_alert_constant.g_yes;
        END IF;
    
        RETURN pk_alert_constant.g_no;
    
    END get_events_task_is_draft;

    /********************************************************************************************
    * result patient future events only
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_patient            patient identifier    
    * @param      o_events             events
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/05
    **********************************************************************************************/
    FUNCTION get_patient_future_events_pl
    (
        i_lang    IN language.id_language%TYPE,
        i_prof    IN profissional,
        i_patient IN consult_req.id_patient%TYPE
    ) RETURN t_coll_future_event
        PIPELINED IS
        l_msg_suggested        sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T065');
        l_msg_scheduled        sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T066');
        l_date_sep             sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T073');
        l_msg_no_dependency    sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T074');
        l_problem_list_t069    sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'PROBLEM_LIST_T069');
        l_epis_type_acc        table_number;
        l_grp_insts            table_number;
        v_tab                  t_rec_future_event;
        c_result               pk_types.cursor_type;
        l_id_profile_template  profile_template.id_profile_template%TYPE;
        l_id_category          category.id_category%TYPE;
        l_future_events_t017   sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T017');
        l_sch_complaint_origin sys_config.value%TYPE := nvl(pk_sysconfig.get_config(g_sch_complaint_origin, i_prof),
                                                            g_complaint);
    BEGIN
        g_error := 'GET INSTITUTIONS GROUP';
        SELECT column_value
          BULK COLLECT
          INTO l_grp_insts
          FROM TABLE(pk_list.tf_get_all_inst_group(i_prof.institution, g_inst_grp_flg_rel_adt));
    
        SELECT eta.id_epis_type
          BULK COLLECT
          INTO l_epis_type_acc
          FROM epis_type_access eta, prof_profile_template ppt
         WHERE eta.id_institution = decode((SELECT eta.id_epis_type
                                             FROM epis_type_access eta, prof_profile_template ppt
                                            WHERE eta.id_institution = i_prof.institution
                                              AND ppt.id_profile_template = eta.id_profile_template
                                              AND ppt.id_professional = i_prof.id
                                              AND ppt.id_institution = eta.id_institution
                                              AND ppt.id_software = i_prof.software
                                              AND rownum <= 1),
                                           NULL,
                                           0,
                                           i_prof.institution)
           AND ppt.id_profile_template = eta.id_profile_template
           AND ppt.id_professional = i_prof.id
           AND ppt.id_institution = i_prof.institution
           AND ppt.id_software = i_prof.software
           AND eta.id_epis_type != 0;
    
        l_id_profile_template := pk_tools.get_prof_profile_template(i_prof);
        l_id_category         := pk_prof_utils.get_id_category(i_lang => i_lang, i_prof => i_prof);
    
        OPEN c_result FOR
            SELECT cr.id_consult_req     id_event,
                   cr.id_episode_to_exec id_episode,
                   cr.id_schedule        id_schedule,
                   NULL                  id_exam_req_det,
                   NULL                  id_exam_req,
                   -- get_event_type_by_epis_type(cr.id_epis_type) id_event_type,
                   'FUTURE_EVENTS' event_type,
                   get_event_type_icon(get_event_type_by_epis_type(nvl(nvl(cr.id_epis_type,
                                                                           get_epis_type_consult_req(cr.id_consult_req)),
                                                                       pk_alert_constant.g_epis_type_outpatient))) event_type_icon,
                   get_event_type_title(i_lang,
                                        get_event_type_by_epis_type(nvl(nvl(cr.id_epis_type,
                                                                            get_epis_type_consult_req(cr.id_consult_req)),
                                                                        pk_alert_constant.g_epis_type_outpatient))) event_type_name_title,
                   pk_translation.get_translation(i_lang, cs.code_clinical_service) event_type_clinical_service,
                   NULL event_type_procedure,
                   l_msg_no_dependency desc_dependency,
                   nvl(pk_date_utils.dt_chr(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                          cr.id_instit_requests,
                                                                                          NULL),
                                                                             cr.dt_scheduled_tstz),
                                            i_prof),
                       nvl2(cr.dt_end_event,
                            pk_date_utils.dt_chr(i_lang,
                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                               cr.id_instit_requests,
                                                                                               NULL),
                                                                                  cr.dt_begin_event),
                                                 i_prof) || g_space || l_date_sep || g_space ||
                            pk_date_utils.dt_chr(i_lang,
                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                               cr.id_instit_requests,
                                                                                               NULL),
                                                                                  cr.dt_end_event),
                                                 i_prof),
                            pk_date_utils.dt_chr(i_lang,
                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                               cr.id_instit_requests,
                                                                                               NULL),
                                                                                  cr.dt_begin_event),
                                                 i_prof))) request_date,
                   
                   CASE
                        WHEN cr.flg_status IN ('W', 'PC', 'PCR', 'H', 'R', 'F', 'P', 'A') THEN
                         l_msg_suggested
                        WHEN cr.flg_status IN ('EA', 'T', 'V', 'S', 'M') THEN
                         l_msg_scheduled
                        ELSE
                         NULL
                    END request_status_desc,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_req) requested_by,
                   nvl2(cr.id_prof_requested,
                        pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_requested),
                        pk_events.get_fe_request_prof_str(i_lang, i_prof, cr.id_consult_req, pk_alert_constant.g_no)) professional,
                   NULL id_prof_resp,
                   NULL id_first_nurse_resp,
                   nvl(pk_date_utils.dt_chr(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                          cr.id_instit_requests,
                                                                                          NULL),
                                                                             cr.dt_scheduled_tstz),
                                            i_prof),
                       nvl2(cr.dt_end_event,
                            pk_date_utils.dt_chr(i_lang,
                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                               cr.id_instit_requests,
                                                                                               NULL),
                                                                                  cr.dt_begin_event),
                                                 i_prof) || g_space || l_date_sep || g_space ||
                            pk_date_utils.dt_chr(i_lang,
                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                               cr.id_instit_requests,
                                                                                               NULL),
                                                                                  cr.dt_end_event),
                                                 i_prof),
                            pk_date_utils.dt_chr(i_lang,
                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                               cr.id_instit_requests,
                                                                                               NULL),
                                                                                  cr.dt_begin_event),
                                                 i_prof))) event_date,
                   pk_sysdomain.get_domain('CONSULT_REQ.FLG_STATUS', cr.flg_status, i_lang) status,
                   cr.flg_status flg_status,
                   pk_utils.get_institution_name(i_lang, cr.id_inst_requested) location,
                   cr.id_inst_requested id_location,
                   CASE
                        WHEN cr.flg_status = pk_consult_req.g_consult_req_stat_req
                             AND i_prof.id NOT IN
                             (SELECT column_value
                                    FROM TABLE(get_fe_approval_prof_ids(cr.id_consult_req))) THEN
                         pk_utils.get_status_string_immediate(i_lang,
                                                              i_prof,
                                                              pk_alert_constant.g_display_type_icon,
                                                              'W',
                                                              NULL,
                                                              NULL,
                                                              'CONSULT_REQ.FLG_STATUS',
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL)
                        WHEN cr.flg_status = pk_consult_req.g_consult_req_stat_reply THEN
                         pk_utils.get_status_string_immediate(i_lang,
                                                              i_prof,
                                                              pk_alert_constant.g_display_type_icon,
                                                              decode(nvl(cr.flg_recurrence, g_flg_not_repeat),
                                                                     g_flg_not_repeat,
                                                                     'PC',
                                                                     'PCR'),
                                                              NULL,
                                                              NULL,
                                                              'CONSULT_REQ.FLG_STATUS',
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL)
                        WHEN cr.flg_status = pk_consult_req.g_consult_req_hold_list THEN
                         pk_utils.get_status_string_immediate(i_lang,
                                                              i_prof,
                                                              pk_alert_constant.g_display_type_icon,
                                                              pk_consult_req.g_consult_req_hold_list,
                                                              NULL,
                                                              NULL,
                                                              'CONSULT_REQ.FLG_STATUS',
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              NULL)
                        ELSE
                         pk_utils.get_status_string(i_lang,
                                                    i_prof,
                                                    cr.status_str,
                                                    cr.status_msg,
                                                    cr.status_icon,
                                                    cr.status_flg)
                    END status_icon,
                   --pk_date_utils.date_send_tsz(i_lang, nvl(cr.dt_last_update, cr.dt_consult_req_tstz), i_prof) order_date,
                   pk_date_utils.date_send_tsz(i_lang, nvl(cr.dt_scheduled_tstz, cr.dt_begin_event), i_prof) order_date,
                   fet.id_future_event_type id_future_event_type,
                   get_id_fet_parent(fet.id_future_event_type) id_fet_parent,
                   decode((SELECT pk_alert_constant.g_yes
                            FROM dual
                           WHERE i_prof.id IN (SELECT column_value
                                                 FROM TABLE(get_fe_approval_prof_ids(cr.id_consult_req)))),
                          pk_alert_constant.g_yes,
                          decode(cr.flg_status,
                                 pk_consult_req.g_consult_req_stat_req,
                                 pk_alert_constant.g_yes,
                                 pk_consult_req.g_consult_req_stat_read,
                                 pk_alert_constant.g_yes,
                                 pk_consult_req.g_cons_req_prof_deny,
                                 pk_alert_constant.g_yes,
                                 pk_alert_constant.g_no),
                          pk_alert_constant.g_no) flg_can_approve,
                   decode((SELECT pk_alert_constant.g_yes
                            FROM dual
                           WHERE i_prof.id IN (SELECT column_value
                                                 FROM TABLE(get_fe_approval_prof_ids(cr.id_consult_req)))),
                          pk_alert_constant.g_yes,
                          decode(cr.flg_status,
                                 pk_consult_req.g_consult_req_stat_req,
                                 pk_alert_constant.g_yes,
                                 pk_consult_req.g_consult_req_stat_read,
                                 pk_alert_constant.g_yes,
                                 pk_consult_req.g_cons_req_prof_accept,
                                 pk_alert_constant.g_yes,
                                 pk_alert_constant.g_no),
                          pk_alert_constant.g_no) flg_can_reject,
                   decode(cr.flg_status,
                          pk_consult_req.g_consult_req_stat_cancel,
                          pk_alert_constant.g_no,
                          pk_consult_req.g_consult_req_stat_sched,
                          pk_alert_constant.g_no,
                          pk_consult_req.g_consult_req_stat_proc,
                          pk_alert_constant.g_no,
                          pk_consult_req.g_consult_req_stat_rejected,
                          pk_alert_constant.g_no,
                          decode(i_prof.id, cr.id_prof_req, pk_alert_constant.g_yes, pk_alert_constant.g_no)) flg_can_cancel,
                   decode(cr.flg_status,
                          pk_consult_req.g_consult_req_stat_reply,
                          pk_alert_constant.g_yes,
                          pk_consult_req.g_consult_req_hold_list,
                          pk_alert_constant.g_yes,
                          pk_alert_constant.g_no) flg_can_schedule,
                   pk_alert_constant.g_no flg_can_admit,
                   pk_alert_constant.g_no flg_ok,
                   'PRESENT_FUTURE' time_state,
                   dcs.id_dep_clin_serv dep_clin_serv,
                   cr.id_sch_event sch_event,
                   pk_alert_constant.g_no show_report,
                   NULL id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, cr.dt_scheduled_tstz, i_prof) dt_sched,
                   pk_date_utils.date_send_tsz(i_lang, cr.dt_begin_event, i_prof) dt_req_begin,
                   pk_date_utils.date_send_tsz(i_lang, cr.dt_end_event, i_prof) dt_req_end,
                   NULL icon_name,
                   pk_date_utils.date_char_tsz(i_lang,
                                               nvl(cr.dt_last_update, cr.dt_consult_req_tstz),
                                               i_prof.institution,
                                               i_prof.software) || g_semicolon ||
                   pk_prof_utils.get_name_signature(i_lang, i_prof, nvl(cr.id_prof_last_update, cr.id_prof_req)) || ' (' ||
                   nvl(pk_prof_utils.get_spec_signature(i_lang,
                                                        i_prof,
                                                        nvl(cr.id_prof_last_update, cr.id_prof_req),
                                                        nvl(cr.dt_last_update, cr.dt_consult_req_tstz),
                                                        cr.id_episode),
                       l_problem_list_t069) || ')' registered,
                   pk_events.get_fe_approval_prof_str(i_lang, i_prof, cr.id_consult_req, pk_alert_constant.g_no) approval_prof,
                   cr.request_reason request_reason,
                   NULL id_exam,
                   nvl(cr.id_prof_requested,
                       (SELECT rp.id_professional
                          FROM request_prof rp
                         WHERE rp.id_consult_req = cr.id_consult_req
                           AND rp.flg_active = pk_alert_constant.g_yes
                           AND rownum = 1)) id_dest_professional,
                   nvl(cr.id_prof_last_update, cr.id_prof_req) id_sched_professional,
                   pk_date_utils.date_send_tsz(i_lang, nvl(cr.dt_last_update, cr.dt_consult_req_tstz), i_prof) dt_sched_event,
                   pk_date_utils.date_char_tsz(i_lang,
                                               nvl(cr.dt_last_update, cr.dt_consult_req_tstz),
                                               i_prof.institution,
                                               i_prof.software) dt_sched_event_str,
                   get_id_prof_create_consult_req(cr.id_consult_req) id_created_professional,
                   cr.notes notes,
                   cr.flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   CASE
                        WHEN l_sch_complaint_origin = g_complaint THEN
                         cr.id_complaint
                        ELSE
                         NULL
                    END id_complaint,
                   CASE
                        WHEN l_sch_complaint_origin = g_complaint THEN
                         pk_translation.get_translation(i_lang, c.code_complaint)
                        ELSE
                         cr.reason_for_visit
                    END desc_complaint,
                   g_resourcetype flg_type_of_external_resource,
                   nvl(cr.id_prof_requested,
                       (SELECT rp.id_professional
                          FROM request_prof rp
                         WHERE rp.id_consult_req = cr.id_consult_req
                           AND rp.flg_active = pk_alert_constant.g_yes
                           AND rownum = 1)) id_external_resource,
                   cr.id_episode id_efect_episode,
                   NULL id_waiting_list,
                   CASE
                        WHEN cr.flg_status = pk_consult_req.g_consult_req_stat_cancel THEN
                         (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                      i_prof,
                                                                      pk_alert_constant.g_display_type_icon,
                                                                      cr.flg_status,
                                                                      NULL,
                                                                      NULL,
                                                                      'CONSULT_REQ.FLG_STATUS')
                            FROM dual)
                        WHEN cr.flg_status = pk_consult_req.g_consult_req_hold_list THEN
                         (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                      i_prof,
                                                                      pk_alert_constant.g_display_type_icon,
                                                                      pk_consult_req.g_consult_req_hold_list,
                                                                      NULL,
                                                                      NULL,
                                                                      'CONSULT_REQ.FLG_STATUS',
                                                                      NULL,
                                                                      NULL,
                                                                      NULL,
                                                                      NULL,
                                                                      NULL,
                                                                      NULL,
                                                                      NULL)
                            FROM dual)
                        ELSE
                         (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                      i_prof,
                                                                      pk_alert_constant.g_display_type_date_icon,
                                                                      pk_consult_req.g_consult_req_stat_reply,
                                                                      NULL,
                                                                      to_char(nvl(cr.dt_last_update, cr.dt_consult_req_tstz),
                                                                              pk_alert_constant.g_dt_yyyymmddhh24miss),
                                                                      'CONSULT_REQ.FLG_STATUS',
                                                                      NULL,
                                                                      '0xC86464',
                                                                      '0xEBEBC8',
                                                                      NULL,
                                                                      NULL,
                                                                      NULL,
                                                                      current_timestamp)
                            FROM dual)
                    END status_icon_c,
                   NULL id_epis_hhc_req
              FROM consult_req cr
              JOIN dep_clin_serv dcs
                ON (dcs.id_dep_clin_serv = cr.id_dep_clin_serv)
              JOIN clinical_service cs
                ON (cs.id_clinical_service = dcs.id_clinical_service)
              JOIN department d
                ON (dcs.id_department = d.id_department)
              JOIN dept dept
                ON (d.id_dept = dept.id_dept)
            --LEFT JOIN schedule sch ON (sch.id_schedule = cr.id_schedule)
              LEFT JOIN episode e
                ON e.id_episode = cr.id_episode
              LEFT JOIN future_event_type fet
                ON (fet.id_epis_type = nvl(cr.id_epis_type, get_epis_type_consult_req(cr.id_consult_req)))
              LEFT JOIN complaint c
                ON c.id_complaint = cr.id_complaint
             WHERE cr.id_patient = i_patient
               AND cr.flg_status NOT IN pk_consult_req.g_consult_req_stat_proc
               AND pk_events.get_events_task_is_draft(i_lang, i_prof, cr.id_episode_to_exec, fet.flg_type) =
                   pk_consult_req.g_no
            UNION ALL
            --o_sched_all 
            SELECT NULL id_event,
                   s.id_episode id_episode,
                   s.id_schedule id_schedule,
                   NULL id_exam_req_det,
                   NULL id_exam_req,
                   'SCHEDULED_EPISODES' event_type,
                   get_event_type_icon(get_event_type_by_epis_type(so.id_epis_type)) event_type_icon,
                   get_event_type_title(i_lang, get_event_type_by_epis_type(so.id_epis_type)) event_type_name_title,
                   pk_translation.get_translation(i_lang, cs.code_clinical_service) event_type_clinical_service,
                   NULL event_type_procedure,
                   l_msg_no_dependency desc_dependency,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, s.id_instit_requests, NULL),
                                                                         s.dt_begin_tstz),
                                        i_prof) request_date,
                   
                   CASE
                       WHEN s.flg_status IN ('P', 'R', 'T') THEN
                        l_msg_suggested
                       WHEN s.flg_status IN ('A') THEN
                        l_msg_scheduled
                       ELSE
                        NULL
                   END request_status_desc,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, s.id_prof_requests) requested_by,
                   get_multi_name_signature(i_lang, i_prof, s.id_schedule) professional,
                   NULL id_prof_resp,
                   NULL id_first_nurse_resp,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, s.id_instit_requests, NULL),
                                                                         s.dt_begin_tstz),
                                        i_prof) event_date,
                   pk_sysdomain.get_domain('SCHEDULE.FLG_STATUS', s.flg_status, i_lang) status,
                   s.flg_status flg_status,
                   pk_utils.get_institution_name(i_lang, s.id_instit_requested) location,
                   s.id_instit_requested id_location,
                   pk_utils.get_status_string_immediate(i_lang,
                                                        i_prof,
                                                        pk_alert_constant.g_display_type_icon,
                                                        s.flg_status,
                                                        NULL,
                                                        NULL,
                                                        'SCHEDULE.FLG_STATUS') status_icon,
                   pk_date_utils.date_send_tsz(i_lang, s.dt_begin_tstz, i_prof) order_date,
                   get_event_type_by_epis_type(so.id_epis_type) id_future_event_type,
                   get_id_fet_parent(get_event_type_by_epis_type(so.id_epis_type)) id_fet_parent, --
                   pk_alert_constant.g_no flg_can_approve,
                   pk_alert_constant.g_no flg_can_reject,
                   pk_alert_constant.g_no flg_can_cancel,
                   pk_alert_constant.g_no flg_can_schedule,
                   pk_alert_constant.g_no flg_can_admit,
                   pk_alert_constant.g_no flg_ok,
                   'PRESENT_FUTURE' time_state,
                   s.id_dcs_requested dep_clin_serv,
                   s.id_sch_event sch_event,
                   pk_alert_constant.g_no show_report,
                   NULL id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, s.dt_schedule_tstz, i_prof) dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   NULL icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   NULL id_exam,
                   NULL id_dest_professional,
                   s.id_prof_schedules id_sched_professional,
                   pk_date_utils.date_send_tsz(i_lang, s.dt_schedule_tstz, i_prof) dt_sched_event,
                   pk_date_utils.date_char_tsz(i_lang, s.dt_schedule_tstz, i_prof.institution, i_prof.software) dt_sched_event_str,
                   NULL id_created_professional,
                   NULL notes,
                   sg.flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   '' flg_type_of_external_resource,
                   NULL id_external_resource,
                   e.id_prev_episode id_efect_episode,
                   NULL id_waiting_list,
                   (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                i_prof,
                                                                pk_alert_constant.g_display_type_date_icon,
                                                                pk_consult_req.g_consult_req_stat_reply,
                                                                NULL,
                                                                to_char(s.dt_schedule_tstz,
                                                                        pk_alert_constant.g_dt_yyyymmddhh24miss),
                                                                'CONSULT_REQ.FLG_STATUS',
                                                                NULL,
                                                                '0xC86464',
                                                                '0xEBEBC8',
                                                                NULL,
                                                                NULL,
                                                                NULL,
                                                                current_timestamp)
                      FROM dual) status_icon_c,
                   NULL id_epis_hhc_req
              FROM schedule s
              LEFT JOIN episode e
                ON e.id_episode = s.id_episode
              JOIN sch_group sg
                ON (s.id_schedule = sg.id_schedule)
              JOIN schedule_outp so
                ON (s.id_schedule = so.id_schedule)
            -- JOIN sch_prof_outp spo ON (spo.id_schedule_outp = so.id_schedule_outp)
              LEFT JOIN dep_clin_serv dcs
                ON (dcs.id_dep_clin_serv = s.id_dcs_requested)
              LEFT JOIN clinical_service cs
                ON (cs.id_clinical_service = dcs.id_clinical_service)
             WHERE sg.id_patient = i_patient
               AND s.flg_status NOT IN (pk_schedule.g_sched_status_cancelled, pk_schedule.g_sched_status_cache)
                  -- agendamentos temporários (SCH 3.0)
               AND so.id_epis_type IN
                   (SELECT etsi.id_epis_type
                      FROM epis_type_soft_inst etsi
                     WHERE etsi.id_software = i_prof.software
                       AND etsi.id_institution IN
                           (SELECT column_value
                              FROM TABLE(pk_list.tf_get_all_inst_group(i_prof.institution, g_inst_grp_flg_rel_adt))))
               AND s.id_episode NOT IN (SELECT ei.id_episode
                                          FROM epis_info ei
                                          JOIN episode e
                                            ON (ei.id_episode = e.id_episode)
                                         WHERE e.id_patient = i_patient
                                              --AND e.flg_ehr IN (g_flg_ehr_scheduled)
                                           AND ei.id_schedule IS NOT NULL)
               AND so.id_epis_type <> pk_alert_constant.g_epis_type_home_health_care
            UNION ALL
            SELECT get_id_consult_req(e.id_episode) id_event,
                   e.id_episode id_episode,
                   s.id_schedule id_schedule,
                   NULL id_exam_req_det,
                   NULL id_exam_req,
                   'SCHEDULED_EPISODES_2' event_type,
                   get_event_type_icon(get_event_type_by_epis_type(e.id_epis_type)) event_type_icon,
                   get_event_type_title(i_lang, get_event_type_by_epis_type(e.id_epis_type)) event_type_name_title,
                   pk_translation.get_translation(i_lang, cs.code_clinical_service) event_type_clinical_service,
                   NULL event_type_procedure, --
                   l_msg_no_dependency desc_dependency,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, e.id_institution, NULL),
                                                                         s.dt_begin_tstz),
                                        i_prof) request_date,
                   CASE
                       WHEN s.flg_status IN ('P', 'R', 'T') THEN
                        l_msg_suggested
                       WHEN s.flg_status IN ('A') THEN
                        l_msg_scheduled
                       ELSE
                        NULL
                   END request_status_desc,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, s.id_prof_requests) requested_by,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, nvl(ei.id_professional, ei.id_first_nurse_resp)) professional,
                   ei.id_professional id_prof_resp,
                   ei.id_first_nurse_resp id_first_nurse_resp,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, e.id_institution, NULL),
                                                                         s.dt_begin_tstz),
                                        i_prof) event_date,
                   pk_sysdomain.get_domain('EPISODE.FLG_STATUS', e.flg_status, i_lang) status,
                   e.flg_status flg_status,
                   pk_utils.get_institution_name(i_lang, s.id_instit_requested) location,
                   s.id_instit_requested id_location,
                   pk_utils.get_status_string_immediate(i_lang,
                                                        i_prof,
                                                        pk_alert_constant.g_display_type_icon,
                                                        s.flg_status,
                                                        NULL,
                                                        NULL,
                                                        'SCHEDULE.FLG_STATUS',
                                                        NULL,
                                                        NULL,
                                                        decode(s.flg_status,
                                                               pk_schedule.g_sched_status_cancelled,
                                                               pk_alert_constant.g_color_icon_medium_grey,
                                                               NULL),
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL) status_icon,
                   pk_date_utils.date_send_tsz(i_lang, s.dt_begin_tstz, i_prof) order_date,
                   get_event_type_by_epis_type(e.id_epis_type) id_future_event_type,
                   get_id_fet_parent(get_event_type_by_epis_type(e.id_epis_type)) id_fet_parent,
                   pk_alert_constant.g_no flg_can_approve,
                   pk_alert_constant.g_no flg_can_reject,
                   pk_alert_constant.g_no flg_can_cancel,
                   pk_alert_constant.g_no flg_can_schedule,
                   pk_alert_constant.g_no flg_can_admit,
                   pk_alert_constant.g_no flg_ok,
                   'PRESENT_FUTURE' time_state,
                   s.id_dcs_requested dep_clin_serv,
                   s.id_sch_event sch_event,
                   pk_alert_constant.g_no show_report,
                   NULL id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, s.dt_begin_tstz, i_prof) dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   NULL icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   NULL id_exam,
                   NULL id_dest_professional,
                   s.id_prof_schedules id_sched_professional,
                   pk_date_utils.date_send_tsz(i_lang, s.dt_schedule_tstz, i_prof) dt_sched_event,
                   pk_date_utils.date_char_tsz(i_lang, s.dt_schedule_tstz, i_prof.institution, i_prof.software) dt_sched_event_str,
                   NULL id_created_professional,
                   NULL notes,
                   sg.flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   '' flg_type_of_external_resource,
                   NULL id_external_resource,
                   e.id_prev_episode id_efect_episode,
                   NULL id_waiting_list,
                   (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                i_prof,
                                                                pk_alert_constant.g_display_type_icon,
                                                                s.flg_status,
                                                                NULL,
                                                                NULL,
                                                                'SCHEDULE.FLG_STATUS',
                                                                NULL,
                                                                NULL,
                                                                NULL,
                                                                NULL,
                                                                NULL,
                                                                NULL,
                                                                NULL)
                      FROM dual) status_icon_c,
                   NULL id_epis_hhc_req
              FROM episode e
              JOIN epis_info ei
                ON ei.id_episode = e.id_episode
              LEFT JOIN dep_clin_serv dcs
                ON (dcs.id_dep_clin_serv = ei.id_dep_clin_serv)
              LEFT JOIN clinical_service cs
                ON (cs.id_clinical_service = dcs.id_clinical_service)
              JOIN schedule s
                ON ei.id_schedule = s.id_schedule
              LEFT JOIN sch_group sg
                ON ei.id_schedule = sg.id_schedule
              LEFT JOIN wtl_epis we
                ON we.id_episode = e.id_episode
             WHERE ei.id_schedule <> -1
               AND (s.flg_status NOT IN (pk_schedule.g_sched_status_cancelled, pk_schedule.g_sched_status_cache) OR
                   s.flg_status IS NULL)
               AND e.id_institution IN
                   (SELECT column_value
                      FROM TABLE(pk_list.tf_get_all_inst_group(i_prof.institution, g_inst_grp_flg_rel_adt)))
                  /*                ALERT-256576          
                       AND (e.id_epis_type IN (SELECT column_value
                                                 FROM TABLE(l_epis_type_acc)) OR
                           (l_epis_type_count = 0 AND ei.id_software IN (0, i_prof.software)))
                  */
               AND e.id_patient = i_patient
                  --AND e.flg_status IN (g_epis_active)
               AND e.flg_ehr = g_flg_ehr_scheduled
               AND we.id_waiting_list IS NULL
               AND e.id_epis_type <> pk_alert_constant.g_epis_type_home_health_care
            UNION ALL -- episodios tipo 'S' sem linha na schedule
            SELECT NULL id_event,
                   e.id_episode id_episode,
                   s.id_schedule id_schedule,
                   NULL id_exam_req_det,
                   NULL id_exam_req,
                   'SCHEDULED_EPISODES_3' event_type,
                   get_event_type_icon(get_event_type_by_epis_type(e.id_epis_type)) event_type_icon,
                   get_event_type_title(i_lang, get_event_type_by_epis_type(e.id_epis_type)) event_type_name_title,
                   pk_translation.get_translation(i_lang, cs.code_clinical_service) event_type_clinical_service,
                   pk_sr_clinical_info.get_proposed_surgery(i_lang, e.id_episode, i_prof, pk_alert_constant.g_no) event_type_procedure, --
                   l_msg_no_dependency desc_dependency,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, e.id_institution, NULL),
                                                                         e.dt_begin_tstz),
                                        i_prof) request_date,
                   CASE
                       WHEN s.flg_status IN ('P', 'R', 'T') THEN
                        l_msg_suggested
                       WHEN s.flg_status IN ('A') THEN
                        l_msg_scheduled
                       ELSE
                        NULL
                   END request_status_desc,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, nvl(ei.id_professional, ei.id_first_nurse_resp)) requested_by,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, nvl(ei.id_professional, ei.id_first_nurse_resp)) professional,
                   ei.id_professional id_prof_resp,
                   ei.id_first_nurse_resp id_first_nurse_resp,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, e.id_institution, NULL),
                                                                         e.dt_begin_tstz),
                                        i_prof) event_date,
                   pk_sysdomain.get_domain('EPISODE.FLG_STATUS', e.flg_status, i_lang) status,
                   e.flg_status flg_status,
                   pk_utils.get_institution_name(i_lang, e.id_institution) location,
                   e.id_institution id_location,
                   pk_utils.get_status_string_immediate(i_lang,
                                                        i_prof,
                                                        pk_alert_constant.g_display_type_icon,
                                                        nvl(s.flg_status, e.flg_status),
                                                        NULL,
                                                        NULL,
                                                        'SCHEDULE.FLG_STATUS',
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL) status_icon,
                   pk_date_utils.date_send_tsz(i_lang, e.dt_begin_tstz, i_prof) order_date,
                   get_event_type_by_epis_type(e.id_epis_type) id_future_event_type,
                   get_id_fet_parent(get_event_type_by_epis_type(e.id_epis_type)) id_fet_parent,
                   pk_alert_constant.g_no flg_can_approve,
                   pk_alert_constant.g_no flg_can_reject,
                   pk_alert_constant.g_no flg_can_cancel,
                   pk_alert_constant.g_no flg_can_schedule,
                   pk_admission_request.get_can_admit(i_lang, i_prof, e.id_episode) flg_can_admit,
                   pk_alert_constant.g_no flg_ok,
                   'PRESENT_FUTURE' time_state,
                   s.id_dcs_requested dep_clin_serv,
                   s.id_sch_event sch_event,
                   pk_alert_constant.g_no show_report,
                   NULL id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, e.dt_begin_tstz, i_prof) dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   NULL icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   NULL id_exam,
                   NULL id_dest_professional,
                   s.id_prof_schedules id_sched_professional,
                   pk_date_utils.date_send_tsz(i_lang, s.dt_schedule_tstz, i_prof) dt_sched_event,
                   pk_date_utils.date_char_tsz(i_lang, s.dt_schedule_tstz, i_prof.institution, i_prof.software) dt_sched_event_str,
                   NULL id_created_professional,
                   NULL notes,
                   sg.flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   '' flg_type_of_external_resource,
                   NULL id_external_resource,
                   e.id_prev_episode id_efect_episode,
                   NULL id_waiting_list,
                   NULL status_icon_c,
                   NULL id_epis_hhc_req
              FROM episode e
              JOIN epis_info ei
                ON ei.id_episode = e.id_episode
              LEFT JOIN dep_clin_serv dcs
                ON (dcs.id_dep_clin_serv = ei.id_dep_clin_serv)
              LEFT JOIN clinical_service cs
                ON (cs.id_clinical_service = dcs.id_clinical_service)
              LEFT JOIN schedule s
                ON s.id_schedule = ei.id_schedule
               AND s.id_schedule != -1
              LEFT JOIN sch_group sg
                ON sg.id_schedule = s.id_schedule
             WHERE NOT EXISTS
             (SELECT 'X'
                      FROM schedule s
                     WHERE s.id_schedule = decode(ei.id_schedule, -1, NULL, ei.id_schedule))
               AND e.id_patient = i_patient
               AND e.id_institution IN
                   (SELECT column_value
                      FROM TABLE(pk_list.tf_get_all_inst_group(i_prof.institution, g_inst_grp_flg_rel_adt)))
               AND e.flg_status IN (g_epis_active)
               AND e.flg_ehr = g_flg_ehr_scheduled
               AND e.id_episode NOT IN
                   (SELECT column_value
                      FROM TABLE(CAST(MULTISET (SELECT we.id_episode
                                         FROM wtl_epis we
                                        INNER JOIN waiting_list wl
                                           ON (wl.id_waiting_list = we.id_waiting_list)
                                         LEFT JOIN schedule_sr ssr
                                           ON (ssr.id_waiting_list = wl.id_waiting_list)
                                         LEFT JOIN (SELECT id_schedule_sr
                                                     FROM (SELECT sps.id_schedule_sr,
                                                                  rank() over(PARTITION BY sps.id_schedule_sr ORDER BY sps.dt_req DESC, sps.dt_reg DESC) origin_rank
                                                             FROM sr_pos_schedule sps
                                                            WHERE sps.flg_status = pk_alert_constant.g_active) t
                                                    WHERE t.origin_rank = 1) pos
                                           ON (pos.id_schedule_sr = ssr.id_schedule_sr)) AS table_number)))
               AND e.id_epis_type <> pk_alert_constant.g_epis_type_home_health_care
            UNION ALL
            -------------------  EXAMES DE IMAGEM  -----------------                      
            SELECT ex.id_exam_req_det id_event, --
                   ex.id_episode id_episode,
                   ex.id_schedule id_schedule,
                   ex.id_exam_req_det,
                   ex.id_exam_req,
                   'IMAGING_EXAMS' event_type, --
                   get_event_type_icon(pk_events.g_event_type_iexam) event_type_icon, --
                   get_event_type_title(i_lang, pk_events.g_event_type_iexam) event_type_name_title, --
                   pk_exams_api_db.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || ex.id_exam, NULL) event_type_clinical_service, --
                   NULL event_type_procedure, --
                   l_msg_no_dependency desc_dependency, --
                   pk_date_utils.dt_chr_tsz(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL, ex.id_institution, NULL),
                                                                             nvl(ex.dt_begin_tstz, ex.dt_schedule_tstz)),
                                            i_prof) request_date, --
                   decode(nvl(ex.dt_begin_tstz, ex.dt_schedule_tstz),
                          NULL,
                          NULL,
                          decode(flg_status_req_det, pk_grid.g_exam_req_sched, l_msg_scheduled, l_msg_suggested)) request_status_desc, --
                   pk_prof_utils.get_name_signature(i_lang, i_prof, ex.id_prof_req) requested_by, --
                   NULL professional, --
                   NULL id_prof_resp,
                   NULL id_first_nurse_resp,
                   pk_date_utils.dt_chr_tsz(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL, ex.id_institution, NULL),
                                                                             nvl(ex.dt_begin_tstz, ex.dt_schedule_tstz)),
                                            i_prof) event_date, --
                   pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ_DET.FLG_STATUS', ex.flg_status_req_det, NULL) status, --
                   ex.flg_status_req_det flg_status, --
                   pk_utils.get_institution_name(i_lang, ex.id_institution) location,
                   ex.id_institution id_location, --
                   pk_utils.get_status_string_immediate(i_lang,
                                                        i_prof,
                                                        pk_alert_constant.g_display_type_icon,
                                                        decode(ex.flg_status_req_det,
                                                               pk_exam_constant.g_exam_nr,
                                                               pk_exam_constant.g_exam_tosched,
                                                               ex.flg_status_req_det),
                                                        NULL,
                                                        NULL,
                                                        'EXAM_REQ_DET.FLG_STATUS') status_icon, --
                   pk_date_utils.date_send_tsz(i_lang, nvl(ex.dt_begin_tstz, ex.dt_schedule_tstz), i_prof) order_date, --
                   pk_events.g_event_type_iexam id_future_event_type, --
                   get_id_fet_parent(pk_events.g_event_type_iexam) id_fet_parent,
                   NULL flg_can_approve, --
                   NULL flg_can_reject, --
                   NULL flg_can_cancel, --
                   decode(flg_status_req_det, pk_grid.g_exam_req_sched, pk_alert_constant.g_no, pk_alert_constant.g_yes) flg_can_schedule, --
                   pk_alert_constant.g_no flg_can_admit,
                   pk_alert_constant.g_no flg_ok,
                   'PRESENT_FUTURE' time_state, --
                   NULL dep_clin_serv, --
                   NULL sch_event, --
                   pk_alert_constant.g_no show_report,
                   NULL id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, nvl(ex.dt_begin_tstz, ex.dt_schedule_tstz), i_prof) dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   pk_sysdomain.get_img(i_lang, 'EXAM_REQ.FLG_REQ_ORIGIN_MODULE', ex.flg_req_origin_module) icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   ex.id_exam,
                   NULL id_dest_professional,
                   ex.id_prof_req id_sched_professional,
                   pk_date_utils.date_send_tsz(i_lang, ex.dt_req_tstz, i_prof) dt_sched_event,
                   pk_date_utils.date_char_tsz(i_lang, ex.dt_req_tstz, i_prof.institution, i_prof.software) dt_sched_event_str,
                   ex.id_prof_req id_created_professional,
                   NULL notes,
                   NULL flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   g_flgtype flg_type_of_external_resource,
                   ex.id_room id_external_resource,
                   ex.id_episode id_efect_episode,
                   NULL id_waiting_list,
                   (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                i_prof,
                                                                pk_alert_constant.g_display_type_date_icon,
                                                                pk_consult_req.g_consult_req_stat_reply,
                                                                NULL,
                                                                to_char(nvl(ex.dt_req_tstz,
                                                                            nvl(ex.dt_begin_tstz, ex.dt_schedule_tstz)),
                                                                        pk_alert_constant.g_dt_yyyymmddhh24miss),
                                                                'CONSULT_REQ.FLG_STATUS',
                                                                NULL,
                                                                '0xC86464',
                                                                '0xEBEBC8',
                                                                NULL,
                                                                NULL,
                                                                NULL,
                                                                current_timestamp)
                      FROM dual) status_icon_c,
                   NULL id_epis_hhc_req
              FROM (SELECT DISTINCT gti.id_patient,
                                    gti.pat_gender,
                                    gti.pat_age,
                                    gti.num_clin_record,
                                    gti.id_episode,
                                    gti.id_dept,
                                    gti.id_clinical_service,
                                    gti.id_professional,
                                    gti.id_exam_cat,
                                    gti.id_exam,
                                    gti.dt_schedule_tstz,
                                    er.notes,
                                    gti.dt_begin_tstz,
                                    gti.id_exam_req,
                                    gti.id_exam_req_det,
                                    gti.flg_status_req_det,
                                    gti.dt_req_tstz,
                                    er.id_prof_req,
                                    er.id_institution,
                                    er.id_schedule,
                                    gti.flg_req_origin_module,
                                    gti.id_room
                      FROM grid_task_img gti, exam_req er, exam_cat_dcs ecdcs
                     WHERE gti.id_institution IN
                           (SELECT column_value
                              FROM TABLE(pk_list.tf_get_all_inst_group(i_prof.institution, g_inst_grp_flg_rel_adt)))
                       AND gti.flg_status_req_det IN
                           (pk_grid.g_exam_req_tosched, pk_grid.g_exam_req_sched, pk_grid.g_exam_req_nr)
                       AND gti.id_exam_req = er.id_exam_req
                       AND gti.id_exam_cat = ecdcs.id_exam_cat
                       AND gti.id_patient = i_patient
                       AND EXISTS (SELECT 1
                              FROM prof_dep_clin_serv pdcs
                             WHERE pdcs.id_professional = i_prof.id
                               AND pdcs.flg_status = pk_grid.g_selected
                               AND pdcs.id_institution = i_prof.institution
                               AND pdcs.id_dep_clin_serv = ecdcs.id_dep_clin_serv)) ex
            UNION ALL
            -------------------  OUTROS EXAMES  -----------------                                            
            SELECT ox.id_exam_req_det id_event, --
                   ox.id_episode id_episode,
                   ox.id_schedule id_schedule,
                   ox.id_exam_req_det,
                   ox.id_exam_req,
                   'OTHER_EXAMS' event_type, --
                   get_event_type_icon(pk_events.g_event_type_oexam) event_type_icon, --
                   get_event_type_title(i_lang, pk_events.g_event_type_oexam) event_type_name_title, --
                   pk_exams_api_db.get_alias_translation(i_lang, i_prof, 'EXAM.CODE_EXAM.' || ox.id_exam, NULL) event_type_clinical_service, --
                   NULL event_type_procedure, --
                   l_msg_no_dependency desc_dependency, --
                   pk_date_utils.dt_chr_tsz(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL, ox.id_institution, NULL),
                                                                             nvl(nvl(ox.dt_begin_tstz,
                                                                                     ox.dt_schedule_tstz),
                                                                                 ox.dt_req_tstz)),
                                            i_prof) request_date, --
                   decode(nvl(ox.dt_begin_tstz, ox.dt_schedule_tstz),
                          NULL,
                          NULL,
                          decode(flg_status_req_det, pk_grid.g_exam_req_sched, l_msg_scheduled, l_msg_suggested)) request_status_desc, --
                   pk_prof_utils.get_name_signature(i_lang, i_prof, ox.id_prof_req) requested_by, --
                   NULL professional, --
                   NULL id_prof_resp,
                   NULL id_first_nurse_resp,
                   pk_date_utils.dt_chr_tsz(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL, ox.id_institution, NULL),
                                                                             nvl(nvl(ox.dt_begin_tstz,
                                                                                     ox.dt_schedule_tstz),
                                                                                 ox.dt_req_tstz)),
                                            i_prof) event_date, --
                   pk_sysdomain.get_domain(i_lang, i_prof, 'EXAM_REQ_DET.FLG_STATUS', ox.flg_status_req_det, NULL) status, --
                   ox.flg_status_req_det flg_status, --
                   pk_utils.get_institution_name(i_lang, ox.id_institution) location, --
                   ox.id_institution id_location,
                   pk_utils.get_status_string_immediate(i_lang,
                                                        i_prof,
                                                        pk_alert_constant.g_display_type_icon,
                                                        decode(ox.flg_status_req_det,
                                                               pk_exam_constant.g_exam_nr,
                                                               pk_exam_constant.g_exam_tosched,
                                                               ox.flg_status_req_det),
                                                        NULL,
                                                        NULL,
                                                        'EXAM_REQ_DET.FLG_STATUS') status_icon, --
                   pk_date_utils.date_send_tsz(i_lang,
                                               nvl(nvl(ox.dt_begin_tstz, ox.dt_schedule_tstz), ox.dt_req_tstz),
                                               i_prof) order_date, --
                   pk_events.g_event_type_oexam id_future_event_type, --
                   get_id_fet_parent(pk_events.g_event_type_oexam) id_fet_parent,
                   NULL flg_can_approve, --
                   NULL flg_can_reject, --
                   NULL flg_can_cancel, --
                   decode(flg_status_req_det, pk_grid.g_exam_req_sched, pk_alert_constant.g_no, pk_alert_constant.g_yes) flg_can_schedule, --
                   pk_alert_constant.g_no flg_can_admit,
                   pk_alert_constant.g_no flg_ok,
                   'PRESENT_FUTURE' time_state, --
                   NULL dep_clin_serv, --
                   NULL sch_event, --
                   pk_alert_constant.g_no show_report,
                   NULL id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang,
                                               nvl(nvl(ox.dt_begin_tstz, ox.dt_schedule_tstz), ox.dt_req_tstz),
                                               i_prof) dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   pk_sysdomain.get_img(i_lang, 'EXAM_REQ.FLG_REQ_ORIGIN_MODULE', ox.flg_req_origin_module) icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   ox.id_exam,
                   NULL id_dest_professional,
                   ox.id_prof_req id_sched_professional,
                   pk_date_utils.date_send_tsz(i_lang, ox.dt_req_tstz, i_prof) dt_sched_event,
                   pk_date_utils.date_char_tsz(i_lang, ox.dt_req_tstz, i_prof.institution, i_prof.software) dt_sched_event_str,
                   ox.id_prof_req id_created_professional,
                   NULL notes,
                   NULL flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   '' flg_type_of_external_resource,
                   NULL id_external_resource,
                   ox.id_episode id_efect_episode,
                   NULL id_waiting_list,
                   (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                i_prof,
                                                                pk_alert_constant.g_display_type_date_icon,
                                                                pk_consult_req.g_consult_req_stat_reply,
                                                                NULL,
                                                                to_char(nvl(ox.dt_req_tstz,
                                                                            nvl(ox.dt_begin_tstz, ox.dt_schedule_tstz)),
                                                                        pk_alert_constant.g_dt_yyyymmddhh24miss),
                                                                'CONSULT_REQ.FLG_STATUS',
                                                                NULL,
                                                                '0xC86464',
                                                                '0xEBEBC8',
                                                                NULL,
                                                                NULL,
                                                                NULL,
                                                                current_timestamp)
                      FROM dual) status_icon_c,
                   NULL id_epis_hhc_req
              FROM (SELECT DISTINCT gtoe.id_patient,
                                    gtoe.gender,
                                    gtoe.pat_age,
                                    gtoe.num_clin_record,
                                    gtoe.id_episode,
                                    gtoe.id_dept,
                                    gtoe.id_clinical_service,
                                    gtoe.nick_name,
                                    gtoe.id_exam_cat,
                                    gtoe.id_exam,
                                    gtoe.dt_schedule_tstz,
                                    er.notes,
                                    gtoe.dt_begin_tstz,
                                    gtoe.id_exam_req,
                                    gtoe.id_exam_req_det,
                                    gtoe.flg_status_req_det,
                                    gtoe.dt_req_tstz,
                                    er.id_prof_req,
                                    er.id_institution,
                                    er.id_schedule,
                                    gtoe.flg_req_origin_module
                      FROM grid_task_oth_exm gtoe, exam_req er, exam_cat_dcs ecdcs
                     WHERE gtoe.id_institution IN
                           (SELECT column_value
                              FROM TABLE(pk_list.tf_get_all_inst_group(i_prof.institution, g_inst_grp_flg_rel_adt)))
                       AND gtoe.id_exam_req = er.id_exam_req
                       AND gtoe.flg_status_req_det IN
                           (pk_grid.g_exam_req_tosched, pk_grid.g_exam_req_sched, pk_grid.g_exam_req_nr)
                       AND gtoe.id_exam_cat = ecdcs.id_exam_cat
                       AND gtoe.id_patient = i_patient
                       AND EXISTS (SELECT 1
                              FROM prof_dep_clin_serv pdcs
                             WHERE pdcs.id_professional = i_prof.id
                               AND pdcs.flg_status = pk_grid.g_selected
                               AND pdcs.id_institution = i_prof.institution
                               AND pdcs.id_dep_clin_serv = ecdcs.id_dep_clin_serv)) ox
            -------------------  INTERNAMENTO E CIRURGIA  -----------------                                       
            UNION ALL
            SELECT t_grid.id_adm_request id_event,
                   t_grid.id_episode id_episode,
                   t_grid.id_schedule id_schedule,
                   NULL id_exam_req_det,
                   NULL id_exam_req,
                   'ADMISSION_SURGERY' event_type, --
                   'InpatientEpisodeIcon' event_type_icon,
                   pk_admission_request.get_fe_desc(i_lang, i_prof, t_grid.id_episode) event_type_name_title,
                   coalesce(pk_translation.get_translation(i_lang, cs.code_clinical_service),
                            pk_admission_request.get_all_diagnosis_str(i_lang, t_grid.id_episode)) event_type_clinical_service, --                   
                   decode(t_grid.desc_admission,
                          pk_admission_request.get_all_diagnosis_str(i_lang, t_grid.id_episode),
                          '',
                          t_grid.desc_admission) event_type_procedure, --
                   l_msg_no_dependency desc_dependency, --
                   pk_date_utils.dt_chr_tsz(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                          t_grid.id_dest_inst,
                                                                                          NULL),
                                                                             t_grid.dt_admission_tsz),
                                            i_prof) request_date, --
                   schedule_flg_status request_status_desc, --
                   pk_prof_utils.get_name_signature(i_lang, i_prof, t_grid.id_prof_req) requested_by, --
                   pk_prof_utils.get_name_signature(i_lang, i_prof, t_grid.id_dest_prof) professional, --
                   NULL id_prof_resp,
                   NULL id_first_nurse_resp,
                   pk_date_utils.dt_chr_tsz(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                          t_grid.id_dest_inst,
                                                                                          NULL),
                                                                             t_grid.dt_admission_tsz),
                                            i_prof) event_date, --
                   NULL status, --
                   t_grid.flg_status flg_status, --
                   t_grid.inst_adm_name location, --
                   t_grid.id_dest_inst id_location,
                   t_grid.admiss_status status_icon, --
                   pk_date_utils.date_send_tsz(i_lang, t_grid.dt_admission_tsz, i_prof) order_date, --
                   pk_events.g_event_type_adm_cir id_future_event_type, --
                   get_id_fet_parent(pk_events.g_event_type_adm_cir) id_fet_parent,
                   pk_alert_constant.get_no flg_can_approve, --
                   pk_alert_constant.get_no flg_can_reject, --
                   pk_alert_constant.get_no flg_can_cancel, --
                   pk_alert_constant.get_no flg_can_schedule, --
                   pk_alert_constant.g_no flg_can_admit,
                   pk_alert_constant.g_no flg_ok,
                   CASE
                       WHEN t_grid.flg_status IN ('U', 'A', 'S', 'P') THEN
                        'PRESENT_FUTURE'
                       ELSE
                        'PAST'
                   END time_state, --
                   t_grid.id_dep_clin_serv dep_clin_serv, --
                   NULL sch_event, --
                   pk_alert_constant.g_no show_report,
                   NULL id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, t_grid.dt_admission_tsz, i_prof) dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   NULL icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   NULL id_exam,
                   NULL id_dest_professional,
                   t_grid.id_prof_req id_sched_professional,
                   pk_date_utils.date_send_tsz(i_lang, t_grid.dt_admission_tsz, i_prof) dt_sched_event,
                   pk_date_utils.date_char_tsz(i_lang, t_grid.dt_admission_tsz, i_prof.institution, i_prof.software) dt_sched_event_str,
                   NULL id_created_professional,
                   NULL notes,
                   NULL flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   '' flg_type_of_external_resource,
                   NULL id_external_resource,
                   t_grid.id_prev_episode id_efect_episode,
                   NULL id_waiting_list,
                   NULL status_icon_c,
                   NULL id_epis_hhc_req
              FROM TABLE(pk_admission_request.get_ar_episodes(i_lang, i_prof, i_patient, NULL, NULL)) t_grid
             INNER JOIN episode w
                ON t_grid.id_episode = w.id_episode
             INNER JOIN epis_info ei
                ON ei.id_episode = w.id_episode
              LEFT JOIN dep_clin_serv dcs
                ON t_grid.id_dep_clin_serv = dcs.id_dep_clin_serv
              LEFT JOIN clinical_service cs
                ON dcs.id_clinical_service = cs.id_clinical_service
             WHERE t_grid.flg_status NOT IN ('C')
            UNION ALL
            SELECT t_grid.id_adm_request id_event,
                   t_grid.id_episode,
                   t_grid.id_schedule,
                   NULL id_exam_req_det,
                   NULL id_exam_req,
                   'ADMISSION_SURGERY2' event_type, --
                   'SurgeryIcon' event_type_icon,
                   pk_surgery_request.get_fe_desc(i_lang, i_prof, t_grid.id_episode) event_type_name_title,
                   t_grid.desc_admission event_type_clinical_service, --
                   nvl(decode(t_grid.desc_admission,
                              pk_admission_request.get_all_diagnosis_str(i_lang, t_grid.id_episode),
                              '',
                              t_grid.desc_admission),
                       t_grid.surg_proc) event_type_procedure, --
                   l_msg_no_dependency desc_dependency, --
                   t_grid.dt_surgery request_date,
                   t_grid.schedule_flg_status request_status_desc, --
                   pk_prof_utils.get_name_signature(i_lang, i_prof, t_grid.id_prof_req) requested_by, --
                   pk_prof_utils.get_name_signature(i_lang, i_prof, t_grid.id_dest_prof) professional, --                   
                   NULL id_prof_resp,
                   NULL id_first_nurse_resp,
                   pk_date_utils.dt_chr_tsz(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                          t_grid.id_dest_inst,
                                                                                          NULL),
                                                                             t_grid.dt_admission_tsz),
                                            i_prof) event_date, --
                   NULL status, --
                   t_grid.flg_status flg_status, --
                   t_grid.inst_adm_name location, --
                   t_grid.id_dest_inst id_location,
                   t_grid.oris_status status_icon, --
                   pk_date_utils.date_send_tsz(i_lang, t_grid.dt_admission_tsz, i_prof) order_date, --
                   pk_events.g_event_type_adm_cir id_future_event_type, --
                   get_id_fet_parent(pk_events.g_event_type_adm_cir) id_fet_parent,
                   pk_alert_constant.get_no flg_can_approve, --
                   pk_alert_constant.get_no flg_can_reject, --
                   pk_alert_constant.get_no flg_can_cancel, --
                   pk_alert_constant.get_no flg_can_schedule, --
                   pk_admission_request.get_can_admit(i_lang, i_prof, t_grid.id_episode) flg_can_admit,
                   pk_alert_constant.g_no flg_ok,
                   CASE
                       WHEN t_grid.flg_status IN ('U', 'A', 'S', 'P') THEN
                        'PRESENT_FUTURE'
                       ELSE
                        'PAST'
                   END time_state, --
                   t_grid.id_dep_clin_serv dep_clin_serv, --
                   NULL sch_event, --
                   pk_alert_constant.g_no show_report,
                   NULL id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, t_grid.dt_admission_tsz, i_prof) dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   NULL icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   NULL id_exam,
                   NULL id_dest_professional,
                   t_grid.id_prof_req id_sched_professional,
                   pk_date_utils.date_send_tsz(i_lang, t_grid.dt_admission_tsz, i_prof) dt_sched_event,
                   pk_date_utils.date_char_tsz(i_lang, t_grid.dt_admission_tsz, i_prof.institution, i_prof.software) dt_sched_event_str,
                   NULL id_created_professional,
                   NULL notes,
                   NULL flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   '' flg_type_of_external_resource,
                   NULL id_external_resource,
                   t_grid.id_prev_episode id_efect_episode,
                   t_grid.id_waiting_list,
                   NULL status_icon_c,
                   NULL id_epis_hhc_req
              FROM TABLE(pk_surgery_request.get_sr_episodes(i_lang, i_prof, i_patient, NULL, NULL)) t_grid
             WHERE t_grid.flg_status IN ('A', 'S', 'P')
            -----LAB EVENT SCHEDULE
            UNION ALL
            SELECT t.id_event, --
                   t.id_episode,
                   t.id_schedule,
                   t.id_exam_req_det,
                   t.id_exam_req,
                   t.event_type, --
                   t.event_type_icon, --
                   t.event_type_name_title, --
                   t.event_type_clinical_service, --
                   t.event_type_procedure, --
                   t.desc_dependency, --
                   t.request_date, --
                   t.request_status_desc, --
                   t.requested_by, --
                   t.professional, --
                   t.id_prof_resp,
                   t.id_first_nurse_resp,
                   t.event_date, --
                   t.status, --
                   t.flg_status, --
                   t.location,
                   t.id_location, --
                   t.status_icon, --
                   t.order_date, --
                   t.id_future_event_type, --
                   t.id_fet_parent, --
                   t.flg_can_approve, --
                   t.flg_can_reject, --
                   t.flg_can_cancel, --
                   t.flg_can_schedule, --
                   t.flg_can_admit,
                   t.flg_ok,
                   t.time_state, --
                   NULL                            dep_clin_serv, --
                   NULL                            sch_event, --
                   t.show_report,
                   t.id_software,
                   t.reopen_episode,
                   t.dt_sched,
                   t.dt_req_begin,
                   t.dt_req_end,
                   t.icon_name,
                   t.registered,
                   t.approval_prof,
                   NULL                            request_reason,
                   t.id_exam,
                   t.id_dest_professional,
                   t.id_sched_professional,
                   t.dt_sched_event,
                   t.dt_sched_event_str,
                   t.id_created_professional,
                   t.notes,
                   t.flg_contact_type,
                   t.id_content,
                   t.id_workflow,
                   t.id_complaint,
                   t.desc_complaint,
                   t.flg_type_of_external_resource,
                   t.id_external_resource,
                   t.id_efect_episode,
                   NULL                            id_waiting_list,
                   NULL                            status_icon_c,
                   NULL                            id_epis_hhc_req
              FROM (SELECT *
                      FROM TABLE(get_lab_events_pl(i_lang, i_prof, i_patient, pk_events.g_origin_fe))) t
            --------------- REFERRAL ---------------------
            UNION ALL
            SELECT r.id_external_request id_event,
                   r.id_episode id_episode,
                   NULL id_schedule,
                   NULL id_exam_req_det,
                   NULL id_exam_req,
                   'REFERRAL' event_type,
                   pk_events.get_event_type_icon(pk_events.g_event_type_referral) event_type_icon,
                   pk_events.get_event_type_title(i_lang, pk_events.g_event_type_referral) event_type_name_title,
                   decode(r.id_workflow,
                          pk_ref_constant.g_wf_srv_srv,
                          -- if is internal workflow, than shows the desc of clinical service
                          pk_translation.get_translation(i_lang,
                                                         'CLINICAL_SERVICE.CODE_CLINICAL_SERVICE.' ||
                                                         (SELECT cs.id_clinical_service
                                                            FROM dep_clin_serv dcs
                                                            JOIN clinical_service cs
                                                              ON (cs.id_clinical_service = dcs.id_clinical_service)
                                                           WHERE dcs.id_dep_clin_serv = r.id_dep_clin_serv)),
                          -- else  (other than internal workflow)
                          pk_translation.get_translation(i_lang, 'P1_SPECIALITY.CODE_SPECIALITY.' || r.id_speciality)) event_type_clinical_service,
                   NULL event_type_procedure, --
                   l_msg_no_dependency desc_dependency,
                   NULL request_date,
                   NULL request_status_desc,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, r.id_prof_requested) requested_by,
                   nvl(pk_prof_utils.get_name_signature(i_lang,
                                                        i_prof,
                                                        (SELECT pk_ref_dest_phy.get_suggested_physician(i_lang,
                                                                                                        i_prof,
                                                                                                        r.id_external_request)
                                                           FROM dual)),
                       l_future_events_t017) professional,
                   NULL id_prof_resp,
                   NULL id_first_nurse_resp,
                   NULL event_date,
                   pk_sysdomain.get_domain('P1_EXTERNAL_REQUEST.FLG_STATUS', r.flg_status, i_lang) status,
                   r.flg_status || r.decision_urg_level flg_status, -- needed to order cursor
                   pk_utils.get_institution_name(i_lang, r.id_inst_dest) location,
                   r.id_inst_dest id_location,
                   pk_utils.get_status_string_immediate(i_lang,
                                                        i_prof,
                                                        pk_alert_constant.g_display_type_date_icon, -- i_display_type
                                                        to_char(nvl(r.decision_urg_level,
                                                                    pk_ref_constant.g_decision_urg_level_normal)), -- i_flg_state
                                                        NULL,
                                                        to_char(r.dt_status_tstz,
                                                                pk_alert_constant.g_dt_yyyymmddhh24miss), -- i_value_date
                                                        'P1_TOSCHEDULE_GRID_ICON.1', -- i_value_icon
                                                        NULL,
                                                        NULL, -- i_back_color  
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        current_timestamp) status_icon,
                   pk_date_utils.date_send_tsz(i_lang, r.dt_status_tstz, i_prof) order_date, -- needed to order cursor
                   pk_events.g_event_type_referral id_future_event_type,
                   get_id_fet_parent(pk_events.g_event_type_referral) id_fet_parent,
                   pk_alert_constant.get_no flg_can_approve,
                   pk_alert_constant.get_no flg_can_reject,
                   -- flg_can_cancel referral
                   pk_ref_core.can_cancel(i_lang,
                                          i_prof,
                                          r.id_external_request,
                                          r.flg_status,
                                          nvl(r.id_workflow, pk_ref_constant.g_wf_pcc_hosp),
                                          l_id_profile_template,
                                          (SELECT pk_ref_core.get_prof_func(i_lang, i_prof, r.id_dep_clin_serv)
                                             FROM dual),
                                          l_id_category,
                                          r.id_patient,
                                          r.id_inst_orig,
                                          r.id_inst_dest,
                                          r.id_dep_clin_serv,
                                          r.id_speciality,
                                          r.flg_type,
                                          r.id_prof_requested,
                                          r.id_prof_redirected,
                                          r.id_prof_status,
                                          r.id_external_sys,
                                          r.decision_urg_level) flg_can_cancel,
                   -- flg_can_schedule
                   pk_ref_core.can_schedule(i_lang,
                                            i_prof,
                                            r.id_external_request,
                                            r.flg_status,
                                            nvl(r.id_workflow, pk_ref_constant.g_wf_pcc_hosp),
                                            l_id_profile_template,
                                            (SELECT pk_ref_core.get_prof_func(i_lang, i_prof, r.id_dep_clin_serv)
                                               FROM dual),
                                            l_id_category,
                                            r.id_patient,
                                            r.id_inst_orig,
                                            r.id_inst_dest,
                                            r.id_dep_clin_serv,
                                            r.id_speciality,
                                            r.flg_type,
                                            r.id_prof_requested,
                                            r.id_prof_redirected,
                                            r.id_prof_status,
                                            r.id_external_sys,
                                            r.decision_urg_level) flg_can_schedule,
                   pk_alert_constant.g_no flg_can_admit,
                   pk_alert_constant.g_no flg_ok,
                   'PRESENT_FUTURE' time_state,
                   r.id_dep_clin_serv dep_clin_serv,
                   NULL sch_event,
                   pk_alert_constant.g_no show_report,
                   NULL id_software,
                   pk_alert_constant.g_no reopen_episode,
                   NULL dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   NULL icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   NULL id_exam,
                   (SELECT pk_ref_dest_phy.get_suggested_physician(i_lang, i_prof, r.id_external_request)
                      FROM dual) id_dest_professional, -- professional id to send to scheduler
                   NULL id_sched_professional,
                   NULL dt_sched_event,
                   NULL dt_sched_event_str,
                   NULL id_created_professional,
                   NULL notes,
                   r.flg_type flg_contact_type, -- referral type
                   pk_ref_core.get_content(i_lang,
                                           i_prof,
                                           r.id_dep_clin_serv,
                                           (SELECT pk_ref_dest_phy.get_suggested_physician(i_lang,
                                                                                           i_prof,
                                                                                           r.id_external_request)
                                              FROM dual)) id_content,
                   r.id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   g_resourcetype flg_type_of_external_resource,
                   (SELECT pk_ref_dest_phy.get_suggested_physician(i_lang, i_prof, r.id_external_request)
                      FROM dual) id_external_resource,
                   r.id_episode id_efect_episode,
                   NULL id_waiting_list,
                   (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                i_prof,
                                                                pk_alert_constant.g_display_type_date_icon, -- i_display_type
                                                                decode(r.flg_status,
                                                                       pk_ref_constant.g_p1_status_a,
                                                                       to_char(nvl(r.decision_urg_level,
                                                                                   pk_ref_constant.g_decision_urg_level_normal)),
                                                                       r.flg_status), -- i_flg_state
                                                                NULL,
                                                                to_char(r.dt_status_tstz,
                                                                        pk_alert_constant.g_dt_yyyymmddhh24miss), -- i_value_date
                                                                decode(r.flg_status,
                                                                       pk_ref_constant.g_p1_status_a,
                                                                       'P1_TOSCHEDULE_GRID_ICON.1',
                                                                       'P1_EXTERNAL_REQUEST.FLG_STATUS'), -- i_value_icon (depends on referral status)
                                                                NULL,
                                                                '0xC86464', -- i_back_color
                                                                '0xEBEBC8', -- i_icon_color
                                                                NULL,
                                                                NULL,
                                                                NULL,
                                                                current_timestamp)
                      FROM dual) status_icon_c,
                   NULL id_epis_hhc_req
              FROM (SELECT p.id_external_request,
                           p.flg_status,
                           p.id_workflow,
                           p.id_patient,
                           p.id_speciality,
                           p.id_episode,
                           p.id_inst_orig,
                           p.id_inst_dest,
                           p.id_dep_clin_serv,
                           p.dt_status_tstz,
                           p.flg_type,
                           p.id_prof_requested,
                           p.id_prof_redirected,
                           p.id_prof_status,
                           p.id_external_sys,
                           p.decision_urg_level
                      FROM p1_external_request p
                     WHERE p.flg_status = pk_ref_constant.g_p1_status_a
                       AND EXISTS (SELECT 1
                              FROM prof_dep_clin_serv pdcs
                             WHERE pdcs.id_professional = i_prof.id
                               AND pdcs.flg_status = pk_grid.g_selected
                               AND pdcs.id_institution = i_prof.institution
                               AND pdcs.id_dep_clin_serv = p.id_dep_clin_serv)
                       AND p.id_inst_dest = i_prof.institution
                       AND p.id_patient = i_patient) r;
    
        LOOP
            FETCH c_result
                INTO v_tab;
            EXIT WHEN c_result%NOTFOUND;
            PIPE ROW(v_tab);
        END LOOP;
    
        RETURN;
    END get_patient_future_events_pl;

    /********************************************************************************************
    * result patient future events
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_patient            patient identifier    
    * @param      o_events             events
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/05
    **********************************************************************************************/
    FUNCTION get_patient_future_events
    (
        i_lang    IN language.id_language%TYPE,
        i_prof    IN profissional,
        i_patient IN consult_req.id_patient%TYPE,
        i_episode IN consult_req.id_episode%TYPE,
        i_report  IN VARCHAR2,
        o_events  OUT pk_types.cursor_type,
        o_create  OUT VARCHAR2,
        o_error   OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_PATIENT_FUTURE_EVENTS';
        l_na        sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'N/A');
        l_date_sep  sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'FUTURE_EVENTS_T073');
        l_episode   table_number := table_number();
        l_count     NUMBER;
    BEGIN
    
        -- suggestion from perfomrance team
        IF i_patient IS NULL
           AND i_episode IS NULL
        THEN
            pk_types.open_cursor_if_closed(o_events);
            RETURN TRUE;
        END IF;
        -- *******************************************
    
        IF (pk_patient.get_pat_has_inactive(i_lang, i_prof, i_patient) = pk_alert_constant.g_yes)
        THEN
            o_create := pk_alert_constant.g_no;
        ELSE
            o_create := pk_alert_constant.g_yes;
        END IF;
    
        --find list of episodes
        IF i_episode IS NOT NULL
           AND i_report = g_report_v
        THEN
            BEGIN
                SELECT e.id_episode
                  BULK COLLECT
                  INTO l_episode
                  FROM episode e
                 WHERE e.id_visit = (SELECT id_visit
                                       FROM episode epis
                                      WHERE epis.id_episode = i_episode);
            EXCEPTION
                WHEN OTHERS THEN
                    l_episode := table_number();
            END;
        ELSIF i_episode IS NOT NULL
              AND i_report = g_report_e
        THEN
            l_episode.extend(1);
            l_episode(l_episode.count) := i_episode;
        ELSE
            l_episode := table_number();
        END IF;
    
        IF l_episode IS NULL
        THEN
            l_count := 0;
        ELSE
            l_count := l_episode.count;
        END IF;
    
        g_error := 'CALL GET_PATIENT_FUTURE_EVENTS';
        OPEN o_events FOR
            WITH patients_pl AS
             (SELECT *
                FROM TABLE(get_patient_future_events_pl(i_lang, i_prof, i_patient)))
            SELECT *
              FROM (SELECT /*+opt_estimate (table t rows=0.000001)*/
                     t.id_event id_event,
                     coalesce(cs.id_episode, t.id_efect_episode, t.id_episode) id_episode,
                     t.id_schedule,
                     t.id_exam_req_det,
                     t.id_exam_req,
                     t.event_type,
                     t.event_type_icon,
                     t.event_type_name_title,
                     t.event_type_clinical_service,
                     t.event_type_procedure,
                     nvl2(ce.rank, 'ExtendIcon', '') dependency_icon,
                     ce.rank dependency_nr,
                     nvl(pk_events.get_dependencies_str(i_lang, i_prof, ce.id_combination_events), t.desc_dependency) desc_dependency,
                     nvl2(ce.id_combination_spec,
                          nvl2(cs.dt_suggest_end,
                               pk_date_utils.dt_chr(i_lang,
                                                    pk_date_utils.trunc_insttimezone(profissional(NULL, t.id_location, NULL),
                                                                                     cs.dt_suggest_begin),
                                                    i_prof) || g_space || l_date_sep || g_space ||
                               pk_date_utils.dt_chr(i_lang,
                                                    pk_date_utils.trunc_insttimezone(profissional(NULL, t.id_location, NULL),
                                                                                     cs.dt_suggest_end),
                                                    i_prof),
                               pk_date_utils.dt_chr(i_lang,
                                                    pk_date_utils.trunc_insttimezone(profissional(NULL, t.id_location, NULL),
                                                                                     cs.dt_suggest_begin),
                                                    i_prof)),
                          t.request_date) request_date,
                     t.request_status_desc,
                     t.requested_by,
                     t.professional,
                     t.event_date,
                     t.status,
                     t.flg_status,
                     t.location,
                     t.id_location,
                     t.status_icon,
                     nvl2(ce.id_combination_spec,
                          pk_date_utils.date_send_tsz(i_lang, cs.dt_suggest_begin, i_prof),
                          t.order_date) order_date,
                     t.id_future_event_type id_future_event_type,
                     t.id_fet_parent,
                     t.flg_can_approve,
                     t.flg_can_reject,
                     t.flg_can_cancel,
                     t.flg_can_schedule,
                     t.flg_can_admit,
                     t.flg_ok,
                     t.time_state,
                     t.dep_clin_serv id_dep_clin_serv,
                     to_number(t.sch_event) sch_event,
                     t.icon_name,
                     t.registered,
                     t.approval_prof,
                     t.request_reason,
                     t.id_exam,
                     t.id_dest_professional,
                     nvl2(ce.id_combination_spec,
                          pk_date_utils.date_send_tsz(i_lang, cs.dt_suggest_begin, i_prof),
                          t.dt_req_begin) dt_req_begin,
                     nvl2(ce.id_combination_spec,
                          pk_date_utils.date_send_tsz(i_lang, cs.dt_suggest_end, i_prof),
                          t.dt_req_end) dt_req_end,
                     ce.id_combination_events,
                     ce.id_combination_spec id_combination_spec,
                     0 comb_count,
                     get_dependencies_info(i_lang, ce.id_combination_events, 1) list_id,
                     get_dependencies_info(i_lang, ce.id_combination_events, 2) list_min_lag,
                     get_dependencies_info(i_lang, ce.id_combination_events, 3) list_max_lag,
                     get_dependencies_info(i_lang, ce.id_combination_events, 4) list_unit_desc,
                     get_dependencies_info(i_lang, ce.id_combination_events, 5) list_unit_tag,
                     cs.flg_single_visit flg_single_visit,
                     pk_sysdomain.get_domain('COMBINATION_SPEC.FLG_SINGLE_VISIT', cs.flg_single_visit, i_lang) desc_single_visit,
                     decode(t.id_sched_professional,
                            '-1',
                            NULL,
                            pk_prof_utils.get_name_signature(i_lang, i_prof, t.id_sched_professional)) name_sched_professional,
                     pk_prof_utils.get_spec_signature(i_lang,
                                                      i_prof,
                                                      t.id_sched_professional,
                                                      to_date(t.dt_sched_event, pk_alert_constant.g_dt_yyyymmddhh24miss),
                                                      NULL) spec_sched_professional,
                     t.dt_sched_event dt_sched_event,
                     t.dt_sched_event_str dt_sched_event_str,
                     t.id_created_professional id_created_professional,
                     t.notes notes,
                     t.flg_contact_type,
                     (SELECT fet.flg_type
                        FROM future_event_type fet
                       WHERE fet.id_future_event_type = t.id_future_event_type
                         AND fet.action IN ('APPOINTMENT_MEDICAL',
                                            'APPOINTMENT_NURSING',
                                            'APPOINTMENT_NUTRITION',
                                            'APPOINTMENT_PSYCHOLOGY',
                                            'APPOINTMENT_REHABILITATION',
                                            'APPOINTMENT_SOCIAL_WORKER',
                                            'REFERRAL_APPOINTMENT',
                                            'REQUEST_APPOINTMENT')) flg_type,
                     t.id_content,
                     t.id_workflow,
                     t.id_complaint,
                     t.desc_complaint,
                     t.flg_type_of_external_resource,
                     t.id_external_resource,
                     t.id_waiting_list
                      FROM patients_pl t, combination_events ce, combination_spec cs
                     WHERE ce.id_future_event_type(+) = t.id_future_event_type
                       AND ce.id_event(+) = decode(event_type,
                                                   'IMAGING_EXAMS',
                                                   id_exam_req_det,
                                                   'OTHER_EXAMS',
                                                   id_exam_req_det,
                                                   'LAB',
                                                   id_exam_req_det,
                                                   'SCHEDULED_EPISODES',
                                                   t.id_episode,
                                                   'SCHEDULED_EPISODES_2',
                                                   nvl(t.id_event, t.id_episode),
                                                   'CURRENT_EPISODES',
                                                   t.id_episode,
                                                   'SCHEDULED_EPISODES_3',
                                                   t.id_episode,
                                                   'FUTURE_EVENTS',
                                                   t.id_event,
                                                   t.id_event)
                       AND ce.flg_status(+) = g_flg_comb_state_active
                       AND cs.id_combination_spec(+) = ce.id_combination_spec
                       AND cs.flg_status(+) = g_flg_comb_state_active
                    UNION ALL
                    SELECT NULL id_event,
                           cs.id_episode id_episode,
                           NULL id_schedule,
                           NULL id_exam_req_det,
                           NULL id_exam_req,
                           'COMBINATION' event_type,
                           'CombinationIcon' event_type_icon,
                           cs.comb_name event_type_name_title,
                           pk_events.count_combination_events(i_lang, cs.id_combination_spec, 'S') event_type_clinical_service,
                           NULL event_type_procedure,
                           NULL dependency_icon,
                           0 dependency_nr,
                           l_na desc_dependency,
                           nvl2(cs.dt_suggest_end,
                                pk_date_utils.dt_chr(i_lang,
                                                     pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                   cs.id_inst_last_update,
                                                                                                   NULL),
                                                                                      cs.dt_suggest_begin),
                                                     i_prof) || g_space || l_date_sep || g_space ||
                                pk_date_utils.dt_chr(i_lang,
                                                     pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                   cs.id_inst_last_update,
                                                                                                   NULL),
                                                                                      cs.dt_suggest_end),
                                                     i_prof),
                                pk_date_utils.dt_chr(i_lang,
                                                     pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                   cs.id_inst_last_update,
                                                                                                   NULL),
                                                                                      cs.dt_suggest_begin),
                                                     i_prof)) request_date,
                           NULL request_status_desc,
                           NULL requested_by,
                           NULL professional,
                           NULL event_date,
                           NULL status,
                           cs.flg_status flg_status,
                           NULL location,
                           NULL id_location,
                           NULL status_icon,
                           pk_date_utils.date_send_tsz(i_lang, cs.dt_suggest_begin, i_prof) order_date,
                           NULL id_future_event_type,
                           NULL id_fet_parent,
                           NULL flg_can_approve,
                           NULL flg_can_reject,
                           NULL flg_can_cancel,
                           NULL flg_can_schedule,
                           NULL flg_ok,
                           NULL flg_can_admit,
                           'PRESENT_FUTURE' time_state,
                           NULL id_dep_clin_serv,
                           NULL sch_event,
                           NULL icon_name,
                           NULL registered,
                           NULL approval_prof,
                           NULL request_reason,
                           NULL id_exam,
                           NULL id_dest_professional,
                           pk_date_utils.date_send_tsz(i_lang, cs.dt_suggest_begin, i_prof) dt_req_begin,
                           pk_date_utils.date_send_tsz(i_lang, cs.dt_suggest_end, i_prof) dt_req_end,
                           NULL id_combination_events,
                           cs.id_combination_spec id_combination_spec,
                           to_number(pk_events.count_combination_events(i_lang, cs.id_combination_spec, 'N')) comb_count,
                           NULL list_id,
                           NULL list_min_lag,
                           NULL list_max_lag,
                           NULL list_unit_desc,
                           NULL list_unit_tag,
                           cs.flg_single_visit flg_single_visit,
                           pk_sysdomain.get_domain('COMBINATION_SPEC.FLG_SINGLE_VISIT', cs.flg_single_visit, i_lang) desc_single_visit,
                           pk_prof_utils.get_name_signature(i_lang, i_prof, cs.id_prof_last_update) name_sched_professional,
                           pk_prof_utils.get_spec_signature(i_lang,
                                                            i_prof,
                                                            cs.id_prof_last_update,
                                                            cs.dt_last_update,
                                                            NULL) spec_sched_professional,
                           pk_date_utils.date_send_tsz(i_lang, cs.dt_last_update, i_prof) dt_sched_event,
                           pk_date_utils.date_char_tsz(i_lang, cs.dt_last_update, i_prof.institution, i_prof.software) dt_sched_event_str,
                           NULL id_created_professional,
                           NULL notes,
                           NULL flg_contact_type,
                           NULL flg_type,
                           NULL id_content,
                           NULL id_workflow,
                           NULL id_complaint,
                           NULL desc_complaint,
                           '' flg_type_of_external_resource,
                           NULL id_external_resource,
                           NULL id_waiting_list
                      FROM combination_spec cs
                     WHERE cs.id_patient = i_patient
                       AND cs.id_combination_spec IN
                           (SELECT /*+opt_estimate (table t1 rows=0.000001)*/
                            DISTINCT ce.id_combination_spec
                              FROM patients_pl t1, combination_events ce
                             WHERE ce.id_future_event_type = t1.id_future_event_type
                               AND t1.flg_status != pk_alert_constant.g_cancelled
                               AND ce.id_event = decode(t1.event_type,
                                                        'IMAGING_EXAMS',
                                                        t1.id_exam_req_det,
                                                        'OTHER_EXAMS',
                                                        t1.id_exam_req_det,
                                                        'SCHEDULED_EPISODES',
                                                        t1.id_episode,
                                                        'SCHEDULED_EPISODES_2',
                                                        t1.id_episode,
                                                        'CURRENT_EPISODES',
                                                        t1.id_episode,
                                                        'SCHEDULED_EPISODES_3',
                                                        t1.id_episode,
                                                        'FUTURE_EVENTS',
                                                        t1.id_event,
                                                        t1.id_event)
                               AND ce.flg_status = g_flg_comb_state_active)
                       AND cs.flg_status = g_flg_comb_state_active) k
             WHERE (l_count = 0 OR k.id_episode IN (SELECT /*+opt_estimate (table d rows=0.00000000001)*/
                                                     column_value
                                                      FROM TABLE(l_episode) d))
             ORDER BY id_combination_spec,
                      dependency_nr,
                      flg_status,
                      decode(event_type,
                             'COMBINATION',
                             0,
                             'FUTURE_EVENTS',
                             1,
                             'SCHEDULED_EPISODES',
                             1,
                             'SCHEDULED_EPISODES_2',
                             1,
                             'SCHEDULED_EPISODES_3',
                             1,
                             'IMAGING_EXAMS',
                             2,
                             'OTHER_EXAMS',
                             2,
                             'ADMISSION_SURGERY',
                             1,
                             'ADMISSION_SURGERY_2',
                             1,
                             'CURRENT_ENCOUNTERS',
                             2,
                             'CURRENT_EPISODES',
                             2,
                             'PAST_ENCOUNTERS',
                             3,
                             'PREVIOUS_EPISODES',
                             3,
                             'EHR_EVENTS',
                             4),
                      order_date;
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_events);
            RETURN FALSE;
    END get_patient_future_events;

    /********************************************************************************************
    * result patient events
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_patient            patient identifier    
    * @param      o_events             events
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/05
    **********************************************************************************************/
    FUNCTION get_patient_events
    (
        i_lang    IN language.id_language%TYPE,
        i_prof    IN profissional,
        i_patient IN consult_req.id_patient%TYPE,
        o_events  OUT pk_types.cursor_type,
        o_create  OUT VARCHAR2,
        o_error   OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name VARCHAR2(60 CHAR) := 'GET_PATIENT_EVENTS';
    
        l_na       sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'N/A');
        l_date_sep sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'FUTURE_EVENTS_T073');
    
        l_hand_off_type       sys_config.value%TYPE;
        l_show_only_epis_resp sys_config.value%TYPE := pk_sysconfig.get_config('GRID_ONLY_SHOW_EPISODE_RESPONSIBLE',
                                                                               i_prof);
    
        l_grp_insts table_number;
    
        l_access_bet_inst sys_config.value%TYPE := pk_sysconfig.get_config('ACCESS_EPISODES_BETWEEN_INSTITUTIONS',
                                                                           i_prof);
    
    BEGIN
        g_error := 'GET INSTITUTIONS GROUP';
    
        -- suggestion from performance team
        IF i_patient IS NULL
        THEN
            pk_types.open_cursor_if_closed(o_events);
            RETURN TRUE;
        END IF;
        -- ****************************
    
        pk_hand_off_core.get_hand_off_type(i_lang, i_prof, l_hand_off_type);
    
        IF (pk_patient.get_pat_has_inactive(i_lang, i_prof, i_patient) = pk_alert_constant.g_yes)
        THEN
            o_create := pk_alert_constant.g_no;
        ELSE
            o_create := pk_alert_constant.g_yes;
        END IF;
    
        g_error := 'GET INSTITUTIONS GROUP. pk_list.tf_get_all_inst_group';
        SELECT column_value
          BULK COLLECT
          INTO l_grp_insts
          FROM TABLE(pk_list.tf_get_all_inst_group(i_prof.institution, g_inst_grp_flg_rel_adt));
    
        --query principal
        g_error := 'CALL GET_PATIENT_EVENTS';
        OPEN o_events FOR
            SELECT *
              FROM (SELECT /*+opt_estimate (table t rows=0.000001)*/
                     t.id_event id_event,
                     t.id_episode,
                     t.id_schedule,
                     t.id_exam_req_det,
                     t.id_exam_req,
                     t.event_type,
                     t.event_type_icon,
                     t.event_type_name_title,
                     t.event_type_clinical_service,
                     t.event_type_procedure,
                     nvl2(ce.rank, 'ExtendIcon', '') dependency_icon,
                     ce.rank dependency_nr,
                     nvl(pk_events.get_dependencies_str(i_lang, i_prof, ce.id_combination_events), t.desc_dependency) desc_dependency,
                     nvl2(ce.id_combination_spec,
                          nvl2(cs.dt_suggest_end,
                               pk_date_utils.dt_chr(i_lang,
                                                    pk_date_utils.trunc_insttimezone(profissional(NULL, t.id_location, NULL),
                                                                                     cs.dt_suggest_begin),
                                                    i_prof) || g_space || l_date_sep || g_space ||
                               pk_date_utils.dt_chr(i_lang,
                                                    pk_date_utils.trunc_insttimezone(profissional(NULL, t.id_location, NULL),
                                                                                     cs.dt_suggest_end),
                                                    i_prof),
                               pk_date_utils.dt_chr(i_lang,
                                                    pk_date_utils.trunc_insttimezone(profissional(NULL, t.id_location, NULL),
                                                                                     cs.dt_suggest_begin),
                                                    i_prof)),
                          t.request_date) request_date,
                     t.request_status_desc,
                     t.requested_by,
                     t.professional,
                     (SELECT pk_hand_off_core.get_responsibles_str(i_lang,
                                                                   i_prof,
                                                                   pk_alert_constant.g_cat_type_doc,
                                                                   t.id_episode,
                                                                   t.id_prof_resp,
                                                                   l_hand_off_type,
                                                                   'G',
                                                                   l_show_only_epis_resp)
                        FROM dual) name_prof,
                     pk_prof_utils.get_nickname(i_lang, t.id_first_nurse_resp) name_nurse,
                     (SELECT pk_hand_off_core.get_responsibles_str(i_lang,
                                                                   i_prof,
                                                                   pk_alert_constant.g_cat_type_doc,
                                                                   t.id_episode,
                                                                   t.id_prof_resp,
                                                                   l_hand_off_type,
                                                                   'T')
                        FROM dual) name_prof_tooltip,
                     (SELECT pk_hand_off_core.get_responsibles_str(i_lang,
                                                                   i_prof,
                                                                   pk_alert_constant.g_cat_type_nurse,
                                                                   t.id_episode,
                                                                   t.id_first_nurse_resp,
                                                                   l_hand_off_type,
                                                                   'T')
                        FROM dual) name_nurse_tooltip,
                     t.event_date,
                     t.status,
                     t.flg_status,
                     t.location,
                     t.id_location,
                     t.status_icon,
                     nvl2(ce.id_combination_spec,
                          pk_date_utils.date_send_tsz(i_lang, cs.dt_suggest_begin, i_prof),
                          t.order_date) order_date,
                     t.id_future_event_type id_future_event_type,
                     t.id_fet_parent,
                     t.flg_can_approve,
                     t.flg_can_reject,
                     t.flg_can_cancel,
                     t.flg_can_schedule,
                     t.flg_can_admit,
                     CASE
                          WHEN i_prof.software = pk_alert_constant.g_soft_pharmacy THEN
                           CASE
                               WHEN t.id_location IN (SELECT column_value
                                                        FROM TABLE(l_grp_insts))
                                    AND t.id_location <> i_prof.institution
                                    AND l_access_bet_inst = pk_alert_constant.g_no THEN
                                pk_alert_constant.g_no
                               ELSE
                                pk_alert_constant.g_yes
                           END
                          WHEN i_prof.software IN (pk_alert_constant.g_soft_social,
                                                   pk_alert_constant.g_soft_nutritionist,
                                                   pk_alert_constant.g_soft_psychologist)
                               AND (t.id_software IN (i_prof.software,
                                                      pk_alert_constant.g_soft_oris,
                                                      pk_alert_constant.g_soft_edis,
                                                      pk_alert_constant.g_soft_inpatient,
                                                      pk_alert_constant.g_soft_outpatient,
                                                      pk_alert_constant.g_soft_private_practice)) THEN
                           t.flg_ok
                          WHEN i_prof.software = pk_alert_constant.g_soft_adt
                               AND (t.id_software IN (pk_alert_constant.g_soft_oris,
                                                      pk_alert_constant.g_soft_edis,
                                                      pk_alert_constant.g_soft_inpatient,
                                                      pk_alert_constant.g_soft_outpatient,
                                                      pk_alert_constant.g_soft_private_practice,
                                                      pk_alert_constant.g_soft_social,
                                                      pk_alert_constant.g_soft_nutritionist,
                                                      pk_alert_constant.g_soft_psychologist,
                                                      pk_alert_constant.g_soft_act_therapist,
                                                      pk_alert_constant.g_soft_resptherap,
                                                      pk_alert_constant.g_soft_rehab)) THEN
                           t.flg_ok
                          ELSE
                           CASE
                               WHEN i_prof.software IN
                                    (pk_alert_constant.g_soft_private_practice, pk_alert_constant.g_soft_primary_care)
                                    AND (t.id_software IN (pk_alert_constant.g_soft_labtech,
                                                           pk_alert_constant.g_soft_imgtech,
                                                           pk_alert_constant.g_soft_extech)) THEN
                                t.flg_ok
                               WHEN i_prof.software IN (pk_alert_constant.g_soft_outpatient)
                                    AND (t.id_software IN (pk_alert_constant.g_soft_labtech,
                                                           pk_alert_constant.g_soft_imgtech,
                                                           pk_alert_constant.g_soft_extech)) THEN
                                decode(t.id_location, i_prof.institution, t.flg_ok, pk_alert_constant.g_no)
                               ELSE
                                decode(t.show_report,
                                       pk_alert_constant.g_yes,
                                       pk_alert_constant.g_no,
                                       decode(t.id_software, i_prof.software, t.flg_ok, pk_alert_constant.g_no))
                           END
                      END flg_ok,
                     t.time_state,
                     t.dep_clin_serv id_dep_clin_serv,
                     t.sch_event,
                     t.icon_name,
                     t.registered,
                     t.approval_prof,
                     t.request_reason,
                     t.id_exam,
                     t.id_dest_professional,
                     nvl2(ce.id_combination_spec,
                          pk_date_utils.date_send_tsz(i_lang, cs.dt_suggest_begin, i_prof),
                          t.dt_req_begin) dt_req_begin,
                     nvl2(ce.id_combination_spec,
                          pk_date_utils.date_send_tsz(i_lang, cs.dt_suggest_end, i_prof),
                          t.dt_req_end) dt_req_end,
                     ce.id_combination_events,
                     ce.id_combination_spec id_combination_spec,
                     t.show_report,
                     t.id_software,
                     t.dt_sched,
                     0 comb_count,
                     get_dependencies_info(i_lang, ce.id_combination_events, 1) list_id,
                     get_dependencies_info(i_lang, ce.id_combination_events, 2) list_min_lag,
                     get_dependencies_info(i_lang, ce.id_combination_events, 3) list_max_lag,
                     get_dependencies_info(i_lang, ce.id_combination_events, 4) list_unit_desc,
                     get_dependencies_info(i_lang, ce.id_combination_events, 5) list_unit_tag,
                     cs.flg_single_visit flg_single_visit,
                     t.id_created_professional id_created_professional,
                     t.notes notes,
                     t.flg_contact_type,
                     t.id_content,
                     t.id_workflow,
                     t.id_complaint,
                     t.desc_complaint,
                     t.reopen_episode,
                     t.id_external_resource,
                     t.flg_type_of_external_resource,
                     t.id_waiting_list,
                     t.id_epis_hhc_req
                      FROM (SELECT *
                              FROM TABLE(get_patient_events_pl(i_lang, i_prof, i_patient))) t,
                           combination_events ce,
                           combination_spec cs
                     WHERE ce.id_future_event_type(+) = t.id_future_event_type
                       AND ce.id_event(+) = decode(event_type,
                                                   'IMAGING_EXAMS',
                                                   id_exam_req_det,
                                                   'OTHER_EXAMS',
                                                   id_exam_req_det,
                                                   'SCHEDULED_EPISODES',
                                                   t.id_episode,
                                                   'SCHEDULED_EPISODES_2',
                                                   nvl(t.id_event, t.id_episode),
                                                   'CURRENT_EPISODES',
                                                   t.id_episode,
                                                   'SCHEDULED_EPISODES_3',
                                                   t.id_episode,
                                                   'FUTURE_EVENTS',
                                                   t.id_event,
                                                   t.id_event)
                       AND ce.flg_status(+) = g_flg_comb_state_active
                       AND cs.id_combination_spec(+) = ce.id_combination_spec
                       AND cs.flg_status(+) = g_flg_comb_state_active
                    UNION ALL
                    SELECT NULL id_event,
                           NULL id_episode,
                           NULL id_schedule,
                           NULL id_exam_req_det,
                           NULL id_exam_req,
                           'COMBINATION' event_type,
                           'CombinationIcon' event_type_icon,
                           cs.comb_name event_type_name_title,
                           pk_events.count_combination_events(i_lang, cs.id_combination_spec, 'S') event_type_clinical_service,
                           NULL event_type_procedure, --
                           NULL dependency_icon,
                           0 dependency_nr,
                           l_na desc_dependency,
                           nvl2(cs.dt_suggest_end,
                                pk_date_utils.dt_chr(i_lang,
                                                     pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                   cs.id_inst_last_update,
                                                                                                   NULL),
                                                                                      cs.dt_suggest_begin),
                                                     i_prof) || g_space || l_date_sep || g_space ||
                                pk_date_utils.dt_chr(i_lang,
                                                     pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                   cs.id_inst_last_update,
                                                                                                   NULL),
                                                                                      cs.dt_suggest_end),
                                                     i_prof),
                                pk_date_utils.dt_chr(i_lang,
                                                     pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                   cs.id_inst_last_update,
                                                                                                   NULL),
                                                                                      cs.dt_suggest_begin),
                                                     i_prof)) request_date,
                           NULL request_status_desc,
                           NULL requested_by,
                           NULL professional,
                           NULL name_prof,
                           NULL name_nurse,
                           NULL name_prof_tooltip,
                           NULL name_nurse_tooltip,
                           NULL event_date,
                           NULL status,
                           cs.flg_status flg_status,
                           NULL location,
                           NULL id_location,
                           NULL status_icon,
                           pk_date_utils.date_send_tsz(i_lang, cs.dt_suggest_begin, i_prof) order_date,
                           NULL id_future_event_type,
                           NULL id_fet_parent,
                           NULL flg_can_approve,
                           NULL flg_can_reject,
                           NULL flg_can_cancel,
                           NULL flg_can_schedule,
                           NULL flg_can_admit,
                           NULL flg_ok,
                           'PRESENT_FUTURE' time_state,
                           NULL id_dep_clin_serv,
                           NULL sch_event,
                           NULL icon_name,
                           NULL registered,
                           NULL approval_prof,
                           NULL request_reason,
                           NULL id_exam,
                           NULL id_dest_professional,
                           pk_date_utils.date_send_tsz(i_lang, cs.dt_suggest_begin, i_prof) dt_req_begin,
                           pk_date_utils.date_send_tsz(i_lang, cs.dt_suggest_end, i_prof) dt_req_end,
                           NULL id_combination_events,
                           cs.id_combination_spec id_combination_spec,
                           pk_alert_constant.g_no show_report,
                           NULL id_software,
                           NULL dt_sched,
                           to_number(pk_events.count_combination_events(i_lang, cs.id_combination_spec, 'N')) comb_count,
                           NULL list_id,
                           NULL list_min_lag,
                           NULL list_max_lag,
                           NULL list_unit_desc,
                           NULL list_unit_tag,
                           cs.flg_single_visit flg_single_visit,
                           NULL id_created_professional,
                           NULL notes,
                           NULL flg_contact_type,
                           NULL id_content,
                           NULL id_workflow,
                           NULL id_complaint,
                           NULL desc_complaint,
                           'N' reopen_episode,
                           NULL id_external_resource,
                           '' flg_type_of_external_resource,
                           NULL id_waiting_list,
                           NULL id_epis_hhc_req
                      FROM combination_spec cs
                     WHERE cs.id_patient = i_patient
                       AND cs.id_combination_spec IN
                           (SELECT /*+opt_estimate (table t1 rows=0.000001)*/
                            DISTINCT ce.id_combination_spec
                              FROM (SELECT *
                                      FROM TABLE(get_patient_events_pl(i_lang, i_prof, i_patient))) t1,
                                   combination_events ce
                             WHERE ce.id_future_event_type = t1.id_future_event_type
                               AND ce.id_event = decode(t1.event_type,
                                                        'IMAGING_EXAMS',
                                                        t1.id_exam_req_det,
                                                        'OTHER_EXAMS',
                                                        t1.id_exam_req_det,
                                                        'SCHEDULED_EPISODES',
                                                        t1.id_episode,
                                                        'SCHEDULED_EPISODES_2',
                                                        t1.id_episode,
                                                        'CURRENT_EPISODES',
                                                        t1.id_episode,
                                                        'SCHEDULED_EPISODES_3',
                                                        t1.id_episode,
                                                        'FUTURE_EVENTS',
                                                        t1.id_event,
                                                        t1.id_event)
                               AND ce.flg_status = g_flg_comb_state_active)
                       AND cs.flg_status = g_flg_comb_state_active)
             ORDER BY order_date DESC NULLS LAST, decode(flg_status, g_epis_cancelled, 1, 0);
        /*           ORDER BY id_combination_spec,
        dependency_nr,
        flg_status,
        decode(event_type,
               'COMBINATION',
               0,
               'FUTURE_EVENTS',
               1,
               'SCHEDULED_EPISODES',
               1,
               'SCHEDULED_EPISODES_2',
               1,
               'SCHEDULED_EPISODES_3',
               1,
               'IMAGING_EXAMS',
               2,
               'OTHER_EXAMS',
               2,
               'ADMISSION_SURGERY',
               1,
               'ADMISSION_SURGERY_2',
               1,
               'CURRENT_ENCOUNTERS',
               2,
               'CURRENT_EPISODES',
               2,
               'PAST_ENCOUNTERS',
               3,
               'PREVIOUS_EPISODES',
               3,
               'EHR_EVENTS',
               4),
        order_date;*/
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_events);
            RETURN FALSE;
    END get_patient_events;

    /********************************************************************************************
    * result patient's events
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier       
    * @param      i_type               type of select    
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/28
    **********************************************************************************************/
    FUNCTION get_adm_patient_events_pl
    (
        i_lang IN language.id_language%TYPE,
        i_prof IN profissional,
        i_type IN VARCHAR2
    ) RETURN t_coll_adm_future_event
        PIPELINED IS
    
        v_tab    t_rec_adm_future_event;
        c_result pk_types.cursor_type;
    
        g_category                category.flg_type%TYPE;
        l_epis_type_nurse         epis_type.id_epis_type%TYPE;
        l_epis_type_nutri         epis_type.id_epis_type%TYPE;
        l_therap_decision_consult translation.code_translation%TYPE;
    
        l_na            sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'N/A');
        l_date_sep      sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'FUTURE_EVENTS_T073');
        l_msg_suggested sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'FUTURE_EVENTS_T065');
        l_msg_scheduled sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'FUTURE_EVENTS_T066');
        --l_common_m008   sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M008');
    
        l_id_category          category.id_category%TYPE;
        l_id_profile_template  profile_template.id_profile_template%TYPE;
        l_future_events_t017   sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T017');
        l_sch_complaint_origin sys_config.value%TYPE := nvl(pk_sysconfig.get_config(g_sch_complaint_origin, i_prof),
                                                            g_complaint);
    BEGIN
    
        g_error           := 'CALL GET_ADM_PATIENT_EVENTS_PL';
        g_category        := pk_prof_utils.get_category(i_lang, i_prof);
        l_epis_type_nurse := pk_sysconfig.get_config('ID_EPIS_TYPE_NURSE', i_prof);
        l_epis_type_nutri := pk_sysconfig.get_config('ID_EPIS_TYPE_NUTRITIONIST', i_prof);
    
        l_id_category         := pk_prof_utils.get_id_category(i_lang => i_lang, i_prof => i_prof);
        l_id_profile_template := pk_tools.get_prof_profile_template(i_prof);
    
        -- Consultas de decisao terapeutica
        SELECT pk_translation.get_translation(i_lang, se.code_sch_event_abrv)
          INTO l_therap_decision_consult
          FROM sch_event se
         WHERE se.id_sch_event = g_sch_event_therap_decision;
    
        OPEN c_result FOR
            SELECT t_rec_adm_future_event(w.sel_type,
                                          w.event_type,
                                          w.id_event,
                                          w.id_exam_req_det,
                                          w.id_exam_req,
                                          w.num_clin_record,
                                          w.id_event_type,
                                          w.event_type_icon,
                                          w.event_type_name_title,
                                          w.event_type_clinical_service,
                                          w.location,
                                          w.id_location,
                                          w.id_schedule,
                                          w.desc_dep_clin_serv,
                                          w.id_dep_clin_serv,
                                          w.id_professional,
                                          w.professional,
                                          w.nick_name,
                                          w.dt_request,
                                          w.dt_request_desc,
                                          w.dt_scheduled,
                                          w.dt_scheduled_desc,
                                          w.flg_status,
                                          w.desc_status,
                                          w.photo,
                                          w.id_patient,
                                          w.patient_name,
                                          w.pat_age,
                                          w.gender,
                                          w.id_complaint,
                                          w.desc_reason,
                                          w.id_prof_orig,
                                          w.desc_prof_orig,
                                          w.id_prof_dest,
                                          w.desc_prof_dest,
                                          w.dt_server,
                                          w.dt_proposed,
                                          w.request_date,
                                          w.status_desc,
                                          w.epis_id_dep_clin_serv,
                                          w.flg_epis_type,
                                          w.consult_decision,
                                          w.flg_can_ok,
                                          w.flg_can_cancel,
                                          w.status_icon,
                                          w.request_status_desc,
                                          w.id_episode,
                                          w.status,
                                          w.flag_status,
                                          w.id_clinical_service,
                                          w.id_exam,
                                          w.dt_req_begin,
                                          w.order_date,
                                          w.id_created_professional,
                                          w.notes,
                                          w.flg_contact_type,
                                          w.id_content,
                                          w.id_workflow,
                                          w.flg_type_of_external_resource,
                                          w.id_external_resource)
              FROM (SELECT 'C' sel_type,
                           'FUTURE_EVENTS' event_type,
                           k.id_consult_req id_event,
                           NULL id_exam_req_det,
                           NULL id_exam_req,
                           (SELECT cr.num_clin_record
                              FROM clin_record cr
                             WHERE cr.id_patient = k.id_pat
                               AND cr.id_institution = i_prof.institution
                               AND rownum < 2) num_clin_record,
                           (SELECT get_event_type_by_epis_type(k.id_epis_type)
                              FROM dual) id_event_type,
                           (SELECT get_event_type_icon((SELECT get_event_type_by_epis_type(k.id_epis_type)
                                                         FROM dual))
                              FROM dual) event_type_icon,
                           (SELECT get_event_type_title(i_lang,
                                                        (SELECT get_event_type_by_epis_type(k.id_epis_type)
                                                           FROM dual))
                              FROM dual) event_type_name_title,
                           (SELECT pk_translation.get_translation(i_lang, k.code_clinical_service)
                              FROM dual) event_type_clinical_service,
                           (SELECT pk_utils.get_institution_name(i_lang, k.id_inst_requested)
                              FROM dual) location,
                           k.id_inst_requested id_location,
                           k.id_schedule,
                           k.desc_dep_clin_serv,
                           k.id_dep_clin_serv,
                           k.id_professional,
                           k.professional,
                           k.nick_name,
                           k.dt_request,
                           k.dt_request_desc,
                           k.dt_scheduled,
                           k.dt_scheduled_desc,
                           k.flg_status,
                           k.desc_status,
                           (SELECT pk_patphoto.get_pat_photo(i_lang, i_prof, k.id_pat, NULL, k.id_schedule)
                              FROM dual) photo,
                           k.id_pat id_patient,
                           k.patient_name,
                           (SELECT pk_patient.get_pat_age(i_lang, k.id_pat, i_prof)
                              FROM dual) pat_age,
                           (SELECT pk_patient.get_gender(i_lang, k.patient_gender)
                              FROM dual) gender,
                           CASE
                                WHEN l_sch_complaint_origin = g_complaint THEN
                                 k.reason_visit
                                ELSE
                                 NULL
                            END id_complaint,
                           decode(l_sch_complaint_origin,
                                  g_complaint,
                                  (SELECT pk_translation.get_translation(i_lang, c.code_complaint)
                                     FROM complaint c
                                    WHERE c.id_complaint = k.reason_visit
                                      AND rownum = 1),
                                  k.reason_for_visit) desc_reason,
                           k.id_prof_orig id_prof_orig,
                           k.desc_prof_orig desc_prof_orig,
                           k.id_prof_dest id_prof_dest,
                           k.desc_prof_dest desc_prof_dest,
                           (SELECT pk_date_utils.date_send_tsz(i_lang, current_timestamp, i_prof)
                              FROM dual) dt_server,
                           nvl(k.dt_proposed,
                               nvl2(k.dt_end_event,
                                    (SELECT pk_date_utils.dt_chr(i_lang,
                                                                 (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                       k.id_instit_requests,
                                                                                                                       NULL),
                                                                                                          k.dt_begin_event)
                                                                    FROM dual),
                                                                 i_prof)
                                       FROM dual) || g_space || l_date_sep || g_space ||
                                    (SELECT pk_date_utils.dt_chr(i_lang,
                                                                 (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                       k.id_instit_requests,
                                                                                                                       NULL),
                                                                                                          k.dt_end_event)
                                                                    FROM dual),
                                                                 i_prof)
                                       FROM dual),
                                    (SELECT pk_date_utils.dt_chr(i_lang,
                                                                 (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                       k.id_instit_requests,
                                                                                                                       NULL),
                                                                                                          k.dt_begin_event)
                                                                    FROM dual),
                                                                 i_prof)
                                       FROM dual))) dt_proposed,
                           nvl(k.request_date,
                               nvl2(k.dt_end_event,
                                    (SELECT pk_date_utils.dt_chr(i_lang,
                                                                 (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                       k.id_instit_requests,
                                                                                                                       NULL),
                                                                                                          k.dt_begin_event)
                                                                    FROM dual),
                                                                 i_prof)
                                       FROM dual) || g_space || l_date_sep || g_space ||
                                    (SELECT pk_date_utils.dt_chr(i_lang,
                                                                 (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                       k.id_instit_requests,
                                                                                                                       NULL),
                                                                                                          k.dt_end_event)
                                                                    FROM dual),
                                                                 i_prof)
                                       FROM dual),
                                    (SELECT pk_date_utils.dt_chr(i_lang,
                                                                 (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                       k.id_instit_requests,
                                                                                                                       NULL),
                                                                                                          k.dt_begin_event)
                                                                    FROM dual),
                                                                 i_prof)
                                       FROM dual))) request_date,
                           k.status_desc status_desc,
                           k.epis_id_dep_clin_serv,
                           k.flg_epis_type,
                           k.consult_decision,
                           decode(k.flg_status,
                                  g_visit_sched_stat_cancelled,
                                  pk_alert_constant.g_no,
                                  g_visit_sched_stat_scheduled,
                                  pk_alert_constant.g_no,
                                  pk_alert_constant.g_yes) flg_can_ok,
                           decode(k.flg_status,
                                  g_visit_sched_stat_cancelled,
                                  pk_alert_constant.g_no,
                                  g_visit_sched_stat_scheduled,
                                  pk_alert_constant.g_no,
                                  pk_alert_constant.g_yes) flg_can_cancel,
                           k.status_icon,
                           k.request_status_desc,
                           k.id_episode,
                           (SELECT pk_sysdomain.get_domain('CONSULT_REQ.FLG_STATUS', k.flag_status, i_lang)
                              FROM dual) status,
                           k.flag_status,
                           l_na dependency_nr,
                           NULL id_clinical_service,
                           NULL id_exam,
                           (SELECT pk_date_utils.date_send_tsz(i_lang, nvl(k.dt_proposed1, k.dt_begin_event), i_prof)
                              FROM dual) dt_req_begin,
                           k.order_date order_date,
                           k.id_created_professional,
                           k.notes,
                           k.flg_contact_type,
                           NULL id_content,
                           NULL id_workflow,
                           k.flg_type_of_external_resource,
                           k.id_external_resource
                      FROM (SELECT /*+ index(cr CR_INST_REQ_FLG_ST) */
                             cr.id_consult_req,
                             NULL id_schedule,
                             NULL id_exam_req_det,
                             NULL id_exam_req,
                             (SELECT pk_schedule.string_clin_serv_by_dcs(i_lang, cr.id_dep_clin_serv)
                                FROM dual) desc_dep_clin_serv,
                             cr.id_dep_clin_serv,
                             nvl(cr.id_prof_requested,
                                 (SELECT rp.id_professional
                                    FROM request_prof rp
                                   WHERE rp.id_consult_req = cr.id_consult_req
                                     AND rp.flg_active = pk_alert_constant.g_yes
                                     AND rownum = 1)) id_professional,
                             nvl2(cr.id_prof_requested,
                                  (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_requested)
                                     FROM dual),
                                  (SELECT pk_events.get_fe_request_prof_str(i_lang,
                                                                            i_prof,
                                                                            cr.id_consult_req,
                                                                            pk_alert_constant.g_no)
                                     FROM dual)) professional,
                             nvl2(cr.id_prof_requested,
                                  (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_requested)
                                     FROM dual),
                                  (SELECT pk_events.get_fe_request_prof_str(i_lang,
                                                                            i_prof,
                                                                            cr.id_consult_req,
                                                                            pk_alert_constant.g_no)
                                     FROM dual)) nick_name,
                             (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                                 (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                       cr.id_instit_requests,
                                                                                                                       NULL),
                                                                                                          nvl(cr.dt_last_update,
                                                                                                              cr.dt_consult_req_tstz))
                                                                    FROM dual),
                                                                 i_prof)
                                FROM dual) dt_request,
                             (SELECT pk_date_utils.date_char_hour_tsz(i_lang,
                                                                      nvl(cr.dt_last_update, cr.dt_consult_req_tstz),
                                                                      i_prof.institution,
                                                                      i_prof.software)
                                FROM dual) || chr(10) || (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                                                          (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                                                cr.id_instit_requests,
                                                                                                                                                NULL),
                                                                                                                                   nvl(cr.dt_last_update,
                                                                                                                                       cr.dt_consult_req_tstz))
                                                                                             FROM dual),
                                                                                          i_prof)
                                                            FROM dual) dt_request_desc,
                             NULL dt_scheduled,
                             NULL dt_scheduled_desc,
                             decode(cr.flg_status,
                                    pk_consult_req.g_consult_req_stat_reply,
                                    g_visit_sched_stat_requested,
                                    pk_consult_req.g_consult_req_stat_cancel,
                                    g_visit_sched_stat_cancelled) flg_status,
                             (SELECT pk_schedule.get_domain_desc(i_lang,
                                                                 g_flg_status_domain,
                                                                 decode(cr.flg_status,
                                                                        pk_consult_req.g_consult_req_stat_reply,
                                                                        g_visit_sched_stat_requested,
                                                                        pk_consult_req.g_consult_req_stat_cancel,
                                                                        g_visit_sched_stat_cancelled))
                                FROM dual) desc_status,
                             cr.id_patient id_pat,
                             cr.id_complaint reason_visit,
                             cr.id_prof_req id_prof_orig,
                             (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_req)
                                FROM dual) desc_prof_orig,
                             CASE
                                  WHEN cr.id_prof_requested IS NULL THEN
                                   (SELECT p2.id_professional
                                      FROM professional p2, consult_req_prof crp
                                     WHERE crp.id_professional = p2.id_professional
                                       AND crp.id_consult_req = cr.id_consult_req
                                       AND rownum = 1)
                                  ELSE
                                   cr.id_prof_requested
                              END id_prof_dest,
                             CASE
                                  WHEN cr.id_prof_requested IS NULL THEN
                                   (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, p2.id_professional)
                                      FROM professional p2, consult_req_prof crp
                                     WHERE crp.id_professional = p2.id_professional
                                       AND crp.id_consult_req = cr.id_consult_req
                                       AND rownum = 1)
                                  ELSE
                                   (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_requested)
                                      FROM dual)
                              END desc_prof_dest,
                             (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                                 (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                       cr.id_instit_requests,
                                                                                                                       NULL),
                                                                                                          nvl(cr.dt_scheduled_tstz,
                                                                                                              nvl(cr.dt_begin_event,
                                                                                                                  cr.dt_consult_req_tstz)))
                                                                    FROM dual),
                                                                 i_prof)
                                FROM dual) dt_proposed,
                             nvl(cr.dt_scheduled_tstz, nvl(cr.dt_begin_event, cr.dt_consult_req_tstz)) dt_proposed1,
                             (SELECT pk_date_utils.dt_chr(i_lang,
                                                          (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                cr.id_instit_requests,
                                                                                                                NULL),
                                                                                                   nvl(cr.dt_scheduled_tstz,
                                                                                                       cr.dt_begin_event))
                                                             FROM dual),
                                                          i_prof)
                                FROM dual) request_date,
                             (SELECT pk_utils.get_status_string(i_lang,
                                                                i_prof,
                                                                cr.status_str,
                                                                cr.status_msg,
                                                                cr.status_icon,
                                                                cr.status_flg)
                                FROM dual) status_desc,
                             cr.id_dep_clin_serv epis_id_dep_clin_serv,
                             decode((SELECT pk_episode.get_epis_type(i_lang, cr.id_episode)
                                      FROM dual),
                                    l_epis_type_nurse,
                                    g_epis_type_nurse,
                                    l_epis_type_nutri,
                                    g_epis_type_nutri,
                                    decode((SELECT COUNT(1)
                                             FROM adm_request ar
                                            WHERE ar.id_nit_req = cr.id_consult_req),
                                           1,
                                           g_epis_type_nurse,
                                           decode((SELECT pk_prof_utils.get_category(i_lang,
                                                                                    profissional(cr.id_prof_requested,
                                                                                                 i_prof.institution,
                                                                                                 i_prof.software))
                                                    FROM dual),
                                                  g_epis_type_nutri,
                                                  g_epis_type_nutri,
                                                  g_epis_type_consult))) flg_epis_type,
                             cr.reason_for_visit,
                             (SELECT decode(s.id_sch_event, g_sch_event_therap_decision, l_therap_decision_consult, NULL)
                                FROM schedule s
                               WHERE s.id_schedule = (SELECT ei.id_schedule
                                                        FROM epis_info ei
                                                       WHERE ei.id_episode = cr.id_episode)) consult_decision,
                             nvl(cr.id_epis_type, get_epis_type_consult_req(cr.id_consult_req)) id_epis_type,
                             (SELECT cs.code_clinical_service
                                FROM dep_clin_serv dcs
                                JOIN clinical_service cs
                                  ON cs.id_clinical_service = dcs.id_clinical_service
                               WHERE dcs.id_dep_clin_serv = cr.id_dep_clin_serv) code_clinical_service,
                             cr.dt_begin_event,
                             cr.dt_end_event,
                             cr.id_inst_requested,
                             cr.id_instit_requests,
                             (SELECT pk_patient.get_pat_name(i_lang, i_prof, cr.id_patient, NULL)
                                FROM dual) patient_name,
                             (SELECT pk_patient.get_pat_gender(cr.id_patient)
                                FROM dual) patient_gender,
                             cr.status_str,
                             cr.status_msg,
                             CASE
                                  WHEN cr.flg_status = pk_consult_req.g_consult_req_stat_cancel THEN
                                   (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                                i_prof,
                                                                                pk_alert_constant.g_display_type_icon,
                                                                                cr.flg_status,
                                                                                NULL,
                                                                                NULL,
                                                                                'CONSULT_REQ.FLG_STATUS')
                                      FROM dual)
                                  WHEN cr.flg_status = pk_consult_req.g_consult_req_hold_list THEN
                                   (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                                i_prof,
                                                                                pk_alert_constant.g_display_type_icon,
                                                                                pk_consult_req.g_consult_req_hold_list,
                                                                                NULL,
                                                                                NULL,
                                                                                'CONSULT_REQ.FLG_STATUS',
                                                                                NULL,
                                                                                NULL,
                                                                                NULL,
                                                                                NULL,
                                                                                NULL,
                                                                                NULL,
                                                                                NULL)
                                      FROM dual)
                                  ELSE
                                   (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                                i_prof,
                                                                                pk_alert_constant.g_display_type_date_icon,
                                                                                pk_consult_req.g_consult_req_stat_reply,
                                                                                NULL,
                                                                                to_char(nvl(cr.dt_last_update,
                                                                                            cr.dt_consult_req_tstz),
                                                                                        pk_alert_constant.g_dt_yyyymmddhh24miss),
                                                                                'CONSULT_REQ.FLG_STATUS',
                                                                                NULL,
                                                                                '0xC86464',
                                                                                '0xEBEBC8',
                                                                                NULL,
                                                                                NULL,
                                                                                NULL,
                                                                                current_timestamp)
                                      FROM dual)
                              END status_icon,
                             cr.status_flg,
                             l_msg_suggested request_status_desc,
                             cr.id_episode,
                             cr.flg_status flag_status,
                             (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                                 nvl(cr.dt_scheduled_tstz, cr.dt_begin_event),
                                                                 i_prof)
                                FROM dual) order_date,
                             (SELECT get_id_prof_create_consult_req(cr.id_consult_req)
                                FROM dual) id_created_professional,
                             cr.notes notes,
                             cr.flg_contact_type,
                             g_resourcetype flg_type_of_external_resource,
                             nvl(cr.id_prof_requested,
                                 (SELECT rp.id_professional
                                    FROM request_prof rp
                                   WHERE rp.id_consult_req = cr.id_consult_req
                                     AND rp.flg_active = pk_alert_constant.g_yes
                                     AND rownum = 1)) id_external_resource
                              FROM consult_req cr
                             WHERE (cr.id_schedule IS NULL OR EXISTS
                                    (SELECT 0
                                       FROM schedule s
                                      WHERE s.id_schedule = cr.id_schedule
                                        AND s.flg_status = pk_schedule.g_sch_canceled))
                               AND (cr.id_dep_clin_serv IS NULL OR EXISTS
                                    (SELECT 0
                                       FROM prof_dep_clin_serv pdcs
                                      WHERE pdcs.id_dep_clin_serv = cr.id_dep_clin_serv
                                        AND pdcs.id_professional = i_prof.id
                                        AND pdcs.flg_status = pk_schedule.g_status_pdcs_selected))
                               AND cr.id_inst_requested = i_prof.institution
                               AND cr.flg_status IN (pk_consult_req.g_consult_req_stat_reply,
                                                     pk_consult_req.g_consult_req_stat_cancel,
                                                     pk_consult_req.g_consult_req_hold_list)
                               AND (g_category = g_flg_type_a OR EXISTS
                                    (SELECT 0
                                       FROM sch_permission sp
                                      WHERE sp.id_institution = i_prof.institution
                                        AND sp.id_dep_clin_serv = cr.id_dep_clin_serv
                                        AND sp.id_professional = i_prof.id
                                        AND (sp.id_prof_agenda = cr.id_prof_requested OR cr.id_prof_requested IS NULL)
                                        AND (sp.flg_permission = pk_schedule.g_permission_schedule)))
                               AND ((cr.flg_status != pk_consult_req.g_consult_req_stat_cancel) OR
                                   (cr.flg_status = pk_consult_req.g_consult_req_stat_cancel AND
                                   trunc(cr.dt_cancel_tstz, 'DD') >= trunc(current_timestamp, 'DD')))
                               AND i_type IN ('A', 'F')
                            UNION ALL
                            SELECT cr.id_consult_req,
                                   s.id_schedule,
                                   NULL id_exam_req_det,
                                   NULL id_exam_req,
                                   (SELECT pk_schedule.string_clin_serv_by_dcs(i_lang, s.id_dcs_requested)
                                      FROM dual) desc_dep_clin_serv,
                                   s.id_dcs_requested id_dep_clin_serv,
                                   sr.id_professional id_professional,
                                   (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, sr.id_professional)
                                      FROM dual) professional,
                                   (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, sr.id_professional)
                                      FROM dual) nick_name,
                                   (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                                       (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                             cr.id_instit_requests,
                                                                                                                             NULL),
                                                                                                                nvl(cr.dt_last_update,
                                                                                                                    cr.dt_consult_req_tstz))
                                                                          FROM dual),
                                                                       i_prof)
                                      FROM dual) dt_request,
                                   (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                                    (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                          cr.id_instit_requests,
                                                                                                                          NULL),
                                                                                                             nvl(cr.dt_last_update,
                                                                                                                 cr.dt_consult_req_tstz))
                                                                       FROM dual),
                                                                    i_prof)
                                      FROM dual) dt_request_desc,
                                   (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                                       (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                             cr.id_instit_requests,
                                                                                                                             NULL),
                                                                                                                s.dt_begin_tstz)
                                                                          FROM dual),
                                                                       i_prof)
                                      FROM dual) dt_scheduled,
                                   (SELECT pk_date_utils.date_char_hour_tsz(i_lang,
                                                                            s.dt_begin_tstz,
                                                                            i_prof.institution,
                                                                            i_prof.software)
                                      FROM dual) || chr(10) || (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                                                                (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                                                      cr.id_instit_requests,
                                                                                                                                                      NULL),
                                                                                                                                         s.dt_begin_tstz)
                                                                                                   FROM dual),
                                                                                                i_prof)
                                                                  FROM dual) dt_scheduled_desc,
                                   g_visit_sched_stat_scheduled flg_status,
                                   (SELECT pk_schedule.get_domain_desc(i_lang,
                                                                       g_flg_status_domain,
                                                                       g_visit_sched_stat_scheduled)
                                      FROM dual) desc_status,
                                   sg.id_patient id_pat,
                                   decode(s.flg_reason_type, 'C', s.id_reason, NULL) reason_visit,
                                   cr.id_prof_req id_prof_orig,
                                   (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_req)
                                      FROM dual) desc_prof_orig,
                                   ei.sch_prof_outp_id_prof id_prof_dest,
                                   (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, ei.sch_prof_outp_id_prof)
                                      FROM dual) desc_prof_dest,
                                   (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                                       (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                             cr.id_instit_requests,
                                                                                                                             NULL),
                                                                                                                nvl(cr.dt_scheduled_tstz,
                                                                                                                    nvl(cr.dt_begin_event,
                                                                                                                        cr.dt_consult_req_tstz)))
                                                                          FROM dual),
                                                                       i_prof)
                                      FROM dual) dt_proposed,
                                   nvl(cr.dt_scheduled_tstz, nvl(cr.dt_begin_event, cr.dt_consult_req_tstz)) dt_proposed1,
                                   (SELECT pk_date_utils.dt_chr(i_lang,
                                                                (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                      cr.id_instit_requests,
                                                                                                                      NULL),
                                                                                                         nvl(cr.dt_scheduled_tstz,
                                                                                                             cr.dt_begin_event))
                                                                   FROM dual),
                                                                i_prof)
                                      FROM dual) request_date,
                                   (SELECT pk_utils.get_status_string(i_lang,
                                                                      i_prof,
                                                                      cr.status_str,
                                                                      cr.status_msg,
                                                                      cr.status_icon,
                                                                      cr.status_flg)
                                      FROM dual) status_desc,
                                   ei.id_dep_clin_serv epis_id_dep_clin_serv,
                                   decode(so.id_epis_type,
                                          l_epis_type_nurse,
                                          g_epis_type_nurse,
                                          l_epis_type_nutri,
                                          g_epis_type_nutri,
                                          decode((SELECT COUNT(1)
                                                   FROM adm_request ar
                                                  WHERE ar.id_nit_req = cr.id_consult_req),
                                                 1,
                                                 g_epis_type_nurse,
                                                 g_epis_type_consult)) flg_epis_type,
                                   cr.reason_for_visit,
                                   decode(s.id_sch_event, g_sch_event_therap_decision, l_therap_decision_consult, NULL) consult_decision,
                                   nvl(cr.id_epis_type, get_epis_type_consult_req(cr.id_consult_req)) id_epis_type,
                                   (SELECT cs.code_clinical_service
                                      FROM dep_clin_serv dcs
                                      JOIN clinical_service cs
                                        ON cs.id_clinical_service = dcs.id_clinical_service
                                     WHERE dcs.id_dep_clin_serv = cr.id_dep_clin_serv) code_clinical_service,
                                   cr.dt_begin_event,
                                   cr.dt_end_event,
                                   cr.id_inst_requested,
                                   cr.id_instit_requests,
                                   pt.name patient_name,
                                   pt.gender patient_gender,
                                   cr.status_str,
                                   cr.status_msg,
                                   (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                                i_prof,
                                                                                pk_alert_constant.g_display_type_date_icon,
                                                                                pk_consult_req.g_consult_req_stat_reply,
                                                                                NULL,
                                                                                to_char(nvl(cr.dt_last_update,
                                                                                            cr.dt_consult_req_tstz),
                                                                                        pk_alert_constant.g_dt_yyyymmddhh24miss),
                                                                                'CONSULT_REQ.FLG_STATUS',
                                                                                NULL,
                                                                                '0xC86464',
                                                                                '0xEBEBC8',
                                                                                NULL,
                                                                                NULL,
                                                                                NULL,
                                                                                current_timestamp)
                                      FROM dual) status_icon,
                                   cr.status_flg,
                                   l_msg_scheduled request_status_desc,
                                   cr.id_episode,
                                   cr.flg_status flag_status,
                                   --pk_date_utils.date_send_tsz(i_lang,nvl(cr.dt_last_update, cr.dt_consult_req_tstz),i_prof) order_date,
                                   (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                                       nvl(cr.dt_scheduled_tstz, cr.dt_begin_event),
                                                                       i_prof)
                                      FROM dual) order_date,
                                   (SELECT get_id_prof_create_consult_req(cr.id_consult_req)
                                      FROM dual) id_created_professional,
                                   cr.notes notes,
                                   sg.flg_contact_type,
                                   '' flg_type_of_external_resource,
                                   NULL id_external_resource
                              FROM schedule s
                              JOIN sch_group sg
                                ON (sg.id_schedule = s.id_schedule)
                              JOIN patient pt
                                ON (pt.id_patient = sg.id_patient)
                              JOIN consult_req cr
                                ON (cr.id_schedule = s.id_schedule)
                              JOIN epis_info ei
                                ON (ei.id_episode = cr.id_episode)
                              JOIN schedule_outp so
                                ON (so.id_schedule = s.id_schedule)
                              LEFT JOIN sch_resource sr
                                ON (sr.id_schedule = s.id_schedule)
                             WHERE s.id_instit_requested = i_prof.institution
                               AND s.id_dcs_requested IN
                                   (SELECT pdcs.id_dep_clin_serv
                                      FROM prof_dep_clin_serv pdcs
                                     WHERE pdcs.id_dep_clin_serv = s.id_dcs_requested
                                       AND pdcs.id_professional = i_prof.id
                                       AND pdcs.flg_status = pk_schedule.g_status_pdcs_selected)
                               AND s.flg_status = pk_schedule.g_status_scheduled
                               AND s.dt_begin_tstz >= (SELECT pk_date_utils.trunc_insttimezone(i_prof, current_timestamp)
                                                         FROM dual)
                               AND s.flg_sch_type = pk_schedule_common.g_sch_dept_flg_dep_type_cons
                               AND cr.flg_status NOT IN (pk_consult_req.g_consult_req_stat_proc)
                               AND EXISTS
                             (SELECT 0
                                      FROM sch_permission sp
                                     WHERE sp.id_institution = i_prof.institution
                                       AND (sp.id_prof_agenda = sr.id_professional OR sr.id_professional IS NULL OR
                                           sp.id_professional IS NULL)
                                       AND (sp.id_dep_clin_serv = s.id_dcs_requested OR sp.id_dep_clin_serv IS NULL)
                                       AND (sp.flg_permission = pk_schedule.g_permission_schedule)
                                       AND (sp.id_sch_event = s.id_sch_event))
                               AND trunc(s.dt_schedule_tstz, 'DD') >= trunc(current_timestamp, 'DD')
                               AND ((so.id_epis_type = pk_sysconfig.get_config('ID_EPIS_TYPE_NURSE', i_prof) AND
                                   g_category = g_flg_type_n) OR g_category != g_flg_type_n)
                               AND i_type IN ('A', 'F')) k
                    -------------------  EXAMES DE IMAGEM  -----------------                      
                    UNION ALL
                    SELECT 'I' sel_type,
                           'IMAGING_EXAMS' event_type,
                           ex.id_exam_req_det id_event,
                           ex.id_exam_req_det,
                           ex.id_exam_req,
                           (SELECT cr.num_clin_record
                              FROM clin_record cr
                             WHERE cr.id_patient = ex.id_patient
                               AND cr.id_institution = i_prof.institution
                               AND rownum < 2) num_clin_record,
                           pk_events.g_event_type_iexam id_event_type,
                           (SELECT get_event_type_icon(pk_events.g_event_type_iexam)
                              FROM dual) event_type_icon,
                           (SELECT get_event_type_title(i_lang, pk_events.g_event_type_iexam)
                              FROM dual) event_type_name_title,
                           (SELECT pk_exams_api_db.get_alias_translation(i_lang,
                                                                         i_prof,
                                                                         'EXAM.CODE_EXAM.' || ex.id_exam,
                                                                         NULL)
                              FROM dual) event_type_clinical_service,
                           (SELECT pk_utils.get_institution_name(i_lang, ex.id_institution)
                              FROM dual) location,
                           ex.id_institution id_location,
                           ex.id_schedule id_schedule,
                           NULL desc_dep_clin_serv,
                           NULL id_dep_clin_serv,
                           NULL id_professional,
                           NULL professional,
                           NULL nick_name,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ex.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ex.dt_begin_tstz,
                                                                                                         ex.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_request,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ex.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ex.dt_begin_tstz,
                                                                                                         ex.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_request_desc,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ex.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ex.dt_begin_tstz,
                                                                                                         ex.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_scheduled,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ex.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ex.dt_begin_tstz,
                                                                                                         ex.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_scheduled_desc,
                           ex.flg_status_req_det flg_status,
                           l_msg_suggested desc_status,
                           (SELECT pk_patphoto.get_pat_photo(i_lang, i_prof, ex.id_patient, NULL, ex.id_schedule)
                              FROM dual) photo,
                           ex.id_patient id_patient,
                           name patient_name,
                           (SELECT pk_patient.get_pat_age(i_lang, ex.id_patient, i_prof)
                              FROM dual) pat_age,
                           (SELECT pk_patient.get_gender(i_lang, ex.gender)
                              FROM dual) gender,
                           NULL id_complaint,
                           NULL desc_reason,
                           ex.id_prof_req id_prof_orig,
                           (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, ex.id_prof_req)
                              FROM dual) desc_prof_orig,
                           NULL id_prof_dest,
                           NULL desc_prof_dest,
                           (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                               (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                     ex.id_institution,
                                                                                                                     NULL),
                                                                                                        current_timestamp)
                                                                  FROM dual),
                                                               i_prof)
                              FROM dual) dt_server,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ex.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ex.dt_begin_tstz,
                                                                                                         ex.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_proposed,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ex.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ex.dt_begin_tstz,
                                                                                                         ex.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) request_date,
                           (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                        i_prof,
                                                                        pk_alert_constant.g_display_type_icon,
                                                                        decode(ex.flg_status_req_det,
                                                                               pk_exam_constant.g_exam_nr,
                                                                               pk_exam_constant.g_exam_tosched,
                                                                               ex.flg_status_req_det),
                                                                        NULL,
                                                                        NULL,
                                                                        'EXAM_REQ_DET.FLG_STATUS')
                              FROM dual) status_desc,
                           
                           NULL epis_id_dep_clin_serv,
                           NULL flg_epis_type,
                           NULL consult_decision,
                           NULL flg_can_ok,
                           NULL flg_can_cancel,
                           (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                        i_prof,
                                                                        pk_alert_constant.g_display_type_date_icon,
                                                                        pk_consult_req.g_consult_req_stat_reply,
                                                                        NULL,
                                                                        to_char(nvl(ex.dt_req_tstz,
                                                                                    nvl(ex.dt_begin_tstz,
                                                                                        ex.dt_schedule_tstz)),
                                                                                pk_alert_constant.g_dt_yyyymmddhh24miss),
                                                                        'CONSULT_REQ.FLG_STATUS',
                                                                        NULL,
                                                                        '0xC86464',
                                                                        '0xEBEBC8',
                                                                        NULL,
                                                                        NULL,
                                                                        NULL,
                                                                        current_timestamp)
                              FROM dual) status_icon,
                           nvl2(nvl(ex.dt_begin_tstz, ex.dt_schedule_tstz), l_msg_suggested, NULL) request_status_desc,
                           ex.id_episode id_episode,
                           (SELECT pk_sysdomain.get_domain(i_lang,
                                                           i_prof,
                                                           'EXAM_REQ_DET.FLG_STATUS',
                                                           ex.flg_status_req_det,
                                                           NULL)
                              FROM dual) status,
                           ex.flg_status_req_det flag_status,
                           l_na dependency_nr,
                           ex.id_clinical_service,
                           ex.id_exam,
                           (SELECT pk_date_utils.date_send_tsz(i_lang, nvl(ex.dt_begin_tstz, ex.dt_schedule_tstz), i_prof)
                              FROM dual) dt_req_begin,
                           (SELECT pk_date_utils.date_send_tsz(i_lang, nvl(ex.dt_begin_tstz, ex.dt_schedule_tstz), i_prof)
                              FROM dual) order_date,
                           ex.id_prof_req id_created_professional,
                           NULL notes,
                           NULL flg_contact_type,
                           NULL id_content,
                           NULL id_workflow,
                           g_flgtype flg_type_of_external_resource,
                           ex.id_room id_external_resource
                      FROM (SELECT /*+ index(ecdcs ECC_DCS_FK_I)  */
                            DISTINCT gti.id_patient,
                                     pt.age,
                                     gti.num_clin_record,
                                     gti.id_episode,
                                     gti.id_dept,
                                     gti.id_clinical_service,
                                     gti.id_professional,
                                     gti.id_exam_cat,
                                     gti.id_exam,
                                     gti.dt_schedule_tstz,
                                     er.notes,
                                     gti.dt_begin_tstz,
                                     gti.id_exam_req,
                                     gti.id_exam_req_det,
                                     gti.flg_status_req_det,
                                     gti.dt_req_tstz,
                                     er.id_prof_req,
                                     er.id_institution,
                                     er.id_schedule,
                                     gti.flg_req_origin_module,
                                     pt.gender,
                                     pt.name,
                                     gti.id_room
                              FROM (SELECT *
                                      FROM grid_task_img
                                     WHERE flg_status_req_det = pk_grid.g_exam_req_tosched
                                       AND dt_begin_tstz IS NULL
                                       AND id_institution = i_prof.institution
                                    UNION ALL
                                    SELECT *
                                      FROM grid_task_img
                                     WHERE flg_status_req_det = pk_grid.g_exam_req_nr
                                       AND id_institution = i_prof.institution) gti
                              JOIN exam_req er
                                ON er.id_exam_req = gti.id_exam_req
                              JOIN exam_cat_dcs ecdcs
                                ON ecdcs.id_exam_cat = gti.id_exam_cat
                              JOIN patient pt
                                ON pt.id_patient = gti.id_patient
                             WHERE EXISTS (SELECT 1
                                      FROM prof_dep_clin_serv pdcs
                                     WHERE pdcs.id_professional = i_prof.id
                                       AND pdcs.flg_status = pk_grid.g_selected
                                       AND pdcs.id_institution = i_prof.institution
                                       AND pdcs.id_dep_clin_serv = ecdcs.id_dep_clin_serv)
                               AND i_type IN ('A', 'I')) ex
                    UNION ALL
                    -------------------  OUTROS EXAMES  -----------------                                                                                                      
                    SELECT 'E' sel_type,
                           'OTHER_EXAMS' event_type,
                           ox.id_exam_req_det id_event,
                           ox.id_exam_req_det,
                           ox.id_exam_req,
                           ox.num_clin_record num_clin_record,
                           pk_events.g_event_type_oexam id_event_type,
                           (SELECT get_event_type_icon(pk_events.g_event_type_oexam)
                              FROM dual) event_type_icon,
                           (SELECT get_event_type_title(i_lang, pk_events.g_event_type_oexam)
                              FROM dual) event_type_name_title,
                           (SELECT pk_exams_api_db.get_alias_translation(i_lang,
                                                                         i_prof,
                                                                         'EXAM.CODE_EXAM.' || ox.id_exam,
                                                                         NULL)
                              FROM dual) event_type_clinical_service,
                           (SELECT pk_utils.get_institution_name(i_lang, ox.id_institution)
                              FROM dual) location,
                           ox.id_institution id_location,
                           ox.id_schedule id_schedule,
                           NULL desc_dep_clin_serv,
                           NULL id_dep_clin_serv,
                           NULL id_professional,
                           NULL professional,
                           NULL nick_name,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ox.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ox.dt_begin_tstz,
                                                                                                         ox.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_request,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ox.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ox.dt_begin_tstz,
                                                                                                         ox.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_request_desc,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ox.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ox.dt_begin_tstz,
                                                                                                         ox.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_scheduled,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ox.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ox.dt_begin_tstz,
                                                                                                         ox.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_scheduled_desc,
                           ox.flg_status_req_det flg_status,
                           l_msg_suggested desc_status,
                           
                           (SELECT pk_patphoto.get_pat_photo(i_lang, i_prof, ox.id_patient, NULL, ox.id_schedule)
                              FROM dual) photo,
                           ox.id_patient id_patient,
                           name patient_name,
                           (SELECT pk_patient.get_pat_age(i_lang, ox.id_patient, i_prof)
                              FROM dual) pat_age,
                           (SELECT pk_patient.get_gender(i_lang, ox.gender)
                              FROM dual) gender,
                           NULL id_complaint,
                           NULL desc_reason,
                           ox.id_prof_req id_prof_orig,
                           (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, ox.id_prof_req)
                              FROM dual) desc_prof_orig,
                           NULL id_prof_dest,
                           NULL desc_prof_dest,
                           (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                               (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                     ox.id_institution,
                                                                                                                     NULL),
                                                                                                        current_timestamp)
                                                                  FROM dual),
                                                               i_prof)
                              FROM dual) dt_server,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ox.id_institution,
                                                                                                                  NULL),
                                                                                                     dt_schedule_tstz)
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_proposed,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ox.id_institution,
                                                                                                                  NULL),
                                                                                                     dt_schedule_tstz)
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) request_date,
                           (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                        i_prof,
                                                                        pk_alert_constant.g_display_type_icon,
                                                                        decode(ox.flg_status_req_det,
                                                                               pk_exam_constant.g_exam_nr,
                                                                               pk_exam_constant.g_exam_tosched,
                                                                               ox.flg_status_req_det),
                                                                        NULL,
                                                                        NULL,
                                                                        'EXAM_REQ_DET.FLG_STATUS')
                              FROM dual) status_desc,
                           NULL epis_id_dep_clin_serv,
                           NULL flg_epis_type,
                           NULL consult_decision,
                           NULL flg_can_ok,
                           NULL flg_can_cancel,
                           (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                        i_prof,
                                                                        pk_alert_constant.g_display_type_date_icon,
                                                                        pk_consult_req.g_consult_req_stat_reply,
                                                                        NULL,
                                                                        to_char(nvl(ox.dt_req_tstz,
                                                                                    nvl(ox.dt_begin_tstz,
                                                                                        ox.dt_schedule_tstz)),
                                                                                pk_alert_constant.g_dt_yyyymmddhh24miss),
                                                                        'CONSULT_REQ.FLG_STATUS',
                                                                        NULL,
                                                                        '0xC86464',
                                                                        '0xEBEBC8',
                                                                        NULL,
                                                                        NULL,
                                                                        NULL,
                                                                        current_timestamp)
                              FROM dual) status_icon,
                           nvl2(nvl(ox.dt_begin_tstz, ox.dt_schedule_tstz), l_msg_suggested, NULL) request_status_desc,
                           ox.id_episode id_episode,
                           (SELECT pk_sysdomain.get_domain(i_lang,
                                                           i_prof,
                                                           'EXAM_REQ_DET.FLG_STATUS',
                                                           ox.flg_status_req_det,
                                                           NULL)
                              FROM dual) status,
                           ox.flg_status_req_det flag_status,
                           l_na dependency_nr,
                           ox.id_clinical_service,
                           ox.id_exam,
                           (SELECT pk_date_utils.date_send_tsz(i_lang, nvl(ox.dt_begin_tstz, ox.dt_schedule_tstz), i_prof)
                              FROM dual) dt_req_begin,
                           (SELECT pk_date_utils.date_send_tsz(i_lang, nvl(ox.dt_begin_tstz, ox.dt_schedule_tstz), i_prof)
                              FROM dual) order_date,
                           ox.id_prof_req id_created_professional,
                           NULL notes,
                           NULL flg_contact_type,
                           NULL id_content,
                           NULL id_workflow,
                           '' flg_type_of_external_resource,
                           NULL id_external_resource
                      FROM (SELECT /*+ index(ecdcs ECC_DCS_FK_I)  */
                            DISTINCT gtoe.id_patient,
                                     gtoe.id_professional,
                                     gtoe.num_clin_record,
                                     gtoe.id_episode,
                                     gtoe.id_dept,
                                     gtoe.id_clinical_service,
                                     gtoe.nick_name,
                                     gtoe.id_exam_cat,
                                     gtoe.id_exam,
                                     gtoe.dt_schedule_tstz,
                                     er.notes,
                                     gtoe.dt_begin_tstz,
                                     gtoe.id_exam_req,
                                     gtoe.id_exam_req_det,
                                     gtoe.flg_status_req_det,
                                     gtoe.dt_req_tstz,
                                     er.id_prof_req,
                                     er.id_institution,
                                     er.id_schedule,
                                     pt.name,
                                     pt.age,
                                     pt.gender,
                                     gtoe.flg_req_origin_module
                              FROM (SELECT *
                                      FROM grid_task_oth_exm
                                     WHERE flg_status_req_det = pk_grid.g_exam_req_tosched
                                       AND dt_begin_tstz IS NULL
                                       AND id_institution = i_prof.institution
                                    UNION ALL
                                    SELECT *
                                      FROM grid_task_oth_exm
                                     WHERE flg_status_req_det = pk_grid.g_exam_req_nr
                                       AND id_institution = i_prof.institution) gtoe
                              JOIN exam_req er
                                ON er.id_exam_req = gtoe.id_exam_req
                              JOIN exam_cat_dcs ecdcs
                                ON ecdcs.id_exam_cat = gtoe.id_exam_cat
                              JOIN patient pt
                                ON pt.id_patient = gtoe.id_patient
                             WHERE EXISTS (SELECT 1
                                      FROM prof_dep_clin_serv pdcs
                                     WHERE pdcs.id_professional = i_prof.id
                                       AND pdcs.flg_status = pk_grid.g_selected
                                       AND pdcs.id_institution = i_prof.institution
                                       AND pdcs.id_dep_clin_serv = ecdcs.id_dep_clin_serv)
                               AND i_type IN ('A', 'E')) ox
                    UNION ALL
                    -------------------  REFERRALs  -----------------                                                                                                      
                    SELECT 'R' sel_type, -- 
                           'REFERRAL' event_type, -- 
                           r.id_external_request id_event,
                           NULL id_exam_req_det,
                           NULL id_exam_req,
                           r.num_clin_record num_clin_record,
                           g_event_type_referral id_event_type,
                           (SELECT get_event_type_icon(g_event_type_referral)
                              FROM dual) event_type_icon, -- 
                           (SELECT get_event_type_title(i_lang, g_event_type_referral)
                              FROM dual) event_type_name_title, -- 
                           decode(r.id_workflow,
                                  pk_ref_constant.g_wf_srv_srv,
                                  -- if is internal workflow, than shows the desc of clinical service
                                  (SELECT pk_translation.get_translation(i_lang,
                                                                         'CLINICAL_SERVICE.CODE_CLINICAL_SERVICE.' ||
                                                                         (SELECT cs.id_clinical_service
                                                                            FROM dep_clin_serv dcs
                                                                            JOIN clinical_service cs
                                                                              ON (cs.id_clinical_service =
                                                                                 dcs.id_clinical_service)
                                                                           WHERE dcs.id_dep_clin_serv = r.id_dep_clin_serv))
                                     FROM dual),
                                  -- else  (other than internal workflow)
                                  (SELECT pk_translation.get_translation(i_lang,
                                                                         'P1_SPECIALITY.CODE_SPECIALITY.' ||
                                                                         r.id_speciality)
                                     FROM dual)) event_type_clinical_service,
                           (SELECT pk_utils.get_institution_name(i_lang, r.id_inst_dest)
                              FROM dual) location, --
                           r.id_inst_dest id_location,
                           NULL id_schedule,
                           NULL desc_dep_clin_serv,
                           r.id_dep_clin_serv id_dep_clin_serv,
                           (SELECT pk_ref_dest_phy.get_suggested_physician(i_lang, i_prof, r.id_external_request)
                              FROM dual) id_professional, -- professional id to send to scheduler
                           nvl((SELECT pk_prof_utils.get_name_signature(i_lang,
                                                                       i_prof,
                                                                       (SELECT pk_ref_dest_phy.get_suggested_physician(i_lang,
                                                                                                                       i_prof,
                                                                                                                       r.id_external_request)
                                                                          FROM dual))
                                 FROM dual),
                               l_future_events_t017) professional,
                           NULL nick_name,
                           NULL dt_request,
                           NULL dt_request_desc,
                           NULL dt_scheduled,
                           NULL dt_scheduled_desc,
                           r.flg_status flg_status,
                           NULL desc_status,
                           (SELECT pk_patphoto.get_pat_photo(i_lang, i_prof, r.id_patient, NULL, NULL)
                              FROM dual) photo,
                           r.id_patient id_patient,
                           (SELECT pk_patient.get_pat_name(i_lang,
                                                           i_prof,
                                                           r.id_patient,
                                                           (SELECT pk_p1_external_request.check_prof_resp(i_lang,
                                                                                                          i_prof,
                                                                                                          r.id_external_request)
                                                              FROM dual))
                              FROM dual) patient_name,
                           (SELECT pk_patient.get_pat_age(i_lang, r.id_patient, i_prof)
                              FROM dual) pat_age,
                           (SELECT pk_patient.get_gender(i_lang, r.gender)
                              FROM dual) gender,
                           NULL id_complaint,
                           NULL desc_reason,
                           r.id_prof_requested id_prof_orig,
                           (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, r.id_prof_requested)
                              FROM dual) desc_prof_orig,
                           NULL id_prof_dest,
                           NULL desc_prof_dest,
                           (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                               (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                     r.id_inst_dest,
                                                                                                                     NULL),
                                                                                                        current_timestamp)
                                                                  FROM dual),
                                                               i_prof)
                              FROM dual) dt_server,
                           NULL dt_proposed,
                           NULL request_date,
                           NULL status_desc,
                           NULL epis_id_dep_clin_serv,
                           NULL flg_epis_type,
                           NULL consult_decision,
                           NULL flg_can_ok,
                           (SELECT pk_ref_core.can_cancel(i_lang,
                                                          i_prof,
                                                          r.id_external_request,
                                                          r.flg_status,
                                                          nvl(r.id_workflow, pk_ref_constant.g_wf_pcc_hosp),
                                                          l_id_profile_template,
                                                          (SELECT pk_ref_core.get_prof_func(i_lang,
                                                                                            i_prof,
                                                                                            r.id_dep_clin_serv)
                                                             FROM dual),
                                                          l_id_category,
                                                          r.id_patient,
                                                          r.id_inst_orig,
                                                          r.id_inst_dest,
                                                          r.id_dep_clin_serv,
                                                          r.id_speciality,
                                                          r.flg_type,
                                                          r.id_prof_requested,
                                                          r.id_prof_redirected,
                                                          r.id_prof_status,
                                                          r.id_external_sys,
                                                          r.decision_urg_level)
                              FROM dual) flg_can_cancel,
                           (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                        i_prof,
                                                                        pk_alert_constant.g_display_type_date_icon, -- i_display_type
                                                                        decode(r.flg_status,
                                                                               pk_ref_constant.g_p1_status_a,
                                                                               to_char(nvl(r.decision_urg_level,
                                                                                           pk_ref_constant.g_decision_urg_level_normal)),
                                                                               r.flg_status), -- i_flg_state
                                                                        NULL,
                                                                        to_char(r.dt_status_tstz,
                                                                                pk_alert_constant.g_dt_yyyymmddhh24miss), -- i_value_date
                                                                        decode(r.flg_status,
                                                                               pk_ref_constant.g_p1_status_a,
                                                                               'P1_TOSCHEDULE_GRID_ICON.1',
                                                                               'P1_EXTERNAL_REQUEST.FLG_STATUS'), -- i_value_icon (depends on referral status)
                                                                        NULL,
                                                                        '0xC86464', -- i_back_color
                                                                        '0xEBEBC8', -- i_icon_color
                                                                        NULL,
                                                                        NULL,
                                                                        NULL,
                                                                        current_timestamp)
                              FROM dual) status_icon,
                           NULL request_status_desc,
                           r.id_episode id_episode,
                           NULL status,
                           NULL flag_status,
                           l_na dependency_nr,
                           NULL id_clinical_service,
                           NULL id_exam,
                           NULL dt_req_begin,
                           NULL order_date,
                           NULL id_created_professional,
                           NULL notes,
                           r.flg_type flg_contact_type, -- referral type
                           (SELECT pk_ref_core.get_content(i_lang,
                                                           i_prof,
                                                           r.id_dep_clin_serv,
                                                           (SELECT pk_ref_dest_phy.get_suggested_physician(i_lang,
                                                                                                           i_prof,
                                                                                                           r.id_external_request)
                                                              FROM dual))
                              FROM dual) id_content,
                           r.id_workflow,
                           '' flg_type_of_external_resource,
                           NULL id_external_resource
                      FROM (SELECT p.id_external_request,
                                   p.id_workflow,
                                   p.flg_type,
                                   p.flg_status,
                                   p.id_speciality,
                                   p.id_inst_orig,
                                   p.id_inst_dest,
                                   p.id_dep_clin_serv,
                                   p.decision_urg_level,
                                   p.id_prof_requested,
                                   p.id_prof_redirected,
                                   p.id_prof_status,
                                   p.id_external_sys,
                                   p.dt_status_tstz,
                                   p.id_episode,
                                   cr.num_clin_record,
                                   p.id_patient,
                                   pt.gender
                              FROM p1_external_request p
                              JOIN patient pt
                                ON (pt.id_patient = p.id_patient)
                              LEFT JOIN clin_record cr
                                ON (pt.id_patient = cr.id_patient AND cr.flg_status = pk_ref_constant.g_active AND
                                   cr.id_institution = p.id_inst_dest AND cr.id_instit_enroled = cr.id_institution)
                             WHERE p.flg_status = pk_ref_constant.g_p1_status_a
                               AND EXISTS (SELECT 1
                                      FROM prof_dep_clin_serv pdcs
                                     WHERE pdcs.id_professional = i_prof.id
                                       AND pdcs.flg_status = pk_grid.g_selected
                                       AND pdcs.id_institution = i_prof.institution
                                       AND pdcs.id_dep_clin_serv = p.id_dep_clin_serv)
                               AND p.id_inst_dest = i_prof.institution
                               AND i_type IN ('A', 'R')) r) w;
    
        LOOP
            FETCH c_result
                INTO v_tab;
            EXIT WHEN c_result%NOTFOUND;
            PIPE ROW(v_tab);
        END LOOP;
    
        RETURN;
    
    END get_adm_patient_events_pl;

    FUNCTION get_adm_patient_comb_events_pl
    (
        i_lang                IN language.id_language%TYPE,
        i_prof                IN profissional,
        i_patient             IN patient.id_patient%TYPE,
        i_id_combination_spec IN combination_spec.id_combination_spec%TYPE
    ) RETURN t_coll_adm_future_event
        PIPELINED IS
    
        v_tab    t_rec_adm_future_event;
        c_result pk_types.cursor_type;
    
        g_category                category.flg_type%TYPE;
        l_epis_type_nurse         epis_type.id_epis_type%TYPE;
        l_epis_type_nutri         epis_type.id_epis_type%TYPE;
        l_therap_decision_consult translation.code_translation%TYPE;
    
        l_na            sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'N/A');
        l_date_sep      sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'FUTURE_EVENTS_T073');
        l_msg_suggested sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'FUTURE_EVENTS_T065');
        l_msg_scheduled sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'FUTURE_EVENTS_T066');
    
        l_id_category          category.id_category%TYPE;
        l_id_profile_template  profile_template.id_profile_template%TYPE;
        l_future_events_t017   sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T017');
        l_sch_complaint_origin sys_config.value%TYPE := nvl(pk_sysconfig.get_config(g_sch_complaint_origin, i_prof),
                                                            g_complaint);
    BEGIN
        g_error           := 'CALL GET_ADM_PATIENT_EVENTS_PL';
        g_category        := pk_prof_utils.get_category(i_lang, i_prof);
        l_epis_type_nurse := pk_sysconfig.get_config('ID_EPIS_TYPE_NURSE', i_prof);
        l_epis_type_nutri := pk_sysconfig.get_config('ID_EPIS_TYPE_NUTRITIONIST', i_prof);
    
        l_id_category         := pk_prof_utils.get_id_category(i_lang => i_lang, i_prof => i_prof);
        l_id_profile_template := pk_tools.get_prof_profile_template(i_prof);
    
        -- Consultas de decisao terapeutica
        SELECT pk_translation.get_translation(i_lang, se.code_sch_event_abrv)
          INTO l_therap_decision_consult
          FROM sch_event se
         WHERE se.id_sch_event = g_sch_event_therap_decision;
    
        OPEN c_result FOR
            SELECT t_rec_adm_future_event(w.sel_type,
                                          w.event_type,
                                          w.id_event,
                                          w.id_exam_req_det,
                                          w.id_exam_req,
                                          w.num_clin_record,
                                          w.id_event_type,
                                          w.event_type_icon,
                                          w.event_type_name_title,
                                          w.event_type_clinical_service,
                                          w.location,
                                          w.id_location,
                                          w.id_schedule,
                                          w.desc_dep_clin_serv,
                                          w.id_dep_clin_serv,
                                          w.id_professional,
                                          w.professional,
                                          w.nick_name,
                                          w.dt_request,
                                          w.dt_request_desc,
                                          w.dt_scheduled,
                                          w.dt_scheduled_desc,
                                          w.flg_status,
                                          w.desc_status,
                                          w.photo,
                                          w.id_patient,
                                          w.patient_name,
                                          w.pat_age,
                                          w.gender,
                                          w.id_complaint,
                                          w.desc_reason,
                                          w.id_prof_orig,
                                          w.desc_prof_orig,
                                          w.id_prof_dest,
                                          w.desc_prof_dest,
                                          w.dt_server,
                                          w.dt_proposed,
                                          w.request_date,
                                          w.status_desc,
                                          w.epis_id_dep_clin_serv,
                                          w.flg_epis_type,
                                          w.consult_decision,
                                          w.flg_can_ok,
                                          w.flg_can_cancel,
                                          w.status_icon,
                                          w.request_status_desc,
                                          w.id_episode,
                                          w.status,
                                          w.flag_status,
                                          w.id_clinical_service,
                                          w.id_exam,
                                          w.dt_req_begin,
                                          w.order_date,
                                          w.id_created_professional,
                                          w.notes,
                                          w.flg_contact_type,
                                          w.id_content,
                                          w.id_workflow,
                                          w.flg_type_of_external_resource,
                                          w.id_external_resource)
              FROM (SELECT 'C' sel_type,
                           'FUTURE_EVENTS' event_type,
                           k.id_consult_req id_event,
                           NULL id_exam_req_det,
                           NULL id_exam_req,
                           (SELECT cr.num_clin_record
                              FROM clin_record cr
                             WHERE cr.id_patient = k.id_pat
                               AND cr.id_institution = i_prof.institution
                               AND rownum < 2) num_clin_record,
                           (SELECT get_event_type_by_epis_type(k.id_epis_type)
                              FROM dual) id_event_type,
                           (SELECT get_event_type_icon((SELECT get_event_type_by_epis_type(k.id_epis_type)
                                                         FROM dual))
                              FROM dual) event_type_icon,
                           (SELECT get_event_type_title(i_lang,
                                                        (SELECT get_event_type_by_epis_type(k.id_epis_type)
                                                           FROM dual))
                              FROM dual) event_type_name_title,
                           (SELECT pk_translation.get_translation(i_lang, k.code_clinical_service)
                              FROM dual) event_type_clinical_service,
                           (SELECT pk_utils.get_institution_name(i_lang, k.id_inst_requested)
                              FROM dual) location,
                           k.id_inst_requested id_location,
                           k.id_schedule,
                           k.desc_dep_clin_serv,
                           k.id_dep_clin_serv,
                           k.id_professional,
                           k.professional,
                           k.nick_name,
                           k.dt_request,
                           k.dt_request_desc,
                           k.dt_scheduled,
                           k.dt_scheduled_desc,
                           k.flg_status,
                           k.desc_status,
                           (SELECT pk_patphoto.get_pat_photo(i_lang, i_prof, k.id_pat, NULL, k.id_schedule)
                              FROM dual) photo,
                           k.id_pat id_patient,
                           k.patient_name,
                           (SELECT pk_patient.get_pat_age(i_lang, k.id_pat, i_prof)
                              FROM dual) pat_age,
                           (SELECT pk_patient.get_gender(i_lang, k.patient_gender)
                              FROM dual) gender,
                           CASE
                                WHEN l_sch_complaint_origin = g_complaint THEN
                                 k.reason_visit
                                ELSE
                                 NULL
                            END id_complaint,
                           decode(l_sch_complaint_origin,
                                  g_complaint,
                                  (SELECT pk_translation.get_translation(i_lang, c.code_complaint)
                                     FROM complaint c
                                    WHERE c.id_complaint = k.reason_visit
                                      AND rownum = 1),
                                  k.reason_for_visit) desc_reason,
                           k.id_prof_orig id_prof_orig,
                           k.desc_prof_orig desc_prof_orig,
                           k.id_prof_dest id_prof_dest,
                           k.desc_prof_dest desc_prof_dest,
                           (SELECT pk_date_utils.date_send_tsz(i_lang, current_timestamp, i_prof)
                              FROM dual) dt_server,
                           nvl(k.dt_proposed,
                               nvl2(k.dt_end_event,
                                    (SELECT pk_date_utils.dt_chr(i_lang,
                                                                 (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                       k.id_instit_requests,
                                                                                                                       NULL),
                                                                                                          k.dt_begin_event)
                                                                    FROM dual),
                                                                 i_prof)
                                       FROM dual) || g_space || l_date_sep || g_space ||
                                    (SELECT pk_date_utils.dt_chr(i_lang,
                                                                 (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                       k.id_instit_requests,
                                                                                                                       NULL),
                                                                                                          k.dt_end_event)
                                                                    FROM dual),
                                                                 i_prof)
                                       FROM dual),
                                    (SELECT pk_date_utils.dt_chr(i_lang,
                                                                 (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                       k.id_instit_requests,
                                                                                                                       NULL),
                                                                                                          k.dt_begin_event)
                                                                    FROM dual),
                                                                 i_prof)
                                       FROM dual))) dt_proposed,
                           nvl(k.request_date,
                               nvl2(k.dt_end_event,
                                    (SELECT pk_date_utils.dt_chr(i_lang,
                                                                 (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                       k.id_instit_requests,
                                                                                                                       NULL),
                                                                                                          k.dt_begin_event)
                                                                    FROM dual),
                                                                 i_prof)
                                       FROM dual) || g_space || l_date_sep || g_space ||
                                    (SELECT pk_date_utils.dt_chr(i_lang,
                                                                 (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                       k.id_instit_requests,
                                                                                                                       NULL),
                                                                                                          k.dt_end_event)
                                                                    FROM dual),
                                                                 i_prof)
                                       FROM dual),
                                    (SELECT pk_date_utils.dt_chr(i_lang,
                                                                 (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                       k.id_instit_requests,
                                                                                                                       NULL),
                                                                                                          k.dt_begin_event)
                                                                    FROM dual),
                                                                 i_prof)
                                       FROM dual))) request_date,
                           k.status_desc status_desc,
                           k.epis_id_dep_clin_serv,
                           k.flg_epis_type,
                           k.consult_decision,
                           decode(k.flg_status,
                                  g_visit_sched_stat_cancelled,
                                  pk_alert_constant.g_no,
                                  g_visit_sched_stat_scheduled,
                                  pk_alert_constant.g_no,
                                  pk_alert_constant.g_yes) flg_can_ok,
                           decode(k.flg_status,
                                  g_visit_sched_stat_cancelled,
                                  pk_alert_constant.g_no,
                                  g_visit_sched_stat_scheduled,
                                  pk_alert_constant.g_no,
                                  pk_alert_constant.g_yes) flg_can_cancel,
                           k.status_icon,
                           k.request_status_desc,
                           k.id_episode,
                           (SELECT pk_sysdomain.get_domain('CONSULT_REQ.FLG_STATUS', k.flag_status, i_lang)
                              FROM dual) status,
                           k.flag_status,
                           l_na dependency_nr,
                           NULL id_clinical_service,
                           NULL id_exam,
                           (SELECT pk_date_utils.date_send_tsz(i_lang, nvl(k.dt_proposed1, k.dt_begin_event), i_prof)
                              FROM dual) dt_req_begin,
                           k.order_date order_date,
                           k.id_created_professional,
                           k.notes,
                           k.flg_contact_type,
                           NULL id_content,
                           NULL id_workflow,
                           k.flg_type_of_external_resource,
                           k.id_external_resource
                      FROM (SELECT /*+ index(cr CR_INST_REQ_FLG_ST) */
                             cr.id_consult_req,
                             NULL id_schedule,
                             NULL id_exam_req_det,
                             NULL id_exam_req,
                             (SELECT pk_schedule.string_clin_serv_by_dcs(i_lang, cr.id_dep_clin_serv)
                                FROM dual) desc_dep_clin_serv,
                             cr.id_dep_clin_serv,
                             nvl(cr.id_prof_requested,
                                 (SELECT rp.id_professional
                                    FROM request_prof rp
                                   WHERE rp.id_consult_req = cr.id_consult_req
                                     AND rp.flg_active = pk_alert_constant.g_yes
                                     AND rownum = 1)) id_professional,
                             nvl2(cr.id_prof_requested,
                                  (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_requested)
                                     FROM dual),
                                  (SELECT pk_events.get_fe_request_prof_str(i_lang,
                                                                            i_prof,
                                                                            cr.id_consult_req,
                                                                            pk_alert_constant.g_no)
                                     FROM dual)) professional,
                             nvl2(cr.id_prof_requested,
                                  (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_requested)
                                     FROM dual),
                                  (SELECT pk_events.get_fe_request_prof_str(i_lang,
                                                                            i_prof,
                                                                            cr.id_consult_req,
                                                                            pk_alert_constant.g_no)
                                     FROM dual)) nick_name,
                             (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                                 (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                       cr.id_instit_requests,
                                                                                                                       NULL),
                                                                                                          nvl(cr.dt_last_update,
                                                                                                              cr.dt_consult_req_tstz))
                                                                    FROM dual),
                                                                 i_prof)
                                FROM dual) dt_request,
                             (SELECT pk_date_utils.date_char_hour_tsz(i_lang,
                                                                      nvl(cr.dt_last_update, cr.dt_consult_req_tstz),
                                                                      i_prof.institution,
                                                                      i_prof.software)
                                FROM dual) || chr(10) || (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                                                          (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                                                cr.id_instit_requests,
                                                                                                                                                NULL),
                                                                                                                                   nvl(cr.dt_last_update,
                                                                                                                                       cr.dt_consult_req_tstz))
                                                                                             FROM dual),
                                                                                          i_prof)
                                                            FROM dual) dt_request_desc,
                             NULL dt_scheduled,
                             NULL dt_scheduled_desc,
                             decode(cr.flg_status,
                                    pk_consult_req.g_consult_req_stat_reply,
                                    g_visit_sched_stat_requested,
                                    pk_consult_req.g_consult_req_stat_cancel,
                                    g_visit_sched_stat_cancelled) flg_status,
                             (SELECT pk_schedule.get_domain_desc(i_lang,
                                                                 g_flg_status_domain,
                                                                 decode(cr.flg_status,
                                                                        pk_consult_req.g_consult_req_stat_reply,
                                                                        g_visit_sched_stat_requested,
                                                                        pk_consult_req.g_consult_req_stat_cancel,
                                                                        g_visit_sched_stat_cancelled))
                                FROM dual) desc_status,
                             cr.id_patient id_pat,
                             cr.id_complaint reason_visit,
                             cr.id_prof_req id_prof_orig,
                             (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_req)
                                FROM dual) desc_prof_orig,
                             CASE
                                  WHEN cr.id_prof_requested IS NULL THEN
                                   (SELECT p2.id_professional
                                      FROM professional p2, consult_req_prof crp
                                     WHERE crp.id_professional = p2.id_professional
                                       AND crp.id_consult_req = cr.id_consult_req
                                       AND rownum = 1)
                                  ELSE
                                   cr.id_prof_requested
                              END id_prof_dest,
                             CASE
                                  WHEN cr.id_prof_requested IS NULL THEN
                                   (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, p2.id_professional)
                                      FROM professional p2, consult_req_prof crp
                                     WHERE crp.id_professional = p2.id_professional
                                       AND crp.id_consult_req = cr.id_consult_req
                                       AND rownum = 1)
                                  ELSE
                                   (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_requested)
                                      FROM dual)
                              END desc_prof_dest,
                             (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                                 (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                       cr.id_instit_requests,
                                                                                                                       NULL),
                                                                                                          nvl(cr.dt_scheduled_tstz,
                                                                                                              nvl(cr.dt_begin_event,
                                                                                                                  cr.dt_consult_req_tstz)))
                                                                    FROM dual),
                                                                 i_prof)
                                FROM dual) dt_proposed,
                             nvl(cr.dt_scheduled_tstz, nvl(cr.dt_begin_event, cr.dt_consult_req_tstz)) dt_proposed1,
                             (SELECT pk_date_utils.dt_chr(i_lang,
                                                          (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                cr.id_instit_requests,
                                                                                                                NULL),
                                                                                                   nvl(cr.dt_scheduled_tstz,
                                                                                                       cr.dt_begin_event))
                                                             FROM dual),
                                                          i_prof)
                                FROM dual) request_date,
                             (SELECT pk_utils.get_status_string(i_lang,
                                                                i_prof,
                                                                cr.status_str,
                                                                cr.status_msg,
                                                                cr.status_icon,
                                                                cr.status_flg)
                                FROM dual) status_desc,
                             cr.id_dep_clin_serv epis_id_dep_clin_serv,
                             decode((SELECT pk_episode.get_epis_type(i_lang, cr.id_episode)
                                      FROM dual),
                                    l_epis_type_nurse,
                                    g_epis_type_nurse,
                                    l_epis_type_nutri,
                                    g_epis_type_nutri,
                                    decode((SELECT COUNT(1)
                                             FROM adm_request ar
                                            WHERE ar.id_nit_req = cr.id_consult_req),
                                           1,
                                           g_epis_type_nurse,
                                           decode((SELECT pk_prof_utils.get_category(i_lang,
                                                                                    profissional(cr.id_prof_requested,
                                                                                                 i_prof.institution,
                                                                                                 i_prof.software))
                                                    FROM dual),
                                                  g_epis_type_nutri,
                                                  g_epis_type_nutri,
                                                  g_epis_type_consult))) flg_epis_type,
                             cr.reason_for_visit,
                             (SELECT decode(s.id_sch_event, g_sch_event_therap_decision, l_therap_decision_consult, NULL)
                                FROM schedule s
                               WHERE s.id_schedule = (SELECT ei.id_schedule
                                                        FROM epis_info ei
                                                       WHERE ei.id_episode = cr.id_episode)) consult_decision,
                             nvl(cr.id_epis_type, get_epis_type_consult_req(cr.id_consult_req)) id_epis_type,
                             (SELECT cs.code_clinical_service
                                FROM dep_clin_serv dcs
                                JOIN clinical_service cs
                                  ON cs.id_clinical_service = dcs.id_clinical_service
                               WHERE dcs.id_dep_clin_serv = cr.id_dep_clin_serv) code_clinical_service,
                             cr.dt_begin_event,
                             cr.dt_end_event,
                             cr.id_inst_requested,
                             cr.id_instit_requests,
                             (SELECT pk_patient.get_pat_name(i_lang, i_prof, cr.id_patient, NULL)
                                FROM dual) patient_name,
                             (SELECT pk_patient.get_pat_gender(cr.id_patient)
                                FROM dual) patient_gender,
                             cr.status_str,
                             cr.status_msg,
                             CASE
                                  WHEN cr.flg_status = pk_consult_req.g_consult_req_stat_cancel THEN
                                   (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                                i_prof,
                                                                                pk_alert_constant.g_display_type_icon,
                                                                                cr.flg_status,
                                                                                NULL,
                                                                                NULL,
                                                                                'CONSULT_REQ.FLG_STATUS')
                                      FROM dual)
                                  WHEN cr.flg_status = pk_consult_req.g_consult_req_hold_list THEN
                                   (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                                i_prof,
                                                                                pk_alert_constant.g_display_type_icon,
                                                                                pk_consult_req.g_consult_req_hold_list,
                                                                                NULL,
                                                                                NULL,
                                                                                'CONSULT_REQ.FLG_STATUS',
                                                                                NULL,
                                                                                NULL,
                                                                                NULL,
                                                                                NULL,
                                                                                NULL,
                                                                                NULL,
                                                                                NULL)
                                      FROM dual)
                                  ELSE
                                   (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                                i_prof,
                                                                                pk_alert_constant.g_display_type_date_icon,
                                                                                pk_consult_req.g_consult_req_stat_reply,
                                                                                NULL,
                                                                                to_char(nvl(cr.dt_last_update,
                                                                                            cr.dt_consult_req_tstz),
                                                                                        pk_alert_constant.g_dt_yyyymmddhh24miss),
                                                                                'CONSULT_REQ.FLG_STATUS',
                                                                                NULL,
                                                                                '0xC86464',
                                                                                '0xEBEBC8',
                                                                                NULL,
                                                                                NULL,
                                                                                NULL,
                                                                                current_timestamp)
                                      FROM dual)
                              END status_icon,
                             cr.status_flg,
                             l_msg_suggested request_status_desc,
                             cr.id_episode,
                             cr.flg_status flag_status,
                             (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                                 nvl(cr.dt_scheduled_tstz, cr.dt_begin_event),
                                                                 i_prof)
                                FROM dual) order_date,
                             (SELECT get_id_prof_create_consult_req(cr.id_consult_req)
                                FROM dual) id_created_professional,
                             cr.notes notes,
                             cr.flg_contact_type,
                             g_resourcetype flg_type_of_external_resource,
                             nvl(cr.id_prof_requested,
                                 (SELECT rp.id_professional
                                    FROM request_prof rp
                                   WHERE rp.id_consult_req = cr.id_consult_req
                                     AND rp.flg_active = pk_alert_constant.g_yes
                                     AND rownum = 1)) id_external_resource
                              FROM consult_req cr
                              JOIN combination_events cev
                                ON cev.id_event = cr.id_consult_req
                               AND cev.id_future_event_type = (SELECT get_event_type_by_epis_type(cr.id_epis_type)
                                                                 FROM dual)
                               AND cev.flg_status = 'A'
                              JOIN combination_spec csp
                                ON csp.id_combination_spec = cev.id_combination_spec
                               AND cev.flg_status = 'A'
                             WHERE cr.id_patient = i_patient
                               AND (cr.id_schedule IS NULL OR EXISTS
                                    (SELECT 0
                                       FROM schedule s
                                      WHERE s.id_schedule = cr.id_schedule
                                        AND s.flg_status = pk_schedule.g_sch_canceled))
                               AND (cr.id_dep_clin_serv IS NULL OR EXISTS
                                    (SELECT 0
                                       FROM prof_dep_clin_serv pdcs
                                      WHERE pdcs.id_dep_clin_serv = cr.id_dep_clin_serv
                                        AND pdcs.id_professional = i_prof.id
                                        AND pdcs.flg_status = pk_schedule.g_status_pdcs_selected))
                               AND cr.id_inst_requested = i_prof.institution
                               AND cr.flg_status IN (pk_consult_req.g_consult_req_stat_reply,
                                                     pk_consult_req.g_consult_req_stat_cancel,
                                                     pk_consult_req.g_consult_req_hold_list)
                               AND (g_category = g_flg_type_a OR EXISTS
                                    (SELECT 0
                                       FROM sch_permission sp
                                      WHERE sp.id_institution = i_prof.institution
                                        AND sp.id_dep_clin_serv = cr.id_dep_clin_serv
                                        AND sp.id_professional = i_prof.id
                                        AND (sp.id_prof_agenda = cr.id_prof_requested OR cr.id_prof_requested IS NULL)
                                        AND (sp.flg_permission = pk_schedule.g_permission_schedule)))
                               AND ((cr.flg_status != pk_consult_req.g_consult_req_stat_cancel) OR
                                   (cr.flg_status = pk_consult_req.g_consult_req_stat_cancel AND
                                   trunc(cr.dt_cancel_tstz, 'DD') >= trunc(current_timestamp, 'DD')))
                            UNION ALL
                            SELECT cr.id_consult_req,
                                   s.id_schedule,
                                   NULL id_exam_req_det,
                                   NULL id_exam_req,
                                   (SELECT pk_schedule.string_clin_serv_by_dcs(i_lang, s.id_dcs_requested)
                                      FROM dual) desc_dep_clin_serv,
                                   s.id_dcs_requested id_dep_clin_serv,
                                   sr.id_professional id_professional,
                                   (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, sr.id_professional)
                                      FROM dual) professional,
                                   (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, sr.id_professional)
                                      FROM dual) nick_name,
                                   (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                                       (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                             cr.id_instit_requests,
                                                                                                                             NULL),
                                                                                                                nvl(cr.dt_last_update,
                                                                                                                    cr.dt_consult_req_tstz))
                                                                          FROM dual),
                                                                       i_prof)
                                      FROM dual) dt_request,
                                   (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                                    (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                          cr.id_instit_requests,
                                                                                                                          NULL),
                                                                                                             nvl(cr.dt_last_update,
                                                                                                                 cr.dt_consult_req_tstz))
                                                                       FROM dual),
                                                                    i_prof)
                                      FROM dual) dt_request_desc,
                                   (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                                       (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                             cr.id_instit_requests,
                                                                                                                             NULL),
                                                                                                                s.dt_begin_tstz)
                                                                          FROM dual),
                                                                       i_prof)
                                      FROM dual) dt_scheduled,
                                   (SELECT pk_date_utils.date_char_hour_tsz(i_lang,
                                                                            s.dt_begin_tstz,
                                                                            i_prof.institution,
                                                                            i_prof.software)
                                      FROM dual) || chr(10) || (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                                                                (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                                                      cr.id_instit_requests,
                                                                                                                                                      NULL),
                                                                                                                                         s.dt_begin_tstz)
                                                                                                   FROM dual),
                                                                                                i_prof)
                                                                  FROM dual) dt_scheduled_desc,
                                   g_visit_sched_stat_scheduled flg_status,
                                   (SELECT pk_schedule.get_domain_desc(i_lang,
                                                                       g_flg_status_domain,
                                                                       g_visit_sched_stat_scheduled)
                                      FROM dual) desc_status,
                                   sg.id_patient id_pat,
                                   decode(s.flg_reason_type, 'C', s.id_reason, NULL) reason_visit,
                                   cr.id_prof_req id_prof_orig,
                                   (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_req)
                                      FROM dual) desc_prof_orig,
                                   ei.sch_prof_outp_id_prof id_prof_dest,
                                   (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, ei.sch_prof_outp_id_prof)
                                      FROM dual) desc_prof_dest,
                                   (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                                       (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                             cr.id_instit_requests,
                                                                                                                             NULL),
                                                                                                                nvl(cr.dt_scheduled_tstz,
                                                                                                                    nvl(cr.dt_begin_event,
                                                                                                                        cr.dt_consult_req_tstz)))
                                                                          FROM dual),
                                                                       i_prof)
                                      FROM dual) dt_proposed,
                                   nvl(cr.dt_scheduled_tstz, nvl(cr.dt_begin_event, cr.dt_consult_req_tstz)) dt_proposed1,
                                   (SELECT pk_date_utils.dt_chr(i_lang,
                                                                (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                      cr.id_instit_requests,
                                                                                                                      NULL),
                                                                                                         nvl(cr.dt_scheduled_tstz,
                                                                                                             cr.dt_begin_event))
                                                                   FROM dual),
                                                                i_prof)
                                      FROM dual) request_date,
                                   (SELECT pk_utils.get_status_string(i_lang,
                                                                      i_prof,
                                                                      cr.status_str,
                                                                      cr.status_msg,
                                                                      cr.status_icon,
                                                                      cr.status_flg)
                                      FROM dual) status_desc,
                                   ei.id_dep_clin_serv epis_id_dep_clin_serv,
                                   decode(so.id_epis_type,
                                          l_epis_type_nurse,
                                          g_epis_type_nurse,
                                          l_epis_type_nutri,
                                          g_epis_type_nutri,
                                          decode((SELECT COUNT(1)
                                                   FROM adm_request ar
                                                  WHERE ar.id_nit_req = cr.id_consult_req),
                                                 1,
                                                 g_epis_type_nurse,
                                                 g_epis_type_consult)) flg_epis_type,
                                   cr.reason_for_visit,
                                   decode(s.id_sch_event, g_sch_event_therap_decision, l_therap_decision_consult, NULL) consult_decision,
                                   nvl(cr.id_epis_type, get_epis_type_consult_req(cr.id_consult_req)) id_epis_type,
                                   (SELECT cs.code_clinical_service
                                      FROM dep_clin_serv dcs
                                      JOIN clinical_service cs
                                        ON cs.id_clinical_service = dcs.id_clinical_service
                                     WHERE dcs.id_dep_clin_serv = cr.id_dep_clin_serv) code_clinical_service,
                                   cr.dt_begin_event,
                                   cr.dt_end_event,
                                   cr.id_inst_requested,
                                   cr.id_instit_requests,
                                   pt.name patient_name,
                                   pt.gender patient_gender,
                                   cr.status_str,
                                   cr.status_msg,
                                   (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                                i_prof,
                                                                                pk_alert_constant.g_display_type_date_icon,
                                                                                pk_consult_req.g_consult_req_stat_reply,
                                                                                NULL,
                                                                                to_char(nvl(cr.dt_last_update,
                                                                                            cr.dt_consult_req_tstz),
                                                                                        pk_alert_constant.g_dt_yyyymmddhh24miss),
                                                                                'CONSULT_REQ.FLG_STATUS',
                                                                                NULL,
                                                                                '0xC86464',
                                                                                '0xEBEBC8',
                                                                                NULL,
                                                                                NULL,
                                                                                NULL,
                                                                                current_timestamp)
                                      FROM dual) status_icon,
                                   cr.status_flg,
                                   l_msg_scheduled request_status_desc,
                                   cr.id_episode,
                                   cr.flg_status flag_status,
                                   --pk_date_utils.date_send_tsz(i_lang,nvl(cr.dt_last_update, cr.dt_consult_req_tstz),i_prof) order_date,
                                   (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                                       nvl(cr.dt_scheduled_tstz, cr.dt_begin_event),
                                                                       i_prof)
                                      FROM dual) order_date,
                                   (SELECT get_id_prof_create_consult_req(cr.id_consult_req)
                                      FROM dual) id_created_professional,
                                   cr.notes notes,
                                   sg.flg_contact_type,
                                   '' flg_type_of_external_resource,
                                   NULL id_external_resource
                              FROM schedule s
                              JOIN sch_group sg
                                ON (sg.id_schedule = s.id_schedule)
                              JOIN patient pt
                                ON (pt.id_patient = sg.id_patient)
                              JOIN consult_req cr
                                ON (cr.id_schedule = s.id_schedule)
                              JOIN epis_info ei
                                ON (ei.id_episode = cr.id_episode)
                              JOIN schedule_outp so
                                ON (so.id_schedule = s.id_schedule)
                              LEFT JOIN sch_resource sr
                                ON (sr.id_schedule = s.id_schedule)
                              JOIN combination_events cev
                                ON cev.id_event = cr.id_consult_req
                               AND cev.id_future_event_type = (SELECT get_event_type_by_epis_type(cr.id_epis_type)
                                                                 FROM dual)
                               AND cev.flg_status = 'A'
                              JOIN combination_spec csp
                                ON csp.id_combination_spec = cev.id_combination_spec
                               AND cev.flg_status = 'A'
                             WHERE cr.id_patient = i_patient
                               AND s.id_instit_requested = i_prof.institution
                               AND s.id_dcs_requested IN
                                   (SELECT pdcs.id_dep_clin_serv
                                      FROM prof_dep_clin_serv pdcs
                                     WHERE pdcs.id_dep_clin_serv = s.id_dcs_requested
                                       AND pdcs.id_professional = i_prof.id
                                       AND pdcs.flg_status = pk_schedule.g_status_pdcs_selected)
                               AND s.flg_status = pk_schedule.g_status_scheduled
                               AND s.dt_begin_tstz >= (SELECT pk_date_utils.trunc_insttimezone(i_prof, current_timestamp)
                                                         FROM dual)
                               AND s.flg_sch_type = pk_schedule_common.g_sch_dept_flg_dep_type_cons
                               AND cr.flg_status NOT IN (pk_consult_req.g_consult_req_stat_proc)
                               AND EXISTS
                             (SELECT 0
                                      FROM sch_permission sp
                                     WHERE sp.id_institution = i_prof.institution
                                       AND (sp.id_prof_agenda = sr.id_professional OR sr.id_professional IS NULL OR
                                           sp.id_professional IS NULL)
                                       AND (sp.id_dep_clin_serv = s.id_dcs_requested OR sp.id_dep_clin_serv IS NULL)
                                       AND (sp.flg_permission = pk_schedule.g_permission_schedule)
                                       AND (sp.id_sch_event = s.id_sch_event))
                               AND trunc(s.dt_schedule_tstz, 'DD') >= trunc(current_timestamp, 'DD')
                               AND ((so.id_epis_type = pk_sysconfig.get_config('ID_EPIS_TYPE_NURSE', i_prof) AND
                                   g_category = g_flg_type_n) OR g_category != g_flg_type_n)) k
                    -------------------  EXAMES DE IMAGEM  -----------------                      
                    UNION ALL
                    SELECT 'I' sel_type,
                           'IMAGING_EXAMS' event_type,
                           ex.id_exam_req_det id_event,
                           ex.id_exam_req_det,
                           ex.id_exam_req,
                           (SELECT cr.num_clin_record
                              FROM clin_record cr
                             WHERE cr.id_patient = ex.id_patient
                               AND cr.id_institution = i_prof.institution
                               AND rownum < 2) num_clin_record,
                           pk_events.g_event_type_iexam id_event_type,
                           (SELECT get_event_type_icon(pk_events.g_event_type_iexam)
                              FROM dual) event_type_icon,
                           (SELECT get_event_type_title(i_lang, pk_events.g_event_type_iexam)
                              FROM dual) event_type_name_title,
                           (SELECT pk_exams_api_db.get_alias_translation(i_lang,
                                                                         i_prof,
                                                                         'EXAM.CODE_EXAM.' || ex.id_exam,
                                                                         NULL)
                              FROM dual) event_type_clinical_service,
                           (SELECT pk_utils.get_institution_name(i_lang, ex.id_institution)
                              FROM dual) location,
                           ex.id_institution id_location,
                           ex.id_schedule id_schedule,
                           NULL desc_dep_clin_serv,
                           NULL id_dep_clin_serv,
                           NULL id_professional,
                           NULL professional,
                           NULL nick_name,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ex.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ex.dt_begin_tstz,
                                                                                                         ex.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_request,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ex.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ex.dt_begin_tstz,
                                                                                                         ex.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_request_desc,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ex.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ex.dt_begin_tstz,
                                                                                                         ex.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_scheduled,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ex.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ex.dt_begin_tstz,
                                                                                                         ex.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_scheduled_desc,
                           ex.flg_status_req_det flg_status,
                           l_msg_suggested desc_status,
                           (SELECT pk_patphoto.get_pat_photo(i_lang, i_prof, ex.id_patient, NULL, ex.id_schedule)
                              FROM dual) photo,
                           ex.id_patient id_patient,
                           name patient_name,
                           (SELECT pk_patient.get_pat_age(i_lang, ex.id_patient, i_prof)
                              FROM dual) pat_age,
                           (SELECT pk_patient.get_gender(i_lang, ex.gender)
                              FROM dual) gender,
                           NULL id_complaint,
                           NULL desc_reason,
                           ex.id_prof_req id_prof_orig,
                           (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, ex.id_prof_req)
                              FROM dual) desc_prof_orig,
                           NULL id_prof_dest,
                           NULL desc_prof_dest,
                           (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                               (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                     ex.id_institution,
                                                                                                                     NULL),
                                                                                                        current_timestamp)
                                                                  FROM dual),
                                                               i_prof)
                              FROM dual) dt_server,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ex.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ex.dt_begin_tstz,
                                                                                                         ex.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_proposed,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ex.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ex.dt_begin_tstz,
                                                                                                         ex.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) request_date,
                           (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                        i_prof,
                                                                        pk_alert_constant.g_display_type_icon,
                                                                        decode(ex.flg_status_req_det,
                                                                               pk_exam_constant.g_exam_nr,
                                                                               pk_exam_constant.g_exam_tosched,
                                                                               ex.flg_status_req_det),
                                                                        NULL,
                                                                        NULL,
                                                                        'EXAM_REQ_DET.FLG_STATUS')
                              FROM dual) status_desc,
                           
                           NULL epis_id_dep_clin_serv,
                           NULL flg_epis_type,
                           NULL consult_decision,
                           NULL flg_can_ok,
                           NULL flg_can_cancel,
                           (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                        i_prof,
                                                                        pk_alert_constant.g_display_type_date_icon,
                                                                        pk_consult_req.g_consult_req_stat_reply,
                                                                        NULL,
                                                                        to_char(nvl(ex.dt_req_tstz,
                                                                                    nvl(ex.dt_begin_tstz,
                                                                                        ex.dt_schedule_tstz)),
                                                                                pk_alert_constant.g_dt_yyyymmddhh24miss),
                                                                        'CONSULT_REQ.FLG_STATUS',
                                                                        NULL,
                                                                        '0xC86464',
                                                                        '0xEBEBC8',
                                                                        NULL,
                                                                        NULL,
                                                                        NULL,
                                                                        current_timestamp)
                              FROM dual) status_icon,
                           nvl2(nvl(ex.dt_begin_tstz, ex.dt_schedule_tstz), l_msg_suggested, NULL) request_status_desc,
                           ex.id_episode id_episode,
                           (SELECT pk_sysdomain.get_domain(i_lang,
                                                           i_prof,
                                                           'EXAM_REQ_DET.FLG_STATUS',
                                                           ex.flg_status_req_det,
                                                           NULL)
                              FROM dual) status,
                           ex.flg_status_req_det flag_status,
                           l_na dependency_nr,
                           ex.id_clinical_service,
                           ex.id_exam,
                           (SELECT pk_date_utils.date_send_tsz(i_lang, nvl(ex.dt_begin_tstz, ex.dt_schedule_tstz), i_prof)
                              FROM dual) dt_req_begin,
                           (SELECT pk_date_utils.date_send_tsz(i_lang, nvl(ex.dt_begin_tstz, ex.dt_schedule_tstz), i_prof)
                              FROM dual) order_date,
                           ex.id_prof_req id_created_professional,
                           NULL notes,
                           NULL flg_contact_type,
                           NULL id_content,
                           NULL id_workflow,
                           g_flgtype flg_type_of_external_resource,
                           ex.id_room id_external_resource
                      FROM (SELECT DISTINCT gti.id_patient,
                                            pt.age,
                                            gti.num_clin_record,
                                            gti.id_episode,
                                            gti.id_dept,
                                            gti.id_clinical_service,
                                            gti.id_professional,
                                            gti.id_exam_cat,
                                            gti.id_exam,
                                            gti.dt_schedule_tstz,
                                            er.notes,
                                            gti.dt_begin_tstz,
                                            gti.id_exam_req,
                                            gti.id_exam_req_det,
                                            gti.flg_status_req_det,
                                            gti.dt_req_tstz,
                                            er.id_prof_req,
                                            er.id_institution,
                                            er.id_schedule,
                                            gti.flg_req_origin_module,
                                            pt.gender,
                                            pt.name,
                                            gti.id_room
                              FROM grid_task_img gti
                              JOIN exam_req er
                                ON er.id_exam_req = gti.id_exam_req
                              JOIN exam_cat_dcs ecdcs
                                ON ecdcs.id_exam_cat = gti.id_exam_cat
                              JOIN patient pt
                                ON pt.id_patient = gti.id_patient
                              JOIN combination_events cev
                                ON cev.id_event = gti.id_exam_req_det
                               AND cev.id_future_event_type = pk_events.g_event_type_iexam
                               AND cev.flg_status = 'A'
                              JOIN combination_spec csp
                                ON csp.id_combination_spec = cev.id_combination_spec
                               AND cev.flg_status = 'A'
                             WHERE gti.id_patient = i_patient
                               AND gti.id_institution = i_prof.institution
                               AND ((gti.flg_status_req_det = pk_grid.g_exam_req_tosched AND gti.dt_begin_tstz IS NULL) OR
                                   gti.flg_status_req_det = pk_grid.g_exam_req_nr)
                               AND EXISTS (SELECT 1
                                      FROM prof_dep_clin_serv pdcs
                                     WHERE pdcs.id_professional = i_prof.id
                                       AND pdcs.flg_status = pk_grid.g_selected
                                       AND pdcs.id_institution = i_prof.institution
                                       AND pdcs.id_dep_clin_serv = ecdcs.id_dep_clin_serv)) ex
                    UNION ALL
                    -------------------  OUTROS EXAMES  -----------------                                                                                                      
                    SELECT 'E' sel_type,
                           'OTHER_EXAMS' event_type,
                           ox.id_exam_req_det id_event,
                           ox.id_exam_req_det,
                           ox.id_exam_req,
                           ox.num_clin_record num_clin_record,
                           pk_events.g_event_type_oexam id_event_type,
                           (SELECT get_event_type_icon(pk_events.g_event_type_oexam)
                              FROM dual) event_type_icon,
                           (SELECT get_event_type_title(i_lang, pk_events.g_event_type_oexam)
                              FROM dual) event_type_name_title,
                           (SELECT pk_exams_api_db.get_alias_translation(i_lang,
                                                                         i_prof,
                                                                         'EXAM.CODE_EXAM.' || ox.id_exam,
                                                                         NULL)
                              FROM dual) event_type_clinical_service,
                           (SELECT pk_utils.get_institution_name(i_lang, ox.id_institution)
                              FROM dual) location,
                           ox.id_institution id_location,
                           ox.id_schedule id_schedule,
                           NULL desc_dep_clin_serv,
                           NULL id_dep_clin_serv,
                           NULL id_professional,
                           NULL professional,
                           NULL nick_name,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ox.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ox.dt_begin_tstz,
                                                                                                         ox.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_request,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ox.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ox.dt_begin_tstz,
                                                                                                         ox.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_request_desc,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ox.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ox.dt_begin_tstz,
                                                                                                         ox.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_scheduled,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ox.id_institution,
                                                                                                                  NULL),
                                                                                                     nvl(ox.dt_begin_tstz,
                                                                                                         ox.dt_schedule_tstz))
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_scheduled_desc,
                           ox.flg_status_req_det flg_status,
                           l_msg_suggested desc_status,
                           
                           (SELECT pk_patphoto.get_pat_photo(i_lang, i_prof, ox.id_patient, NULL, ox.id_schedule)
                              FROM dual) photo,
                           ox.id_patient id_patient,
                           name patient_name,
                           (SELECT pk_patient.get_pat_age(i_lang, ox.id_patient, i_prof)
                              FROM dual) pat_age,
                           (SELECT pk_patient.get_gender(i_lang, ox.gender)
                              FROM dual) gender,
                           NULL id_complaint,
                           NULL desc_reason,
                           ox.id_prof_req id_prof_orig,
                           (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, ox.id_prof_req)
                              FROM dual) desc_prof_orig,
                           NULL id_prof_dest,
                           NULL desc_prof_dest,
                           (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                               (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                     ox.id_institution,
                                                                                                                     NULL),
                                                                                                        current_timestamp)
                                                                  FROM dual),
                                                               i_prof)
                              FROM dual) dt_server,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ox.id_institution,
                                                                                                                  NULL),
                                                                                                     dt_schedule_tstz)
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) dt_proposed,
                           (SELECT pk_date_utils.dt_chr_tsz(i_lang,
                                                            (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                  ox.id_institution,
                                                                                                                  NULL),
                                                                                                     dt_schedule_tstz)
                                                               FROM dual),
                                                            i_prof)
                              FROM dual) request_date,
                           (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                        i_prof,
                                                                        pk_alert_constant.g_display_type_icon,
                                                                        decode(ox.flg_status_req_det,
                                                                               pk_exam_constant.g_exam_nr,
                                                                               pk_exam_constant.g_exam_tosched,
                                                                               ox.flg_status_req_det),
                                                                        NULL,
                                                                        NULL,
                                                                        'EXAM_REQ_DET.FLG_STATUS')
                              FROM dual) status_desc,
                           NULL epis_id_dep_clin_serv,
                           NULL flg_epis_type,
                           NULL consult_decision,
                           NULL flg_can_ok,
                           NULL flg_can_cancel,
                           (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                        i_prof,
                                                                        pk_alert_constant.g_display_type_date_icon,
                                                                        pk_consult_req.g_consult_req_stat_reply,
                                                                        NULL,
                                                                        to_char(nvl(ox.dt_req_tstz,
                                                                                    nvl(ox.dt_begin_tstz,
                                                                                        ox.dt_schedule_tstz)),
                                                                                pk_alert_constant.g_dt_yyyymmddhh24miss),
                                                                        'CONSULT_REQ.FLG_STATUS',
                                                                        NULL,
                                                                        '0xC86464',
                                                                        '0xEBEBC8',
                                                                        NULL,
                                                                        NULL,
                                                                        NULL,
                                                                        current_timestamp)
                              FROM dual) status_icon,
                           nvl2(nvl(ox.dt_begin_tstz, ox.dt_schedule_tstz), l_msg_suggested, NULL) request_status_desc,
                           ox.id_episode id_episode,
                           (SELECT pk_sysdomain.get_domain(i_lang,
                                                           i_prof,
                                                           'EXAM_REQ_DET.FLG_STATUS',
                                                           ox.flg_status_req_det,
                                                           NULL)
                              FROM dual) status,
                           ox.flg_status_req_det flag_status,
                           l_na dependency_nr,
                           ox.id_clinical_service,
                           ox.id_exam,
                           (SELECT pk_date_utils.date_send_tsz(i_lang, nvl(ox.dt_begin_tstz, ox.dt_schedule_tstz), i_prof)
                              FROM dual) dt_req_begin,
                           (SELECT pk_date_utils.date_send_tsz(i_lang, nvl(ox.dt_begin_tstz, ox.dt_schedule_tstz), i_prof)
                              FROM dual) order_date,
                           ox.id_prof_req id_created_professional,
                           NULL notes,
                           NULL flg_contact_type,
                           NULL id_content,
                           NULL id_workflow,
                           '' flg_type_of_external_resource,
                           NULL id_external_resource
                      FROM (SELECT DISTINCT gtoe.id_patient,
                                            gtoe.id_professional,
                                            gtoe.num_clin_record,
                                            gtoe.id_episode,
                                            gtoe.id_dept,
                                            gtoe.id_clinical_service,
                                            gtoe.nick_name,
                                            gtoe.id_exam_cat,
                                            gtoe.id_exam,
                                            gtoe.dt_schedule_tstz,
                                            er.notes,
                                            gtoe.dt_begin_tstz,
                                            gtoe.id_exam_req,
                                            gtoe.id_exam_req_det,
                                            gtoe.flg_status_req_det,
                                            gtoe.dt_req_tstz,
                                            er.id_prof_req,
                                            er.id_institution,
                                            er.id_schedule,
                                            pt.name,
                                            pt.age,
                                            pt.gender,
                                            gtoe.flg_req_origin_module
                              FROM grid_task_oth_exm gtoe
                              JOIN exam_req er
                                ON er.id_exam_req = gtoe.id_exam_req
                              JOIN exam_cat_dcs ecdcs
                                ON ecdcs.id_exam_cat = gtoe.id_exam_cat
                              JOIN patient pt
                                ON pt.id_patient = gtoe.id_patient
                              JOIN patient pt
                                ON pt.id_patient = gtoe.id_patient
                              JOIN combination_events cev
                                ON cev.id_event = gtoe.id_exam_req_det
                               AND cev.id_future_event_type = pk_events.g_event_type_oexam
                               AND cev.flg_status = 'A'
                              JOIN combination_spec csp
                                ON csp.id_combination_spec = cev.id_combination_spec
                               AND cev.flg_status = 'A'
                             WHERE gtoe.id_patient = i_patient
                               AND gtoe.id_institution = i_prof.institution
                               AND ((gtoe.flg_status_req_det = pk_grid.g_exam_req_tosched AND gtoe.dt_begin_tstz IS NULL) OR
                                   gtoe.flg_status_req_det = pk_grid.g_exam_req_nr)
                               AND EXISTS (SELECT 1
                                      FROM prof_dep_clin_serv pdcs
                                     WHERE pdcs.id_professional = i_prof.id
                                       AND pdcs.flg_status = pk_grid.g_selected
                                       AND pdcs.id_institution = i_prof.institution
                                       AND pdcs.id_dep_clin_serv = ecdcs.id_dep_clin_serv)) ox
                    UNION ALL
                    -------------------  REFERRALs  -----------------                                                                                                      
                    SELECT 'R' sel_type, -- 
                           'REFERRAL' event_type, -- 
                           r.id_external_request id_event,
                           NULL id_exam_req_det,
                           NULL id_exam_req,
                           r.num_clin_record num_clin_record,
                           g_event_type_referral id_event_type,
                           (SELECT get_event_type_icon(g_event_type_referral)
                              FROM dual) event_type_icon, -- 
                           (SELECT get_event_type_title(i_lang, g_event_type_referral)
                              FROM dual) event_type_name_title, -- 
                           decode(r.id_workflow,
                                  pk_ref_constant.g_wf_srv_srv,
                                  -- if is internal workflow, than shows the desc of clinical service
                                  (SELECT pk_translation.get_translation(i_lang,
                                                                         'CLINICAL_SERVICE.CODE_CLINICAL_SERVICE.' ||
                                                                         (SELECT cs.id_clinical_service
                                                                            FROM dep_clin_serv dcs
                                                                            JOIN clinical_service cs
                                                                              ON (cs.id_clinical_service =
                                                                                 dcs.id_clinical_service)
                                                                           WHERE dcs.id_dep_clin_serv = r.id_dep_clin_serv))
                                     FROM dual),
                                  -- else  (other than internal workflow)
                                  (SELECT pk_translation.get_translation(i_lang,
                                                                         'P1_SPECIALITY.CODE_SPECIALITY.' ||
                                                                         r.id_speciality)
                                     FROM dual)) event_type_clinical_service,
                           (SELECT pk_utils.get_institution_name(i_lang, r.id_inst_dest)
                              FROM dual) location, --
                           r.id_inst_dest id_location,
                           NULL id_schedule,
                           NULL desc_dep_clin_serv,
                           r.id_dep_clin_serv id_dep_clin_serv,
                           (SELECT pk_ref_dest_phy.get_suggested_physician(i_lang, i_prof, r.id_external_request)
                              FROM dual) id_professional, -- professional id to send to scheduler
                           nvl((SELECT pk_prof_utils.get_name_signature(i_lang,
                                                                       i_prof,
                                                                       (SELECT pk_ref_dest_phy.get_suggested_physician(i_lang,
                                                                                                                       i_prof,
                                                                                                                       r.id_external_request)
                                                                          FROM dual))
                                 FROM dual),
                               l_future_events_t017) professional,
                           NULL nick_name,
                           NULL dt_request,
                           NULL dt_request_desc,
                           NULL dt_scheduled,
                           NULL dt_scheduled_desc,
                           r.flg_status flg_status,
                           NULL desc_status,
                           (SELECT pk_patphoto.get_pat_photo(i_lang, i_prof, r.id_patient, NULL, NULL)
                              FROM dual) photo,
                           r.id_patient id_patient,
                           (SELECT pk_patient.get_pat_name(i_lang,
                                                           i_prof,
                                                           r.id_patient,
                                                           (SELECT pk_p1_external_request.check_prof_resp(i_lang,
                                                                                                          i_prof,
                                                                                                          r.id_external_request)
                                                              FROM dual))
                              FROM dual) patient_name,
                           (SELECT pk_patient.get_pat_age(i_lang, r.id_patient, i_prof)
                              FROM dual) pat_age,
                           (SELECT pk_patient.get_gender(i_lang, r.gender)
                              FROM dual) gender,
                           NULL id_complaint,
                           NULL desc_reason,
                           r.id_prof_requested id_prof_orig,
                           (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, r.id_prof_requested)
                              FROM dual) desc_prof_orig,
                           NULL id_prof_dest,
                           NULL desc_prof_dest,
                           (SELECT pk_date_utils.date_send_tsz(i_lang,
                                                               (SELECT pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                     r.id_inst_dest,
                                                                                                                     NULL),
                                                                                                        current_timestamp)
                                                                  FROM dual),
                                                               i_prof)
                              FROM dual) dt_server,
                           NULL dt_proposed,
                           NULL request_date,
                           NULL status_desc,
                           NULL epis_id_dep_clin_serv,
                           NULL flg_epis_type,
                           NULL consult_decision,
                           NULL flg_can_ok,
                           (SELECT pk_ref_core.can_cancel(i_lang,
                                                          i_prof,
                                                          r.id_external_request,
                                                          r.flg_status,
                                                          nvl(r.id_workflow, pk_ref_constant.g_wf_pcc_hosp),
                                                          l_id_profile_template,
                                                          (SELECT pk_ref_core.get_prof_func(i_lang,
                                                                                            i_prof,
                                                                                            r.id_dep_clin_serv)
                                                             FROM dual),
                                                          l_id_category,
                                                          r.id_patient,
                                                          r.id_inst_orig,
                                                          r.id_inst_dest,
                                                          r.id_dep_clin_serv,
                                                          r.id_speciality,
                                                          r.flg_type,
                                                          r.id_prof_requested,
                                                          r.id_prof_redirected,
                                                          r.id_prof_status,
                                                          r.id_external_sys,
                                                          r.decision_urg_level)
                              FROM dual) flg_can_cancel,
                           (SELECT pk_utils.get_status_string_immediate(i_lang,
                                                                        i_prof,
                                                                        pk_alert_constant.g_display_type_date_icon, -- i_display_type
                                                                        decode(r.flg_status,
                                                                               pk_ref_constant.g_p1_status_a,
                                                                               to_char(nvl(r.decision_urg_level,
                                                                                           pk_ref_constant.g_decision_urg_level_normal)),
                                                                               r.flg_status), -- i_flg_state
                                                                        NULL,
                                                                        to_char(r.dt_status_tstz,
                                                                                pk_alert_constant.g_dt_yyyymmddhh24miss), -- i_value_date
                                                                        decode(r.flg_status,
                                                                               pk_ref_constant.g_p1_status_a,
                                                                               'P1_TOSCHEDULE_GRID_ICON.1',
                                                                               'P1_EXTERNAL_REQUEST.FLG_STATUS'), -- i_value_icon (depends on referral status)
                                                                        NULL,
                                                                        '0xC86464', -- i_back_color
                                                                        '0xEBEBC8', -- i_icon_color
                                                                        NULL,
                                                                        NULL,
                                                                        NULL,
                                                                        current_timestamp)
                              FROM dual) status_icon,
                           NULL request_status_desc,
                           r.id_episode id_episode,
                           NULL status,
                           NULL flag_status,
                           l_na dependency_nr,
                           NULL id_clinical_service,
                           NULL id_exam,
                           NULL dt_req_begin,
                           NULL order_date,
                           NULL id_created_professional,
                           NULL notes,
                           r.flg_type flg_contact_type, -- referral type
                           (SELECT pk_ref_core.get_content(i_lang,
                                                           i_prof,
                                                           r.id_dep_clin_serv,
                                                           (SELECT pk_ref_dest_phy.get_suggested_physician(i_lang,
                                                                                                           i_prof,
                                                                                                           r.id_external_request)
                                                              FROM dual))
                              FROM dual) id_content,
                           r.id_workflow,
                           '' flg_type_of_external_resource,
                           NULL id_external_resource
                      FROM (SELECT p.id_external_request,
                                   p.id_workflow,
                                   p.flg_type,
                                   p.flg_status,
                                   p.id_speciality,
                                   p.id_inst_orig,
                                   p.id_inst_dest,
                                   p.id_dep_clin_serv,
                                   p.decision_urg_level,
                                   p.id_prof_requested,
                                   p.id_prof_redirected,
                                   p.id_prof_status,
                                   p.id_external_sys,
                                   p.dt_status_tstz,
                                   p.id_episode,
                                   cr.num_clin_record,
                                   p.id_patient,
                                   pt.gender
                              FROM p1_external_request p
                              JOIN patient pt
                                ON (pt.id_patient = p.id_patient)
                              LEFT JOIN clin_record cr
                                ON (pt.id_patient = cr.id_patient AND cr.flg_status = pk_ref_constant.g_active AND
                                   cr.id_institution = p.id_inst_dest AND cr.id_instit_enroled = cr.id_institution)
                              JOIN combination_events cev
                                ON cev.id_event = p.id_external_request
                               AND cev.id_future_event_type = g_event_type_referral
                               AND cev.flg_status = 'A'
                              JOIN combination_spec csp
                                ON csp.id_combination_spec = cev.id_combination_spec
                               AND cev.flg_status = 'A'
                             WHERE p.id_patient = i_patient
                               AND p.flg_status = pk_ref_constant.g_p1_status_a
                               AND EXISTS (SELECT 1
                                      FROM prof_dep_clin_serv pdcs
                                     WHERE pdcs.id_professional = i_prof.id
                                       AND pdcs.flg_status = pk_grid.g_selected
                                       AND pdcs.id_institution = i_prof.institution
                                       AND pdcs.id_dep_clin_serv = p.id_dep_clin_serv)
                               AND p.id_inst_dest = i_prof.institution) r) w;
    
        LOOP
            FETCH c_result
                INTO v_tab;
            EXIT WHEN c_result%NOTFOUND;
            PIPE ROW(v_tab);
        END LOOP;
    
        RETURN;
    END get_adm_patient_comb_events_pl;

    /********************************************************************************************
    * result patient events
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier       
    * @param      i_type               type of select
    * @param      o_events             events
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/05
    **********************************************************************************************/
    FUNCTION get_adm_patient_events
    (
        i_lang   IN language.id_language%TYPE,
        i_prof   IN profissional,
        i_type   IN VARCHAR2,
        o_events OUT pk_types.cursor_type,
        o_error  OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name         VARCHAR2(60 CHAR) := 'GET_ADM_PATIENT_EVENTS';
        l_date_sep          sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                    i_prof,
                                                                                    'FUTURE_EVENTS_T073');
        l_msg_no_dependency sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                    i_prof,
                                                                                    'FUTURE_EVENTS_T074');
    
    BEGIN
        g_error := 'CALL GET_ADM_PATIENT_EVENTS';
    
        OPEN o_events FOR
        
            WITH events_tf AS
             (SELECT /*+ materialized */
               *
                FROM TABLE(get_adm_patient_events_pl(i_lang, i_prof, i_type)))
            
            SELECT /*+ opt_estimate (table t rows=1) */
             t.sel_type,
             t.event_type,
             t.id_event id_event,
             t.id_exam_req_det,
             t.id_exam_req,
             t.num_clin_record,
             t.id_event_type,
             t.event_type_icon,
             t.event_type_name_title,
             t.event_type_clinical_service,
             t.location,
             t.id_location,
             t.id_schedule,
             t.desc_dep_clin_serv,
             t.id_dep_clin_serv,
             t.id_professional id_dest_professional,
             t.professional,
             t.nick_name,
             t.dt_request,
             t.dt_request_desc,
             t.dt_scheduled,
             t.dt_scheduled_desc,
             t.flg_status,
             t.desc_status,
             t.photo,
             t.id_patient id_patient,
             pk_adt.get_patient_name(i_lang, i_prof, t.id_patient, 0) patient_name,
             t.pat_age,
             t.gender,
             t.id_complaint,
             t.desc_reason,
             t.id_prof_orig,
             t.desc_prof_orig,
             t.id_prof_dest,
             t.desc_prof_dest,
             t.dt_server,
             t.dt_proposed,
             nvl2(ce.id_combination_spec,
                  nvl(pk_events.get_dependencies_str(i_lang, i_prof, ce.id_combination_events), l_msg_no_dependency),
                  t.request_date) request_date,
             t.status_desc,
             t.epis_id_dep_clin_serv,
             t.flg_epis_type,
             t.consult_decision,
             t.flg_can_ok,
             t.flg_can_cancel,
             t.status_icon,
             nvl2(ce.id_combination_spec, NULL, t.request_status_desc) request_status_desc,
             t.id_episode,
             t.status,
             t.flag_status,
             t.id_clinical_service,
             t.id_exam,
             nvl2(ce.rank, 'ExtendIcon', '') dependency_icon,
             ce.rank dependency_nr,
             ce.id_combination_events,
             ce.id_combination_spec id_combination_spec,
             0 comb_count,
             get_dependencies_info(i_lang, ce.id_combination_events, 1) list_id,
             get_dependencies_info(i_lang, ce.id_combination_events, 2) list_min_lag,
             get_dependencies_info(i_lang, ce.id_combination_events, 3) list_max_lag,
             get_dependencies_info(i_lang, ce.id_combination_events, 4) list_unit_desc,
             get_dependencies_info(i_lang, ce.id_combination_events, 5) list_unit_tag,
             nvl2(ce.id_combination_spec,
                  pk_date_utils.date_send_tsz(i_lang, cs.dt_suggest_begin, i_prof),
                  t.order_date) order_date,
             cs.flg_single_visit flg_single_visit,
             nvl2(ce.id_combination_spec,
                  pk_date_utils.date_send_tsz(i_lang, cs.dt_suggest_begin, i_prof),
                  t.dt_req_begin) dt_req_begin,
             t.id_created_professional id_created_professional,
             t.notes notes,
             t.flg_contact_type,
             pk_sysconfig.get_config('INSTIT_SCHEDULER_EXISTS', i_prof) instit_scheduler_exists, --ALERT-177726
             t.id_content,
             t.id_workflow,
             t.flg_type_of_external_resource,
             t.id_external_resource
              FROM events_tf t, combination_events ce, combination_spec cs
             WHERE ce.id_future_event_type(+) = t.id_event_type
               AND ce.id_event(+) = decode(event_type,
                                           'IMAGING_EXAMS',
                                           id_exam_req_det,
                                           'OTHER_EXAMS',
                                           id_exam_req_det,
                                           'FUTURE_EVENTS',
                                           t.id_event,
                                           t.id_event)
               AND ce.flg_status(+) = g_flg_comb_state_active
               AND cs.id_combination_spec(+) = ce.id_combination_spec
               AND cs.flg_status(+) = g_flg_comb_state_active
            UNION ALL
            SELECT NULL sel_type,
                   NULL event_type,
                   NULL id_event,
                   NULL id_exam_req_det,
                   NULL id_exam_req,
                   NULL num_clin_record,
                   NULL id_event_type,
                   'CombinationIcon' event_type_icon,
                   cs.comb_name event_type_name_title,
                   pk_events.count_combination_events(i_lang, cs.id_combination_spec, 'S') event_type_clinical_service,
                   NULL location,
                   NULL id_location,
                   NULL id_schedule,
                   NULL desc_dep_clin_serv,
                   NULL id_dep_clin_serv,
                   NULL id_dest_professional,
                   NULL professional,
                   NULL nick_name,
                   NULL dt_request,
                   NULL dt_request_desc,
                   NULL dt_scheduled,
                   NULL dt_scheduled_desc,
                   cs.flg_status flg_status,
                   NULL desc_status,
                   pk_patphoto.get_pat_photo(i_lang, i_prof, cs.id_patient, NULL, NULL) photo,
                   cs.id_patient id_patient,
                   pk_adt.get_patient_name(i_lang, i_prof, cs.id_patient, 0) patient_name,
                   pk_patient.get_pat_age(i_lang, cs.id_patient, i_prof) pat_age,
                   pk_patient.get_pat_gender(cs.id_patient) gender,
                   NULL id_complaint,
                   NULL desc_reason,
                   NULL id_prof_orig,
                   NULL desc_prof_orig,
                   NULL id_prof_dest,
                   NULL desc_prof_dest,
                   NULL dt_server,
                   NULL dt_proposed,
                   nvl2(cs.dt_suggest_end,
                        pk_date_utils.dt_chr(i_lang,
                                             pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                           cs.id_inst_last_update,
                                                                                           NULL),
                                                                              cs.dt_suggest_begin),
                                             i_prof) || g_space || l_date_sep || g_space ||
                        pk_date_utils.dt_chr(i_lang,
                                             pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                           cs.id_inst_last_update,
                                                                                           NULL),
                                                                              cs.dt_suggest_end),
                                             i_prof),
                        pk_date_utils.dt_chr(i_lang,
                                             pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                           cs.id_inst_last_update,
                                                                                           NULL),
                                                                              cs.dt_suggest_begin),
                                             i_prof)) request_date,
                   NULL status_desc,
                   NULL epis_id_dep_clin_serv,
                   NULL flg_epis_type,
                   NULL consult_decision,
                   NULL flg_can_ok,
                   NULL flg_can_cancel,
                   NULL status_icon,
                   NULL request_status_desc,
                   NULL id_episode,
                   NULL status,
                   NULL flag_status,
                   NULL id_clinical_service,
                   NULL id_exam,
                   NULL dependency_icon,
                   0 dependency_nr,
                   NULL id_combination_events,
                   cs.id_combination_spec id_combination_spec,
                   to_number(pk_events.count_combination_events(i_lang, cs.id_combination_spec, 'N')) comb_count,
                   NULL list_id,
                   NULL list_min_lag,
                   NULL list_max_lag,
                   NULL list_unit_desc,
                   NULL list_unit_tag,
                   
                   pk_date_utils.date_send_tsz(i_lang, cs.dt_suggest_begin, i_prof) order_date,
                   cs.flg_single_visit flg_single_visit,
                   pk_date_utils.date_send_tsz(i_lang, cs.dt_suggest_begin, i_prof) dt_req_begin,
                   NULL id_created_professional,
                   NULL notes,
                   NULL flg_contact_type,
                   pk_sysconfig.get_config('INSTIT_SCHEDULER_EXISTS', i_prof) instit_scheduler_exists, --ALERT-177726
                   NULL id_content,
                   NULL id_workflow,
                   '' flg_type_of_external_resource,
                   NULL id_external_resource
              FROM combination_spec cs
             WHERE cs.id_combination_spec IN (SELECT /*+ opt_estimate(TABLE t1 rows = 1) */
                                        DISTINCT ce.id_combination_spec
                                          FROM events_tf t1, combination_events ce
                                         WHERE ce.id_future_event_type = t1.id_event_type
                                           AND ce.id_event = decode(event_type,
                                                                    'IMAGING_EXAMS',
                                                                    t1.id_exam_req_det,
                                                                    'OTHER_EXAMS',
                                                                    t1.id_exam_req_det,
                                                                    'FUTURE_EVENTS',
                                                                    t1.id_event,
                                                                    t1.id_event)
                                           AND ce.flg_status = g_flg_comb_state_active)
             AND cs.flg_status = g_flg_comb_state_active
             ORDER BY id_combination_spec, dependency_nr, order_date;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_events);
            RETURN FALSE;
    END get_adm_patient_events;

    FUNCTION get_adm_patient_comb_events
    (
        i_lang                IN language.id_language%TYPE,
        i_prof                IN profissional,
        i_patient             IN patient.id_patient%TYPE,
        i_id_combination_spec IN combination_spec.id_combination_spec%TYPE,
        o_events              OUT pk_types.cursor_type,
        o_error               OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_msg_no_dependency sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                    i_prof,
                                                                                    'FUTURE_EVENTS_T074');
    
    BEGIN
        g_error := 'CALL GET_ADM_PATIENT_EVENTS';
    
        OPEN o_events FOR
        
            WITH events_tf AS
             (SELECT /*+ materialized */
               *
                FROM TABLE(get_adm_patient_comb_events_pl(i_lang, i_prof, i_patient, i_id_combination_spec)))
            
            SELECT /*+ opt_estimate (table t rows=1) */
             t.sel_type,
             t.event_type,
             t.id_event id_event,
             t.id_exam_req_det,
             t.id_exam_req,
             t.num_clin_record,
             t.id_event_type,
             t.event_type_icon,
             t.event_type_name_title,
             t.event_type_clinical_service,
             t.location,
             t.id_location,
             t.id_schedule,
             t.desc_dep_clin_serv,
             t.id_dep_clin_serv,
             t.id_professional id_dest_professional,
             t.professional,
             t.nick_name,
             t.dt_request,
             t.dt_request_desc,
             t.dt_scheduled,
             t.dt_scheduled_desc,
             t.flg_status,
             t.desc_status,
             t.photo,
             t.id_patient id_patient,
             pk_adt.get_patient_name(i_lang, i_prof, t.id_patient, 0) patient_name,
             t.pat_age,
             t.gender,
             t.id_complaint,
             t.desc_reason,
             t.id_prof_orig,
             t.desc_prof_orig,
             t.id_prof_dest,
             t.desc_prof_dest,
             t.dt_server,
             t.dt_proposed,
             nvl2(ce.id_combination_spec,
                  nvl(pk_events.get_dependencies_str(i_lang, i_prof, ce.id_combination_events), l_msg_no_dependency),
                  t.request_date) request_date,
             t.status_desc,
             t.epis_id_dep_clin_serv,
             t.flg_epis_type,
             t.consult_decision,
             t.flg_can_ok,
             t.flg_can_cancel,
             t.status_icon,
             nvl2(ce.id_combination_spec, NULL, t.request_status_desc) request_status_desc,
             t.id_episode,
             t.status,
             t.flag_status,
             t.id_clinical_service,
             t.id_exam,
             nvl2(ce.rank, 'ExtendIcon', '') dependency_icon,
             ce.rank dependency_nr,
             ce.id_combination_events,
             ce.id_combination_spec id_combination_spec,
             0 comb_count,
             get_dependencies_info(i_lang, ce.id_combination_events, 1) list_id,
             get_dependencies_info(i_lang, ce.id_combination_events, 2) list_min_lag,
             get_dependencies_info(i_lang, ce.id_combination_events, 3) list_max_lag,
             get_dependencies_info(i_lang, ce.id_combination_events, 4) list_unit_desc,
             get_dependencies_info(i_lang, ce.id_combination_events, 5) list_unit_tag,
             nvl2(ce.id_combination_spec,
                  pk_date_utils.date_send_tsz(i_lang, cs.dt_suggest_begin, i_prof),
                  t.order_date) order_date,
             cs.flg_single_visit flg_single_visit,
             nvl2(ce.id_combination_spec,
                  pk_date_utils.date_send_tsz(i_lang, cs.dt_suggest_begin, i_prof),
                  t.dt_req_begin) dt_req_begin,
             t.id_created_professional id_created_professional,
             t.notes notes,
             t.flg_contact_type,
             pk_sysconfig.get_config('INSTIT_SCHEDULER_EXISTS', i_prof) instit_scheduler_exists, --ALERT-177726
             t.id_content,
             t.id_workflow,
             t.flg_type_of_external_resource,
             t.id_external_resource
              FROM events_tf t, combination_events ce, combination_spec cs
             WHERE ce.id_future_event_type(+) = t.id_event_type
               AND ce.id_event(+) = decode(event_type,
                                           'IMAGING_EXAMS',
                                           id_exam_req_det,
                                           'OTHER_EXAMS',
                                           id_exam_req_det,
                                           'FUTURE_EVENTS',
                                           t.id_event,
                                           t.id_event)
               AND ce.flg_status(+) = g_flg_comb_state_active
               AND cs.id_combination_spec(+) = ce.id_combination_spec
               AND cs.flg_status(+) = g_flg_comb_state_active
             ORDER BY dependency_nr, order_date;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              'GET_ADM_PATIENT_COMB_EVENTS',
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_events);
            RETURN FALSE;
    END get_adm_patient_comb_events;

    /********************************************************************************************
    * insert patient events
    *
    * @param i_lang              language identifier
    * @param i_prof              professional registered by identifier
    * @param i_patient           patient identifier
    * @param i_episode             episode identifier   
    * @param i_epis_type           episode type identifier
    * @param i_request_profl       list of professionals requested
    * @param i_inst_req_to      institution registered to identifier
    * @param i_sch_event        episode type identifier
    * @param i_dep_clin_serv    clinical service identifier
    * @param i_complaint        complaint identifier
    * @param i_dt_begin_event      begin date
    * @param i_dt_end_event        end date
    * @param i_priority            priority
    * @param i_contact_type        contact_type
    * @param i_notes               notes
    * @param i_instructions        instructions
    * @param i_room             room identifier
    * @param i_request_type        request type
    * @param i_request_responsable request responsable
    * @param i_prof_approval       list of professionals that can approve
    * @param i_language         language
    * @param i_recurrence          recurrence
    * @param i_status              status
    * @param i_frequency           frequency
    * @param i_dt_rec_begin          begin recurrence date
    * @param i_dt_rec_end          end recurrence date
    * @param i_nr_events           number of events
    * @param i_week_day            week day
    * @param i_week_nr             week number
    * @param i_month_day           month day
    * @param i_month_nr            month number
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/12
    **********************************************************************************************/
    FUNCTION insert_future_events
    (
        i_lang                IN language.id_language%TYPE,
        i_prof                IN profissional,
        i_patient             IN consult_req.id_patient%TYPE,
        i_episode             IN consult_req.id_episode%TYPE,
        i_epis_type           IN consult_req.id_epis_type%TYPE,
        i_request_prof        IN table_number,
        i_inst_req_to         IN consult_req.id_inst_requested%TYPE,
        i_sch_event           IN consult_req.id_sch_event%TYPE,
        i_dep_clin_serv       IN consult_req.id_dep_clin_serv%TYPE,
        i_complaint           IN consult_req.id_complaint%TYPE,
        i_dt_begin_event      IN VARCHAR2,
        i_dt_end_event        IN VARCHAR2,
        i_priority            IN consult_req.flg_priority%TYPE,
        i_contact_type        IN consult_req.flg_contact_type%TYPE,
        i_notes               IN consult_req.notes%TYPE,
        i_instructions        IN consult_req.instructions%TYPE,
        i_room                IN consult_req.id_room%TYPE,
        i_request_type        IN consult_req.flg_request_type%TYPE,
        i_request_responsable IN consult_req.flg_req_resp%TYPE,
        i_request_reason      IN consult_req.request_reason%TYPE,
        i_prof_approval       IN table_number,
        i_language            IN consult_req.id_language%TYPE,
        i_recurrence          IN consult_req.flg_recurrence%TYPE,
        i_status              IN consult_req.flg_status%TYPE,
        i_frequency           IN consult_req.frequency%TYPE,
        i_dt_rec_begin        IN VARCHAR2,
        i_dt_rec_end          IN VARCHAR2,
        i_nr_events           IN consult_req.nr_events%TYPE,
        i_week_day            IN consult_req.week_day%TYPE,
        i_week_nr             IN consult_req.week_nr%TYPE,
        i_month_day           IN consult_req.month_day%TYPE,
        i_month_nr            IN consult_req.month_nr%TYPE,
        i_reason_for_visit    IN consult_req.reason_for_visit%TYPE,
        o_consult_req_id      OUT consult_req.id_consult_req%TYPE,
        o_error               OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'INSERT_FUTURE_EVENTS';
    BEGIN
        g_error := 'CALL insert_future_events_nc';
        IF NOT insert_future_events_nc(i_lang                => i_lang,
                                       i_prof                => i_prof,
                                       i_patient             => i_patient,
                                       i_episode             => i_episode,
                                       i_epis_type           => i_epis_type,
                                       i_request_prof        => i_request_prof,
                                       i_inst_req_to         => i_inst_req_to,
                                       i_sch_event           => i_sch_event,
                                       i_dep_clin_serv       => i_dep_clin_serv,
                                       i_complaint           => i_complaint,
                                       i_dt_begin_event      => i_dt_begin_event,
                                       i_dt_end_event        => i_dt_end_event,
                                       i_priority            => i_priority,
                                       i_contact_type        => i_contact_type,
                                       i_notes               => i_notes,
                                       i_instructions        => i_instructions,
                                       i_room                => i_room,
                                       i_request_type        => i_request_type,
                                       i_request_responsable => i_request_responsable,
                                       i_request_reason      => i_request_reason,
                                       i_prof_approval       => i_prof_approval,
                                       i_language            => i_language,
                                       i_recurrence          => i_recurrence,
                                       i_status              => i_status,
                                       i_frequency           => i_frequency,
                                       i_dt_rec_begin        => i_dt_rec_begin,
                                       i_dt_rec_end          => i_dt_rec_end,
                                       i_nr_events           => i_nr_events,
                                       i_week_day            => i_week_day,
                                       i_week_nr             => i_week_nr,
                                       i_month_day           => i_month_day,
                                       i_month_nr            => i_month_nr,
                                       i_reason_for_visit    => i_reason_for_visit,
                                       o_consult_req_id      => o_consult_req_id,
                                       o_error               => o_error)
        THEN
            RAISE g_exception;
        END IF;
    
        COMMIT;
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END insert_future_events;
    /********************************************************************************************
    * insert patient events
    *
    * @param i_lang              language identifier
    * @param i_prof              professional registered by identifier
    * @param i_patient           patient identifier
    * @param i_episode             episode identifier   
    * @param i_epis_type           episode type identifier
    * @param i_request_profl       list of professionals requested
    * @param i_inst_req_to      institution registered to identifier
    * @param i_sch_event        episode type identifier
    * @param i_dep_clin_serv    clinical service identifier
    * @param i_complaint        complaint identifier
    * @param i_dt_begin_event      begin date
    * @param i_dt_end_event        end date
    * @param i_priority            priority
    * @param i_contact_type        contact_type
    * @param i_notes               notes
    * @param i_instructions        instructions
    * @param i_room             room identifier
    * @param i_request_type        request type
    * @param i_request_responsable request responsable
    * @param i_prof_approval       list of professionals that can approve
    * @param i_language         language
    * @param i_recurrence          recurrence
    * @param i_status              status
    * @param i_frequency           frequency
    * @param i_dt_rec_begin          begin recurrence date
    * @param i_dt_rec_end          end recurrence date
    * @param i_nr_events           number of events
    * @param i_week_day            week day
    * @param i_week_nr             week number
    * @param i_month_day           month day
    * @param i_month_nr            month number
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/12
    **********************************************************************************************/
    FUNCTION insert_future_events_nc
    (
        i_lang                IN language.id_language%TYPE,
        i_prof                IN profissional,
        i_patient             IN consult_req.id_patient%TYPE,
        i_episode             IN consult_req.id_episode%TYPE,
        i_epis_type           IN consult_req.id_epis_type%TYPE,
        i_request_prof        IN table_number,
        i_inst_req_to         IN consult_req.id_inst_requested%TYPE,
        i_sch_event           IN consult_req.id_sch_event%TYPE,
        i_dep_clin_serv       IN consult_req.id_dep_clin_serv%TYPE,
        i_complaint           IN consult_req.id_complaint%TYPE,
        i_dt_begin_event      IN VARCHAR2,
        i_dt_end_event        IN VARCHAR2,
        i_priority            IN consult_req.flg_priority%TYPE,
        i_contact_type        IN consult_req.flg_contact_type%TYPE,
        i_notes               IN consult_req.notes%TYPE,
        i_instructions        IN consult_req.instructions%TYPE,
        i_room                IN consult_req.id_room%TYPE,
        i_request_type        IN consult_req.flg_request_type%TYPE,
        i_request_responsable IN consult_req.flg_req_resp%TYPE,
        i_request_reason      IN consult_req.request_reason%TYPE,
        i_prof_approval       IN table_number,
        i_language            IN consult_req.id_language%TYPE,
        i_recurrence          IN consult_req.flg_recurrence%TYPE,
        i_status              IN consult_req.flg_status%TYPE,
        i_frequency           IN consult_req.frequency%TYPE,
        i_dt_rec_begin        IN VARCHAR2,
        i_dt_rec_end          IN VARCHAR2,
        i_nr_events           IN consult_req.nr_events%TYPE,
        i_week_day            IN consult_req.week_day%TYPE,
        i_week_nr             IN consult_req.week_nr%TYPE,
        i_month_day           IN consult_req.month_day%TYPE,
        i_month_nr            IN consult_req.month_nr%TYPE,
        i_reason_for_visit    IN consult_req.reason_for_visit%TYPE,
        o_consult_req_id      OUT consult_req.id_consult_req%TYPE,
        o_error               OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'insert_future_events_nc';
    
        --SCH 3.0 TRANSACTION ID
        l_transaction_id VARCHAR2(4000);
    
        --EPISODE ASSOCIATED WITH THE FUTURE EVENT
        l_os_episode episode.id_episode%TYPE;
    BEGIN
        --GETS A NEW TRANSACTION ID AND BEGINS THE TRANSACTION (FOR THE SCHEDULER 3.0 TRANSACTIONS)
        g_error          := 'CALL PK_SCHEDULE_API_UPSTREAM.BEGIN_NEW_TRANSACTION';
        l_transaction_id := pk_schedule_api_upstream.begin_new_transaction(NULL, i_prof);
    
        --CREATE AN ORDER SET EPISODE
        g_error := 'CREATE FE EPISODE';
        IF NOT pk_ehr_access.create_order_set_episode(i_lang             => i_lang,
                                                      i_prof             => i_prof,
                                                      i_id_patient       => i_patient,
                                                      i_id_episode       => NULL,
                                                      i_id_schedule      => NULL,
                                                      i_id_dep_clin_serv => i_dep_clin_serv,
                                                      i_id_epis_type     => i_epis_type,
                                                      i_transaction_id   => l_transaction_id,
                                                      o_episode          => l_os_episode,
                                                      o_error            => o_error)
        THEN
            RETURN FALSE;
        END IF;
    
        g_error := 'CALL INSERT_CONSULT_REQ_NC';
        IF NOT pk_consult_req.insert_consult_req_nc(i_lang                => i_lang,
                                                    i_prof                => i_prof,
                                                    i_patient             => i_patient,
                                                    i_episode             => i_episode,
                                                    i_epis_type           => i_epis_type,
                                                    i_request_prof        => i_request_prof,
                                                    i_inst_req_to         => i_inst_req_to,
                                                    i_sch_event           => i_sch_event,
                                                    i_dep_clin_serv       => i_dep_clin_serv,
                                                    i_complaint           => i_complaint,
                                                    i_dt_begin_event      => pk_date_utils.get_string_tstz(i_lang,
                                                                                                           i_prof,
                                                                                                           i_dt_begin_event,
                                                                                                           NULL),
                                                    i_dt_end_event        => pk_date_utils.get_string_tstz(i_lang,
                                                                                                           i_prof,
                                                                                                           i_dt_end_event,
                                                                                                           NULL),
                                                    i_priority            => i_priority,
                                                    i_contact_type        => i_contact_type,
                                                    i_notes               => i_notes,
                                                    i_instructions        => i_instructions,
                                                    i_room                => i_room,
                                                    i_request_type        => i_request_type,
                                                    i_request_responsable => i_request_responsable,
                                                    i_request_reason      => i_request_reason,
                                                    i_prof_approval       => i_prof_approval,
                                                    i_language            => i_language,
                                                    i_recurrence          => i_recurrence,
                                                    i_status              => i_status,
                                                    i_frequency           => i_frequency,
                                                    i_dt_rec_begin        => pk_date_utils.get_string_tstz(i_lang,
                                                                                                           i_prof,
                                                                                                           i_dt_rec_begin,
                                                                                                           NULL),
                                                    i_dt_rec_end          => pk_date_utils.get_string_tstz(i_lang,
                                                                                                           i_prof,
                                                                                                           i_dt_rec_end,
                                                                                                           NULL),
                                                    i_nr_events           => i_nr_events,
                                                    i_week_day            => i_week_day,
                                                    i_week_nr             => i_week_nr,
                                                    i_month_day           => i_month_day,
                                                    i_month_nr            => i_month_nr,
                                                    i_reason_for_visit    => i_reason_for_visit,
                                                    i_episode_to_exec     => l_os_episode,
                                                    o_consult_req         => o_consult_req_id,
                                                    o_error               => o_error)
        THEN
            RAISE g_exception;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END insert_future_events_nc;

    /********************************************************************************************
    * update patient events
    *
    * @param i_consult_req       future events identifier
    * @param i_lang                language identifier
    * @param i_prof                professional registered by identifier
    * @param i_patient             patient identifier
    * @param i_episode             episode identifier
    * @param i_epis_type           episode type identifier
    * @param i_request_prof        list of requested professionals    
    * @param i_inst_req_to         institution registered to identifier
    * @param i_sch_event           episode type identifier
    * @param i_dep_clin_serv       clinical service identifier
    * @param i_complaint           complaint identifier
    * @param i_dt_begin_event      begin date
    * @param i_dt_end_event        end date
    * @param i_priority            priority
    * @param i_contact_type        contact_type
    * @param i_notes               notes
    * @param i_instructions        instructions
    * @param i_room                room identifier
    * @param i_request_type        request type
    * @param i_request_responsable request responsable
    * @param i_prof_approval       list of professionals that can approve
    * @param i_language         language
    * @param i_recurrence          recurrence
    * @param i_status              status
    * @param i_frequency           frequency
    * @param i_dt_rec_begin          begin recurrence date
    * @param i_dt_rec_end          end recurrence date
    * @param i_nr_events           number of events
    * @param i_week_day            week day
    * @param i_week_nr             week number
    * @param i_month_day           month day
    * @param i_month_nr            month number    
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/12
    **********************************************************************************************/
    FUNCTION update_future_events
    (
        i_consult_req         IN consult_req.id_consult_req%TYPE,
        i_lang                IN language.id_language%TYPE,
        i_prof                IN profissional,
        i_patient             IN consult_req.id_patient%TYPE,
        i_episode             IN consult_req.id_episode%TYPE,
        i_epis_type           IN consult_req.id_epis_type%TYPE,
        i_request_prof        IN table_number,
        i_inst_req_to         IN consult_req.id_inst_requested%TYPE,
        i_sch_event           IN consult_req.id_sch_event%TYPE,
        i_dep_clin_serv       IN consult_req.id_dep_clin_serv%TYPE,
        i_complaint           IN consult_req.id_complaint%TYPE,
        i_dt_begin_event      IN VARCHAR2,
        i_dt_end_event        IN VARCHAR2,
        i_priority            IN consult_req.flg_priority%TYPE,
        i_contact_type        IN consult_req.flg_contact_type%TYPE,
        i_notes               IN consult_req.notes%TYPE,
        i_instructions        IN consult_req.instructions%TYPE,
        i_room                IN consult_req.id_room%TYPE,
        i_request_type        IN consult_req.flg_request_type%TYPE,
        i_request_responsable IN consult_req.flg_req_resp%TYPE,
        i_request_reason      IN consult_req.request_reason%TYPE,
        i_prof_approval       IN table_number,
        i_language            IN consult_req.id_language%TYPE,
        i_recurrence          IN consult_req.flg_recurrence%TYPE,
        i_status              IN consult_req.flg_status%TYPE,
        i_frequency           IN consult_req.frequency%TYPE,
        i_dt_rec_begin        IN VARCHAR2,
        i_dt_rec_end          IN VARCHAR2,
        i_nr_events           IN consult_req.nr_events%TYPE,
        i_week_day            IN consult_req.week_day%TYPE,
        i_week_nr             IN consult_req.week_nr%TYPE,
        i_month_day           IN consult_req.month_day%TYPE,
        i_month_nr            IN consult_req.month_nr%TYPE,
        i_reason_for_visit    IN consult_req.reason_for_visit%TYPE,
        o_error               OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name       VARCHAR2(60 CHAR) := 'UPDATE_FUTURE_EVENTS';
        l_cr_epis_to_exec episode.id_episode%TYPE;
        l_rowids          table_varchar;
    
    BEGIN
    
        --GET THE EPISODE TO EXECUTE (IF APPLIABLE)
        g_error := 'GET EPISODE TO EXEC';
        BEGIN
            SELECT cr.id_episode_to_exec
              INTO l_cr_epis_to_exec
              FROM consult_req cr
              JOIN episode e
                ON e.id_episode = cr.id_episode_to_exec
             WHERE cr.id_consult_req = i_consult_req;
        EXCEPTION
            WHEN no_data_found THEN
                l_cr_epis_to_exec := NULL;
        END;
    
        IF l_cr_epis_to_exec IS NOT NULL
        THEN
            g_error  := 'UPDATE EPIS_INFO id_dep_clin_serv';
            l_rowids := table_varchar();
        
            ts_epis_info.upd(id_dep_clin_serv_in => i_dep_clin_serv,
                             where_in            => ' id_episode = ' || l_cr_epis_to_exec,
                             rows_out            => l_rowids);
        
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EPIS_INFO',
                                          i_rowids     => l_rowids,
                                          o_error      => o_error);
        END IF;
    
        g_error := 'CALL UPDATE_CONSULT_REQ_NC';
        IF NOT pk_consult_req.update_consult_req_nc(i_consult_req         => i_consult_req,
                                                    i_lang                => i_lang,
                                                    i_prof                => i_prof,
                                                    i_patient             => i_patient,
                                                    i_episode             => i_episode,
                                                    i_epis_type           => i_epis_type,
                                                    i_request_prof        => i_request_prof,
                                                    i_inst_req_to         => i_inst_req_to,
                                                    i_sch_event           => i_sch_event,
                                                    i_dep_clin_serv       => i_dep_clin_serv,
                                                    i_complaint           => i_complaint,
                                                    i_dt_begin_event      => pk_date_utils.get_string_tstz(i_lang,
                                                                                                           i_prof,
                                                                                                           i_dt_begin_event,
                                                                                                           NULL),
                                                    i_dt_end_event        => pk_date_utils.get_string_tstz(i_lang,
                                                                                                           i_prof,
                                                                                                           i_dt_end_event,
                                                                                                           NULL),
                                                    i_priority            => i_priority,
                                                    i_contact_type        => i_contact_type,
                                                    i_notes               => i_notes,
                                                    i_instructions        => i_instructions,
                                                    i_room                => i_room,
                                                    i_request_type        => i_request_type,
                                                    i_request_responsable => i_request_responsable,
                                                    i_request_reason      => i_request_reason,
                                                    i_prof_approval       => i_prof_approval,
                                                    i_language            => i_language,
                                                    i_recurrence          => i_recurrence,
                                                    i_status              => i_status,
                                                    i_frequency           => i_frequency,
                                                    i_dt_rec_begin        => pk_date_utils.get_string_tstz(i_lang,
                                                                                                           i_prof,
                                                                                                           i_dt_rec_begin,
                                                                                                           NULL),
                                                    i_dt_rec_end          => pk_date_utils.get_string_tstz(i_lang,
                                                                                                           i_prof,
                                                                                                           i_dt_rec_end,
                                                                                                           NULL),
                                                    i_nr_events           => i_nr_events,
                                                    i_week_day            => i_week_day,
                                                    i_week_nr             => i_week_nr,
                                                    i_month_day           => i_month_day,
                                                    i_month_nr            => i_month_nr,
                                                    i_reason_for_visit    => i_reason_for_visit,
                                                    o_error               => o_error)
        THEN
            RAISE g_exception;
        END IF;
    
        COMMIT;
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END update_future_events;

    /********************************************************************************************
    * get default values
    *
    * @param      i_lang      Língua registada como preferência do profissional
    * @param      i_prof      profissional identifier
    * @param      i_patient   patient identifier
    * @param      i_episode   episode identifier
    * @param      i_flg_dep_type 
    * @param      i_origin_area    origin: LAB, IMAGE, OEXAM
    * @param     o_default_values  return values
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/14
    **********************************************************************************************/
    FUNCTION get_default_values
    (
        i_lang           IN language.id_language%TYPE,
        i_prof           IN profissional,
        i_patient        IN consult_req.id_patient%TYPE,
        i_episode        IN episode.id_episode%TYPE,
        i_flg_dep_type   IN sch_department.flg_dep_type%TYPE,
        i_epis_type      IN epis_type.id_epis_type%TYPE,
        i_origin_area    IN VARCHAR2,
        o_default_values OUT pk_types.cursor_type,
        o_error          OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name              VARCHAR2(60 CHAR) := 'GET_DEFAULT_VALUES';
        l_id_dep_clin_serv       dep_clin_serv.id_dep_clin_serv%TYPE;
        l_id_complaint           complaint.id_complaint%TYPE;
        l_desc_complaint         pk_translation.t_desc_translation;
        l_contact_type           consult_req.flg_contact_type%TYPE;
        l_contact_type_desc      pk_translation.t_desc_translation;
        l_trans_clinical_service pk_translation.t_desc_translation;
        l_id_department          department.id_department%TYPE;
        l_epis_type              epis_type.id_epis_type%TYPE;
        l_future_events_t017     sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                         i_prof,
                                                                                         'FUTURE_EVENTS_T017');
        l_msg_not_repeat         sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                         i_prof,
                                                                                         g_msg_not_repeat);
        l_locations              pk_types.cursor_type;
        l_type_of_visit          pk_types.cursor_type;
        l_events                 pk_types.cursor_type;
        l_professionals          pk_types.cursor_type;
        l_reason_of_visit        pk_types.cursor_type;
        l_error                  t_error_out;
        l_locs                   table_number := table_number();
        l_tovs                   table_number := table_number();
        l_evts                   table_number := table_number();
        l_prfs                   table_number := table_number();
        l_rovs                   table_number := table_number();
        l_dummy_tv               table_varchar;
        l_dummy_tn               table_number;
        l_sch_event              sch_event.id_sch_event%TYPE;
        l_sch_complaint_origin   sys_config.value%TYPE := nvl(pk_sysconfig.get_config(g_sch_complaint_origin, i_prof),
                                                              g_complaint);
    
        l_default_type_off_appointment NUMBER;
        l_default_type_of_visit        NUMBER;
        l_default_professional         NUMBER;
        l_desc_default_toa             translation.desc_lang_1%TYPE;
    BEGIN
    
        l_default_type_off_appointment := pk_sysconfig.get_config(i_code_cf => 'CONSULT_REQUEST_DEFAULT_TYPE_OF_APPOINTMENT_ON_' ||
                                                                               i_origin_area,
                                                                  i_prof    => i_prof);
        l_default_type_of_visit        := pk_sysconfig.get_config(i_code_cf => 'CONSULT_REQUEST_DEFAULT_TYPE_OF_VISIT_ON_' ||
                                                                               i_origin_area,
                                                                  i_prof    => i_prof);
        l_default_professional         := pk_sysconfig.get_config(i_code_cf => 'CONSULT_REQUEST_DEFAULT_PROFESSIONAL_ON_' ||
                                                                               i_origin_area,
                                                                  i_prof    => i_prof);
    
        l_default_type_off_appointment := CASE l_default_type_off_appointment
                                              WHEN 0 THEN
                                               NULL
                                              ELSE
                                               l_default_type_off_appointment
                                          END;
        l_default_type_of_visit        := CASE l_default_type_of_visit
                                              WHEN 0 THEN
                                               NULL
                                              ELSE
                                               l_default_type_of_visit
                                          END;
        l_default_professional         := CASE l_default_professional
                                              WHEN 0 THEN
                                               NULL
                                              ELSE
                                               l_default_professional
                                          END;
    
        IF l_default_type_off_appointment IS NOT NULL
        THEN
            SELECT pk_translation.get_translation(i_lang,
                                                  'CLINICAL_SERVICE.CODE_CLINICAL_SERVICE.' || d.id_clinical_service)
              INTO l_desc_default_toa
              FROM dep_clin_serv d
             WHERE d.id_dep_clin_serv = l_default_type_off_appointment;
        END IF;
    
        -- get locations
        IF NOT get_locations(i_lang        => i_lang,
                             i_prof        => i_prof,
                             i_institution => i_prof.institution,
                             o_list        => l_locations,
                             o_error       => l_error)
        THEN
            RAISE g_exception;
        END IF;
    
        FETCH l_locations BULK COLLECT
            INTO l_locs, l_dummy_tv, l_dummy_tv, l_dummy_tn;
        CLOSE l_locations;
    
        -- get type of visits
        IF NOT get_type_of_visit(i_lang          => i_lang,
                                 i_prof          => i_prof,
                                 i_epis_type     => i_epis_type,
                                 i_institution   => i_prof.institution,
                                 o_type_of_visit => l_type_of_visit,
                                 o_error         => l_error)
        THEN
            RAISE g_exception;
        END IF;
    
        FETCH l_type_of_visit BULK COLLECT
            INTO l_tovs, l_dummy_tv, l_dummy_tn, l_dummy_tn;
        CLOSE l_type_of_visit;
    
        IF i_episode IS NOT NULL
        THEN
            SELECT e.id_epis_type
              INTO l_epis_type
              FROM episode e
             WHERE e.id_episode = i_episode;
        END IF;
    
        BEGIN
            --  type_of_visit
            SELECT ei.id_dcs_requested,
                   pk_translation.get_translation(i_lang, cs.code_clinical_service),
                   c.id_complaint,
                   pk_translation.get_translation(i_lang, c.code_complaint),
                   decode(ei.id_schedule, -1, g_cont_type_absent, nvl(sg.flg_contact_type, g_cont_type_present)),
                   pk_sysdomain.get_domain(pk_grid_amb.g_domain_sch_presence,
                                           decode(ei.id_schedule,
                                                  -1,
                                                  g_cont_type_absent,
                                                  nvl(sg.flg_contact_type, g_cont_type_present)),
                                           i_lang),
                   dcs.id_department
              INTO l_id_dep_clin_serv,
                   l_trans_clinical_service,
                   l_id_complaint,
                   l_desc_complaint,
                   l_contact_type,
                   l_contact_type_desc,
                   l_id_department
              FROM episode e
              JOIN epis_info ei
                ON ei.id_episode = e.id_episode
              LEFT JOIN dep_clin_serv dcs
                ON dcs.id_dep_clin_serv = ei.id_dcs_requested
              LEFT JOIN clinical_service cs
                ON cs.id_clinical_service = dcs.id_clinical_service
              LEFT JOIN epis_complaint ec
                ON ec.id_episode = e.id_episode
              LEFT JOIN complaint c
                ON c.id_complaint = ec.id_complaint
              LEFT JOIN sch_group sg
                ON ei.id_schedule = sg.id_schedule
             WHERE e.id_episode = i_episode
               AND e.id_cs_requested <> -1;
        EXCEPTION
            WHEN OTHERS THEN
                l_id_dep_clin_serv       := NULL;
                l_trans_clinical_service := NULL;
                l_id_complaint           := NULL;
                l_desc_complaint         := NULL;
                l_contact_type           := NULL;
                l_contact_type_desc      := NULL;
                l_id_department          := NULL;
        END;
    
        --GET EVENTS
        IF NOT get_events(i_lang          => i_lang,
                          i_prof          => i_prof,
                          i_dep_type      => i_flg_dep_type,
                          i_dep_clin_serv => l_id_dep_clin_serv,
                          i_institution   => i_prof.institution,
                          o_events        => l_events,
                          o_error         => l_error)
        THEN
            RAISE g_exception;
        END IF;
    
        FETCH l_events BULK COLLECT
            INTO l_evts, l_dummy_tv, l_dummy_tv;
        CLOSE l_events;
    
        --GET DEST PROFESSIONALS
        CASE
            WHEN i_episode IS NULL
                 OR l_id_dep_clin_serv IS NULL THEN
                l_sch_event := NULL;
            WHEN i_prof.software IN (g_soft_outp, g_soft_pp, g_soft_care)
                 AND i_flg_dep_type = 'C' THEN
                l_sch_event := 2;
            WHEN i_prof.software IN (g_soft_outp, g_soft_pp, g_soft_care)
                 AND i_flg_dep_type = 'N' THEN
                l_sch_event := 25;
            WHEN i_prof.software IN (g_soft_outp, g_soft_pp, g_soft_care)
                 AND i_flg_dep_type = 'AS' THEN
                l_sch_event := 41;
            WHEN i_prof.software IN (g_soft_outp, g_soft_pp, g_soft_care)
                 AND i_flg_dep_type = 'U' THEN
                l_sch_event := 16;
            ELSE
                l_sch_event := NULL;
        END CASE;
    
        IF NOT get_dest_professionals(i_lang          => i_lang,
                                      i_prof          => i_prof,
                                      i_epis_type     => i_epis_type,
                                      i_institution   => i_prof.institution,
                                      i_dep_clin_serv => l_id_dep_clin_serv,
                                      i_sch_event     => l_sch_event,
                                      o_professionals => l_professionals,
                                      o_error         => l_error)
        THEN
            RAISE g_exception;
        END IF;
    
        FETCH l_professionals BULK COLLECT
            INTO l_dummy_tv, l_prfs, l_dummy_tn;
        CLOSE l_professionals;
    
        --GET_REASON_OF_VISIT
        IF l_sch_complaint_origin = g_complaint
        THEN
            IF NOT get_reason_of_visit(i_lang             => i_lang,
                                       i_prof             => i_prof,
                                       i_id_dep_clin_serv => l_id_dep_clin_serv,
                                       i_patient          => i_patient,
                                       i_episode          => i_episode,
                                       i_sch_event        => l_sch_event,
                                       i_institution      => i_prof.institution,
                                       i_professional     => i_prof.id,
                                       i_epis_type        => i_epis_type,
                                       o_sql              => l_reason_of_visit,
                                       o_error            => l_error)
            THEN
                RAISE g_exception;
            END IF;
        
            FETCH l_reason_of_visit BULK COLLECT
                INTO l_rovs, l_dummy_tv;
            CLOSE l_reason_of_visit;
        END IF;
    
        OPEN o_default_values FOR
            SELECT CASE
                        WHEN i_prof.institution IN (SELECT column_value
                                                      FROM TABLE(l_locs)) THEN
                         i_prof.institution
                        ELSE
                         NULL
                    END id_location,
                   CASE
                        WHEN i_prof.institution IN (SELECT column_value
                                                      FROM TABLE(l_locs)) THEN
                         nvl(pk_utils.get_institution_name(i_lang, i_prof.institution), '')
                        ELSE
                         NULL
                    END desc_location,
                   CASE
                        WHEN l_default_type_of_visit IS NOT NULL THEN
                         l_default_type_of_visit
                        ELSE
                         CASE
                             WHEN i_episode IS NULL
                                  OR l_id_dep_clin_serv IS NULL THEN
                              NULL
                         
                             WHEN i_prof.software IN (g_soft_outp, g_soft_pp, g_soft_care)
                                  AND i_flg_dep_type = 'C'
                                  AND 2 IN (SELECT column_value
                                              FROM TABLE(l_evts)) THEN
                              2
                             WHEN i_prof.software IN (g_soft_outp, g_soft_pp, g_soft_care)
                                  AND i_flg_dep_type = 'N'
                                  AND 25 IN (SELECT column_value
                                               FROM TABLE(l_evts)) THEN
                              25
                             WHEN i_prof.software IN (g_soft_outp, g_soft_pp, g_soft_care)
                                  AND i_flg_dep_type = 'AS'
                                  AND 41 IN (SELECT column_value
                                               FROM TABLE(l_evts)) THEN
                              41
                             WHEN i_prof.software IN (g_soft_outp, g_soft_pp, g_soft_care)
                                  AND i_flg_dep_type = 'U'
                                  AND 16 IN (SELECT column_value
                                               FROM TABLE(l_evts)) THEN
                              16
                             ELSE
                              NULL
                         END
                    END id_sch_event,
                   CASE
                        WHEN l_default_type_of_visit IS NOT NULL THEN
                         pk_schedule_common.get_translation_alias(i_lang,
                                                                  i_prof,
                                                                  l_default_type_of_visit,
                                                                  'SCH_EVENT.CODE_SCH_EVENT.' || l_default_type_of_visit)
                        ELSE
                         CASE
                             WHEN i_episode IS NULL
                                  OR l_id_dep_clin_serv IS NULL THEN
                              NULL
                             WHEN i_prof.software IN (g_soft_outp, g_soft_pp, g_soft_care)
                                  AND i_flg_dep_type = 'C'
                                  AND 2 IN (SELECT column_value
                                              FROM TABLE(l_evts)) THEN
                              pk_schedule_common.get_translation_alias(i_lang, i_prof, 2, 'SCH_EVENT.CODE_SCH_EVENT.2')
                             WHEN i_prof.software IN (g_soft_outp, g_soft_pp, g_soft_care)
                                  AND i_flg_dep_type = 'N'
                                  AND 25 IN (SELECT column_value
                                               FROM TABLE(l_evts)) THEN
                              pk_schedule_common.get_translation_alias(i_lang, i_prof, 25, 'SCH_EVENT.CODE_SCH_EVENT.25')
                             WHEN i_prof.software IN (g_soft_outp, g_soft_pp, g_soft_care)
                                  AND i_flg_dep_type = 'AS'
                                  AND 41 IN (SELECT column_value
                                               FROM TABLE(l_evts)) THEN
                              pk_schedule_common.get_translation_alias(i_lang, i_prof, 41, 'SCH_EVENT.CODE_SCH_EVENT.41')
                             WHEN i_prof.software IN (g_soft_outp, g_soft_pp, g_soft_care)
                                  AND i_flg_dep_type = 'U'
                                  AND 16 IN (SELECT column_value
                                               FROM TABLE(l_evts)) THEN
                              pk_schedule_common.get_translation_alias(i_lang, i_prof, 16, 'SCH_EVENT.CODE_SCH_EVENT.16')
                             ELSE
                              ''
                         END
                    END desc_sch_event,
                   pk_alert_constant.g_yes flg_target_professional,
                   CASE
                        WHEN l_default_type_off_appointment IS NOT NULL THEN
                         l_default_type_off_appointment
                        ELSE
                         CASE
                             WHEN i_flg_dep_type = 'C'
                                  AND l_id_dep_clin_serv IN (SELECT column_value
                                                               FROM TABLE(l_tovs)) THEN
                              l_id_dep_clin_serv
                             ELSE
                              NULL
                         END
                    END id_dep_clin_serv,
                   CASE
                        WHEN l_default_type_off_appointment IS NOT NULL THEN
                         l_desc_default_toa
                        ELSE
                         CASE
                             WHEN i_flg_dep_type = 'C'
                                  AND l_id_dep_clin_serv IN (SELECT column_value
                                                               FROM TABLE(l_tovs)) THEN
                              l_trans_clinical_service
                             ELSE
                              NULL
                         END
                    END desc_clinical_service,
                   CASE
                        WHEN l_default_professional IS NOT NULL THEN
                         table_number(l_default_professional)
                        ELSE
                         CASE
                             WHEN i_episode IS NULL
                                  OR l_id_dep_clin_serv IS NULL
                                  OR l_epis_type <> i_epis_type THEN
                              NULL
                             WHEN i_prof.software IN (g_soft_outp, g_soft_pp, g_soft_care)
                                  AND i_prof.id IN (SELECT column_value
                                                      FROM TABLE(l_prfs)) THEN
                              table_number(i_prof.id)
                             ELSE
                              table_number(-1)
                         END
                    END id_prof,
                   CASE
                        WHEN l_default_professional IS NOT NULL
                             AND l_default_professional <> -1 THEN
                         pk_prof_utils.get_name_signature(i_lang, i_prof, l_default_professional)
                        WHEN l_default_professional = -1 THEN
                         pk_message.get_message(i_lang, i_prof, 'FUTURE_EVENTS_T017')
                        ELSE
                         CASE
                             WHEN i_episode IS NULL
                                  OR l_id_dep_clin_serv IS NULL
                                  OR l_epis_type <> i_epis_type THEN
                              NULL
                             WHEN i_prof.software IN (g_soft_outp, g_soft_pp, g_soft_care)
                                  AND i_prof.id IN (SELECT column_value
                                                      FROM TABLE(l_prfs)) THEN
                              pk_prof_utils.get_name_signature(i_lang, i_prof, i_prof.id)
                             ELSE
                              l_future_events_t017
                         END
                    END desc_prof,
                   CASE
                    
                        WHEN l_sch_complaint_origin <> g_complaint THEN
                         NULL
                        WHEN i_prof.software IN (g_soft_outp, g_soft_pp, g_soft_care)
                             AND l_id_complaint IN (SELECT column_value
                                                      FROM TABLE(l_rovs)) THEN
                         l_id_complaint
                        ELSE
                         NULL
                    END id_complaint,
                   CASE
                        WHEN l_sch_complaint_origin <> g_complaint THEN
                         ''
                        WHEN i_prof.software IN (g_soft_outp, g_soft_pp, g_soft_care)
                             AND l_id_complaint IN (SELECT column_value
                                                      FROM TABLE(l_rovs)) THEN
                         l_desc_complaint
                        ELSE
                         ''
                    END desc_complaint,
                   pk_sysconfig.get_config(g_default_priority, i_prof) priority,
                   pk_sysdomain.get_domain(g_flg_priority, pk_sysconfig.get_config(g_default_priority, i_prof), i_lang) priority_desc,
                   CASE
                        WHEN i_prof.software IN (g_soft_outp, g_soft_pp, g_soft_care) THEN
                         l_contact_type
                        ELSE
                         pk_sysconfig.get_config(g_default_contact_type, i_prof)
                    END contact_type,
                   CASE
                        WHEN i_prof.software IN (g_soft_outp, g_soft_pp, g_soft_care) THEN
                         l_contact_type_desc
                        ELSE
                         pk_sysdomain.get_domain(pk_grid_amb.g_domain_sch_presence,
                                                 pk_sysconfig.get_config(g_default_contact_type, i_prof),
                                                 i_lang)
                    END desc_contact_type,
                   l_id_department id_department,
                   g_flg_not_repeat recurrence,
                   l_msg_not_repeat desc_recurrence
              FROM dual;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_default_values);
            RETURN FALSE;
    END get_default_values;

    /********************************************************************************************
    * get execute values
    *
    * @param      i_lang      Língua registada como preferência do profissional       
    * @param     o_execute_values  return values
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/20
    **********************************************************************************************/
    FUNCTION get_execute_values
    (
        i_lang           IN language.id_language%TYPE,
        o_execute_values OUT pk_types.cursor_type,
        o_error          OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_EXECUTE_VALUES';
    BEGIN
        OPEN o_execute_values FOR
        
            SELECT 'D' val, pk_message.get_message(i_lang, 'FUTURE_EVENTS_T021') val_desc, 20 rank
              FROM dual
            UNION ALL
            SELECT 'I' val, pk_message.get_message(i_lang, 'FUTURE_EVENTS_T022') val_desc, 30 rank
              FROM dual;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_execute_values);
            RETURN FALSE;
    END get_execute_values;

    /********************************************************************************************
    * get execute values
    *
    * @param      i_lang             Língua registada como preferência do profissional  
    * @param      i_prof             profissional identifier   
    * @param      i_id_dep_clin_serv clinical service identifier
    *     
    * @param     o_sql  return values
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/21
    **********************************************************************************************/

    FUNCTION get_reason_of_visit
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_id_dep_clin_serv IN dep_clin_serv.id_dep_clin_serv%TYPE,
        o_sql              OUT pk_types.cursor_type,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_REASON_OF_VISIT';
    BEGIN
        g_error := 'OPEN CURSOR O_SQL';
        OPEN o_sql FOR
            SELECT c.id_complaint, pk_translation.get_translation(i_lang, code_complaint) desc_complaint
              FROM complaint c,
                   (SELECT id_context
                      FROM doc_template_context dtc
                     WHERE dtc.id_institution IN (0, i_prof.institution)
                       AND dtc.id_software IN (0, i_prof.software)
                       AND dtc.id_dep_clin_serv = i_id_dep_clin_serv
                       AND instr(dtc.flg_type, 'C') > 0
                     GROUP BY id_context) xx
             WHERE xx.id_context = c.id_complaint
             ORDER BY desc_complaint;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_sql);
            pk_alert_exceptions.reset_error_state;
            RETURN FALSE;
    END get_reason_of_visit;

    /********************************************************************************************
    * get execute values
    *
    * @param      i_lang             Língua registada como preferência do profissional  
    * @param      i_prof             profissional identifier   
    * @param      i_id_dep_clin_serv clinical service identifier
    * @param      i_patient          patient identifier 
    * @param      i_episode          episode identifier
    *     
    * @param     o_sql  return values
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/21
    **********************************************************************************************/

    FUNCTION get_reason_of_visit
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_id_dep_clin_serv IN dep_clin_serv.id_dep_clin_serv%TYPE,
        i_patient          IN patient.id_patient%TYPE,
        i_episode          IN episode.id_episode%TYPE,
        i_sch_event        IN sch_event.id_sch_event%TYPE,
        i_institution      IN institution.id_institution%TYPE,
        i_professional     IN professional.id_professional%TYPE,
        i_epis_type        IN epis_type.id_epis_type%TYPE,
        o_sql              OUT pk_types.cursor_type,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name    VARCHAR2(60 CHAR) := 'GET_REASON_OF_VISIT';
        l_software     software.id_software%TYPE := pk_episode.get_soft_by_epis_type(i_epis_type, i_institution);
        l_professional professional.id_professional%TYPE;
    BEGIN
    
        IF i_professional <> -1
        THEN
            l_professional := i_professional;
        END IF;
    
        OPEN o_sql FOR
            SELECT tbl.id_complaint id_complaint, tbl.desc_complaint desc_complaint
              FROM (SELECT c.id_complaint, pk_translation.get_translation(i_lang, c.code_complaint) desc_complaint
                      FROM (SELECT d.id_context,
                                   MAX(d.id_institution) id_institution,
                                   d.id_software,
                                   d.id_dep_clin_serv,
                                   d.id_profile_template,
                                   d.flg_type,
                                   dcs.id_clinical_service
                              FROM doc_template_context d
                              JOIN dep_clin_serv dcs
                                ON dcs.id_dep_clin_serv = d.id_dep_clin_serv
                             WHERE d.id_institution IN (i_institution, 0)
                               AND d.id_software = l_software
                               AND d.id_dep_clin_serv = i_id_dep_clin_serv
                               AND d.id_sch_event IN (SELECT MAX(d2.id_sch_event)
                                                        FROM doc_template_context d2
                                                       WHERE d2.id_institution IN (i_institution, 0)
                                                         AND d2.id_software = l_software
                                                         AND d2.flg_type = g_flg_type_ct
                                                         AND d2.id_sch_event IN (i_sch_event, 0)
                                                         AND d2.id_dep_clin_serv = d.id_dep_clin_serv)
                               AND d.flg_type = g_flg_type_ct
                             GROUP BY id_context,
                                      id_software,
                                      d.id_dep_clin_serv,
                                      d.id_profile_template,
                                      d.flg_type,
                                      dcs.id_clinical_service) dtc2
                      JOIN complaint c
                        ON c.id_complaint = dtc2.id_context
                       AND c.flg_available = pk_alert_constant.g_yes
                     WHERE EXISTS (SELECT 1
                              FROM prof_profile_template ppt
                             WHERE ppt.id_profile_template = dtc2.id_profile_template
                               AND ppt.id_institution = i_institution
                               AND ppt.id_professional = nvl(l_professional, ppt.id_professional)
                               AND ppt.id_software = l_software
                               AND rownum = 1)) tbl
             GROUP BY tbl.id_complaint, tbl.desc_complaint
             ORDER BY desc_complaint;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_sql);
            pk_alert_exceptions.reset_error_state;
            RETURN FALSE;
    END get_reason_of_visit;

    FUNCTION get_reason_of_visit
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_id_dep_clin_serv IN dep_clin_serv.id_dep_clin_serv%TYPE,
        i_patient          IN patient.id_patient%TYPE,
        i_episode          IN episode.id_episode%TYPE,
        i_sch_event        IN sch_event.id_sch_event%TYPE,
        i_institution      IN institution.id_institution%TYPE,
        i_professional     IN professional.id_professional%TYPE
    ) RETURN t_tbl_core_domain IS
        l_func_name    VARCHAR2(60 CHAR) := 'GET_REASON_OF_VISIT';
        l_software     software.id_software%TYPE;
        l_professional professional.id_professional%TYPE;
    
        l_epis_type         epis_type.id_epis_type%TYPE;
        l_future_event_type future_event_type.id_future_event_type%TYPE;
        l_flg_type          future_event_type.flg_type%TYPE;
        l_title             pk_translation.t_desc_translation;
    
        l_return t_tbl_core_domain;
        l_error  t_error_out;
    BEGIN
    
        IF i_professional <> -1
        THEN
            l_professional := i_professional;
        END IF;
    
        g_error := 'ERROR CALLING GET_FET_EP_BY_TASK_TYPE';
        IF NOT pk_events.get_fet_ep_by_task_type(i_lang              => i_lang,
                                                 i_prof              => i_prof,
                                                 i_id_task_type      => 30, --MEDICAL APPOINTMENT
                                                 o_future_event_type => l_future_event_type,
                                                 o_epis_type         => l_epis_type,
                                                 o_flg_type          => l_flg_type,
                                                 o_title             => l_title,
                                                 o_error             => l_error)
        THEN
            RETURN t_tbl_core_domain();
        END IF;
    
        l_software := pk_episode.get_soft_by_epis_type(l_epis_type, i_institution);
    
        g_error := 'OPEN L_RETURN';
        SELECT *
          BULK COLLECT
          INTO l_return
          FROM (SELECT t_row_core_domain(internal_name => NULL,
                                         desc_domain   => desc_complaint,
                                         domain_value  => id_complaint,
                                         order_rank    => NULL,
                                         img_name      => NULL)
                  FROM (SELECT tbl.id_complaint id_complaint, tbl.desc_complaint desc_complaint
                          FROM (SELECT c.id_complaint,
                                       pk_translation.get_translation(i_lang, c.code_complaint) desc_complaint
                                  FROM (SELECT d.id_context,
                                               MAX(d.id_institution) id_institution,
                                               d.id_software,
                                               d.id_dep_clin_serv,
                                               d.id_profile_template,
                                               d.flg_type,
                                               dcs.id_clinical_service
                                          FROM doc_template_context d
                                          JOIN dep_clin_serv dcs
                                            ON dcs.id_dep_clin_serv = d.id_dep_clin_serv
                                         WHERE d.id_institution IN (i_institution, 0)
                                           AND d.id_software = l_software
                                           AND d.id_dep_clin_serv = i_id_dep_clin_serv
                                           AND d.id_sch_event IN
                                               (SELECT MAX(d2.id_sch_event)
                                                  FROM doc_template_context d2
                                                 WHERE d2.id_institution IN (i_institution, 0)
                                                   AND d2.id_software = l_software
                                                   AND d2.flg_type = g_flg_type_ct
                                                   AND d2.id_sch_event IN (i_sch_event, 0)
                                                   AND d2.id_dep_clin_serv = d.id_dep_clin_serv)
                                           AND d.flg_type = g_flg_type_ct
                                         GROUP BY id_context,
                                                  id_software,
                                                  d.id_dep_clin_serv,
                                                  d.id_profile_template,
                                                  d.flg_type,
                                                  dcs.id_clinical_service) dtc2
                                  JOIN complaint c
                                    ON c.id_complaint = dtc2.id_context
                                   AND c.flg_available = pk_alert_constant.g_yes
                                 WHERE EXISTS (SELECT 1
                                          FROM prof_profile_template ppt
                                         WHERE ppt.id_profile_template = dtc2.id_profile_template
                                           AND ppt.id_institution = i_institution
                                           AND ppt.id_professional = nvl(l_professional, ppt.id_professional)
                                           AND ppt.id_software = l_software
                                           AND rownum = 1)) tbl
                         GROUP BY tbl.id_complaint, tbl.desc_complaint
                         ORDER BY desc_complaint));
    
        RETURN l_return;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              l_error);
            pk_alert_exceptions.reset_error_state;
            RETURN t_tbl_core_domain();
    END get_reason_of_visit;
    /********************************************************************************************
    * result FUTURE events
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_consult_req            patient identifier
    * @param      o_events             events
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/05
    **********************************************************************************************/
    FUNCTION get_future_events
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_consult_req IN consult_req.id_consult_req%TYPE,
        o_events      OUT pk_types.cursor_type,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name            VARCHAR2(60 CHAR) := 'GET_FUTURE_EVENTS';
        l_id_prof_list         table_number;
        l_name_prof_list       table_varchar;
        l_id_req_prof_list     table_number;
        l_name_req_prof_list   table_varchar;
        l_msg_not_repeat       sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_not_repeat);
        l_msg_daily            sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_daily);
        l_msg_weekly           sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_weekly);
        l_msg_monthly          sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_monthly);
        l_msg_yearly           sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_yearly);
        l_sch_complaint_origin sys_config.value%TYPE := nvl(pk_sysconfig.get_config(g_sch_complaint_origin, i_prof),
                                                            g_complaint);
    BEGIN
    
        IF NOT pk_events.get_fe_approval_professionals(i_lang           => i_lang,
                                                       i_prof           => i_prof,
                                                       i_consult_req    => i_consult_req,
                                                       i_hist           => pk_alert_constant.g_no,
                                                       o_id_prof_list   => l_id_prof_list,
                                                       o_name_prof_list => l_name_prof_list,
                                                       o_error          => o_error)
        THEN
            RETURN FALSE;
        END IF;
    
        IF NOT pk_events.get_fe_request_professionals(i_lang           => i_lang,
                                                      i_prof           => i_prof,
                                                      i_consult_req    => i_consult_req,
                                                      i_hist           => pk_alert_constant.g_no,
                                                      o_id_prof_list   => l_id_req_prof_list,
                                                      o_name_prof_list => l_name_req_prof_list,
                                                      o_error          => o_error)
        THEN
            RETURN FALSE;
        END IF;
    
        IF l_id_req_prof_list.count = 0
        THEN
            l_id_req_prof_list.extend(1);
            l_id_req_prof_list(1) := -1;
            l_name_req_prof_list.extend(1);
            l_name_req_prof_list(1) := pk_message.get_message(i_lang, i_prof, 'FUTURE_EVENTS_T017');
        END IF;
    
        g_error := 'OPEN CURSOR o_events';
        OPEN o_events FOR
            SELECT cr.id_patient,
                   cr.id_prof_req,
                   pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_req) desc_prof_reg_by,
                   cr.id_instit_requests,
                   pk_utils.get_institution_name(i_lang, cr.id_instit_requests) desc_inst_reg_by,
                   cr.id_soft_reg_by,
                   pk_utils.get_software_name(i_lang, cr.id_soft_reg_by) request_origin,
                   cr.dt_last_update last_update_date,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, cr.id_instit_requests, NULL),
                                                                         cr.dt_begin_event),
                                        i_prof) desc_last_update_date,
                   --id_prof_requested,
                   --pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_requested) desc_prof_req_to,
                   cr.id_inst_requested,
                   pk_utils.get_institution_name(i_lang, cr.id_inst_requested) desc_id_inst_req_to,
                   se.id_sch_event,
                   se.flg_target_professional,
                   pk_schedule_common.get_translation_alias(i_lang, i_prof, se.id_sch_event, se.code_sch_event) desc_sch_event,
                   cr.id_dep_clin_serv,
                   pk_translation.get_translation(i_lang, cs.code_clinical_service) desc_dep_clin_serv,
                   CASE
                        WHEN l_sch_complaint_origin = g_complaint THEN
                         cr.id_complaint
                        ELSE
                         NULL
                    END id_complaint,
                   CASE
                        WHEN l_sch_complaint_origin = g_complaint THEN
                         pk_translation.get_translation(i_lang, c.code_complaint)
                        ELSE
                         cr.reason_for_visit
                    END desc_complaint,
                   pk_date_utils.date_send_tsz(i_lang,
                                               pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                             cr.id_instit_requests,
                                                                                             NULL),
                                                                                dt_begin_event),
                                               i_prof) dt_begin_event,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, cr.id_instit_requests, NULL),
                                                                         cr.dt_begin_event),
                                        i_prof) desc_dt_begin_event,
                   pk_date_utils.date_send_tsz(i_lang,
                                               pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                             cr.id_instit_requests,
                                                                                             NULL),
                                                                                dt_end_event),
                                               i_prof) dt_end_event,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, cr.id_instit_requests, NULL),
                                                                         cr.dt_end_event),
                                        i_prof) desc_dt_end_event,
                   cr.flg_priority priority,
                   pk_sysdomain.get_domain(g_flg_priority, flg_priority, i_lang) desc_priority,
                   cr.flg_contact_type contact_type,
                   pk_sysdomain.get_domain(pk_grid_amb.g_domain_sch_presence, cr.flg_contact_type, i_lang) desc_contact_type,
                   cr.notes,
                   cr.instructions,
                   cr.id_room,
                   nvl(r.desc_room, pk_translation.get_translation(i_lang, r.code_room)) desc_room,
                   cr.flg_request_type request_type,
                   pk_sysdomain.get_domain(g_sched_flg_sch_via, flg_request_type, i_lang) desc_request_type,
                   cr.flg_req_resp request_responsable,
                   pk_sysdomain.get_domain(g_sched_flg_req_type, flg_req_resp, i_lang) desc_request_responsable,
                   cr.id_language,
                   pk_translation.get_translation(i_lang, l.code_language) desc_language,
                   cr.flg_status,
                   pk_sysdomain.get_domain('CONSULT_REQ.FLG_STATUS', cr.flg_status, i_lang) desc_status,
                   nvl(flg_recurrence, g_flg_not_repeat) recurrence,
                   CASE nvl(flg_recurrence, g_flg_not_repeat)
                       WHEN g_flg_not_repeat THEN
                        l_msg_not_repeat
                       WHEN g_flg_daily THEN
                        l_msg_daily
                       WHEN g_flg_weekly THEN
                        l_msg_weekly
                       WHEN g_flg_monthly THEN
                        l_msg_monthly
                       WHEN g_flg_yearly THEN
                        l_msg_yearly
                       ELSE
                        NULL
                   END desc_recurrence,
                   cr.frequency,
                   pk_date_utils.date_send_tsz(i_lang,
                                               pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                             cr.id_instit_requests,
                                                                                             NULL),
                                                                                dt_rec_begin),
                                               i_prof) dt_rec_begin,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, cr.id_instit_requests, NULL),
                                                                         cr.dt_rec_begin),
                                        i_prof) desc_dt_rec_begin,
                   pk_date_utils.date_send_tsz(i_lang,
                                               pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                             cr.id_instit_requests,
                                                                                             NULL),
                                                                                dt_rec_end),
                                               i_prof) dt_rec_end,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, cr.id_instit_requests, NULL),
                                                                         cr.dt_rec_end),
                                        i_prof) desc_dt_rec_end,
                   cr.nr_events,
                   cr.week_day,
                   cr.week_nr,
                   cr.month_day,
                   cr.month_nr,
                   dcs.id_department id_department,
                   fet.flg_type flg_epis_type,
                   pk_translation.get_translation(i_lang, fet.code_future_event_title) title,
                   cr.request_reason,
                   l_id_prof_list id_prof_list,
                   l_name_prof_list name_prof_list,
                   nvl2(cr.id_prof_requested, table_number(cr.id_prof_requested), l_id_req_prof_list) id_req_prof_list,
                   nvl2(cr.id_prof_requested,
                        table_varchar(pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_requested)),
                        l_name_req_prof_list) name_req_prof_list,
                   nvl(cr.id_epis_type, get_epis_type_consult_req(cr.id_consult_req)) id_epis_type
              FROM consult_req cr
              LEFT JOIN dep_clin_serv dcs
                ON (cr.id_dep_clin_serv = dcs.id_dep_clin_serv)
              LEFT JOIN clinical_service cs
                ON (dcs.id_clinical_service = cs.id_clinical_service)
              LEFT JOIN sch_event se
                ON (se.id_sch_event = cr.id_sch_event)
              LEFT JOIN complaint c
                ON (c.id_complaint = cr.id_complaint)
              LEFT JOIN room r
                ON (r.id_room = cr.id_room)
              LEFT JOIN LANGUAGE l
                ON (l.id_language = cr.id_language)
              LEFT JOIN future_event_type fet
                ON (fet.id_epis_type = nvl(cr.id_epis_type, get_epis_type_consult_req(cr.id_consult_req)))
             WHERE cr.id_consult_req = i_consult_req;
        --AND pk_schedule_common.get_sch_event_avail(se.id_sch_event, cr.id_instit_requests, i_prof.software) = pk_alert_constant.g_yes;
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_events);
            pk_alert_exceptions.reset_error_state;
            RETURN FALSE;
    END get_future_events;

    /********************************************************************************************
    * Returns the actions associated to the PLUS button
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      o_actions            actions list
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Sérgio Santos
    * @version 1.0
    * @since  2010/05/24
    **********************************************************************************************/
    FUNCTION get_plus_actions
    (
        i_lang    IN language.id_language%TYPE,
        i_prof    IN profissional,
        o_actions OUT pk_types.cursor_type,
        o_error   OUT t_error_out
    ) RETURN BOOLEAN IS
    
    BEGIN
    
        g_error := 'OPEN CURSOR o_events';
        OPEN o_actions FOR
            SELECT *
              FROM (SELECT fet.id_future_event_type id_action,
                           fet.id_parent,
                           fet.rank rank,
                           pk_translation.get_translation(i_lang, fet.code_future_event_type) desc_action,
                           fet.icon,
                           pk_alert_constant.g_no flg_default,
                           pk_alert_constant.g_yes flg_active,
                           fet.action,
                           fet.flg_type,
                           fet.id_epis_type,
                           pk_translation.get_translation(i_lang, fet.code_future_event_title) title
                      FROM future_event_type fet
                     WHERE (is_fe_available(fet.id_future_event_type, i_prof) = pk_alert_constant.g_yes)
                        OR fet.id_future_event_type = 6)
             ORDER BY rank, desc_action;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              'GET_PLUS_ACTIONS',
                                              o_error);
            pk_types.open_my_cursor(o_actions);
            pk_alert_exceptions.reset_error_state;
            RETURN FALSE;
    END get_plus_actions;

    /*
    * Get event detail
    *
    * @param i_lang             language identifier
    * @param i_prof             logged professional structure    
    * @param i_consult_req    future_events id
    * @param o_event            return cursor
    * @param o_req_det
    * @param o_error            error
    *
    * @author                 Paulo Teixeira
    * @version                2.6.0.3
    * @since                  2010/05/26
    */
    FUNCTION get_event_general
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_consult_req IN consult_req.id_consult_req%TYPE,
        o_event       OUT pk_types.cursor_type,
        o_req_det     OUT pk_types.cursor_type,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name   VARCHAR2(60 CHAR) := 'GET_EVENT_GENERAL';
        l_type_bold   VARCHAR2(1 CHAR) := 'B';
        l_type_italic VARCHAR2(1 CHAR) := 'N';
    
        l_label_registered     sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T024');
        l_label_status         sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T025');
        l_label_notes          sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T010');
        l_label_cancel_notes   sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T027');
        l_label_cancel_reason  sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T028');
        l_label_instructions   sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T011');
        l_label_prof_req_to    sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T005');
        l_label_inst_req_to    sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T002');
        l_label_sch_event      sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T004');
        l_label_dep_clin_serv  sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T003');
        l_label_complaint      sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T006');
        l_label_event_date     sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T007');
        l_label_priority       sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T008');
        l_label_contact_type   sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T009');
        l_label_room           sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T012');
        l_label_request_type   sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T013');
        l_label_req_resp       sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T014');
        l_label_lang           sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T015');
        l_label_recurrence     sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T016');
        l_label_frequency      sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T026');
        l_label_dt_rec_begin   sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T029');
        l_label_rec_end        sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'SCH_T623');
        l_label_week_day       sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'SCH_T629');
        l_label_week_nr        sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'SCH_T345');
        l_label_month_day      sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'SCH_T630');
        l_label_month_nr       sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'SCH_T335');
        l_label_request_reason sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T033');
        l_label_approval_prof  sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T034');
        l_problem_list_t069    sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'PROBLEM_LIST_T069');
        l_label_read           sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T067');
        l_label_accept         sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T068');
        l_label_reject         sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T069');
        l_label_sched          sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T070');
        l_label_on             sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T071');
        l_date_sep             sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T073');
        l_label_denial         sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T084');
        l_label_approve        sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T085');
        l_common_m092          sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M092');
        l_sch_t305             sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'SCH_T305');
        l_common_m060          sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M060');
        l_common_m049          sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M049');
        l_common_m093          sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M093');
        l_woman_health_t001    sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'WOMAN_HEALTH_T001');
        l_common_m061          sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M061');
        l_common_m050          sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M050');
        l_future_events_t037   sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T037');
        l_future_events_t038   sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                       i_prof,
                                                                                       'FUTURE_EVENTS_T038');
        l_msg_not_repeat       sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_not_repeat);
        l_msg_daily            sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_daily);
        l_msg_weekly           sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_weekly);
        l_msg_monthly          sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_monthly);
        l_msg_yearly           sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_yearly);
        l_sch_complaint_origin sys_config.value%TYPE := nvl(pk_sysconfig.get_config(g_sch_complaint_origin, i_prof),
                                                            g_complaint);
    
    BEGIN
        OPEN o_req_det FOR
            SELECT table_varchar(l_type_bold,
                                 decode(crp.flg_status,
                                        g_cons_req_prof_read,
                                        l_label_read,
                                        g_cons_req_prof_accept,
                                        l_label_accept,
                                        g_cons_req_prof_deny,
                                        l_label_reject),
                                 pk_prof_utils.get_name_signature(i_lang, i_prof, crp.id_professional) || ' (' ||
                                 nvl(pk_prof_utils.get_spec_signature(i_lang,
                                                                      i_prof,
                                                                      crp.id_professional,
                                                                      crp.dt_consult_req_prof_tstz,
                                                                      NULL),
                                     l_problem_list_t069) || ')' || g_space || l_label_on || g_space ||
                                 pk_date_utils.date_char_tsz(i_lang,
                                                             crp.dt_consult_req_prof_tstz,
                                                             i_prof.institution,
                                                             i_prof.software)) action,
                   table_varchar(l_type_bold,
                                 decode(crp.flg_status,
                                        g_cons_req_prof_accept,
                                        l_label_approve,
                                        g_cons_req_prof_deny,
                                        l_label_denial),
                                 crp.denial_justif) denial,
                   table_varchar(l_type_bold,
                                 decode(crp.flg_status,
                                        g_cons_req_prof_accept,
                                        l_label_approve,
                                        g_cons_req_prof_deny,
                                        l_label_denial),
                                 crp.approve_justif) approve,
                   table_varchar(l_type_bold,
                                 l_label_sched,
                                 pk_date_utils.dt_chr_tsz(i_lang,
                                                          pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                        cr.id_instit_requests,
                                                                                                        NULL),
                                                                                           cr.dt_scheduled_tstz),
                                                          i_prof.institution,
                                                          i_prof.software)) sched
              FROM consult_req cr, consult_req_prof crp
             WHERE cr.id_consult_req = i_consult_req
               AND crp.id_consult_req = cr.id_consult_req
               AND ((crp.flg_status IN (g_cons_req_prof_accept, g_cons_req_prof_deny)) OR
                   (crp.flg_status = g_cons_req_prof_read AND
                   (crp.id_professional, crp.dt_consult_req_prof_tstz) IN
                   (SELECT id_professional, MIN(dt_consult_req_prof_tstz)
                        FROM consult_req_prof
                       WHERE id_consult_req = i_consult_req
                       GROUP BY id_professional)))
             ORDER BY crp.dt_consult_req_prof_tstz;
    
        g_error := 'OPEN GET_EVENT_GENERAL';
        OPEN o_event FOR
            SELECT table_varchar(l_type_bold,
                                 l_label_inst_req_to,
                                 pk_utils.get_institution_name(i_lang, cr.id_inst_requested)) inst_req_to,
                   table_varchar(l_type_bold,
                                 l_label_dep_clin_serv,
                                 pk_translation.get_translation(i_lang, cs.code_clinical_service)) dep_clin_serv,
                   table_varchar(l_type_bold,
                                 l_label_sch_event,
                                 pk_schedule_common.get_translation_alias(i_lang,
                                                                          i_prof,
                                                                          se.id_sch_event,
                                                                          se.code_sch_event)) sch_event,
                   table_varchar(l_type_bold,
                                 l_label_prof_req_to,
                                 nvl2(cr.id_prof_requested,
                                      pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_requested),
                                      pk_events.get_fe_request_prof_str(i_lang,
                                                                        i_prof,
                                                                        cr.id_consult_req,
                                                                        pk_alert_constant.g_no))) prof_req_to,
                   table_varchar(l_type_bold,
                                  l_label_complaint,
                                  CASE
                                      WHEN l_sch_complaint_origin = g_complaint THEN
                                       pk_translation.get_translation(i_lang, c.code_complaint)
                                      ELSE
                                       cr.reason_for_visit
                                  END) complaint,
                   table_varchar(l_type_bold,
                                 l_label_event_date,
                                 nvl2(cr.dt_end_event,
                                      pk_date_utils.dt_chr(i_lang,
                                                           pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                         cr.id_instit_requests,
                                                                                                         NULL),
                                                                                            cr.dt_begin_event),
                                                           i_prof) || g_space || l_date_sep || g_space ||
                                      pk_date_utils.dt_chr(i_lang,
                                                           pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                         cr.id_instit_requests,
                                                                                                         NULL),
                                                                                            cr.dt_end_event),
                                                           i_prof),
                                      pk_date_utils.dt_chr(i_lang,
                                                           pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                         cr.id_instit_requests,
                                                                                                         NULL),
                                                                                            cr.dt_begin_event),
                                                           i_prof))) event_date,
                   
                   table_varchar(l_type_bold,
                                 l_label_priority,
                                 pk_sysdomain.get_domain(g_flg_priority, cr.flg_priority, i_lang)) priority,
                   table_varchar(l_type_bold,
                                 l_label_contact_type,
                                 pk_sysdomain.get_domain(pk_grid_amb.g_domain_sch_presence, cr.flg_contact_type, i_lang)) contact_type,
                   table_varchar(l_type_bold, l_label_notes, cr.notes) notes,
                   table_clob(to_clob(l_type_bold), to_clob(l_label_instructions), to_clob(cr.instructions)) instructions,
                   table_varchar(l_type_bold,
                                 l_label_room,
                                 nvl(r.desc_room, pk_translation.get_translation(i_lang, r.code_room))) room,
                   table_varchar(l_type_bold,
                                 l_label_request_type,
                                 pk_sysdomain.get_domain(g_sched_flg_sch_via, cr.flg_request_type, i_lang)) request_type,
                   table_varchar(l_type_bold,
                                 l_label_req_resp,
                                 pk_sysdomain.get_domain(g_sched_flg_req_type, cr.flg_req_resp, i_lang)) req_resp,
                   table_varchar(l_type_bold, l_label_lang, pk_translation.get_translation(i_lang, l.code_language)) lang,
                   table_varchar(l_type_bold,
                                 l_label_approval_prof,
                                 pk_events.get_fe_approval_prof_str(i_lang,
                                                                    i_prof,
                                                                    i_consult_req,
                                                                    pk_alert_constant.g_no)) approval_prof,
                   table_varchar(l_type_bold, l_label_request_reason, cr.request_reason) request_reason,
                   CASE nvl(cr.flg_recurrence, g_flg_not_repeat)
                       WHEN g_flg_not_repeat THEN
                        table_varchar(l_type_bold, l_label_recurrence, l_msg_not_repeat)
                       WHEN g_flg_daily THEN
                        table_varchar(l_type_bold, l_label_recurrence, l_msg_daily)
                       WHEN g_flg_weekly THEN
                        table_varchar(l_type_bold, l_label_recurrence, l_msg_weekly)
                       WHEN g_flg_monthly THEN
                        table_varchar(l_type_bold, l_label_recurrence, l_msg_monthly)
                       WHEN g_flg_yearly THEN
                        table_varchar(l_type_bold, l_label_recurrence, l_msg_yearly)
                       ELSE
                        table_varchar(l_type_bold, l_label_recurrence, NULL)
                   END recurrence,
                   CASE
                        WHEN (cr.flg_recurrence = g_flg_daily AND cr.frequency = 1) THEN
                         table_varchar(l_type_bold, l_label_frequency, cr.frequency || g_space || l_common_m092)
                        WHEN (cr.flg_recurrence = g_flg_weekly AND cr.frequency = 1) THEN
                         table_varchar(l_type_bold, l_label_frequency, cr.frequency || g_space || l_sch_t305)
                        WHEN (cr.flg_recurrence = g_flg_monthly AND cr.frequency = 1) THEN
                         table_varchar(l_type_bold, l_label_frequency, cr.frequency || g_space || l_common_m060)
                        WHEN (cr.flg_recurrence = g_flg_yearly AND cr.frequency = 1) THEN
                         table_varchar(l_type_bold, l_label_frequency, cr.frequency || g_space || l_common_m049)
                        WHEN (cr.flg_recurrence = g_flg_daily AND cr.frequency > 1) THEN
                         table_varchar(l_type_bold, l_label_frequency, cr.frequency || g_space || l_common_m093)
                        WHEN (cr.flg_recurrence = g_flg_weekly AND cr.frequency > 1) THEN
                         table_varchar(l_type_bold, l_label_frequency, cr.frequency || g_space || l_woman_health_t001)
                        WHEN (cr.flg_recurrence = g_flg_monthly AND cr.frequency > 1) THEN
                         table_varchar(l_type_bold, l_label_frequency, cr.frequency || g_space || l_common_m061)
                        WHEN (cr.flg_recurrence = g_flg_yearly AND cr.frequency > 1) THEN
                         table_varchar(l_type_bold, l_label_frequency, cr.frequency || g_space || l_common_m050)
                        ELSE
                         table_varchar(l_type_bold, l_label_frequency, NULL)
                    END frequency,
                   table_varchar(l_type_bold,
                                 l_label_dt_rec_begin,
                                 pk_date_utils.dt_chr(i_lang,
                                                      pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                    cr.id_instit_requests,
                                                                                                    NULL),
                                                                                       cr.dt_rec_begin),
                                                      i_prof)) dt_rec_begin,
                   table_varchar(l_type_bold,
                                 l_label_rec_end,
                                 pk_date_utils.dt_chr(i_lang,
                                                      pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                    cr.id_instit_requests,
                                                                                                    NULL),
                                                                                       cr.dt_rec_end),
                                                      i_prof)) dt_rec_end,
                   CASE
                        WHEN (cr.nr_events = 1) THEN
                         table_varchar(l_type_bold, l_label_rec_end, cr.nr_events || g_space || l_future_events_t037)
                        WHEN (cr.nr_events > 1) THEN
                         table_varchar(l_type_bold, l_label_rec_end, cr.nr_events || g_space || l_future_events_t038)
                        ELSE
                         table_varchar(l_type_bold, l_label_rec_end, NULL)
                    END nr_event,
                   table_varchar(l_type_bold, l_label_week_day, pk_events.get_week_day(i_lang, i_prof, cr.week_day)) week_day,
                   table_varchar(l_type_bold, l_label_week_nr, pk_events.get_week_nr(i_lang, i_prof, cr.week_nr)) week_nr,
                   table_varchar(l_type_bold, l_label_month_day, cr.month_day) month_day,
                   table_varchar(l_type_bold, l_label_month_nr, pk_events.get_month(i_lang, i_prof, cr.month_nr)) month_nr,
                   table_varchar(l_type_bold,
                                 l_label_status,
                                 pk_sysdomain.get_domain('CONSULT_REQ.FLG_STATUS', cr.flg_status, i_lang)) status,
                   table_varchar(l_type_bold, l_label_cancel_notes, cr.notes_cancel) cancel_notes,
                   table_varchar(l_type_bold,
                                 l_label_cancel_reason,
                                 pk_translation.get_translation(i_lang, cre.code_cancel_reason)) cancel_reason,
                   table_varchar(l_type_italic,
                                 l_label_registered,
                                 pk_date_utils.date_char_tsz(i_lang,
                                                             nvl(cr.dt_last_update, cr.dt_consult_req_tstz),
                                                             i_prof.institution,
                                                             i_prof.software) || g_semicolon ||
                                 pk_prof_utils.get_name_signature(i_lang,
                                                                  i_prof,
                                                                  nvl(cr.id_prof_last_update, cr.id_prof_req)) || ' (' ||
                                 nvl(pk_prof_utils.get_spec_signature(i_lang,
                                                                      i_prof,
                                                                      nvl(cr.id_prof_last_update, cr.id_prof_req),
                                                                      nvl(cr.dt_last_update, cr.dt_consult_req_tstz),
                                                                      cr.id_episode),
                                     l_problem_list_t069) || ')') registered
              FROM consult_req cr
              LEFT JOIN cancel_reason cre
                ON cre.id_cancel_reason = cr.id_cancel_reason
              LEFT JOIN sch_event se
                ON (se.id_sch_event = cr.id_sch_event)
              LEFT JOIN dep_clin_serv dcs
                ON (cr.id_dep_clin_serv = dcs.id_dep_clin_serv)
              LEFT JOIN clinical_service cs
                ON (dcs.id_clinical_service = cs.id_clinical_service)
              LEFT JOIN complaint c
                ON (c.id_complaint = cr.id_complaint)
              LEFT JOIN room r
                ON (r.id_room = cr.id_room)
              LEFT JOIN LANGUAGE l
                ON (l.id_language = cr.id_language)
             WHERE cr.id_consult_req = i_consult_req;
        --AND pk_schedule_common.get_sch_event_avail(se.id_sch_event, cr.id_inst_requested, i_prof.software) = pk_alert_constant.g_yes;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_event);
            pk_types.open_my_cursor(o_req_det);
            RETURN FALSE;
    END get_event_general;

    FUNCTION get_event_detail
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_consult_req IN consult_req.id_consult_req%TYPE,
        o_detail      OUT pk_types.cursor_type,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_EVENT_DETAIL';
    
        l_date_sep           sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                     i_prof,
                                                                                     'FUTURE_EVENTS_T073');
        l_msg_not_repeat     sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_not_repeat);
        l_msg_daily          sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_daily);
        l_msg_weekly         sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_weekly);
        l_msg_monthly        sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_monthly);
        l_msg_yearly         sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_yearly);
        l_problem_list_t069  sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                     i_prof,
                                                                                     'PROBLEM_LIST_T069');
        l_future_events_t037 sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                     i_prof,
                                                                                     'FUTURE_EVENTS_T037');
        l_future_events_t038 sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                     i_prof,
                                                                                     'FUTURE_EVENTS_T038');
        l_common_m060        sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M060');
        l_common_m049        sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M049');
        l_common_m093        sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M093');
        l_woman_health_t001  sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                     i_prof,
                                                                                     'WOMAN_HEALTH_T001');
        l_common_m061        sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M061');
        l_common_m050        sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M050');
        l_common_m092        sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M092');
        l_sch_t305           sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'SCH_T305');
    
        l_sch_complaint_origin sys_config.value%TYPE := nvl(pk_sysconfig.get_config(g_sch_complaint_origin, i_prof),
                                                            g_complaint);
    
        l_tab_dd_block_data t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_dd_data       t_tab_dd_data := t_tab_dd_data();
        l_data_source_list  table_varchar := table_varchar();
    BEGIN
    
        SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                   ddb.rank,
                                   NULL,
                                   NULL,
                                   ddb.condition_val,
                                   NULL,
                                   NULL,
                                   dd.data_source,
                                   dd.data_source_val,
                                   NULL)
          BULK COLLECT
          INTO l_tab_dd_block_data
          FROM (SELECT data_source, data_source_val
                  FROM (SELECT t.*
                          FROM (SELECT CASE cr.id_epis_type
                                           WHEN 1 THEN
                                            ' '
                                           ELSE
                                            NULL
                                       END title_consult,
                                       CASE cr.id_epis_type
                                           WHEN 16 THEN
                                            ' '
                                           ELSE
                                            NULL
                                       END title_nurse_consult,
                                       pk_utils.get_institution_name(i_lang, cr.id_inst_requested) inst_req_to,
                                       pk_translation.get_translation(i_lang, cs.code_clinical_service) dep_clin_serv,
                                       pk_schedule_common.get_translation_alias(i_lang,
                                                                                i_prof,
                                                                                se.id_sch_event,
                                                                                se.code_sch_event) sch_event,
                                       nvl2(cr.id_prof_requested,
                                            pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_requested),
                                            pk_events.get_fe_request_prof_str(i_lang,
                                                                              i_prof,
                                                                              cr.id_consult_req,
                                                                              pk_alert_constant.g_no)) prof_req_to,
                                       coalesce(cr.reason_for_visit,
                                                pk_translation.get_translation(i_lang, c.code_complaint)) complaint,
                                       nvl2(cr.dt_end_event,
                                            pk_date_utils.dt_chr(i_lang,
                                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                               cr.id_instit_requests,
                                                                                                               NULL),
                                                                                                  cr.dt_begin_event),
                                                                 i_prof) || g_space || l_date_sep || g_space ||
                                            pk_date_utils.dt_chr(i_lang,
                                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                               cr.id_instit_requests,
                                                                                                               NULL),
                                                                                                  cr.dt_end_event),
                                                                 i_prof),
                                            pk_date_utils.dt_chr(i_lang,
                                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                               cr.id_instit_requests,
                                                                                                               NULL),
                                                                                                  cr.dt_begin_event),
                                                                 i_prof)) event_date,
                                       pk_sysdomain.get_domain(g_flg_priority, cr.flg_priority, i_lang) priority,
                                       pk_sysdomain.get_domain(pk_grid_amb.g_domain_sch_presence,
                                                               cr.flg_contact_type,
                                                               i_lang) contact_type,
                                       cr.notes notes,
                                       to_char(cr.instructions) instructions, --CLOB??
                                       nvl(r.desc_room, pk_translation.get_translation(i_lang, r.code_room)) room,
                                       pk_sysdomain.get_domain(g_sched_flg_sch_via, cr.flg_request_type, i_lang) request_type,
                                       pk_sysdomain.get_domain(g_sched_flg_req_type, cr.flg_req_resp, i_lang) req_resp,
                                       pk_translation.get_translation(i_lang, l.code_language) lang,
                                       pk_events.get_fe_approval_prof_str(i_lang,
                                                                          i_prof,
                                                                          i_consult_req,
                                                                          pk_alert_constant.g_no) approval_prof,
                                       to_char(cr.request_reason) request_reason, --CLOB??
                                       CASE nvl(cr.flg_recurrence, g_flg_not_repeat)
                                           WHEN g_flg_not_repeat THEN
                                            l_msg_not_repeat
                                           WHEN g_flg_daily THEN
                                            l_msg_daily
                                           WHEN g_flg_weekly THEN
                                            l_msg_weekly
                                           WHEN g_flg_monthly THEN
                                            l_msg_monthly
                                           WHEN g_flg_yearly THEN
                                            l_msg_yearly
                                           ELSE
                                            NULL
                                       END recurrence,
                                       CASE
                                            WHEN (cr.flg_recurrence = g_flg_daily AND cr.frequency = 1) THEN
                                             cr.frequency || g_space || l_common_m092
                                            WHEN (cr.flg_recurrence = g_flg_weekly AND cr.frequency = 1) THEN
                                             cr.frequency || g_space || l_sch_t305
                                            WHEN (cr.flg_recurrence = g_flg_monthly AND cr.frequency = 1) THEN
                                             cr.frequency || g_space || l_common_m060
                                            WHEN (cr.flg_recurrence = g_flg_yearly AND cr.frequency = 1) THEN
                                             cr.frequency || g_space || l_common_m049
                                            WHEN (cr.flg_recurrence = g_flg_daily AND cr.frequency > 1) THEN
                                             cr.frequency || g_space || l_common_m093
                                            WHEN (cr.flg_recurrence = g_flg_weekly AND cr.frequency > 1) THEN
                                             cr.frequency || g_space || l_woman_health_t001
                                            WHEN (cr.flg_recurrence = g_flg_monthly AND cr.frequency > 1) THEN
                                             cr.frequency || g_space || l_common_m061
                                            WHEN (cr.flg_recurrence = g_flg_yearly AND cr.frequency > 1) THEN
                                             cr.frequency || g_space || l_common_m050
                                            ELSE
                                             NULL
                                        END frequency,
                                       pk_date_utils.dt_chr(i_lang,
                                                            pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                          cr.id_instit_requests,
                                                                                                          NULL),
                                                                                             cr.dt_rec_begin),
                                                            i_prof) dt_rec_begin,
                                       pk_date_utils.dt_chr(i_lang,
                                                            pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                          cr.id_instit_requests,
                                                                                                          NULL),
                                                                                             cr.dt_rec_end),
                                                            i_prof) dt_rec_end,
                                       CASE
                                            WHEN (cr.nr_events = 1) THEN
                                             cr.nr_events || g_space || l_future_events_t037
                                            WHEN (cr.nr_events > 1) THEN
                                             cr.nr_events || g_space || l_future_events_t038
                                            ELSE
                                             NULL
                                        END nr_event,
                                       pk_events.get_week_day(i_lang, i_prof, cr.week_day) week_day,
                                       pk_events.get_week_nr(i_lang, i_prof, cr.week_nr) week_nr,
                                       to_char(cr.month_day) month_day,
                                       pk_events.get_month(i_lang, i_prof, cr.month_nr) month_nr,
                                       pk_sysdomain.get_domain('CONSULT_REQ.FLG_STATUS', cr.flg_status, i_lang) status,
                                       cr.notes_cancel cancel_notes,
                                       pk_translation.get_translation(i_lang, cre.code_cancel_reason) cancel_reason,
                                       pk_date_utils.date_char_tsz(i_lang,
                                                                   nvl(cr.dt_last_update, cr.dt_consult_req_tstz),
                                                                   i_prof.institution,
                                                                   i_prof.software) || g_semicolon ||
                                       pk_prof_utils.get_name_signature(i_lang,
                                                                        i_prof,
                                                                        nvl(cr.id_prof_last_update, cr.id_prof_req)) || ' (' ||
                                       nvl(pk_prof_utils.get_spec_signature(i_lang,
                                                                            i_prof,
                                                                            nvl(cr.id_prof_last_update, cr.id_prof_req),
                                                                            nvl(cr.dt_last_update, cr.dt_consult_req_tstz),
                                                                            cr.id_episode),
                                           l_problem_list_t069) || ')' registered
                                  FROM consult_req cr
                                  LEFT JOIN cancel_reason cre
                                    ON cre.id_cancel_reason = cr.id_cancel_reason
                                  LEFT JOIN sch_event se
                                    ON (se.id_sch_event = cr.id_sch_event)
                                  LEFT JOIN dep_clin_serv dcs
                                    ON (cr.id_dep_clin_serv = dcs.id_dep_clin_serv)
                                  LEFT JOIN clinical_service cs
                                    ON (dcs.id_clinical_service = cs.id_clinical_service)
                                  LEFT JOIN complaint c
                                    ON (c.id_complaint = cr.id_complaint)
                                  LEFT JOIN room r
                                    ON (r.id_room = cr.id_room)
                                  LEFT JOIN LANGUAGE l
                                    ON (l.id_language = cr.id_language)
                                 WHERE cr.id_consult_req = i_consult_req) t) unpivot include NULLS(data_source_val FOR data_source IN(title_consult,
                                                                                                                                      title_nurse_consult,
                                                                                                                                      inst_req_to,
                                                                                                                                      dep_clin_serv,
                                                                                                                                      sch_event,
                                                                                                                                      prof_req_to,
                                                                                                                                      complaint,
                                                                                                                                      event_date,
                                                                                                                                      priority,
                                                                                                                                      contact_type,
                                                                                                                                      notes,
                                                                                                                                      instructions,
                                                                                                                                      room,
                                                                                                                                      request_type,
                                                                                                                                      req_resp,
                                                                                                                                      lang,
                                                                                                                                      approval_prof,
                                                                                                                                      request_reason,
                                                                                                                                      recurrence,
                                                                                                                                      frequency,
                                                                                                                                      dt_rec_begin,
                                                                                                                                      dt_rec_end,
                                                                                                                                      nr_event,
                                                                                                                                      week_day,
                                                                                                                                      week_nr,
                                                                                                                                      month_day,
                                                                                                                                      month_nr,
                                                                                                                                      status,
                                                                                                                                      cancel_notes,
                                                                                                                                      cancel_reason,
                                                                                                                                      registered))) dd
          JOIN dd_block ddb
            ON ddb.area = 'EVENT'
           AND ddb.condition_desc = 'REQUEST'
           AND ddb.flg_available = pk_alert_constant.g_yes;
    
        SELECT t_rec_dd_data(CASE
                                  WHEN data_code_message IS NOT NULL THEN
                                   pk_message.get_message(i_lang => i_lang, i_code_mess => data_code_message)
                                  ELSE
                                   NULL
                              END,
                              CASE
                                  WHEN flg_type = 'L1' THEN
                                   NULL
                                  ELSE
                                   data_source_val
                              END,
                              flg_type,
                              flg_html,
                              NULL,
                              flg_clob),
               data_source
          BULK COLLECT
          INTO l_tab_dd_data, l_data_source_list
          FROM (SELECT ddc.data_code_message,
                       flg_type,
                       data_source_val,
                       ddc.data_source,
                       db.rnk,
                       ddc.rank,
                       db.id_dd_block,
                       flg_html,
                       flg_clob
                  FROM TABLE(l_tab_dd_block_data) db
                  JOIN dd_content ddc
                    ON ddc.data_source = db.data_source
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = 'EVENT'
                 WHERE ddc.id_dd_block = db.id_dd_block
                   AND (db.data_source_val IS NOT NULL OR flg_type IN ('L2N', 'WL')))
         ORDER BY rnk, rank;
    
        g_error := 'OPEN O_DETAIL';
        OPEN o_detail FOR
            SELECT descr, val, flg_type, flg_html, val_clob, flg_clob
              FROM (SELECT CASE
                                WHEN d.val IS NULL THEN
                                 d.descr
                                WHEN d.descr IS NULL THEN
                                 NULL
                                ELSE
                                 d.descr || ': '
                            END descr,
                           d.val,
                           d.flg_type,
                           flg_html,
                           val_clob,
                           flg_clob,
                           d.rn
                      FROM (SELECT rownum rn, descr, val, flg_type, flg_html, val_clob, flg_clob
                              FROM TABLE(l_tab_dd_data)) d
                      JOIN (SELECT rownum rn, column_value data_source
                             FROM TABLE(l_data_source_list)) ds
                        ON ds.rn = d.rn);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_detail);
            RETURN FALSE;
    END get_event_detail;

    FUNCTION get_event_detail_hist
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_consult_req IN consult_req.id_consult_req%TYPE,
        o_detail      OUT pk_types.cursor_type,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_EVENT_DETAIL_HIST';
    
        l_date_sep           sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                     i_prof,
                                                                                     'FUTURE_EVENTS_T073');
        l_msg_not_repeat     sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_not_repeat);
        l_msg_daily          sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_daily);
        l_msg_weekly         sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_weekly);
        l_msg_monthly        sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_monthly);
        l_msg_yearly         sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_yearly);
        l_problem_list_t069  sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                     i_prof,
                                                                                     'PROBLEM_LIST_T069');
        l_future_events_t037 sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                     i_prof,
                                                                                     'FUTURE_EVENTS_T037');
        l_future_events_t038 sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                     i_prof,
                                                                                     'FUTURE_EVENTS_T038');
        l_common_m060        sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M060');
        l_common_m049        sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M049');
        l_common_m093        sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M093');
        l_woman_health_t001  sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                     i_prof,
                                                                                     'WOMAN_HEALTH_T001');
        l_common_m061        sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M061');
        l_common_m050        sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M050');
        l_common_m092        sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M092');
        l_sch_t305           sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'SCH_T305');
    
        l_msg_del sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'COMMON_M106');
    
        l_sch_complaint_origin sys_config.value%TYPE := nvl(pk_sysconfig.get_config(g_sch_complaint_origin, i_prof),
                                                            g_complaint);
    
        l_tab_dd_block_data t_tab_dd_block_data := t_tab_dd_block_data();
        l_tab_dd_data       t_tab_dd_data := t_tab_dd_data();
        l_data_source_list  table_varchar := table_varchar();
    BEGIN
    
        SELECT t_rec_dd_block_data(ddb.id_dd_block,
                                   ddb.rank + (rn * 1000),
                                   NULL,
                                   NULL,
                                   ddb.condition_val,
                                   NULL,
                                   NULL,
                                   dd.data_source,
                                   dd.data_source_val,
                                   NULL)
          BULK COLLECT
          INTO l_tab_dd_block_data
          FROM (SELECT data_source,
                       data_source_val,
                       row_number() over(PARTITION BY data_source ORDER BY rownum DESC) AS rn
                  FROM (SELECT tt.*
                          FROM (SELECT cnt,
                                       rn,
                                       cr.id_consult_req,
                                       cr.id_consult_req_hist,
                                       CASE cr.id_epis_type
                                           WHEN 1 THEN
                                            ' '
                                           ELSE
                                            NULL
                                       END title_consult,
                                       CASE cr.id_epis_type
                                           WHEN 16 THEN
                                            ' '
                                           ELSE
                                            NULL
                                       END title_nurse_consult,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.id_inst_requested,
                                                     NULL,
                                                     NULL,
                                                     pk_utils.get_institution_name(i_lang, cr.id_inst_requested)),
                                              decode(cr.id_inst_requested,
                                                     cr.id_inst_requested_new,
                                                     NULL,
                                                     decode(cr.id_inst_requested_new,
                                                            NULL,
                                                            NULL,
                                                            pk_utils.get_institution_name(i_lang, cr.id_inst_requested_new)))) inst_req_to,
                                       decode(cr.id_inst_requested,
                                              cr.id_inst_requested_new,
                                              NULL,
                                              NULL,
                                              l_msg_del,
                                              pk_utils.get_institution_name(i_lang, cr.id_inst_requested)) inst_req_to_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.code_clinical_service,
                                                     NULL,
                                                     NULL,
                                                     pk_translation.get_translation(i_lang, cr.code_clinical_service)),
                                              decode(cr.code_clinical_service,
                                                     cr.code_clinical_service_new,
                                                     NULL,
                                                     decode(cr.code_clinical_service_new,
                                                            NULL,
                                                            NULL,
                                                            pk_translation.get_translation(i_lang,
                                                                                           cr.code_clinical_service_new)))) dep_clin_serv,
                                       decode(cr.code_clinical_service,
                                              cr.code_clinical_service_new,
                                              NULL,
                                              NULL,
                                              l_msg_del,
                                              pk_translation.get_translation(i_lang, cr.code_clinical_service)) dep_clin_serv_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.id_sch_event,
                                                     NULL,
                                                     NULL,
                                                     pk_schedule_common.get_translation_alias(i_lang,
                                                                                              i_prof,
                                                                                              cr.id_sch_event,
                                                                                              cr.code_sch_event)),
                                              decode(cr.id_sch_event,
                                                     cr.id_sch_event_new,
                                                     NULL,
                                                     decode(cr.id_sch_event_new,
                                                            NULL,
                                                            NULL,
                                                            pk_schedule_common.get_translation_alias(i_lang,
                                                                                                     i_prof,
                                                                                                     cr.id_sch_event_new,
                                                                                                     cr.code_sch_event_new)))) sch_event,
                                       decode(cr.id_sch_event,
                                              cr.id_sch_event_new,
                                              NULL,
                                              NULL,
                                              l_msg_del,
                                              pk_schedule_common.get_translation_alias(i_lang,
                                                                                       i_prof,
                                                                                       cr.id_sch_event,
                                                                                       cr.code_sch_event)) sch_event_new,
                                       /*  decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.id_prof_requested,
                                                     NULL,
                                                     NULL,
                                                     nvl2(cr.id_prof_requested,
                                                          pk_prof_utils.get_name_signature(i_lang,
                                                                                           i_prof,
                                                                                           cr.id_prof_requested),
                                                          pk_events.get_fe_request_prof_str(i_lang,
                                                                                            i_prof,
                                                                                            cr.id_consult_req,
                                                                                            pk_alert_constant.g_no))),
                                             decode(cr.id_prof_requested,
                                                     cr.id_prof_requested_new,
                                                     NULL,
                                                     decode(cr.id_prof_requested_new,
                                                            NULL,
                                                            NULL,
                                                            nvl2(cr.id_prof_requested_new,
                                                                 pk_prof_utils.get_name_signature(i_lang,
                                                                                                  i_prof,
                                                                                                  cr.id_prof_requested_new),
                                                                 pk_events.get_fe_request_prof_str(i_lang,
                                                                                                   i_prof,
                                                                                                   cr.id_consult_req,
                                                                                                   pk_alert_constant.g_no))))) prof_req_to,
                                       decode(cr.id_prof_requested,
                                              cr.id_prof_requested_new,
                                              NULL,
                                              NULL,
                                              l_msg_del,
                                              nvl2(cr.id_prof_requested,
                                                   pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_requested),
                                                   pk_events.get_fe_request_prof_str(i_lang,
                                                                                     i_prof,
                                                                                     cr.id_consult_req,
                                                                                     pk_alert_constant.g_no))) prof_req_to_new,*/
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.prof_req_to, NULL, NULL, prof_req_to),
                                              decode(cr.prof_req_to,
                                                     cr.prof_req_to_new,
                                                     NULL,
                                                     decode(cr.prof_req_to_new, NULL, NULL, prof_req_to_new))) prof_req_to,
                                       decode(cr.prof_req_to, cr.prof_req_to_new, NULL, NULL, l_msg_del, prof_req_to) prof_req_to_new,
                                       CASE
                                            WHEN cr.reason_for_visit IS NULL THEN
                                             decode(cr.cnt,
                                                    cr.rn,
                                                    decode(cr.code_complaint,
                                                           NULL,
                                                           NULL,
                                                           pk_translation.get_translation(i_lang, cr.code_complaint)),
                                                    decode(cr.code_complaint,
                                                           cr.code_complaint_new,
                                                           NULL,
                                                           decode(cr.code_complaint_new,
                                                                  NULL,
                                                                  NULL,
                                                                  pk_translation.get_translation(i_lang, cr.code_complaint_new))))
                                        
                                            ELSE
                                             decode(cr.cnt,
                                                    cr.rn,
                                                    decode(cr.reason_for_visit, NULL, NULL, cr.reason_for_visit),
                                                    decode(cr.reason_for_visit,
                                                           cr.reason_for_visit_new,
                                                           NULL,
                                                           decode(cr.reason_for_visit_new, NULL, NULL, cr.reason_for_visit_new)))
                                        END complaint,
                                       CASE
                                            WHEN cr.reason_for_visit IS NULL THEN
                                             decode(cr.code_complaint,
                                                    cr.code_complaint_new,
                                                    NULL,
                                                    NULL,
                                                    l_msg_del,
                                                    pk_translation.get_translation(i_lang, cr.code_complaint))
                                        
                                            ELSE
                                             decode(cr.reason_for_visit,
                                                    cr.reason_for_visit_new,
                                                    NULL,
                                                    NULL,
                                                    l_msg_del,
                                                    cr.reason_for_visit)
                                        END complaint_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.event_date, NULL, NULL, event_date),
                                              decode(cr.event_date,
                                                     cr.event_date_new,
                                                     NULL,
                                                     decode(cr.event_date_new, NULL, NULL, cr.event_date_new))) event_date,
                                       decode(cr.event_date, cr.event_date_new, NULL, NULL, l_msg_del, cr.event_date) event_date_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.flg_priority,
                                                     NULL,
                                                     NULL,
                                                     pk_sysdomain.get_domain(g_flg_priority, cr.flg_priority, i_lang)),
                                              decode(cr.flg_priority,
                                                     cr.flg_priority_new,
                                                     NULL,
                                                     decode(cr.flg_priority_new,
                                                            NULL,
                                                            NULL,
                                                            pk_sysdomain.get_domain(g_flg_priority,
                                                                                    cr.flg_priority_new,
                                                                                    i_lang)))) priority,
                                       decode(cr.flg_priority,
                                              cr.flg_priority_new,
                                              NULL,
                                              NULL,
                                              l_msg_del,
                                              pk_sysdomain.get_domain(g_flg_priority, cr.flg_priority, i_lang)) priority_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.flg_contact_type,
                                                     NULL,
                                                     NULL,
                                                     pk_sysdomain.get_domain(pk_grid_amb.g_domain_sch_presence,
                                                                             cr.flg_contact_type,
                                                                             i_lang)),
                                              decode(cr.flg_contact_type,
                                                     cr.flg_contact_type_new,
                                                     NULL,
                                                     decode(cr.flg_contact_type_new,
                                                            NULL,
                                                            NULL,
                                                            pk_sysdomain.get_domain(pk_grid_amb.g_domain_sch_presence,
                                                                                    cr.flg_contact_type_new,
                                                                                    i_lang)))) contact_type,
                                       decode(cr.flg_contact_type,
                                              cr.flg_contact_type_new,
                                              NULL,
                                              NULL,
                                              l_msg_del,
                                              pk_sysdomain.get_domain(pk_grid_amb.g_domain_sch_presence,
                                                                      cr.flg_contact_type,
                                                                      i_lang)) contact_type_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.notes, NULL, NULL, cr.notes),
                                              decode(cr.notes,
                                                     cr.notes_new,
                                                     NULL,
                                                     decode(cr.notes_new, NULL, NULL, cr.notes_new))) notes,
                                       decode(cr.notes, cr.notes_new, NULL, NULL, l_msg_del, cr.notes) notes_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.instructions, NULL, NULL, cr.instructions),
                                              decode(cr.instructions,
                                                     cr.instructions_new,
                                                     NULL,
                                                     decode(cr.instructions_new, NULL, NULL, cr.instructions_new))) instructions,
                                       decode(cr.instructions, cr.instructions_new, NULL, NULL, l_msg_del, cr.instructions) instructions_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.room, NULL, NULL, cr.room),
                                              decode(cr.room,
                                                     cr.room_new,
                                                     NULL,
                                                     decode(cr.room_new, NULL, NULL, cr.room_new))) room,
                                       decode(cr.room, cr.room_new, NULL, NULL, l_msg_del, cr.room) room_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.flg_request_type,
                                                     NULL,
                                                     NULL,
                                                     pk_sysdomain.get_domain(g_sched_flg_sch_via,
                                                                             cr.flg_request_type,
                                                                             i_lang)),
                                              decode(cr.flg_request_type,
                                                     cr.flg_request_type_new,
                                                     NULL,
                                                     decode(cr.flg_request_type_new,
                                                            NULL,
                                                            NULL,
                                                            pk_sysdomain.get_domain(g_sched_flg_sch_via,
                                                                                    cr.flg_request_type_new,
                                                                                    i_lang)))) request_type,
                                       decode(cr.flg_request_type,
                                              cr.flg_request_type_new,
                                              NULL,
                                              NULL,
                                              l_msg_del,
                                              pk_sysdomain.get_domain(g_sched_flg_sch_via, cr.flg_request_type, i_lang)) request_type_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.flg_req_resp,
                                                     NULL,
                                                     NULL,
                                                     pk_sysdomain.get_domain(g_sched_flg_req_type, cr.flg_req_resp, i_lang)),
                                              decode(cr.flg_req_resp,
                                                     cr.flg_req_resp_new,
                                                     NULL,
                                                     decode(cr.flg_req_resp_new,
                                                            NULL,
                                                            NULL,
                                                            pk_sysdomain.get_domain(g_sched_flg_req_type,
                                                                                    cr.flg_req_resp_new,
                                                                                    i_lang)))) req_resp,
                                       decode(cr.flg_req_resp,
                                              cr.flg_req_resp_new,
                                              NULL,
                                              NULL,
                                              l_msg_del,
                                              pk_sysdomain.get_domain(g_sched_flg_req_type, cr.flg_req_resp, i_lang)) req_resp_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.code_language,
                                                     NULL,
                                                     NULL,
                                                     pk_translation.get_translation(i_lang, cr.code_language)),
                                              decode(cr.code_language,
                                                     cr.code_language_new,
                                                     NULL,
                                                     decode(cr.code_language_new,
                                                            NULL,
                                                            NULL,
                                                            pk_translation.get_translation(i_lang, cr.code_language_new)))) lang,
                                       decode(cr.code_language,
                                              cr.code_language_new,
                                              NULL,
                                              NULL,
                                              l_msg_del,
                                              pk_translation.get_translation(i_lang, cr.code_language)) lang_new,
                                       pk_events.get_fe_approval_prof_str(i_lang,
                                                                          i_prof,
                                                                          i_consult_req,
                                                                          pk_alert_constant.g_no) approval_prof, --TODO                                                                          
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.request_reason, NULL, NULL, cr.request_reason),
                                              decode(cr.request_reason,
                                                     cr.request_reason_new,
                                                     NULL,
                                                     decode(cr.request_reason_new, NULL, NULL, cr.request_reason_new))) request_reason,
                                       decode(cr.request_reason,
                                              cr.request_reason_new,
                                              NULL,
                                              NULL,
                                              l_msg_del,
                                              cr.request_reason) request_reason_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.recurrence, NULL, NULL, cr.recurrence),
                                              decode(cr.recurrence,
                                                     cr.recurrence_new,
                                                     NULL,
                                                     decode(cr.recurrence_new, NULL, NULL, cr.recurrence_new))) recurrence,
                                       decode(cr.recurrence, cr.recurrence_new, NULL, NULL, l_msg_del, cr.recurrence) recurrence_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.frequency, NULL, NULL, cr.frequency),
                                              decode(cr.frequency,
                                                     cr.frequency_new,
                                                     NULL,
                                                     decode(cr.frequency_new, NULL, NULL, cr.frequency_new))) frequency,
                                       decode(cr.frequency, cr.frequency_new, NULL, NULL, l_msg_del, cr.frequency) frequency_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.dt_rec_begin, NULL, NULL, cr.dt_rec_begin),
                                              decode(cr.dt_rec_begin,
                                                     cr.dt_rec_begin_new,
                                                     NULL,
                                                     decode(cr.dt_rec_begin_new, NULL, NULL, cr.dt_rec_begin_new))) dt_rec_begin,
                                       decode(cr.dt_rec_begin, cr.dt_rec_begin_new, NULL, NULL, l_msg_del, cr.dt_rec_begin) dt_rec_begin_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.dt_rec_end, NULL, NULL, cr.dt_rec_end),
                                              decode(cr.dt_rec_end,
                                                     cr.dt_rec_end_new,
                                                     NULL,
                                                     decode(cr.dt_rec_end_new, NULL, NULL, cr.dt_rec_end_new))) dt_rec_end,
                                       decode(cr.dt_rec_end, cr.dt_rec_end_new, NULL, NULL, l_msg_del, cr.dt_rec_end) dt_rec_end_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.nr_event, NULL, NULL, cr.nr_event),
                                              decode(cr.nr_event,
                                                     cr.nr_event_new,
                                                     NULL,
                                                     decode(cr.nr_event_new, NULL, NULL, cr.nr_event_new))) nr_event,
                                       decode(cr.nr_event, cr.nr_event_new, NULL, NULL, l_msg_del, cr.nr_event) nr_event_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.week_day,
                                                     NULL,
                                                     NULL,
                                                     pk_events.get_week_day(i_lang, i_prof, cr.week_day)),
                                              decode(cr.week_day,
                                                     cr.week_day_new,
                                                     NULL,
                                                     decode(cr.week_day_new,
                                                            NULL,
                                                            NULL,
                                                            pk_events.get_week_day(i_lang, i_prof, cr.week_day_new)))) week_day,
                                       decode(cr.week_day,
                                              cr.week_day_new,
                                              NULL,
                                              NULL,
                                              l_msg_del,
                                              pk_events.get_week_day(i_lang, i_prof, cr.week_day)) week_day_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.week_nr,
                                                     NULL,
                                                     NULL,
                                                     pk_events.get_week_nr(i_lang, i_prof, cr.week_nr)),
                                              decode(cr.week_nr,
                                                     cr.week_nr_new,
                                                     NULL,
                                                     decode(cr.week_nr_new,
                                                            NULL,
                                                            NULL,
                                                            pk_events.get_week_nr(i_lang, i_prof, cr.week_nr_new)))) week_nr,
                                       decode(cr.week_nr,
                                              cr.week_nr_new,
                                              NULL,
                                              NULL,
                                              l_msg_del,
                                              pk_events.get_week_nr(i_lang, i_prof, cr.week_nr)) week_nr_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.month_day, NULL, NULL, cr.month_day),
                                              decode(cr.month_day,
                                                     cr.month_day_new,
                                                     NULL,
                                                     decode(cr.month_day_new, NULL, NULL, cr.month_day_new))) month_day,
                                       decode(cr.month_day, cr.month_day_new, NULL, NULL, l_msg_del, cr.month_day) month_day_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.month_nr,
                                                     NULL,
                                                     NULL,
                                                     pk_events.get_month(i_lang, i_prof, cr.month_nr)),
                                              decode(cr.month_nr,
                                                     cr.month_nr_new,
                                                     NULL,
                                                     decode(cr.month_nr_new,
                                                            NULL,
                                                            NULL,
                                                            pk_events.get_month(i_lang, i_prof, cr.month_nr_new)))) month_nr,
                                       decode(cr.month_nr,
                                              cr.month_nr_new,
                                              NULL,
                                              NULL,
                                              l_msg_del,
                                              pk_events.get_month(i_lang, i_prof, cr.month_nr)) month_nr_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.flg_status,
                                                     NULL,
                                                     NULL,
                                                     pk_sysdomain.get_domain('CONSULT_REQ.FLG_STATUS', cr.flg_status, i_lang)),
                                              decode(cr.flg_status,
                                                     cr.flg_status_new,
                                                     NULL,
                                                     decode(cr.flg_status_new,
                                                            NULL,
                                                            NULL,
                                                            pk_sysdomain.get_domain('CONSULT_REQ.FLG_STATUS',
                                                                                    cr.flg_status_new,
                                                                                    i_lang)))) status,
                                       decode(cr.flg_status,
                                              cr.flg_status_new,
                                              NULL,
                                              NULL,
                                              l_msg_del,
                                              pk_sysdomain.get_domain('CONSULT_REQ.FLG_STATUS', cr.flg_status, i_lang)) status_new,
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.notes_cancel, NULL, NULL, notes_cancel),
                                              decode(cr.notes_cancel,
                                                     cr.notes_cancel_new,
                                                     NULL,
                                                     decode(cr.notes_cancel_new, NULL, NULL, notes_cancel_new))) cancel_notes,
                                       decode(cr.notes_cancel, cr.notes_cancel_new, NULL, NULL, l_msg_del, notes_cancel) cancel_notes_new,
                                       
                                       decode(cr.cnt,
                                              cr.rn,
                                              decode(cr.code_cancel_reason,
                                                     NULL,
                                                     NULL,
                                                     pk_translation.get_translation(i_lang, cr.code_cancel_reason)),
                                              decode(cr.code_cancel_reason,
                                                     cr.code_cancel_reason_new,
                                                     NULL,
                                                     decode(cr.code_cancel_reason_new,
                                                            NULL,
                                                            NULL,
                                                            pk_translation.get_translation(i_lang, cr.code_cancel_reason_new)))) cancel_reason,
                                       decode(cr.code_cancel_reason,
                                              cr.code_cancel_reason_new,
                                              NULL,
                                              NULL,
                                              l_msg_del,
                                              pk_translation.get_translation(i_lang, cr.code_cancel_reason)) cancel_reason_new,
                                       pk_date_utils.date_char_tsz(i_lang,
                                                                   nvl(cr.dt_last_update, cr.dt_consult_req_tstz),
                                                                   i_prof.institution,
                                                                   i_prof.software) || g_semicolon ||
                                       pk_prof_utils.get_name_signature(i_lang,
                                                                        i_prof,
                                                                        nvl(cr.id_prof_last_update, cr.id_prof_req)) || ' (' ||
                                       nvl(pk_prof_utils.get_spec_signature(i_lang,
                                                                            i_prof,
                                                                            nvl(cr.id_prof_last_update, cr.id_prof_req),
                                                                            nvl(cr.dt_last_update, cr.dt_consult_req_tstz),
                                                                            cr.id_episode),
                                           l_problem_list_t069) || ')' registered,
                                       NULL white_line
                                  FROM (SELECT row_number() over(ORDER BY t.dt_last_update DESC NULLS FIRST) rn,
                                               MAX(rownum) over() cnt,
                                               t.id_consult_req,
                                               t.id_consult_req_hist,
                                               t.id_epis_type,
                                               first_value(t.id_epis_type) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) id_epis_type_new,
                                               t.id_inst_requested,
                                               first_value(t.id_inst_requested) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) id_inst_requested_new,
                                               t.code_clinical_service,
                                               first_value(t.code_clinical_service) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) code_clinical_service_new,
                                               t.id_sch_event,
                                               first_value(t.id_sch_event) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) id_sch_event_new,
                                               t.code_sch_event,
                                               first_value(t.code_sch_event) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) code_sch_event_new,
                                               t.id_prof_requested,
                                               first_value(t.id_prof_requested) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_requested_new,
                                               t.reason_for_visit,
                                               first_value(t.reason_for_visit) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) reason_for_visit_new,
                                               t.dt_end_event,
                                               first_value(t.dt_end_event) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) dt_end_event_new,
                                               t.event_date,
                                               first_value(t.event_date) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) event_date_new,
                                               t.id_instit_requests,
                                               first_value(t.id_instit_requests) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) id_instit_requests_new,
                                               t.dt_begin_event,
                                               first_value(t.dt_begin_event) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) dt_begin_event_new,
                                               t.flg_priority,
                                               first_value(t.flg_priority) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) flg_priority_new,
                                               t.flg_contact_type,
                                               first_value(t.flg_contact_type) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) flg_contact_type_new,
                                               t.notes,
                                               first_value(t.notes) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) notes_new,
                                               t.instructions,
                                               first_value(t.instructions) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) instructions_new,
                                               t.room,
                                               first_value(t.room) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) room_new,
                                               t.flg_request_type,
                                               first_value(t.flg_request_type) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) flg_request_type_new,
                                               t.flg_req_resp,
                                               first_value(t.flg_req_resp) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) flg_req_resp_new,
                                               t.code_language,
                                               first_value(t.code_language) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) code_language_new,
                                               t.request_reason,
                                               first_value(t.request_reason) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) request_reason_new,
                                               t.recurrence,
                                               first_value(t.recurrence) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) recurrence_new,
                                               t.frequency,
                                               first_value(t.frequency) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) frequency_new,
                                               t.dt_rec_begin,
                                               first_value(t.dt_rec_begin) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) dt_rec_begin_new,
                                               t.dt_rec_end,
                                               first_value(t.dt_rec_end) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) dt_rec_end_new,
                                               t.nr_event,
                                               first_value(t.nr_event) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) nr_event_new,
                                               t.week_day,
                                               first_value(t.week_day) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) week_day_new,
                                               t.week_nr,
                                               first_value(t.week_nr) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) week_nr_new,
                                               t.month_day,
                                               first_value(t.month_day) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) month_day_new,
                                               t.month_nr,
                                               first_value(t.month_nr) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) month_nr_new,
                                               t.flg_status,
                                               first_value(t.flg_status) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) flg_status_new,
                                               t.notes_cancel,
                                               first_value(t.notes_cancel) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) notes_cancel_new,
                                               t.code_cancel_reason,
                                               first_value(t.code_cancel_reason) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) code_cancel_reason_new,
                                               t.dt_last_update,
                                               t.dt_consult_req_tstz,
                                               t.id_prof_last_update,
                                               t.id_prof_req,
                                               first_value(t.id_prof_req) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) id_prof_req_new,
                                               t.code_complaint,
                                               first_value(t.code_complaint) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) code_complaint_new,
                                               t.prof_req_to,
                                               first_value(t.prof_req_to) over(ORDER BY dt_last_update rows BETWEEN 1 preceding AND CURRENT ROW) prof_req_to_new,
                                               t.id_episode
                                          FROM (SELECT cr.id_consult_req,
                                                       NULL id_consult_req_hist,
                                                       cr.id_epis_type,
                                                       cr.id_inst_requested,
                                                       cs.code_clinical_service,
                                                       se.id_sch_event,
                                                       se.code_sch_event,
                                                       cr.id_prof_requested,
                                                       cr.reason_for_visit,
                                                       cr.dt_end_event,
                                                       nvl2(cr.dt_end_event,
                                                            pk_date_utils.dt_chr(i_lang,
                                                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                               cr.id_instit_requests,
                                                                                                                               NULL),
                                                                                                                  cr.dt_begin_event),
                                                                                 i_prof) || g_space || l_date_sep || g_space ||
                                                            pk_date_utils.dt_chr(i_lang,
                                                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                               cr.id_instit_requests,
                                                                                                                               NULL),
                                                                                                                  cr.dt_end_event),
                                                                                 i_prof),
                                                            pk_date_utils.dt_chr(i_lang,
                                                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                               cr.id_instit_requests,
                                                                                                                               NULL),
                                                                                                                  cr.dt_begin_event),
                                                                                 i_prof)) event_date,
                                                       cr.id_instit_requests,
                                                       cr.dt_begin_event,
                                                       cr.flg_priority,
                                                       cr.flg_contact_type,
                                                       cr.notes,
                                                       to_char(cr.instructions) instructions,
                                                       nvl(r.desc_room, pk_translation.get_translation(i_lang, r.code_room)) room,
                                                       cr.flg_request_type,
                                                       cr.flg_req_resp,
                                                       l.code_language,
                                                       to_char(cr.request_reason) request_reason,
                                                       CASE nvl(cr.flg_recurrence, g_flg_not_repeat)
                                                           WHEN g_flg_not_repeat THEN
                                                            l_msg_not_repeat
                                                           WHEN g_flg_daily THEN
                                                            l_msg_daily
                                                           WHEN g_flg_weekly THEN
                                                            l_msg_weekly
                                                           WHEN g_flg_monthly THEN
                                                            l_msg_monthly
                                                           WHEN g_flg_yearly THEN
                                                            l_msg_yearly
                                                           ELSE
                                                            NULL
                                                       END recurrence,
                                                       CASE
                                                            WHEN (cr.flg_recurrence = g_flg_daily AND cr.frequency = 1) THEN
                                                             cr.frequency || ' ' || l_common_m092
                                                            WHEN (cr.flg_recurrence = g_flg_weekly AND cr.frequency = 1) THEN
                                                             cr.frequency || ' ' || l_sch_t305
                                                            WHEN (cr.flg_recurrence = g_flg_monthly AND cr.frequency = 1) THEN
                                                             cr.frequency || ' ' || l_common_m060
                                                            WHEN (cr.flg_recurrence = g_flg_yearly AND cr.frequency = 1) THEN
                                                             cr.frequency || ' ' || l_common_m049
                                                            WHEN (cr.flg_recurrence = g_flg_daily AND cr.frequency > 1) THEN
                                                             cr.frequency || ' ' || l_common_m093
                                                            WHEN (cr.flg_recurrence = g_flg_weekly AND cr.frequency > 1) THEN
                                                             cr.frequency || ' ' || l_woman_health_t001
                                                            WHEN (cr.flg_recurrence = g_flg_monthly AND cr.frequency > 1) THEN
                                                             cr.frequency || ' ' || l_common_m061
                                                            WHEN (cr.flg_recurrence = g_flg_yearly AND cr.frequency > 1) THEN
                                                             cr.frequency || ' ' || l_common_m050
                                                            ELSE
                                                             NULL
                                                        END frequency,
                                                       pk_date_utils.dt_chr(i_lang,
                                                                            pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                          cr.id_instit_requests,
                                                                                                                          NULL),
                                                                                                             cr.dt_rec_begin),
                                                                            i_prof) dt_rec_begin,
                                                       pk_date_utils.dt_chr(i_lang,
                                                                            pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                          cr.id_instit_requests,
                                                                                                                          NULL),
                                                                                                             cr.dt_rec_end),
                                                                            i_prof) dt_rec_end,
                                                       CASE
                                                            WHEN (cr.nr_events = 1) THEN
                                                             cr.nr_events || g_space || l_future_events_t037
                                                            WHEN (cr.nr_events > 1) THEN
                                                             cr.nr_events || g_space || l_future_events_t038
                                                            ELSE
                                                             NULL
                                                        END nr_event,
                                                       cr.week_day,
                                                       cr.week_nr,
                                                       cr.month_day,
                                                       cr.month_nr,
                                                       cr.flg_status,
                                                       cr.notes_cancel,
                                                       cre.code_cancel_reason,
                                                       cr.dt_last_update,
                                                       cr.dt_consult_req_tstz,
                                                       cr.id_prof_last_update,
                                                       cr.id_prof_req,
                                                       cr.id_episode,
                                                       c.code_complaint,
                                                       nvl2(cr.id_prof_requested,
                                                            pk_prof_utils.get_name_signature(i_lang,
                                                                                             i_prof,
                                                                                             cr.id_prof_requested),
                                                            pk_events.get_fe_request_prof_str(i_lang,
                                                                                              i_prof,
                                                                                              cr.id_consult_req,
                                                                                              pk_alert_constant.g_no)) prof_req_to
                                                  FROM consult_req cr
                                                  LEFT JOIN cancel_reason cre
                                                    ON cre.id_cancel_reason = cr.id_cancel_reason
                                                  LEFT JOIN sch_event se
                                                    ON (se.id_sch_event = cr.id_sch_event)
                                                  LEFT JOIN dep_clin_serv dcs
                                                    ON (cr.id_dep_clin_serv = dcs.id_dep_clin_serv)
                                                  LEFT JOIN clinical_service cs
                                                    ON (dcs.id_clinical_service = cs.id_clinical_service)
                                                  LEFT JOIN complaint c
                                                    ON (c.id_complaint = cr.id_complaint)
                                                  LEFT JOIN room r
                                                    ON (r.id_room = cr.id_room)
                                                  LEFT JOIN LANGUAGE l
                                                    ON (l.id_language = cr.id_language)
                                                 WHERE cr.id_consult_req = i_consult_req
                                                UNION ALL
                                                SELECT cr.id_consult_req,
                                                       cr.id_consult_req_hist,
                                                       cr.id_epis_type,
                                                       cr.id_inst_requested,
                                                       cs.code_clinical_service,
                                                       se.id_sch_event,
                                                       se.code_sch_event,
                                                       cr.id_prof_requested,
                                                       cr.reason_for_visit,
                                                       cr.dt_end_event,
                                                       nvl2(cr.dt_end_event,
                                                            pk_date_utils.dt_chr(i_lang,
                                                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                               cr.id_instit_requests,
                                                                                                                               NULL),
                                                                                                                  cr.dt_begin_event),
                                                                                 i_prof) || g_space || l_date_sep || g_space ||
                                                            pk_date_utils.dt_chr(i_lang,
                                                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                               cr.id_instit_requests,
                                                                                                                               NULL),
                                                                                                                  cr.dt_end_event),
                                                                                 i_prof),
                                                            pk_date_utils.dt_chr(i_lang,
                                                                                 pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                               cr.id_instit_requests,
                                                                                                                               NULL),
                                                                                                                  cr.dt_begin_event),
                                                                                 i_prof)) event_date,
                                                       cr.id_instit_requests,
                                                       cr.dt_begin_event,
                                                       cr.flg_priority,
                                                       cr.flg_contact_type,
                                                       cr.notes,
                                                       to_char(cr.instructions) instructions,
                                                       nvl(r.desc_room, pk_translation.get_translation(i_lang, r.code_room)) room,
                                                       cr.flg_request_type,
                                                       cr.flg_req_resp,
                                                       l.code_language,
                                                       to_char(cr.request_reason) request_reason,
                                                       CASE nvl(cr.flg_recurrence, g_flg_not_repeat)
                                                           WHEN g_flg_not_repeat THEN
                                                            l_msg_not_repeat
                                                           WHEN g_flg_daily THEN
                                                            l_msg_daily
                                                           WHEN g_flg_weekly THEN
                                                            l_msg_weekly
                                                           WHEN g_flg_monthly THEN
                                                            l_msg_monthly
                                                           WHEN g_flg_yearly THEN
                                                            l_msg_yearly
                                                           ELSE
                                                            NULL
                                                       END recurrence,
                                                       CASE
                                                           WHEN (cr.flg_recurrence = g_flg_daily AND cr.frequency = 1) THEN
                                                            cr.frequency || ' ' || l_common_m092
                                                           WHEN (cr.flg_recurrence = g_flg_weekly AND cr.frequency = 1) THEN
                                                            cr.frequency || ' ' || l_sch_t305
                                                           WHEN (cr.flg_recurrence = g_flg_monthly AND cr.frequency = 1) THEN
                                                            cr.frequency || ' ' || l_common_m060
                                                           WHEN (cr.flg_recurrence = g_flg_yearly AND cr.frequency = 1) THEN
                                                            cr.frequency || ' ' || l_common_m049
                                                           WHEN (cr.flg_recurrence = g_flg_daily AND cr.frequency > 1) THEN
                                                            cr.frequency || ' ' || l_common_m093
                                                           WHEN (cr.flg_recurrence = g_flg_weekly AND cr.frequency > 1) THEN
                                                            cr.frequency || ' ' || l_woman_health_t001
                                                           WHEN (cr.flg_recurrence = g_flg_monthly AND cr.frequency > 1) THEN
                                                            cr.frequency || ' ' || l_common_m061
                                                           WHEN (cr.flg_recurrence = g_flg_yearly AND cr.frequency > 1) THEN
                                                            cr.frequency || ' ' || l_common_m050
                                                           ELSE
                                                            NULL
                                                       END frequency,
                                                       pk_date_utils.dt_chr(i_lang,
                                                                            pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                          cr.id_instit_requests,
                                                                                                                          NULL),
                                                                                                             cr.dt_rec_begin),
                                                                            i_prof) dt_rec_begin,
                                                       pk_date_utils.dt_chr(i_lang,
                                                                            pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                                                          cr.id_instit_requests,
                                                                                                                          NULL),
                                                                                                             cr.dt_rec_end),
                                                                            i_prof) dt_rec_end,
                                                       CASE
                                                           WHEN (cr.nr_events = 1) THEN
                                                            cr.nr_events || g_space || l_future_events_t037
                                                           WHEN (cr.nr_events > 1) THEN
                                                            cr.nr_events || g_space || l_future_events_t038
                                                           ELSE
                                                            NULL
                                                       END nr_event,
                                                       cr.week_day,
                                                       cr.week_nr,
                                                       cr.month_day,
                                                       cr.month_nr,
                                                       cr.flg_status,
                                                       cr.notes_cancel,
                                                       cre.code_cancel_reason,
                                                       cr.dt_last_update,
                                                       cr.dt_consult_req_tstz,
                                                       cr.id_prof_last_update,
                                                       cr.id_prof_req,
                                                       cr.id_episode,
                                                       c.code_complaint,
                                                       nvl2(cr.id_prof_requested,
                                                            pk_prof_utils.get_name_signature(i_lang,
                                                                                             i_prof,
                                                                                             cr.id_prof_requested),
                                                            pk_events.get_fe_request_prof_str(i_lang,
                                                                                              i_prof,
                                                                                              cr.id_consult_req_hist,
                                                                                              pk_alert_constant.g_yes)) prof_req_to
                                                  FROM consult_req_hist cr
                                                  LEFT JOIN cancel_reason cre
                                                    ON cre.id_cancel_reason = cr.id_cancel_reason
                                                  LEFT JOIN sch_event se
                                                    ON (se.id_sch_event = cr.id_sch_event)
                                                  LEFT JOIN dep_clin_serv dcs
                                                    ON (cr.id_dep_clin_serv = dcs.id_dep_clin_serv)
                                                  LEFT JOIN clinical_service cs
                                                    ON (dcs.id_clinical_service = cs.id_clinical_service)
                                                  LEFT JOIN complaint c
                                                    ON (c.id_complaint = cr.id_complaint)
                                                  LEFT JOIN room r
                                                    ON (r.id_room = cr.id_room)
                                                  LEFT JOIN LANGUAGE l
                                                    ON (l.id_language = cr.id_language)
                                                 WHERE cr.id_consult_req = i_consult_req
                                                 ORDER BY dt_last_update ASC) t) cr) tt) unpivot include NULLS(data_source_val FOR data_source IN(title_consult,
                                                                                                                                                  title_nurse_consult,
                                                                                                                                                  inst_req_to,
                                                                                                                                                  inst_req_to_new,
                                                                                                                                                  dep_clin_serv,
                                                                                                                                                  dep_clin_serv_new,
                                                                                                                                                  sch_event,
                                                                                                                                                  sch_event_new,
                                                                                                                                                  prof_req_to,
                                                                                                                                                  prof_req_to_new,
                                                                                                                                                  complaint,
                                                                                                                                                  complaint_new,
                                                                                                                                                  event_date,
                                                                                                                                                  event_date_new,
                                                                                                                                                  priority,
                                                                                                                                                  priority_new,
                                                                                                                                                  contact_type,
                                                                                                                                                  contact_type_new,
                                                                                                                                                  notes,
                                                                                                                                                  notes_new,
                                                                                                                                                  instructions,
                                                                                                                                                  instructions_new,
                                                                                                                                                  room,
                                                                                                                                                  room_new,
                                                                                                                                                  request_type,
                                                                                                                                                  request_type_new,
                                                                                                                                                  req_resp,
                                                                                                                                                  req_resp_new,
                                                                                                                                                  lang,
                                                                                                                                                  lang_new,
                                                                                                                                                  approval_prof,
                                                                                                                                                  request_reason,
                                                                                                                                                  request_reason_new,
                                                                                                                                                  recurrence,
                                                                                                                                                  recurrence_new,
                                                                                                                                                  frequency,
                                                                                                                                                  frequency_new,
                                                                                                                                                  dt_rec_begin,
                                                                                                                                                  dt_rec_begin_new,
                                                                                                                                                  dt_rec_end,
                                                                                                                                                  dt_rec_end_new,
                                                                                                                                                  nr_event,
                                                                                                                                                  nr_event_new,
                                                                                                                                                  week_day,
                                                                                                                                                  week_day_new,
                                                                                                                                                  week_nr,
                                                                                                                                                  week_nr_new,
                                                                                                                                                  month_day,
                                                                                                                                                  month_day_new,
                                                                                                                                                  month_nr,
                                                                                                                                                  month_nr_new,
                                                                                                                                                  status,
                                                                                                                                                  status_new,
                                                                                                                                                  cancel_notes,
                                                                                                                                                  cancel_notes_new,
                                                                                                                                                  cancel_reason,
                                                                                                                                                  cancel_reason_new,
                                                                                                                                                  registered,
                                                                                                                                                  white_line))) dd
          JOIN dd_block ddb
            ON ddb.area = 'EVENT'
           AND ddb.condition_desc = 'REQUEST'
           AND ddb.flg_available = pk_alert_constant.g_yes;
    
        SELECT t_rec_dd_data(CASE
                                  WHEN data_code_message IS NOT NULL THEN
                                   pk_message.get_message(i_lang => i_lang, i_code_mess => data_code_message)
                                  ELSE
                                   NULL
                              END,
                              CASE
                                  WHEN flg_type = 'L1' THEN
                                   NULL
                                  ELSE
                                   data_source_val
                              END,
                              flg_type,
                              flg_html,
                              NULL,
                              flg_clob),
               data_source
          BULK COLLECT
          INTO l_tab_dd_data, l_data_source_list
          FROM (SELECT ddc.data_code_message,
                       flg_type,
                       data_source_val,
                       ddc.data_source,
                       db.rnk,
                       ddc.rank,
                       db.id_dd_block,
                       flg_html,
                       flg_clob
                  FROM TABLE(l_tab_dd_block_data) db
                  JOIN dd_content ddc
                    ON ddc.data_source = db.data_source
                   AND ddc.flg_available = pk_alert_constant.g_yes
                   AND ddc.area = 'EVENT'
                 WHERE ddc.id_dd_block = db.id_dd_block
                   AND (db.data_source_val IS NOT NULL OR flg_type IN ('WL')))
         ORDER BY rnk, rank;
    
        g_error := 'OPEN O_DETAIL';
        OPEN o_detail FOR
            SELECT descr, val, flg_type, flg_html, val_clob, flg_clob
              FROM (SELECT CASE
                                WHEN d.val IS NULL THEN
                                 d.descr
                                WHEN d.descr IS NULL THEN
                                 NULL
                                ELSE
                                 d.descr || ': '
                            END descr,
                           d.val,
                           d.flg_type,
                           flg_html,
                           val_clob,
                           flg_clob,
                           d.rn
                      FROM (SELECT rownum rn, descr, val, flg_type, flg_html, val_clob, flg_clob
                              FROM TABLE(l_tab_dd_data)) d
                      JOIN (SELECT rownum rn, column_value data_source
                             FROM TABLE(l_data_source_list)) ds
                        ON ds.rn = d.rn);
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_detail);
            RETURN FALSE;
    END get_event_detail_hist;

    /********************************************************************************************
    * Get event detail hist
    *
    * @param i_lang             language identifier
    * @param i_prof             logged professional structure    
    * @param i_consult_req    future_events id
    * @param o_event            return cursor
    * @param o_event_hist       return cursor
    * @param o_error            error
    *
    * @author                 Paulo Teixeira
    * @version                2.6.0.1
    * @since                  2010/05/26
    **********************************************************************************************/
    FUNCTION get_event_hist
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_consult_req IN consult_req.id_consult_req%TYPE,
        o_event       OUT pk_types.cursor_type,
        o_event_hist  OUT table_table_clob,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name                 VARCHAR2(60 CHAR) := 'GET_EVENT_HIST';
        future_events_dif_table_rec future_events_dif_table;
        future_events               future_events_type;
        future_events_previous      future_events_type;
        future_events_first         future_events_type;
        all_event_hist              pk_types.cursor_type;
    
        i             NUMBER := 0;
        first_rec     NUMBER := 0;
        l_counter     NUMBER := 0;
        l_flag_change NUMBER := 0;
    
        l_type_bold   VARCHAR2(1 CHAR) := 'B';
        l_type_red    VARCHAR2(1 CHAR) := 'R';
        l_type_italic VARCHAR2(1 CHAR) := 'N';
    
        l_na                        sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'N/A');
        l_label_registered          sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T024');
        l_label_status              sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T025');
        l_label_notes               sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T010');
        l_label_cancel_notes        sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T027');
        l_label_cancel_reason       sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T028');
        l_label_instructions        sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T011');
        l_label_prof_req_to         sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T005');
        l_label_prof_req_to_hist    sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T042');
        l_label_inst_req_to         sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T002');
        l_label_inst_req_to_hist    sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T039');
        l_label_sch_event           sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T004');
        l_label_sch_event_hist      sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T041');
        l_label_dep_clin_serv       sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T003');
        l_label_dep_clin_serv_hist  sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T040');
        l_label_complaint           sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T006');
        l_label_complaint_hist      sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T043');
        l_label_event_date          sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T007');
        l_label_event_date_hist     sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T044');
        l_label_priority            sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T008');
        l_label_priority_hist       sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T045');
        l_label_contact_type        sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T009');
        l_label_contact_type_hist   sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T046');
        l_label_room                sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T012');
        l_label_room_hist           sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T047');
        l_label_request_type        sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T013');
        l_label_request_type_hist   sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T048');
        l_label_req_resp            sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T014');
        l_label_req_resp_hist       sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T049');
        l_label_lang                sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T015');
        l_label_lang_hist           sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T050');
        l_label_recurrence          sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T016');
        l_label_recurrence_hist     sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T051');
        l_label_frequency           sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T026');
        l_label_frequency_hist      sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T052');
        l_label_dt_rec_begin        sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T029');
        l_label_dt_rec_begin_hist   sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T053');
        l_label_rec_end             sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'SCH_T623');
        l_label_rec_end_hist        sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T054');
        l_label_week_day            sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'SCH_T629');
        l_label_week_day_hist       sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T055');
        l_label_week_nr             sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'SCH_T345');
        l_label_week_nr_hist        sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T056');
        l_label_month_day           sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'SCH_T630');
        l_label_month_day_hist      sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T057');
        l_label_month_nr            sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'SCH_T335');
        l_label_month_nr_hist       sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T058');
        l_label_request_reason      sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T033');
        l_label_request_reason_hist sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T060');
        l_label_approval_prof       sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T034');
        l_label_approval_prof_hist  sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T059');
        l_label_status_hist         sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T030');
        l_label_notes_hist          sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T031');
        l_label_instructions_hist   sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T032');
        l_problem_list_t069         sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'PROBLEM_LIST_T069');
        l_date_sep                  sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T073');
        l_common_m092               sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'COMMON_M092');
        l_sch_t305                  sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'SCH_T305');
        l_common_m060               sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'COMMON_M060');
        l_common_m049               sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'COMMON_M049');
        l_common_m093               sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'COMMON_M093');
        l_woman_health_t001         sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'WOMAN_HEALTH_T001');
        l_common_m061               sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'COMMON_M061');
        l_common_m050               sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'COMMON_M050');
        l_future_events_t037        sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T037');
        l_future_events_t038        sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            'FUTURE_EVENTS_T038');
        l_msg_not_repeat            sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            g_msg_not_repeat);
        l_msg_daily                 sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, g_msg_daily);
        l_msg_weekly                sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            g_msg_weekly);
        l_msg_monthly               sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            g_msg_monthly);
        l_msg_yearly                sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                            i_prof,
                                                                                            g_msg_yearly);
        l_sch_complaint_origin      sys_config.value%TYPE := nvl(pk_sysconfig.get_config(g_sch_complaint_origin, i_prof),
                                                                 g_complaint);
    BEGIN
    
        -- returns all opinion change history
        g_error := 'OPEN ALL_EVENT_HIST';
        OPEN all_event_hist FOR
            SELECT pk_utils.get_institution_name(i_lang, cr.id_inst_requested) inst_req_to,
                   pk_translation.get_translation(i_lang, cs.code_clinical_service) dep_clin_serv,
                   pk_schedule_common.get_translation_alias(i_lang, i_prof, se.id_sch_event, se.code_sch_event) sch_event,
                   nvl2(cr.id_prof_requested,
                        pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_requested),
                        pk_events.get_fe_request_prof_str(i_lang, i_prof, cr.id_consult_req, pk_alert_constant.g_no)) prof_req_to,
                   CASE
                        WHEN l_sch_complaint_origin = g_complaint THEN
                         pk_translation.get_translation(i_lang, c.code_complaint)
                        ELSE
                         cr.reason_for_visit
                    END complaint,
                   nvl2(cr.dt_end_event,
                        pk_date_utils.dt_chr(i_lang,
                                             pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                           cr.id_instit_requests,
                                                                                           NULL),
                                                                              cr.dt_begin_event),
                                             i_prof) || g_space || l_date_sep || g_space ||
                        pk_date_utils.dt_chr(i_lang,
                                             pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                           cr.id_instit_requests,
                                                                                           NULL),
                                                                              cr.dt_end_event),
                                             i_prof),
                        pk_date_utils.dt_chr(i_lang,
                                             pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                           cr.id_instit_requests,
                                                                                           NULL),
                                                                              cr.dt_begin_event),
                                             i_prof)) event_date,
                   pk_sysdomain.get_domain(g_flg_priority, cr.flg_priority, i_lang) priority,
                   pk_sysdomain.get_domain(pk_grid_amb.g_domain_sch_presence, cr.flg_contact_type, i_lang) contact_type,
                   cr.notes notes,
                   cr.instructions instructions,
                   nvl(r.desc_room, pk_translation.get_translation(i_lang, r.code_room)) room,
                   pk_sysdomain.get_domain(g_sched_flg_sch_via, cr.flg_request_type, i_lang) request_type,
                   pk_sysdomain.get_domain(g_sched_flg_req_type, cr.flg_req_resp, i_lang) req_resp,
                   pk_translation.get_translation(i_lang, l.code_language) lang,
                   pk_events.get_fe_approval_prof_str(i_lang, i_prof, i_consult_req, pk_alert_constant.g_no) approval_prof,
                   cr.request_reason request_reason,
                   CASE nvl(cr.flg_recurrence, g_flg_not_repeat)
                       WHEN g_flg_not_repeat THEN
                        l_msg_not_repeat
                       WHEN g_flg_daily THEN
                        l_msg_daily
                       WHEN g_flg_weekly THEN
                        l_msg_weekly
                       WHEN g_flg_monthly THEN
                        l_msg_monthly
                       WHEN g_flg_yearly THEN
                        l_msg_yearly
                       ELSE
                        NULL
                   END recurrence,
                   CASE
                        WHEN (cr.flg_recurrence = g_flg_daily AND cr.frequency = 1) THEN
                         cr.frequency || g_space || l_common_m092
                        WHEN (cr.flg_recurrence = g_flg_weekly AND cr.frequency = 1) THEN
                         cr.frequency || g_space || l_sch_t305
                        WHEN (cr.flg_recurrence = g_flg_monthly AND cr.frequency = 1) THEN
                         cr.frequency || g_space || l_common_m060
                        WHEN (cr.flg_recurrence = g_flg_yearly AND cr.frequency = 1) THEN
                         cr.frequency || g_space || l_common_m049
                        WHEN (cr.flg_recurrence = g_flg_daily AND cr.frequency > 1) THEN
                         cr.frequency || g_space || l_common_m093
                        WHEN (cr.flg_recurrence = g_flg_weekly AND cr.frequency > 1) THEN
                         cr.frequency || g_space || l_woman_health_t001
                        WHEN (cr.flg_recurrence = g_flg_monthly AND cr.frequency > 1) THEN
                         cr.frequency || g_space || l_common_m061
                        WHEN (cr.flg_recurrence = g_flg_yearly AND cr.frequency > 1) THEN
                         cr.frequency || g_space || l_common_m050
                        ELSE
                         NULL
                    END frequency,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, cr.id_instit_requests, NULL),
                                                                         cr.dt_rec_begin),
                                        i_prof) dt_rec_begin,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, cr.id_instit_requests, NULL),
                                                                         cr.dt_rec_end),
                                        i_prof) dt_rec_end,
                   CASE
                        WHEN (cr.nr_events = 1) THEN
                         cr.nr_events || g_space || l_future_events_t037
                        WHEN (cr.nr_events > 1) THEN
                         cr.nr_events || g_space || l_future_events_t038
                        ELSE
                         NULL
                    END nr_event,
                   pk_events.get_week_day(i_lang, i_prof, cr.week_day) week_day,
                   pk_events.get_week_nr(i_lang, i_prof, cr.week_nr) week_nr,
                   cr.month_day month_day,
                   pk_events.get_month(i_lang, i_prof, cr.month_nr) month_nr,
                   pk_sysdomain.get_domain('CONSULT_REQ.FLG_STATUS', cr.flg_status, i_lang) status,
                   cr.notes_cancel cancel_notes,
                   pk_translation.get_translation(i_lang, cre.code_cancel_reason) cancel_reason,
                   pk_date_utils.date_char_tsz(i_lang,
                                               nvl(cr.dt_last_update, cr.dt_consult_req_tstz),
                                               i_prof.institution,
                                               i_prof.software) || g_semicolon ||
                   pk_prof_utils.get_name_signature(i_lang, i_prof, nvl(cr.id_prof_last_update, cr.id_prof_req)) || ' (' ||
                   nvl(pk_prof_utils.get_spec_signature(i_lang,
                                                        i_prof,
                                                        nvl(cr.id_prof_last_update, cr.id_prof_req),
                                                        nvl(cr.dt_last_update, cr.dt_consult_req_tstz),
                                                        cr.id_episode),
                       l_problem_list_t069) || ')' registered,
                   pk_date_utils.date_send_tsz(i_lang, nvl(cr.dt_last_update, cr.dt_consult_req_tstz), i_prof) create_time
              FROM consult_req cr
              LEFT JOIN cancel_reason cre
                ON cre.id_cancel_reason = cr.id_cancel_reason
              LEFT JOIN sch_event se
                ON (se.id_sch_event = cr.id_sch_event)
              LEFT JOIN dep_clin_serv dcs
                ON (cr.id_dep_clin_serv = dcs.id_dep_clin_serv)
              LEFT JOIN clinical_service cs
                ON (dcs.id_clinical_service = cs.id_clinical_service)
              LEFT JOIN complaint c
                ON (c.id_complaint = cr.id_complaint)
              LEFT JOIN room r
                ON (r.id_room = cr.id_room)
              LEFT JOIN LANGUAGE l
                ON (l.id_language = cr.id_language)
             WHERE cr.id_consult_req = i_consult_req
            --AND pk_schedule_common.get_sch_event_avail(se.id_sch_event, cr.id_inst_requested, i_prof.software) = pk_alert_constant.g_yes
            UNION ALL
            SELECT pk_utils.get_institution_name(i_lang, crh.id_inst_requested) inst_req_to,
                   pk_translation.get_translation(i_lang, cs.code_clinical_service) dep_clin_serv,
                   pk_schedule_common.get_translation_alias(i_lang, i_prof, se.id_sch_event, se.code_sch_event) sch_event,
                   nvl2(crh.id_prof_requested,
                        pk_prof_utils.get_name_signature(i_lang, i_prof, crh.id_prof_requested) || '; ' ||
                        pk_events.get_fe_request_prof_str(i_lang,
                                                          i_prof,
                                                          crh.id_consult_req_hist,
                                                          pk_alert_constant.g_yes),
                        pk_events.get_fe_request_prof_str(i_lang,
                                                          i_prof,
                                                          crh.id_consult_req_hist,
                                                          pk_alert_constant.g_yes)) prof_req_to,
                   CASE
                       WHEN l_sch_complaint_origin = g_complaint THEN
                        pk_translation.get_translation(i_lang, c.code_complaint)
                       ELSE
                        crh.reason_for_visit
                   END complaint,
                   nvl2(crh.dt_end_event,
                        pk_date_utils.dt_chr(i_lang,
                                             pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                           crh.id_instit_requests,
                                                                                           NULL),
                                                                              crh.dt_begin_event),
                                             i_prof) || g_space || l_date_sep || g_space ||
                        pk_date_utils.dt_chr(i_lang,
                                             pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                           crh.id_instit_requests,
                                                                                           NULL),
                                                                              crh.dt_end_event),
                                             i_prof),
                        pk_date_utils.dt_chr(i_lang,
                                             pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                           crh.id_instit_requests,
                                                                                           NULL),
                                                                              crh.dt_begin_event),
                                             i_prof)) event_date,
                   pk_sysdomain.get_domain(g_flg_priority, crh.flg_priority, i_lang) priority,
                   pk_sysdomain.get_domain(pk_grid_amb.g_domain_sch_presence, crh.flg_contact_type, i_lang) contact_type,
                   crh.notes notes,
                   crh.instructions instructions,
                   nvl(r.desc_room, pk_translation.get_translation(i_lang, r.code_room)) room,
                   pk_sysdomain.get_domain(g_sched_flg_sch_via, crh.flg_request_type, i_lang) request_type,
                   pk_sysdomain.get_domain(g_sched_flg_req_type, crh.flg_req_resp, i_lang) req_resp,
                   pk_translation.get_translation(i_lang, l.code_language) lang,
                   pk_events.get_fe_approval_prof_str(i_lang, i_prof, crh.id_consult_req_hist, pk_alert_constant.g_yes) approval_prof,
                   crh.request_reason request_reason,
                   CASE nvl(crh.flg_recurrence, g_flg_not_repeat)
                       WHEN g_flg_not_repeat THEN
                        l_msg_not_repeat
                       WHEN g_flg_daily THEN
                        l_msg_daily
                       WHEN g_flg_weekly THEN
                        l_msg_weekly
                       WHEN g_flg_monthly THEN
                        l_msg_monthly
                       WHEN g_flg_yearly THEN
                        l_msg_yearly
                       ELSE
                        NULL
                   END recurrence,
                   CASE
                       WHEN (crh.flg_recurrence = g_flg_daily AND crh.frequency = 1) THEN
                        crh.frequency || g_space || l_common_m092
                       WHEN (crh.flg_recurrence = g_flg_weekly AND crh.frequency = 1) THEN
                        crh.frequency || g_space || l_sch_t305
                       WHEN (crh.flg_recurrence = g_flg_monthly AND crh.frequency = 1) THEN
                        crh.frequency || g_space || l_common_m060
                       WHEN (crh.flg_recurrence = g_flg_yearly AND crh.frequency = 1) THEN
                        crh.frequency || g_space || l_common_m049
                       WHEN (crh.flg_recurrence = g_flg_daily AND crh.frequency > 1) THEN
                        crh.frequency || g_space || l_common_m093
                       WHEN (crh.flg_recurrence = g_flg_weekly AND crh.frequency > 1) THEN
                        crh.frequency || g_space || l_woman_health_t001
                       WHEN (crh.flg_recurrence = g_flg_monthly AND crh.frequency > 1) THEN
                        crh.frequency || g_space || l_common_m061
                       WHEN (crh.flg_recurrence = g_flg_yearly AND crh.frequency > 1) THEN
                        crh.frequency || g_space || l_common_m050
                       ELSE
                        NULL
                   END frequency,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, crh.id_instit_requests, NULL),
                                                                         crh.dt_rec_begin),
                                        i_prof) dt_rec_begin,
                   pk_date_utils.dt_chr(i_lang,
                                        pk_date_utils.trunc_insttimezone(profissional(NULL, crh.id_instit_requests, NULL),
                                                                         crh.dt_rec_end),
                                        i_prof) dt_rec_end,
                   CASE
                       WHEN (crh.nr_events = 1) THEN
                        crh.nr_events || g_space || l_future_events_t037
                       WHEN (crh.nr_events > 1) THEN
                        crh.nr_events || g_space || l_future_events_t038
                       ELSE
                        NULL
                   END nr_event,
                   pk_events.get_week_day(i_lang, i_prof, crh.week_day) week_day,
                   pk_events.get_week_nr(i_lang, i_prof, crh.week_nr) week_nr,
                   crh.month_day month_day,
                   pk_events.get_month(i_lang, i_prof, crh.month_nr) month_nr,
                   pk_sysdomain.get_domain('CONSULT_REQ.FLG_STATUS', crh.flg_status, i_lang) status,
                   crh.notes_cancel cancel_notes,
                   pk_translation.get_translation(i_lang, cre.code_cancel_reason) cancel_reason,
                   pk_date_utils.date_char_tsz(i_lang,
                                               nvl(crh.dt_last_update, crh.dt_consult_req_tstz),
                                               i_prof.institution,
                                               i_prof.software) || g_semicolon ||
                   pk_prof_utils.get_name_signature(i_lang, i_prof, nvl(crh.id_prof_last_update, crh.id_prof_req)) || ' (' ||
                   nvl(pk_prof_utils.get_spec_signature(i_lang,
                                                        i_prof,
                                                        nvl(crh.id_prof_last_update, crh.id_prof_req),
                                                        nvl(crh.dt_last_update, crh.dt_consult_req_tstz),
                                                        crh.id_episode),
                       l_problem_list_t069) || ')' registered,
                   pk_date_utils.date_send_tsz(i_lang, nvl(crh.dt_last_update, crh.dt_consult_req_tstz), i_prof) create_time
              FROM consult_req_hist crh
              LEFT JOIN cancel_reason cre
                ON cre.id_cancel_reason = crh.id_cancel_reason
              LEFT JOIN sch_event se
                ON (se.id_sch_event = crh.id_sch_event)
              LEFT JOIN dep_clin_serv dcs
                ON (crh.id_dep_clin_serv = dcs.id_dep_clin_serv)
              LEFT JOIN clinical_service cs
                ON (dcs.id_clinical_service = cs.id_clinical_service)
              LEFT JOIN complaint c
                ON (c.id_complaint = crh.id_complaint)
              LEFT JOIN room r
                ON (r.id_room = crh.id_room)
              LEFT JOIN LANGUAGE l
                ON (l.id_language = crh.id_language)
             WHERE crh.id_consult_req = i_consult_req
            --AND pk_schedule_common.get_sch_event_avail(se.id_sch_event, crh.id_inst_requested, i_prof.software) = pk_alert_constant.g_yes
             ORDER BY create_time;
    
        -- find differences
        g_error := 'LOOP ALL_EVENT_HIST';
        LOOP
            FETCH all_event_hist
                INTO future_events;
            EXIT WHEN all_event_hist%NOTFOUND;
        
            IF first_rec = 0
            THEN
                future_events_first.inst_req_to    := future_events.inst_req_to;
                future_events_first.dep_clin_serv  := future_events.dep_clin_serv;
                future_events_first.sch_event      := future_events.sch_event;
                future_events_first.prof_req_to    := future_events.prof_req_to;
                future_events_first.complaint      := future_events.complaint;
                future_events_first.event_date     := future_events.event_date;
                future_events_first.priority       := future_events.priority;
                future_events_first.contact_type   := future_events.contact_type;
                future_events_first.notes          := future_events.notes;
                future_events_first.instructions   := future_events.instructions;
                future_events_first.room           := future_events.room;
                future_events_first.request_type   := future_events.request_type;
                future_events_first.req_resp       := future_events.req_resp;
                future_events_first.lang           := future_events.lang;
                future_events_first.approval_prof  := future_events.approval_prof;
                future_events_first.request_reason := future_events.request_reason;
                future_events_first.recurrence     := future_events.recurrence;
                future_events_first.frequency      := future_events.frequency;
                future_events_first.dt_rec_begin   := future_events.dt_rec_begin;
                future_events_first.dt_rec_end     := future_events.dt_rec_end;
                future_events_first.nr_event       := future_events.nr_event;
                future_events_first.week_day       := future_events.week_day;
                future_events_first.week_nr        := future_events.week_nr;
                future_events_first.month_day      := future_events.month_day;
                future_events_first.month_nr       := future_events.month_nr;
                future_events_first.status         := future_events.status;
                future_events_first.cancel_notes   := future_events.cancel_notes;
                future_events_first.cancel_reason  := future_events.cancel_reason;
                future_events_first.registered     := future_events.registered;
                future_events_first.create_time    := future_events.create_time;
                first_rec                          := 1;
                i                                  := i + 1;
            ELSE
                l_flag_change := 0;
            
                IF (future_events_previous.inst_req_to <> future_events.inst_req_to)
                   OR (future_events_previous.inst_req_to IS NOT NULL AND future_events.inst_req_to IS NULL)
                   OR (future_events_previous.inst_req_to IS NULL AND future_events.inst_req_to IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).inst_req_to_b := future_events_previous.inst_req_to;
                    future_events_dif_table_rec(i).inst_req_to_a := future_events.inst_req_to;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.dep_clin_serv <> future_events.dep_clin_serv)
                   OR (future_events_previous.dep_clin_serv IS NOT NULL AND future_events.dep_clin_serv IS NULL)
                   OR (future_events_previous.dep_clin_serv IS NULL AND future_events.dep_clin_serv IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).dep_clin_serv_b := future_events_previous.dep_clin_serv;
                    future_events_dif_table_rec(i).dep_clin_serv_a := future_events.dep_clin_serv;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.sch_event <> future_events.sch_event)
                   OR (future_events_previous.sch_event IS NOT NULL AND future_events.sch_event IS NULL)
                   OR (future_events_previous.sch_event IS NULL AND future_events.sch_event IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).sch_event_b := future_events_previous.sch_event;
                    future_events_dif_table_rec(i).sch_event_a := future_events.sch_event;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.prof_req_to <> future_events.prof_req_to)
                   OR (future_events_previous.prof_req_to IS NOT NULL AND future_events.prof_req_to IS NULL)
                   OR (future_events_previous.prof_req_to IS NULL AND future_events.prof_req_to IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).prof_req_to_b := future_events_previous.prof_req_to;
                    future_events_dif_table_rec(i).prof_req_to_a := future_events.prof_req_to;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.complaint <> future_events.complaint)
                   OR (future_events_previous.complaint IS NOT NULL AND future_events.complaint IS NULL)
                   OR (future_events_previous.complaint IS NULL AND future_events.complaint IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).complaint_b := future_events_previous.complaint;
                    future_events_dif_table_rec(i).complaint_a := future_events.complaint;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.event_date <> future_events.event_date)
                   OR (future_events_previous.event_date IS NOT NULL AND future_events.event_date IS NULL)
                   OR (future_events_previous.event_date IS NULL AND future_events.event_date IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).event_date_b := future_events_previous.event_date;
                    future_events_dif_table_rec(i).event_date_a := future_events.event_date;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.priority <> future_events.priority)
                   OR (future_events_previous.priority IS NOT NULL AND future_events.priority IS NULL)
                   OR (future_events_previous.priority IS NULL AND future_events.priority IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).priority_b := future_events_previous.priority;
                    future_events_dif_table_rec(i).priority_a := future_events.priority;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.contact_type <> future_events.contact_type)
                   OR (future_events_previous.contact_type IS NOT NULL AND future_events.contact_type IS NULL)
                   OR (future_events_previous.contact_type IS NULL AND future_events.contact_type IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).contact_type_b := future_events_previous.contact_type;
                    future_events_dif_table_rec(i).contact_type_a := future_events.contact_type;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.notes <> future_events.notes)
                   OR (future_events_previous.notes IS NOT NULL AND future_events.notes IS NULL)
                   OR (future_events_previous.notes IS NULL AND future_events.notes IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).notes_b := future_events_previous.notes;
                    future_events_dif_table_rec(i).notes_a := future_events.notes;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.instructions <> future_events.instructions)
                   OR (future_events_previous.instructions IS NOT NULL AND future_events.instructions IS NULL)
                   OR (future_events_previous.instructions IS NULL AND future_events.instructions IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).instructions_b := future_events_previous.instructions;
                    future_events_dif_table_rec(i).instructions_a := future_events.instructions;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.room <> future_events.room)
                   OR (future_events_previous.room IS NOT NULL AND future_events.room IS NULL)
                   OR (future_events_previous.room IS NULL AND future_events.room IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).room_b := future_events_previous.room;
                    future_events_dif_table_rec(i).room_a := future_events.room;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.request_type <> future_events.request_type)
                   OR (future_events_previous.request_type IS NOT NULL AND future_events.request_type IS NULL)
                   OR (future_events_previous.request_type IS NULL AND future_events.request_type IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).request_type_b := future_events_previous.request_type;
                    future_events_dif_table_rec(i).request_type_a := future_events.request_type;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.req_resp <> future_events.req_resp)
                   OR (future_events_previous.req_resp IS NOT NULL AND future_events.req_resp IS NULL)
                   OR (future_events_previous.req_resp IS NULL AND future_events.req_resp IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).req_resp_b := future_events_previous.req_resp;
                    future_events_dif_table_rec(i).req_resp_a := future_events.req_resp;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.lang <> future_events.lang)
                   OR (future_events_previous.lang IS NOT NULL AND future_events.lang IS NULL)
                   OR (future_events_previous.lang IS NULL AND future_events.lang IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).lang_b := future_events_previous.lang;
                    future_events_dif_table_rec(i).lang_a := future_events.lang;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.approval_prof <> future_events.approval_prof)
                   OR (future_events_previous.approval_prof IS NOT NULL AND future_events.approval_prof IS NULL)
                   OR (future_events_previous.approval_prof IS NULL AND future_events.approval_prof IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).approval_prof_b := future_events_previous.approval_prof;
                    future_events_dif_table_rec(i).approval_prof_a := future_events.approval_prof;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.request_reason <> future_events.request_reason)
                   OR (future_events_previous.request_reason IS NOT NULL AND future_events.request_reason IS NULL)
                   OR (future_events_previous.request_reason IS NULL AND future_events.request_reason IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).request_reason_b := future_events_previous.request_reason;
                    future_events_dif_table_rec(i).request_reason_a := future_events.request_reason;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.recurrence <> future_events.recurrence)
                   OR (future_events_previous.recurrence IS NOT NULL AND future_events.recurrence IS NULL)
                   OR (future_events_previous.recurrence IS NULL AND future_events.recurrence IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).recurrence_b := future_events_previous.recurrence;
                    future_events_dif_table_rec(i).recurrence_a := future_events.recurrence;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.frequency <> future_events.frequency)
                   OR (future_events_previous.frequency IS NOT NULL AND future_events.frequency IS NULL)
                   OR (future_events_previous.frequency IS NULL AND future_events.frequency IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).frequency_b := future_events_previous.frequency;
                    future_events_dif_table_rec(i).frequency_a := future_events.frequency;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.dt_rec_begin <> future_events.dt_rec_begin)
                   OR (future_events_previous.dt_rec_begin IS NOT NULL AND future_events.dt_rec_begin IS NULL)
                   OR (future_events_previous.dt_rec_begin IS NULL AND future_events.dt_rec_begin IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).dt_rec_begin_b := future_events_previous.dt_rec_begin;
                    future_events_dif_table_rec(i).dt_rec_begin_a := future_events.dt_rec_begin;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.dt_rec_end <> future_events.dt_rec_end)
                   OR (future_events_previous.dt_rec_end IS NOT NULL AND future_events.dt_rec_end IS NULL)
                   OR (future_events_previous.dt_rec_end IS NULL AND future_events.dt_rec_end IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).dt_rec_end_b := future_events_previous.dt_rec_end;
                    future_events_dif_table_rec(i).dt_rec_end_a := future_events.dt_rec_end;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.nr_event <> future_events.nr_event)
                   OR (future_events_previous.nr_event IS NOT NULL AND future_events.nr_event IS NULL)
                   OR (future_events_previous.nr_event IS NULL AND future_events.nr_event IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).nr_event_b := future_events_previous.nr_event;
                    future_events_dif_table_rec(i).nr_event_a := future_events.nr_event;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.week_day <> future_events.week_day)
                   OR (future_events_previous.week_day IS NOT NULL AND future_events.week_day IS NULL)
                   OR (future_events_previous.week_day IS NULL AND future_events.week_day IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).week_day_b := future_events_previous.week_day;
                    future_events_dif_table_rec(i).week_day_a := future_events.week_day;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.week_nr <> future_events.week_nr)
                   OR (future_events_previous.week_nr IS NOT NULL AND future_events.week_nr IS NULL)
                   OR (future_events_previous.week_nr IS NULL AND future_events.week_nr IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).week_nr_b := future_events_previous.week_nr;
                    future_events_dif_table_rec(i).week_nr_a := future_events.week_nr;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.month_day <> future_events.month_day)
                   OR (future_events_previous.month_day IS NOT NULL AND future_events.month_day IS NULL)
                   OR (future_events_previous.month_day IS NULL AND future_events.month_day IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).month_day_b := future_events_previous.month_day;
                    future_events_dif_table_rec(i).month_day_a := future_events.month_day;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.month_nr <> future_events.month_nr)
                   OR (future_events_previous.month_nr IS NOT NULL AND future_events.month_nr IS NULL)
                   OR (future_events_previous.month_nr IS NULL AND future_events.month_nr IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).month_nr_b := future_events_previous.month_nr;
                    future_events_dif_table_rec(i).month_nr_a := future_events.month_nr;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.status <> future_events.status)
                   OR (future_events_previous.status IS NOT NULL AND future_events.status IS NULL)
                   OR (future_events_previous.status IS NULL AND future_events.status IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).status_b := future_events_previous.status;
                    future_events_dif_table_rec(i).status_a := future_events.status;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.cancel_notes <> future_events.cancel_notes)
                   OR (future_events_previous.cancel_notes IS NOT NULL AND future_events.cancel_notes IS NULL)
                   OR (future_events_previous.cancel_notes IS NULL AND future_events.cancel_notes IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).cancel_notes_b := future_events_previous.cancel_notes;
                    future_events_dif_table_rec(i).cancel_notes_a := future_events.cancel_notes;
                    l_flag_change := 1;
                END IF;
                IF (future_events_previous.cancel_reason <> future_events.cancel_reason)
                   OR (future_events_previous.cancel_reason IS NOT NULL AND future_events.cancel_reason IS NULL)
                   OR (future_events_previous.cancel_reason IS NULL AND future_events.cancel_reason IS NOT NULL)
                THEN
                    future_events_dif_table_rec(i).cancel_reason_b := future_events_previous.cancel_reason;
                    future_events_dif_table_rec(i).cancel_reason_a := future_events.cancel_reason;
                    l_flag_change := 1;
                END IF;
            
                IF l_flag_change = 1
                THEN
                    future_events_dif_table_rec(i).registered := future_events.registered;
                    future_events_dif_table_rec(i).create_time := future_events.create_time;
                    i := i + 1;
                END IF;
            END IF;
            future_events_previous.inst_req_to    := future_events.inst_req_to;
            future_events_previous.dep_clin_serv  := future_events.dep_clin_serv;
            future_events_previous.sch_event      := future_events.sch_event;
            future_events_previous.prof_req_to    := future_events.prof_req_to;
            future_events_previous.complaint      := future_events.complaint;
            future_events_previous.event_date     := future_events.event_date;
            future_events_previous.priority       := future_events.priority;
            future_events_previous.contact_type   := future_events.contact_type;
            future_events_previous.notes          := future_events.notes;
            future_events_previous.instructions   := future_events.instructions;
            future_events_previous.room           := future_events.room;
            future_events_previous.request_type   := future_events.request_type;
            future_events_previous.req_resp       := future_events.req_resp;
            future_events_previous.lang           := future_events.lang;
            future_events_previous.approval_prof  := future_events.approval_prof;
            future_events_previous.request_reason := future_events.request_reason;
            future_events_previous.recurrence     := future_events.recurrence;
            future_events_previous.frequency      := future_events.frequency;
            future_events_previous.dt_rec_begin   := future_events.dt_rec_begin;
            future_events_previous.dt_rec_end     := future_events.dt_rec_end;
            future_events_previous.nr_event       := future_events.nr_event;
            future_events_previous.week_day       := future_events.week_day;
            future_events_previous.week_nr        := future_events.week_nr;
            future_events_previous.month_day      := future_events.month_day;
            future_events_previous.month_nr       := future_events.month_nr;
            future_events_previous.status         := future_events.status;
            future_events_previous.cancel_notes   := future_events.cancel_notes;
            future_events_previous.cancel_reason  := future_events.cancel_reason;
            future_events_previous.registered     := future_events.registered;
            future_events_previous.create_time    := future_events.create_time;
        
        END LOOP;
        CLOSE all_event_hist;
    
        -- build first history record = creation record    
        g_error := 'OPEN O_EVENT';
        OPEN o_event FOR
            SELECT table_varchar(l_type_bold, l_label_inst_req_to, future_events_first.inst_req_to) inst_req_to,
                   table_varchar(l_type_bold, l_label_dep_clin_serv, future_events_first.dep_clin_serv) dep_clin_serv,
                   table_varchar(l_type_bold, l_label_sch_event, future_events_first.sch_event) sch_event,
                   table_varchar(l_type_bold, l_label_prof_req_to, future_events_first.prof_req_to) prof_req_to,
                   table_varchar(l_type_bold, l_label_complaint, future_events_first.complaint) complaint,
                   table_varchar(l_type_bold, l_label_event_date, future_events_first.event_date) event_date,
                   table_varchar(l_type_bold, l_label_priority, future_events_first.priority) priority,
                   table_varchar(l_type_bold, l_label_contact_type, future_events_first.contact_type) contact_type,
                   table_varchar(l_type_bold, l_label_notes, future_events_first.notes) notes,
                   table_clob(l_type_bold, l_label_instructions, future_events_first.instructions) instructions,
                   table_varchar(l_type_bold, l_label_room, future_events_first.room) room,
                   table_varchar(l_type_bold, l_label_request_type, future_events_first.request_type) request_type,
                   table_varchar(l_type_bold, l_label_req_resp, future_events_first.req_resp) req_resp,
                   table_varchar(l_type_bold, l_label_lang, future_events_first.lang) lang,
                   table_varchar(l_type_bold, l_label_approval_prof, future_events_first.approval_prof) approval_prof,
                   table_varchar(l_type_bold, l_label_request_reason, future_events_first.request_reason) request_reason,
                   table_varchar(l_type_bold, l_label_recurrence, future_events_first.recurrence) recurrence,
                   table_varchar(l_type_bold, l_label_frequency, future_events_first.frequency) frequency,
                   table_varchar(l_type_bold, l_label_dt_rec_begin, future_events_first.dt_rec_begin) dt_rec_begin,
                   table_varchar(l_type_bold, l_label_rec_end, future_events_first.dt_rec_end) dt_rec_end,
                   table_varchar(l_type_bold, l_label_rec_end, future_events_first.nr_event) nr_event,
                   table_varchar(l_type_bold, l_label_week_day, future_events_first.week_day) week_day,
                   table_varchar(l_type_bold, l_label_week_nr, future_events_first.week_nr) week_nr,
                   table_varchar(l_type_bold, l_label_month_day, future_events_first.month_day) month_day,
                   table_varchar(l_type_bold, l_label_month_nr, future_events_first.month_nr) month_nr,
                   table_varchar(l_type_bold, l_label_status, future_events_first.status) status,
                   table_varchar(l_type_bold, l_label_cancel_notes, future_events_first.cancel_notes) notes_cancel,
                   table_varchar(l_type_bold, l_label_cancel_reason, future_events_first.cancel_reason) cancel_reason,
                   table_varchar(l_type_italic, l_label_registered, future_events_first.registered) registered
              FROM dual;
    
        -- build before / after history information     
        g_error := 'BUILD O_EVENT_HIST';
        IF future_events_dif_table_rec.count <> 0
        THEN
            o_event_hist := table_table_clob(table_clob(NULL));
        END IF;
        FOR k IN 1 .. future_events_dif_table_rec.count
        LOOP
        
            IF future_events_dif_table_rec(k).inst_req_to_b IS NOT NULL
                OR future_events_dif_table_rec(k).inst_req_to_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_inst_req_to,
                                                          nvl(future_events_dif_table_rec(k).inst_req_to_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_inst_req_to_hist,
                                                          nvl(future_events_dif_table_rec(k).inst_req_to_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).dep_clin_serv_b IS NOT NULL
                OR future_events_dif_table_rec(k).dep_clin_serv_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_dep_clin_serv,
                                                          nvl(future_events_dif_table_rec(k).dep_clin_serv_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_dep_clin_serv_hist,
                                                          nvl(future_events_dif_table_rec(k).dep_clin_serv_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).sch_event_b IS NOT NULL
                OR future_events_dif_table_rec(k).sch_event_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_sch_event,
                                                          nvl(future_events_dif_table_rec(k).sch_event_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_sch_event_hist,
                                                          nvl(future_events_dif_table_rec(k).sch_event_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).prof_req_to_b IS NOT NULL
                OR future_events_dif_table_rec(k).prof_req_to_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_prof_req_to,
                                                          nvl(future_events_dif_table_rec(k).prof_req_to_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_prof_req_to_hist,
                                                          nvl(future_events_dif_table_rec(k).prof_req_to_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).complaint_b IS NOT NULL
                OR future_events_dif_table_rec(k).complaint_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_complaint,
                                                          nvl(future_events_dif_table_rec(k).complaint_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_complaint_hist,
                                                          nvl(future_events_dif_table_rec(k).complaint_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).event_date_b IS NOT NULL
                OR future_events_dif_table_rec(k).event_date_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_event_date,
                                                          nvl(future_events_dif_table_rec(k).event_date_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_event_date_hist,
                                                          nvl(future_events_dif_table_rec(k).event_date_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).priority_b IS NOT NULL
                OR future_events_dif_table_rec(k).priority_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_priority,
                                                          nvl(future_events_dif_table_rec(k).priority_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_priority_hist,
                                                          nvl(future_events_dif_table_rec(k).priority_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).contact_type_b IS NOT NULL
                OR future_events_dif_table_rec(k).contact_type_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_contact_type,
                                                          nvl(future_events_dif_table_rec(k).contact_type_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_contact_type_hist,
                                                          nvl(future_events_dif_table_rec(k).contact_type_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).notes_b IS NOT NULL
                OR future_events_dif_table_rec(k).notes_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_notes,
                                                          nvl(future_events_dif_table_rec(k).notes_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_notes_hist,
                                                          nvl(future_events_dif_table_rec(k).notes_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).instructions_b IS NOT NULL
                OR future_events_dif_table_rec(k).instructions_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_instructions,
                                                          nvl(future_events_dif_table_rec(k).instructions_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_instructions_hist,
                                                          nvl(future_events_dif_table_rec(k).instructions_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).room_b IS NOT NULL
                OR future_events_dif_table_rec(k).room_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_room,
                                                          nvl(future_events_dif_table_rec(k).room_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_room_hist,
                                                          nvl(future_events_dif_table_rec(k).room_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).request_type_b IS NOT NULL
                OR future_events_dif_table_rec(k).request_type_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_request_type,
                                                          nvl(future_events_dif_table_rec(k).request_type_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_request_type_hist,
                                                          nvl(future_events_dif_table_rec(k).request_type_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).req_resp_b IS NOT NULL
                OR future_events_dif_table_rec(k).req_resp_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_req_resp,
                                                          nvl(future_events_dif_table_rec(k).req_resp_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_req_resp_hist,
                                                          nvl(future_events_dif_table_rec(k).req_resp_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).lang_b IS NOT NULL
                OR future_events_dif_table_rec(k).lang_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_lang,
                                                          nvl(future_events_dif_table_rec(k).lang_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_lang_hist,
                                                          nvl(future_events_dif_table_rec(k).lang_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).approval_prof_b IS NOT NULL
                OR future_events_dif_table_rec(k).approval_prof_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_approval_prof,
                                                          nvl(future_events_dif_table_rec(k).approval_prof_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_approval_prof_hist,
                                                          nvl(future_events_dif_table_rec(k).approval_prof_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).request_reason_b IS NOT NULL
                OR future_events_dif_table_rec(k).request_reason_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_request_reason,
                                                          nvl(future_events_dif_table_rec(k).request_reason_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_request_reason_hist,
                                                          nvl(future_events_dif_table_rec(k).request_reason_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).recurrence_b IS NOT NULL
                OR future_events_dif_table_rec(k).recurrence_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_recurrence,
                                                          nvl(future_events_dif_table_rec(k).recurrence_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_recurrence_hist,
                                                          nvl(future_events_dif_table_rec(k).recurrence_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).frequency_b IS NOT NULL
                OR future_events_dif_table_rec(k).frequency_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_frequency,
                                                          nvl(future_events_dif_table_rec(k).frequency_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_frequency_hist,
                                                          nvl(future_events_dif_table_rec(k).frequency_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).dt_rec_begin_b IS NOT NULL
                OR future_events_dif_table_rec(k).dt_rec_begin_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_dt_rec_begin,
                                                          nvl(future_events_dif_table_rec(k).dt_rec_begin_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_dt_rec_begin_hist,
                                                          nvl(future_events_dif_table_rec(k).dt_rec_begin_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).dt_rec_end_b IS NOT NULL
                OR future_events_dif_table_rec(k).dt_rec_end_a IS NOT NULL
                OR future_events_dif_table_rec(k).nr_event_b IS NOT NULL
                OR future_events_dif_table_rec(k).nr_event_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_rec_end,
                                                          nvl(future_events_dif_table_rec(k).dt_rec_end_b,
                                                              nvl(future_events_dif_table_rec(k).nr_event_b, l_na)));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_rec_end_hist,
                                                          nvl(future_events_dif_table_rec(k).dt_rec_end_a,
                                                              nvl(future_events_dif_table_rec(k).nr_event_a, l_na)));
            END IF;
            IF future_events_dif_table_rec(k).week_day_b IS NOT NULL
                OR future_events_dif_table_rec(k).week_day_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_week_day,
                                                          nvl(future_events_dif_table_rec(k).week_day_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_week_day_hist,
                                                          nvl(future_events_dif_table_rec(k).week_day_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).week_nr_b IS NOT NULL
                OR future_events_dif_table_rec(k).week_nr_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_week_nr,
                                                          nvl(future_events_dif_table_rec(k).week_nr_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_week_nr_hist,
                                                          nvl(future_events_dif_table_rec(k).week_nr_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).month_day_b IS NOT NULL
                OR future_events_dif_table_rec(k).month_day_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_month_day,
                                                          nvl(future_events_dif_table_rec(k).month_day_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_month_day_hist,
                                                          nvl(future_events_dif_table_rec(k).month_day_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).month_nr_b IS NOT NULL
                OR future_events_dif_table_rec(k).month_nr_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_month_nr,
                                                          nvl(future_events_dif_table_rec(k).month_nr_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_month_nr_hist,
                                                          nvl(future_events_dif_table_rec(k).month_nr_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).status_b IS NOT NULL
                OR future_events_dif_table_rec(k).status_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(2);
                o_event_hist(l_counter + 1) := table_clob(l_type_bold,
                                                          l_label_status,
                                                          nvl(future_events_dif_table_rec(k).status_b, l_na));
                o_event_hist(l_counter + 2) := table_clob(l_type_red,
                                                          l_label_status_hist,
                                                          nvl(future_events_dif_table_rec(k).status_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).cancel_notes_b IS NOT NULL
                OR future_events_dif_table_rec(k).cancel_notes_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(1);
                o_event_hist(l_counter + 1) := table_clob(l_type_red,
                                                          l_label_cancel_notes,
                                                          nvl(future_events_dif_table_rec(k).cancel_notes_a, l_na));
            END IF;
            IF future_events_dif_table_rec(k).cancel_reason_b IS NOT NULL
                OR future_events_dif_table_rec(k).cancel_reason_a IS NOT NULL
            THEN
                l_counter := o_event_hist.count;
                o_event_hist.extend(1);
                o_event_hist(l_counter + 1) := table_clob(l_type_red,
                                                          l_label_cancel_reason,
                                                          nvl(future_events_dif_table_rec(k).cancel_reason_a, l_na));
            END IF;
        
            l_counter := o_event_hist.count;
            o_event_hist.extend(1);
            o_event_hist(l_counter + 1) := table_clob(l_type_italic,
                                                      l_label_registered,
                                                      future_events_dif_table_rec(k).registered,
                                                      future_events_dif_table_rec(k).create_time);
        END LOOP;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_event);
            o_event_hist := table_table_clob(table_clob(NULL));
            RETURN FALSE;
    END get_event_hist;

    /********************************************************************************************
    * get approval professionals
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_consult_req      future events identifier
    * @param      o_prof_list          professional list   
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/27
    **********************************************************************************************/
    FUNCTION get_approval_professionals
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_consult_req IN consult_req.id_consult_req%TYPE,
        o_prof_list   OUT pk_types.cursor_type,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_APPROVAL_PROFESSIONALS';
    BEGIN
    
        OPEN o_prof_list FOR
            SELECT *
              FROM (SELECT t.id_professional,
                           pk_prof_utils.get_name_signature(i_lang, i_prof, t.id_professional) prof_name,
                           nvl((SELECT ra.flg_active
                                 FROM request_approval ra
                                WHERE ra.id_consult_req = i_consult_req
                                  AND ra.id_professional = t.id_professional),
                               pk_alert_constant.g_no) flg_active
                      FROM (SELECT DISTINCT pi.id_professional id_professional
                              FROM prof_institution pi
                              JOIN prof_cat pc
                                ON pc.id_professional = pi.id_professional
                              JOIN category c
                                ON c.id_category = pc.id_category
                             WHERE pi.id_institution = i_prof.institution
                               AND c.flg_type = 'D'
                               AND pi.flg_state = pk_opinion.g_prof_active
                               AND pi.dt_end_tstz IS NULL
                               AND pi.flg_external = pk_alert_constant.g_no
                               AND pk_prof_utils.is_internal_prof(i_lang, i_prof, pc.id_professional, i_prof.institution) =
                                   pk_alert_constant.g_yes) t)
             ORDER BY prof_name;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_prof_list);
            RETURN FALSE;
    END get_approval_professionals;

    FUNCTION get_approval_professionals
    (
        i_lang IN language.id_language%TYPE,
        i_prof IN profissional
    ) RETURN t_tbl_core_domain IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_APPROVAL_PROFESSIONALS';
    
        l_return t_tbl_core_domain;
        l_error  t_error_out;
    
    BEGIN
    
        g_error := 'OPEN L_RETURN';
        SELECT *
          BULK COLLECT
          INTO l_return
          FROM (SELECT t_row_core_domain(internal_name => NULL,
                                         desc_domain   => label,
                                         domain_value  => data,
                                         order_rank    => NULL,
                                         img_name      => NULL)
                  FROM (SELECT *
                          FROM (SELECT t.id_professional AS data,
                                       pk_prof_utils.get_name_signature(i_lang, i_prof, t.id_professional) label
                                  FROM (SELECT DISTINCT pi.id_professional id_professional
                                          FROM prof_institution pi
                                          JOIN prof_cat pc
                                            ON pc.id_professional = pi.id_professional
                                          JOIN category c
                                            ON c.id_category = pc.id_category
                                         WHERE pi.id_institution = i_prof.institution
                                           AND c.flg_type = 'D'
                                           AND pi.flg_state = pk_opinion.g_prof_active
                                           AND pi.dt_end_tstz IS NULL
                                           AND pi.flg_external = pk_alert_constant.g_no
                                           AND pk_prof_utils.is_internal_prof(i_lang,
                                                                              i_prof,
                                                                              pc.id_professional,
                                                                              i_prof.institution) = pk_alert_constant.g_yes) t)
                         ORDER BY label));
    
        RETURN l_return;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang     => i_lang,
                                              i_sqlcode  => SQLCODE,
                                              i_sqlerrm  => SQLERRM,
                                              i_message  => g_error,
                                              i_owner    => g_pk_owner,
                                              i_package  => g_package_name,
                                              i_function => l_func_name,
                                              o_error    => l_error);
            pk_alert_exceptions.reset_error_state;
            RETURN t_tbl_core_domain();
    END get_approval_professionals;

    /********************************************************************************************
    * This function returns  the ocorrences of a given consult req to use in the New Scheduler
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_consult_req      consult req identifier
    * @param      o_recurrence           occorence information   
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/27
    **********************************************************************************************/
    FUNCTION get_cr_recurrence
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_consult_req IN table_number,
        o_recurrence  OUT pk_types.cursor_type,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_CR_RECURRENCE';
    BEGIN
    
        OPEN o_recurrence FOR
            SELECT cr.id_consult_req id_consult_req,
                   decode(cr.flg_recurrence, g_flg_not_repeat, NULL, cr.flg_recurrence) flgreccurencepattern,
                   decode(cr.flg_recurrence, g_flg_daily, cr.frequency) daylynumberdays,
                   decode(cr.flg_recurrence, g_flg_weekly, cr.frequency) weeklynumberweeks,
                   decode(cr.flg_recurrence,
                          g_flg_weekly,
                          decode(cr.week_day, 1, pk_alert_constant.g_yes, pk_alert_constant.g_no)) flgweeklymonday,
                   decode(cr.flg_recurrence,
                          g_flg_weekly,
                          decode(cr.week_day, 2, pk_alert_constant.g_yes, pk_alert_constant.g_no)) flgweeklytuesday,
                   decode(cr.flg_recurrence,
                          g_flg_weekly,
                          decode(cr.week_day, 3, pk_alert_constant.g_yes, pk_alert_constant.g_no)) flgweeklywednesday,
                   decode(cr.flg_recurrence,
                          g_flg_weekly,
                          decode(cr.week_day, 4, pk_alert_constant.g_yes, pk_alert_constant.g_no)) flgweeklythursday,
                   decode(cr.flg_recurrence,
                          g_flg_weekly,
                          decode(cr.week_day, 5, pk_alert_constant.g_yes, pk_alert_constant.g_no)) flgweeklyfriday,
                   decode(cr.flg_recurrence,
                          g_flg_weekly,
                          decode(cr.week_day, 6, pk_alert_constant.g_yes, pk_alert_constant.g_no)) flgweeklysaturday,
                   decode(cr.flg_recurrence,
                          g_flg_weekly,
                          decode(cr.week_day, 7, pk_alert_constant.g_yes, pk_alert_constant.g_no)) flgweeklysunday,
                   decode(cr.flg_recurrence, g_flg_monthly, cr.frequency) monthlynumbermonths,
                   decode(cr.flg_recurrence, g_flg_monthly, cr.month_day) monthlydaynumber,
                   decode(cr.flg_recurrence, g_flg_monthly, cr.week_day) monthlyweekday,
                   decode(cr.flg_recurrence, g_flg_monthly, cr.week_nr) monthlyweeknumber,
                   decode(cr.flg_recurrence, g_flg_yearly, cr.frequency) yearlyyearnumber,
                   decode(cr.flg_recurrence, g_flg_yearly, cr.month_day) yearlymonthdaynumber,
                   decode(cr.flg_recurrence, g_flg_yearly, cr.month_nr) yearlymonthnumber,
                   decode(cr.flg_recurrence, g_flg_yearly, cr.week_day) yearlyweekday,
                   decode(cr.flg_recurrence, g_flg_yearly, cr.week_nr) yearlyweeknumber,
                   decode(cr.flg_recurrence, g_flg_yearly, cr.month_nr) yearlyweekdaymonthnumber,
                   pk_date_utils.date_send_tsz(i_lang, cr.dt_rec_end, i_prof) recurrenceenddate,
                   pk_date_utils.date_send_tsz(i_lang, cr.dt_rec_begin, i_prof) recurrencebegindate,
                   cr.nr_events recurrenceendnumber
              FROM consult_req cr
             WHERE cr.id_consult_req IN (SELECT column_value
                                           FROM TABLE(i_consult_req))
               AND cr.flg_recurrence <> g_flg_not_repeat
               AND cr.flg_recurrence IS NOT NULL;
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_recurrence);
            RETURN FALSE;
    END get_cr_recurrence;

    /********************************************************************************************
    * get approval professionals
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_consult_req      future events identifier
    * @param      o_prof_list          professional list   
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/27
    **********************************************************************************************/
    FUNCTION get_approval_prof
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_consult_req IN consult_req.id_consult_req%TYPE,
        o_prof_list   OUT pk_types.cursor_type,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_APPROVAL_PROF';
    BEGIN
    
        OPEN o_prof_list FOR
            SELECT *
              FROM (SELECT ra.id_professional,
                           pk_prof_utils.get_name_signature(i_lang, i_prof, ra.id_professional) prof_name
                      FROM request_approval ra
                     WHERE ra.id_consult_req = i_consult_req
                       AND ra.flg_active = pk_alert_constant.g_yes)
             ORDER BY prof_name;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_prof_list);
            RETURN FALSE;
    END get_approval_prof;

    /********************************************************************************************
    * get requested professionals
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_consult_req      future events identifier
    * @param      o_prof_list          professional list   
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/27
    **********************************************************************************************/
    FUNCTION get_request_prof
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_consult_req IN consult_req.id_consult_req%TYPE,
        o_prof_list   OUT pk_types.cursor_type,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_REQUEST_PROF';
    BEGIN
    
        OPEN o_prof_list FOR
            SELECT *
              FROM (SELECT rp.id_professional,
                           pk_prof_utils.get_name_signature(i_lang, i_prof, rp.id_professional) prof_name
                      FROM request_prof rp
                     WHERE rp.id_consult_req = i_consult_req
                       AND rp.flg_active = pk_alert_constant.g_yes)
             ORDER BY prof_name;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_prof_list);
            RETURN FALSE;
    END get_request_prof;
    /********************************************************************************************
    * get approval professionals
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_consult_req_hist   future events identifier
    * @param      o_prof_list          professional list   
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/27
    **********************************************************************************************/
    FUNCTION get_approval_prof_hist
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_consult_req_hist IN consult_req_hist.id_consult_req_hist%TYPE,
        o_prof_list        OUT pk_types.cursor_type,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_APPROVAL_PROF_HIST';
    BEGIN
    
        OPEN o_prof_list FOR
            SELECT *
              FROM (SELECT rah.id_professional,
                           pk_prof_utils.get_name_signature(i_lang, i_prof, rah.id_professional) prof_name
                      FROM request_approval_hist rah
                     WHERE rah.id_consult_req_hist = i_consult_req_hist)
             ORDER BY prof_name;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_prof_list);
            RETURN FALSE;
    END get_approval_prof_hist;
    /********************************************************************************************
    * get requested professionals
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_consult_req_hist   future events identifier
    * @param      o_prof_list          professional list   
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/27
    **********************************************************************************************/
    FUNCTION get_request_prof_hist
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_consult_req_hist IN consult_req_hist.id_consult_req_hist%TYPE,
        o_prof_list        OUT pk_types.cursor_type,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_REQUEST_PROF_HIST';
    BEGIN
    
        OPEN o_prof_list FOR
            SELECT *
              FROM (SELECT rph.id_professional,
                           pk_prof_utils.get_name_signature(i_lang, i_prof, rph.id_professional) prof_name
                      FROM request_prof_hist rph
                     WHERE rph.id_consult_req_hist = i_consult_req_hist)
             ORDER BY prof_name;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_prof_list);
            RETURN FALSE;
    END get_request_prof_hist;
    /********************************************************************************************
    * get future events approval professionals
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_consult_req      future events identifier
    * @param      i_hist
    * @param      o_prof_list          professional list   
    * @param      o_name_prof_list          professional list 
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/27
    **********************************************************************************************/
    FUNCTION get_fe_approval_professionals
    (
        i_lang           IN language.id_language%TYPE,
        i_prof           IN profissional,
        i_consult_req    IN consult_req.id_consult_req%TYPE,
        i_hist           IN VARCHAR2,
        o_id_prof_list   OUT table_number,
        o_name_prof_list OUT table_varchar,
        o_error          OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_FE_APPROVAL_PROFESSIONALS';
        l_prof_list pk_types.cursor_type;
    BEGIN
        o_id_prof_list   := table_number();
        o_name_prof_list := table_varchar();
    
        IF i_hist = pk_alert_constant.g_no
        THEN
            IF NOT get_approval_prof(i_lang        => i_lang,
                                     i_prof        => i_prof,
                                     i_consult_req => i_consult_req,
                                     o_prof_list   => l_prof_list,
                                     o_error       => o_error)
            THEN
                RETURN FALSE;
            END IF;
        ELSE
            IF NOT get_approval_prof_hist(i_lang             => i_lang,
                                          i_prof             => i_prof,
                                          i_consult_req_hist => i_consult_req,
                                          o_prof_list        => l_prof_list,
                                          o_error            => o_error)
            THEN
                RETURN FALSE;
            END IF;
        END IF;
    
        FETCH l_prof_list BULK COLLECT
            INTO o_id_prof_list, o_name_prof_list;
        CLOSE l_prof_list;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            RETURN FALSE;
    END get_fe_approval_professionals;

    /********************************************************************************************
    * get future events requested professionals
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_consult_req      future events identifier
    * @param      i_hist
    * @param      o_prof_list          professional list   
    * @param      o_name_prof_list          professional list 
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/27
    **********************************************************************************************/
    FUNCTION get_fe_request_professionals
    (
        i_lang           IN language.id_language%TYPE,
        i_prof           IN profissional,
        i_consult_req    IN consult_req.id_consult_req%TYPE,
        i_hist           IN VARCHAR2,
        o_id_prof_list   OUT table_number,
        o_name_prof_list OUT table_varchar,
        o_error          OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_FE_REQUEST_PROFESSIONALS';
        l_prof_list pk_types.cursor_type;
    BEGIN
        o_id_prof_list   := table_number();
        o_name_prof_list := table_varchar();
    
        IF i_hist = pk_alert_constant.g_no
        THEN
            IF NOT get_request_prof(i_lang        => i_lang,
                                    i_prof        => i_prof,
                                    i_consult_req => i_consult_req,
                                    o_prof_list   => l_prof_list,
                                    o_error       => o_error)
            THEN
                RETURN FALSE;
            END IF;
        ELSE
            IF NOT get_request_prof_hist(i_lang             => i_lang,
                                         i_prof             => i_prof,
                                         i_consult_req_hist => i_consult_req,
                                         o_prof_list        => l_prof_list,
                                         o_error            => o_error)
            THEN
                RETURN FALSE;
            END IF;
        END IF;
    
        FETCH l_prof_list BULK COLLECT
            INTO o_id_prof_list, o_name_prof_list;
        CLOSE l_prof_list;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            RETURN FALSE;
    END get_fe_request_professionals;
    /********************************************************************************************
    * get future events approval professionals (ids only)
    *
    * @param      i_consult_req      future events identifier
    *
    * @return  table_number with the professional ids
    * @author  Sérgio Santos
    * @version 1.0
    * @since   2010/Jun/03
    **********************************************************************************************/
    FUNCTION get_fe_approval_prof_ids(i_consult_req IN consult_req.id_consult_req%TYPE) RETURN table_number IS
        l_prof_list     pk_types.cursor_type;
        l_error         t_error_out;
        l_prof_list_ids table_number := table_number();
        l_dummy_tv      table_varchar := table_varchar();
    BEGIN
    
        IF NOT get_approval_prof(i_lang        => NULL,
                                 i_prof        => NULL,
                                 i_consult_req => i_consult_req,
                                 o_prof_list   => l_prof_list,
                                 o_error       => l_error)
        THEN
            RETURN NULL;
        END IF;
    
        FETCH l_prof_list BULK COLLECT
            INTO l_prof_list_ids, l_dummy_tv;
        CLOSE l_prof_list;
    
        RETURN l_prof_list_ids;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_fe_approval_prof_ids;

    /********************************************************************************************
    * get future events requested professionals (ids only)
    *
    * @param      i_consult_req      future events identifier
    *
    * @return  table_number with the professional ids
    * @author  Sérgio Santos
    * @version 1.0
    * @since   2010/Jun/03
    **********************************************************************************************/
    FUNCTION get_fe_request_prof_ids(i_consult_req IN consult_req.id_consult_req%TYPE) RETURN table_number IS
        l_prof_list     pk_types.cursor_type;
        l_error         t_error_out;
        l_prof_list_ids table_number := table_number();
        l_dummy_tv      table_varchar := table_varchar();
    BEGIN
    
        IF NOT get_request_prof(i_lang        => NULL,
                                i_prof        => NULL,
                                i_consult_req => i_consult_req,
                                o_prof_list   => l_prof_list,
                                o_error       => l_error)
        THEN
            RETURN NULL;
        END IF;
    
        FETCH l_prof_list BULK COLLECT
            INTO l_prof_list_ids, l_dummy_tv;
        CLOSE l_prof_list;
    
        RETURN l_prof_list_ids;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_fe_request_prof_ids;

    /********************************************************************************************
    * insert professional approval
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_consult_req      future events identifier
    * @param      i_prof_approval      professional identifier list
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/27
    **********************************************************************************************/
    FUNCTION insert_prof_approval_nc
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_consult_req   IN consult_req.id_consult_req%TYPE,
        i_prof_approval IN table_number,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'INSERT_PROF_APPROVAL_NC';
        l_rowids    table_varchar;
    BEGIN
        FOR i IN 1 .. i_prof_approval.count
        LOOP
            ts_request_approval.ins(id_request_approval_in => ts_request_approval.next_key,
                                    id_consult_req_in      => i_consult_req,
                                    id_professional_in     => i_prof_approval(i),
                                    flg_active_in          => pk_alert_constant.g_yes,
                                    rows_out               => l_rowids);
        
            t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'REQUEST_APPROVAL',
                                          i_rowids     => l_rowids,
                                          o_error      => o_error);
        END LOOP;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END insert_prof_approval_nc;

    /********************************************************************************************
    * insert requested professional
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_consult_req      future events identifier
    * @param      i_prof_list      professional identifier list
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/27
    **********************************************************************************************/
    FUNCTION insert_request_prof_nc
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_consult_req IN consult_req.id_consult_req%TYPE,
        i_prof_list   IN table_number,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'INSERT_REQUEST_PROF_NC';
        l_rowids    table_varchar;
    BEGIN
        FOR i IN 1 .. i_prof_list.count
        LOOP
        
            IF i_prof_list(i) <> -1
            THEN
                ts_request_prof.ins(id_request_prof_in => ts_request_prof.next_key,
                                    id_consult_req_in  => i_consult_req,
                                    id_professional_in => i_prof_list(i),
                                    flg_active_in      => pk_alert_constant.g_yes,
                                    rows_out           => l_rowids);
            
                t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'REQUEST_PROF',
                                              i_rowids     => l_rowids,
                                              o_error      => o_error);
            END IF;
        END LOOP;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END insert_request_prof_nc;

    /********************************************************************************************
    * insert professional approval hist
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_consult_req_hist      future events identifier
    * @param      i_prof_approval      professional identifier list
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/27
    **********************************************************************************************/
    FUNCTION insert_prof_approval_hist_nc
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_consult_req_hist IN consult_req_hist.id_consult_req_hist%TYPE,
        i_prof_approval    IN table_number,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'INSERT_PROF_APPROVAL_HIST_NC';
        l_rowids    table_varchar;
    BEGIN
        FOR i IN 1 .. i_prof_approval.count
        LOOP
            ts_request_approval_hist.ins(id_request_approval_hist_in => ts_request_approval_hist.next_key,
                                         id_consult_req_hist_in      => i_consult_req_hist,
                                         id_professional_in          => i_prof_approval(i),
                                         rows_out                    => l_rowids);
        
            t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'REQUEST_APPROVAL_HIST',
                                          i_rowids     => l_rowids,
                                          o_error      => o_error);
        END LOOP;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END insert_prof_approval_hist_nc;

    /********************************************************************************************
    * insert request professional hist
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_consult_req_hist      future events identifier
    * @param      i_prof_list      professional identifier list
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/27
    **********************************************************************************************/
    FUNCTION insert_request_prof_hist_nc
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_consult_req_hist IN consult_req_hist.id_consult_req_hist%TYPE,
        i_prof_list        IN table_number,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'INSERT_REQUEST_PROF_HIST_NC';
        l_rowids    table_varchar;
    BEGIN
        FOR i IN 1 .. i_prof_list.count
        LOOP
            IF i_prof_list(i) <> -1
            THEN
                ts_request_prof_hist.ins(id_request_prof_hist_in => ts_request_prof_hist.next_key,
                                         id_consult_req_hist_in  => i_consult_req_hist,
                                         id_professional_in      => i_prof_list(i),
                                         rows_out                => l_rowids);
            
                t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'REQUEST_PROF_HIST',
                                              i_rowids     => l_rowids,
                                              o_error      => o_error);
            END IF;
        END LOOP;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END insert_request_prof_hist_nc;

    /********************************************************************************************
    * update professional approval
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_consult_req      future events identifier
    * @param      i_prof_approval      professional identifier list
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/27
    **********************************************************************************************/
    FUNCTION update_prof_approval_nc
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_consult_req   IN consult_req.id_consult_req%TYPE,
        i_prof_approval IN table_number,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'UPDATE_PROF_APPROVAL_NC';
        l_rowids    table_varchar;
        l_count     NUMBER;
    BEGIN
    
        ts_request_approval.upd(flg_active_in => pk_alert_constant.g_no,
                                where_in      => 'id_consult_req = ' || i_consult_req,
                                rows_out      => l_rowids);
    
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'REQUEST_APPROVAL',
                                      i_rowids     => l_rowids,
                                      o_error      => o_error);
    
        FOR i IN 1 .. i_prof_approval.count
        LOOP
        
            SELECT COUNT(1)
              INTO l_count
              FROM request_approval ra
             WHERE ra.id_consult_req = i_consult_req
               AND ra.id_professional = i_prof_approval(i);
        
            IF l_count <> 0
            THEN
                ts_request_approval.upd(flg_active_in => pk_alert_constant.g_yes,
                                        where_in      => 'id_consult_req = ' || i_consult_req ||
                                                         ' and id_professional = ' || i_prof_approval(i),
                                        rows_out      => l_rowids);
            
                t_data_gov_mnt.process_update(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'REQUEST_APPROVAL',
                                              i_rowids     => l_rowids,
                                              o_error      => o_error);
            ELSE
            
                ts_request_approval.ins(id_request_approval_in => ts_request_approval.next_key,
                                        id_consult_req_in      => i_consult_req,
                                        id_professional_in     => i_prof_approval(i),
                                        flg_active_in          => pk_alert_constant.g_yes,
                                        rows_out               => l_rowids);
            
                t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'REQUEST_APPROVAL',
                                              i_rowids     => l_rowids,
                                              o_error      => o_error);
            END IF;
        END LOOP;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END update_prof_approval_nc;

    /********************************************************************************************
    * update request professional 
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_consult_req      future events identifier
    * @param      i_prof_list      professional identifier list
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/27
    **********************************************************************************************/
    FUNCTION update_request_prof_nc
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_consult_req IN consult_req.id_consult_req%TYPE,
        i_prof_list   IN table_number,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'UPDATE_REQUEST_PROF_NC';
        l_rowids    table_varchar;
        l_count     NUMBER;
    BEGIN
    
        ts_request_prof.upd(flg_active_in => pk_alert_constant.g_no,
                            where_in      => 'id_consult_req = ' || i_consult_req,
                            rows_out      => l_rowids);
    
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'REQUEST_PROF',
                                      i_rowids     => l_rowids,
                                      o_error      => o_error);
    
        FOR i IN 1 .. i_prof_list.count
        LOOP
        
            SELECT COUNT(1)
              INTO l_count
              FROM request_prof ra
             WHERE ra.id_consult_req = i_consult_req
               AND ra.id_professional = i_prof_list(i);
        
            IF l_count <> 0
            THEN
                ts_request_prof.upd(flg_active_in => pk_alert_constant.g_yes,
                                    where_in      => 'id_consult_req = ' || i_consult_req || ' and id_professional = ' ||
                                                     i_prof_list(i),
                                    rows_out      => l_rowids);
            
                t_data_gov_mnt.process_update(i_lang       => i_lang,
                                              i_prof       => i_prof,
                                              i_table_name => 'REQUEST_PROF',
                                              i_rowids     => l_rowids,
                                              o_error      => o_error);
            ELSE
                IF i_prof_list(i) <> -1
                THEN
                    ts_request_prof.ins(id_request_prof_in => ts_request_prof.next_key,
                                        id_consult_req_in  => i_consult_req,
                                        id_professional_in => i_prof_list(i),
                                        flg_active_in      => pk_alert_constant.g_yes,
                                        rows_out           => l_rowids);
                
                    t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                                  i_prof       => i_prof,
                                                  i_table_name => 'REQUEST_PROF',
                                                  i_rowids     => l_rowids,
                                                  o_error      => o_error);
                END IF;
            END IF;
        END LOOP;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END update_request_prof_nc;

    /********************************************************************************************
    * get week number
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_week_nr            week number
    * @return   week number string
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/27
    **********************************************************************************************/
    FUNCTION get_week_nr
    (
        i_lang    IN language.id_language%TYPE,
        i_prof    IN profissional,
        i_week_nr IN consult_req.week_nr%TYPE
    ) RETURN VARCHAR2 IS
        l_week_nr sys_message.desc_message%TYPE;
    BEGIN
    
        CASE i_week_nr
            WHEN 1 THEN
                l_week_nr := pk_message.get_message(i_lang, i_prof, g_msg_day_st_week);
            WHEN 2 THEN
                l_week_nr := pk_message.get_message(i_lang, i_prof, g_msg_day_nd_week);
            WHEN 3 THEN
                l_week_nr := pk_message.get_message(i_lang, i_prof, g_msg_day_tr_week);
            WHEN 4 THEN
                l_week_nr := pk_message.get_message(i_lang, i_prof, g_msg_day_ft_week);
            WHEN 5 THEN
                l_week_nr := pk_message.get_message(i_lang, i_prof, g_msg_ls_week);
            ELSE
                l_week_nr := NULL;
        END CASE;
    
        RETURN l_week_nr;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_week_nr;

    /********************************************************************************************
    * get week day
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_week_day            week day
    * @return   week day string
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/27
    **********************************************************************************************/
    FUNCTION get_week_day
    (
        i_lang     IN language.id_language%TYPE,
        i_prof     IN profissional,
        i_week_day IN consult_req.week_day%TYPE
    ) RETURN VARCHAR2 IS
        l_week_day sys_message.desc_message%TYPE;
    BEGIN
    
        CASE i_week_day
            WHEN 1 THEN
                l_week_day := pk_message.get_message(i_lang, i_prof, 'SCH_MONTHVIEW_SEG');
            WHEN 2 THEN
                l_week_day := pk_message.get_message(i_lang, i_prof, 'SCH_MONTHVIEW_TER');
            WHEN 3 THEN
                l_week_day := pk_message.get_message(i_lang, i_prof, 'SCH_MONTHVIEW_QUA');
            WHEN 4 THEN
                l_week_day := pk_message.get_message(i_lang, i_prof, 'SCH_MONTHVIEW_QUI');
            WHEN 5 THEN
                l_week_day := pk_message.get_message(i_lang, i_prof, 'SCH_MONTHVIEW_SEX');
            WHEN 6 THEN
                l_week_day := pk_message.get_message(i_lang, i_prof, 'SCH_MONTHVIEW_SAB');
            WHEN 7 THEN
                l_week_day := pk_message.get_message(i_lang, i_prof, 'SCH_MONTHVIEW_DOM');
            ELSE
                l_week_day := NULL;
        END CASE;
    
        RETURN l_week_day;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_week_day;

    /********************************************************************************************
    * get month
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_month           month
    * @return   month string
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/27
    **********************************************************************************************/
    FUNCTION get_month
    (
        i_lang     IN language.id_language%TYPE,
        i_prof     IN profissional,
        i_month_nr IN consult_req.month_nr%TYPE
    ) RETURN VARCHAR2 IS
        l_month_nr sys_message.desc_message%TYPE;
    BEGIN
    
        CASE i_month_nr
            WHEN 1 THEN
                l_month_nr := pk_message.get_message(i_lang, i_prof, 'SCH_MONTH_1');
            WHEN 2 THEN
                l_month_nr := pk_message.get_message(i_lang, i_prof, 'SCH_MONTH_2');
            WHEN 3 THEN
                l_month_nr := pk_message.get_message(i_lang, i_prof, 'SCH_MONTH_3');
            WHEN 4 THEN
                l_month_nr := pk_message.get_message(i_lang, i_prof, 'SCH_MONTH_4');
            WHEN 5 THEN
                l_month_nr := pk_message.get_message(i_lang, i_prof, 'SCH_MONTH_5');
            WHEN 6 THEN
                l_month_nr := pk_message.get_message(i_lang, i_prof, 'SCH_MONTH_6');
            WHEN 7 THEN
                l_month_nr := pk_message.get_message(i_lang, i_prof, 'SCH_MONTH_7');
            WHEN 8 THEN
                l_month_nr := pk_message.get_message(i_lang, i_prof, 'SCH_MONTH_8');
            WHEN 9 THEN
                l_month_nr := pk_message.get_message(i_lang, i_prof, 'SCH_MONTH_9');
            WHEN 10 THEN
                l_month_nr := pk_message.get_message(i_lang, i_prof, 'SCH_MONTH_10');
            WHEN 11 THEN
                l_month_nr := pk_message.get_message(i_lang, i_prof, 'SCH_MONTH_11');
            WHEN 12 THEN
                l_month_nr := pk_message.get_message(i_lang, i_prof, 'SCH_MONTH_12');
            ELSE
                l_month_nr := NULL;
        END CASE;
    
        RETURN l_month_nr;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_month;

    /********************************************************************************************
    * get future events approval professionals
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_consult_req      future events identifier    
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/27
    **********************************************************************************************/
    FUNCTION get_fe_approval_prof_str
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_consult_req IN consult_req.id_consult_req%TYPE,
        i_hist        IN VARCHAR2
    ) RETURN VARCHAR2 IS
        o_id_prof_list   table_number;
        o_name_prof_list table_varchar;
        o_error          t_error_out;
    BEGIN
        IF NOT get_fe_approval_professionals(i_lang           => i_lang,
                                             i_prof           => i_prof,
                                             i_consult_req    => i_consult_req,
                                             i_hist           => i_hist,
                                             o_id_prof_list   => o_id_prof_list,
                                             o_name_prof_list => o_name_prof_list,
                                             o_error          => o_error)
        THEN
            RETURN NULL;
        END IF;
    
        RETURN pk_utils.concat_table(o_name_prof_list, '; ', 1, -1);
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_fe_approval_prof_str;

    /********************************************************************************************
    * get future events requested professionals
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_consult_req      future events identifier    
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/05/27
    **********************************************************************************************/
    FUNCTION get_fe_request_prof_str
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_consult_req IN consult_req.id_consult_req%TYPE,
        i_hist        IN VARCHAR2
    ) RETURN VARCHAR2 IS
        o_id_prof_list   table_number;
        o_name_prof_list table_varchar;
        o_error          t_error_out;
    BEGIN
        IF NOT get_fe_request_professionals(i_lang           => i_lang,
                                            i_prof           => i_prof,
                                            i_consult_req    => i_consult_req,
                                            i_hist           => i_hist,
                                            o_id_prof_list   => o_id_prof_list,
                                            o_name_prof_list => o_name_prof_list,
                                            o_error          => o_error)
        THEN
            RETURN NULL;
        END IF;
    
        RETURN nvl(pk_utils.concat_table(o_name_prof_list, '; ', 1, -1),
                   pk_message.get_message(i_lang, i_prof, 'FUTURE_EVENTS_T017'));
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_fe_request_prof_str;

    /********************************************************************************************
    * check requires approval 
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_event_type
    * @param      o_need_approval
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Sérgio Santos
    * @version 2.5.0.3
    * @since  2010/Jun/02
    **********************************************************************************************/
    FUNCTION check_requires_approval
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_event_type    IN future_event_approval.id_future_event_type%TYPE,
        o_need_approval OUT VARCHAR2,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'CHECK_REQUIRES_APPROVAL';
    
        l_prof_profile_template profile_template.id_profile_template%TYPE := pk_prof_utils.get_prof_profile_template(i_prof => i_prof);
    
        l_need_approval VARCHAR2(1 CHAR) := pk_alert_constant.g_no;
    BEGIN
    
        BEGIN
            SELECT *
              INTO l_need_approval
              FROM (SELECT pk_alert_constant.g_yes
                      FROM future_event_approval fea
                     WHERE fea.id_future_event_type = i_event_type
                       AND fea.id_profile_template IN (0, l_prof_profile_template)
                       AND fea.id_software IN (0, i_prof.software)
                       AND fea.id_institution IN (0, i_prof.institution)
                       AND fea.flg_available = pk_alert_constant.g_yes
                     ORDER BY fea.id_profile_template DESC, fea.id_software DESC, fea.id_institution DESC)
             WHERE rownum <= 1;
        EXCEPTION
            WHEN no_data_found THEN
                l_need_approval := pk_alert_constant.g_no;
        END;
    
        o_need_approval := l_need_approval;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END check_requires_approval;

    /********************************************************************************************
    * Returns future appointments with an episode ID
    *
    * @param i_lang                language identifier
    * @param i_prof                professional registered by identifier
    * @param i_patient             patient identifier
    * @param i_episode             episode type identifier    
    * @param i_full_select         Y/N if full select or not
    
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Sérgio Santos
    * @version 1.0
    * @since  2010/06/01
    **********************************************************************************************/
    FUNCTION get_fe_to_assoc
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_patient       IN consult_req.id_patient%TYPE,
        i_episode       IN episode.id_episode%TYPE,
        i_full_select   IN VARCHAR2,
        o_future_events OUT pk_types.cursor_type,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_FE_TO_ASSOC';
    BEGIN
        g_sysdate_tstz := current_timestamp;
    
        --CREATE AN ORDER SET EPISODE
        g_error := 'GET FUTURE EPISODES';
        OPEN o_future_events FOR
            SELECT decode(event_type,
                          'SCHEDULED_EPISODES',
                          id_episode,
                          'SCHEDULED_EPISODES_2',
                          id_episode,
                          'FUTURE_EVENTS',
                          id_event,
                          id_event) id_consult_req,
                   id_episode,
                   id_schedule,
                   event_type,
                   event_type_name_title,
                   event_type_clinical_service,
                   (SELECT pk_translation.get_translation(i_lang, se.code_sch_event_abrv)
                      FROM sch_event se
                     WHERE se.id_sch_event = sch_event) sch_type_desc,
                   professional desc_prof,
                   request_status_desc,
                   event_date,
                   order_date event_date_ux
              FROM TABLE(get_patient_future_events_pl(i_lang, i_prof, i_patient))
             WHERE ((i_full_select = 'N' AND
                   event_type IN ('FUTURE_EVENTS', 'SCHEDULED_EPISODES', 'SCHEDULED_EPISODES_2')) OR
                   i_full_select = 'Y')
               AND id_episode IS NOT NULL
               AND flg_status <> g_flg_cancel
               AND pk_date_utils.trunc_insttimezone(i_prof      => i_prof,
                                                    i_timestamp => nvl(pk_date_utils.get_string_tstz(i_lang,
                                                                                                     i_prof,
                                                                                                     order_date,
                                                                                                     NULL),
                                                                       g_sysdate_tstz),
                                                    i_format    => 'DD') >=
                   pk_date_utils.trunc_insttimezone(i_prof => i_prof, i_timestamp => g_sysdate_tstz, i_format => 'DD');
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END get_fe_to_assoc;

    FUNCTION get_fe_to_assoc_by_dcs
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_patient          IN consult_req.id_patient%TYPE,
        i_episode          IN episode.id_episode%TYPE,
        i_full_select      IN VARCHAR2,
        i_clinical_service IN clinical_service.id_clinical_service%TYPE,
        o_future_events    OUT pk_types.cursor_type,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_FE_TO_ASSOC_BY_DCS';
    BEGIN
        g_sysdate_tstz := current_timestamp;
    
        --CREATE AN ORDER SET EPISODE
        g_error := 'GET FUTURE EPISODES';
        OPEN o_future_events FOR
            SELECT decode(event_type,
                          'SCHEDULED_EPISODES',
                          id_episode,
                          'SCHEDULED_EPISODES_2',
                          id_episode,
                          'FUTURE_EVENTS',
                          id_event,
                          id_event) id_consult_req,
                   id_episode,
                   id_schedule,
                   event_type,
                   event_type_name_title,
                   event_type_clinical_service,
                   (SELECT pk_translation.get_translation(i_lang, se.code_sch_event_abrv)
                      FROM sch_event se
                     WHERE se.id_sch_event = sch_event) sch_type_desc,
                   professional desc_prof,
                   request_status_desc,
                   event_date,
                   order_date event_date_ux
              FROM TABLE(get_patient_future_events_pl(i_lang, i_prof, i_patient)) t
             WHERE ((i_full_select = 'N' AND
                   event_type IN ('FUTURE_EVENTS', 'SCHEDULED_EPISODES', 'SCHEDULED_EPISODES_2')) OR
                   i_full_select = 'Y')
               AND id_episode IS NOT NULL
               AND flg_status <> g_flg_cancel
               AND pk_date_utils.trunc_insttimezone(i_prof      => i_prof,
                                                    i_timestamp => nvl(pk_date_utils.get_string_tstz(i_lang,
                                                                                                     i_prof,
                                                                                                     order_date,
                                                                                                     NULL),
                                                                       g_sysdate_tstz),
                                                    i_format    => 'DD') >=
                   pk_date_utils.trunc_insttimezone(i_prof => i_prof, i_timestamp => g_sysdate_tstz, i_format => 'DD')
               AND (i_clinical_service IS NULL OR t.dep_clin_serv = to_char(i_clinical_service));
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END get_fe_to_assoc_by_dcs;

    /**********************************************************************************************
    * returns the status of an episode
    *
    * @param   i_lang                  language id
    * @param   i_prof                  professional's details 
    * @param   i_patient               patient ID 
    * @param   i_episode               episode ID     
    * @param   o_status_string         episode status string
    * @param   o_flag_canceled         indicates if it is canceled
    * @param   o_flag_finished         indicates if it is finished
    * @param   o_error                 error structure    
    *
    * @return  BOOLEAN                 false in case of error and true otherwise
    *                        
    * @author  Tiago Silva
    * @since   2010/08/03
    **********************************************************************************************/
    FUNCTION get_epis_status
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_patient       IN consult_req.id_patient%TYPE,
        i_episode       IN episode.id_episode%TYPE,
        o_status_string OUT VARCHAR2,
        o_flag_canceled OUT VARCHAR2,
        o_flag_finished OUT VARCHAR2,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
    BEGIN
    
        g_error := 'GET EPISODE STATUS DETAILS';
        pk_alertlog.log_debug(g_error, g_package_name);
    
        BEGIN
            SELECT t.status_icon,
                   decode(t.flg_status, pk_alert_constant.g_cancelled, pk_alert_constant.g_yes, pk_alert_constant.g_no) AS flg_canceled,
                   pk_alert_constant.g_no AS flg_finished
              INTO o_status_string, o_flag_canceled, o_flag_finished
              FROM (SELECT *
                      FROM TABLE(get_patient_events_pl(i_lang, i_prof, i_patient))) t
             WHERE t.id_episode = i_episode;
        
        EXCEPTION
            WHEN no_data_found THEN
                -- It can be a canceled episode that is currently not returned by get_patient_events_pl
                g_error := 'No events found for patient = ' || i_patient || ' and episode = ' || i_episode ||
                           '. The episode was cancelled?';
                pk_alertlog.log_warn(g_error, g_package_name, 'get_epis_status');
                -- As workaround evaluates the status in episode table to ensure that id_episode is valid
                SELECT NULL AS status_icon,
                       decode(e.flg_status,
                              pk_alert_constant.g_cancelled,
                              pk_alert_constant.g_yes,
                              pk_alert_constant.g_no) AS flg_canceled,
                       pk_alert_constant.g_no AS flg_finished
                  INTO o_status_string, o_flag_canceled, o_flag_finished
                  FROM episode e
                 WHERE e.id_episode = i_episode;
        END;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              'GET_EPIS_STATUS',
                                              o_error);
            RETURN FALSE;
    END get_epis_status;

    /********************************************************************************************
    * Returns future appointments with an episode ID
    *
    * @param i_lang                language identifier
    * @param i_prof                professional registered by identifier
    * @param i_patient             patient identifier
    * @param i_episode          episode type identifier    
    
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Sérgio Santos
    * @version 1.0
    * @since  2010/06/01
    **********************************************************************************************/
    FUNCTION get_epis_short_detail
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_patient       IN consult_req.id_patient%TYPE,
        i_episode       IN episode.id_episode%TYPE,
        o_future_events OUT pk_types.cursor_type,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
    BEGIN
    
        g_error := 'GET EPISODE SHORT DETAILS';
        pk_alertlog.log_debug(g_error, g_package_name);
    
        g_error := 'GET FUTURE EPISODES';
        OPEN o_future_events FOR
            SELECT id_event id_consult_req,
                   id_episode,
                   id_schedule,
                   event_type,
                   event_type_name_title,
                   event_type_clinical_service,
                   (SELECT pk_translation.get_translation(i_lang, se.code_sch_event_abrv)
                      FROM sch_event se
                     WHERE se.id_sch_event = sch_event) sch_type_desc,
                   professional desc_prof,
                   request_status_desc,
                   event_date,
                   order_date event_date_ux
              FROM TABLE(get_patient_future_events_pl(i_lang, i_prof, i_patient)) t
             WHERE t.id_episode = i_episode;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              'GET_EPIS_SHORT_DETAIL',
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END get_epis_short_detail;

    /********************************************************************************************
    * Creates an Order Set future event with an associeted episode with flg_ehr = 'O'
    *
    * @param i_lang                language identifier
    * @param i_prof                professional registered by identifier
    * @param i_patient             patient identifier
    * @param i_epis_type           episode type identifier    
    * @param i_request_prof        list of requested professioanal
    * @param i_inst_req_to         institution registered to identifier
    * @param i_sch_event           episode type identifier
    * @param i_dep_clin_serv       clinical service identifier
    * @param i_complaint           complaint identifier
    * @param i_dt_begin_event      begin date
    * @param i_dt_end_event        end date
    * @param i_priority            priority
    * @param i_contact_type        contact_type
    * @param i_notes               notes
    * @param i_instructions        instructions
    * @param i_room                room identifier
    * @param i_request_type        request type
    * @param i_request_responsable request responsable
    * @param i_prof_approval       list of professionals that can approve
    * @param i_language         language
    * @param i_recurrence          recurrence
    * @param i_status              status
    * @param i_frequency           frequency
    * @param i_dt_rec_begin          begin recurrence date
    * @param i_dt_rec_end          end recurrence date
    * @param i_nr_events           number of events
    * @param i_week_day            week day
    * @param i_week_nr             week number
    * @param i_month_day           month day
    * @param i_month_nr            month number    
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Sérgio Santos
    * @version 1.0
    * @since  2010/06/01
    **********************************************************************************************/
    FUNCTION create_follow_up_appointment
    (
        i_lang                IN language.id_language%TYPE,
        i_prof                IN profissional,
        i_patient             IN consult_req.id_patient%TYPE,
        i_epis_type           IN consult_req.id_epis_type%TYPE,
        i_request_prof        IN table_number,
        i_inst_req_to         IN consult_req.id_inst_requested%TYPE,
        i_sch_event           IN consult_req.id_sch_event%TYPE,
        i_dep_clin_serv       IN consult_req.id_dep_clin_serv%TYPE,
        i_complaint           IN consult_req.id_complaint%TYPE,
        i_dt_begin_event      IN VARCHAR2,
        i_dt_end_event        IN VARCHAR2,
        i_priority            IN consult_req.flg_priority%TYPE,
        i_contact_type        IN consult_req.flg_contact_type%TYPE,
        i_notes               IN consult_req.notes%TYPE,
        i_instructions        IN consult_req.instructions%TYPE,
        i_room                IN consult_req.id_room%TYPE,
        i_request_type        IN consult_req.flg_request_type%TYPE,
        i_request_responsable IN consult_req.flg_req_resp%TYPE,
        i_request_reason      IN consult_req.request_reason%TYPE,
        i_prof_approval       IN table_number,
        i_language            IN consult_req.id_language%TYPE,
        i_recurrence          IN consult_req.flg_recurrence%TYPE,
        i_status              IN consult_req.flg_status%TYPE,
        i_frequency           IN consult_req.frequency%TYPE,
        i_dt_rec_begin        IN VARCHAR2,
        i_dt_rec_end          IN VARCHAR2,
        i_nr_events           IN consult_req.nr_events%TYPE,
        i_week_day            IN consult_req.week_day%TYPE,
        i_week_nr             IN consult_req.week_nr%TYPE,
        i_month_day           IN consult_req.month_day%TYPE,
        i_month_nr            IN consult_req.month_nr%TYPE,
        i_reason_for_visit    IN consult_req.reason_for_visit%TYPE,
        i_flg_origin_module   IN VARCHAR2,
        i_task_dependency     IN tde_task_dependency.id_task_dependency%TYPE,
        i_flg_start_depending IN VARCHAR2,
        i_episode_to_exec     IN consult_req.id_episode_to_exec%TYPE,
        i_transaction_id      IN VARCHAR2,
        o_id_consult_req      OUT consult_req.id_consult_req%TYPE,
        o_id_episode          OUT episode.id_episode%TYPE,
        o_error               OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'CREATE_FOLLOW_UP_APPOINTMENT';
    
        --SCH 3.0 TRANSACTION ID
        l_transaction_id VARCHAR2(4000);
    
        --ORDER SET CREATED EPISODE AND FUTURE EVENT
        l_os_episode episode.id_episode%TYPE;
        -- l_id_consult_req consult_req.id_consult_req%TYPE;
    BEGIN
        --GETS A NEW TRANSACTION ID AND BEGINS THE TRANSACTION (FOR THE SCHEDULER 3.0 TRANSACTIONS)
        g_error          := 'CALL PK_SCHEDULE_API_UPSTREAM.BEGIN_NEW_TRANSACTION';
        l_transaction_id := pk_schedule_api_upstream.begin_new_transaction(i_transaction_id, i_prof);
    
        --CREATE AN ORDER SET EPISODE
        g_error := 'CREATE AN ORDER SET EPISODE';
        IF NOT pk_ehr_access.create_order_set_episode(i_lang             => i_lang,
                                                      i_prof             => i_prof,
                                                      i_id_patient       => i_patient,
                                                      i_id_episode       => NULL,
                                                      i_id_schedule      => NULL,
                                                      i_id_dep_clin_serv => i_dep_clin_serv,
                                                      i_id_epis_type     => i_epis_type,
                                                      i_transaction_id   => l_transaction_id,
                                                      o_episode          => l_os_episode,
                                                      o_error            => o_error)
        THEN
            RETURN FALSE;
        END IF;
    
        o_id_episode := l_os_episode;
    
        --CREATE THE CORRESPONDING FUTURE EVENT
        g_error := 'CREATE THE ORDER SET CORRESPONDING FUTURE EVENT';
        IF NOT pk_consult_req.insert_consult_req_nc(i_lang                => i_lang,
                                                    i_prof                => i_prof,
                                                    i_patient             => i_patient,
                                                    i_episode             => NULL,
                                                    i_epis_type           => i_epis_type,
                                                    i_request_prof        => i_request_prof,
                                                    i_inst_req_to         => i_inst_req_to,
                                                    i_sch_event           => i_sch_event,
                                                    i_dep_clin_serv       => i_dep_clin_serv,
                                                    i_complaint           => i_complaint,
                                                    i_dt_begin_event      => pk_date_utils.get_string_tstz(i_lang,
                                                                                                           i_prof,
                                                                                                           i_dt_begin_event,
                                                                                                           NULL),
                                                    i_dt_end_event        => pk_date_utils.get_string_tstz(i_lang,
                                                                                                           i_prof,
                                                                                                           i_dt_end_event,
                                                                                                           NULL),
                                                    i_priority            => i_priority,
                                                    i_contact_type        => i_contact_type,
                                                    i_notes               => i_notes,
                                                    i_instructions        => i_instructions,
                                                    i_room                => i_room,
                                                    i_request_type        => i_request_type,
                                                    i_request_responsable => i_request_responsable,
                                                    i_request_reason      => i_request_reason,
                                                    i_prof_approval       => i_prof_approval,
                                                    i_language            => i_language,
                                                    i_recurrence          => i_recurrence,
                                                    i_status              => i_status,
                                                    i_frequency           => i_frequency,
                                                    i_dt_rec_begin        => pk_date_utils.get_string_tstz(i_lang,
                                                                                                           i_prof,
                                                                                                           i_dt_rec_begin,
                                                                                                           NULL),
                                                    i_dt_rec_end          => pk_date_utils.get_string_tstz(i_lang,
                                                                                                           i_prof,
                                                                                                           i_dt_rec_end,
                                                                                                           NULL),
                                                    i_nr_events           => i_nr_events,
                                                    i_week_day            => i_week_day,
                                                    i_week_nr             => i_week_nr,
                                                    i_month_day           => i_month_day,
                                                    i_month_nr            => i_month_nr,
                                                    i_reason_for_visit    => i_reason_for_visit,
                                                    id_task_dependency    => i_task_dependency,
                                                    i_episode_to_exec     => nvl(i_episode_to_exec, l_os_episode),
                                                    i_flg_origin_module   => i_flg_origin_module,
                                                    o_consult_req         => o_id_consult_req,
                                                    o_error               => o_error)
        THEN
            RETURN FALSE;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END create_follow_up_appointment;

    FUNCTION create_follow_up_appointment
    (
        i_lang                 IN language.id_language%TYPE,
        i_prof                 IN profissional,
        i_id_patient           IN patient.id_patient%TYPE,
        i_tbl_ds_internal_name IN table_varchar,
        i_tbl_real_val         IN table_table_varchar,
        i_tbl_val_mea          IN table_varchar,
        i_tbl_val_clob         IN table_clob DEFAULT NULL,
        o_id_consult_req       OUT consult_req.id_consult_req%TYPE,
        o_id_episode           OUT episode.id_episode%TYPE,
        o_error                OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name VARCHAR2(60 CHAR) := 'CREATE_FOLLOW_UP_APPOINTMENT';
    
        l_epis_type         epis_type.id_epis_type%TYPE;
        l_future_event_type future_event_type.id_future_event_type%TYPE;
        l_flg_type          future_event_type.flg_type%TYPE;
        l_title             pk_translation.t_desc_translation;
    
        l_request_prof        table_number := table_number();
        l_inst_req_to         consult_req.id_inst_requested%TYPE;
        l_sch_event           consult_req.id_sch_event%TYPE;
        l_dep_clin_serv       consult_req.id_dep_clin_serv%TYPE;
        l_complaint           consult_req.id_complaint%TYPE;
        l_dt_begin_event      VARCHAR2(100 CHAR);
        l_dt_end_event        VARCHAR2(100 CHAR);
        l_priority            consult_req.flg_priority%TYPE;
        l_contact_type        consult_req.flg_contact_type%TYPE;
        l_notes               consult_req.notes%TYPE;
        l_instructions        consult_req.instructions%TYPE;
        l_room                consult_req.id_room%TYPE;
        l_request_type        consult_req.flg_request_type%TYPE;
        l_request_responsable consult_req.flg_req_resp%TYPE;
        l_request_reason      consult_req.request_reason%TYPE;
        l_prof_approval       table_number := table_number();
        l_language            consult_req.id_language%TYPE;
        l_recurrence          consult_req.flg_recurrence%TYPE;
        l_status              consult_req.flg_status%TYPE;
        l_frequency           consult_req.frequency%TYPE;
        l_dt_rec_begin        VARCHAR2(100 CHAR);
        l_dt_rec_end          VARCHAR2(100 CHAR);
        l_nr_events           consult_req.nr_events%TYPE;
        l_week_day            consult_req.week_day%TYPE;
        l_week_nr             consult_req.week_nr%TYPE;
        l_month_day           consult_req.month_day%TYPE;
        l_month_nr            consult_req.month_nr%TYPE;
        l_reason_for_visit    consult_req.reason_for_visit%TYPE;
    
    BEGIN
    
        g_error := 'ERROR CALLING GET_FET_EP_BY_TASK_TYPE';
        IF NOT pk_events.get_fet_ep_by_task_type(i_lang              => i_lang,
                                                 i_prof              => i_prof,
                                                 i_id_task_type      => 30, --MEDICAL APPOINTMENT
                                                 o_future_event_type => l_future_event_type,
                                                 o_epis_type         => l_epis_type,
                                                 o_flg_type          => l_flg_type,
                                                 o_title             => l_title,
                                                 o_error             => o_error)
        THEN
            RAISE g_exception;
        END IF;
    
        FOR i IN i_tbl_ds_internal_name.first .. i_tbl_ds_internal_name.last
        LOOP
            IF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_location
            THEN
                l_inst_req_to := to_number(i_tbl_real_val(i) (1));
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_professional
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    IF i_tbl_real_val(i) (j) IS NOT NULL
                    THEN
                        l_request_prof.extend();
                        l_request_prof(l_request_prof.count) := to_number(i_tbl_real_val(i) (j));
                    END IF;
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_type_of_visit
            THEN
                l_sch_event := to_number(i_tbl_real_val(i) (1));
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_clinical_service
            THEN
                l_dep_clin_serv := to_number(i_tbl_real_val(i) (1));
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_reason_for_visit_ms
            THEN
                l_complaint := to_number(i_tbl_real_val(i) (1));
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_execution_date
            THEN
                l_dt_begin_event := i_tbl_real_val(i) (1); --Ver se é preciso processar a data
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_priority
            THEN
                l_priority := i_tbl_real_val(i) (1);
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_type_of_encounter
            THEN
                l_contact_type := i_tbl_real_val(i) (1);
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_scheduling_notes
            THEN
                l_notes := i_tbl_real_val(i) (1);
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_patient_instructions
            THEN
                l_instructions := i_tbl_real_val(i) (1);
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_room
            THEN
                l_room := to_number(i_tbl_real_val(i) (1));
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_order_method
            THEN
                l_request_type := i_tbl_real_val(i) (1);
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_ordered_by
            THEN
                l_request_responsable := i_tbl_real_val(i) (1);
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_reason_for_order
            THEN
                l_request_reason := i_tbl_real_val(i) (1);
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_approved_by
            THEN
                FOR j IN i_tbl_real_val(i).first .. i_tbl_real_val(i).last
                LOOP
                    IF i_tbl_real_val(i) (j) IS NOT NULL
                    THEN
                        l_prof_approval.extend();
                        l_prof_approval(l_prof_approval.count) := to_number(i_tbl_real_val(i) (j));
                    END IF;
                END LOOP;
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_translation
            THEN
                l_language := to_number(i_tbl_real_val(i) (1));
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_recurrence_pattern
            THEN
                l_recurrence := i_tbl_real_val(i) (1);
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_repeat_every
            THEN
                l_frequency := to_number(i_tbl_real_val(i) (1));
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_start_date_medium
            THEN
                l_dt_rec_begin := i_tbl_real_val(i) (1);
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_end_after_d
            THEN
                l_dt_rec_end := i_tbl_real_val(i) (1);
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_end_after_n
            THEN
                l_nr_events := to_number(i_tbl_real_val(i) (1));
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_week_day
            THEN
                l_week_day := to_number(i_tbl_real_val(i) (1));
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_on_weeks
            THEN
                l_week_nr := to_number(i_tbl_real_val(i) (1));
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_days_month
            THEN
                l_month_day := to_number(i_tbl_real_val(i) (1));
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_on_months
            THEN
                l_month_nr := to_number(i_tbl_real_val(i) (1));
            ELSIF i_tbl_ds_internal_name(i) = pk_orders_constant.g_ds_reason_for_visit
            THEN
                l_reason_for_visit := i_tbl_real_val(i) (1);
            END IF;
        END LOOP;
    
        IF NOT pk_events.create_follow_up_appointment(i_lang                => i_lang,
                                                      i_prof                => i_prof,
                                                      i_patient             => i_id_patient,
                                                      i_epis_type           => l_epis_type,
                                                      i_request_prof        => l_request_prof,
                                                      i_inst_req_to         => l_inst_req_to,
                                                      i_sch_event           => l_sch_event,
                                                      i_dep_clin_serv       => l_dep_clin_serv,
                                                      i_complaint           => l_complaint,
                                                      i_dt_begin_event      => l_dt_begin_event, --10
                                                      i_dt_end_event        => NULL,
                                                      i_priority            => l_priority,
                                                      i_contact_type        => l_contact_type,
                                                      i_notes               => l_notes,
                                                      i_instructions        => l_instructions,
                                                      i_room                => l_room,
                                                      i_request_type        => l_request_type,
                                                      i_request_responsable => l_request_responsable,
                                                      i_request_reason      => l_request_reason,
                                                      i_prof_approval       => l_prof_approval, --20
                                                      i_language            => l_language,
                                                      i_recurrence          => l_recurrence,
                                                      i_status              => 'P',
                                                      i_frequency           => l_frequency,
                                                      i_dt_rec_begin        => l_dt_rec_begin,
                                                      i_dt_rec_end          => l_dt_rec_end,
                                                      i_nr_events           => l_nr_events,
                                                      i_week_day            => l_week_day,
                                                      i_week_nr             => l_week_nr,
                                                      i_month_day           => l_month_day, --30
                                                      i_month_nr            => l_month_nr,
                                                      i_reason_for_visit    => l_reason_for_visit,
                                                      i_flg_origin_module   => NULL,
                                                      i_task_dependency     => NULL,
                                                      i_flg_start_depending => NULL,
                                                      i_episode_to_exec     => NULL,
                                                      i_transaction_id      => NULL,
                                                      o_id_consult_req      => o_id_consult_req,
                                                      o_id_episode          => o_id_episode,
                                                      o_error               => o_error)
        THEN
            RETURN FALSE;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END create_follow_up_appointment;

    /********************************************************************************************
    * start dependent task (define start timestamp and put task in the beginning of workflow)
    *
    * @param i_lang preferred language id
    * @param i_prof professional structure
    * @param i_task_request request that identifies patient's task process
    * @param i_start_tstz start timestamp to consider in task processing
    * @param o_error error structure for exception handling
    *
    * @return boolean true on success, otherwise false
    ********************************************************************************************/
    FUNCTION start_task
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_task_request IN tde_task_dependency.id_task_request%TYPE,
        i_start_tstz   IN VARCHAR2,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'START_TASK';
    
        l_epis_to_exec episode.id_episode%TYPE;
    
        l_rowids table_varchar;
    BEGIN
        pk_events.g_sysdate_tstz := current_timestamp;
    
        --GET THE ORDER SET ASSOCIETED EPISODE
        SELECT cr.id_episode_to_exec
          INTO l_epis_to_exec
          FROM consult_req cr
         WHERE cr.id_consult_req = i_task_request;
    
        --UPDATES EPISODE BEGIN DATE
        g_error := 'UPDATE EPISODE BEGIN DATE';
        ts_episode.upd(id_episode_in    => l_epis_to_exec,
                       dt_begin_tstz_in => pk_events.g_sysdate_tstz,
                       rows_out         => l_rowids);
    
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EPISODE',
                                      i_rowids     => l_rowids,
                                      o_error      => o_error);
    
        --UPDATES EPIS_INFO FLAG_STATUS (EPISODE STATE)
        g_error  := 'UPDATE EPIS_INFO FLG_STATUS';
        l_rowids := table_varchar();
        ts_epis_info.upd(flg_status_in => 'E', where_in => ' id_episode = ' || l_epis_to_exec, rows_out => l_rowids);
    
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'EPIS_INFO',
                                      i_rowids     => l_rowids,
                                      o_error      => o_error);
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END;

    /********************************************************************************************
    * Creates an Order Set future event with an associeted episode with flg_ehr = 'O'
    *
    * @param i_lang                language identifier
    * @param i_prof                professional registered by identifier
    * @param i_patient             Consult Req identifier
    * @param i_id_schedule         The schedule episode    
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Sérgio Santos
    * @version 2.6.0.3
    * @since  2010/Jun/19
    **********************************************************************************************/
    FUNCTION schedule_consult_req
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_consult_req IN consult_req.id_consult_req%TYPE,
        i_id_schedule IN schedule.id_schedule%TYPE,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'SCHEDULE_CONSULT_REQ';
    
        l_cr_epis_to_exec episode.id_episode%TYPE;
    
        l_rowids table_varchar;
    BEGIN
        --SEND CURRENT INFORMATION TO HISTORY
        g_error := 'SEND TO HISTORY';
        IF NOT pk_consult_req.send_cr_to_history(i_lang        => i_lang,
                                                 i_prof        => i_prof,
                                                 i_consult_req => i_consult_req,
                                                 o_error       => o_error)
        THEN
            RETURN FALSE;
        END IF;
    
        --CREATE AN ORDER SET EPISODE
        g_error := 'CREATE AN ORDER SET EPISODE';
        ts_consult_req.upd(id_consult_req_in => i_consult_req, id_schedule_in => i_id_schedule);
    
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'CONSULT_REQ',
                                      i_rowids     => l_rowids,
                                      o_error      => o_error);
    
        --GET THE EPISODE TO EXECUTE (IF APPLIABLE)
        g_error := 'GET EPISODE TO EXEC';
        BEGIN
            SELECT cr.id_episode_to_exec
              INTO l_cr_epis_to_exec
              FROM consult_req cr
             WHERE cr.id_consult_req = i_consult_req;
        EXCEPTION
            WHEN no_data_found THEN
                NULL;
        END;
    
        --UPDATES THE EPIS_INFO IN ORDER TO LINK WITH THE SCHEDULE
        --AND TRANSFORMS THE "ORDER SET" EPISODE INTO A NORMAL EPISODE
        IF l_cr_epis_to_exec IS NOT NULL
        THEN
            g_error  := 'UPDATE EPIS_INFO SCHEDULE';
            l_rowids := table_varchar();
        
            ts_epis_info.upd(id_schedule_in => i_id_schedule,
                             where_in       => ' id_episode = ' || l_cr_epis_to_exec,
                             rows_out       => l_rowids);
        
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EPIS_INFO',
                                          i_rowids     => l_rowids,
                                          o_error      => o_error);
        
            g_error  := 'UPDATE EPISODE FLG_EHR';
            l_rowids := table_varchar();
        
            ts_episode.upd(id_episode_in => l_cr_epis_to_exec,
                           flg_ehr_in    => pk_ehr_access.g_flg_ehr_scheduled,
                           rows_out      => l_rowids);
        
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'EPISODE',
                                          i_rowids     => l_rowids,
                                          o_error      => o_error);
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END schedule_consult_req;

    /**
    * Checks if an specific future event type is available
    *
    * @param i_future_event_type         Lens identifier.
    * @param i_prof         The professional record.
    *
    * @return  'Y' is available, 'N' otherwise
    *
    * @author   Sérgio Santos
    * @version  2.5
    * @since    2010/Jun/18
    */
    FUNCTION is_fe_available
    (
        i_future_event_type future_event_type.id_future_event_type%TYPE,
        i_prof              profissional
    ) RETURN VARCHAR2 IS
        l_return VARCHAR2(1 CHAR) := pk_alert_constant.g_no;
    
        l_profile_template profile_template.id_profile_template%TYPE;
        l_market           market.id_market%TYPE;
    BEGIN
        SELECT nvl(i.id_market, 0)
          INTO l_market
          FROM institution i
         WHERE i.id_institution = i_prof.institution;
    
        l_profile_template := pk_prof_utils.get_prof_profile_template(i_prof => i_prof);
    
        BEGIN
            SELECT pk_alert_constant.g_yes
              INTO l_return
              FROM (SELECT fea.id_future_event_type,
                           fea.flg_available,
                           row_number() over(ORDER BY decode(fea.id_market, l_market, 1, 2), decode(fea.id_institution, i_prof.institution, 1, 2), decode(fea.id_software, i_prof.software, 1, 2), decode(fea.id_profile_template, l_profile_template, 1, 2)) line_number
                      FROM future_event_access fea
                     WHERE fea.id_future_event_type = i_future_event_type
                       AND fea.id_institution IN (0, i_prof.institution)
                       AND fea.id_software IN (0, i_prof.software)
                       AND fea.id_profile_template IN (0, l_profile_template)
                       AND fea.id_market IN (0, l_market))
             WHERE line_number = 1
               AND flg_available = pk_alert_constant.g_yes;
        EXCEPTION
            WHEN no_data_found THEN
                l_return := pk_alert_constant.g_no;
        END;
    
        RETURN l_return;
    END is_fe_available;

    /**
    * Checks if an specific future event type is available
    *
    * @param i_TASK_TYPE TASK TYPE IDENTIFIER
    * @param i_prof         The professional record.
    *
    * @return  'Y' is available, 'N' otherwise
    *
    * @author   Paulo Teixeira   
    * @version  1.0
    * @since    2010/07/06
    */
    FUNCTION is_fe_available_by_tk
    (
        i_task_type future_event_type.id_task_type%TYPE,
        i_prof      profissional
    ) RETURN VARCHAR2 IS
        l_return            VARCHAR2(1 CHAR) := pk_alert_constant.g_no;
        l_future_event_type table_number := table_number();
        l_profile_template  profile_template.id_profile_template%TYPE;
        l_market            market.id_market%TYPE;
    BEGIN
    
        SELECT fet.id_future_event_type
          BULK COLLECT
          INTO l_future_event_type
          FROM future_event_type fet
         WHERE fet.id_task_type = i_task_type;
    
        SELECT nvl(i.id_market, 0)
          INTO l_market
          FROM institution i
         WHERE i.id_institution = i_prof.institution;
    
        l_profile_template := pk_prof_utils.get_prof_profile_template(i_prof => i_prof);
    
        BEGIN
            SELECT pk_alert_constant.g_yes
              INTO l_return
              FROM (SELECT fea.id_future_event_type,
                           fea.flg_available,
                           row_number() over(ORDER BY decode(fea.id_market, l_market, 1, 2), decode(fea.id_institution, i_prof.institution, 1, 2), decode(fea.id_software, i_prof.software, 1, 2), decode(fea.id_profile_template, l_profile_template, 1, 2)) line_number
                      FROM future_event_access fea
                     WHERE fea.id_future_event_type IN (SELECT column_value
                                                          FROM TABLE(l_future_event_type))
                       AND fea.id_institution IN (0, i_prof.institution)
                       AND fea.id_software IN (0, i_prof.software)
                       AND fea.id_profile_template IN (0, l_profile_template)
                       AND fea.id_market IN (0, l_market))
             WHERE line_number = 1
               AND flg_available = pk_alert_constant.g_yes;
        EXCEPTION
            WHEN no_data_found THEN
                l_return := pk_alert_constant.g_no;
        END;
    
        RETURN l_return;
    END is_fe_available_by_tk;

    /**
    * Returns the actions associated to the PLUS button on the all events grid
    *
    * @param i_lang                language preference
    * @param i_prof                professional identification
    * @param i_id_patient          patient id that this professional wants to access to.
    *
    * @param o_areas               cursor containing actions available
    *
    * @return              true if sucess, false otherwise
    *
    * @since 2010-Jun-11
    * @version v2.6.0.3
    * @author sergio.santos
    */
    FUNCTION get_plus_actions_grid
    (
        i_lang       IN language.id_language%TYPE,
        i_prof       IN profissional,
        i_id_patient IN patient.id_patient%TYPE,
        i_id_episode IN episode.id_episode%TYPE,
        o_actions    OUT pk_types.cursor_type,
        o_error      OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_has_new_contact          VARCHAR2(1 CHAR) := pk_alert_constant.g_no;
        l_can_create_sched_contact VARCHAR2(1 CHAR) := pk_alert_constant.g_no;
        l_allow_sched_without_vac  sch_vacancy_usage.flg_sched_without_vac%TYPE;
    
        l_show_ehr_event VARCHAR2(1 CHAR) := pk_alert_constant.g_no;
    
        CURSOR c_new_contact IS
            SELECT DISTINCT pk_alert_constant.g_yes
              FROM prof_cat pc, category c
             WHERE pc.id_category = c.id_category
               AND pc.id_professional = i_prof.id
               AND pc.id_institution = i_prof.institution
               AND i_prof.software = g_software_care
               AND c.flg_type IN (pk_ehr_access.g_doctor_category, pk_ehr_access.g_nurse_category);
    
        CURSOR c_create_sched_contact IS
            SELECT DISTINCT pk_alert_constant.g_yes
              FROM prof_cat pc, category c
             WHERE pc.id_category = c.id_category
               AND pc.id_professional = i_prof.id
               AND pc.id_institution = i_prof.institution
               AND i_prof.software IN (pk_ehr_access.g_software_care,
                                       pk_ehr_access.g_software_outpatient,
                                       pk_ehr_access.g_software_pp,
                                       pk_ehr_access.g_software_nutre,
                                       pk_ehr_access.g_software_social,
                                       pk_alert_constant.g_soft_psychologist)
               AND c.flg_type IN (pk_ehr_access.g_doctor_category,
                                  pk_ehr_access.g_nurse_category,
                                  pk_ehr_access.g_nutre_category,
                                  pk_ehr_access.g_social_category,
                                  pk_alert_constant.g_cat_type_registrar,
                                  pk_alert_constant.g_cat_type_psychologist);
    
    BEGIN
    
        g_error := 'OPEN c_new_contact';
        OPEN c_new_contact;
        FETCH c_new_contact
            INTO l_has_new_contact;
        CLOSE c_new_contact;
    
        IF pk_ehr_access.has_ehr_permission(i_lang, i_prof, i_id_patient)
        THEN
            l_show_ehr_event := pk_alert_constant.g_yes;
        ELSE
            l_show_ehr_event := pk_alert_constant.g_no;
        END IF;
    
        g_error := 'OPEN c_create_sched_contact';
        OPEN c_create_sched_contact;
        FETCH c_create_sched_contact
            INTO l_can_create_sched_contact;
        CLOSE c_create_sched_contact;
    
        IF l_can_create_sched_contact = pk_alert_constant.g_yes
        THEN
            l_allow_sched_without_vac := pk_alert_constant.g_yes;
        ELSE
            l_allow_sched_without_vac := pk_alert_constant.g_no;
        END IF;
    
        g_error := 'OPEN o_actions';
        OPEN o_actions FOR
            SELECT k.id_action,
                   k.id_parent,
                   k.rank,
                   k.desc_action,
                   k.icon,
                   k.flg_default,
                   k.flg_active,
                   k.action,
                   k.flg_type,
                   k.id_epis_type,
                   k.title
              FROM (SELECT eac.id_ehr_access_context id_action,
                           NULL id_parent,
                           10000 + rownum rank,
                           pk_translation.get_translation(i_lang, eac.code_ehr_access_context) desc_action,
                           NULL icon,
                           pk_alert_constant.g_no flg_default,
                           decode(eac.flg_type,
                                  pk_ehr_access.g_access_ehr,
                                  l_show_ehr_event,
                                  pk_ehr_access.g_access_new_indirect_contact,
                                  l_has_new_contact,
                                  pk_ehr_access.g_access_create_contact,
                                  l_allow_sched_without_vac,
                                  pk_ehr_access.g_access_create_schedule,
                                  l_can_create_sched_contact,
                                  'F',
                                  pk_alert_constant.g_yes,
                                  'G',
                                  pk_alert_constant.g_yes) flg_active,
                           decode(flg_type,
                                  'E',
                                  'EHR_EVENT',
                                  'N',
                                  'CONTACT_WITHOUT_SCHED',
                                  'A',
                                  'CONSULT_A',
                                  'L',
                                  'CONSULT_N',
                                  'F',
                                  'DEFINITIVE_EPISODE',
                                  'G',
                                  'TEMPORARY_EPISODE') action,
                           eac.flg_type flg_type,
                           NULL id_epis_type,
                           NULL title
                      FROM ehr_access_context eac
                     WHERE eac.id_ehr_access_context IN (SELECT MAX(e2.id_ehr_access_context)
                                                           FROM ehr_access_context_soft e2
                                                           JOIN ehr_access_context e1
                                                             ON (e1.id_ehr_access_context = e2.id_ehr_access_context)
                                                          WHERE e2.id_software IN (0, i_prof.software)
                                                            AND e1.flg_context = pk_ehr_access.g_flg_context_access
                                                            AND e1.flg_available = pk_alert_constant.g_yes
                                                          GROUP BY e1.flg_type)
                       AND (eac.flg_type <> pk_ehr_access.g_access_ehr OR l_show_ehr_event = pk_alert_constant.g_yes)
                       AND eac.flg_context = pk_ehr_access.g_flg_context_access
                       AND eac.flg_available = pk_alert_constant.g_yes
                       AND eac.flg_type IN ('E', 'N', 'A', 'L', 'F')) k
             WHERE k.flg_active = pk_alert_constant.g_yes
            UNION ALL
            SELECT w.id_action,
                   w.id_parent,
                   w.rank,
                   w.desc_action,
                   w.icon,
                   w.flg_default,
                   w.flg_active,
                   w.action,
                   w.flg_type,
                   w.id_epis_type,
                   w.title
              FROM (SELECT fet.id_future_event_type id_action,
                           fet.id_parent,
                           fet.rank,
                           pk_translation.get_translation(i_lang, fet.code_future_event_type) desc_action,
                           fet.icon,
                           pk_alert_constant.g_no flg_default,
                           decode(i_id_episode,
                                  NULL,
                                  decode(fet.id_future_event_type,
                                         g_event_type_harvest,
                                         'I',
                                         g_event_type_sched,
                                         'I',
                                         g_event_type_mfr,
                                         'I',
                                         pk_alert_constant.g_yes),
                                  pk_alert_constant.g_yes) flg_active,
                           fet.action,
                           fet.flg_type,
                           fet.id_epis_type,
                           pk_translation.get_translation(i_lang, fet.code_future_event_title) title
                      FROM future_event_type fet
                     WHERE is_fe_available(fet.id_future_event_type, i_prof) = pk_alert_constant.g_yes) w
             ORDER BY rank, desc_action;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              'GET_PLUS_ACTIONS_GRID',
                                              o_error);
            pk_types.open_my_cursor(o_actions);
            pk_alert_exceptions.reset_error_state;
            RETURN FALSE;
    END get_plus_actions_grid;

    /********************************************************************************************
    * Return all the future event types available
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier    
    * @param      o_fut_eve_type      professional identifier list
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/14
    **********************************************************************************************/
    FUNCTION get_future_events_type
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        o_fut_eve_type OUT pk_types.cursor_type,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_FUTURE_EVENTS_TYPE';
    BEGIN
        OPEN o_fut_eve_type FOR
            SELECT fet.id_future_event_type,
                   fet.flg_type,
                   fet.id_epis_type,
                   decode(et.id_epis_type,
                          NULL,
                          pk_translation.get_translation(i_lang, fet.code_future_event_title),
                          pk_translation.get_translation(i_lang, fet.code_future_event_title) || ' (' ||
                          REPLACE(pk_translation.get_translation(i_lang, s.code_software), '<br>', ' ') || ')') label
              FROM future_event_type fet
              LEFT JOIN epis_type et
                ON et.id_epis_type = fet.id_epis_type
               AND et.id_epis_type IN (pk_alert_constant.g_epis_type_outpatient,
                                       pk_alert_constant.g_epis_type_primary_care,
                                       pk_alert_constant.g_epis_type_private_practice,
                                       pk_alert_constant.g_epis_type_nurse_care,
                                       pk_alert_constant.g_epis_type_nurse_outp,
                                       pk_alert_constant.g_epis_type_nurse_pp)
              LEFT JOIN epis_type_soft_inst e
                ON e.id_epis_type = et.id_epis_type
               AND e.id_institution = 0
              LEFT JOIN software s
                ON s.id_software = e.id_software
               AND s.id_software <> pk_alert_constant.g_soft_director --remove the Director software
             WHERE fet.flg_available = pk_alert_constant.g_yes
               AND NOT EXISTS (SELECT fet_a.id_future_event_type
                      FROM future_event_type fet_a
                     WHERE fet_a.id_parent = fet.id_future_event_type)
               AND fet.id_future_event_type <> 1
             ORDER BY label;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_fut_eve_type);
            pk_alert_exceptions.reset_error_state;
            RETURN FALSE;
    END get_future_events_type;

    /********************************************************************************************
    * get future event status
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier    
    * @param      o_fut_eve_type      professional identifier list
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/14
    **********************************************************************************************/
    FUNCTION get_future_events_status
    (
        i_lang           IN language.id_language%TYPE,
        i_prof           IN profissional,
        o_fut_eve_status OUT pk_types.cursor_type,
        o_error          OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_FUTURE_EVENTS_STATUS';
    BEGIN
    
        OPEN o_fut_eve_status FOR
            SELECT pk_message.get_message(i_lang, i_prof, 'ACTION.CODE_ACTION.215321') label, 'PRESENT_FUTURE' tag
              FROM dual
            UNION ALL
            SELECT pk_message.get_message(i_lang, i_prof, 'ACTION.CODE_ACTION.215322') label, 'PAST' tag
              FROM dual
            UNION ALL
            SELECT pk_message.get_message(i_lang, i_prof, 'ACTION.CODE_ACTION.215323') label, 'C' tag
              FROM dual
            UNION ALL
            SELECT pk_message.get_message(i_lang, i_prof, 'ACTION.CODE_ACTION.215324') label, 'N' tag
              FROM dual;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_fut_eve_status);
            pk_alert_exceptions.reset_error_state;
            RETURN FALSE;
    END get_future_events_status;

    /********************************************************************************************
    * get priority's
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier    
    * @param      o_sql      professional identifier list
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/14
    **********************************************************************************************/
    FUNCTION get_priority
    (
        i_lang  IN language.id_language%TYPE,
        i_prof  IN profissional,
        o_sql   OUT pk_types.cursor_type,
        o_error OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_PRIORITY';
    BEGIN
    
        OPEN o_sql FOR
            SELECT sd.desc_val, sd.val, sd.rank
              FROM sys_domain sd
             WHERE sd.code_domain = g_flg_priority
               AND sd.domain_owner = pk_sysdomain.k_default_schema
               AND sd.id_language = i_lang
               AND sd.flg_available = pk_alert_constant.g_yes
             ORDER BY rank;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_sql);
            pk_alert_exceptions.reset_error_state;
            RETURN FALSE;
    END get_priority;

    /********************************************************************************************
    *   OBJECTIVO:   Registar leitura e aceitação / rejeição do pedido INTERNO de consulta  
    *   
    *  
    * @param      i_lang         Língua registada como preferência do profissional    
    * @param      i_consult_req     ID do pedido de exame / consulta  
    * @param      i_prof            Profissional lê e aceita / rejeita 
    * @param      i_deny_acc        aceitar / não aceitar o pedido 
    * @param      i_denial_justif   Justificação de rejeição do pedido 
    * @param      i_approve_justif  Justificação da aprovação do pedido 
    * @param      i_dt_scheduled_str Data / hora da consulta 
    * @param      i_notes_admin     Notas para o administrativo 
    * @param      i_flg_type_date   
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/18
    **********************************************************************************************/

    FUNCTION set_consult_req_decide
    (
        i_lang             IN language.id_language%TYPE,
        i_consult_req      IN consult_req.id_consult_req%TYPE,
        i_prof             IN profissional,
        i_deny_acc         IN consult_req_prof.flg_status%TYPE,
        i_denial_justif    IN consult_req_prof.denial_justif%TYPE,
        i_approve_justif   IN consult_req_prof.approve_justif%TYPE,
        i_dt_scheduled_str IN VARCHAR2,
        i_notes_admin      IN consult_req.notes_admin%TYPE,
        i_flg_type_date    IN consult_req.flg_type_date%TYPE,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
        l_flg_status   consult_req_prof.flg_status%TYPE;
        l_status       consult_req.flg_status%TYPE;
        l_id           consult_req_prof.id_consult_req_prof%TYPE;
        i_dt_scheduled TIMESTAMP WITH TIME ZONE;
        l_func_name    VARCHAR2(60 CHAR) := 'SET_CONSULT_REQ_DECIDE';
        CURSOR c_req IS
            SELECT id_prof_req, flg_status, id_episode
              FROM consult_req
             WHERE id_consult_req = i_consult_req;
    
        r_req c_req%ROWTYPE;
    
        CURSOR c_exist IS
            SELECT id_consult_req_prof, flg_status
              FROM consult_req_prof
             WHERE id_consult_req = i_consult_req
               AND id_professional = i_prof.id
             ORDER BY dt_consult_req_prof_tstz DESC;
    
        l_rows table_varchar := table_varchar();
    
    BEGIN
        g_sysdate_tstz := current_timestamp;
    
        i_dt_scheduled := pk_date_utils.get_string_tstz(i_lang, i_prof, i_dt_scheduled_str, NULL);
    
        g_error := 'SEND TO HISTORY';
        IF NOT pk_consult_req.send_cr_to_history(i_lang        => i_lang,
                                                 i_prof        => i_prof,
                                                 i_consult_req => i_consult_req,
                                                 o_error       => o_error)
        THEN
            RAISE g_exception;
        END IF;
    
        g_error := 'OPEN CURSOR C_REQ';
        OPEN c_req;
        FETCH c_req
            INTO r_req;
        CLOSE c_req;
    
        IF r_req.id_prof_req = i_prof.id
           AND -- O prof q lê é o mesmo q requisitou 
           r_req.flg_status = pk_consult_req.g_consult_req_stat_reply
        THEN
            -- O pedido já foi respondido 
            NULL;
        ELSIF r_req.id_prof_req != i_prof.id
        THEN
            -- O prof q lê ñ é o mesmo q requisitou
        
            g_error := 'OPEN CURSOR C_EXIST';
            OPEN c_exist;
            FETCH c_exist
                INTO l_id, l_flg_status;
            g_found := c_exist%NOTFOUND;
            CLOSE c_exist;
        
            IF g_found
            THEN
                -- É a 1ª vez q este user lê o pedido 
                g_error := 'INSERT INTO CONSULT_REQ_PROF';
                INSERT INTO consult_req_prof
                    (id_consult_req_prof,
                     dt_consult_req_prof_tstz,
                     id_consult_req,
                     id_professional,
                     flg_status,
                     dt_scheduled_tstz)
                VALUES
                    (seq_consult_req_prof.nextval,
                     g_sysdate_tstz,
                     i_consult_req,
                     i_prof.id,
                     g_cons_req_prof_read,
                     i_dt_scheduled);
            
                l_status := pk_consult_req.g_consult_req_stat_read;
            
            END IF;
        
            IF r_req.flg_status = pk_consult_req.g_consult_req_stat_reply
               AND -- O pedido já foi respondido 
               i_deny_acc = g_cons_req_prof_accept
            THEN
                -- O user pretende aceitar o pedido 
                RAISE pk_consult_req.g_exception_msg;
            END IF;
        
            IF r_req.flg_status IN (pk_consult_req.g_consult_req_stat_reply)
               AND --O pedido já foi respondido 
               i_deny_acc = pk_consult_req.g_consult_req_stat_reply
            THEN
                -- O user lê o pedido
                NULL;
            END IF;
        
            g_error := 'VALIDATE:';
            IF l_flg_status != g_cons_req_prof_read
               AND i_deny_acc = pk_consult_req.g_consult_req_stat_reply
            THEN
                RAISE pk_consult_req.g_exception_msg_1;
            END IF;
        
            IF i_deny_acc IN (g_cons_req_prof_accept, g_cons_req_prof_deny)
            THEN
            
                g_error := 'UPDATE';
                ts_consult_req.upd(id_consult_req_in      => i_consult_req,
                                   dt_last_update_in      => g_sysdate_tstz,
                                   id_prof_last_update_in => i_prof.id,
                                   id_inst_last_update_in => i_prof.institution,
                                   flg_type_date_in       => i_flg_type_date,
                                   rows_out               => l_rows);
            
                g_error := 'T_DATA_GOV_MNT.PROCESS_UPDATE TS_CONSULT_REQ';
                t_data_gov_mnt.process_update(i_lang         => i_lang,
                                              i_prof         => i_prof,
                                              i_table_name   => 'CONSULT_REQ',
                                              i_rowids       => l_rows,
                                              o_error        => o_error,
                                              i_list_columns => table_varchar('FLG_TYPE_DATE'));
            
                g_error := 'INSERT INTO CONSULT_REQ_PROF WITH MOTIVE';
                INSERT INTO consult_req_prof
                    (id_consult_req_prof,
                     dt_consult_req_prof_tstz,
                     id_consult_req,
                     id_professional,
                     flg_status,
                     denial_justif,
                     approve_justif,
                     dt_scheduled_tstz)
                VALUES
                    (seq_consult_req_prof.nextval,
                     g_sysdate_tstz,
                     i_consult_req,
                     i_prof.id,
                     i_deny_acc,
                     i_denial_justif,
                     i_approve_justif,
                     i_dt_scheduled);
            
                IF i_deny_acc = g_cons_req_prof_accept
                THEN
                    l_status := pk_consult_req.g_consult_req_stat_reply;
                ELSE
                    l_status := pk_consult_req.g_consult_req_stat_rejected;
                END IF;
            
            END IF;
        END IF;
    
        IF l_status IS NOT NULL
        THEN
        
            l_rows := NULL;
        
            g_error := 'UPDATE2';
            ts_consult_req.upd(flg_status_in          => l_status,
                               notes_admin_in         => i_notes_admin,
                               dt_scheduled_tstz_in   => i_dt_scheduled,
                               id_consult_req_in      => i_consult_req,
                               dt_last_update_in      => g_sysdate_tstz,
                               id_prof_last_update_in => i_prof.id,
                               id_inst_last_update_in => i_prof.institution,
                               rows_out               => l_rows);
        
            g_error := 't_data_gov_mnt.process_update ts_consult_req';
            t_data_gov_mnt.process_update(i_lang         => i_lang,
                                          i_prof         => i_prof,
                                          i_table_name   => 'CONSULT_REQ',
                                          i_rowids       => l_rows,
                                          o_error        => o_error,
                                          i_list_columns => table_varchar('FLG_STATUS,NOTES_ADMIN,DT_SCHEDULED_TSTZ,ID_CONSULT_REQ'));
        
        END IF;
    
        g_error := 'CALL TO SET_FIRST_OBS';
        IF NOT pk_visit.set_first_obs(i_lang                => i_lang,
                                      i_id_episode          => r_req.id_episode,
                                      i_pat                 => NULL,
                                      i_prof                => i_prof,
                                      i_prof_cat_type       => NULL,
                                      i_dt_last_interaction => g_sysdate_tstz,
                                      i_dt_first_obs        => g_sysdate_tstz,
                                      o_error               => o_error)
        THEN
            RAISE g_exception;
        END IF;
    
        COMMIT;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN pk_consult_req.g_exception_msg THEN
            DECLARE
                l_error_in t_error_in := t_error_in();
            
                l_ret     BOOLEAN;
                l_error_v VARCHAR2(100) := pk_message.get_message(i_lang, 'CONSULT_REQ_M005');
            BEGIN
            
                -- setting package information into object 
                l_error_in.set_all(i_lang,
                                   SQLCODE,
                                   SQLERRM,
                                   g_error,
                                   g_pk_owner,
                                   g_package_name,
                                   l_func_name,
                                   l_error_v,
                                   'U');
            
                -- execute error processing 
                l_ret := pk_alert_exceptions.process_error(l_error_in, o_error);
            
                -- return failure of function_dummy 
                RETURN FALSE;
            
            END;
        WHEN pk_consult_req.g_exception_msg_1 THEN
            DECLARE
                l_error_in t_error_in := t_error_in();
            
                l_ret     BOOLEAN;
                l_error_v VARCHAR2(100) := pk_message.get_message(i_lang, 'CONSULT_REQ_M001');
            BEGIN
            
                -- setting package information into object 
                l_error_in.set_all(i_lang,
                                   SQLCODE,
                                   SQLERRM,
                                   g_error,
                                   g_pk_owner,
                                   g_package_name,
                                   l_func_name,
                                   l_error_v,
                                   'U');
            
                -- execute error processing 
                l_ret := pk_alert_exceptions.process_error(l_error_in, o_error);
            
                -- return failure of function_dummy 
                RETURN FALSE;
            
            END;
        WHEN g_exception THEN
            ROLLBACK;
            RETURN FALSE;
        WHEN OTHERS THEN
            DECLARE
                l_error_in t_error_in := t_error_in();
            
                l_ret BOOLEAN;
            
            BEGIN
            
                -- setting package information into object 
                l_error_in.set_all(i_lang, SQLCODE, SQLERRM, g_error, g_pk_owner, g_package_name, l_func_name);
            
                -- undo changes quando aplicável-> só faz ROLLBACK                  
                pk_utils.undo_changes;
                -- execute error processing 
                l_ret := pk_alert_exceptions.process_error(l_error_in, o_error);
            
                -- return failure of function_dummy 
                RETURN FALSE;
            
            END;
        
    END set_consult_req_decide;

    /********************************************************************************************
    * insert combination specifications
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_patient            patient identifier   
    * @param      i_comb_name          combination name    
    * @param      i_dt_suggest_begin   suggested date begin 
    * @param      i_dt_suggest_end     suggested date end
    * @param      i_flg_status         flag status   
    * @param      i_single_visit       single visit Y/N
    * @param      i_flg_freq_origin_module flaq origin module
    *
    * @param      o_id_combination_spec  combination specification identifier  
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/21
    **********************************************************************************************/
    FUNCTION insert_combination_spec_nc
    (
        i_lang                   IN language.id_language%TYPE,
        i_prof                   IN profissional,
        i_patient                IN patient.id_patient%TYPE,
        i_comb_name              IN combination_spec.comb_name%TYPE,
        i_dt_suggest_begin       IN combination_spec.dt_suggest_begin%TYPE,
        i_dt_suggest_end         IN combination_spec.dt_suggest_end%TYPE,
        i_flg_status             IN combination_spec.flg_status%TYPE,
        i_single_visit           IN combination_spec.flg_single_visit%TYPE,
        i_flg_freq_origin_module IN combination_spec.flg_freq_origin_module%TYPE,
        i_episode                IN combination_spec.id_episode%TYPE,
        o_id_combination_spec    OUT combination_spec.id_combination_spec%TYPE,
        o_error                  OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'INSERT_COMBINATION_SPEC_NC';
        l_rowids    table_varchar;
    BEGIN
        g_error               := 'TS_COMBINATION_SPEC.INS';
        o_id_combination_spec := ts_combination_spec.next_key;
        ts_combination_spec.ins(id_combination_spec_in    => o_id_combination_spec,
                                id_patient_in             => i_patient,
                                comb_name_in              => i_comb_name,
                                dt_suggest_begin_in       => i_dt_suggest_begin,
                                dt_suggest_end_in         => i_dt_suggest_end,
                                flg_status_in             => i_flg_status,
                                flg_single_visit_in       => i_single_visit,
                                dt_last_update_in         => current_timestamp,
                                id_prof_last_update_in    => i_prof.id,
                                id_inst_last_update_in    => i_prof.institution,
                                flg_freq_origin_module_in => i_flg_freq_origin_module,
                                id_episode_in             => i_episode,
                                rows_out                  => l_rowids);
    
        t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'COMBINATION_SPEC',
                                      i_rowids     => l_rowids,
                                      o_error      => o_error);
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END insert_combination_spec_nc;

    /********************************************************************************************
    * update combination specifications 
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_combination_spec   combination specification
    * @param      i_patient            patient identifier   
    * @param      i_comb_name          combination name    
    * @param      i_dt_suggest_begin   suggested date begin 
    * @param      i_dt_suggest_end     suggested date end
    * @param      i_flg_status         flag status   
    * @param      i_single_visit       single visit Y/N
    * @param      i_flg_freq_origin_module flaq origin module
    *   
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/21
    **********************************************************************************************/
    FUNCTION update_combination_spec_nc
    (
        i_lang                   IN language.id_language%TYPE,
        i_prof                   IN profissional,
        i_combination_spec       IN combination_spec.id_combination_spec%TYPE,
        i_patient                IN patient.id_patient%TYPE,
        i_comb_name              IN combination_spec.comb_name%TYPE,
        i_dt_suggest_begin       IN combination_spec.dt_suggest_begin%TYPE,
        i_dt_suggest_end         IN combination_spec.dt_suggest_end%TYPE,
        i_flg_status             IN combination_spec.flg_status%TYPE,
        i_single_visit           IN combination_spec.flg_single_visit%TYPE,
        i_flg_freq_origin_module IN combination_spec.flg_freq_origin_module%TYPE,
        i_episode                IN combination_spec.id_episode%TYPE,
        o_error                  OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'UPDATE_COMBINATION_SPEC_NC';
        l_rowids    table_varchar;
    BEGIN
    
        g_error := 'SEND TO COMBINATION HISTORY';
        IF NOT send_comb_to_history(i_lang             => i_lang,
                                    i_prof             => i_prof,
                                    i_combination_spec => i_combination_spec,
                                    o_error            => o_error)
        THEN
            RETURN FALSE;
        END IF;
    
        g_error := 'TS_COMBINATION_SPEC.UPD';
        ts_combination_spec.upd(id_combination_spec_in     => i_combination_spec,
                                id_patient_in              => i_patient,
                                id_patient_nin             => FALSE,
                                comb_name_in               => i_comb_name,
                                comb_name_nin              => FALSE,
                                dt_suggest_begin_in        => i_dt_suggest_begin,
                                dt_suggest_begin_nin       => FALSE,
                                dt_suggest_end_in          => i_dt_suggest_end,
                                dt_suggest_end_nin         => FALSE,
                                flg_status_in              => i_flg_status,
                                flg_status_nin             => FALSE,
                                flg_single_visit_in        => i_single_visit,
                                flg_single_visit_nin       => FALSE,
                                dt_last_update_in          => current_timestamp,
                                dt_last_update_nin         => FALSE,
                                id_prof_last_update_in     => i_prof.id,
                                id_prof_last_update_nin    => FALSE,
                                id_inst_last_update_in     => i_prof.institution,
                                id_inst_last_update_nin    => FALSE,
                                flg_freq_origin_module_in  => i_flg_freq_origin_module,
                                flg_freq_origin_module_nin => FALSE,
                                id_episode_in              => i_episode,
                                id_episode_nin             => FALSE,
                                rows_out                   => l_rowids);
    
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'COMBINATION_SPEC',
                                      i_rowids     => l_rowids,
                                      o_error      => o_error);
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END update_combination_spec_nc;

    /********************************************************************************************
    * Send a consult_request to history
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_combination_spec       future events identifier
    *
    * @param  o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/21
    **********************************************************************************************/
    FUNCTION send_comb_to_history
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_combination_spec IN combination_spec.id_combination_spec%TYPE,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'SEND_COMB_TO_HISTORY';
    
        l_rowids_hist      table_varchar;
        v_combination_spec combination_spec%ROWTYPE;
    
        CURSOR c_combination_spec(l_id combination_spec.id_combination_spec%TYPE) IS
            SELECT cs.id_patient,
                   cs.comb_name,
                   cs.dt_suggest_begin,
                   cs.dt_suggest_end,
                   cs.flg_status,
                   cs.flg_single_visit,
                   cs.dt_last_update,
                   cs.id_prof_last_update,
                   cs.id_inst_last_update,
                   cs.flg_freq_origin_module,
                   cs.id_episode
              FROM combination_spec cs
             WHERE cs.id_combination_spec = l_id;
    
    BEGIN
    
        g_error := 'OPEN CURSOR C_COMBINATION_SPEC';
        OPEN c_combination_spec(i_combination_spec);
        FETCH c_combination_spec
            INTO v_combination_spec.id_patient,
                 v_combination_spec.comb_name,
                 v_combination_spec.dt_suggest_begin,
                 v_combination_spec.dt_suggest_end,
                 v_combination_spec.flg_status,
                 v_combination_spec.flg_single_visit,
                 v_combination_spec.dt_last_update,
                 v_combination_spec.id_prof_last_update,
                 v_combination_spec.id_inst_last_update,
                 v_combination_spec.flg_freq_origin_module,
                 v_combination_spec.id_episode;
        g_found := c_combination_spec%NOTFOUND;
        CLOSE c_combination_spec;
    
        g_error := 'TS_COMBINATION_SPEC_HIST.INS';
    
        ts_combination_spec_hist.ins(id_combination_spec_hist_in => ts_combination_spec_hist.next_key,
                                     id_combination_spec_in      => i_combination_spec,
                                     id_patient_in               => v_combination_spec.id_patient,
                                     comb_name_in                => v_combination_spec.comb_name,
                                     dt_suggest_begin_in         => v_combination_spec.dt_suggest_begin,
                                     dt_suggest_end_in           => v_combination_spec.dt_suggest_end,
                                     flg_status_in               => v_combination_spec.flg_status,
                                     flg_single_visit_in         => v_combination_spec.flg_single_visit,
                                     dt_last_update_in           => v_combination_spec.dt_last_update,
                                     id_prof_last_update_in      => v_combination_spec.id_prof_last_update,
                                     id_inst_last_update_in      => v_combination_spec.id_inst_last_update,
                                     flg_freq_origin_module_in   => v_combination_spec.flg_freq_origin_module,
                                     id_episode_in               => v_combination_spec.id_episode,
                                     rows_out                    => l_rowids_hist);
    
        t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'COMBINATION_SPEC_HIST',
                                      i_rowids     => l_rowids_hist,
                                      o_error      => o_error);
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END send_comb_to_history;

    /********************************************************************************************
    * insert combination events
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_combination_spec   combination_specification identifier
    * @param      i_future_event_type  future event type
    * @param      i_event              event identifier  
    * @param      i_flg_status         flag status
    * @param      i_RANK               RANK 
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/21
    **********************************************************************************************/
    FUNCTION insert_combination_events_nc
    (
        i_lang              IN language.id_language%TYPE,
        i_prof              IN profissional,
        i_combination_spec  IN combination_events.id_combination_spec%TYPE,
        i_future_event_type IN combination_events.id_future_event_type%TYPE,
        i_event             IN combination_events.id_event%TYPE,
        i_flg_status        IN combination_events.flg_status%TYPE,
        i_rank              IN combination_events.rank%TYPE,
        o_error             OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'INSERT_COMBINATION_EVENTS_NC';
        l_rowids    table_varchar;
    BEGIN
        g_error := 'TS_COMBINATION_EVENTS.INS';
        ts_combination_events.ins(id_combination_events_in => ts_combination_events.next_key,
                                  id_combination_spec_in   => i_combination_spec,
                                  id_future_event_type_in  => i_future_event_type,
                                  id_event_in              => i_event,
                                  flg_status_in            => i_flg_status,
                                  rank_in                  => i_rank,
                                  rows_out                 => l_rowids);
    
        t_data_gov_mnt.process_insert(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'COMBINATION_EVENTS',
                                      i_rowids     => l_rowids,
                                      o_error      => o_error);
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END insert_combination_events_nc;

    /********************************************************************************************
    * update combination events
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_combination_event  combination event identifier
    * @param      i_combination_spec   combination_specification identifier
    * @param      i_future_event_type  future event type
    * @param      i_event              event identifier  
    * @param      i_flg_status         flag status
    * @param      i_rank               rank
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/21
    **********************************************************************************************/
    FUNCTION update_combination_events_nc
    (
        i_lang              IN language.id_language%TYPE,
        i_prof              IN profissional,
        i_combination_event IN combination_events.id_combination_events%TYPE,
        i_combination_spec  IN combination_events.id_combination_spec%TYPE,
        i_future_event_type IN combination_events.id_future_event_type%TYPE,
        i_event             IN combination_events.id_event%TYPE,
        i_flg_status        IN combination_events.flg_status%TYPE,
        i_rank              IN combination_events.rank%TYPE,
        o_error             OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := ' UPDATE_COMBINATION_EVENTS_NC';
        l_rowids    table_varchar;
    BEGIN
        g_error := 'TS_COMBINATION_EVENTS.UPD';
        ts_combination_events.upd(id_combination_events_in => i_combination_event,
                                  id_combination_spec_in   => i_combination_spec,
                                  id_combination_spec_nin  => FALSE,
                                  id_future_event_type_in  => i_future_event_type,
                                  id_future_event_type_nin => FALSE,
                                  id_event_in              => i_event,
                                  id_event_nin             => FALSE,
                                  flg_status_in            => i_flg_status,
                                  flg_status_nin           => FALSE,
                                  rank_in                  => i_rank,
                                  rank_nin                 => FALSE,
                                  rows_out                 => l_rowids);
    
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'COMBINATION_EVENTS',
                                      i_rowids     => l_rowids,
                                      o_error      => o_error);
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END update_combination_events_nc;

    /********************************************************************************************
    * Creates an Task -> Episode combination 
    *
    * @param      i_lang                   Língua registada como preferência do profissional
    * @param      i_prof                   profissional identifier
    * @param      i_patient                patient identifier   
    * @param      i_comb_origin            combination origin (OE - other exam; IE - Imaging exam)   
    * @param      i_task_suggest_date      task suggested date 
    * @param      i_epis_suggest_date      episode suggested date   
    * @param      i_task_type_from         task type id (where the dependecy comes from)
    * @param      i_task_request_from      task request id (where the dependecy comes from)
    * @param      i_task_type_to           task type id (where the dependecy goes to)
    * @param      i_task_request_to        task request id (where the dependecy goes to)
    *
    * @param      o_task_dependency_from created dependency id for i_task_type_from and i_task_request_from pair
    * @param      o_task_dependency_to   created dependency id for i_task_type_to and i_task_request_to pair
    *
    * @param      o_error                  error message
    *
    * @return  true or false on success or error
    * @author  Sérgio Santos
    * @version 2.6.0.3
    * @since  2010/07/02
    **********************************************************************************************/
    FUNCTION create_task_epis_combination
    (
        i_lang                 IN language.id_language%TYPE,
        i_prof                 IN profissional,
        i_patient              IN patient.id_patient%TYPE,
        i_task_suggest_date    IN combination_spec.dt_suggest_begin%TYPE,
        i_task_type_from       IN task_type.id_task_type%TYPE,
        i_task_request_from    IN tde_task_dependency.id_task_request%TYPE,
        i_id_event             IN consult_req.id_consult_req%TYPE,
        i_id_schedule          IN schedule.id_schedule%TYPE,
        i_id_episode           IN episode.id_episode%TYPE,
        o_id_combination_spec  OUT combination_spec.id_combination_spec%TYPE,
        o_task_dependency_from OUT tde_task_dependency.id_task_dependency%TYPE,
        o_task_dependency_to   OUT tde_task_dependency.id_task_dependency%TYPE,
        o_error                OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'CREATE_TASK_EPIS_COMBINATION';
    
        l_comb_msg          sys_message.code_message%TYPE := pk_message.get_message(i_lang      => i_lang,
                                                                                    i_code_mess => 'FUTURE_EVENTS_T100');
        l_comb_name         VARCHAR2(4000 CHAR);
        l_comb_number       NUMBER;
        l_epis_suggest_date schedule.dt_schedule_tstz%TYPE;
        l_task_suggest_date combination_spec.dt_suggest_begin%TYPE;
        l_lag               NUMBER;
        l_lag_unit_measure  tde_task_rel_dependency.id_unit_measure_lag%TYPE := g_id_day;
    
        l_combination_events combination_events.id_combination_events%TYPE;
        l_combination_spec   combination_spec.id_combination_spec%TYPE;
        l_max_task           combination_events.rank%TYPE;
    
        l_rowids table_varchar;
    BEGIN
        g_sysdate_tstz := current_timestamp;
    
        l_task_suggest_date := i_task_suggest_date;
    
        g_error := 'GET COMBO NUMBER';
        SELECT COUNT('X') + 1
          INTO l_comb_number
          FROM combination_spec cs
         WHERE cs.id_patient = i_patient;
    
        BEGIN
            SELECT s.dt_schedule_tstz
              INTO l_epis_suggest_date
              FROM epis_info ei
              JOIN schedule s
                ON ei.id_schedule = s.id_schedule
              JOIN episode e
                ON e.id_episode = ei.id_episode
             WHERE ei.id_episode = i_id_episode
               AND e.flg_ehr = pk_ehr_access.g_flg_ehr_scheduled
               AND e.flg_status <> pk_alert_constant.g_cancelled;
        EXCEPTION
            WHEN no_data_found THEN
                BEGIN
                    SELECT cr.dt_begin_event
                      INTO l_epis_suggest_date
                      FROM consult_req cr
                     WHERE cr.id_episode_to_exec = i_id_episode;
                EXCEPTION
                    WHEN no_data_found THEN
                        l_epis_suggest_date := NULL;
                END;
        END;
    
        l_comb_name := l_comb_msg || ' ' || l_comb_number;
    
        --Treat the sugested dates available
        IF l_epis_suggest_date IS NOT NULL
           AND l_task_suggest_date IS NULL
        THEN
            --
            l_task_suggest_date := g_sysdate_tstz;
        
            l_lag := trunc((((86400 * (CAST(nvl(l_epis_suggest_date, current_timestamp) AS DATE) -
                           CAST(nvl(l_task_suggest_date, current_timestamp) AS DATE))) / 60) / 60) / 24);
        ELSIF l_epis_suggest_date IS NULL
              AND l_task_suggest_date IS NOT NULL
        THEN
            --
            l_epis_suggest_date := l_task_suggest_date;
        
            l_lag := trunc((((86400 * (CAST(l_epis_suggest_date AS DATE) - CAST(l_task_suggest_date AS DATE))) / 60) / 60) / 24);
        ELSIF l_epis_suggest_date IS NOT NULL
              AND l_task_suggest_date IS NOT NULL
        THEN
            --
            IF nvl(l_task_suggest_date, current_timestamp) > nvl(l_epis_suggest_date, current_timestamp)
            THEN
                l_task_suggest_date := l_epis_suggest_date;
            
                l_lag := NULL;
            ELSE
                l_lag := trunc((((86400 * (CAST(l_epis_suggest_date AS DATE) - CAST(l_task_suggest_date AS DATE))) / 60) / 60) / 24);
            END IF;
        ELSE
            l_lag := NULL;
        END IF;
    
        -- First we check if in the combination event for the episode is in use
        -- If not, create a new one, else we update
        BEGIN
            SELECT ce.id_combination_events, ce.id_combination_spec
              INTO l_combination_events, l_combination_spec
              FROM combination_events ce
             WHERE ce.id_future_event_type = get_fet_by_task_type(i_lang, i_prof, g_task_episode)
               AND ce.id_event = i_id_event;
        EXCEPTION
            WHEN OTHERS THEN
                l_combination_events := NULL;
                l_combination_spec   := NULL;
        END;
    
        IF l_epis_suggest_date IS NOT NULL
           AND l_task_suggest_date IS NULL
        THEN
            --
            l_task_suggest_date := g_sysdate_tstz;
        
            l_lag := trunc((((86400 * (CAST(nvl(l_epis_suggest_date, current_timestamp) AS DATE) -
                           CAST(nvl(l_task_suggest_date, current_timestamp) AS DATE))) / 60) / 60) / 24);
        ELSIF l_epis_suggest_date IS NULL
              AND l_task_suggest_date IS NOT NULL
        THEN
            --
            l_epis_suggest_date := l_task_suggest_date;
        
            l_lag := trunc((((86400 * (CAST(l_epis_suggest_date AS DATE) - CAST(l_task_suggest_date AS DATE))) / 60) / 60) / 24);
        ELSIF l_epis_suggest_date IS NOT NULL
              AND l_task_suggest_date IS NOT NULL
        THEN
            --
            IF nvl(l_task_suggest_date, current_timestamp) > nvl(l_epis_suggest_date, current_timestamp)
            THEN
                l_task_suggest_date := l_epis_suggest_date;
            
                l_lag := NULL;
            ELSE
                l_lag := trunc((((86400 * (CAST(l_epis_suggest_date AS DATE) - CAST(l_task_suggest_date AS DATE))) / 60) / 60) / 24);
            END IF;
        ELSE
            l_lag := NULL;
        END IF;
    
        IF l_combination_events IS NULL
        THEN
            --insert the combination
            g_error := 'CALL INSERT_COMBINATION_SPEC_NC';
            IF NOT pk_events.insert_combination_spec_nc(i_lang                   => i_lang,
                                                        i_prof                   => i_prof,
                                                        i_patient                => i_patient,
                                                        i_comb_name              => l_comb_name,
                                                        i_dt_suggest_begin       => l_task_suggest_date,
                                                        i_dt_suggest_end         => l_epis_suggest_date,
                                                        i_flg_status             => g_flg_comb_state_active,
                                                        i_single_visit           => pk_alert_constant.g_no,
                                                        i_flg_freq_origin_module => NULL,
                                                        i_episode                => i_id_episode,
                                                        o_id_combination_spec    => o_id_combination_spec,
                                                        o_error                  => o_error)
            THEN
                RAISE g_exception;
            END IF;
        
            g_error := 'INSERT THE TASK';
            IF NOT pk_events.insert_combination_events_nc(i_lang              => i_lang,
                                                          i_prof              => i_prof,
                                                          i_combination_spec  => o_id_combination_spec,
                                                          i_future_event_type => get_fet_by_task_type(i_lang,
                                                                                                      i_prof,
                                                                                                      i_task_type_from),
                                                          i_event             => i_task_request_from,
                                                          i_flg_status        => g_flg_comb_state_active,
                                                          i_rank              => 1,
                                                          o_error             => o_error)
            THEN
                RAISE g_exception;
            END IF;
        
            g_error := 'INSERT THE EPISODE';
            IF NOT pk_events.insert_combination_events_nc(i_lang              => i_lang,
                                                          i_prof              => i_prof,
                                                          i_combination_spec  => o_id_combination_spec,
                                                          i_future_event_type => get_fet_by_task_type(i_lang,
                                                                                                      i_prof,
                                                                                                      g_task_episode),
                                                          i_event             => i_id_event,
                                                          i_flg_status        => g_flg_comb_state_active,
                                                          i_rank              => 2,
                                                          o_error             => o_error)
            THEN
                RAISE g_exception;
            END IF;
        ELSE
            --update the combination
            g_error := 'SEND TO COMBINATION HISTORY';
            IF NOT send_comb_to_history(i_lang             => i_lang,
                                        i_prof             => i_prof,
                                        i_combination_spec => l_combination_spec,
                                        o_error            => o_error)
            THEN
                RETURN FALSE;
            END IF;
        
            g_error := 'TS_COMBINATION_SPEC.UPD';
            ts_combination_spec.upd(id_combination_spec_in  => l_combination_spec,
                                    flg_status_in           => pk_alert_constant.g_active,
                                    flg_status_nin          => FALSE,
                                    dt_last_update_in       => current_timestamp,
                                    dt_last_update_nin      => FALSE,
                                    id_prof_last_update_in  => i_prof.id,
                                    id_prof_last_update_nin => FALSE,
                                    id_inst_last_update_in  => i_prof.institution,
                                    id_inst_last_update_nin => FALSE,
                                    id_episode_in           => i_id_episode,
                                    id_episode_nin          => FALSE,
                                    rows_out                => l_rowids);
        
            t_data_gov_mnt.process_update(i_lang       => i_lang,
                                          i_prof       => i_prof,
                                          i_table_name => 'COMBINATION_SPEC',
                                          i_rowids     => l_rowids,
                                          o_error      => o_error);
        
            g_error := 'GET NEW TASK EVENT VALUE';
            SELECT nvl(MAX(rank), 0) + 1
              INTO l_max_task
              FROM combination_events c
             WHERE c.id_combination_spec = l_combination_spec;
        
            g_error := 'INSERT THE TASK';
            IF NOT pk_events.insert_combination_events_nc(i_lang              => i_lang,
                                                          i_prof              => i_prof,
                                                          i_combination_spec  => l_combination_spec,
                                                          i_future_event_type => get_fet_by_task_type(i_lang,
                                                                                                      i_prof,
                                                                                                      i_task_type_from),
                                                          i_event             => i_task_request_from,
                                                          i_flg_status        => g_flg_comb_state_active,
                                                          i_rank              => l_max_task,
                                                          o_error             => o_error)
            THEN
                RAISE g_exception;
            END IF;
        END IF;
    
        g_error := 'CALL CREATE_DEPENDENCY_NETWORK';
        IF NOT pk_tde_db.create_dependency_network(i_lang                 => i_lang,
                                                   i_relationship_type    => g_relationship_type,
                                                   i_task_type_from       => g_task_episode,
                                                   i_task_request_from    => i_id_event,
                                                   i_task_type_to         => i_task_type_from,
                                                   i_task_request_to      => i_task_request_from,
                                                   i_lag_min              => l_lag,
                                                   i_lag_max              => l_lag,
                                                   i_unit_measure_lag     => l_lag_unit_measure,
                                                   o_task_dependency_from => o_task_dependency_from,
                                                   o_task_dependency_to   => o_task_dependency_to,
                                                   o_error                => o_error)
        THEN
            RAISE g_exception;
        END IF;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END create_task_epis_combination;

    /********************************************************************************************
    * insert combination 
    *
    * @param      i_lang                   Língua registada como preferência do profissional
    * @param      i_prof                   profissional identifier
    * @param      i_patient                patient identifier   
    * @param      i_comb_name              combination name   
    * @param      i_dt_suggest_begin       suggest date begin   
    * @param      i_dt_suggest_end         suggest date end   
    * @param      i_single_visit           single visit   
    * @param      i_flg_freq_origin_module flag origin module 
    * @param      i_future_event_type_list future event type list identifiers
    * @param      i_event_list             event list identifiers           
    * @param      i_dependencies           grid of existing dependencies
    * @param      i_lag_min                grid of minimum values
    * @param      i_lag_max                grid of max values
    * @param      i_lag_unit_meas      grid of max unit measures 
    *
    * @param      o_error                  mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/21
    **********************************************************************************************/
    FUNCTION insert_combination
    (
        i_lang                   IN language.id_language%TYPE,
        i_prof                   IN profissional,
        i_patient                IN combination_spec.id_patient%TYPE,
        i_comb_name              IN combination_spec.comb_name%TYPE,
        i_dt_suggest_begin       IN VARCHAR2,
        i_dt_suggest_end         IN VARCHAR2,
        i_single_visit           IN combination_spec.flg_single_visit%TYPE,
        i_flg_freq_origin_module IN combination_spec.flg_freq_origin_module%TYPE,
        i_future_event_type_list IN table_number,
        i_event_list             IN table_number,
        i_dependencies           IN table_table_number,
        i_lag_min                IN table_table_number,
        i_lag_max                IN table_table_number,
        i_lag_unit_meas          IN table_table_number,
        i_episode                IN combination_spec.id_episode%TYPE,
        o_error                  OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name           VARCHAR2(60 CHAR) := 'INSERT_COMBINATION';
        l_id_combination_spec combination_spec.id_combination_spec%TYPE;
        l_combination_events  combination_events.id_combination_events%TYPE;
        l_task_dependency     table_number := table_number();
    BEGIN
        g_error := 'CALL INSERT_COMBINATION_SPEC_NC';
        IF NOT pk_events.insert_combination_spec_nc(i_lang                   => i_lang,
                                                    i_prof                   => i_prof,
                                                    i_patient                => i_patient,
                                                    i_comb_name              => i_comb_name,
                                                    i_dt_suggest_begin       => pk_date_utils.get_string_tstz(i_lang,
                                                                                                              i_prof,
                                                                                                              i_dt_suggest_begin,
                                                                                                              NULL),
                                                    i_dt_suggest_end         => pk_date_utils.get_string_tstz(i_lang,
                                                                                                              i_prof,
                                                                                                              i_dt_suggest_end,
                                                                                                              NULL),
                                                    i_flg_status             => g_flg_comb_state_active,
                                                    i_single_visit           => i_single_visit,
                                                    i_flg_freq_origin_module => i_flg_freq_origin_module,
                                                    i_episode                => i_episode,
                                                    o_id_combination_spec    => l_id_combination_spec,
                                                    o_error                  => o_error)
        THEN
            RAISE g_exception;
        END IF;
    
        FOR i IN 1 .. i_event_list.count
        LOOP
            BEGIN
                SELECT ce.id_combination_events
                  INTO l_combination_events
                  FROM combination_events ce
                 WHERE ce.id_future_event_type = i_future_event_type_list(i)
                   AND ce.id_event = i_event_list(i);
            EXCEPTION
                WHEN OTHERS THEN
                    l_combination_events := NULL;
            END;
        
            IF l_combination_events IS NULL
            THEN
                g_error := 'CALL INSERT_COMBINATION_EVENTS_NC(' || i || ')';
                IF NOT pk_events.insert_combination_events_nc(i_lang              => i_lang,
                                                              i_prof              => i_prof,
                                                              i_combination_spec  => l_id_combination_spec,
                                                              i_future_event_type => i_future_event_type_list(i),
                                                              i_event             => i_event_list(i),
                                                              i_flg_status        => g_flg_comb_state_active,
                                                              i_rank              => i,
                                                              o_error             => o_error)
                THEN
                    RAISE g_exception;
                END IF;
            ELSE
                g_error := 'CALL UPDATE_COMBINATION_EVENTS_NC(' || i || ')';
                IF NOT pk_events.update_combination_events_nc(i_lang              => i_lang,
                                                              i_prof              => i_prof,
                                                              i_combination_event => l_combination_events,
                                                              i_combination_spec  => l_id_combination_spec,
                                                              i_future_event_type => i_future_event_type_list(i),
                                                              i_event             => i_event_list(i),
                                                              i_flg_status        => g_flg_comb_state_active,
                                                              i_rank              => i,
                                                              o_error             => o_error)
                THEN
                    RAISE g_exception;
                END IF;
            END IF;
            l_task_dependency.extend(1);
            IF NOT pk_events.insert_dependency_nc(i_lang            => i_lang,
                                                  i_prof            => i_prof,
                                                  i_task_type       => get_task_type_by_fet(i_future_event_type_list(i)),
                                                  i_task_request    => i_event_list(i),
                                                  i_task_state      => g_flg_task_state,
                                                  i_task_schedule   => pk_alert_constant.g_yes,
                                                  o_task_dependency => l_task_dependency(i),
                                                  o_error           => o_error)
            THEN
                RAISE g_exception;
            END IF;
        
        END LOOP;
    
        FOR i IN 1 .. l_task_dependency.count
        LOOP
            FOR j IN 1 .. l_task_dependency.count
            LOOP
                IF (i_dependencies(i) (j) IS NOT NULL)
                THEN
                    IF NOT pk_events.insert_dependency_rel_nc(i_lang                 => i_lang,
                                                              i_prof                 => i_prof,
                                                              i_relationship_type    => g_relationship_type,
                                                              i_task_dependency_from => l_task_dependency(i),
                                                              i_task_dependency_to   => l_task_dependency(j),
                                                              i_lag_min              => i_lag_min(i) (j),
                                                              i_lag_max              => i_lag_max(i) (j),
                                                              i_lag_unit_meas        => i_lag_unit_meas(i) (j),
                                                              o_error                => o_error)
                    THEN
                        RAISE g_exception;
                    END IF;
                END IF;
            
            END LOOP;
        END LOOP;
    
        COMMIT;
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END insert_combination;

    /********************************************************************************************
    * update combination 
    *
    * @param      i_lang                   Língua registada como preferência do profissional
    * @param      i_prof                   profissional identifier
    * @param      i_combination_spec       combination specification identifier
    * @param      i_patient                patient identifier   
    * @param      i_comb_name              combination name   
    * @param      i_dt_suggest_begin       suggest date begin   
    * @param      i_dt_suggest_end         suggest date end   
    * @param      i_single_visit           single visit   
    * @param      i_flg_freq_origin_module flag origin module
    * @param      i_future_event_type_list future event type list identifiers
    * @param      i_event_list             event list identifiers        
    *
    * @param      o_error                  mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/21
    **********************************************************************************************/
    FUNCTION update_combination
    (
        i_lang                   IN language.id_language%TYPE,
        i_prof                   IN profissional,
        i_combination_spec       IN combination_spec.id_combination_spec%TYPE,
        i_patient                IN combination_spec.id_patient%TYPE,
        i_comb_name              IN combination_spec.comb_name%TYPE,
        i_dt_suggest_begin       IN VARCHAR2,
        i_dt_suggest_end         IN VARCHAR2,
        i_single_visit           IN combination_spec.flg_single_visit%TYPE,
        i_flg_freq_origin_module IN combination_spec.flg_freq_origin_module%TYPE,
        i_future_event_type_list IN table_number,
        i_event_list             IN table_number,
        i_lag_min                IN table_table_number,
        i_lag_max                IN table_table_number,
        i_lag_unit_meas          IN table_table_number,
        i_episode                IN combination_spec.id_episode%TYPE,
        o_error                  OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name          VARCHAR2(60 CHAR) := 'UPDATE_COMBINATION';
        l_rowids             table_varchar;
        l_combination_events combination_events.id_combination_events%TYPE;
        l_task_dependency    table_number := table_number();
    BEGIN
        g_error := 'CALL UPDATE_COMBINATION_SPEC_NC';
        IF NOT pk_events.update_combination_spec_nc(i_lang                   => i_lang,
                                                    i_prof                   => i_prof,
                                                    i_combination_spec       => i_combination_spec,
                                                    i_patient                => i_patient,
                                                    i_comb_name              => i_comb_name,
                                                    i_dt_suggest_begin       => pk_date_utils.get_string_tstz(i_lang,
                                                                                                              i_prof,
                                                                                                              i_dt_suggest_begin,
                                                                                                              NULL),
                                                    i_dt_suggest_end         => pk_date_utils.get_string_tstz(i_lang,
                                                                                                              i_prof,
                                                                                                              i_dt_suggest_end,
                                                                                                              NULL),
                                                    i_flg_status             => g_flg_comb_state_active,
                                                    i_single_visit           => i_single_visit,
                                                    i_flg_freq_origin_module => i_flg_freq_origin_module,
                                                    i_episode                => i_episode,
                                                    o_error                  => o_error)
        THEN
            RAISE g_exception;
        END IF;
    
        ts_combination_events.upd(flg_status_in => g_flg_comb_state_cancel,
                                  rank_in       => NULL,
                                  rank_nin      => FALSE,
                                  where_in      => 'id_combination_spec = ' || i_combination_spec,
                                  rows_out      => l_rowids);
    
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'COMBINATION_EVENTS',
                                      i_rowids     => l_rowids,
                                      o_error      => o_error);
    
        IF NOT destroy_dependencies_nc(i_lang             => i_lang,
                                       i_prof             => i_prof,
                                       i_combination_spec => i_combination_spec,
                                       o_error            => o_error)
        THEN
            RAISE g_exception;
        END IF;
    
        FOR i IN 1 .. i_event_list.count
        LOOP
            BEGIN
                SELECT ce.id_combination_events
                  INTO l_combination_events
                  FROM combination_events ce
                 WHERE ce.id_future_event_type = i_future_event_type_list(i)
                   AND ce.id_event = i_event_list(i);
            EXCEPTION
                WHEN OTHERS THEN
                    l_combination_events := NULL;
            END;
        
            IF l_combination_events IS NULL
            THEN
                g_error := 'CALL INSERT_COMBINATION_EVENTS_NC(' || i || ')';
                IF NOT pk_events.insert_combination_events_nc(i_lang              => i_lang,
                                                              i_prof              => i_prof,
                                                              i_combination_spec  => i_combination_spec,
                                                              i_future_event_type => i_future_event_type_list(i),
                                                              i_event             => i_event_list(i),
                                                              i_flg_status        => g_flg_comb_state_active,
                                                              i_rank              => i,
                                                              o_error             => o_error)
                THEN
                    RAISE g_exception;
                END IF;
            ELSE
                g_error := 'CALL UPDATE_COMBINATION_EVENTS_NC(' || i || ')';
                IF NOT pk_events.update_combination_events_nc(i_lang              => i_lang,
                                                              i_prof              => i_prof,
                                                              i_combination_event => l_combination_events,
                                                              i_combination_spec  => i_combination_spec,
                                                              i_future_event_type => i_future_event_type_list(i),
                                                              i_event             => i_event_list(i),
                                                              i_flg_status        => g_flg_comb_state_active,
                                                              i_rank              => i,
                                                              o_error             => o_error)
                THEN
                    RAISE g_exception;
                END IF;
            END IF;
        
            l_task_dependency.extend(1);
            IF NOT pk_events.insert_dependency_nc(i_lang            => i_lang,
                                                  i_prof            => i_prof,
                                                  i_task_type       => get_task_type_by_fet(i_future_event_type_list(i)),
                                                  i_task_request    => i_event_list(i),
                                                  i_task_state      => g_flg_task_state,
                                                  i_task_schedule   => pk_alert_constant.g_yes,
                                                  o_task_dependency => l_task_dependency(i),
                                                  o_error           => o_error)
            THEN
                RAISE g_exception;
            END IF;
        
        END LOOP;
    
        FOR i IN 1 .. l_task_dependency.count
        LOOP
            FOR j IN 1 .. l_task_dependency.count
            LOOP
                IF (i_lag_min(i) (j) IS NOT NULL)
                THEN
                    IF NOT pk_events.insert_dependency_rel_nc(i_lang                 => i_lang,
                                                              i_prof                 => i_prof,
                                                              i_relationship_type    => g_relationship_type,
                                                              i_task_dependency_from => l_task_dependency(i),
                                                              i_task_dependency_to   => l_task_dependency(j),
                                                              i_lag_min              => i_lag_min(i) (j),
                                                              i_lag_max              => i_lag_max(i) (j),
                                                              i_lag_unit_meas        => i_lag_unit_meas(i) (j),
                                                              o_error                => o_error)
                    THEN
                        RAISE g_exception;
                    END IF;
                END IF;
            
            END LOOP;
        END LOOP;
    
        COMMIT;
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END update_combination;

    /********************************************************************************************
    * ungroup combination 
    *
    * @param      i_lang                   Língua registada como preferência do profissional
    * @param      i_prof                   profissional identifier
    * @param      i_combination_spec       combination specification identifier    
    *
    * @param      o_error                  mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/28
    **********************************************************************************************/
    FUNCTION ungroup_combination
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_combination_spec IN combination_spec.id_combination_spec%TYPE,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'UNGROUP_COMBINATION';
        l_rowids    table_varchar;
    
    BEGIN
        g_error := 'SEND TO COMBINATION HISTORY';
        IF NOT send_comb_to_history(i_lang             => i_lang,
                                    i_prof             => i_prof,
                                    i_combination_spec => i_combination_spec,
                                    o_error            => o_error)
        THEN
            RAISE g_exception;
        END IF;
    
        g_error := 'TS_COMBINATION_SPEC.UPD';
        ts_combination_spec.upd(id_combination_spec_in => i_combination_spec,
                                flg_status_in          => g_flg_comb_state_cancel,
                                rows_out               => l_rowids);
    
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'COMBINATION_SPEC',
                                      i_rowids     => l_rowids,
                                      o_error      => o_error);
    
        ts_combination_events.upd(flg_status_in => g_flg_comb_state_cancel,
                                  rank_in       => NULL,
                                  rank_nin      => FALSE,
                                  where_in      => 'id_combination_spec = ' || i_combination_spec,
                                  rows_out      => l_rowids);
    
        t_data_gov_mnt.process_update(i_lang       => i_lang,
                                      i_prof       => i_prof,
                                      i_table_name => 'COMBINATION_EVENTS',
                                      i_rowids     => l_rowids,
                                      o_error      => o_error);
    
        IF NOT destroy_dependencies_nc(i_lang             => i_lang,
                                       i_prof             => i_prof,
                                       i_combination_spec => i_combination_spec,
                                       o_error            => o_error)
        THEN
            RAISE g_exception;
        END IF;
    
        COMMIT;
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END ungroup_combination;
    /********************************************************************************************
    * result patient future events
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_patient            patient identifier   
    * @param      i_combination_spec   combination specification identifier
    * @param      o_events             events
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/22
    **********************************************************************************************/
    FUNCTION get_combination_events
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_patient          IN consult_req.id_patient%TYPE,
        i_combination_spec IN combination_spec.id_combination_spec%TYPE,
        o_events           OUT pk_types.cursor_type,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_COMBINATION_EVENTS';
        l_date_sep  sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'FUTURE_EVENTS_T073');
    BEGIN
    
        g_error := 'CALL GET_COMBINATION_EVENTS';
        OPEN o_events FOR
            SELECT /*+opt_estimate (table t rows=0.000001)*/
             t.id_event,
             t.id_episode,
             t.id_schedule,
             t.event_type,
             t.event_type_icon,
             t.event_type_name_title,
             t.event_type_clinical_service,
             t.request_date,
             nvl(pk_events.get_dependencies_str(i_lang, i_prof, ce.id_combination_events), t.desc_dependency) request_status_desc, --t.request_status_desc,
             t.requested_by,
             t.professional,
             t.event_date,
             t.status,
             t.flg_status,
             t.location,
             t.status_icon_c status_icon,
             t.order_date,
             t.id_future_event_type,
             t.flg_can_approve,
             t.flg_can_reject,
             t.flg_can_cancel,
             t.flg_can_schedule,
             t.time_state,
             t.dep_clin_serv,
             t.sch_event,
             t.icon_name,
             t.registered,
             t.approval_prof,
             t.request_reason,
             t.id_combination_spec,
             ce.id_combination_events,
             cs.comb_name,
             nvl2(cs.dt_suggest_end,
                  pk_date_utils.dt_chr(i_lang,
                                       pk_date_utils.trunc_insttimezone(profissional(NULL, cs.id_inst_last_update, NULL),
                                                                        cs.dt_suggest_begin),
                                       i_prof) || g_space || l_date_sep || g_space ||
                  pk_date_utils.dt_chr(i_lang,
                                       pk_date_utils.trunc_insttimezone(profissional(NULL, cs.id_inst_last_update, NULL),
                                                                        cs.dt_suggest_end),
                                       i_prof),
                  pk_date_utils.dt_chr(i_lang,
                                       pk_date_utils.trunc_insttimezone(profissional(NULL, cs.id_inst_last_update, NULL),
                                                                        cs.dt_suggest_begin),
                                       i_prof)) dt_suggest,
             
             pk_date_utils.date_send_tsz(i_lang, nvl(cs.dt_suggest_end, cs.dt_suggest_begin), i_prof) dt_suggest_str,
             cs.flg_single_visit,
             cs.flg_freq_origin_module,
             ce.rank dependency_nr,
             nvl(pk_events.get_dependencies_str(i_lang, i_prof, ce.id_combination_events), t.desc_dependency) desc_dependency1,
             t.id_exam,
             'ExtendIcon' dependency_icon,
             get_dependencies_info(i_lang, ce.id_combination_events, 1) list_id,
             get_dependencies_info(i_lang, ce.id_combination_events, 2) list_min_lag,
             get_dependencies_info(i_lang, ce.id_combination_events, 3) list_max_lag,
             get_dependencies_info(i_lang, ce.id_combination_events, 4) list_unit_desc,
             get_dependencies_info(i_lang, ce.id_combination_events, 5) list_unit_tag
            
              FROM (SELECT id_event,
                           id_episode,
                           id_schedule,
                           event_type,
                           event_type_icon,
                           event_type_name_title,
                           event_type_clinical_service,
                           request_date,
                           request_status_desc,
                           requested_by,
                           professional,
                           event_date,
                           status,
                           desc_dependency,
                           flg_status,
                           location,
                           status_icon_c,
                           order_date,
                           id_future_event_type,
                           flg_can_approve,
                           flg_can_reject,
                           flg_can_cancel,
                           flg_can_schedule,
                           time_state,
                           dep_clin_serv,
                           sch_event,
                           icon_name,
                           registered,
                           approval_prof,
                           request_reason,
                           pk_events.get_id_combination_spec(id_future_event_type, id_event) id_combination_spec,
                           id_exam
                      FROM (SELECT *
                              FROM TABLE(get_patient_future_events_pl(i_lang, i_prof, i_patient)))) t
              JOIN combination_spec cs
                ON cs.id_combination_spec = t.id_combination_spec
              JOIN combination_events ce
                ON ce.id_combination_spec = cs.id_combination_spec
             WHERE t.id_combination_spec = i_combination_spec
               AND ce.flg_status = g_flg_comb_state_active
               AND ce.id_future_event_type = t.id_future_event_type
               AND ce.id_event = t.id_event
             ORDER BY ce.rank;
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_events);
            RETURN FALSE;
    END get_combination_events;

    /********************************************************************************************
    * get id_combination_spec
    *
    * @param      i_future_event_type  future event type identifier   
    * @param      i_event              events identifier
    *
    * @return  combination specification identifier
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/22
    **********************************************************************************************/
    FUNCTION get_id_combination_spec
    (
        i_future_event_type IN combination_events.id_future_event_type%TYPE,
        i_event             IN combination_events.id_event%TYPE
    ) RETURN NUMBER IS
        l_id_combination_spec combination_events.id_combination_spec%TYPE;
    BEGIN
        IF i_future_event_type IS NULL
           OR i_event IS NULL
        THEN
            l_id_combination_spec := NULL;
        ELSE
            g_error := 'CALL GET_ID_COMBINATION_SPEC';
            BEGIN
                SELECT ce.id_combination_spec
                  INTO l_id_combination_spec
                  FROM combination_events ce
                 WHERE ce.id_future_event_type = i_future_event_type
                   AND ce.id_event = i_event
                   AND ce.flg_status = g_flg_comb_state_active;
            EXCEPTION
                WHEN OTHERS THEN
                    l_id_combination_spec := NULL;
            END;
        END IF;
        RETURN l_id_combination_spec;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_id_combination_spec;

    /********************************************************************************************
    * get id_combination_events
    *
    * @param      i_future_event_type  future event type identifier   
    * @param      i_event              events identifier
    *
    * @return  combination specification identifier
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/22
    **********************************************************************************************/
    FUNCTION get_id_combination_events
    (
        i_future_event_type IN combination_events.id_future_event_type%TYPE,
        i_event             IN combination_events.id_event%TYPE
    ) RETURN NUMBER IS
        l_id_combination_events combination_events.id_combination_events%TYPE;
    BEGIN
        IF i_future_event_type IS NULL
           OR i_event IS NULL
        THEN
            l_id_combination_events := NULL;
        ELSE
            g_error := 'CALL GET_ID_COMBINATION_EVENTS';
            BEGIN
                SELECT ce.id_combination_events
                  INTO l_id_combination_events
                  FROM combination_events ce
                 WHERE ce.id_future_event_type = i_future_event_type
                   AND ce.id_event = i_event
                   AND ce.flg_status = g_flg_comb_state_active;
            EXCEPTION
                WHEN OTHERS THEN
                    l_id_combination_events := NULL;
            END;
        END IF;
        RETURN l_id_combination_events;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_id_combination_events;

    /********************************************************************************************
    * get combination_events_rank
    *
    * @param      i_future_event_type  future event type identifier   
    * @param      i_event              events identifier
    *
    * @return  combination specification identifier
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/22
    **********************************************************************************************/
    FUNCTION get_combination_events_rank
    (
        i_future_event_type IN combination_events.id_future_event_type%TYPE,
        i_event             IN combination_events.id_event%TYPE
    ) RETURN NUMBER IS
        l_combination_events_rank combination_events.rank%TYPE;
    BEGIN
        IF i_future_event_type IS NULL
           OR i_event IS NULL
        THEN
            l_combination_events_rank := NULL;
        ELSE
            g_error := 'CALL GET_COMBINATION_EVENTS_RANK';
            BEGIN
                SELECT ce.rank
                  INTO l_combination_events_rank
                  FROM combination_events ce
                 WHERE ce.id_future_event_type = i_future_event_type
                   AND ce.id_event = i_event
                   AND ce.flg_status = g_flg_comb_state_active;
            EXCEPTION
                WHEN OTHERS THEN
                    l_combination_events_rank := NULL;
            END;
        END IF;
        RETURN l_combination_events_rank;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_combination_events_rank;
    /********************************************************************************************
    * check combination
    *
    * @param      i_lang                   Língua registada como preferência do profissional
    * @param      i_prof                   profissional identifier
    * @param      i_type_list              list of types of events
    * @param      i_events_list            list of id's of events
    * @param      i_grid                   grid of existing dependencies
    * @param      o_dependencies           return cursor
    *
    * @param      o_error                  mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/22
    **********************************************************************************************/
    FUNCTION check_combination
    (
        i_lang       IN language.id_language%TYPE,
        i_prof       IN profissional,
        i_type_list  IN table_number,
        i_event_list IN table_number,
        i_grid       IN table_table_number,
        o_flg_can_ok OUT VARCHAR2,
        o_error      OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name            VARCHAR2(60 CHAR) := 'CHECK_COMBINATION';
        k                      NUMBER(8) := 1;
        l_task_dependency_from table_number := table_number();
        l_task_dependency_to   table_number := table_number();
        l_relationship_type    table_number := table_number();
        l_dependency           table_number := table_number();
        l_combinations         table_table_number := table_table_number();
    
    BEGIN
    
        g_error := 'BUILD INPUT VARIABLES';
        FOR i IN 1 .. i_grid.count
        LOOP
            l_dependency.extend(1);
            l_dependency(i) := i;
            FOR j IN 1 .. i_grid.count
            LOOP
                IF (i_grid(i) (j) IS NOT NULL)
                THEN
                    l_task_dependency_from.extend(1);
                    l_task_dependency_to.extend(1);
                    l_relationship_type.extend(1);
                    l_task_dependency_from(k) := i;
                    l_task_dependency_to(k) := j;
                    l_relationship_type(k) := g_relationship_type;
                    k := k + 1;
                END IF;
            END LOOP;
        END LOOP;
    
        IF NOT pk_tde_db.get_network_combinations(i_lang       => i_lang,
                                                  i_dependency => l_dependency,
                                                  --i_relationship_type    => l_relationship_type,
                                                  i_task_dependency_from => l_task_dependency_from,
                                                  i_task_dependency_to   => l_task_dependency_to,
                                                  o_flg_single_network   => o_flg_can_ok,
                                                  o_combinations         => l_combinations,
                                                  o_error                => o_error)
        THEN
            RETURN FALSE;
        END IF;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            o_flg_can_ok := NULL;
            RETURN FALSE;
    END check_combination;

    /********************************************************************************************
    * count combination events
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_combination_spec  combination specification identifier 
    * @param      i_type              string or number
    *
    * @return  combination specification identifier
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/23
    **********************************************************************************************/
    FUNCTION count_combination_events
    (
        i_lang             IN language.id_language%TYPE,
        i_combination_spec IN combination_events.id_combination_spec%TYPE,
        i_type             IN VARCHAR2
    ) RETURN VARCHAR2 IS
        l_return VARCHAR2(100 CHAR);
        l_count  NUMBER(12);
    BEGIN
        g_error := 'CALL COUNT_COMBINATION_EVENTS';
        BEGIN
            SELECT COUNT(1)
              INTO l_count
              FROM combination_events ce
             WHERE ce.id_combination_spec = i_combination_spec
               AND ce.flg_status = g_flg_comb_state_active;
        EXCEPTION
            WHEN OTHERS THEN
                l_count := NULL;
        END;
    
        CASE
            WHEN l_count = 1
                 AND i_type = 'S' THEN
                l_return := '(' || l_count || g_space || pk_message.get_message(i_lang, 'FUTURE_EVENTS_T037') || ')';
            WHEN l_count > 1
                 AND i_type = 'S' THEN
                l_return := '(' || l_count || g_space || pk_message.get_message(i_lang, 'FUTURE_EVENTS_T038') || ')';
            WHEN i_type = 'N' THEN
                l_return := l_count;
            ELSE
                l_return := NULL;
        END CASE;
    
        RETURN l_return;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END count_combination_events;

    /********************************************************************************************
    * insert dependency 
    *
    * @param      i_lang                   Língua registada como preferência do profissional
    * @param      i_prof                   profissional identifier
    * @param      i_task_type              task_type identifier
    * @param      i_task_request           task request identifier
    * @param      i_task_state             task state
    * @param      o_task_dependency        task dependency identifier
    *
    * @param      o_error                  mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/29
    **********************************************************************************************/
    FUNCTION insert_dependency_nc
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_task_type       IN tde_task_dependency.id_task_type%TYPE,
        i_task_request    IN tde_task_dependency.id_task_request%TYPE,
        i_task_state      IN tde_task_dependency.flg_task_state%TYPE,
        i_task_schedule   IN tde_task_dependency.flg_schedule%TYPE,
        o_task_dependency OUT tde_task_dependency.id_task_dependency%TYPE,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'INSERT_DEPENDENCY_NC';
    BEGIN
        g_error := 'CALL PK_TDE_DB.CREATE_DEPENDENCY';
        IF NOT pk_tde_db.create_dependency(i_lang            => i_lang,
                                           i_task_type       => i_task_type,
                                           i_task_request    => i_task_request,
                                           i_task_state      => i_task_state,
                                           i_task_schedule   => i_task_schedule,
                                           o_task_dependency => o_task_dependency,
                                           o_error           => o_error)
        THEN
            RETURN FALSE;
        END IF;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END insert_dependency_nc;

    /********************************************************************************************
    * insert dependency  relationshi
    *
    * @param      i_lang                   Língua registada como preferência do profissional
    * @param      i_prof                   profissional identifier
    * @param      i_relationship_type   
    * @param      i_task_dependency_from
    * @param      i_task_dependency_to  
    * @param      i_lag_min                
    * @param      i_lag_max             
    * @param      i_lag_unit_meas   
    *
    * @param      o_error                  mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/29
    **********************************************************************************************/
    FUNCTION insert_dependency_rel_nc
    (
        i_lang                 IN language.id_language%TYPE,
        i_prof                 IN profissional,
        i_relationship_type    IN tde_relationship_type.id_relationship_type%TYPE,
        i_task_dependency_from IN tde_task_dependency.id_task_dependency%TYPE,
        i_task_dependency_to   IN tde_task_dependency.id_task_dependency%TYPE,
        i_lag_min              IN tde_task_rel_dependency.lag_min%TYPE,
        i_lag_max              IN tde_task_rel_dependency.lag_max%TYPE,
        i_lag_unit_meas        IN tde_task_rel_dependency.id_unit_measure_lag%TYPE,
        o_error                OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'INSERT_DEPENDENCY_REL_NC';
    BEGIN
        g_error := 'CALL PK_TDE_DB.CREATE_DEPENDENCY_RELATIONSHIP';
        IF NOT pk_tde_db.create_dependency_relationship(i_lang                 => i_lang,
                                                        i_relationship_type    => i_relationship_type,
                                                        i_task_dependency_from => i_task_dependency_from,
                                                        i_task_dependency_to   => i_task_dependency_to,
                                                        i_lag_min              => i_lag_min,
                                                        i_lag_max              => i_lag_max,
                                                        i_unit_measure_lag     => i_lag_unit_meas,
                                                        o_error                => o_error)
        THEN
            RETURN FALSE;
        END IF;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END insert_dependency_rel_nc;

    /********************************************************************************************
    * DESTROY DEPENDENCIES 
    *
    * @param      i_lang                   Língua registada como preferência do profissional
    * @param      i_prof                   profissional identifier
    * @param      i_combination_spec       combination specification identifier    
    *
    * @param      o_error                  mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/06/28
    **********************************************************************************************/
    FUNCTION destroy_dependencies_nc
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_combination_spec IN combination_spec.id_combination_spec%TYPE,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name       VARCHAR2(60 CHAR) := 'DESTROY_DEPENDENCIES_NC';
        l_task_dependency table_number;
    BEGIN
    
        SELECT ttd.id_task_dependency
          BULK COLLECT
          INTO l_task_dependency
          FROM combination_events ce
          JOIN future_event_type fet
            ON (fet.id_future_event_type = ce.id_future_event_type)
          JOIN tde_task_dependency ttd
            ON (ttd.id_task_type = fet.id_task_type AND ttd.id_task_request = ce.id_event)
         WHERE ce.id_combination_spec = i_combination_spec;
    
        IF l_task_dependency.count > 0
        THEN
            g_error := 'CALL PK_TDE_DB.DEL_DEPENDENCY_RELATIONSHIP';
            IF NOT pk_tde_db.delete_dependency_network(i_lang              => i_lang,
                                                       i_relationship_type => g_relationship_type,
                                                       i_task_dependency   => l_task_dependency,
                                                       o_error             => o_error)
            THEN
                RETURN FALSE;
            END IF;
        END IF;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END destroy_dependencies_nc;

    /********************************************************************************************
    * get dependencies list
    *
    * @param      i_lang                   Língua registada como preferência do profissional
    * @param      i_prof                   profissional identifier
    * @param      i_type_list              list of types of events
    * @param      i_events_list            list of id's of events
    * @param      i_grid                   grid of existing dependencies
    * @param      i_position               position of select event to test
    * @param      o_dependencies           return cursor
    *
    * @param      o_error                  mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/07/01
    **********************************************************************************************/
    FUNCTION get_dependencies
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_type_list    IN table_number,
        i_event_list   IN table_number,
        i_grid         IN table_table_number,
        i_position     IN NUMBER,
        o_dependencies OUT pk_types.cursor_type,
        o_error        OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name            VARCHAR2(60 CHAR) := 'GET_DEPENDENCIES';
        k                      NUMBER(8) := 1;
        l_task_dependency_from table_number := table_number();
        l_task_dependency_to   table_number := table_number();
        l_task_type_from       table_number := table_number();
        l_task_type_to         table_number := table_number();
        l_relationship_type    table_number := table_number();
        l_task_schedule_from   table_varchar := table_varchar();
        l_task_schedule_to     table_varchar := table_varchar();
        l_counter              NUMBER(5);
        str_msg                table_varchar := table_varchar();
        str_typ                table_varchar := table_varchar();
        str_ids                table_varchar := table_varchar();
    BEGIN
        g_error := 'BUILD INPUT VARIABLES';
        FOR i IN 1 .. i_grid.count
        LOOP
            FOR j IN 1 .. i_grid.count
            LOOP
                IF (i_grid(i) (j) IS NOT NULL)
                THEN
                    l_task_dependency_from.extend(1);
                    l_task_dependency_to.extend(1);
                    l_task_type_from.extend(1);
                    l_task_type_to.extend(1);
                    l_relationship_type.extend(1);
                    l_task_schedule_from.extend(1);
                    l_task_schedule_to.extend(1);
                    l_task_dependency_from(k) := i;
                    l_task_dependency_to(k) := j;
                    l_task_type_from(k) := get_task_type_by_fet(i_type_list(i));
                    l_task_type_to(k) := get_task_type_by_fet(i_type_list(j));
                    l_relationship_type(k) := g_relationship_type;
                    l_task_schedule_from(k) := pk_alert_constant.g_yes;
                    l_task_schedule_to(k) := pk_alert_constant.g_yes;
                    k := k + 1;
                END IF;
            END LOOP;
        END LOOP;
    
        g_error := 'BUILD OPTION SCREEN';
        FOR i IN 1 .. i_grid.count
        LOOP
            l_counter := str_msg.count;
            str_msg.extend(1);
            str_typ.extend(1);
            str_ids.extend(1);
            str_msg(l_counter + 1) := pk_tde_db.validate_dependency_option(i_lang                   => i_lang,
                                                                           i_relationship_type      => l_relationship_type,
                                                                           i_task_dependency_from   => l_task_dependency_from,
                                                                           i_task_dependency_to     => l_task_dependency_to,
                                                                           i_task_type_from         => l_task_type_from,
                                                                           i_task_type_to           => l_task_type_to,
                                                                           i_task_schedule_from     => l_task_schedule_from,
                                                                           i_task_schedule_to       => l_task_schedule_to,
                                                                           i_chk_rel_type           => g_relationship_type,
                                                                           i_chk_task_depend_from   => i_position,
                                                                           i_chk_task_depend_to     => i,
                                                                           i_chk_task_type_from     => get_task_type_by_fet(i_type_list(i_position)),
                                                                           i_chk_task_type_to       => get_task_type_by_fet(i_type_list(i)),
                                                                           i_chk_task_schedule_from => pk_alert_constant.g_yes,
                                                                           i_chk_task_schedule_to   => pk_alert_constant.g_yes);
            str_typ(l_counter + 1) := i_type_list(i);
            str_ids(l_counter + 1) := i_event_list(i);
        END LOOP;
    
        g_error := 'GET OPTION SCREEN';
        OPEN o_dependencies FOR
            SELECT str_msg flg_dependency, str_typ id_type, str_ids id_event
              FROM (SELECT column_value str_msg, rownum str_msg_row
                      FROM TABLE(str_msg) a),
                   (SELECT column_value str_typ, rownum str_typ_row
                      FROM TABLE(str_typ) b),
                   (SELECT column_value str_ids, rownum str_ids_row
                      FROM TABLE(str_ids) c)
             WHERE str_msg_row = str_typ_row
               AND str_typ_row = str_ids_row
               AND str_msg_row = str_ids_row
             ORDER BY str_msg_row;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
        
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_dependencies);
            RETURN FALSE;
    END get_dependencies;
    /********************************************************************************************
    * get dependencies list
    *
    * @param      i_lang                   Língua registada como preferência do profissional
    * @param      i_prof                   profissional identifier
    * @param      i_dt_suggest_begin       suggest date begin   
    * @param      i_dt_suggest_end         suggest date end   
    * @param      i_type_list              future event type list identifiers
    * @param      i_event_list             event list identifiers   
    * @param      i_grid                   grid of existing dependencies
    * @param      i_lag_min                grid of minimum values
    * @param      i_lag_max                grid of max values
    * @param      i_lag_unit_meas      grid of unit measures
    * @param      o_flg_conflict           conflict flag to indicate incompatible dependencies network
    * @param      o_msg_title              pop up message title for warnings
    * @param      o_msg_body               pop up message body for warnings    
    * @param      o_msg_text               pop up message text for warnings
    * @param      o_template               template pop up
    * @param      o_code                   error code
    * @param      o_dt_suggest_end         suggested end date
    *
    * @param      o_error                  mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/07/01
    **********************************************************************************************/
    FUNCTION check_dependencies
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_type_list        IN table_number,
        i_event_list       IN table_number,
        i_grid             IN table_table_number,
        i_lag_min          IN table_table_number,
        i_lag_max          IN table_table_number,
        i_lag_unit_meas    IN table_table_number,
        i_dt_suggest_begin IN VARCHAR2,
        i_dt_suggest_end   IN VARCHAR2,
        i_flg_single_visit IN combination_spec.flg_single_visit%TYPE,
        o_flg_conflict     OUT VARCHAR2,
        o_msg_title        OUT VARCHAR2,
        o_msg_body         OUT VARCHAR2,
        o_msg_text         OUT VARCHAR2,
        o_template         OUT VARCHAR2,
        o_code             OUT VARCHAR2,
        o_dt_suggest_end   OUT VARCHAR2,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name            VARCHAR2(60 CHAR) := 'CHECK_DEPENDENCIES';
        l_relationship_type    table_number := table_number();
        l_task_dependency_from table_number := table_number();
        l_task_dependency_to   table_number := table_number();
        l_task_type_from       table_number := table_number();
        l_task_type_to         table_number := table_number();
        l_task_schedule_from   table_varchar := table_varchar();
        l_task_schedule_to     table_varchar := table_varchar();
        l_lag_min              table_number := table_number();
        l_lag_max              table_number := table_number();
        l_lag_unit_meas        table_number := table_number();
        k                      NUMBER(8) := 1;
        l_flg_conflict_tde     VARCHAR2(1 CHAR);
        l_msg_title_tde        sys_message.desc_message%TYPE;
        l_msg_body_tde         sys_message.desc_message%TYPE;
    
        l_flg_conflict_fe VARCHAR2(1 CHAR);
        l_msg_title_fe    sys_message.desc_message%TYPE;
        l_msg_body_fe     sys_message.desc_message%TYPE;
        l_msg_text_fe     sys_message.desc_message%TYPE;
        l_template_fe     sys_message.desc_message%TYPE;
        l_code_fe         sys_message.desc_message%TYPE;
    
    BEGIN
        g_error := 'BUILD INPUT VARIABLES';
        FOR i IN 1 .. i_grid.count
        LOOP
            FOR j IN 1 .. i_grid.count
            LOOP
                IF (i_grid(i) (j) IS NOT NULL)
                THEN
                    l_task_dependency_from.extend(1);
                    l_task_dependency_to.extend(1);
                    l_task_type_from.extend(1);
                    l_task_type_to.extend(1);
                    l_relationship_type.extend(1);
                    l_task_schedule_from.extend(1);
                    l_task_schedule_to.extend(1);
                    l_lag_min.extend(1);
                    l_lag_max.extend(1);
                    l_lag_unit_meas.extend(1);
                    l_task_dependency_from(k) := i;
                    l_task_dependency_to(k) := j;
                    l_task_type_from(k) := get_task_type_by_fet(i_type_list(i));
                    l_task_type_to(k) := get_task_type_by_fet(i_type_list(j));
                    l_relationship_type(k) := g_relationship_type;
                    l_task_schedule_from(k) := pk_alert_constant.g_yes;
                    l_task_schedule_to(k) := pk_alert_constant.g_yes;
                    l_lag_min(k) := i_lag_min(i) (j);
                    l_lag_max(k) := i_lag_max(i) (j);
                    l_lag_unit_meas(k) := i_lag_unit_meas(i) (j);
                    k := k + 1;
                END IF;
            END LOOP;
        END LOOP;
    
        IF l_task_type_from.count > 0
        THEN
            IF NOT pk_tde_db.validate_dependencies(i_lang                 => i_lang,
                                                   i_relationship_type    => l_relationship_type,
                                                   i_task_dependency_from => l_task_dependency_from,
                                                   i_task_dependency_to   => l_task_dependency_to,
                                                   i_task_type_from       => l_task_type_from,
                                                   i_task_type_to         => l_task_type_to,
                                                   i_task_schedule_from   => l_task_schedule_from,
                                                   i_task_schedule_to     => l_task_schedule_to,
                                                   i_lag_min              => l_lag_min,
                                                   i_lag_max              => l_lag_max,
                                                   i_unit_measure_lag     => l_lag_unit_meas,
                                                   o_flg_conflict         => l_flg_conflict_tde,
                                                   o_msg_title            => l_msg_title_tde,
                                                   o_msg_body             => l_msg_body_tde,
                                                   o_error                => o_error)
            THEN
                RETURN FALSE;
            END IF;
        END IF;
    
        IF NOT check_total_lag(i_lang             => i_lang,
                               i_prof             => i_prof,
                               i_dt_suggest_begin => substr(i_dt_suggest_begin, 1, 8),
                               i_dt_suggest_end   => substr(i_dt_suggest_end, 1, 8),
                               i_flg_single_visit => nvl(i_flg_single_visit, pk_alert_constant.g_no),
                               i_grid             => i_grid,
                               i_lag_min          => i_lag_min,
                               i_lag_max          => i_lag_max,
                               i_lag_unit_meas    => i_lag_unit_meas,
                               o_flg_conflict     => l_flg_conflict_fe,
                               o_msg_title        => l_msg_title_fe,
                               o_msg_body         => l_msg_body_fe,
                               o_msg_text         => l_msg_text_fe,
                               o_template         => l_template_fe,
                               o_code             => l_code_fe,
                               o_dt_suggest_end   => o_dt_suggest_end,
                               o_error            => o_error)
        THEN
            RETURN FALSE;
        END IF;
    
        IF o_dt_suggest_end IS NOT NULL
        THEN
            o_dt_suggest_end := o_dt_suggest_end || '000000';
        END IF;
    
        IF l_flg_conflict_tde = pk_alert_constant.g_yes
        THEN
            o_flg_conflict := l_flg_conflict_tde;
            o_msg_title    := l_msg_title_tde;
            o_msg_body     := l_msg_body_tde;
        ELSE
            o_flg_conflict := l_flg_conflict_fe;
            o_msg_title    := l_msg_title_fe;
            o_msg_body     := l_msg_body_fe;
            o_msg_text     := l_msg_text_fe;
            o_template     := l_template_fe;
            o_code         := l_code_fe;
        END IF;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            RETURN FALSE;
    END check_dependencies;

    /********************************************************************************************
    * check_total_lag
    *
    * @param      i_lang                   Língua registada como preferência do profissional
    * @param      i_prof                   profissional identifier
    * @param      i_dt_suggest_begin       suggest date begin   
    * @param      i_dt_suggest_end         suggest date end   
    * @param      i_grid                   grid of existing dependencies
    * @param      i_lag_min                grid of minimum values
    * @param      i_lag_max                grid of max values
    * @param      i_lag_unit_meas      grid of unit measures
    * @param      o_flg_conflict           conflict flag to indicate incompatible dependencies network
    * @param      o_msg_title              pop up message title for warnings
    * @param      o_msg_body               pop up message body for warnings  
    * @param      o_msg_text               pop up message text for warnings
    * @param      o_template               template pop up
    * @param      o_code                   error code
    * @param      o_dt_suggest_end         suggested end date
    *
    * @param      o_error                  mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/07/01
    **********************************************************************************************/
    FUNCTION check_total_lag
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_dt_suggest_begin IN VARCHAR2,
        i_dt_suggest_end   IN VARCHAR2,
        i_flg_single_visit IN combination_spec.flg_single_visit%TYPE,
        i_grid             IN table_table_number,
        i_lag_min          IN table_table_number,
        i_lag_max          IN table_table_number,
        i_lag_unit_meas    IN table_table_number,
        o_flg_conflict     OUT VARCHAR2,
        o_msg_title        OUT VARCHAR2,
        o_msg_body         OUT VARCHAR2,
        o_msg_text         OUT VARCHAR2,
        o_template         OUT VARCHAR2,
        o_code             OUT VARCHAR2,
        o_dt_suggest_end   OUT VARCHAR2,
        o_error            OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name         VARCHAR2(60 CHAR) := 'CHECK_TOTAL_LAG';
        l_msg_title         sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                    i_prof,
                                                                                    'FUTURE_EVENTS_T107');
        l_msg_body1         sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                    i_prof,
                                                                                    'FUTURE_EVENTS_T101');
        l_msg_text1         sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                    i_prof,
                                                                                    'FUTURE_EVENTS_T102');
        l_msg_body2         sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                    i_prof,
                                                                                    'FUTURE_EVENTS_T103');
        l_msg_text2         sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                    i_prof,
                                                                                    'FUTURE_EVENTS_T104');
        l_hour_in_day       NUMBER(12) := pk_sysconfig.get_config('FUTURE_EVENTS_HOUR_IN_DAY', i_prof);
        l_day_in_week       NUMBER(12) := 7;
        l_day_in_month      NUMBER(12) := 30;
        l_day_in_year       NUMBER(12) := 365;
        l_min_in_hour       NUMBER(12) := 60;
        l_hour              NUMBER(12) := l_min_in_hour;
        l_day               NUMBER(12) := l_hour * l_hour_in_day;
        l_week              NUMBER(12) := l_day * l_day_in_week;
        l_month             NUMBER(12) := l_day * l_day_in_month;
        l_year              NUMBER(12) := l_day * l_day_in_year;
        l_lag_min_aux       table_table_number := i_lag_min;
        l_lag_max_aux       table_table_number := i_lag_max;
        l_lag               table_table_number := i_grid;
        l_current_timestamp DATE := current_timestamp;
        l_dt_ini            VARCHAR2(8 CHAR) := nvl(i_dt_suggest_begin, to_char(l_current_timestamp, 'YYYYMMDD'));
        l_dt_end            DATE := to_date(l_dt_ini, 'YYYYMMDD');
        l_ret               NUMBER(12);
        l_tot               NUMBER(12) := 0;
    BEGIN
        g_error := 'BUILD INPUT VARIABLES';
        FOR i IN 1 .. i_grid.count
        LOOP
            FOR j IN 1 .. i_grid.count
            LOOP
                IF (i_grid(i) (j) IS NOT NULL)
                THEN
                
                    CASE i_lag_unit_meas(i) (j)
                        WHEN g_id_minute THEN
                            l_lag_min_aux(i)(j) := l_lag_min_aux(i) (j);
                            l_lag_max_aux(i)(j) := l_lag_max_aux(i) (j);
                        WHEN g_id_hour THEN
                            l_lag_min_aux(i)(j) := l_lag_min_aux(i) (j) * l_hour;
                            l_lag_max_aux(i)(j) := l_lag_max_aux(i) (j) * l_hour;
                        WHEN g_id_day THEN
                            l_lag_min_aux(i)(j) := l_lag_min_aux(i) (j) * l_day;
                            l_lag_max_aux(i)(j) := l_lag_max_aux(i) (j) * l_day;
                        WHEN g_id_week THEN
                            l_lag_min_aux(i)(j) := l_lag_min_aux(i) (j) * l_week;
                            l_lag_max_aux(i)(j) := l_lag_max_aux(i) (j) * l_week;
                        WHEN g_id_month THEN
                            l_lag_min_aux(i)(j) := l_lag_min_aux(i) (j) * l_month;
                            l_lag_max_aux(i)(j) := l_lag_max_aux(i) (j) * l_month;
                        WHEN g_id_year THEN
                            l_lag_min_aux(i)(j) := l_lag_min_aux(i) (j) * l_year;
                            l_lag_max_aux(i)(j) := l_lag_max_aux(i) (j) * l_year;
                        ELSE
                            NULL;
                    END CASE;
                
                    CASE
                        WHEN l_lag_min_aux(i) (j) IS NOT NULL
                             AND l_lag_max_aux(i) (j) IS NOT NULL THEN
                            l_lag(j)(i) := l_lag_max_aux(i) (j) * (-1);
                        
                        WHEN l_lag_min_aux(i) (j) IS NOT NULL
                             AND l_lag_max_aux(i) (j) IS NULL THEN
                            l_lag(j)(i) := l_lag_min_aux(i) (j) * (-1);
                        
                        WHEN l_lag_min_aux(i) (j) IS NULL
                             AND l_lag_max_aux(i) (j) IS NOT NULL THEN
                            l_lag(j)(i) := l_lag_max_aux(i) (j) * (-1);
                        ELSE
                            l_lag(j)(i) := NULL;
                    END CASE;
                
                END IF;
            END LOOP;
        END LOOP;
    
        FOR i IN 1 .. i_grid.count
        LOOP
            l_ret := get_shortpath(l_lag, i) * (-1);
            IF l_ret > l_tot
            THEN
                l_tot := l_ret;
            END IF;
        END LOOP;
    
        IF l_tot > 0
        THEN
            l_dt_end := l_dt_end - 1 + ceil((l_tot + 1) / l_day);
        END IF;
        o_dt_suggest_end := to_char(l_dt_end, 'YYYYMMDD');
    
        IF o_dt_suggest_end <> l_dt_ini
           AND i_flg_single_visit = pk_alert_constant.g_yes
        THEN
            o_flg_conflict := pk_alert_constant.g_yes;
            o_msg_title    := l_msg_title;
            o_msg_body     := l_msg_body1;
            o_msg_text     := l_msg_text1;
            o_template     := 'WARNING_CONFIRMATION';
            o_code         := 'RULE_001';
        ELSIF o_dt_suggest_end > i_dt_suggest_end
        THEN
            o_flg_conflict := pk_alert_constant.g_yes;
            o_msg_title    := l_msg_title;
            o_msg_body     := l_msg_body2;
            o_msg_text     := l_msg_text2;
            o_template     := 'WARNING_CONFIRMATION';
            o_code         := 'RULE_002';
        ELSE
            o_flg_conflict := pk_alert_constant.g_no;
        END IF;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            RETURN FALSE;
    END check_total_lag;

    /********************************************************************************************
    * get shortpath
    *
    * @param      i_graph                   graph to test
    * @param      i_source                  source node       
    *
    * @return  shortest path value
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/07/13
    **********************************************************************************************/
    FUNCTION get_minimum
    (
        i_pathestimate IN table_number,
        i_mark         IN table_number,
        i_length       IN NUMBER
    ) RETURN NUMBER IS
        l_min    NUMBER(12) := 999999999999;
        l_return NUMBER(12);
    BEGIN
        FOR i IN 1 .. i_length
        LOOP
            IF (i_mark(i) <> 1)
            THEN
                IF (l_min >= i_pathestimate(i))
                THEN
                    l_min    := i_pathestimate(i);
                    l_return := i;
                END IF;
            END IF;
        END LOOP;
        RETURN l_return;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END;

    /********************************************************************************************
    * get shortpath
    *
    * @param      i_graph                   graph to test
    * @param      i_source                  source node       
    *
    * @return  shortest path value
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/07/13
    **********************************************************************************************/
    FUNCTION get_shortpath
    (
        i_graph  IN table_table_number,
        i_source IN NUMBER
    ) RETURN NUMBER IS
        l_pathestimate table_number := table_number();
        l_mark         table_number := table_number();
        l_predecessor  table_number := table_number();
        l_index        NUMBER(12);
        l_count        NUMBER(12) := 0;
        l_return       NUMBER(12) := 999999999999;
    BEGIN
    
        FOR j IN 1 .. i_graph.count
        LOOP
            l_mark.extend(1);
            l_pathestimate.extend(1);
            l_predecessor.extend(1);
            l_mark(j) := 0;
            l_pathestimate(j) := 999999999999;
            l_predecessor(j) := 0;
        END LOOP;
        l_pathestimate(i_source) := 0;
    
        WHILE (l_count < i_graph.count)
        LOOP
            l_index := get_minimum(l_pathestimate, l_mark, i_graph.count);
            l_count := l_count + 1;
            l_mark(l_index) := 1;
            FOR i IN 1 .. i_graph.count
            LOOP
                IF i_graph(l_index) (i) IS NOT NULL
                THEN
                    IF l_mark(i) <> 1
                    THEN
                        IF (l_pathestimate(i) > l_pathestimate(l_index) + i_graph(l_index) (i))
                        THEN
                            l_pathestimate(i) := l_pathestimate(l_index) + i_graph(l_index) (i);
                            l_predecessor(i) := l_index;
                        END IF;
                    END IF;
                END IF;
            END LOOP;
        END LOOP;
    
        FOR i IN 1 .. i_graph.count
        LOOP
            --printpath(i_source, i, l_predecessor);
            IF (l_pathestimate(i) <> 999999999999)
               AND l_pathestimate(i) < l_return
            THEN
                l_return := l_pathestimate(i);
                --dbms_output.put_line('l_pathestimate(' || i || ')' || l_pathestimate(i));
            END IF;
        END LOOP;
    
        RETURN l_return;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_shortpath;

    /********************************************************************************************
    * get dependencies str
    *
    * @param      i_lang                    Língua registada como preferência do profissional
    * @param      i_prof                    profissional identifier    
    * @param      i_combination_events      combinattion events identifier
    *
    * @return  dependencies string
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/07/01
    **********************************************************************************************/
    FUNCTION get_dependencies_str
    (
        i_lang               IN language.id_language%TYPE,
        i_prof               IN profissional,
        i_combination_events IN combination_events.id_combination_events%TYPE
    ) RETURN VARCHAR IS
        str           table_varchar;
        l_label_after sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'FUTURE_EVENTS_T099');
    BEGIN
        g_error := 'GET_DEPENDENCIES_STR';
        SELECT ce2.rank || get_dependencies_detail(i_lang, tder.lag_min, tder.lag_max, tder.id_unit_measure_lag)
          BULK COLLECT
          INTO str
          FROM tde_task_rel_dependency tder
          JOIN tde_task_dependency tde
            ON tde.id_task_dependency = tder.id_task_dependency_from
          JOIN future_event_type fet
            ON fet.id_task_type = tde.id_task_type
          JOIN combination_events ce
            ON ce.id_event = tde.id_task_request
           AND ce.id_future_event_type = fet.id_future_event_type
          JOIN tde_task_dependency tde2
            ON tde2.id_task_dependency = tder.id_task_dependency_to
          JOIN future_event_type fet2
            ON fet2.id_task_type = tde2.id_task_type
          JOIN combination_events ce2
            ON ce2.id_event = tde2.id_task_request
           AND ce2.id_future_event_type = fet2.id_future_event_type
         WHERE ce.id_combination_events = i_combination_events
         ORDER BY ce2.rank;
    
        IF str.count > 0
        THEN
            RETURN l_label_after || ': ' || pk_utils.concat_table(str, '; ', 1, -1);
        ELSE
            RETURN NULL;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_dependencies_str;

    /********************************************************************************************
    * get dependencies list
    *
    * @param      i_lang                   Língua registada como preferência do profissional
    * @param      i_prof                   profissional identifier
    * @param      i_type_list              future event type list identifiers
    * @param      i_event_list             event list identifiers   
    * @param      i_grid                   grid of existing dependencies
    * @param      i_lag_min                grid of minimum values
    * @param      i_lag_max                grid of max values
    * @param      i_lag_unit_meas      grid of max unit measures
    * @param      o_dependencies           return cursor
    *
    * @param      o_error                  mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/07/02
    **********************************************************************************************/
    FUNCTION get_dependencies_str_field
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_type_list     IN table_number,
        i_event_list    IN table_number,
        i_grid          IN table_table_number,
        i_lag_min       IN table_table_number,
        i_lag_max       IN table_table_number,
        i_lag_unit_meas IN table_table_number,
        o_dependencies  OUT pk_types.cursor_type,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name         VARCHAR2(60 CHAR) := 'GET_DEPENDENCIES_STR_FIELD';
        str_msg             table_varchar := table_varchar();
        str_typ             table_varchar := table_varchar();
        str_ids             table_varchar := table_varchar();
        l_counter           NUMBER(5);
        l_first             NUMBER(2);
        l_label_after       sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                    i_prof,
                                                                                    'FUTURE_EVENTS_T099');
        l_msg_no_dependency sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                    i_prof,
                                                                                    'FUTURE_EVENTS_T074');
    BEGIN
        g_error := 'BUILD INPUT VARIABLES';
        FOR i IN 1 .. i_grid.count
        LOOP
            l_first   := 0;
            l_counter := str_msg.count;
            str_msg.extend(1);
            str_typ.extend(1);
            str_ids.extend(1);
            str_msg(l_counter + 1) := l_msg_no_dependency;
            str_typ(l_counter + 1) := i_type_list(i);
            str_ids(l_counter + 1) := i_event_list(i);
            FOR j IN 1 .. i_grid.count
            LOOP
                IF (i_grid(i) (j) IS NOT NULL)
                THEN
                    IF l_first = 1
                    THEN
                        str_msg(l_counter + 1) := str_msg(l_counter + 1) || '; ';
                    ELSE
                        str_msg(l_counter + 1) := l_label_after || ': ';
                    END IF;
                    str_msg(l_counter + 1) := str_msg(l_counter + 1) || j ||
                                              get_dependencies_detail(i_lang,
                                                                      i_lag_min(i) (j),
                                                                      i_lag_max(i) (j),
                                                                      i_lag_unit_meas(i) (j));
                    str_typ(l_counter + 1) := i_type_list(i);
                    str_ids(l_counter + 1) := i_event_list(i);
                    l_first := 1;
                END IF;
            END LOOP;
        END LOOP;
    
        g_error := 'GET O_DEPENDENCIES';
        OPEN o_dependencies FOR
            SELECT str_msg, str_typ id_type, str_ids id_event
              FROM (SELECT column_value str_msg, rownum str_msg_row
                      FROM TABLE(str_msg) a),
                   (SELECT column_value str_typ, rownum str_typ_row
                      FROM TABLE(str_typ) b),
                   (SELECT column_value str_ids, rownum str_ids_row
                      FROM TABLE(str_ids) c)
             WHERE str_msg_row = str_typ_row
               AND str_typ_row = str_ids_row
               AND str_msg_row = str_ids_row
             ORDER BY str_msg_row;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_dependencies);
            RETURN FALSE;
    END get_dependencies_str_field;
    /********************************************************************************************
    * get_unit_measure_desc
    *
    * @param      i_lang                    Língua registada como preferência do profissional
    * @param      i_unit_measure            unit measure   
    *
    * @return  dependencies string
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/07/01
    **********************************************************************************************/
    FUNCTION get_unit_measure_desc
    (
        i_lang         IN language.id_language%TYPE,
        i_unit_measure unit_measure.id_unit_measure%TYPE
    ) RETURN VARCHAR IS
        str pk_translation.t_desc_translation;
    BEGIN
        g_error := 'GET_UNIT_MEASURE_DESC';
        SELECT pk_translation.get_translation(i_lang, u.code_unit_measure)
          INTO str
          FROM unit_measure u
         WHERE u.id_unit_measure = i_unit_measure;
        RETURN str;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_unit_measure_desc;

    /*****************************************************************************
    * Checks if a professional has records in the FUTURE_EVENT_SPEC_APPROVAL table
    *    
    * @param i_prof         The professional record.
    *
    * @return  'Y' is available, 'N' otherwise
    *
    * @author   Paulo teixeira
    * @version  1.0
    * @since    2010/07/02
    *****************************************************************************/
    FUNCTION is_sa_available(i_prof profissional) RETURN VARCHAR2 IS
        l_return           VARCHAR2(1 CHAR) := pk_alert_constant.g_no;
        l_profile_template profile_template.id_profile_template%TYPE := pk_prof_utils.get_prof_profile_template(i_prof);
    BEGIN
        BEGIN
            SELECT pk_alert_constant.g_yes
              INTO l_return
              FROM future_event_spec_approval f
             WHERE f.id_profile_template IN (0, l_profile_template)
               AND f.id_software IN (0, i_prof.software)
               AND f.id_institution IN (0, i_prof.institution)
               AND flg_available = pk_alert_constant.g_yes;
        EXCEPTION
            WHEN no_data_found THEN
                l_return := pk_alert_constant.g_no;
        END;
    
        RETURN l_return;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN pk_alert_constant.g_no;
    END is_sa_available;

    /********************************************************************************************
    * get dependencies str
    *
    * @param      i_combination_events      combinattion events identifier
    *
    * @return  dependencies string
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/07/01
    **********************************************************************************************/
    FUNCTION get_dependencies_info
    (
        i_lang               IN language.id_language%TYPE,
        i_combination_events IN combination_events.id_combination_events%TYPE,
        i_position           IN NUMBER
    ) RETURN table_varchar IS
        id_task_request      table_varchar;
        lag_min              table_varchar;
        lag_max              table_varchar;
        unit_measure_lag     table_varchar;
        tag_unit_measure_lag table_varchar;
    BEGIN
        g_error := 'GET_DEPENDENCIES_INFO';
        SELECT tde2.id_task_request,
               tder.lag_min,
               tder.lag_max,
               pk_events.get_unit_measure_desc(i_lang, tder.id_unit_measure_lag),
               CASE tder.id_unit_measure_lag
                   WHEN g_id_day THEN
                    'DA'
                   WHEN g_id_hour THEN
                    'HO'
                   WHEN g_id_minute THEN
                    'MI'
                   WHEN g_id_week THEN
                    'WE'
                   WHEN g_id_month THEN
                    'MO'
                   WHEN g_id_year THEN
                    'YE'
                   ELSE
                    NULL
               END unit_measure_lag
          BULK COLLECT
          INTO id_task_request, lag_min, lag_max, unit_measure_lag, tag_unit_measure_lag
          FROM tde_task_rel_dependency tder
          JOIN tde_task_dependency tde
            ON tde.id_task_dependency = tder.id_task_dependency_from
          JOIN future_event_type fet
            ON fet.id_task_type = tde.id_task_type
          JOIN combination_events ce
            ON ce.id_event = tde.id_task_request
           AND ce.id_future_event_type = fet.id_future_event_type
          JOIN tde_task_dependency tde2
            ON tde2.id_task_dependency = tder.id_task_dependency_to
          JOIN future_event_type fet2
            ON fet2.id_task_type = tde2.id_task_type
          JOIN combination_events ce2
            ON ce2.id_event = tde2.id_task_request
           AND ce2.id_future_event_type = fet2.id_future_event_type
         WHERE ce.id_combination_events = i_combination_events
         ORDER BY ce2.rank;
    
        CASE i_position
            WHEN 1 THEN
                RETURN id_task_request;
            WHEN 2 THEN
                RETURN lag_min;
            WHEN 3 THEN
                RETURN lag_max;
            WHEN 4 THEN
                RETURN unit_measure_lag;
            WHEN 5 THEN
                RETURN tag_unit_measure_lag;
        END CASE;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_dependencies_info;

    /********************************************************************************************
    * get dependencies detail
    *
    * @param      i_lang       language identifier   
    * @param      i_lag_min      
    * @param      i_lag_max      
    * @param      i_lag_unit_meas
    *
    * @return  dependencies detail description 
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/07/05
    **********************************************************************************************/
    FUNCTION get_dependencies_detail
    (
        i_lang          IN language.id_language%TYPE,
        i_lag_min       IN tde_task_rel_dependency.lag_min%TYPE,
        i_lag_max       IN tde_task_rel_dependency.lag_max%TYPE,
        i_lag_unit_meas IN tde_task_rel_dependency.id_unit_measure_lag%TYPE
    ) RETURN VARCHAR2 IS
        str         sys_message.desc_message%TYPE;
        l_unit_meas pk_translation.t_desc_translation := pk_events.get_unit_measure_desc(i_lang, i_lag_unit_meas);
    BEGIN
        CASE
            WHEN i_lag_min IS NOT NULL
                 AND i_lag_min <> 0
                 AND i_lag_max IS NOT NULL
                 AND i_lag_max <> 0 THEN
                IF i_lag_min = i_lag_max
                THEN
                    str := ' [' || i_lag_min || g_space || l_unit_meas || ']';
                ELSE
                    str := ' [' || i_lag_min || g_space || l_unit_meas || ' - ' || i_lag_max || g_space || l_unit_meas || ']';
                END IF;
            WHEN (i_lag_min IS NULL OR i_lag_min = 0)
                 AND i_lag_max IS NOT NULL
                 AND i_lag_max <> 0 THEN
                str := ' [' || i_lag_max || g_space || l_unit_meas || ']';
            WHEN i_lag_min IS NOT NULL
                 AND i_lag_min <> 0
                 AND (i_lag_max IS NULL OR i_lag_max = 0) THEN
                str := ' [' || i_lag_min || g_space || l_unit_meas || ']';
            ELSE
                str := NULL;
        END CASE;
    
        RETURN str;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_dependencies_detail;

    /********************************************************************************************
    * Returns the list of type of visit related to the destination epis_type and institution
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_epis_type          dstination epis_type identifier
    * @param      i_institution        destination institution
    * @param      o_type_of_visit      list of type of visits
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Sérgio Santos
    * @version 1.0
    * @since  2010/07/11
    **********************************************************************************************/
    FUNCTION get_type_of_visit
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_epis_type     IN epis_type.id_epis_type%TYPE,
        i_institution   IN institution.id_institution%TYPE,
        o_type_of_visit OUT pk_types.cursor_type,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_TYPE_OF_VISIT';
    
        l_institution institution.id_institution%TYPE;
        l_software    software.id_software%TYPE;
        l_flg_type    future_event_type.flg_type%TYPE;
    BEGIN
        l_flg_type    := get_flg_type_by_epis_type(i_epis_type);
        l_institution := nvl(i_institution, i_prof.institution);
    
        g_error := 'GET SOFTWARE USING EPIS_TYPE';
        BEGIN
            SELECT etsi.id_software
              INTO l_software
              FROM epis_type_soft_inst etsi
             WHERE etsi.id_institution IN (0, i_institution)
               AND etsi.id_epis_type = i_epis_type
               AND etsi.id_software <> pk_alert_constant.g_soft_director
               AND rownum <= 1;
        EXCEPTION
            WHEN OTHERS THEN
                RAISE g_exception;
        END;
    
        g_error := 'OPEN O_TYPE_OF_VISIT';
        OPEN o_type_of_visit FOR
            SELECT dcs1.id_dep_clin_serv,
                   decode(t.num,
                          1,
                          pk_translation.get_translation(i_lang, cs1.code_clinical_service),
                          pk_translation.get_translation(i_lang, cs1.code_clinical_service) || ' - ' ||
                          pk_translation.get_translation(i_lang, d1.code_department)) type_of_visit,
                   cs1.id_clinical_service,
                   d1.id_department
              FROM dep_clin_serv dcs1
              JOIN clinical_service cs1
                ON cs1.id_clinical_service = dcs1.id_clinical_service
              JOIN department d1
                ON d1.id_department = dcs1.id_department
              JOIN dept dpt1
                ON dpt1.id_dept = d1.id_dept
              JOIN software_dept sd1
                ON sd1.id_dept = dpt1.id_dept
              JOIN sch_department sd
                ON sd.id_department = dcs1.id_department
              JOIN (SELECT COUNT(dcs.id_clinical_service) num, dcs.id_clinical_service
                      FROM dep_clin_serv dcs
                      JOIN clinical_service cs
                        ON cs.id_clinical_service = dcs.id_clinical_service
                      JOIN department d
                        ON d.id_department = dcs.id_department
                      JOIN dept dpt
                        ON dpt.id_dept = d.id_dept
                      JOIN software_dept sd
                        ON sd.id_dept = dpt.id_dept
                      JOIN sch_department sd2
                        ON sd2.id_department = dcs.id_department
                     WHERE sd.id_software = l_software
                       AND dpt.id_institution = l_institution
                       AND d.id_institution = l_institution
                       AND dpt.flg_available = pk_alert_constant.g_yes
                       AND d.flg_available = pk_alert_constant.g_yes
                       AND dcs.flg_available = pk_alert_constant.g_yes
                       AND sd2.flg_dep_type = l_flg_type
                       AND EXISTS
                     (SELECT 'X'
                              FROM sch_event se
                              JOIN sch_event_dcs sed
                                ON se.id_sch_event = sed.id_sch_event
                             WHERE se.flg_available = pk_alert_constant.g_yes
                               AND sed.id_dep_clin_serv = dcs.id_dep_clin_serv
                               AND se.dep_type IN
                                   ('A', 'C', 'X', 'E', 'PM', 'N', 'U', 'AS', 'CR', 'PY', 'RT', 'PC', 'PT')
                               AND se.flg_schedule_outp_type IN ('D', 'M', 'P', 'Q', 'E', 'G', 'N', 'W')
                               AND sed.flg_available = pk_alert_constant.g_yes
                                  --AND EXISTS (SELECT 1
                                  --       FROM sch_event_inst_soft seis
                                  --      WHERE seis.id_sch_event = se.id_sch_event
                                  --        AND seis.id_institution IN (l_institution, 0)
                                  --        AND seis.id_software IN (0)
                                  --        AND seis.flg_available = pk_alert_constant.g_yes)
                               AND EXISTS (SELECT 1
                                      FROM sch_permission sp
                                     WHERE sp.id_institution = l_institution
                                       AND sp.id_dep_clin_serv = dcs.id_dep_clin_serv
                                       AND sp.id_sch_event = se.id_sch_event
                                       AND sp.flg_permission <> pk_schedule.g_permission_none))
                     GROUP BY dcs.id_clinical_service) t
                ON t.id_clinical_service = dcs1.id_clinical_service
             WHERE sd1.id_software = l_software
               AND dpt1.id_institution = l_institution
               AND d1.id_institution = l_institution
               AND dpt1.flg_available = pk_alert_constant.g_yes
               AND d1.flg_available = pk_alert_constant.g_yes
               AND dcs1.flg_available = pk_alert_constant.g_yes
               AND sd.flg_dep_type = l_flg_type
               AND EXISTS
             (SELECT 'X'
                      FROM sch_event se
                      JOIN sch_event_dcs sed
                        ON se.id_sch_event = sed.id_sch_event
                     WHERE se.flg_available = pk_alert_constant.g_yes
                       AND sed.id_dep_clin_serv = dcs1.id_dep_clin_serv
                       AND se.dep_type IN
                           ('A', 'C', 'X', 'E', 'PM', 'N', 'U', 'AS', 'CR', 'PY', 'RT', 'PC', 'PT', 'OT', 'ST')
                       AND se.flg_schedule_outp_type IN ('D', 'M', 'P', 'Q', 'E', 'G', 'N', 'W')
                       AND sed.flg_available = pk_alert_constant.g_yes
                          --AND EXISTS (SELECT 1
                          --       FROM sch_event_inst_soft seis
                          --      WHERE seis.id_sch_event = se.id_sch_event
                          --        AND seis.id_institution IN (l_institution, 0)
                          --        AND seis.id_software IN (0)
                          --        AND seis.flg_available = pk_alert_constant.g_yes)
                       AND EXISTS (SELECT 1
                              FROM sch_permission sp
                             WHERE sp.id_institution = l_institution
                               AND sp.id_dep_clin_serv = dcs1.id_dep_clin_serv
                               AND sp.id_sch_event = se.id_sch_event
                               AND sp.flg_permission <> pk_schedule.g_permission_none))
               AND pk_schedule_bo.get_dcs_events_count(dcs1.id_dep_clin_serv, d1.id_department, l_flg_type) > 0
            
             ORDER BY type_of_visit;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_type_of_visit);
            RETURN FALSE;
    END get_type_of_visit;

    FUNCTION tf_get_type_of_visit
    (
        i_lang         IN language.id_language%TYPE,
        i_prof         IN profissional,
        i_institution  IN institution.id_institution%TYPE,
        i_id_task_type IN task_type.id_task_type%TYPE
    ) RETURN t_tbl_core_domain IS
        l_func_name VARCHAR2(60 CHAR) := 'TF_GET_TYPE_OF_VISIT';
    
        l_software software.id_software%TYPE;
        l_flg_type future_event_type.flg_type%TYPE;
    
        l_epis_type         epis_type.id_epis_type%TYPE;
        l_future_event_type future_event_type.id_future_event_type%TYPE;
        l_flg_type_dummy    future_event_type.flg_type%TYPE;
        l_title             pk_translation.t_desc_translation;
    
        l_return t_tbl_core_domain;
        l_error  t_error_out;
    BEGIN
        g_error := 'ERROR CALLING GET_FET_EP_BY_TASK_TYPE';
        IF NOT pk_events.get_fet_ep_by_task_type(i_lang              => i_lang,
                                                 i_prof              => i_prof,
                                                 i_id_task_type      => i_id_task_type,
                                                 o_future_event_type => l_future_event_type,
                                                 o_epis_type         => l_epis_type,
                                                 o_flg_type          => l_flg_type_dummy,
                                                 o_title             => l_title,
                                                 o_error             => l_error)
        THEN
            RETURN t_tbl_core_domain();
        END IF;
    
        l_flg_type := get_flg_type_by_epis_type(l_epis_type);
    
        IF i_institution IS NOT NULL
        THEN
        
            g_error := 'GET SOFTWARE USING EPIS_TYPE';
            BEGIN
                SELECT etsi.id_software
                  INTO l_software
                  FROM epis_type_soft_inst etsi
                 WHERE etsi.id_institution IN (0, i_institution)
                   AND etsi.id_epis_type = l_epis_type
                   AND etsi.id_software <> pk_alert_constant.g_soft_director
                   AND rownum <= 1;
            EXCEPTION
                WHEN OTHERS THEN
                    RAISE g_exception;
            END;
        
            g_error := 'OPEN L_RETURN';
            SELECT *
              BULK COLLECT
              INTO l_return
              FROM (SELECT t_row_core_domain(internal_name => NULL,
                                             desc_domain   => type_of_visit,
                                             domain_value  => id_dep_clin_serv,
                                             order_rank    => NULL,
                                             img_name      => NULL)
                      FROM (SELECT dcs1.id_dep_clin_serv,
                                   decode(t.num,
                                          1,
                                          pk_translation.get_translation(i_lang, cs1.code_clinical_service),
                                          pk_translation.get_translation(i_lang, cs1.code_clinical_service) || ' - ' ||
                                          pk_translation.get_translation(i_lang, d1.code_department)) type_of_visit,
                                   cs1.id_clinical_service,
                                   d1.id_department
                              FROM dep_clin_serv dcs1
                              JOIN clinical_service cs1
                                ON cs1.id_clinical_service = dcs1.id_clinical_service
                              JOIN department d1
                                ON d1.id_department = dcs1.id_department
                              JOIN dept dpt1
                                ON dpt1.id_dept = d1.id_dept
                              JOIN software_dept sd1
                                ON sd1.id_dept = dpt1.id_dept
                              JOIN sch_department sd
                                ON sd.id_department = dcs1.id_department
                              JOIN (SELECT COUNT(dcs.id_clinical_service) num, dcs.id_clinical_service
                                     FROM dep_clin_serv dcs
                                     JOIN clinical_service cs
                                       ON cs.id_clinical_service = dcs.id_clinical_service
                                     JOIN department d
                                       ON d.id_department = dcs.id_department
                                     JOIN dept dpt
                                       ON dpt.id_dept = d.id_dept
                                     JOIN software_dept sd
                                       ON sd.id_dept = dpt.id_dept
                                     JOIN sch_department sd2
                                       ON sd2.id_department = dcs.id_department
                                    WHERE sd.id_software = l_software
                                      AND dpt.id_institution = i_institution
                                      AND d.id_institution = i_institution
                                      AND dpt.flg_available = pk_alert_constant.g_yes
                                      AND d.flg_available = pk_alert_constant.g_yes
                                      AND dcs.flg_available = pk_alert_constant.g_yes
                                      AND sd2.flg_dep_type = l_flg_type
                                      AND EXISTS
                                    (SELECT 'X'
                                             FROM sch_event se
                                             JOIN sch_event_dcs sed
                                               ON se.id_sch_event = sed.id_sch_event
                                            WHERE se.flg_available = pk_alert_constant.g_yes
                                              AND sed.id_dep_clin_serv = dcs.id_dep_clin_serv
                                              AND se.dep_type IN
                                                  ('A', 'C', 'X', 'E', 'PM', 'N', 'U', 'AS', 'CR', 'PY', 'RT', 'PC', 'PT')
                                              AND se.flg_schedule_outp_type IN ('D', 'M', 'P', 'Q', 'E', 'G', 'N', 'W')
                                              AND sed.flg_available = pk_alert_constant.g_yes
                                                 --AND EXISTS (SELECT 1
                                                 --       FROM sch_event_inst_soft seis
                                                 --      WHERE seis.id_sch_event = se.id_sch_event
                                                 --        AND seis.id_institution IN (l_institution, 0)
                                                 --        AND seis.id_software IN (0)
                                                 --        AND seis.flg_available = pk_alert_constant.g_yes)
                                              AND EXISTS
                                            (SELECT 1
                                                     FROM sch_permission sp
                                                    WHERE sp.id_institution = i_institution
                                                      AND sp.id_dep_clin_serv = dcs.id_dep_clin_serv
                                                      AND sp.id_sch_event = se.id_sch_event
                                                      AND sp.flg_permission <> pk_schedule.g_permission_none))
                                    GROUP BY dcs.id_clinical_service) t
                                ON t.id_clinical_service = dcs1.id_clinical_service
                             WHERE sd1.id_software = l_software
                               AND dpt1.id_institution = i_institution
                               AND d1.id_institution = i_institution
                               AND dpt1.flg_available = pk_alert_constant.g_yes
                               AND d1.flg_available = pk_alert_constant.g_yes
                               AND dcs1.flg_available = pk_alert_constant.g_yes
                               AND sd.flg_dep_type = l_flg_type
                               AND EXISTS
                             (SELECT 'X'
                                      FROM sch_event se
                                      JOIN sch_event_dcs sed
                                        ON se.id_sch_event = sed.id_sch_event
                                     WHERE se.flg_available = pk_alert_constant.g_yes
                                       AND sed.id_dep_clin_serv = dcs1.id_dep_clin_serv
                                       AND se.dep_type IN ('A',
                                                           'C',
                                                           'X',
                                                           'E',
                                                           'PM',
                                                           'N',
                                                           'U',
                                                           'AS',
                                                           'CR',
                                                           'PY',
                                                           'RT',
                                                           'PC',
                                                           'PT',
                                                           'OT',
                                                           'ST')
                                       AND se.flg_schedule_outp_type IN ('D', 'M', 'P', 'Q', 'E', 'G', 'N', 'W')
                                       AND sed.flg_available = pk_alert_constant.g_yes
                                          --AND EXISTS (SELECT 1
                                          --       FROM sch_event_inst_soft seis
                                          --      WHERE seis.id_sch_event = se.id_sch_event
                                          --        AND seis.id_institution IN (l_institution, 0)
                                          --        AND seis.id_software IN (0)
                                          --        AND seis.flg_available = pk_alert_constant.g_yes)
                                       AND EXISTS (SELECT 1
                                              FROM sch_permission sp
                                             WHERE sp.id_institution = i_institution
                                               AND sp.id_dep_clin_serv = dcs1.id_dep_clin_serv
                                               AND sp.id_sch_event = se.id_sch_event
                                               AND sp.flg_permission <> pk_schedule.g_permission_none))
                               AND pk_schedule_bo.get_dcs_events_count(dcs1.id_dep_clin_serv,
                                                                       d1.id_department,
                                                                       l_flg_type) > 0
                             ORDER BY type_of_visit));
        END IF;
    
        RETURN l_return;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              l_error);
            pk_alert_exceptions.reset_error_state;
            RETURN t_tbl_core_domain();
    END tf_get_type_of_visit;

    /********************************************************************************************
    * Get type of visit description for a task type
    *
    * @param    i_lang                preferred language ID
    * @param    i_prof                object (id of professional, id of institution, id of software)
    * @param    i_opinion_prof        opinion professional ID
    * @param    i_task_type           task type ID    
    *
    * @return   varchar2              type of visit description
    *
    * @author                         Tiago Silva
    * @since                          2010/08/06
    ********************************************************************************************/
    FUNCTION get_type_of_visit_desc
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_dep_clin_serv IN dep_clin_serv.id_dep_clin_serv%TYPE,
        i_task_type     IN task_type.id_task_type%TYPE
    ) RETURN pk_translation.t_desc_translation IS
    
        l_type_of_visit_desc pk_translation.t_desc_translation;
        l_software           software.id_software%TYPE;
    
        l_future_event_type future_event_type.id_future_event_type%TYPE;
        l_epis_type         future_event_type.id_epis_type%TYPE;
        l_flg_type          future_event_type.flg_type%TYPE;
        l_title             pk_translation.t_desc_translation;
        l_error             t_error_out;
    BEGIN
    
        g_error := 'GET EPIS_TYPE OF THE TASK TYPE';
        pk_alertlog.log_debug(g_error, g_package_name);
    
        IF NOT get_fet_ep_by_task_type(i_lang              => i_lang,
                                       i_prof              => i_prof,
                                       i_id_task_type      => i_task_type,
                                       o_future_event_type => l_future_event_type,
                                       o_epis_type         => l_epis_type,
                                       o_flg_type          => l_flg_type,
                                       o_title             => l_title,
                                       o_error             => l_error)
        THEN
            RAISE g_exception;
        END IF;
    
        g_error := 'GET SOFTWARE USING EPIS_TYPE';
        pk_alertlog.log_debug(g_error, g_package_name);
    
        BEGIN
            SELECT etsi.id_software
              INTO l_software
              FROM epis_type_soft_inst etsi
             WHERE etsi.id_institution = 0
               AND etsi.id_epis_type = l_epis_type
               AND etsi.id_software <> pk_alert_constant.g_soft_director;
        EXCEPTION
            WHEN OTHERS THEN
                RAISE g_exception;
        END;
    
        g_error := 'GET TYPE OF VISIT DESCRIPTION';
        pk_alertlog.log_debug(g_error, g_package_name);
    
        SELECT decode( -- verify if there are more than one department for this clinical service
                      t.num,
                      1,
                      pk_translation.get_translation(i_lang, cs1.code_clinical_service),
                      pk_translation.get_translation(i_lang, cs1.code_clinical_service) || ' - ' ||
                      pk_translation.get_translation(i_lang, d1.code_department)) type_of_visit
          INTO l_type_of_visit_desc
          FROM dep_clin_serv dcs1
          JOIN clinical_service cs1
            ON cs1.id_clinical_service = dcs1.id_clinical_service
          JOIN department d1
            ON d1.id_department = dcs1.id_department
          JOIN (SELECT COUNT(dcs.id_clinical_service) num, dcs.id_clinical_service
                  FROM dep_clin_serv dcs
                  JOIN clinical_service cs
                    ON cs.id_clinical_service = dcs.id_clinical_service
                  JOIN department d
                    ON d.id_department = dcs.id_department
                  JOIN dept dpt
                    ON dpt.id_dept = d.id_dept
                  JOIN software_dept sd
                    ON sd.id_dept = dpt.id_dept
                  JOIN sch_department sd2
                    ON sd2.id_department = dcs.id_department
                 WHERE sd.id_software = l_software
                   AND dpt.id_institution = i_prof.institution
                   AND d.id_institution = i_prof.institution
                   AND dpt.flg_available = pk_alert_constant.g_yes
                   AND d.flg_available = pk_alert_constant.g_yes
                   AND dcs.flg_available = pk_alert_constant.g_yes
                   AND sd2.flg_dep_type = get_flg_type_by_epis_type(l_epis_type)
                   AND EXISTS
                 (SELECT 'X'
                          FROM sch_event se
                          JOIN sch_event_dcs sed
                            ON se.id_sch_event = sed.id_sch_event
                         WHERE se.flg_available = pk_alert_constant.g_yes
                           AND sed.id_dep_clin_serv = dcs.id_dep_clin_serv
                           AND se.dep_type IN ('A', 'C', 'X', 'E', 'PM', 'N', 'U', 'AS', 'CR', 'RT', 'PY', 'PC', 'PT')
                           AND se.flg_schedule_outp_type IN ('D', 'M', 'P', 'Q', 'E', 'G', 'N', 'W')
                           AND sed.flg_available = pk_alert_constant.g_yes
                              --AND EXISTS (SELECT 1
                              --       FROM sch_event_inst_soft seis
                              --      WHERE seis.id_sch_event = se.id_sch_event
                              --        AND seis.id_institution IN (l_institution, 0)
                              --        AND seis.id_software IN (0)
                              --        AND seis.flg_available = pk_alert_constant.g_yes)
                           AND EXISTS (SELECT 1
                                  FROM sch_permission sp
                                 WHERE sp.id_institution = i_prof.institution
                                   AND sp.id_dep_clin_serv = dcs.id_dep_clin_serv
                                   AND sp.id_sch_event = se.id_sch_event
                                   AND sp.flg_permission <> pk_schedule.g_permission_none))
                 GROUP BY dcs.id_clinical_service) t
            ON t.id_clinical_service = dcs1.id_clinical_service
         WHERE dcs1.id_dep_clin_serv = i_dep_clin_serv;
    
        RETURN l_type_of_visit_desc;
    
    END get_type_of_visit_desc;

    /********************************************************************************************
    * Returns destination professionals to schedule
    *
    * @param      i_lang               Língua registada como preferência do profissional
    * @param      i_prof               profissional identifier
    * @param      i_epis_type          dstination epis_type identifier
    * @param      i_institution        destination institution
    * @param      i_dep_clin_serv      destination dep_clin_serv identifier
    * @param      i_sch_event          sch_event identifier
    * @param      o_professionals      list of type of visits
    *
    * @param      o_error              mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Sérgio Santos
    * @version 1.0
    * @since  2010/07/11
    **********************************************************************************************/
    FUNCTION get_dest_professionals
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_epis_type     IN epis_type.id_epis_type%TYPE,
        i_institution   IN institution.id_institution%TYPE,
        i_dep_clin_serv IN dep_clin_serv.id_dep_clin_serv%TYPE,
        i_sch_event     IN sch_event.id_sch_event%TYPE,
        o_professionals OUT pk_types.cursor_type,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name   VARCHAR2(60 CHAR) := 'GET_DEST_PROFESSIONALS';
        l_institution institution.id_institution%TYPE := nvl(i_institution, i_prof.institution);
        l_software    software.id_software%TYPE := pk_episode.get_soft_by_epis_type(i_epis_type, i_institution);
    BEGIN
        g_error := 'OPEN o_professionals';
        OPEN o_professionals FOR
            SELECT pk_message.get_message(i_lang, i_prof, 'FUTURE_EVENTS_T017') prof_name, -1 id_professional, 1 rank
              FROM dual
            UNION ALL
            SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, id_professional) prof_name, id_professional, 2 rank
              FROM (SELECT DISTINCT pdcs.id_professional id_professional
                      FROM prof_dep_clin_serv pdcs
                      JOIN dep_clin_serv dcs
                        ON pdcs.id_dep_clin_serv = dcs.id_dep_clin_serv
                      JOIN clinical_service cs
                        ON cs.id_clinical_service = dcs.id_clinical_service
                      JOIN department d
                        ON d.id_department = dcs.id_department
                      JOIN profile_template pt
                        ON pt.id_software = l_software
                       AND pt.flg_available = pk_alert_constant.g_yes
                      JOIN prof_profile_template ppt
                        ON ppt.id_profile_template = pt.id_profile_template
                       AND ppt.id_software = pt.id_software
                       AND ppt.id_professional = pdcs.id_professional
                       AND ppt.id_institution = pdcs.id_institution
                      JOIN epis_type_access eta
                        ON eta.id_profile_template = ppt.id_profile_template
                       AND eta.id_institution IN (pdcs.id_institution, 0)
                       AND eta.id_epis_type = i_epis_type
                      JOIN software s
                        ON s.id_software = pt.id_software
                       AND s.flg_viewer = pk_alert_constant.g_no
                      JOIN professional p
                        ON p.id_professional = pdcs.id_professional
                       AND p.flg_state = pk_alert_constant.g_active
                      JOIN prof_institution pi
                        ON pi.id_professional = pdcs.id_professional
                       AND pi.id_institution = pdcs.id_institution
                       AND pi.flg_state = pk_alert_constant.g_active
                       AND pi.dt_end_tstz IS NULL
                      JOIN sch_permission sp
                        ON sp.id_professional = i_prof.id
                       AND sp.id_prof_agenda = pdcs.id_professional
                       AND sp.id_institution = pdcs.id_institution
                       AND sp.flg_permission = 'S'
                       AND sp.id_sch_event = i_sch_event
                       AND sp.id_dep_clin_serv = pdcs.id_dep_clin_serv
                      JOIN sch_event se
                        ON se.id_sch_event = i_sch_event
                       AND se.flg_available = pk_alert_constant.g_yes
                       AND se.dep_type IN ('A', 'C', 'X', 'E', 'PM', 'N', 'U', 'AS', 'CR', 'RT', 'PY', 'PC', 'PT')
                       AND se.flg_schedule_outp_type IN ('D', 'M', 'P', 'Q', 'E', 'G', 'N', 'W', 'V', 'R')
                     WHERE pdcs.id_dep_clin_serv = i_dep_clin_serv
                       AND pdcs.id_institution = l_institution
                       AND pdcs.flg_status = pk_consult_req.g_selected)
             ORDER BY rank, prof_name;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_professionals);
            RETURN FALSE;
    END get_dest_professionals;

    FUNCTION get_dest_professionals
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_institution   IN institution.id_institution%TYPE,
        i_dep_clin_serv IN dep_clin_serv.id_dep_clin_serv%TYPE,
        i_sch_event     IN sch_event.id_sch_event%TYPE
    ) RETURN t_tbl_core_domain IS
        l_func_name   VARCHAR2(60 CHAR) := 'GET_DEST_PROFESSIONALS';
        l_institution institution.id_institution%TYPE := nvl(i_institution, i_prof.institution);
        l_software    software.id_software%TYPE;
    
        l_epis_type         epis_type.id_epis_type%TYPE;
        l_future_event_type future_event_type.id_future_event_type%TYPE;
        l_flg_type          future_event_type.flg_type%TYPE;
        l_title             pk_translation.t_desc_translation;
    
        l_return t_tbl_core_domain;
        l_error  t_error_out;
    BEGIN
        g_error := 'ERROR CALLING GET_FET_EP_BY_TASK_TYPE';
        IF NOT pk_events.get_fet_ep_by_task_type(i_lang              => i_lang,
                                                 i_prof              => i_prof,
                                                 i_id_task_type      => 30, --MEDICAL APPOINTMENT
                                                 o_future_event_type => l_future_event_type,
                                                 o_epis_type         => l_epis_type,
                                                 o_flg_type          => l_flg_type,
                                                 o_title             => l_title,
                                                 o_error             => l_error)
        THEN
            RETURN t_tbl_core_domain();
        END IF;
    
        l_software := pk_episode.get_soft_by_epis_type(l_epis_type, i_institution);
    
        g_error := 'OPEN L_RETURN';
        SELECT *
          BULK COLLECT
          INTO l_return
          FROM (SELECT t_row_core_domain(internal_name => NULL,
                                         desc_domain   => prof_name,
                                         domain_value  => id_professional,
                                         order_rank    => NULL,
                                         img_name      => NULL)
                  FROM (SELECT pk_message.get_message(i_lang, i_prof, 'FUTURE_EVENTS_T017') prof_name,
                               -1 id_professional,
                               1 rank
                          FROM dual
                        UNION ALL
                        SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, id_professional) prof_name,
                               id_professional,
                               2 rank
                          FROM (SELECT DISTINCT pdcs.id_professional id_professional
                                  FROM prof_dep_clin_serv pdcs
                                  JOIN dep_clin_serv dcs
                                    ON pdcs.id_dep_clin_serv = dcs.id_dep_clin_serv
                                  JOIN clinical_service cs
                                    ON cs.id_clinical_service = dcs.id_clinical_service
                                  JOIN department d
                                    ON d.id_department = dcs.id_department
                                  JOIN profile_template pt
                                    ON pt.id_software = l_software
                                   AND pt.flg_available = pk_alert_constant.g_yes
                                  JOIN prof_profile_template ppt
                                    ON ppt.id_profile_template = pt.id_profile_template
                                   AND ppt.id_software = pt.id_software
                                   AND ppt.id_professional = pdcs.id_professional
                                   AND ppt.id_institution = pdcs.id_institution
                                  JOIN epis_type_access eta
                                    ON eta.id_profile_template = ppt.id_profile_template
                                   AND eta.id_institution IN (pdcs.id_institution, 0)
                                   AND eta.id_epis_type = l_epis_type
                                  JOIN software s
                                    ON s.id_software = pt.id_software
                                   AND s.flg_viewer = pk_alert_constant.g_no
                                  JOIN professional p
                                    ON p.id_professional = pdcs.id_professional
                                   AND p.flg_state = pk_alert_constant.g_active
                                  JOIN prof_institution pi
                                    ON pi.id_professional = pdcs.id_professional
                                   AND pi.id_institution = pdcs.id_institution
                                   AND pi.flg_state = pk_alert_constant.g_active
                                   AND pi.dt_end_tstz IS NULL
                                  JOIN sch_permission sp
                                    ON sp.id_professional = i_prof.id
                                   AND sp.id_prof_agenda = pdcs.id_professional
                                   AND sp.id_institution = pdcs.id_institution
                                   AND sp.flg_permission = 'S'
                                   AND sp.id_sch_event = i_sch_event
                                   AND sp.id_dep_clin_serv = pdcs.id_dep_clin_serv
                                  JOIN sch_event se
                                    ON se.id_sch_event = i_sch_event
                                   AND se.flg_available = pk_alert_constant.g_yes
                                   AND se.dep_type IN
                                       ('A', 'C', 'X', 'E', 'PM', 'N', 'U', 'AS', 'CR', 'RT', 'PY', 'PC', 'PT')
                                   AND se.flg_schedule_outp_type IN ('D', 'M', 'P', 'Q', 'E', 'G', 'N', 'W', 'V', 'R')
                                 WHERE pdcs.id_dep_clin_serv = i_dep_clin_serv
                                   AND pdcs.id_institution = l_institution
                                   AND pdcs.flg_status = pk_consult_req.g_selected)
                         ORDER BY rank, prof_name));
    
        RETURN l_return;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              l_error);
            pk_alert_exceptions.reset_error_state;
            RETURN t_tbl_core_domain();
    END get_dest_professionals;

    /**
    * Returns a list of rooms.
    *
    * @param      i_lang             professional default language
    * @param      i_prof             professional object which refers the identity of the function caller
    * @param      i_id_dep           Department(s)
    * @param      i_flg_search       Whether or not should the 'All' value be shown
    * @param      o_rooms            Rooms
    * @param      o_error            error coming right at you!!!! data to return
    *
    * @return     boolean type   , "False" on error or "True" if success
    * @author     Nuno Guerreiro (Ricardo Pinho)
    * @version    alpha
    * @since      2007/04/26
    */
    FUNCTION get_rooms
    (
        i_lang       IN language.id_language%TYPE,
        i_prof       IN profissional,
        i_id_dep     IN department.id_department%TYPE,
        i_flg_search IN VARCHAR2,
        o_rooms      OUT pk_types.cursor_type,
        o_error      OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(32) := 'GET_ROOMS';
        l_msg_all   sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, pk_schedule.g_msg_all);
    BEGIN
        l_func_name := 'GET_ROOMS';
        g_error     := 'OPEN o_rooms';
        OPEN o_rooms FOR
            SELECT id_room data, desc_room label, pk_alert_constant.g_no flg_select, order_field
              FROM (SELECT pk_schedule.g_all      id_room,
                           l_msg_all              desc_room,
                           pk_alert_constant.g_no flg_select,
                           1                      order_field
                      FROM dual
                     WHERE i_flg_search = pk_alert_constant.g_yes
                    UNION ALL
                    SELECT id_room, desc_room, flg_select, order_field
                      FROM (SELECT r.id_room,
                                   nvl(r.desc_room, pk_translation.get_translation(i_lang, r.code_room)) desc_room,
                                   pk_alert_constant.g_no flg_select,
                                   9 order_field
                              FROM room r
                             WHERE r.id_department = i_id_dep
                               AND r.flg_available = pk_alert_constant.g_yes)
                     WHERE desc_room IS NOT NULL)
             ORDER BY order_field, label;
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_rooms);
            pk_alert_exceptions.reset_error_state;
            RETURN FALSE;
        
    END get_rooms;

    FUNCTION get_rooms
    (
        i_lang             IN language.id_language%TYPE,
        i_prof             IN profissional,
        i_id_dep_clin_serv IN dep_clin_serv.id_dep_clin_serv%TYPE,
        i_flg_search       IN VARCHAR2
    ) RETURN t_tbl_core_domain IS
        l_func_name VARCHAR2(32) := 'GET_ROOMS';
        l_msg_all   sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, pk_schedule.g_msg_all);
    
        l_id_dep department.id_department%TYPE;
        l_return t_tbl_core_domain;
    
        l_error t_error_out;
    BEGIN
        l_func_name := 'GET_ROOMS';
    
        SELECT dcs.id_department
          INTO l_id_dep
          FROM dep_clin_serv dcs
         WHERE dcs.id_dep_clin_serv = i_id_dep_clin_serv;
    
        g_error := 'OPEN L_RETURN';
        SELECT *
          BULK COLLECT
          INTO l_return
          FROM (SELECT t_row_core_domain(internal_name => NULL,
                                         desc_domain   => label,
                                         domain_value  => data,
                                         order_rank    => NULL,
                                         img_name      => NULL)
                  FROM (SELECT id_room data, desc_room label, pk_alert_constant.g_no flg_select, order_field
                          FROM (SELECT pk_schedule.g_all      id_room,
                                       l_msg_all              desc_room,
                                       pk_alert_constant.g_no flg_select,
                                       1                      order_field
                                  FROM dual
                                 WHERE i_flg_search = pk_alert_constant.g_yes
                                UNION ALL
                                SELECT id_room, desc_room, flg_select, order_field
                                  FROM (SELECT r.id_room,
                                               nvl(r.desc_room, pk_translation.get_translation(i_lang, r.code_room)) desc_room,
                                               pk_alert_constant.g_no flg_select,
                                               9 order_field
                                          FROM room r
                                         WHERE r.id_department = l_id_dep
                                           AND r.flg_available = pk_alert_constant.g_yes)
                                 WHERE desc_room IS NOT NULL)
                         ORDER BY order_field, label));
    
        RETURN l_return;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              l_error);
            pk_alert_exceptions.reset_error_state;
            RETURN t_tbl_core_domain();
    END get_rooms;

    FUNCTION get_fe_description
    (
        i_lang            IN language.id_language%TYPE,
        i_prof            IN profissional,
        i_id_episode      IN table_number,
        o_get_description OUT pk_types.cursor_type,
        o_error           OUT t_error_out
    ) RETURN BOOLEAN IS
    
        l_func_name VARCHAR2(32) := 'GET_FE_DESCRIPTION';
    
    BEGIN
        g_error := 'OPEN o_get_description';
    
        OPEN o_get_description FOR
            SELECT pk_events.get_event_type_title(i_lang,
                                                  pk_events.get_event_type_by_epis_type(nvl(cr.id_epis_type,
                                                                                            get_epis_type_consult_req(cr.id_consult_req)))) event_type_name_title,
                   pk_translation.get_translation(i_lang, cs.code_clinical_service) event_type_clinical_service,
                   pk_translation.get_translation(i_lang, se.code_sch_event_abrv) sch_type_desc,
                   nvl2(cr.id_prof_requested,
                        pk_prof_utils.get_name_signature(i_lang, i_prof, cr.id_prof_requested),
                        pk_events.get_fe_request_prof_str(i_lang, i_prof, cr.id_consult_req, pk_alert_constant.g_no)) professional,
                   id_episode_to_exec id_episode,
                   cr.dt_begin_event
              FROM consult_req cr
              JOIN dep_clin_serv dcs
                ON (dcs.id_dep_clin_serv = cr.id_dep_clin_serv)
              JOIN clinical_service cs
                ON (cs.id_clinical_service = dcs.id_clinical_service)
              JOIN department d
                ON (dcs.id_department = d.id_department)
              JOIN dept dept
                ON (d.id_dept = dept.id_dept)
              JOIN sch_event se
                ON se.id_sch_event = cr.id_sch_event
              LEFT JOIN schedule sch
                ON (sch.id_schedule = cr.id_schedule)
              LEFT JOIN future_event_type fet
                ON (fet.id_epis_type = nvl(cr.id_epis_type, get_epis_type_consult_req(cr.id_consult_req)))
             WHERE cr.id_episode_to_exec IN (SELECT *
                                               FROM TABLE(i_id_episode))
               AND cr.flg_status NOT IN pk_consult_req.g_consult_req_stat_proc;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_get_description);
            pk_alert_exceptions.reset_error_state;
            RETURN FALSE;
        
    END get_fe_description;

    /** @headcom
    * Public Function. Get event
    *
    * @param      I_LANG                     Language identification
    * @param      i_prof                     Professional identification
    * @param      i_flag                     Flag scheduling type
    * @param      i_dep_clin_serv            Service/speciality identification
    * @param      i_institution              Destination institution identifier
    * @param      o_event                    Cursor with data about event type
    * @param      o_error                    Error
    *
    * @return     boolean
    * @author     SS (based on pk_backoffice_prd_trgt.get_event)
    * @version    2.5.0.4
    * @since      2010/07/23
    */

    FUNCTION get_events
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_dep_type      IN sch_dep_type.dep_type%TYPE,
        i_dep_clin_serv IN dep_clin_serv.id_dep_clin_serv%TYPE,
        i_institution   IN institution.id_institution%TYPE,
        o_events        OUT pk_types.cursor_type,
        o_error         OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(40) := 'GET_EVENTS';
    BEGIN
        OPEN o_events FOR
        
            SELECT DISTINCT id_sch_event data, desc_sch_event, flg_target_professional
              FROM (SELECT se.id_sch_event,
                           pk_schedule_common.get_translation_alias(i_lang, i_prof, se.id_sch_event, se.code_sch_event) desc_sch_event,
                           se.flg_target_professional,
                           CASE
                                WHEN (SELECT COUNT(1)
                                        FROM sch_event_dcs
                                       WHERE id_sch_event = se.id_sch_event
                                         AND id_dep_clin_serv = dcs.id_dep_clin_serv
                                         AND flg_available = 'Y') = 0 THEN
                                 'I'
                                ELSE
                                 'A'
                            END checked
                      FROM dep_clin_serv dcs
                      JOIN department d
                        ON dcs.id_department = d.id_department
                      JOIN sch_department sd
                        ON d.id_department = sd.id_department
                      JOIN sch_dep_type sdt
                        ON sd.flg_dep_type = sdt.dep_type
                      JOIN sch_event se
                        ON se.dep_type = sd.flg_dep_type
                     WHERE d.id_institution = i_institution
                       AND dcs.id_dep_clin_serv = i_dep_clin_serv
                       AND d.flg_available = pk_alert_constant.g_yes
                       AND dcs.flg_available = pk_alert_constant.g_yes
                       AND se.flg_available = pk_alert_constant.g_yes
                       AND sd.flg_dep_type = i_dep_type
                       AND (sdt.dep_type_group <> pk_schedule_common.g_sch_dept_flg_dep_type_cons OR EXISTS
                            (SELECT 1
                               FROM appointment a
                              WHERE a.id_clinical_service = dcs.id_clinical_service
                                AND a.id_sch_event = se.id_sch_event
                                AND a.flg_available = pk_alert_constant.g_yes))
                       AND pk_schedule_common.get_sch_event_avail(se.id_sch_event, i_institution, 0) =
                           pk_alert_constant.g_yes)
             WHERE desc_sch_event IS NOT NULL
               AND checked = 'A'
             ORDER BY desc_sch_event ASC;
    
        RETURN TRUE;
    
    EXCEPTION
    
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_types.open_my_cursor(o_events);
            pk_alert_exceptions.reset_error_state;
            RETURN FALSE;
        
    END get_events;

    FUNCTION get_events
    (
        i_lang          IN language.id_language%TYPE,
        i_prof          IN profissional,
        i_dep_clin_serv IN dep_clin_serv.id_dep_clin_serv%TYPE,
        i_institution   IN institution.id_institution%TYPE
    ) RETURN t_tbl_core_domain IS
        l_func_name VARCHAR2(40) := 'GET_EVENTS';
    
        l_epis_type         epis_type.id_epis_type%TYPE;
        l_future_event_type future_event_type.id_future_event_type%TYPE;
        l_flg_type          future_event_type.flg_type%TYPE;
        l_title             pk_translation.t_desc_translation;
    
        l_return t_tbl_core_domain;
        l_error  t_error_out;
    BEGIN
        g_error := 'ERROR CALLING GET_FET_EP_BY_TASK_TYPE';
        IF NOT pk_events.get_fet_ep_by_task_type(i_lang              => i_lang,
                                                 i_prof              => i_prof,
                                                 i_id_task_type      => 30, --MEDICAL APPOINTMENT
                                                 o_future_event_type => l_future_event_type,
                                                 o_epis_type         => l_epis_type,
                                                 o_flg_type          => l_flg_type,
                                                 o_title             => l_title,
                                                 o_error             => l_error)
        THEN
            RETURN t_tbl_core_domain();
        END IF;
    
        g_error := 'OPEN L_RETURN';
        SELECT *
          BULK COLLECT
          INTO l_return
          FROM (SELECT t_row_core_domain(internal_name => NULL,
                                         desc_domain   => label,
                                         domain_value  => data,
                                         order_rank    => NULL,
                                         img_name      => NULL)
                  FROM (SELECT DISTINCT id_sch_event data, desc_sch_event label, flg_target_professional
                          FROM (SELECT se.id_sch_event,
                                       pk_schedule_common.get_translation_alias(i_lang,
                                                                                i_prof,
                                                                                se.id_sch_event,
                                                                                se.code_sch_event) desc_sch_event,
                                       se.flg_target_professional,
                                       CASE
                                            WHEN (SELECT COUNT(1)
                                                    FROM sch_event_dcs
                                                   WHERE id_sch_event = se.id_sch_event
                                                     AND id_dep_clin_serv = dcs.id_dep_clin_serv
                                                     AND flg_available = 'Y') = 0 THEN
                                             'I'
                                            ELSE
                                             'A'
                                        END checked
                                  FROM dep_clin_serv dcs
                                  JOIN department d
                                    ON dcs.id_department = d.id_department
                                  JOIN sch_department sd
                                    ON d.id_department = sd.id_department
                                  JOIN sch_dep_type sdt
                                    ON sd.flg_dep_type = sdt.dep_type
                                  JOIN sch_event se
                                    ON se.dep_type = sd.flg_dep_type
                                 WHERE d.id_institution = i_institution
                                   AND dcs.id_dep_clin_serv = i_dep_clin_serv
                                   AND d.flg_available = pk_alert_constant.g_yes
                                   AND dcs.flg_available = pk_alert_constant.g_yes
                                   AND se.flg_available = pk_alert_constant.g_yes
                                   AND sd.flg_dep_type = l_flg_type
                                   AND (sdt.dep_type_group <> pk_schedule_common.g_sch_dept_flg_dep_type_cons OR EXISTS
                                        (SELECT 1
                                           FROM appointment a
                                          WHERE a.id_clinical_service = dcs.id_clinical_service
                                            AND a.id_sch_event = se.id_sch_event
                                            AND a.flg_available = pk_alert_constant.g_yes))
                                   AND pk_schedule_common.get_sch_event_avail(se.id_sch_event, i_institution, 0) =
                                       pk_alert_constant.g_yes)
                         WHERE desc_sch_event IS NOT NULL
                           AND checked = 'A'
                         ORDER BY desc_sch_event ASC));
    
        RETURN l_return;
    
    EXCEPTION
    
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              l_error);
            pk_alert_exceptions.reset_error_state;
            RETURN t_tbl_core_domain();
        
    END get_events;

    /********************************************************************************************
    * get_family_doctor
    *
    * @param      i_PATIENT        
    *
    * @return  ID_FAMILY DOCTOR
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/07/28
    **********************************************************************************************/
    FUNCTION get_family_doctor(i_id_patient IN patient.id_patient%TYPE) RETURN NUMBER IS
        l_id_fam_doctor pat_family_prof.id_professional%TYPE;
    BEGIN
        SELECT id_professional
          INTO l_id_fam_doctor
          FROM ((SELECT pfp.id_professional, p.nick_name, 1
                   FROM patient pat, pat_family_prof pfp, professional p
                  WHERE pat.id_patient = i_id_patient
                    AND pfp.id_patient = pat.id_patient
                    AND p.id_professional = pfp.id_professional
                 UNION ALL
                 SELECT pfp.id_professional, p.nick_name, 2
                   FROM patient pat, pat_family_prof pfp, professional p
                  WHERE pat.id_patient = i_id_patient
                    AND pfp.id_pat_family = pat.id_pat_family
                    AND p.id_professional = pfp.id_professional) ORDER BY 3)
         WHERE rownum = 1;
    
        RETURN l_id_fam_doctor;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END;

    /********************************************************************************************
    * get episode list
    *
    * @param i_lang                language identifier
    * @param i_prof                professional registered by identifier
    * @param i_patient             patient identifier
    * @param i_task_type  
    * @param i_dep_clin_serv  
    * @param i_inst_requested      
    * @param o_list                return cursor
    *
    * @param o_error               mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/08/16
    **********************************************************************************************/
    FUNCTION get_episode_list
    (
        i_lang           IN language.id_language%TYPE,
        i_prof           IN profissional,
        i_patient        IN consult_req.id_patient%TYPE,
        i_task_type      IN future_event_type.id_task_type%TYPE,
        i_dep_clin_serv  IN consult_req.id_dep_clin_serv%TYPE,
        i_inst_requested IN consult_req.id_inst_requested%TYPE,
        o_list           OUT pk_types.cursor_type,
        o_error          OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(60 CHAR) := 'GET_EPISODE_LIST';
    BEGIN
        g_sysdate_tstz := current_timestamp;
    
        g_error := 'GET O_LIST';
        OPEN o_list FOR
            SELECT t.id_episode
              FROM TABLE(get_patient_future_events_pl(i_lang, i_prof, i_patient)) t
              JOIN future_event_type fet
                ON fet.id_future_event_type = t.id_future_event_type
             WHERE t.event_type IN ('FUTURE_EVENTS', 'SCHEDULED_EPISODES')
               AND t.id_episode IS NOT NULL
               AND nvl(pk_date_utils.get_string_tstz(i_lang, i_prof, t.order_date, NULL), g_sysdate_tstz) >=
                   g_sysdate_tstz
               AND fet.id_task_type = i_task_type
               AND t.dep_clin_serv = i_dep_clin_serv
               AND t.id_location = i_inst_requested;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_types.open_my_cursor(o_list);
            RETURN FALSE;
    END get_episode_list;

    /********************************************************************************************
    * insert order_se combination 
    *
    * @param      i_lang                   Língua registada como preferência do profissional
    * @param      i_prof                   profissional identifier
    * @param      i_patient                patient identifier   
    * @param      i_comb_name              combination name   
    * @param      i_dt_suggest_begin       suggest date begin   
    * @param      i_dt_suggest_end         suggest date end   
    * @param      i_single_visit           single visit   
    * @param      i_flg_freq_origin_module flag origin module 
    * @param      i_future_event_type_list future event type list identifiers
    * @param      i_event_list             event list identifiers           
    * @param      i_dependencies_from           list of existing dependencies from
    * @param      i_dependencies_to           list of existing dependencies to
    * @param      i_lag_min                grid of minimum values
    * @param      i_lag_max                grid of max values
    * @param      i_lag_unit_meas      grid of max unit measures 
    *
    * @param      o_error                  mensagem de erro
    *
    * @return  true or false on success or error
    * @author  Paulo Teixeira
    * @version 1.0
    * @since  2010/08/17
    **********************************************************************************************/
    FUNCTION insert_order_set_combination
    (
        i_lang                   IN language.id_language%TYPE,
        i_prof                   IN profissional,
        i_patient                IN combination_spec.id_patient%TYPE,
        i_comb_name              IN combination_spec.comb_name%TYPE,
        i_dt_suggest_begin       IN VARCHAR2,
        i_dt_suggest_end         IN VARCHAR2,
        i_single_visit           IN combination_spec.flg_single_visit%TYPE,
        i_flg_freq_origin_module IN combination_spec.flg_freq_origin_module%TYPE,
        i_task_type_list         IN table_number,
        i_event_list             IN table_number,
        i_dependencies_from      IN table_number,
        i_dependencies_to        IN table_number,
        i_lag_min                IN table_number,
        i_lag_max                IN table_number,
        i_lag_unit_meas          IN table_number,
        i_episode                IN combination_spec.id_episode%TYPE,
        o_error                  OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name           VARCHAR2(60 CHAR) := 'INSERT_ORDER_SET_COMBINATION';
        l_id_combination_spec combination_spec.id_combination_spec%TYPE;
        l_combination_events  combination_events.id_combination_events%TYPE;
        --l_task_dependency     table_number := table_number();
        l_dependencies      table_table_number := table_table_number();
        l_lag_min           table_table_number := table_table_number();
        l_lag_max           table_table_number := table_table_number();
        l_lag_unit_meas     table_table_number := table_table_number();
        l_list_aux          table_number := table_number();
        l_flg_conflict_fe   VARCHAR2(1 CHAR);
        l_msg_title_fe      sys_message.desc_message%TYPE;
        l_msg_body_fe       sys_message.desc_message%TYPE;
        l_msg_text_fe       sys_message.desc_message%TYPE;
        l_template_fe       sys_message.desc_message%TYPE;
        l_code_fe           sys_message.desc_message%TYPE;
        l_dt_suggest_end    VARCHAR2(14 CHAR);
        l_current_timestamp DATE := current_timestamp;
    BEGIN
    
        g_error := 'initialize variables';
        l_dependencies.extend(i_event_list.count);
        l_lag_min.extend(i_event_list.count);
        l_lag_max.extend(i_event_list.count);
        l_lag_unit_meas.extend(i_event_list.count);
        l_list_aux.extend(i_event_list.count);
    
        FOR i IN 1 .. i_event_list.count
        LOOP
            l_dependencies(i) := l_list_aux;
            l_lag_min(i) := l_list_aux;
            l_lag_max(i) := l_list_aux;
            l_lag_unit_meas(i) := l_list_aux;
        END LOOP;
    
        g_error := 'build input variables';
        FOR i IN 1 .. i_dependencies_from.count
        LOOP
            l_dependencies(i_dependencies_to(i))(i_dependencies_from(i)) := 1;
            l_lag_min(i_dependencies_to(i))(i_dependencies_from(i)) := i_lag_min(i);
            l_lag_max(i_dependencies_to(i))(i_dependencies_from(i)) := i_lag_max(i);
            l_lag_unit_meas(i_dependencies_to(i))(i_dependencies_from(i)) := i_lag_unit_meas(i);
        END LOOP;
    
        IF NOT check_total_lag(i_lang             => i_lang,
                               i_prof             => i_prof,
                               i_dt_suggest_begin => substr(i_dt_suggest_begin, 1, 8),
                               i_dt_suggest_end   => substr(i_dt_suggest_end, 1, 8),
                               i_flg_single_visit => nvl(i_single_visit, pk_alert_constant.g_no),
                               i_grid             => l_dependencies,
                               i_lag_min          => l_lag_min,
                               i_lag_max          => l_lag_max,
                               i_lag_unit_meas    => l_lag_unit_meas,
                               o_flg_conflict     => l_flg_conflict_fe,
                               o_msg_title        => l_msg_title_fe,
                               o_msg_body         => l_msg_body_fe,
                               o_msg_text         => l_msg_text_fe,
                               o_template         => l_template_fe,
                               o_code             => l_code_fe,
                               o_dt_suggest_end   => l_dt_suggest_end,
                               o_error            => o_error)
        THEN
            RETURN FALSE;
        END IF;
    
        g_error := 'CALL INSERT_COMBINATION_SPEC_NC';
        IF NOT pk_events.insert_combination_spec_nc(i_lang                   => i_lang,
                                                    i_prof                   => i_prof,
                                                    i_patient                => i_patient,
                                                    i_comb_name              => i_comb_name,
                                                    i_dt_suggest_begin       => pk_date_utils.get_string_tstz(i_lang,
                                                                                                              i_prof,
                                                                                                              nvl(i_dt_suggest_begin,
                                                                                                                  to_char(l_current_timestamp,
                                                                                                                          'YYYYMMDD') ||
                                                                                                                  '000000'),
                                                                                                              NULL),
                                                    i_dt_suggest_end         => pk_date_utils.get_string_tstz(i_lang,
                                                                                                              i_prof,
                                                                                                              l_dt_suggest_end ||
                                                                                                              '000000',
                                                                                                              NULL),
                                                    i_flg_status             => g_flg_comb_state_active,
                                                    i_single_visit           => i_single_visit,
                                                    i_flg_freq_origin_module => i_flg_freq_origin_module,
                                                    i_episode                => i_episode,
                                                    o_id_combination_spec    => l_id_combination_spec,
                                                    o_error                  => o_error)
        THEN
            RAISE g_exception;
        END IF;
    
        FOR i IN 1 .. i_event_list.count
        LOOP
            BEGIN
                SELECT ce.id_combination_events
                  INTO l_combination_events
                  FROM combination_events ce
                 WHERE ce.id_future_event_type = get_fet_by_task_type(i_lang, i_prof, i_task_type_list(i))
                   AND ce.id_event = i_event_list(i);
            EXCEPTION
                WHEN OTHERS THEN
                    l_combination_events := NULL;
            END;
        
            IF l_combination_events IS NULL
            THEN
                g_error := 'CALL INSERT_COMBINATION_EVENTS_NC(' || i || ')';
                IF NOT pk_events.insert_combination_events_nc(i_lang              => i_lang,
                                                              i_prof              => i_prof,
                                                              i_combination_spec  => l_id_combination_spec,
                                                              i_future_event_type => get_fet_by_task_type(i_lang,
                                                                                                          i_prof,
                                                                                                          i_task_type_list(i)),
                                                              i_event             => i_event_list(i),
                                                              i_flg_status        => g_flg_comb_state_active,
                                                              i_rank              => i,
                                                              o_error             => o_error)
                THEN
                    RAISE g_exception;
                END IF;
            ELSE
                g_error := 'CALL UPDATE_COMBINATION_EVENTS_NC(' || i || ')';
                IF NOT pk_events.update_combination_events_nc(i_lang              => i_lang,
                                                              i_prof              => i_prof,
                                                              i_combination_event => l_combination_events,
                                                              i_combination_spec  => l_id_combination_spec,
                                                              i_future_event_type => get_fet_by_task_type(i_lang,
                                                                                                          i_prof,
                                                                                                          i_task_type_list(i)),
                                                              i_event             => i_event_list(i),
                                                              i_flg_status        => g_flg_comb_state_active,
                                                              i_rank              => i,
                                                              o_error             => o_error)
                THEN
                    RAISE g_exception;
                END IF;
            END IF;
        
        END LOOP;
    
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_func_name,
                                              o_error);
            pk_alert_exceptions.reset_error_state;
            pk_utils.undo_changes;
            RETURN FALSE;
    END insert_order_set_combination;

    /********************************************************************************************
    * Returns the professionals names
    *
    * @param   i_lang             language
    * @param   i_prof             professional, institution and software ids
    * @param   i_schedule         schedule id
    *
    * @author  Paulo Teixeira
    * @version 2.6
    * @since   2010/08/20
    **********************************************************************************************/
    FUNCTION get_multi_name_signature
    (
        i_lang     IN language.id_language%TYPE,
        i_prof     IN profissional,
        i_schedule IN schedule.id_schedule%TYPE,
        i_sep      IN VARCHAR2 DEFAULT ';'
    ) RETURN VARCHAR2 IS
        l_professional VARCHAR2(4000);
        l_sep          VARCHAR2(0010 CHAR) := i_sep || chr(32);
    BEGIN
    
        IF i_schedule IS NOT NULL
        THEN
        
            SELECT listagg(t.prof_name, l_sep) within GROUP(ORDER BY decode(t.flg_leader, 'Y', 0, 1), t.prof_name) prof_list
              INTO l_professional
              FROM (SELECT pk_prof_utils.get_name_signature(i_lang, i_prof, sr.id_professional) prof_name, sr.flg_leader
                      FROM sch_resource sr
                     WHERE sr.id_schedule = i_schedule) t;
        
        END IF;
    
        RETURN l_professional;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_multi_name_signature;

    /**
    * Returns the locations belonging to a group.
    *
    * @param    i_lang           Language
    * @param    i_prof           Professional
    * @param    o_list           Cursor with output info    
    * @param    o_error           Error message if something goes wrong
    *
    * @author  Sofia Mendes
    * @version 2.5.0.4
    * @since   2009/07/03    
    */
    FUNCTION get_locations
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_institution IN institution.id_institution%TYPE,
        o_list        OUT pk_types.cursor_type,
        o_error       OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name   VARCHAR2(32) := 'GET_LOCATIONS';
        l_institution institution.id_institution%TYPE := i_institution;
    BEGIN
        IF (i_institution IS NULL)
        THEN
            l_institution := i_prof.institution;
        END IF;
    
        g_error := 'OPEN CURSOR';
        OPEN o_list FOR
            SELECT t.id_institution AS data,
                   pk_translation.get_translation(i_lang, t.code_institution) AS label,
                   CASE
                        WHEN t.id_institution = l_institution THEN
                         pk_alert_constant.g_yes
                        ELSE
                         pk_alert_constant.g_no
                    END AS flg_select,
                   1 order_field
              FROM (SELECT inst.id_institution, inst.code_institution
                      FROM institution inst
                      JOIN institution mine
                        ON (mine.id_parent = inst.id_parent)
                     WHERE mine.id_institution = i_prof.institution
                    UNION
                    SELECT i_prof.institution, i.code_institution
                      FROM institution i
                     WHERE i.id_institution = i_prof.institution) t
            -- WHERE t.id_institution IN (SELECT sp.id_institution
            --                              FROM sch_permission sp
            --                             WHERE sp.id_professional = i_prof.id)
             ORDER BY label;
        RETURN TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            pk_types.open_my_cursor(o_list);
            pk_alert_exceptions.process_error(i_lang     => i_lang,
                                              i_sqlcode  => SQLCODE,
                                              i_sqlerrm  => SQLERRM,
                                              i_message  => g_error,
                                              i_owner    => g_pk_owner,
                                              i_package  => g_package_name,
                                              i_function => l_func_name,
                                              o_error    => o_error);
            pk_alert_exceptions.reset_error_state;
            RETURN FALSE;
    END get_locations;

    FUNCTION get_locations
    (
        i_lang        IN language.id_language%TYPE,
        i_prof        IN profissional,
        i_institution IN institution.id_institution%TYPE
    ) RETURN t_tbl_core_domain IS
        l_func_name   VARCHAR2(32) := 'GET_LOCATIONS';
        l_institution institution.id_institution%TYPE := i_institution;
    
        l_return t_tbl_core_domain;
        l_error  t_error_out;
    
    BEGIN
    
        IF (i_institution IS NULL)
        THEN
            l_institution := i_prof.institution;
        END IF;
    
        g_error := 'OPEN L_RETURN';
        SELECT *
          BULK COLLECT
          INTO l_return
          FROM (SELECT t_row_core_domain(internal_name => NULL,
                                         desc_domain   => label,
                                         domain_value  => data,
                                         order_rank    => NULL,
                                         img_name      => NULL)
                  FROM (SELECT t.id_institution AS data,
                               pk_translation.get_translation(i_lang, t.code_institution) AS label,
                               CASE
                                    WHEN t.id_institution = l_institution THEN
                                     pk_alert_constant.g_yes
                                    ELSE
                                     pk_alert_constant.g_no
                                END AS flg_select,
                               1 order_field
                          FROM (SELECT inst.id_institution, inst.code_institution
                                  FROM institution inst
                                  JOIN institution mine
                                    ON (mine.id_parent = inst.id_parent)
                                 WHERE mine.id_institution = i_prof.institution
                                UNION
                                SELECT i_prof.institution, i.code_institution
                                  FROM institution i
                                 WHERE i.id_institution = i_prof.institution) t
                         ORDER BY label));
    
        RETURN l_return;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang     => i_lang,
                                              i_sqlcode  => SQLCODE,
                                              i_sqlerrm  => SQLERRM,
                                              i_message  => g_error,
                                              i_owner    => g_pk_owner,
                                              i_package  => g_package_name,
                                              i_function => l_func_name,
                                              o_error    => l_error);
            pk_alert_exceptions.reset_error_state;
            RETURN t_tbl_core_domain();
    END get_locations;

    /********************************************************************************************
    * get professional that created the appointment request
    *
    * @param      i_consult_req       id_consult_req
    *
    * @return  event type  description 
    * @author  Paulo Teixeira
    * @version 2.6.0.5.1.3
    * @since  2011/01/12
    **********************************************************************************************/
    FUNCTION get_id_prof_create_consult_req(i_consult_req IN consult_req.id_consult_req%TYPE) RETURN NUMBER IS
        l_prof_create consult_req.id_prof_last_update%TYPE;
    BEGIN
    
        SELECT id_prof_last_update
          INTO l_prof_create
          FROM (SELECT cr.id_prof_last_update id_prof_last_update, cr.dt_last_update dt_last_update
                  FROM consult_req cr
                 WHERE cr.id_consult_req = i_consult_req
                UNION ALL
                SELECT crh.id_prof_last_update id_prof_last_update, crh.dt_last_update dt_last_update
                  FROM consult_req_hist crh
                 WHERE crh.id_consult_req = i_consult_req
                 ORDER BY dt_last_update ASC)
         WHERE rownum = 1;
    
        RETURN l_prof_create;
    
    EXCEPTION
        WHEN OTHERS THEN
            RETURN NULL;
    END get_id_prof_create_consult_req;

    /********************************************************************************************
    * get event type by episisode type
    *
    * @param      i_epis_type       episode type   
    *
    * @return  event type  description 
    * @author  Paulo teixeira
    * @version 1.0
    * @since  2011/09/27
    **********************************************************************************************/
    FUNCTION get_flg_type_by_epis_type(i_epis_type IN future_event_type.id_epis_type%TYPE) RETURN VARCHAR2 IS
        l_flg_type future_event_type.flg_type%TYPE;
    BEGIN
        SELECT f.flg_type
          INTO l_flg_type
          FROM future_event_type f
         WHERE f.id_epis_type = i_epis_type;
    
        RETURN l_flg_type;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN 'C';
    END get_flg_type_by_epis_type;

    /**
    * search function to the scheduler
    *
    * @param    i_lang           Language
    * @param    i_prof           Professional
    * @param    i_id_inst_requested   requested institution identifier, not null
    * @param    i_id_patient         patient identifier
    * @param    i_id_department       department identifier
    * @param    i_id_clinical_service clinical service identifier
    * @param    i_id_appointment     appointment identifier
    * @param    i_dep_type           dep_type
    * @param    i_id_prof_requested  requested professional identifier
    * @param    i_dt_begin_event     begin event date
    * @param    i_dt_end_event       end event date
    * @param    i_flg_priority       flag priority
    * @param    i_age_min            miminum age
    * @param    i_age_max            max age
    * @param    i_gender             gender
    * @param    i_start_pag          start page
    * @param    i_offset_pag         number of records per page
    *   
    * @param    o_list           Cursor with output info    
    * @param    o_error           Error message if something goes wrong
    *
    * @author  Paulo Teixeira
    * @version 2.6.1.6
    * @since   2011/12/02    
    */
    FUNCTION search_events
    (
        i_lang                IN language.id_language%TYPE,
        i_prof                IN profissional,
        i_id_inst_requested   IN table_number,
        i_id_patient          IN patient.id_patient%TYPE,
        i_id_department       IN department.id_department%TYPE,
        i_id_clinical_service IN clinical_service.id_clinical_service%TYPE,
        i_id_appointment      IN appointment.id_appointment%TYPE,
        i_dep_type            IN sch_event.dep_type%TYPE,
        i_id_prof_requested   IN consult_req.id_prof_requested%TYPE,
        i_dt_begin_event      IN TIMESTAMP WITH LOCAL TIME ZONE,
        i_dt_end_event        IN TIMESTAMP WITH LOCAL TIME ZONE,
        i_flg_priority        IN consult_req.flg_priority%TYPE,
        i_age_min             IN NUMBER,
        i_age_max             IN NUMBER,
        i_gender              IN patient.gender%TYPE,
        i_start_pag           IN NUMBER,
        i_offset_pag          IN NUMBER,
        o_list                OUT cr_events_cur,
        o_error               OUT t_error_out
    ) RETURN BOOLEAN IS
        l_func_name VARCHAR2(32) := 'SEARCH_EVENTS';
        l_first     NUMBER(24) := 1;
        l_last      NUMBER(24) := 99999999999999999999;
    BEGIN
    
        IF i_start_pag IS NOT NULL
           AND i_offset_pag IS NOT NULL
        THEN
            l_last  := i_start_pag * i_offset_pag;
            l_first := l_last - i_offset_pag + 1;
        END IF;
    
        g_error := 'pk_events.search_events -> OPEN CURSOR';
        OPEN o_list FOR
            SELECT aux2.idpatient,
                   aux2.iddepclinserv,
                   aux2.idservice,
                   aux2.idspeciality,
                   aux2.idcontent,
                   aux2.flgtype,
                   aux2.idrequisition,
                   aux2.dtcreation,
                   aux2.idusercreation,
                   aux2.idinstitution,
                   aux2.idresource,
                   aux2.resourcetype,
                   aux2.dtsugested,
                   aux2.dtbeginmin,
                   aux2.dtbeginmax,
                   aux2.flgcontacttype,
                   aux2.priority,
                   aux2.idlanguage,
                   aux2.idmotive,
                   aux2.motivetype,
                   aux2.motivedescription,
                   aux2.daylynumberdays,
                   aux2.flgweeklyfriday,
                   aux2.flgweeklymonday,
                   aux2.flgweeklysaturday,
                   aux2.flgweeklysunday,
                   aux2.flgweeklythursday,
                   aux2.flgweeklytuesday,
                   aux2.flgweeklywednesday,
                   aux2.weeklynumberweeks,
                   aux2.monthlynumbermonths,
                   aux2.monthlydaynumber,
                   aux2.monthlyweekday,
                   aux2.monthlyweeknumber,
                   aux2.yearlyyearnumber,
                   aux2.yearlymonthdaynumber,
                   aux2.yearlymonthnumber,
                   aux2.yearlyweekday,
                   aux2.yearlyweeknumber,
                   aux2.yearlyweekdaymonthnumber,
                   aux2.flgreccurencepattern,
                   aux2.recurrencebegindate,
                   aux2.recurrenceenddate,
                   aux2.recurrenceendnumber,
                   aux2.sessionnumber,
                   aux2.frequencyunit,
                   aux2.frequency,
                   aux2.totalrecordnumber
              FROM (SELECT aux.id_patient idpatient,
                           aux.id_dep_clin_serv iddepclinserv,
                           aux.id_department idservice,
                           aux.id_clinical_service idspeciality,
                           aux.id_appointment idcontent,
                           g_flgtype flgtype,
                           aux.id_consult_req idrequisition,
                           aux.dt_order dtcreation,
                           aux.id_prof_req idusercreation,
                           aux.id_inst_requested idinstitution,
                           aux.id_prof_requested idresource,
                           g_resourcetype resourcetype,
                           aux.dt_begin dtsugested,
                           aux.dt_begin dtbeginmin,
                           aux.dt_end dtbeginmax,
                           aux.flg_contact_type flgcontacttype,
                           aux.flg_priority priority,
                           aux.id_language idlanguage,
                           aux.id_complaint idmotive,
                           CASE
                                WHEN aux.id_complaint IS NOT NULL THEN
                                 (SELECT pk_translation.get_translation(i_lang, c.code_complaint)
                                    FROM complaint c
                                   WHERE c.id_complaint = aux.id_complaint)
                                ELSE
                                 aux.reason_for_visit
                            END motivedescription,
                           CASE
                                WHEN aux.id_complaint IS NOT NULL THEN
                                 g_complaint
                                ELSE
                                 NULL
                            END motivetype,
                           NULL sessionnumber,
                           NULL frequencyunit,
                           NULL frequency,
                           row_number() over(ORDER BY aux.id_consult_req) linenumber,
                           COUNT(1) over() totalrecordnumber,
                           aux.daylynumberdays,
                           aux.flgweeklyfriday,
                           aux.flgweeklymonday,
                           aux.flgweeklysaturday,
                           aux.flgweeklysunday,
                           aux.flgweeklythursday,
                           aux.flgweeklytuesday,
                           aux.flgweeklywednesday,
                           aux.weeklynumberweeks,
                           aux.monthlynumbermonths,
                           aux.monthlydaynumber,
                           aux.monthlyweekday,
                           aux.monthlyweeknumber,
                           aux.yearlyyearnumber,
                           aux.yearlymonthdaynumber,
                           aux.yearlymonthnumber,
                           aux.yearlyweekday,
                           aux.yearlyweeknumber,
                           aux.yearlyweekdaymonthnumber,
                           aux.flgreccurencepattern,
                           aux.recurrencebegindate,
                           aux.recurrenceenddate,
                           aux.recurrenceendnumber
                      FROM (SELECT cr.id_inst_requested,
                                   d.id_department,
                                   cs.id_clinical_service,
                                   nvl(a.id_appointment, a2.id_appointment) id_appointment,
                                   nvl(se.dep_type, se2.dep_type) dep_type,
                                   (SELECT rp.id_professional
                                      FROM request_prof rp
                                     WHERE rp.id_consult_req = cr.id_consult_req
                                       AND rp.flg_active = pk_alert_constant.g_yes
                                       AND rownum = 1) id_prof_requested,
                                   cr.dt_begin_event dt_begin,
                                   cr.dt_end_event dt_end,
                                   cr.flg_priority,
                                   nvl(pk_patient.get_pat_age(i_lang        => i_lang,
                                                              i_dt_birth    => p.dt_birth,
                                                              i_dt_deceased => p.dt_deceased,
                                                              i_age         => p.age,
                                                              i_age_format  => 'YEARS',
                                                              i_patient     => p.id_patient),
                                       0) l_age,
                                   
                                   /* nvl(pk_patient.get_pat_age(i_lang,
                                   p.dt_birth,
                                   p.dt_deceased,
                                   p.age,
                                   i_prof.institution,
                                   i_prof.software),0) l_age,  */
                                   --    NULL L_AGE ,                                           
                                   p.gender,
                                   cr.dt_consult_req_tstz dt_order,
                                   cr.id_patient,
                                   cr.id_dep_clin_serv,
                                   cr.id_consult_req,
                                   cr.id_prof_req,
                                   cr.flg_contact_type,
                                   cr.id_language,
                                   cr.id_complaint,
                                   cr.reason_for_visit,
                                   
                                   decode(cr.flg_recurrence, g_flg_not_repeat, NULL, cr.flg_recurrence) flgreccurencepattern,
                                   decode(cr.flg_recurrence, g_flg_daily, cr.frequency) daylynumberdays,
                                   decode(cr.flg_recurrence, g_flg_weekly, cr.frequency) weeklynumberweeks,
                                   decode(cr.flg_recurrence,
                                          g_flg_weekly,
                                          decode(cr.week_day, 1, pk_alert_constant.g_yes, pk_alert_constant.g_no)) flgweeklymonday,
                                   decode(cr.flg_recurrence,
                                          g_flg_weekly,
                                          decode(cr.week_day, 2, pk_alert_constant.g_yes, pk_alert_constant.g_no)) flgweeklytuesday,
                                   decode(cr.flg_recurrence,
                                          g_flg_weekly,
                                          decode(cr.week_day, 3, pk_alert_constant.g_yes, pk_alert_constant.g_no)) flgweeklywednesday,
                                   decode(cr.flg_recurrence,
                                          g_flg_weekly,
                                          decode(cr.week_day, 4, pk_alert_constant.g_yes, pk_alert_constant.g_no)) flgweeklythursday,
                                   decode(cr.flg_recurrence,
                                          g_flg_weekly,
                                          decode(cr.week_day, 5, pk_alert_constant.g_yes, pk_alert_constant.g_no)) flgweeklyfriday,
                                   decode(cr.flg_recurrence,
                                          g_flg_weekly,
                                          decode(cr.week_day, 6, pk_alert_constant.g_yes, pk_alert_constant.g_no)) flgweeklysaturday,
                                   decode(cr.flg_recurrence,
                                          g_flg_weekly,
                                          decode(cr.week_day, 7, pk_alert_constant.g_yes, pk_alert_constant.g_no)) flgweeklysunday,
                                   decode(cr.flg_recurrence, g_flg_monthly, cr.frequency) monthlynumbermonths,
                                   decode(cr.flg_recurrence, g_flg_monthly, cr.month_day) monthlydaynumber,
                                   decode(cr.flg_recurrence, g_flg_monthly, cr.week_day) monthlyweekday,
                                   decode(cr.flg_recurrence, g_flg_monthly, cr.week_nr) monthlyweeknumber,
                                   decode(cr.flg_recurrence, g_flg_yearly, cr.frequency) yearlyyearnumber,
                                   decode(cr.flg_recurrence, g_flg_yearly, cr.month_day) yearlymonthdaynumber,
                                   decode(cr.flg_recurrence, g_flg_yearly, cr.month_nr) yearlymonthnumber,
                                   decode(cr.flg_recurrence, g_flg_yearly, cr.week_day) yearlyweekday,
                                   decode(cr.flg_recurrence, g_flg_yearly, cr.week_nr) yearlyweeknumber,
                                   decode(cr.flg_recurrence, g_flg_yearly, cr.month_nr) yearlyweekdaymonthnumber,
                                   cr.dt_rec_end recurrenceenddate,
                                   cr.dt_rec_begin recurrencebegindate,
                                   cr.nr_events recurrenceendnumber
                              FROM consult_req cr
                              JOIN dep_clin_serv dcs
                                ON dcs.id_dep_clin_serv = cr.id_dep_clin_serv
                              JOIN clinical_service cs
                                ON cs.id_clinical_service = dcs.id_clinical_service
                              JOIN department d
                                ON dcs.id_department = d.id_department
                              JOIN dept dept
                                ON d.id_dept = dept.id_dept
                              LEFT JOIN sch_event se
                                ON se.id_sch_event = cr.id_sch_event
                              LEFT JOIN patient p
                                ON p.id_patient = cr.id_patient
                              LEFT JOIN appointment a
                                ON a.id_clinical_service = cs.id_clinical_service
                               AND a.id_sch_event = cr.id_sch_event
                            --
                              LEFT JOIN sr_pos_schedule spos
                                ON spos.id_pos_consult_req = cr.id_consult_req
                              LEFT JOIN schedule_sr sr
                                ON sr.id_schedule_sr = spos.id_schedule_sr
                              LEFT JOIN schedule s
                                ON s.id_schedule = sr.id_schedule
                              LEFT JOIN sch_event se2
                                ON se2.id_sch_event = s.id_sch_event
                              LEFT JOIN appointment a2
                                ON a2.id_clinical_service = cs.id_clinical_service
                               AND a2.id_sch_event = s.id_sch_event
                            --
                             WHERE cr.flg_status IN
                                   (pk_consult_req.g_consult_req_stat_reply, pk_consult_req.g_consult_req_hold_list)
                               AND cr.id_inst_requested IN (SELECT /*+opt_estimate (table t rows=0.000001)*/
                                                             column_value
                                                              FROM TABLE(i_id_inst_requested) t)
                               AND cr.id_patient = nvl(i_id_patient, cr.id_patient)
                               AND d.id_department = nvl(i_id_department, d.id_department)
                               AND cs.id_clinical_service = nvl(i_id_clinical_service, cs.id_clinical_service)
                               AND a.id_appointment = nvl(i_id_appointment, a.id_appointment)
                               AND se.dep_type = nvl(i_dep_type, se.dep_type)
                               AND cr.flg_priority = nvl(i_flg_priority, cr.flg_priority)
                               AND p.gender = nvl(i_gender, p.gender)) aux
                     WHERE (aux.l_age BETWEEN nvl(i_age_min, 0) AND nvl(i_age_max, 999))
                       AND ((aux.id_prof_requested = nvl(i_id_prof_requested, aux.id_prof_requested)) OR
                           (i_id_prof_requested IS NULL AND aux.id_prof_requested IS NULL))
                       AND (aux.dt_begin >= nvl(i_dt_begin_event, aux.dt_begin) OR aux.dt_begin IS NULL)
                       AND (nvl(aux.dt_end, aux.dt_begin) <= nvl(i_dt_end_event, nvl(aux.dt_end, aux.dt_begin)) OR
                           nvl(aux.dt_end, aux.dt_begin) IS NULL)
                    
                     ORDER BY aux.dt_order ASC, aux.id_consult_req) aux2
             WHERE aux2.linenumber BETWEEN l_first AND l_last;
    
        RETURN TRUE;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang     => i_lang,
                                              i_sqlcode  => SQLCODE,
                                              i_sqlerrm  => SQLERRM,
                                              i_message  => g_error,
                                              i_owner    => g_pk_owner,
                                              i_package  => g_package_name,
                                              i_function => l_func_name,
                                              o_error    => o_error);
            pk_alert_exceptions.reset_error_state;
            RETURN FALSE;
    END search_events;

    FUNCTION get_lab_events_pl
    (
        i_lang    IN language.id_language%TYPE,
        i_prof    IN profissional,
        i_patient IN consult_req.id_patient%TYPE,
        i_origin  IN VARCHAR2
    ) RETURN t_coll_future_event
        PIPELINED IS
        l_msg_suggested sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'FUTURE_EVENTS_T065');
        l_msg_scheduled sys_message.desc_message%TYPE := pk_message.get_message(i_lang, i_prof, 'FUTURE_EVENTS_T066');
    
        l_msg_no_dependency sys_message.desc_message%TYPE := pk_message.get_message(i_lang,
                                                                                    i_prof,
                                                                                    'FUTURE_EVENTS_T074');
    
        v_tab    t_rec_future_event;
        c_result pk_types.cursor_type;
    
    BEGIN
    
        OPEN c_result FOR
            SELECT NULL id_event, --
                   NULL id_episode,
                   s.id_schedule id_schedule,
                   NULL id_exam_req_det,
                   NULL id_exam_req,
                   'LAB' event_type, --
                   get_event_type_icon(pk_events.g_event_type_lab) event_type_icon, --
                   get_event_type_title(i_lang, pk_events.g_event_type_lab) event_type_name_title, --
                   NULL event_type_clinical_service, --
                   NULL event_type_procedure, --
                   l_msg_no_dependency desc_dependency, --
                   pk_date_utils.dt_chr_tsz(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                          s.id_instit_requests,
                                                                                          NULL),
                                                                             nvl(s.dt_begin_tstz, s.dt_schedule_tstz)),
                                            i_prof) request_date, --
                   l_msg_scheduled request_status_desc, --
                   pk_prof_utils.get_name_signature(i_lang, i_prof, s.id_prof_requests) requested_by, --
                   NULL professional, --
                   NULL id_prof_resp,
                   NULL id_fisrt_nurse_resp,
                   pk_date_utils.dt_chr_tsz(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL,
                                                                                          s.id_instit_requests,
                                                                                          NULL),
                                                                             nvl(s.dt_begin_tstz, s.dt_schedule_tstz)),
                                            i_prof) event_date, --
                   s.flg_status status, --
                   s.flg_status flg_status, --
                   pk_utils.get_institution_name(i_lang, s.id_instit_requests) location,
                   s.id_instit_requests id_location, --
                   pk_utils.get_status_string_immediate(i_lang,
                                                        i_prof,
                                                        pk_alert_constant.g_display_type_icon,
                                                        s.flg_status,
                                                        NULL,
                                                        NULL,
                                                        'SCHEDULE.FLG_STATUS',
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL) status_icon, --
                   pk_date_utils.date_send_tsz(i_lang, nvl(s.dt_begin_tstz, s.dt_schedule_tstz), i_prof) order_date, --
                   pk_events.g_event_type_lab id_future_event_type, --
                   get_id_fet_parent(pk_events.g_event_type_lab) id_fet_parent, --
                   NULL flg_can_approve, --
                   NULL flg_can_reject, --
                   NULL flg_can_cancel, --
                   pk_alert_constant.g_no flg_can_schedule, --
                   pk_alert_constant.get_no flg_can_admit, --
                   pk_alert_constant.g_yes flg_ok,
                   'PRESENT_FUTURE' time_state, --
                   to_char(s.id_dcs_requested) dep_clin_serv, --
                   NULL sch_event, --
                   pk_alert_constant.g_no show_report,
                   NULL id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, nvl(s.dt_begin_tstz, s.dt_schedule_tstz), i_prof) dt_sched,
                   pk_date_utils.date_send_tsz(i_lang, nvl(s.dt_begin_tstz, s.dt_schedule_tstz), i_prof) dt_req_begin,
                   NULL dt_req_end,
                   NULL icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   NULL id_exam,
                   NULL id_dest_professional,
                   NULL id_sched_professional,
                   NULL dt_sched_event,
                   NULL dt_sched_event_str,
                   s.id_prof_requests id_created_professional,
                   NULL notes,
                   NULL flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   g_flgtype flg_type_of_external_resource,
                   s.id_room id_external_resource,
                   NULL id_efect_episode,
                   NULL id_waiting_list,
                   NULL status_icon_c,
                   NULL id_epis_hhc_req
              FROM schedule s, schedule_analysis sa, sch_group sg
             WHERE sg.id_patient = i_patient
               AND s.id_schedule = sa.id_schedule(+)
               AND s.id_schedule = sg.id_schedule
               AND sa.id_analysis_req IS NULL
               AND s.flg_sch_type = pk_schedule_common.g_sch_dept_flg_dep_type_anls
            -- LAB REQ SCHEDULE 
            UNION ALL
            SELECT NULL id_event, --lab.id_analysis_req_det id_event, --
                   lab.id_episode id_episode,
                   lab.id_schedule id_schedule,
                   NULL id_exam_req_det, --lab.id_analysis_req_det id_exam_req_det,
                   lab.id_analysis_req id_exam_req,
                   'LAB' event_type, --
                   get_event_type_icon(pk_events.g_event_type_lab) event_type_icon, --
                   get_event_type_title(i_lang, pk_events.g_event_type_lab) event_type_name_title, --         
                   substr(concatenate(decode(id_exam,
                                             NULL,
                                             NULL,
                                             pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                       i_prof,
                                                                                       'A',
                                                                                       'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                       lab.id_exam,
                                                                                       'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                       lab.id_sample_type,
                                                                                       NULL)) || ' / '),
                          1,
                          length(concatenate(decode(id_exam,
                                                    NULL,
                                                    NULL,
                                                    pk_lab_tests_api_db.get_alias_translation(i_lang,
                                                                                              i_prof,
                                                                                              'A',
                                                                                              'ANALYSIS.CODE_ANALYSIS.' ||
                                                                                              lab.id_exam,
                                                                                              'SAMPLE_TYPE.CODE_SAMPLE_TYPE.' ||
                                                                                              lab.id_sample_type,
                                                                                              NULL)) || ' / ')) - 3) event_type_clinical_service,
                   NULL event_type_procedure, --                                                                                              
                   l_msg_no_dependency desc_dependency, --
                   pk_date_utils.dt_chr_tsz(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL, lab.id_institution, NULL),
                                                                             lab.dt_begin_tstz),
                                            i_prof) request_date, --
                   decode(lab.dt_begin_tstz, NULL, NULL, decode(flg_status_ard, 'PA', l_msg_suggested, l_msg_scheduled)) request_status_desc, --
                   pk_prof_utils.get_name_signature(i_lang, i_prof, lab.id_prof_req) requested_by, --
                   NULL professional, --
                   NULL id_prof_resp,
                   NULL id_fisrt_nurse_resp,
                   pk_date_utils.dt_chr_tsz(i_lang,
                                            pk_date_utils.trunc_insttimezone(profissional(NULL, lab.id_institution, NULL),
                                                                             lab.dt_begin_tstz),
                                            i_prof) event_date, --
                   pk_sysdomain.get_domain(i_lang, i_prof, 'ANALYSIS_REQ_DET.FLG_STATUS', lab.flg_status_ard, NULL) status, --
                   lab.flg_status_ard flg_status, --
                   pk_utils.get_institution_name(i_lang, lab.id_institution) location,
                   lab.id_institution id_location, --
                   pk_utils.get_status_string_immediate(i_lang,
                                                        i_prof,
                                                        pk_alert_constant.g_display_type_icon,
                                                        lab.flg_status_ard,
                                                        NULL,
                                                        NULL,
                                                        'ANALYSIS_REQ_DET.FLG_STATUS') status_icon, --
                   pk_date_utils.date_send_tsz(i_lang, lab.dt_begin_tstz, i_prof) order_date, --
                   pk_events.g_event_type_lab id_future_event_type, --
                   get_id_fet_parent(pk_events.g_event_type_lab) id_future_event_type, --
                   NULL flg_can_approve, --
                   NULL flg_can_reject, --
                   NULL flg_can_cancel, --
                   decode(flg_status_ard, pk_grid.g_exam_req_sched, pk_alert_constant.g_no, pk_alert_constant.g_yes) flg_can_schedule, --
                   pk_alert_constant.get_no flg_can_admit, --     
                   pk_alert_constant.g_yes flg_ok,
                   'PRESENT_FUTURE' time_state, --
                   NULL dep_clin_serv, --
                   NULL sch_event, --
                   pk_alert_constant.g_no show_report,
                   NULL id_software,
                   pk_alert_constant.g_no reopen_episode,
                   pk_date_utils.date_send_tsz(i_lang, lab.dt_begin_tstz, i_prof) dt_sched,
                   NULL dt_req_begin,
                   NULL dt_req_end,
                   pk_sysdomain.get_img(i_lang, 'ANALYSIS_REQ.FLG_REQ_ORIGIN_MODULE', lab.flg_req_origin_module) icon_name,
                   NULL registered,
                   NULL approval_prof,
                   NULL request_reason,
                   NULL id_exam,
                   NULL id_dest_professional,
                   lab.id_prof_req id_sched_professional,
                   pk_date_utils.date_send_tsz(i_lang, lab.dt_req_tstz, i_prof) dt_sched_event,
                   pk_date_utils.date_char_tsz(i_lang, lab.dt_req_tstz, i_prof.institution, i_prof.software) dt_sched_event_str,
                   lab.id_prof_req id_created_professional,
                   NULL notes,
                   NULL flg_contact_type,
                   NULL id_content,
                   NULL id_workflow,
                   NULL id_complaint,
                   NULL desc_complaint,
                   g_flgtype flg_type_of_external_resource,
                   lab.id_room id_external_resource,
                   lab.id_episode id_efect_episode,
                   NULL id_waiting_list,
                   NULL status_icon_c,
                   NULL id_epis_hhc_req
              FROM (SELECT DISTINCT gtl.id_patient,
                                    gtl.gender,
                                    gtl.pat_age,
                                    gtl.num_clin_record,
                                    gtl.id_episode,
                                    gtl.id_dept,
                                    gtl.id_clinical_service,
                                    gtl.id_professional,
                                    gtl.id_exam_cat,
                                    gtl.id_analysis,
                                    gtl.dt_target_tstz,
                                    ar.notes,
                                    gtl.dt_req_tstz,
                                    gtl.id_analysis_req,
                                    gtl.id_analysis_req_det,
                                    gtl.flg_status_ard,
                                    ar.id_prof_writes         id_prof_req,
                                    ar.id_institution,
                                    ar.id_schedule,
                                    gtl.flg_req_origin_module,
                                    gtl.id_room_req           id_room,
                                    gtl.id_analysis           id_exam,
                                    gtl.id_sample_type        id_sample_type,
                                    ar.dt_begin_tstz
                      FROM grid_task_lab gtl, analysis_req ar, exam_cat_dcs ecdcs
                     WHERE gtl.id_institution = i_prof.institution
                       AND ((i_origin = pk_events.g_origin_pe AND
                           gtl.flg_status_ard IN (pk_lab_tests_constant.g_analysis_cancel,
                                                    pk_lab_tests_constant.g_analysis_tosched,
                                                    pk_lab_tests_constant.g_analysis_sched)) OR
                           (gtl.flg_status_ard IN (pk_lab_tests_constant.g_analysis_tosched,
                                                    pk_lab_tests_constant.g_analysis_sched,
                                                    pk_lab_tests_constant.g_analysis_nr)))
                       AND gtl.id_analysis_req = ar.id_analysis_req
                       AND gtl.id_exam_cat = ecdcs.id_exam_cat
                       AND gtl.id_patient = i_patient
                       AND EXISTS (SELECT 1
                              FROM prof_dep_clin_serv pdcs
                             WHERE pdcs.id_professional = i_prof.id
                               AND pdcs.flg_status = pk_grid.g_selected
                               AND pdcs.id_institution = i_prof.institution
                               AND pdcs.id_dep_clin_serv = ecdcs.id_dep_clin_serv)) lab
             GROUP BY lab.id_episode,
                      lab.id_schedule,
                      lab.id_analysis_req,
                      lab.dt_begin_tstz,
                      lab.id_institution,
                      lab.id_room,
                      lab.id_episode,
                      lab.id_prof_req,
                      lab.flg_status_ard,
                      lab.flg_req_origin_module,
                      lab.dt_req_tstz;
    
        LOOP
            FETCH c_result
                INTO v_tab;
            EXIT WHEN c_result%NOTFOUND;
            PIPE ROW(v_tab);
        END LOOP;
    
        RETURN;
    END get_lab_events_pl;

    FUNCTION get_id_consult_req(i_episode IN consult_req.id_episode_to_exec%TYPE) RETURN NUMBER IS
        l_id_consult_req consult_req.id_consult_req%TYPE;
    BEGIN
        SELECT cr.id_consult_req
          INTO l_id_consult_req
          FROM consult_req cr
         WHERE cr.id_episode_to_exec = i_episode;
    
        RETURN l_id_consult_req;
    END;

    FUNCTION get_id_fet_parent(id_fet IN future_event_type.id_future_event_type%TYPE)
        RETURN future_event_type.id_parent%TYPE IS
        l_id_fet_parent future_event_type.id_parent%TYPE;
    BEGIN
        SELECT nvl(fet.id_parent, fet.id_future_event_type)
          INTO l_id_fet_parent
          FROM future_event_type fet
         WHERE fet.id_future_event_type = id_fet;
    
        RETURN l_id_fet_parent;
    END;

    FUNCTION get_event_form_values
    (
        i_lang           IN NUMBER,
        i_prof           IN profissional,
        i_episode        IN NUMBER,
        i_patient        IN NUMBER,
        i_action         IN NUMBER,
        i_root_name      IN VARCHAR2,
        i_curr_component IN NUMBER,
        i_idx            IN NUMBER DEFAULT 1,
        i_tbl_id_pk      IN table_number,
        i_tbl_mkt_rel    IN table_number,
        i_tbl_int_name   IN table_varchar,
        i_value          IN table_table_varchar,
        i_value_mea      IN table_table_varchar,
        i_value_desc     IN table_table_varchar,
        i_tbl_data       IN table_table_varchar,
        i_value_clob     IN table_clob,
        o_error          OUT t_error_out
    ) RETURN t_tbl_ds_get_value IS
    
        l_db_object_name CONSTANT user_objects.object_name%TYPE := 'GET_EVENT_FORM_VALUES';
    
        --Return variable
        tbl_result t_tbl_ds_get_value := t_tbl_ds_get_value();
    
        --Control variables to cycle through the input parameters
        l_curr_comp_int_name ds_component.internal_name%TYPE;
        l_ds_internal_name   ds_component.internal_name%TYPE;
        l_id_ds_component    ds_component.id_ds_component%TYPE;
        l_current_value      VARCHAR(4000 CHAR);
    
        l_sch_complaint_origin sys_config.value%TYPE;
    
        l_cursor pk_types.cursor_type;
    
        l_id_location             NUMBER(24);
        l_desc_location           VARCHAR2(1000 CHAR);
        l_id_sch_event            NUMBER(24);
        l_desc_sch_event          VARCHAR2(1000 CHAR);
        l_flg_target_professional VARCHAR2(10 CHAR);
        l_id_dep_clin_serv        NUMBER(24);
        l_desc_clinical_service   VARCHAR2(1000 CHAR);
        l_id_prof                 table_number := table_number(); --NUMBER(24);
        l_desc_prof               VARCHAR2(1000 CHAR);
        l_id_complaint            NUMBER(24);
        l_desc_complaint          VARCHAR2(1000 CHAR);
        l_priority                VARCHAR2(10 CHAR);
        l_priority_desc           VARCHAR2(1000 CHAR);
        l_contact_type            VARCHAR2(10 CHAR);
        l_desc_contact_type       VARCHAR2(1000 CHAR);
        l_id_department           NUMBER(24);
        l_recurrence              VARCHAR2(10 CHAR);
        l_desc_recurrence         VARCHAR2(1000 CHAR);
    
        l_epis_type         epis_type.id_epis_type%TYPE;
        l_future_event_type future_event_type.id_future_event_type%TYPE;
        l_flg_type          future_event_type.flg_type%TYPE;
        l_title             pk_translation.t_desc_translation;
    
        l_flg_need_approval VARCHAR2(1char);
    
        l_start_date         VARCHAR2(100 CHAR);
        l_recurrence_pattern VARCHAR2(1 CHAR);
        l_day_of_week        VARCHAR2(50 CHAR);
        l_day_of_month       VARCHAR2(2 CHAR);
        l_month_of_year      VARCHAR2(2 CHAR);
        l_week_number        VARCHAR2(2 CHAR);
    
        l_flg_event_dep_clin_serv VARCHAR2(1 CHAR) := NULL;
        
        l_id_task_type task_type.id_task_type%type;
    
    BEGIN
        --An nvl is performed for the sysdate in order to assure the same current date for every i_idx iteration
        g_sysdate_tstz := nvl(g_sysdate_tstz, current_timestamp);
        
       --If a value is sent in i_tbl_id_pk(1) (Order sets), we must assume that the task type id to use in the form
       --is the one sent in that array. If nothing is sent, we assume that is a medical appointment request
        if i_tbl_id_pk.exists(1) then
          if i_tbl_id_pk(1) is not null then
            l_id_task_type := i_tbl_id_pk(1);
            end if;
            else
              l_id_task_type := 30;  --MEDICAL APPOINTMENT
            end if;           
    
        IF i_action IS NULL
           OR i_action = -1 --NEW FORM (default values)
        THEN
        
            l_sch_complaint_origin := pk_sysconfig.get_config('SCH_COMPLAINT_ORIGIN', i_prof);
        
            g_error := 'ERROR CALLING GET_FET_EP_BY_TASK_TYPE';
            IF NOT pk_events.get_fet_ep_by_task_type(i_lang              => i_lang,
                                                     i_prof              => i_prof,
                                                     i_id_task_type      => l_id_task_type,
                                                     o_future_event_type => l_future_event_type,
                                                     o_epis_type         => l_epis_type,
                                                     o_flg_type          => l_flg_type,
                                                     o_title             => l_title,
                                                     o_error             => o_error)
            THEN
                RETURN t_tbl_ds_get_value();
            END IF;
        
            g_error := 'ERROR CALLING GET_DEFAULT_VALUES';
            IF NOT pk_events.get_default_values(i_lang           => i_lang,
                                                i_prof           => i_prof,
                                                i_patient        => i_patient,
                                                i_episode        => i_episode,
                                                i_flg_dep_type   => 'C',
                                                i_epis_type      => l_epis_type,
                                                i_origin_area    => NULL,
                                                o_default_values => l_cursor,
                                                o_error          => o_error)
            THEN
                RAISE g_exception;
            END IF;
        
            LOOP
                FETCH l_cursor
                    INTO l_id_location,
                         l_desc_location,
                         l_id_sch_event,
                         l_desc_sch_event,
                         l_flg_target_professional,
                         l_id_dep_clin_serv,
                         l_desc_clinical_service,
                         l_id_prof,
                         l_desc_prof,
                         l_id_complaint,
                         l_desc_complaint,
                         l_priority,
                         l_priority_desc,
                         l_contact_type,
                         l_desc_contact_type,
                         l_id_department,
                         l_recurrence,
                         l_desc_recurrence;
                EXIT WHEN l_cursor%NOTFOUND;
            END LOOP;
        
            IF NOT l_id_prof.exists(1)
            THEN
                l_id_prof := table_number();
                l_id_prof.extend();
                l_id_prof(l_id_prof.count) := NULL;
            END IF;
        
            /*Field 'Approved by' presents the following rules:
            - It is mandatory if pk_events.check_requires_approval returns as 'Y'
            - If pk_events.check_requires_approval return as 'N', pk_events.is_sa_available is called
            - It is mandatory if pk_events.is_sa_available returns as 'Y' AND the type of visit is '3' or '4'.
            - If the field is not mandatory, it should be inactivated.*/
            g_error := 'ERROR CALLING CHECK_REQUIRES_APPROVAL';
            IF NOT pk_events.check_requires_approval(i_lang          => i_lang,
                                                     i_prof          => i_prof,
                                                     i_event_type    => l_future_event_type,
                                                     o_need_approval => l_flg_need_approval,
                                                     o_error         => o_error)
            THEN
                RETURN t_tbl_ds_get_value();
            END IF;
        
            IF l_flg_need_approval = pk_alert_constant.g_no
            THEN
                l_flg_need_approval := pk_events.is_sa_available(i_prof);
            
                IF l_flg_need_approval = pk_alert_constant.g_yes
                   AND l_id_sch_event NOT IN (3, 4)
                THEN
                    l_flg_need_approval := pk_alert_constant.g_no;
                END IF;
            END IF;
        
            --If a value is sent in i_tbl_id_pk(2) (Order sets), we must assume that the dep clin serv to be shown in the form
            --is the one sent in that array. And, in that case, the user cannot change it => Read-only
            g_error := 'ERROR GETTING CLINICAL SERVICE';
            IF i_tbl_id_pk.exists(2)
            THEN
                IF i_tbl_id_pk(2) IS NOT NULL
                THEN
                    l_id_dep_clin_serv        := i_tbl_id_pk(2);
                    l_flg_event_dep_clin_serv := pk_orders_constant.g_component_read_only;
                
                    BEGIN
                        SELECT pk_translation.get_translation(i_lang, cs.code_clinical_service)
                          INTO l_desc_clinical_service
                          FROM dep_clin_serv dps
                          JOIN clinical_service cs
                            ON cs.id_clinical_service = dps.id_clinical_service
                         WHERE dps.id_dep_clin_serv = i_tbl_id_pk(2);
                    EXCEPTION
                        WHEN OTHERS THEN
                            l_desc_clinical_service := NULL;
                    END;
                END IF;
            END IF;
        
            --Insert the default values in the return variable (tbl_result)
            g_error := 'SELECT INTO TBL_RESULT';
            SELECT t_rec_ds_get_value(id_ds_cmpt_mkt_rel => t.id_ds_cmpt_mkt_rel,
                                       id_ds_component    => t.id_ds_component_child,
                                       internal_name      => t.internal_name_child,
                                       VALUE              => CASE
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_location THEN
                                                                  to_char(l_id_location)
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_clinical_service THEN
                                                                  to_char(l_id_dep_clin_serv)
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_type_of_visit THEN
                                                                  to_char(l_id_sch_event)
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_professional THEN
                                                                  to_char(l_id_prof(1))
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_priority THEN
                                                                  to_char(l_priority)
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_reason_for_visit_ms THEN
                                                                  to_char(l_id_complaint)
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_type_of_encounter THEN
                                                                  to_char(l_contact_type)
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_recurrence_pattern THEN
                                                                  to_char(l_recurrence)
                                                                 ELSE
                                                                  NULL
                                                             END,
                                       value_clob         => NULL,
                                       min_value          => NULL,
                                       max_value          => NULL,
                                       desc_value         => CASE
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_location THEN
                                                                  l_desc_location
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_clinical_service THEN
                                                                  l_desc_clinical_service
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_type_of_visit THEN
                                                                  l_desc_sch_event
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_professional THEN
                                                                  l_desc_prof
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_priority THEN
                                                                  l_priority_desc
                                                                 WHEN t.internal_name_child IN
                                                                      (pk_orders_constant.g_ds_reason_for_visit_ms, pk_orders_constant.g_ds_reason_for_visit) THEN
                                                                  l_desc_complaint
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_type_of_encounter THEN
                                                                  l_desc_contact_type
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_recurrence_pattern THEN
                                                                  l_desc_recurrence
                                                                 ELSE
                                                                  NULL
                                                             END,
                                       desc_clob          => NULL,
                                       id_unit_measure    => t.id_unit_measure,
                                       desc_unit_measure  => CASE
                                                                 WHEN t.id_unit_measure IS NOT NULL THEN
                                                                  pk_unit_measure.get_unit_measure_description(i_lang         => i_lang,
                                                                                                               i_prof         => i_prof,
                                                                                                               i_unit_measure => t.id_unit_measure)
                                                                 ELSE
                                                                  NULL
                                                             END,
                                       flg_validation     => pk_orders_constant.g_component_valid,
                                       err_msg            => NULL,
                                       flg_event_type     => CASE
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_clinical_service THEN
                                                                  coalesce(l_flg_event_dep_clin_serv, def.flg_event_type, pk_orders_constant.g_component_active)
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_reason_for_visit
                                                                      AND l_sch_complaint_origin <> 'R' THEN
                                                                  pk_orders_constant.g_component_hidden
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_reason_for_visit_ms
                                                                      AND l_sch_complaint_origin <> 'C' THEN
                                                                  pk_orders_constant.g_component_hidden
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_approved_by THEN
                                                                  decode(l_flg_need_approval,
                                                                         pk_alert_constant.g_yes,
                                                                         pk_orders_constant.g_component_mandatory,
                                                                         pk_orders_constant.g_component_inactive)
                                                                 WHEN t.internal_name_child = pk_orders_constant.g_ds_reason_for_order THEN
                                                                  decode(l_flg_need_approval,
                                                                         pk_alert_constant.g_yes,
                                                                         pk_orders_constant.g_component_active,
                                                                         pk_orders_constant.g_component_inactive)
                                                                 WHEN t.internal_name_child IN (pk_orders_constant.g_ds_repeat_every,
                                                                                                pk_orders_constant.g_ds_start_date_medium,
                                                                                                pk_orders_constant.g_ds_end_by,
                                                                                                pk_orders_constant.g_ds_end_after_n,
                                                                                                pk_orders_constant.g_ds_week_day,
                                                                                                pk_orders_constant.g_ds_repeat_by,
                                                                                                pk_orders_constant.g_ds_days_month,
                                                                                                pk_orders_constant.g_ds_on_weeks,
                                                                                                pk_orders_constant.g_ds_on_months,
                                                                                                pk_orders_constant.g_ds_end_after_d) THEN
                                                                  pk_orders_constant.g_component_hidden
                                                                 ELSE
                                                                  coalesce(def.flg_event_type, pk_orders_constant.g_component_active)
                                                             END,
                                       flg_multi_status   => pk_alert_constant.g_no,
                                       idx                => i_idx)
              BULK COLLECT
              INTO tbl_result
              FROM (SELECT dc.id_ds_cmpt_mkt_rel,
                           dc.id_ds_component_child,
                           dc.internal_name_child,
                           dc.flg_event_type,
                           dc.rn,
                           dc.flg_component_type_child,
                           dc.id_unit_measure
                      FROM TABLE(pk_dyn_form.get_dyn_cfg(i_lang           => i_lang,
                                                         i_prof           => i_prof,
                                                         i_patient        => NULL,
                                                         i_component_name => i_root_name,
                                                         i_action         => NULL)) dc) t
              JOIN ds_component d
                ON d.id_ds_component = t.id_ds_component_child
              LEFT JOIN ds_def_event def
                ON def.id_ds_cmpt_mkt_rel = t.id_ds_cmpt_mkt_rel
             WHERE d.internal_name IN (pk_orders_constant.g_ds_location,
                                       pk_orders_constant.g_ds_clinical_service,
                                       pk_orders_constant.g_ds_type_of_visit,
                                       pk_orders_constant.g_ds_professional,
                                       pk_orders_constant.g_ds_reason_for_visit,
                                       pk_orders_constant.g_ds_reason_for_visit_ms,
                                       pk_orders_constant.g_ds_priority,
                                       pk_orders_constant.g_ds_type_of_encounter,
                                       pk_orders_constant.g_ds_recurrence_pattern,
                                       pk_orders_constant.g_ds_approved_by,
                                       pk_orders_constant.g_ds_reason_for_order,
                                       pk_orders_constant.g_ds_recurrence_pattern,
                                       pk_orders_constant.g_ds_repeat_every,
                                       pk_orders_constant.g_ds_start_date_medium,
                                       pk_orders_constant.g_ds_end_by,
                                       pk_orders_constant.g_ds_end_after_n,
                                       pk_orders_constant.g_ds_week_day,
                                       pk_orders_constant.g_ds_repeat_by,
                                       pk_orders_constant.g_ds_days_month,
                                       pk_orders_constant.g_ds_on_weeks,
                                       pk_orders_constant.g_ds_on_months,
                                       pk_orders_constant.g_ds_end_after_d)
             ORDER BY t.rn;
        ELSIF i_action = pk_dyn_form_constant.get_submit_action
        THEN
            --Action of submiting a value on any given element of the form
            --IMPORTANT: In order for this action to be executed, a submit action must be configured in ds_event for the given field,
            --otherwise, the i_curr_component is null.
            IF i_curr_component IS NOT NULL
            THEN
                --Check which element has been changed
                SELECT d.internal_name_child
                  INTO l_curr_comp_int_name
                  FROM ds_cmpt_mkt_rel d
                 WHERE d.id_ds_cmpt_mkt_rel = i_curr_component;
            
                IF l_curr_comp_int_name = pk_orders_constant.g_ds_location
                THEN
                    FOR i IN i_tbl_mkt_rel.first .. i_tbl_mkt_rel.last
                    LOOP
                        IF i_tbl_int_name(i) = pk_orders_constant.g_ds_clinical_service
                        THEN
                            tbl_result.extend();
                            tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                               id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                               internal_name      => i_tbl_int_name(i),
                                                                               VALUE              => NULL,
                                                                               value_clob         => NULL,
                                                                               min_value          => NULL,
                                                                               max_value          => NULL,
                                                                               desc_value         => NULL,
                                                                               desc_clob          => NULL,
                                                                               id_unit_measure    => NULL,
                                                                               desc_unit_measure  => NULL,
                                                                               flg_validation     => pk_orders_constant.g_component_valid,
                                                                               err_msg            => NULL,
                                                                               flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                               flg_multi_status   => NULL,
                                                                               idx                => i_idx);
                        ELSIF i_tbl_int_name(i) IN (pk_orders_constant.g_ds_type_of_visit,
                                                    pk_orders_constant.g_ds_professional,
                                                    pk_orders_constant.g_ds_room)
                        THEN
                            tbl_result.extend();
                            tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                               id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                               internal_name      => i_tbl_int_name(i),
                                                                               VALUE              => NULL,
                                                                               value_clob         => NULL,
                                                                               min_value          => NULL,
                                                                               max_value          => NULL,
                                                                               desc_value         => NULL,
                                                                               desc_clob          => NULL,
                                                                               id_unit_measure    => NULL,
                                                                               desc_unit_measure  => NULL,
                                                                               flg_validation     => pk_orders_constant.g_component_valid,
                                                                               err_msg            => NULL,
                                                                               flg_event_type     => pk_orders_constant.g_component_inactive,
                                                                               flg_multi_status   => NULL,
                                                                               idx                => i_idx);
                        ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_reason_for_visit_ms
                        THEN
                            l_sch_complaint_origin := pk_sysconfig.get_config('SCH_COMPLAINT_ORIGIN', i_prof);
                        
                            tbl_result.extend();
                            tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                               id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                               internal_name      => i_tbl_int_name(i),
                                                                               VALUE              => NULL,
                                                                               value_clob         => NULL,
                                                                               min_value          => NULL,
                                                                               max_value          => NULL,
                                                                               desc_value         => NULL,
                                                                               desc_clob          => NULL,
                                                                               id_unit_measure    => NULL,
                                                                               desc_unit_measure  => NULL,
                                                                               flg_validation     => pk_orders_constant.g_component_valid,
                                                                               err_msg            => NULL,
                                                                               flg_event_type     => CASE
                                                                                                      l_sch_complaint_origin
                                                                                                         WHEN 'R' THEN
                                                                                                          pk_orders_constant.g_component_hidden
                                                                                                         ELSE
                                                                                                          pk_orders_constant.g_component_inactive
                                                                                                     END,
                                                                               flg_multi_status   => NULL,
                                                                               idx                => i_idx);
                        END IF;
                    END LOOP;
                ELSIF l_curr_comp_int_name = pk_orders_constant.g_ds_clinical_service
                THEN
                    l_current_value := pk_orders_utils.get_value(pk_orders_constant.g_ds_clinical_service,
                                                                 i_tbl_mkt_rel,
                                                                 i_value);
                    FOR i IN i_tbl_mkt_rel.first .. i_tbl_mkt_rel.last
                    LOOP
                        IF i_tbl_int_name(i) = pk_orders_constant.g_ds_type_of_visit
                        THEN
                            tbl_result.extend();
                            tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                               id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                               internal_name      => i_tbl_int_name(i),
                                                                               VALUE              => NULL,
                                                                               value_clob         => NULL,
                                                                               min_value          => NULL,
                                                                               max_value          => NULL,
                                                                               desc_value         => NULL,
                                                                               desc_clob          => NULL,
                                                                               id_unit_measure    => NULL,
                                                                               desc_unit_measure  => NULL,
                                                                               flg_validation     => pk_orders_constant.g_component_valid,
                                                                               err_msg            => NULL,
                                                                               flg_event_type     => CASE
                                                                                                         WHEN l_current_value IS NULL THEN
                                                                                                          pk_orders_constant.g_component_inactive
                                                                                                         ELSE
                                                                                                          pk_orders_constant.g_component_mandatory
                                                                                                     END,
                                                                               flg_multi_status   => NULL,
                                                                               idx                => i_idx);
                        ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_reason_for_visit_ms
                        THEN
                            l_sch_complaint_origin := pk_sysconfig.get_config('SCH_COMPLAINT_ORIGIN', i_prof);
                            IF l_sch_complaint_origin = 'C'
                            THEN
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                                   internal_name      => i_tbl_int_name(i),
                                                                                   VALUE              => NULL,
                                                                                   value_clob         => NULL,
                                                                                   min_value          => NULL,
                                                                                   max_value          => NULL,
                                                                                   desc_value         => NULL,
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => NULL,
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => CASE
                                                                                                             WHEN l_current_value IS NULL THEN
                                                                                                              pk_orders_constant.g_component_inactive
                                                                                                             ELSE
                                                                                                              pk_orders_constant.g_component_active
                                                                                                         END,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            END IF;
                        ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_professional
                        THEN
                            tbl_result.extend();
                            tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                               id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                               internal_name      => i_tbl_int_name(i),
                                                                               VALUE              => NULL,
                                                                               value_clob         => NULL,
                                                                               min_value          => NULL,
                                                                               max_value          => NULL,
                                                                               desc_value         => NULL,
                                                                               desc_clob          => NULL,
                                                                               id_unit_measure    => NULL,
                                                                               desc_unit_measure  => NULL,
                                                                               flg_validation     => pk_orders_constant.g_component_valid,
                                                                               err_msg            => NULL,
                                                                               flg_event_type     => pk_orders_constant.g_component_inactive,
                                                                               flg_multi_status   => NULL,
                                                                               idx                => i_idx);
                        ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_room
                        THEN
                            tbl_result.extend();
                            tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                               id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                               internal_name      => i_tbl_int_name(i),
                                                                               VALUE              => NULL,
                                                                               value_clob         => NULL,
                                                                               min_value          => NULL,
                                                                               max_value          => NULL,
                                                                               desc_value         => NULL,
                                                                               desc_clob          => NULL,
                                                                               id_unit_measure    => NULL,
                                                                               desc_unit_measure  => NULL,
                                                                               flg_validation     => pk_orders_constant.g_component_valid,
                                                                               err_msg            => NULL,
                                                                               flg_event_type     => CASE
                                                                                                         WHEN l_current_value IS NULL THEN
                                                                                                          pk_orders_constant.g_component_inactive
                                                                                                         ELSE
                                                                                                          pk_orders_constant.g_component_active
                                                                                                     END,
                                                                               flg_multi_status   => NULL,
                                                                               idx                => i_idx);
                        END IF;
                    END LOOP;
                ELSIF l_curr_comp_int_name = pk_orders_constant.g_ds_type_of_visit
                THEN
                    g_error := 'ERROR CALLING GET_FET_EP_BY_TASK_TYPE';
                    IF NOT pk_events.get_fet_ep_by_task_type(i_lang              => i_lang,
                                                             i_prof              => i_prof,
                                                             i_id_task_type      => l_id_task_type,
                                                             o_future_event_type => l_future_event_type,
                                                             o_epis_type         => l_epis_type,
                                                             o_flg_type          => l_flg_type,
                                                             o_title             => l_title,
                                                             o_error             => o_error)
                    THEN
                        RETURN t_tbl_ds_get_value();
                    END IF;
                
                    g_error := 'ERROR CALLING CHECK_REQUIRES_APPROVAL';
                    IF NOT pk_events.check_requires_approval(i_lang          => i_lang,
                                                             i_prof          => i_prof,
                                                             i_event_type    => l_future_event_type,
                                                             o_need_approval => l_flg_need_approval,
                                                             o_error         => o_error)
                    THEN
                        RETURN t_tbl_ds_get_value();
                    END IF;
                
                    IF l_flg_need_approval = pk_alert_constant.g_no
                    THEN
                        l_flg_need_approval := pk_events.is_sa_available(i_prof);
                    
                        l_id_sch_event := to_number(pk_orders_utils.get_value(pk_orders_constant.g_ds_type_of_visit,
                                                                              i_tbl_mkt_rel,
                                                                              i_value));
                        IF l_flg_need_approval = pk_alert_constant.g_yes
                           AND l_id_sch_event NOT IN (3, 4)
                        THEN
                            l_flg_need_approval := pk_alert_constant.g_no;
                        END IF;
                    
                        FOR i IN i_tbl_mkt_rel.first .. i_tbl_mkt_rel.last
                        LOOP
                            IF i_tbl_int_name(i) = pk_orders_constant.g_ds_approved_by
                            THEN
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                                   internal_name      => i_tbl_int_name(i),
                                                                                   VALUE              => NULL,
                                                                                   value_clob         => NULL,
                                                                                   min_value          => NULL,
                                                                                   max_value          => NULL,
                                                                                   desc_value         => NULL,
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => NULL,
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => CASE
                                                                                                          l_flg_need_approval
                                                                                                             WHEN
                                                                                                              pk_alert_constant.g_yes THEN
                                                                                                              pk_orders_constant.g_component_mandatory
                                                                                                             ELSE
                                                                                                              pk_orders_constant.g_component_inactive
                                                                                                         END,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_reason_for_order
                            THEN
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                                   internal_name      => i_tbl_int_name(i),
                                                                                   VALUE              => NULL,
                                                                                   value_clob         => NULL,
                                                                                   min_value          => NULL,
                                                                                   max_value          => NULL,
                                                                                   desc_value         => NULL,
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => NULL,
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => CASE
                                                                                                          l_flg_need_approval
                                                                                                             WHEN
                                                                                                              pk_alert_constant.g_yes THEN
                                                                                                              pk_orders_constant.g_component_active
                                                                                                             ELSE
                                                                                                              pk_orders_constant.g_component_inactive
                                                                                                         END,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            END IF;
                        END LOOP;
                    END IF;
                
                    FOR i IN i_tbl_mkt_rel.first .. i_tbl_mkt_rel.last
                    LOOP
                        IF i_tbl_int_name(i) = pk_orders_constant.g_ds_professional
                        THEN
                            tbl_result.extend();
                            tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                               id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                               internal_name      => i_tbl_int_name(i),
                                                                               VALUE              => NULL,
                                                                               value_clob         => NULL,
                                                                               min_value          => NULL,
                                                                               max_value          => NULL,
                                                                               desc_value         => NULL,
                                                                               desc_clob          => NULL,
                                                                               id_unit_measure    => NULL,
                                                                               desc_unit_measure  => NULL,
                                                                               flg_validation     => pk_orders_constant.g_component_valid,
                                                                               err_msg            => NULL,
                                                                               flg_event_type     => CASE
                                                                                                         WHEN l_id_sch_event IS NULL THEN
                                                                                                          pk_orders_constant.g_component_inactive
                                                                                                         ELSE
                                                                                                          pk_orders_constant.g_component_mandatory
                                                                                                     END,
                                                                               flg_multi_status   => NULL,
                                                                               idx                => i_idx);
                            EXIT;
                        END IF;
                    END LOOP;
                ELSIF l_curr_comp_int_name = pk_orders_constant.g_ds_recurrence_pattern
                THEN
                    l_current_value := pk_orders_utils.get_value(pk_orders_constant.g_ds_recurrence_pattern,
                                                                 i_tbl_mkt_rel,
                                                                 i_value);
                
                    IF l_current_value = 'N'
                    THEN
                        FOR i IN i_tbl_mkt_rel.first .. i_tbl_mkt_rel.last
                        LOOP
                            IF i_tbl_int_name(i) IN (pk_orders_constant.g_ds_repeat_every,
                                                     pk_orders_constant.g_ds_start_date_medium,
                                                     pk_orders_constant.g_ds_end_by,
                                                     pk_orders_constant.g_ds_end_after_n,
                                                     pk_orders_constant.g_ds_week_day,
                                                     pk_orders_constant.g_ds_repeat_by,
                                                     pk_orders_constant.g_ds_days_month,
                                                     pk_orders_constant.g_ds_on_weeks,
                                                     pk_orders_constant.g_ds_on_months,
                                                     pk_orders_constant.g_ds_end_after_d)
                            THEN
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                                   internal_name      => i_tbl_int_name(i),
                                                                                   VALUE              => NULL,
                                                                                   value_clob         => NULL,
                                                                                   min_value          => NULL,
                                                                                   max_value          => NULL,
                                                                                   desc_value         => NULL,
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => NULL,
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => pk_orders_constant.g_component_hidden,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            END IF;
                        END LOOP;
                    ELSIF l_current_value IN ('D', 'W', 'M', 'Y')
                    THEN
                        FOR i IN i_tbl_mkt_rel.first .. i_tbl_mkt_rel.last
                        LOOP
                            IF (i_tbl_int_name(i) IN (pk_orders_constant.g_ds_week_day,
                                                      pk_orders_constant.g_ds_repeat_by,
                                                      pk_orders_constant.g_ds_days_month,
                                                      pk_orders_constant.g_ds_on_weeks,
                                                      pk_orders_constant.g_ds_on_months,
                                                      pk_orders_constant.g_ds_end_after_d) AND l_current_value = 'D')
                               OR
                               (i_tbl_int_name(i) IN (pk_orders_constant.g_ds_repeat_by,
                                                      pk_orders_constant.g_ds_days_month,
                                                      pk_orders_constant.g_ds_on_weeks,
                                                      pk_orders_constant.g_ds_on_months,
                                                      pk_orders_constant.g_ds_end_after_d) AND l_current_value = 'W')
                               OR
                               (i_tbl_int_name(i) IN (pk_orders_constant.g_ds_week_day,
                                                      pk_orders_constant.g_ds_on_weeks,
                                                      pk_orders_constant.g_ds_on_months,
                                                      pk_orders_constant.g_ds_end_after_d) AND l_current_value = 'M')
                               OR
                               (i_tbl_int_name(i) IN (pk_orders_constant.g_ds_week_day,
                                                      pk_orders_constant.g_ds_on_weeks,
                                                      pk_orders_constant.g_ds_end_after_d) AND l_current_value = 'Y')
                            THEN
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                                   internal_name      => i_tbl_int_name(i),
                                                                                   VALUE              => NULL,
                                                                                   value_clob         => NULL,
                                                                                   min_value          => NULL,
                                                                                   max_value          => NULL,
                                                                                   desc_value         => NULL,
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => NULL,
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => pk_orders_constant.g_component_hidden,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_repeat_every
                            THEN
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                                   internal_name      => i_tbl_int_name(i),
                                                                                   VALUE              => '1',
                                                                                   value_clob         => NULL,
                                                                                   min_value          => 1,
                                                                                   max_value          => NULL,
                                                                                   desc_value         => '1' || ' ' ||
                                                                                                         pk_unit_measure.get_unit_measure_description(i_lang         => i_lang,
                                                                                                                                                      i_prof         => i_prof,
                                                                                                                                                      i_unit_measure => CASE
                                                                                                                                                                         l_current_value
                                                                                                                                                                            WHEN 'D' THEN
                                                                                                                                                                             1039
                                                                                                                                                                            WHEN 'W' THEN
                                                                                                                                                                             10375
                                                                                                                                                                            WHEN 'M' THEN
                                                                                                                                                                             1127
                                                                                                                                                                            WHEN 'Y' THEN
                                                                                                                                                                             10373
                                                                                                                                                                        END),
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => CASE
                                                                                                          l_current_value
                                                                                                             WHEN 'D' THEN
                                                                                                              1039
                                                                                                             WHEN 'W' THEN
                                                                                                              10375
                                                                                                             WHEN 'M' THEN
                                                                                                              1127
                                                                                                             WHEN 'Y' THEN
                                                                                                              10373
                                                                                                         END,
                                                                                   desc_unit_measure  => pk_unit_measure.get_unit_measure_description(i_lang         => i_lang,
                                                                                                                                                      i_prof         => i_prof,
                                                                                                                                                      i_unit_measure => CASE
                                                                                                                                                                         l_current_value
                                                                                                                                                                            WHEN 'D' THEN
                                                                                                                                                                             1039
                                                                                                                                                                            WHEN 'W' THEN
                                                                                                                                                                             10375
                                                                                                                                                                            WHEN 'M' THEN
                                                                                                                                                                             1127
                                                                                                                                                                            WHEN 'Y' THEN
                                                                                                                                                                             10373
                                                                                                                                                                        END),
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_start_date_medium
                            THEN
                                FOR j IN i_tbl_mkt_rel.first .. i_tbl_mkt_rel.last
                                LOOP
                                    IF i_tbl_int_name(j) = pk_orders_constant.g_ds_execution_date
                                    THEN
                                        l_start_date := i_value(j) (1);
                                        EXIT;
                                    END IF;
                                END LOOP;
                            
                                IF pk_date_utils.compare_dates_tsz(i_prof  => i_prof,
                                                                   i_date1 => pk_date_utils.trunc_insttimezone(i_prof      => i_prof,
                                                                                                               i_timestamp => pk_date_utils.get_string_tstz(i_lang,
                                                                                                                                                            i_prof,
                                                                                                                                                            l_start_date,
                                                                                                                                                            NULL),
                                                                                                               i_format    => 'DD'),
                                                                   i_date2 => pk_date_utils.trunc_insttimezone(i_prof      => i_prof,
                                                                                                               i_timestamp => current_timestamp,
                                                                                                               i_format    => 'DD')) = 'L'
                                THEN
                                    l_start_date := NULL;
                                END IF;
                            
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                                   internal_name      => i_tbl_int_name(i),
                                                                                   VALUE              => coalesce(l_start_date,
                                                                                                                  i_value(i) (1),
                                                                                                                  pk_date_utils.date_send_tsz(i_lang => i_lang,
                                                                                                                                              i_date => current_timestamp,
                                                                                                                                              i_prof => i_prof)),
                                                                                   value_clob         => NULL,
                                                                                   min_value          => NULL,
                                                                                   max_value          => NULL,
                                                                                   desc_value         => NULL,
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => NULL,
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            
                                IF l_start_date IS NULL
                                THEN
                                    FOR j IN i_tbl_mkt_rel.first .. i_tbl_mkt_rel.last
                                    LOOP
                                        IF i_tbl_int_name(j) = pk_orders_constant.g_ds_execution_date
                                        THEN
                                            tbl_result.extend();
                                            tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(j),
                                                                                               id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(j)),
                                                                                               internal_name      => i_tbl_int_name(j),
                                                                                               VALUE              => coalesce(i_value(i) (1),
                                                                                                                              pk_date_utils.date_send_tsz(i_lang => i_lang,
                                                                                                                                                          i_date => current_timestamp,
                                                                                                                                                          i_prof => i_prof)),
                                                                                               value_clob         => NULL,
                                                                                               min_value          => NULL,
                                                                                               max_value          => NULL,
                                                                                               desc_value         => NULL,
                                                                                               desc_clob          => NULL,
                                                                                               id_unit_measure    => NULL,
                                                                                               desc_unit_measure  => NULL,
                                                                                               flg_validation     => pk_orders_constant.g_component_valid,
                                                                                               err_msg            => NULL,
                                                                                               flg_event_type     => pk_orders_constant.g_component_active,
                                                                                               flg_multi_status   => NULL,
                                                                                               idx                => i_idx);
                                            EXIT;
                                        END IF;
                                    END LOOP;
                                END IF;
                            ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_end_by
                            THEN
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                                   internal_name      => i_tbl_int_name(i),
                                                                                   VALUE              => 'E',
                                                                                   value_clob         => NULL,
                                                                                   min_value          => NULL,
                                                                                   max_value          => NULL,
                                                                                   desc_value         => pk_sysdomain.get_domain(i_lang          => i_lang,
                                                                                                                                 i_prof          => i_prof,
                                                                                                                                 i_code_dom      => 'END_BY',
                                                                                                                                 i_val           => 'E',
                                                                                                                                 i_dep_clin_serv => NULL),
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => NULL,
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_end_after_n
                            THEN
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                                   internal_name      => i_tbl_int_name(i),
                                                                                   VALUE              => NULL,
                                                                                   value_clob         => NULL,
                                                                                   min_value          => 1,
                                                                                   max_value          => NULL,
                                                                                   desc_value         => NULL,
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => pk_message.get_message(i_lang,
                                                                                                                                'FUTURE_EVENTS_T161'),
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_week_day
                                  AND l_current_value = 'W'
                            THEN
                            
                                SELECT pk_date_utils.week_day_standard(i_date => current_timestamp)
                                  INTO l_day_of_week
                                  FROM dual;
                            
                                IF l_day_of_week IS NOT NULL
                                THEN
                                    tbl_result.extend();
                                    tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                                       id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                                       internal_name      => i_tbl_int_name(i),
                                                                                       VALUE              => l_day_of_week,
                                                                                       value_clob         => NULL,
                                                                                       min_value          => NULL,
                                                                                       max_value          => NULL,
                                                                                       desc_value         => pk_sysdomain.get_domain(i_lang          => i_lang,
                                                                                                                                     i_prof          => i_prof,
                                                                                                                                     i_code_dom      => 'WEEK_DAY',
                                                                                                                                     i_val           => l_day_of_week,
                                                                                                                                     i_dep_clin_serv => NULL),
                                                                                       desc_clob          => NULL,
                                                                                       id_unit_measure    => NULL,
                                                                                       desc_unit_measure  => NULL,
                                                                                       flg_validation     => pk_orders_constant.g_component_valid,
                                                                                       err_msg            => NULL,
                                                                                       flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                                       flg_multi_status   => NULL,
                                                                                       idx                => i_idx);
                                END IF;
                            ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_days_month
                                  AND l_current_value IN ('M', 'Y')
                            THEN
                                l_day_of_month := to_char(extract(DAY FROM current_timestamp));
                            
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                                   internal_name      => i_tbl_int_name(i),
                                                                                   VALUE              => l_day_of_month,
                                                                                   value_clob         => NULL,
                                                                                   min_value          => 1,
                                                                                   max_value          => 31,
                                                                                   desc_value         => l_day_of_month,
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => NULL,
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_repeat_by
                                  AND l_current_value IN ('M', 'Y')
                            THEN
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                                   internal_name      => i_tbl_int_name(i),
                                                                                   VALUE              => 'M',
                                                                                   value_clob         => NULL,
                                                                                   min_value          => NULL,
                                                                                   max_value          => NULL,
                                                                                   desc_value         => pk_sysdomain.get_domain(i_lang          => i_lang,
                                                                                                                                 i_prof          => i_prof,
                                                                                                                                 i_code_dom      => 'REPEAT_BY',
                                                                                                                                 i_val           => 'M',
                                                                                                                                 i_dep_clin_serv => NULL),
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => NULL,
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            ELSIF i_tbl_int_name(i) = pk_orders_constant.g_ds_on_months
                                  AND l_current_value IN ('Y')
                            THEN
                                l_month_of_year := to_char(extract(MONTH FROM current_timestamp));
                            
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(i),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(i)),
                                                                                   internal_name      => i_tbl_int_name(i),
                                                                                   VALUE              => l_month_of_year,
                                                                                   value_clob         => NULL,
                                                                                   min_value          => NULL,
                                                                                   max_value          => NULL,
                                                                                   desc_value         => pk_sysdomain.get_domain(i_lang          => i_lang,
                                                                                                                                 i_prof          => i_prof,
                                                                                                                                 i_code_dom      => 'MONTH_OPTIONS',
                                                                                                                                 i_val           => l_month_of_year,
                                                                                                                                 i_dep_clin_serv => NULL),
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => NULL,
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            END IF;
                        END LOOP;
                    END IF;
                ELSIF l_curr_comp_int_name = pk_orders_constant.g_ds_start_date_medium
                THEN
                    l_current_value := pk_orders_utils.get_value(pk_orders_constant.g_ds_start_date_medium,
                                                                 i_tbl_mkt_rel,
                                                                 i_value);
                
                    IF pk_date_utils.compare_dates_tsz(i_prof  => i_prof,
                                                       i_date1 => pk_date_utils.trunc_insttimezone(i_prof      => i_prof,
                                                                                                   i_timestamp => pk_date_utils.get_string_tstz(i_lang,
                                                                                                                                                i_prof,
                                                                                                                                                l_current_value,
                                                                                                                                                NULL),
                                                                                                   i_format    => 'DD'),
                                                       i_date2 => pk_date_utils.trunc_insttimezone(i_prof      => i_prof,
                                                                                                   i_timestamp => current_timestamp,
                                                                                                   i_format    => 'DD')) = 'L'
                    THEN
                        tbl_result.extend();
                        tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_curr_component,
                                                                           id_ds_component    => pk_orders_utils.get_id_ds_component(i_curr_component),
                                                                           internal_name      => l_curr_comp_int_name,
                                                                           VALUE              => l_current_value,
                                                                           value_clob         => NULL,
                                                                           min_value          => NULL,
                                                                           max_value          => NULL,
                                                                           desc_value         => NULL,
                                                                           desc_clob          => NULL,
                                                                           id_unit_measure    => NULL,
                                                                           desc_unit_measure  => NULL,
                                                                           flg_validation     => pk_orders_constant.g_component_error,
                                                                           err_msg            => pk_message.get_message(i_lang,
                                                                                                                        'COMMON_T066'),
                                                                           flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                           flg_multi_status   => NULL,
                                                                           idx                => i_idx);
                    
                        FOR j IN i_tbl_mkt_rel.first .. i_tbl_mkt_rel.last
                        LOOP
                            IF i_tbl_int_name(j) = pk_orders_constant.g_ds_execution_date
                            THEN
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(j),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(j)),
                                                                                   internal_name      => i_tbl_int_name(j),
                                                                                   VALUE              => NULL,
                                                                                   value_clob         => NULL,
                                                                                   min_value          => NULL,
                                                                                   max_value          => NULL,
                                                                                   desc_value         => NULL,
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => NULL,
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => pk_orders_constant.g_component_active,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            
                                EXIT;
                            END IF;
                        END LOOP;
                    ELSE
                        FOR j IN i_tbl_mkt_rel.first .. i_tbl_mkt_rel.last
                        LOOP
                            IF i_tbl_int_name(j) = pk_orders_constant.g_ds_execution_date
                            THEN
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(j),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(j)),
                                                                                   internal_name      => i_tbl_int_name(j),
                                                                                   VALUE              => l_current_value,
                                                                                   value_clob         => NULL,
                                                                                   min_value          => NULL,
                                                                                   max_value          => NULL,
                                                                                   desc_value         => NULL,
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => NULL,
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => pk_orders_constant.g_component_active,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            
                            ELSIF i_tbl_int_name(j) = pk_orders_constant.g_ds_end_after_d
                            THEN
                                IF pk_date_utils.compare_dates_tsz(i_prof  => i_prof,
                                                                   i_date1 => pk_date_utils.trunc_insttimezone(i_prof      => i_prof,
                                                                                                               i_timestamp => pk_date_utils.get_string_tstz(i_lang,
                                                                                                                                                            i_prof,
                                                                                                                                                            i_value(j) (1),
                                                                                                                                                            NULL),
                                                                                                               i_format    => 'DD'),
                                                                   i_date2 => pk_date_utils.trunc_insttimezone(i_prof      => i_prof,
                                                                                                               i_timestamp => pk_date_utils.get_string_tstz(i_lang,
                                                                                                                                                            i_prof,
                                                                                                                                                            l_current_value,
                                                                                                                                                            NULL),
                                                                                                               i_format    => 'DD')) = 'L'
                                THEN
                                    tbl_result.extend();
                                    tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(j),
                                                                                       id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(j)),
                                                                                       internal_name      => i_tbl_int_name(j),
                                                                                       VALUE              => i_value(j) (1),
                                                                                       value_clob         => NULL,
                                                                                       min_value          => NULL,
                                                                                       max_value          => NULL,
                                                                                       desc_value         => NULL,
                                                                                       desc_clob          => NULL,
                                                                                       id_unit_measure    => NULL,
                                                                                       desc_unit_measure  => NULL,
                                                                                       flg_validation     => pk_orders_constant.g_component_error,
                                                                                       err_msg            => pk_message.get_message(i_lang,
                                                                                                                                    'COMMON_T067'),
                                                                                       flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                                       flg_multi_status   => NULL,
                                                                                       idx                => i_idx);
                                ELSE
                                    tbl_result.extend();
                                    tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(j),
                                                                                       id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(j)),
                                                                                       internal_name      => i_tbl_int_name(j),
                                                                                       VALUE              => i_value(j) (1),
                                                                                       value_clob         => NULL,
                                                                                       min_value          => NULL,
                                                                                       max_value          => NULL,
                                                                                       desc_value         => NULL,
                                                                                       desc_clob          => NULL,
                                                                                       id_unit_measure    => NULL,
                                                                                       desc_unit_measure  => NULL,
                                                                                       flg_validation     => pk_orders_constant.g_component_valid,
                                                                                       err_msg            => NULL,
                                                                                       flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                                       flg_multi_status   => NULL,
                                                                                       idx                => i_idx);
                                END IF;
                            END IF;
                        END LOOP;
                    END IF;
                ELSIF l_curr_comp_int_name = pk_orders_constant.g_ds_end_by
                THEN
                    l_current_value := pk_orders_utils.get_value(pk_orders_constant.g_ds_end_by, i_tbl_mkt_rel, i_value);
                
                    FOR j IN i_tbl_mkt_rel.first .. i_tbl_mkt_rel.last
                    LOOP
                        IF i_tbl_int_name(j) = pk_orders_constant.g_ds_end_after_n
                        THEN
                            tbl_result.extend();
                            tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(j),
                                                                               id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(j)),
                                                                               internal_name      => i_tbl_int_name(j),
                                                                               VALUE              => NULL,
                                                                               value_clob         => NULL,
                                                                               min_value          => NULL,
                                                                               max_value          => NULL,
                                                                               desc_value         => NULL,
                                                                               desc_clob          => NULL,
                                                                               id_unit_measure    => NULL,
                                                                               desc_unit_measure  => pk_message.get_message(i_lang,
                                                                                                                            'FUTURE_EVENTS_T161'),
                                                                               flg_validation     => pk_orders_constant.g_component_valid,
                                                                               err_msg            => NULL,
                                                                               flg_event_type     => CASE l_current_value
                                                                                                         WHEN 'E' THEN
                                                                                                          pk_orders_constant.g_component_mandatory
                                                                                                         ELSE
                                                                                                          pk_orders_constant.g_component_hidden
                                                                                                     END,
                                                                               flg_multi_status   => NULL,
                                                                               idx                => i_idx);
                        ELSIF i_tbl_int_name(j) = pk_orders_constant.g_ds_end_after_d
                        THEN
                            tbl_result.extend();
                            tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(j),
                                                                               id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(j)),
                                                                               internal_name      => i_tbl_int_name(j),
                                                                               VALUE              => NULL,
                                                                               value_clob         => NULL,
                                                                               min_value          => NULL,
                                                                               max_value          => NULL,
                                                                               desc_value         => NULL,
                                                                               desc_clob          => NULL,
                                                                               id_unit_measure    => NULL,
                                                                               desc_unit_measure  => NULL,
                                                                               flg_validation     => pk_orders_constant.g_component_valid,
                                                                               err_msg            => NULL,
                                                                               flg_event_type     => CASE l_current_value
                                                                                                         WHEN 'D' THEN
                                                                                                          pk_orders_constant.g_component_mandatory
                                                                                                         ELSE
                                                                                                          pk_orders_constant.g_component_hidden
                                                                                                     END,
                                                                               flg_multi_status   => NULL,
                                                                               idx                => i_idx);
                        END IF;
                    END LOOP;
                ELSIF l_curr_comp_int_name = pk_orders_constant.g_ds_execution_date
                THEN
                    l_current_value := pk_orders_utils.get_value(pk_orders_constant.g_ds_execution_date,
                                                                 i_tbl_mkt_rel,
                                                                 i_value);
                
                    FOR j IN i_tbl_mkt_rel.first .. i_tbl_mkt_rel.last
                    LOOP
                        IF i_tbl_int_name(j) = pk_orders_constant.g_ds_recurrence_pattern
                        THEN
                            l_recurrence_pattern := pk_orders_utils.get_value(pk_orders_constant.g_ds_recurrence_pattern,
                                                                              i_tbl_mkt_rel,
                                                                              i_value);
                            EXIT;
                        END IF;
                    END LOOP;
                
                    IF pk_date_utils.compare_dates_tsz(i_prof  => i_prof,
                                                       i_date1 => pk_date_utils.trunc_insttimezone(i_prof      => i_prof,
                                                                                                   i_timestamp => pk_date_utils.get_string_tstz(i_lang,
                                                                                                                                                i_prof,
                                                                                                                                                l_current_value,
                                                                                                                                                NULL),
                                                                                                   i_format    => 'DD'),
                                                       i_date2 => pk_date_utils.trunc_insttimezone(i_prof      => i_prof,
                                                                                                   i_timestamp => current_timestamp,
                                                                                                   i_format    => 'DD')) = 'L'
                    THEN
                        tbl_result.extend();
                        tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_curr_component,
                                                                           id_ds_component    => pk_orders_utils.get_id_ds_component(i_curr_component),
                                                                           internal_name      => l_curr_comp_int_name,
                                                                           VALUE              => l_current_value,
                                                                           value_clob         => NULL,
                                                                           min_value          => NULL,
                                                                           max_value          => NULL,
                                                                           desc_value         => NULL,
                                                                           desc_clob          => NULL,
                                                                           id_unit_measure    => NULL,
                                                                           desc_unit_measure  => NULL,
                                                                           flg_validation     => pk_orders_constant.g_component_error,
                                                                           err_msg            => pk_message.get_message(i_lang,
                                                                                                                        'COMMON_T066'),
                                                                           flg_event_type     => pk_orders_constant.g_component_active,
                                                                           flg_multi_status   => NULL,
                                                                           idx                => i_idx);
                    
                        FOR j IN i_tbl_mkt_rel.first .. i_tbl_mkt_rel.last
                        LOOP
                            IF i_tbl_int_name(j) = pk_orders_constant.g_ds_start_date_medium
                            THEN
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(j),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(j)),
                                                                                   internal_name      => i_tbl_int_name(j),
                                                                                   VALUE              => NULL,
                                                                                   value_clob         => NULL,
                                                                                   min_value          => NULL,
                                                                                   max_value          => NULL,
                                                                                   desc_value         => NULL,
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => NULL,
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => CASE
                                                                                                          l_recurrence_pattern
                                                                                                             WHEN 'N' THEN
                                                                                                              pk_orders_constant.g_component_hidden
                                                                                                             ELSE
                                                                                                              pk_orders_constant.g_component_mandatory
                                                                                                         END,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            
                                EXIT;
                            END IF;
                        END LOOP;
                    ELSE
                        FOR j IN i_tbl_mkt_rel.first .. i_tbl_mkt_rel.last
                        LOOP
                            IF i_tbl_int_name(j) = pk_orders_constant.g_ds_start_date_medium
                            THEN
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(j),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(j)),
                                                                                   internal_name      => i_tbl_int_name(j),
                                                                                   VALUE              => l_current_value,
                                                                                   value_clob         => NULL,
                                                                                   min_value          => NULL,
                                                                                   max_value          => NULL,
                                                                                   desc_value         => NULL,
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => NULL,
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => CASE
                                                                                                          l_recurrence_pattern
                                                                                                             WHEN 'N' THEN
                                                                                                              pk_orders_constant.g_component_hidden
                                                                                                             ELSE
                                                                                                              pk_orders_constant.g_component_mandatory
                                                                                                         END,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            ELSIF i_tbl_int_name(j) = pk_orders_constant.g_ds_end_after_d
                                  AND l_recurrence_pattern <> 'N'
                            THEN
                                IF pk_date_utils.compare_dates_tsz(i_prof  => i_prof,
                                                                   i_date1 => pk_date_utils.trunc_insttimezone(i_prof      => i_prof,
                                                                                                               i_timestamp => pk_date_utils.get_string_tstz(i_lang,
                                                                                                                                                            i_prof,
                                                                                                                                                            i_value(j) (1),
                                                                                                                                                            NULL),
                                                                                                               i_format    => 'DD'),
                                                                   i_date2 => pk_date_utils.trunc_insttimezone(i_prof      => i_prof,
                                                                                                               i_timestamp => pk_date_utils.get_string_tstz(i_lang,
                                                                                                                                                            i_prof,
                                                                                                                                                            l_current_value,
                                                                                                                                                            NULL),
                                                                                                               i_format    => 'DD')) = 'L'
                                THEN
                                    tbl_result.extend();
                                    tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(j),
                                                                                       id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(j)),
                                                                                       internal_name      => i_tbl_int_name(j),
                                                                                       VALUE              => i_value(j) (1),
                                                                                       value_clob         => NULL,
                                                                                       min_value          => NULL,
                                                                                       max_value          => NULL,
                                                                                       desc_value         => NULL,
                                                                                       desc_clob          => NULL,
                                                                                       id_unit_measure    => NULL,
                                                                                       desc_unit_measure  => NULL,
                                                                                       flg_validation     => pk_orders_constant.g_component_error,
                                                                                       err_msg            => pk_message.get_message(i_lang,
                                                                                                                                    'COMMON_T067'),
                                                                                       flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                                       flg_multi_status   => NULL,
                                                                                       idx                => i_idx);
                                ELSE
                                    tbl_result.extend();
                                    tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(j),
                                                                                       id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(j)),
                                                                                       internal_name      => i_tbl_int_name(j),
                                                                                       VALUE              => i_value(j) (1),
                                                                                       value_clob         => NULL,
                                                                                       min_value          => NULL,
                                                                                       max_value          => NULL,
                                                                                       desc_value         => NULL,
                                                                                       desc_clob          => NULL,
                                                                                       id_unit_measure    => NULL,
                                                                                       desc_unit_measure  => NULL,
                                                                                       flg_validation     => pk_orders_constant.g_component_valid,
                                                                                       err_msg            => NULL,
                                                                                       flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                                       flg_multi_status   => NULL,
                                                                                       idx                => i_idx);
                                END IF;
                            END IF;
                        END LOOP;
                    END IF;
                ELSIF l_curr_comp_int_name = pk_orders_constant.g_ds_days_month
                THEN
                    l_current_value := pk_orders_utils.get_value(pk_orders_constant.g_ds_days_month,
                                                                 i_tbl_mkt_rel,
                                                                 i_value);
                
                    IF to_number(l_current_value) > 28
                    THEN
                        tbl_result.extend();
                        tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_curr_component,
                                                                           id_ds_component    => pk_orders_utils.get_id_ds_component(i_curr_component),
                                                                           internal_name      => l_curr_comp_int_name,
                                                                           VALUE              => l_current_value,
                                                                           value_clob         => NULL,
                                                                           min_value          => NULL,
                                                                           max_value          => NULL,
                                                                           desc_value         => l_current_value,
                                                                           desc_clob          => NULL,
                                                                           id_unit_measure    => NULL,
                                                                           desc_unit_measure  => NULL,
                                                                           flg_validation     => pk_orders_constant.g_component_valid,
                                                                           err_msg            => 'AVISO!',
                                                                           flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                           flg_multi_status   => NULL,
                                                                           idx                => i_idx);
                    END IF;
                ELSIF l_curr_comp_int_name = pk_orders_constant.g_ds_repeat_by
                THEN
                    l_current_value := pk_orders_utils.get_value(l_curr_comp_int_name, i_tbl_mkt_rel, i_value);
                
                    IF l_current_value = 'M'
                    THEN
                        FOR j IN i_tbl_mkt_rel.first .. i_tbl_mkt_rel.last
                        LOOP
                            IF i_tbl_int_name(j) = pk_orders_constant.g_ds_days_month
                            THEN
                                l_day_of_month := to_char(extract(DAY FROM current_timestamp));
                            
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(j),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(j)),
                                                                                   internal_name      => i_tbl_int_name(j),
                                                                                   VALUE              => l_day_of_month,
                                                                                   value_clob         => NULL,
                                                                                   min_value          => 1,
                                                                                   max_value          => 31,
                                                                                   desc_value         => l_day_of_month,
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => NULL,
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            ELSIF i_tbl_int_name(j) IN
                                  (pk_orders_constant.g_ds_week_day, pk_orders_constant.g_ds_on_weeks)
                            THEN
                                l_day_of_month := to_char(extract(DAY FROM current_timestamp));
                            
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(j),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(j)),
                                                                                   internal_name      => i_tbl_int_name(j),
                                                                                   VALUE              => NULL,
                                                                                   value_clob         => NULL,
                                                                                   min_value          => NULL,
                                                                                   max_value          => NULL,
                                                                                   desc_value         => NULL,
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => NULL,
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => pk_orders_constant.g_component_hidden,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            END IF;
                        END LOOP;
                    ELSIF l_current_value = 'W'
                    THEN
                        FOR j IN i_tbl_mkt_rel.first .. i_tbl_mkt_rel.last
                        LOOP
                            IF i_tbl_int_name(j) = pk_orders_constant.g_ds_days_month
                            THEN
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(j),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(j)),
                                                                                   internal_name      => i_tbl_int_name(j),
                                                                                   VALUE              => NULL,
                                                                                   value_clob         => NULL,
                                                                                   min_value          => NULL,
                                                                                   max_value          => NULL,
                                                                                   desc_value         => NULL,
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => NULL,
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => pk_orders_constant.g_component_hidden,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            ELSIF i_tbl_int_name(j) IN (pk_orders_constant.g_ds_week_day)
                            THEN
                                SELECT pk_date_utils.week_day_standard(i_date => current_timestamp)
                                  INTO l_day_of_week
                                  FROM dual;
                            
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(j),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(j)),
                                                                                   internal_name      => i_tbl_int_name(j),
                                                                                   VALUE              => l_day_of_week,
                                                                                   value_clob         => NULL,
                                                                                   min_value          => NULL,
                                                                                   max_value          => NULL,
                                                                                   desc_value         => pk_sysdomain.get_domain(i_lang          => i_lang,
                                                                                                                                 i_prof          => i_prof,
                                                                                                                                 i_code_dom      => 'WEEK_DAY',
                                                                                                                                 i_val           => l_day_of_week,
                                                                                                                                 i_dep_clin_serv => NULL),
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => NULL,
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            ELSIF i_tbl_int_name(j) IN (pk_orders_constant.g_ds_on_weeks)
                            THEN
                                SELECT to_char(current_timestamp, 'W')
                                  INTO l_week_number
                                  FROM dual;
                            
                                tbl_result.extend();
                                tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_tbl_mkt_rel(j),
                                                                                   id_ds_component    => pk_orders_utils.get_id_ds_component(i_tbl_mkt_rel(j)),
                                                                                   internal_name      => i_tbl_int_name(j),
                                                                                   VALUE              => l_week_number,
                                                                                   value_clob         => NULL,
                                                                                   min_value          => NULL,
                                                                                   max_value          => NULL,
                                                                                   desc_value         => pk_sysdomain.get_domain(i_lang          => i_lang,
                                                                                                                                 i_prof          => i_prof,
                                                                                                                                 i_code_dom      => 'WEEK_OPTIONS',
                                                                                                                                 i_val           => l_week_number,
                                                                                                                                 i_dep_clin_serv => NULL),
                                                                                   desc_clob          => NULL,
                                                                                   id_unit_measure    => NULL,
                                                                                   desc_unit_measure  => NULL,
                                                                                   flg_validation     => pk_orders_constant.g_component_valid,
                                                                                   err_msg            => NULL,
                                                                                   flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                                   flg_multi_status   => NULL,
                                                                                   idx                => i_idx);
                            END IF;
                        END LOOP;
                    END IF;
                ELSIF l_curr_comp_int_name = pk_orders_constant.g_ds_end_after_d
                THEN
                    l_current_value := pk_orders_utils.get_value(l_curr_comp_int_name, i_tbl_mkt_rel, i_value);
                
                    FOR j IN i_tbl_mkt_rel.first .. i_tbl_mkt_rel.last
                    LOOP
                        IF i_tbl_int_name(j) = pk_orders_constant.g_ds_start_date_medium
                        THEN
                            l_start_date := pk_orders_utils.get_value(i_tbl_int_name(j), i_tbl_mkt_rel, i_value);
                            EXIT;
                        END IF;
                    END LOOP;
                
                    IF l_start_date IS NULL
                    THEN
                        IF pk_date_utils.compare_dates_tsz(i_prof  => i_prof,
                                                           i_date1 => pk_date_utils.trunc_insttimezone(i_prof      => i_prof,
                                                                                                       i_timestamp => pk_date_utils.get_string_tstz(i_lang,
                                                                                                                                                    i_prof,
                                                                                                                                                    l_current_value,
                                                                                                                                                    NULL),
                                                                                                       i_format    => 'DD'),
                                                           i_date2 => pk_date_utils.trunc_insttimezone(i_prof      => i_prof,
                                                                                                       i_timestamp => current_timestamp,
                                                                                                       i_format    => 'DD')) = 'L'
                        THEN
                            tbl_result.extend();
                            tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_curr_component,
                                                                               id_ds_component    => pk_orders_utils.get_id_ds_component(i_curr_component),
                                                                               internal_name      => l_curr_comp_int_name,
                                                                               VALUE              => l_current_value,
                                                                               value_clob         => NULL,
                                                                               min_value          => NULL,
                                                                               max_value          => NULL,
                                                                               desc_value         => NULL,
                                                                               desc_clob          => NULL,
                                                                               id_unit_measure    => NULL,
                                                                               desc_unit_measure  => NULL,
                                                                               flg_validation     => pk_orders_constant.g_component_error,
                                                                               err_msg            => pk_message.get_message(i_lang,
                                                                                                                            'COMMON_T066'),
                                                                               flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                               flg_multi_status   => NULL,
                                                                               idx                => i_idx);
                        
                        END IF;
                    ELSE
                        IF pk_date_utils.compare_dates_tsz(i_prof  => i_prof,
                                                           i_date1 => pk_date_utils.trunc_insttimezone(i_prof      => i_prof,
                                                                                                       i_timestamp => pk_date_utils.get_string_tstz(i_lang,
                                                                                                                                                    i_prof,
                                                                                                                                                    l_current_value,
                                                                                                                                                    NULL),
                                                                                                       i_format    => 'DD'),
                                                           i_date2 => pk_date_utils.trunc_insttimezone(i_prof      => i_prof,
                                                                                                       i_timestamp => pk_date_utils.get_string_tstz(i_lang,
                                                                                                                                                    i_prof,
                                                                                                                                                    l_start_date,
                                                                                                                                                    NULL),
                                                                                                       i_format    => 'DD')) = 'L'
                        THEN
                            tbl_result.extend();
                            tbl_result(tbl_result.count) := t_rec_ds_get_value(id_ds_cmpt_mkt_rel => i_curr_component,
                                                                               id_ds_component    => pk_orders_utils.get_id_ds_component(i_curr_component),
                                                                               internal_name      => l_curr_comp_int_name,
                                                                               VALUE              => l_current_value,
                                                                               value_clob         => NULL,
                                                                               min_value          => NULL,
                                                                               max_value          => NULL,
                                                                               desc_value         => NULL,
                                                                               desc_clob          => NULL,
                                                                               id_unit_measure    => NULL,
                                                                               desc_unit_measure  => NULL,
                                                                               flg_validation     => pk_orders_constant.g_component_error,
                                                                               err_msg            => pk_message.get_message(i_lang,
                                                                                                                            'COMMON_T067'),
                                                                               flg_event_type     => pk_orders_constant.g_component_mandatory,
                                                                               flg_multi_status   => NULL,
                                                                               idx                => i_idx);
                        
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;
    
        RETURN tbl_result;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.process_error(i_lang,
                                              SQLCODE,
                                              SQLERRM,
                                              g_error,
                                              g_pk_owner,
                                              g_package_name,
                                              l_db_object_name,
                                              o_error);
            RETURN NULL;
    END get_event_form_values;

BEGIN
    g_package_name := pk_alertlog.who_am_i;
    pk_alertlog.log_init(g_package_name);
END pk_events;
/
