/*-- Last Change Revision: $Rev: 2028308 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:59 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_pat_health_plan
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Novembro 21, 2008 18:24:46
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_pat_health_plan_in IN pat_health_plan.id_pat_health_plan%TYPE,
        dt_health_plan_in     IN pat_health_plan.dt_health_plan%TYPE DEFAULT NULL,
        id_patient_in         IN pat_health_plan.id_patient%TYPE DEFAULT NULL,
        id_health_plan_in     IN pat_health_plan.id_health_plan%TYPE DEFAULT NULL,
        num_health_plan_in    IN pat_health_plan.num_health_plan%TYPE DEFAULT NULL,
        flg_status_in         IN pat_health_plan.flg_status%TYPE DEFAULT NULL,
        barcode_in            IN pat_health_plan.barcode%TYPE DEFAULT NULL,
        flg_default_in        IN pat_health_plan.flg_default%TYPE DEFAULT NULL,
        id_institution_in     IN pat_health_plan.id_institution%TYPE DEFAULT NULL,
        desc_health_plan_in   IN pat_health_plan.desc_health_plan%TYPE DEFAULT NULL,
        id_episode_in         IN pat_health_plan.id_episode%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO pat_health_plan
            (id_pat_health_plan,
             dt_health_plan,
             id_patient,
             id_health_plan,
             num_health_plan,
             flg_status,
             barcode,
             flg_default,
             id_institution,
             desc_health_plan,
             id_episode)
        VALUES
            (id_pat_health_plan_in,
             dt_health_plan_in,
             id_patient_in,
             id_health_plan_in,
             num_health_plan_in,
             flg_status_in,
             barcode_in,
             flg_default_in,
             id_institution_in,
             desc_health_plan_in,
             id_episode_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_HEALTH_PLAN');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    IF l_name = 'PHP_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PHP_HPN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HEALTH_PLAN',
                                                        value_in           => id_health_plan_in);
                    END IF;
                    IF l_name = 'PHP_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_pat_health_plan_in IN pat_health_plan.id_pat_health_plan%TYPE,
        dt_health_plan_in     IN pat_health_plan.dt_health_plan%TYPE DEFAULT NULL,
        id_patient_in         IN pat_health_plan.id_patient%TYPE DEFAULT NULL,
        id_health_plan_in     IN pat_health_plan.id_health_plan%TYPE DEFAULT NULL,
        num_health_plan_in    IN pat_health_plan.num_health_plan%TYPE DEFAULT NULL,
        flg_status_in         IN pat_health_plan.flg_status%TYPE DEFAULT NULL,
        barcode_in            IN pat_health_plan.barcode%TYPE DEFAULT NULL,
        flg_default_in        IN pat_health_plan.flg_default%TYPE DEFAULT NULL,
        id_institution_in     IN pat_health_plan.id_institution%TYPE DEFAULT NULL,
        desc_health_plan_in   IN pat_health_plan.desc_health_plan%TYPE DEFAULT NULL,
        id_episode_in         IN pat_health_plan.id_episode%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_pat_health_plan_in => id_pat_health_plan_in,
            dt_health_plan_in     => dt_health_plan_in,
            id_patient_in         => id_patient_in,
            id_health_plan_in     => id_health_plan_in,
            num_health_plan_in    => num_health_plan_in,
            flg_status_in         => flg_status_in,
            barcode_in            => barcode_in,
            flg_default_in        => flg_default_in,
            id_institution_in     => id_institution_in,
            desc_health_plan_in   => desc_health_plan_in,
            id_episode_in         => id_episode_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_health_plan%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec pat_health_plan%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_pat_health_plan := next_key(sequence_in);
        END IF;
        ins(id_pat_health_plan_in => l_rec.id_pat_health_plan,
            dt_health_plan_in     => l_rec.dt_health_plan,
            id_patient_in         => l_rec.id_patient,
            id_health_plan_in     => l_rec.id_health_plan,
            num_health_plan_in    => l_rec.num_health_plan,
            flg_status_in         => l_rec.flg_status,
            barcode_in            => l_rec.barcode,
            flg_default_in        => l_rec.flg_default,
            id_institution_in     => l_rec.id_institution,
            desc_health_plan_in   => l_rec.desc_health_plan,
            id_episode_in         => l_rec.id_episode,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pat_health_plan%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN pat_health_plan.id_pat_health_plan%TYPE
    
     IS
        retval pat_health_plan.id_pat_health_plan%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_pat_health_plan.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_PAT_HEALTH_PLAN'));
    END next_key;

    PROCEDURE ins
    (
        dt_health_plan_in      IN pat_health_plan.dt_health_plan%TYPE DEFAULT NULL,
        id_patient_in          IN pat_health_plan.id_patient%TYPE DEFAULT NULL,
        id_health_plan_in      IN pat_health_plan.id_health_plan%TYPE DEFAULT NULL,
        num_health_plan_in     IN pat_health_plan.num_health_plan%TYPE DEFAULT NULL,
        flg_status_in          IN pat_health_plan.flg_status%TYPE DEFAULT NULL,
        barcode_in             IN pat_health_plan.barcode%TYPE DEFAULT NULL,
        flg_default_in         IN pat_health_plan.flg_default%TYPE DEFAULT NULL,
        id_institution_in      IN pat_health_plan.id_institution%TYPE DEFAULT NULL,
        desc_health_plan_in    IN pat_health_plan.desc_health_plan%TYPE DEFAULT NULL,
        id_episode_in          IN pat_health_plan.id_episode%TYPE DEFAULT NULL,
        id_pat_health_plan_out IN OUT pat_health_plan.id_pat_health_plan%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky pat_health_plan.id_pat_health_plan%TYPE := next_key;
    BEGIN
        ins(id_pat_health_plan_in => l_pky,
            dt_health_plan_in     => dt_health_plan_in,
            id_patient_in         => id_patient_in,
            id_health_plan_in     => id_health_plan_in,
            num_health_plan_in    => num_health_plan_in,
            flg_status_in         => flg_status_in,
            barcode_in            => barcode_in,
            flg_default_in        => flg_default_in,
            id_institution_in     => id_institution_in,
            desc_health_plan_in   => desc_health_plan_in,
            id_episode_in         => id_episode_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        id_pat_health_plan_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        dt_health_plan_in      IN pat_health_plan.dt_health_plan%TYPE DEFAULT NULL,
        id_patient_in          IN pat_health_plan.id_patient%TYPE DEFAULT NULL,
        id_health_plan_in      IN pat_health_plan.id_health_plan%TYPE DEFAULT NULL,
        num_health_plan_in     IN pat_health_plan.num_health_plan%TYPE DEFAULT NULL,
        flg_status_in          IN pat_health_plan.flg_status%TYPE DEFAULT NULL,
        barcode_in             IN pat_health_plan.barcode%TYPE DEFAULT NULL,
        flg_default_in         IN pat_health_plan.flg_default%TYPE DEFAULT NULL,
        id_institution_in      IN pat_health_plan.id_institution%TYPE DEFAULT NULL,
        desc_health_plan_in    IN pat_health_plan.desc_health_plan%TYPE DEFAULT NULL,
        id_episode_in          IN pat_health_plan.id_episode%TYPE DEFAULT NULL,
        id_pat_health_plan_out IN OUT pat_health_plan.id_pat_health_plan%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(dt_health_plan_in      => dt_health_plan_in,
            id_patient_in          => id_patient_in,
            id_health_plan_in      => id_health_plan_in,
            num_health_plan_in     => num_health_plan_in,
            flg_status_in          => flg_status_in,
            barcode_in             => barcode_in,
            flg_default_in         => flg_default_in,
            id_institution_in      => id_institution_in,
            desc_health_plan_in    => desc_health_plan_in,
            id_episode_in          => id_episode_in,
            id_pat_health_plan_out => id_pat_health_plan_out,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    FUNCTION ins
    (
        dt_health_plan_in   IN pat_health_plan.dt_health_plan%TYPE DEFAULT NULL,
        id_patient_in       IN pat_health_plan.id_patient%TYPE DEFAULT NULL,
        id_health_plan_in   IN pat_health_plan.id_health_plan%TYPE DEFAULT NULL,
        num_health_plan_in  IN pat_health_plan.num_health_plan%TYPE DEFAULT NULL,
        flg_status_in       IN pat_health_plan.flg_status%TYPE DEFAULT NULL,
        barcode_in          IN pat_health_plan.barcode%TYPE DEFAULT NULL,
        flg_default_in      IN pat_health_plan.flg_default%TYPE DEFAULT NULL,
        id_institution_in   IN pat_health_plan.id_institution%TYPE DEFAULT NULL,
        desc_health_plan_in IN pat_health_plan.desc_health_plan%TYPE DEFAULT NULL,
        id_episode_in       IN pat_health_plan.id_episode%TYPE DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) RETURN pat_health_plan.id_pat_health_plan%TYPE IS
        l_pky pat_health_plan.id_pat_health_plan%TYPE := next_key;
    BEGIN
        ins(id_pat_health_plan_in => l_pky,
            dt_health_plan_in     => dt_health_plan_in,
            id_patient_in         => id_patient_in,
            id_health_plan_in     => id_health_plan_in,
            num_health_plan_in    => num_health_plan_in,
            flg_status_in         => flg_status_in,
            barcode_in            => barcode_in,
            flg_default_in        => flg_default_in,
            id_institution_in     => id_institution_in,
            desc_health_plan_in   => desc_health_plan_in,
            id_episode_in         => id_episode_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        dt_health_plan_in   IN pat_health_plan.dt_health_plan%TYPE DEFAULT NULL,
        id_patient_in       IN pat_health_plan.id_patient%TYPE DEFAULT NULL,
        id_health_plan_in   IN pat_health_plan.id_health_plan%TYPE DEFAULT NULL,
        num_health_plan_in  IN pat_health_plan.num_health_plan%TYPE DEFAULT NULL,
        flg_status_in       IN pat_health_plan.flg_status%TYPE DEFAULT NULL,
        barcode_in          IN pat_health_plan.barcode%TYPE DEFAULT NULL,
        flg_default_in      IN pat_health_plan.flg_default%TYPE DEFAULT NULL,
        id_institution_in   IN pat_health_plan.id_institution%TYPE DEFAULT NULL,
        desc_health_plan_in IN pat_health_plan.desc_health_plan%TYPE DEFAULT NULL,
        id_episode_in       IN pat_health_plan.id_episode%TYPE DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE
    ) RETURN pat_health_plan.id_pat_health_plan%TYPE IS
        l_pky    pat_health_plan.id_pat_health_plan%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_health_plan_in => l_pky,
            dt_health_plan_in     => dt_health_plan_in,
            id_patient_in         => id_patient_in,
            id_health_plan_in     => id_health_plan_in,
            num_health_plan_in    => num_health_plan_in,
            flg_status_in         => flg_status_in,
            barcode_in            => barcode_in,
            flg_default_in        => flg_default_in,
            id_institution_in     => id_institution_in,
            desc_health_plan_in   => desc_health_plan_in,
            id_episode_in         => id_episode_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        dt_health_plan_in   IN pat_health_plan.dt_health_plan%TYPE DEFAULT NULL,
        id_patient_in       IN pat_health_plan.id_patient%TYPE DEFAULT NULL,
        id_health_plan_in   IN pat_health_plan.id_health_plan%TYPE DEFAULT NULL,
        num_health_plan_in  IN pat_health_plan.num_health_plan%TYPE DEFAULT NULL,
        flg_status_in       IN pat_health_plan.flg_status%TYPE DEFAULT NULL,
        barcode_in          IN pat_health_plan.barcode%TYPE DEFAULT NULL,
        flg_default_in      IN pat_health_plan.flg_default%TYPE DEFAULT NULL,
        id_institution_in   IN pat_health_plan.id_institution%TYPE DEFAULT NULL,
        desc_health_plan_in IN pat_health_plan.desc_health_plan%TYPE DEFAULT NULL,
        id_episode_in       IN pat_health_plan.id_episode%TYPE DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
        l_pky pat_health_plan.id_pat_health_plan%TYPE := next_key;
    BEGIN
        ins(id_pat_health_plan_in => l_pky,
            dt_health_plan_in     => dt_health_plan_in,
            id_patient_in         => id_patient_in,
            id_health_plan_in     => id_health_plan_in,
            num_health_plan_in    => num_health_plan_in,
            flg_status_in         => flg_status_in,
            barcode_in            => barcode_in,
            flg_default_in        => flg_default_in,
            id_institution_in     => id_institution_in,
            desc_health_plan_in   => desc_health_plan_in,
            id_episode_in         => id_episode_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        dt_health_plan_in   IN pat_health_plan.dt_health_plan%TYPE DEFAULT NULL,
        id_patient_in       IN pat_health_plan.id_patient%TYPE DEFAULT NULL,
        id_health_plan_in   IN pat_health_plan.id_health_plan%TYPE DEFAULT NULL,
        num_health_plan_in  IN pat_health_plan.num_health_plan%TYPE DEFAULT NULL,
        flg_status_in       IN pat_health_plan.flg_status%TYPE DEFAULT NULL,
        barcode_in          IN pat_health_plan.barcode%TYPE DEFAULT NULL,
        flg_default_in      IN pat_health_plan.flg_default%TYPE DEFAULT NULL,
        id_institution_in   IN pat_health_plan.id_institution%TYPE DEFAULT NULL,
        desc_health_plan_in IN pat_health_plan.desc_health_plan%TYPE DEFAULT NULL,
        id_episode_in       IN pat_health_plan.id_episode%TYPE DEFAULT NULL,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        l_pky    pat_health_plan.id_pat_health_plan%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_pat_health_plan_in => l_pky,
            dt_health_plan_in     => dt_health_plan_in,
            id_patient_in         => id_patient_in,
            id_health_plan_in     => id_health_plan_in,
            num_health_plan_in    => num_health_plan_in,
            flg_status_in         => flg_status_in,
            barcode_in            => barcode_in,
            flg_default_in        => flg_default_in,
            id_institution_in     => id_institution_in,
            desc_health_plan_in   => desc_health_plan_in,
            id_episode_in         => id_episode_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_health_plan_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO pat_health_plan
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PAT_HEALTH_PLAN _' || indx,
                                                        value_in           => rows_in(indx).id_pat_health_plan,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_HEALTH_PLAN _' || indx,
                                                        value_in           => rows_in(indx).dt_health_plan,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_HEALTH_PLAN _' || indx,
                                                        value_in           => rows_in(indx).id_health_plan,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NUM_HEALTH_PLAN _' || indx,
                                                        value_in           => rows_in(indx).num_health_plan,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BARCODE _' || indx,
                                                        value_in           => rows_in(indx).barcode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_DEFAULT _' || indx,
                                                        value_in           => rows_in(indx).flg_default,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DESC_HEALTH_PLAN _' || indx,
                                                        value_in           => rows_in(indx).desc_health_plan,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'PAT_HEALTH_PLAN',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN pat_health_plan_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_pat_health_plan_in IN pat_health_plan.id_pat_health_plan%TYPE,
        dt_health_plan_in     IN pat_health_plan.dt_health_plan%TYPE DEFAULT NULL,
        dt_health_plan_nin    IN BOOLEAN := TRUE,
        id_patient_in         IN pat_health_plan.id_patient%TYPE DEFAULT NULL,
        id_patient_nin        IN BOOLEAN := TRUE,
        id_health_plan_in     IN pat_health_plan.id_health_plan%TYPE DEFAULT NULL,
        id_health_plan_nin    IN BOOLEAN := TRUE,
        num_health_plan_in    IN pat_health_plan.num_health_plan%TYPE DEFAULT NULL,
        num_health_plan_nin   IN BOOLEAN := TRUE,
        flg_status_in         IN pat_health_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin        IN BOOLEAN := TRUE,
        barcode_in            IN pat_health_plan.barcode%TYPE DEFAULT NULL,
        barcode_nin           IN BOOLEAN := TRUE,
        flg_default_in        IN pat_health_plan.flg_default%TYPE DEFAULT NULL,
        flg_default_nin       IN BOOLEAN := TRUE,
        id_institution_in     IN pat_health_plan.id_institution%TYPE DEFAULT NULL,
        id_institution_nin    IN BOOLEAN := TRUE,
        desc_health_plan_in   IN pat_health_plan.desc_health_plan%TYPE DEFAULT NULL,
        desc_health_plan_nin  IN BOOLEAN := TRUE,
        id_episode_in         IN pat_health_plan.id_episode%TYPE DEFAULT NULL,
        id_episode_nin        IN BOOLEAN := TRUE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              IN OUT table_varchar
    ) IS
        l_rows_out           table_varchar;
        l_dt_health_plan_n   NUMBER(1);
        l_id_patient_n       NUMBER(1);
        l_id_health_plan_n   NUMBER(1);
        l_num_health_plan_n  NUMBER(1);
        l_flg_status_n       NUMBER(1);
        l_barcode_n          NUMBER(1);
        l_flg_default_n      NUMBER(1);
        l_id_institution_n   NUMBER(1);
        l_desc_health_plan_n NUMBER(1);
        l_id_episode_n       NUMBER(1);
    BEGIN
    
        l_dt_health_plan_n   := sys.diutil.bool_to_int(dt_health_plan_nin);
        l_id_patient_n       := sys.diutil.bool_to_int(id_patient_nin);
        l_id_health_plan_n   := sys.diutil.bool_to_int(id_health_plan_nin);
        l_num_health_plan_n  := sys.diutil.bool_to_int(num_health_plan_nin);
        l_flg_status_n       := sys.diutil.bool_to_int(flg_status_nin);
        l_barcode_n          := sys.diutil.bool_to_int(barcode_nin);
        l_flg_default_n      := sys.diutil.bool_to_int(flg_default_nin);
        l_id_institution_n   := sys.diutil.bool_to_int(id_institution_nin);
        l_desc_health_plan_n := sys.diutil.bool_to_int(desc_health_plan_nin);
        l_id_episode_n       := sys.diutil.bool_to_int(id_episode_nin);
    
        UPDATE pat_health_plan
           SET dt_health_plan   = decode(l_dt_health_plan_n,
                                         0,
                                         dt_health_plan_in,
                                         nvl(dt_health_plan_in, dt_health_plan)),
               id_patient       = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_health_plan   = decode(l_id_health_plan_n,
                                         0,
                                         id_health_plan_in,
                                         nvl(id_health_plan_in, id_health_plan)),
               num_health_plan  = decode(l_num_health_plan_n,
                                         0,
                                         num_health_plan_in,
                                         nvl(num_health_plan_in, num_health_plan)),
               flg_status       = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               barcode          = decode(l_barcode_n, 0, barcode_in, nvl(barcode_in, barcode)),
               flg_default      = decode(l_flg_default_n, 0, flg_default_in, nvl(flg_default_in, flg_default)),
               id_institution   = decode(l_id_institution_n,
                                         0,
                                         id_institution_in,
                                         nvl(id_institution_in, id_institution)),
               desc_health_plan = decode(l_desc_health_plan_n,
                                         0,
                                         desc_health_plan_in,
                                         nvl(desc_health_plan_in, desc_health_plan)),
               id_episode       = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode))
         WHERE id_pat_health_plan = id_pat_health_plan_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_HEALTH_PLAN');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    IF l_name = 'PHP_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PHP_HPN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HEALTH_PLAN',
                                                        value_in           => id_health_plan_in);
                    END IF;
                    IF l_name = 'PHP_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_pat_health_plan_in IN pat_health_plan.id_pat_health_plan%TYPE,
        dt_health_plan_in     IN pat_health_plan.dt_health_plan%TYPE DEFAULT NULL,
        dt_health_plan_nin    IN BOOLEAN := TRUE,
        id_patient_in         IN pat_health_plan.id_patient%TYPE DEFAULT NULL,
        id_patient_nin        IN BOOLEAN := TRUE,
        id_health_plan_in     IN pat_health_plan.id_health_plan%TYPE DEFAULT NULL,
        id_health_plan_nin    IN BOOLEAN := TRUE,
        num_health_plan_in    IN pat_health_plan.num_health_plan%TYPE DEFAULT NULL,
        num_health_plan_nin   IN BOOLEAN := TRUE,
        flg_status_in         IN pat_health_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin        IN BOOLEAN := TRUE,
        barcode_in            IN pat_health_plan.barcode%TYPE DEFAULT NULL,
        barcode_nin           IN BOOLEAN := TRUE,
        flg_default_in        IN pat_health_plan.flg_default%TYPE DEFAULT NULL,
        flg_default_nin       IN BOOLEAN := TRUE,
        id_institution_in     IN pat_health_plan.id_institution%TYPE DEFAULT NULL,
        id_institution_nin    IN BOOLEAN := TRUE,
        desc_health_plan_in   IN pat_health_plan.desc_health_plan%TYPE DEFAULT NULL,
        desc_health_plan_nin  IN BOOLEAN := TRUE,
        id_episode_in         IN pat_health_plan.id_episode%TYPE DEFAULT NULL,
        id_episode_nin        IN BOOLEAN := TRUE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_health_plan_in => id_pat_health_plan_in,
            dt_health_plan_in     => dt_health_plan_in,
            dt_health_plan_nin    => dt_health_plan_nin,
            id_patient_in         => id_patient_in,
            id_patient_nin        => id_patient_nin,
            id_health_plan_in     => id_health_plan_in,
            id_health_plan_nin    => id_health_plan_nin,
            num_health_plan_in    => num_health_plan_in,
            num_health_plan_nin   => num_health_plan_nin,
            flg_status_in         => flg_status_in,
            flg_status_nin        => flg_status_nin,
            barcode_in            => barcode_in,
            barcode_nin           => barcode_nin,
            flg_default_in        => flg_default_in,
            flg_default_nin       => flg_default_nin,
            id_institution_in     => id_institution_in,
            id_institution_nin    => id_institution_nin,
            desc_health_plan_in   => desc_health_plan_in,
            desc_health_plan_nin  => desc_health_plan_nin,
            id_episode_in         => id_episode_in,
            id_episode_nin        => id_episode_nin,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END upd;

    PROCEDURE upd
    (
        dt_health_plan_in    IN pat_health_plan.dt_health_plan%TYPE DEFAULT NULL,
        dt_health_plan_nin   IN BOOLEAN := TRUE,
        id_patient_in        IN pat_health_plan.id_patient%TYPE DEFAULT NULL,
        id_patient_nin       IN BOOLEAN := TRUE,
        id_health_plan_in    IN pat_health_plan.id_health_plan%TYPE DEFAULT NULL,
        id_health_plan_nin   IN BOOLEAN := TRUE,
        num_health_plan_in   IN pat_health_plan.num_health_plan%TYPE DEFAULT NULL,
        num_health_plan_nin  IN BOOLEAN := TRUE,
        flg_status_in        IN pat_health_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin       IN BOOLEAN := TRUE,
        barcode_in           IN pat_health_plan.barcode%TYPE DEFAULT NULL,
        barcode_nin          IN BOOLEAN := TRUE,
        flg_default_in       IN pat_health_plan.flg_default%TYPE DEFAULT NULL,
        flg_default_nin      IN BOOLEAN := TRUE,
        id_institution_in    IN pat_health_plan.id_institution%TYPE DEFAULT NULL,
        id_institution_nin   IN BOOLEAN := TRUE,
        desc_health_plan_in  IN pat_health_plan.desc_health_plan%TYPE DEFAULT NULL,
        desc_health_plan_nin IN BOOLEAN := TRUE,
        id_episode_in        IN pat_health_plan.id_episode%TYPE DEFAULT NULL,
        id_episode_nin       IN BOOLEAN := TRUE,
        where_in             VARCHAR2 DEFAULT NULL,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             IN OUT table_varchar
    ) IS
        l_sql                 VARCHAR2(32767);
        l_rows_out            table_varchar;
        l_dt_health_plan_n    NUMBER(1);
        l_id_patient_n        NUMBER(1);
        l_id_health_plan_n    NUMBER(1);
        l_num_health_plan_n   NUMBER(1);
        l_flg_status_n        NUMBER(1);
        l_barcode_n           NUMBER(1);
        l_flg_default_n       NUMBER(1);
        l_id_institution_n    NUMBER(1);
        l_desc_health_plan_n  NUMBER(1);
        l_id_episode_n        NUMBER(1);
        id_pat_health_plan_in pat_health_plan.id_pat_health_plan%TYPE;
    BEGIN
    
        l_dt_health_plan_n   := sys.diutil.bool_to_int(dt_health_plan_nin);
        l_id_patient_n       := sys.diutil.bool_to_int(id_patient_nin);
        l_id_health_plan_n   := sys.diutil.bool_to_int(id_health_plan_nin);
        l_num_health_plan_n  := sys.diutil.bool_to_int(num_health_plan_nin);
        l_flg_status_n       := sys.diutil.bool_to_int(flg_status_nin);
        l_barcode_n          := sys.diutil.bool_to_int(barcode_nin);
        l_flg_default_n      := sys.diutil.bool_to_int(flg_default_nin);
        l_id_institution_n   := sys.diutil.bool_to_int(id_institution_nin);
        l_desc_health_plan_n := sys.diutil.bool_to_int(desc_health_plan_nin);
        l_id_episode_n       := sys.diutil.bool_to_int(id_episode_nin);
    
        l_sql := 'UPDATE PAT_HEALTH_PLAN SET ' || ' DT_HEALTH_PLAN = decode (' || l_dt_health_plan_n ||
                 ',0,:dt_health_plan_in, NVL (:dt_health_plan_in, DT_HEALTH_PLAN)) ' || ',' || ' ID_PATIENT = decode (' ||
                 l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' ID_HEALTH_PLAN = decode (' || l_id_health_plan_n ||
                 ',0,:id_health_plan_in, NVL (:id_health_plan_in, ID_HEALTH_PLAN)) ' || ',' ||
                 ' NUM_HEALTH_PLAN = decode (' || l_num_health_plan_n ||
                 ',0,:num_health_plan_in, NVL (:num_health_plan_in, NUM_HEALTH_PLAN)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' BARCODE = decode (' || l_barcode_n || ',0,:barcode_in, NVL (:barcode_in, BARCODE)) ' || ',' ||
                 ' FLG_DEFAULT = decode (' || l_flg_default_n ||
                 ',0,:flg_default_in, NVL (:flg_default_in, FLG_DEFAULT)) ' || ',' || ' ID_INSTITUTION = decode (' ||
                 l_id_institution_n || ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' ||
                 ' DESC_HEALTH_PLAN = decode (' || l_desc_health_plan_n ||
                 ',0,:desc_health_plan_in, NVL (:desc_health_plan_in, DESC_HEALTH_PLAN)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' ||
                 ' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN dt_health_plan_in, id_patient_in, id_health_plan_in, num_health_plan_in, flg_status_in, barcode_in, flg_default_in, id_institution_in, desc_health_plan_in, id_episode_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'PAT_HEALTH_PLAN');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    IF l_name = 'PHP_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'PHP_HPN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HEALTH_PLAN',
                                                        value_in           => id_health_plan_in);
                    END IF;
                    IF l_name = 'PHP_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        dt_health_plan_in    IN pat_health_plan.dt_health_plan%TYPE DEFAULT NULL,
        dt_health_plan_nin   IN BOOLEAN := TRUE,
        id_patient_in        IN pat_health_plan.id_patient%TYPE DEFAULT NULL,
        id_patient_nin       IN BOOLEAN := TRUE,
        id_health_plan_in    IN pat_health_plan.id_health_plan%TYPE DEFAULT NULL,
        id_health_plan_nin   IN BOOLEAN := TRUE,
        num_health_plan_in   IN pat_health_plan.num_health_plan%TYPE DEFAULT NULL,
        num_health_plan_nin  IN BOOLEAN := TRUE,
        flg_status_in        IN pat_health_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin       IN BOOLEAN := TRUE,
        barcode_in           IN pat_health_plan.barcode%TYPE DEFAULT NULL,
        barcode_nin          IN BOOLEAN := TRUE,
        flg_default_in       IN pat_health_plan.flg_default%TYPE DEFAULT NULL,
        flg_default_nin      IN BOOLEAN := TRUE,
        id_institution_in    IN pat_health_plan.id_institution%TYPE DEFAULT NULL,
        id_institution_nin   IN BOOLEAN := TRUE,
        desc_health_plan_in  IN pat_health_plan.desc_health_plan%TYPE DEFAULT NULL,
        desc_health_plan_nin IN BOOLEAN := TRUE,
        id_episode_in        IN pat_health_plan.id_episode%TYPE DEFAULT NULL,
        id_episode_nin       IN BOOLEAN := TRUE,
        where_in             VARCHAR2 DEFAULT NULL,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(dt_health_plan_in    => dt_health_plan_in,
            dt_health_plan_nin   => dt_health_plan_nin,
            id_patient_in        => id_patient_in,
            id_patient_nin       => id_patient_nin,
            id_health_plan_in    => id_health_plan_in,
            id_health_plan_nin   => id_health_plan_nin,
            num_health_plan_in   => num_health_plan_in,
            num_health_plan_nin  => num_health_plan_nin,
            flg_status_in        => flg_status_in,
            flg_status_nin       => flg_status_nin,
            barcode_in           => barcode_in,
            barcode_nin          => barcode_nin,
            flg_default_in       => flg_default_in,
            flg_default_nin      => flg_default_nin,
            id_institution_in    => id_institution_in,
            id_institution_nin   => id_institution_nin,
            desc_health_plan_in  => desc_health_plan_in,
            desc_health_plan_nin => desc_health_plan_nin,
            id_episode_in        => id_episode_in,
            id_episode_nin       => id_episode_nin,
            where_in             => where_in,
            handle_error_in      => handle_error_in,
            rows_out             => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_health_plan%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_health_plan_in => rec_in.id_pat_health_plan,
            dt_health_plan_in     => rec_in.dt_health_plan,
            id_patient_in         => rec_in.id_patient,
            id_health_plan_in     => rec_in.id_health_plan,
            num_health_plan_in    => rec_in.num_health_plan,
            flg_status_in         => rec_in.flg_status,
            barcode_in            => rec_in.barcode,
            flg_default_in        => rec_in.flg_default,
            id_institution_in     => rec_in.id_institution,
            desc_health_plan_in   => rec_in.desc_health_plan,
            id_episode_in         => rec_in.id_episode
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN pat_health_plan%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_pat_health_plan_in => rec_in.id_pat_health_plan,
            dt_health_plan_in     => rec_in.dt_health_plan,
            id_patient_in         => rec_in.id_patient,
            id_health_plan_in     => rec_in.id_health_plan,
            num_health_plan_in    => rec_in.num_health_plan,
            flg_status_in         => rec_in.flg_status,
            barcode_in            => rec_in.barcode,
            flg_default_in        => rec_in.flg_default,
            id_institution_in     => rec_in.id_institution,
            desc_health_plan_in   => rec_in.desc_health_plan,
            id_episode_in         => rec_in.id_episode
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_pat_health_plan_in IN pat_health_plan.id_pat_health_plan%TYPE,
        dt_health_plan_in     IN pat_health_plan.dt_health_plan%TYPE DEFAULT NULL,
        id_patient_in         IN pat_health_plan.id_patient%TYPE DEFAULT NULL,
        id_health_plan_in     IN pat_health_plan.id_health_plan%TYPE DEFAULT NULL,
        num_health_plan_in    IN pat_health_plan.num_health_plan%TYPE DEFAULT NULL,
        flg_status_in         IN pat_health_plan.flg_status%TYPE DEFAULT NULL,
        barcode_in            IN pat_health_plan.barcode%TYPE DEFAULT NULL,
        flg_default_in        IN pat_health_plan.flg_default%TYPE DEFAULT NULL,
        id_institution_in     IN pat_health_plan.id_institution%TYPE DEFAULT NULL,
        desc_health_plan_in   IN pat_health_plan.desc_health_plan%TYPE DEFAULT NULL,
        id_episode_in         IN pat_health_plan.id_episode%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        upd(id_pat_health_plan_in => id_pat_health_plan_in,
            dt_health_plan_in     => dt_health_plan_in,
            id_patient_in         => id_patient_in,
            id_health_plan_in     => id_health_plan_in,
            num_health_plan_in    => num_health_plan_in,
            flg_status_in         => flg_status_in,
            barcode_in            => barcode_in,
            flg_default_in        => flg_default_in,
            id_institution_in     => id_institution_in,
            desc_health_plan_in   => desc_health_plan_in,
            id_episode_in         => id_episode_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_pat_health_plan_in => id_pat_health_plan_in,
                dt_health_plan_in     => dt_health_plan_in,
                id_patient_in         => id_patient_in,
                id_health_plan_in     => id_health_plan_in,
                num_health_plan_in    => num_health_plan_in,
                flg_status_in         => flg_status_in,
                barcode_in            => barcode_in,
                flg_default_in        => flg_default_in,
                id_institution_in     => id_institution_in,
                desc_health_plan_in   => desc_health_plan_in,
                id_episode_in         => id_episode_in,
                handle_error_in       => handle_error_in,
                rows_out              => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_pat_health_plan_in IN pat_health_plan.id_pat_health_plan%TYPE,
        dt_health_plan_in     IN pat_health_plan.dt_health_plan%TYPE DEFAULT NULL,
        id_patient_in         IN pat_health_plan.id_patient%TYPE DEFAULT NULL,
        id_health_plan_in     IN pat_health_plan.id_health_plan%TYPE DEFAULT NULL,
        num_health_plan_in    IN pat_health_plan.num_health_plan%TYPE DEFAULT NULL,
        flg_status_in         IN pat_health_plan.flg_status%TYPE DEFAULT NULL,
        barcode_in            IN pat_health_plan.barcode%TYPE DEFAULT NULL,
        flg_default_in        IN pat_health_plan.flg_default%TYPE DEFAULT NULL,
        id_institution_in     IN pat_health_plan.id_institution%TYPE DEFAULT NULL,
        desc_health_plan_in   IN pat_health_plan.desc_health_plan%TYPE DEFAULT NULL,
        id_episode_in         IN pat_health_plan.id_episode%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_pat_health_plan_in,
                dt_health_plan_in,
                id_patient_in,
                id_health_plan_in,
                num_health_plan_in,
                flg_status_in,
                barcode_in,
                flg_default_in,
                id_institution_in,
                desc_health_plan_in,
                id_episode_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN pat_health_plan_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_pat_health_plan id_pat_health_plan_cc;
        l_dt_health_plan     dt_health_plan_cc;
        l_id_patient         id_patient_cc;
        l_id_health_plan     id_health_plan_cc;
        l_num_health_plan    num_health_plan_cc;
        l_flg_status         flg_status_cc;
        l_barcode            barcode_cc;
        l_flg_default        flg_default_cc;
        l_id_institution     id_institution_cc;
        l_desc_health_plan   desc_health_plan_cc;
        l_id_episode         id_episode_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_pat_health_plan(i) := col_in(i).id_pat_health_plan;
            l_dt_health_plan(i) := col_in(i).dt_health_plan;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_health_plan(i) := col_in(i).id_health_plan;
            l_num_health_plan(i) := col_in(i).num_health_plan;
            l_flg_status(i) := col_in(i).flg_status;
            l_barcode(i) := col_in(i).barcode;
            l_flg_default(i) := col_in(i).flg_default;
            l_id_institution(i) := col_in(i).id_institution;
            l_desc_health_plan(i) := col_in(i).desc_health_plan;
            l_id_episode(i) := col_in(i).id_episode;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE pat_health_plan
                   SET dt_health_plan   = nvl(l_dt_health_plan(i), dt_health_plan),
                       id_patient       = nvl(l_id_patient(i), id_patient),
                       id_health_plan   = nvl(l_id_health_plan(i), id_health_plan),
                       num_health_plan  = nvl(l_num_health_plan(i), num_health_plan),
                       flg_status       = nvl(l_flg_status(i), flg_status),
                       barcode          = nvl(l_barcode(i), barcode),
                       flg_default      = nvl(l_flg_default(i), flg_default),
                       id_institution   = nvl(l_id_institution(i), id_institution),
                       desc_health_plan = nvl(l_desc_health_plan(i), desc_health_plan),
                       id_episode       = nvl(l_id_episode(i), id_episode)
                 WHERE id_pat_health_plan = l_id_pat_health_plan(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE pat_health_plan
                   SET dt_health_plan   = l_dt_health_plan(i),
                       id_patient       = l_id_patient(i),
                       id_health_plan   = l_id_health_plan(i),
                       num_health_plan  = l_num_health_plan(i),
                       flg_status       = l_flg_status(i),
                       barcode          = l_barcode(i),
                       flg_default      = l_flg_default(i),
                       id_institution   = l_id_institution(i),
                       desc_health_plan = l_desc_health_plan(i),
                       id_episode       = l_id_episode(i)
                 WHERE id_pat_health_plan = l_id_pat_health_plan(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN pat_health_plan_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE PAT_HEALTH_PLAN
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE PAT_HEALTH_PLAN
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE PAT_HEALTH_PLAN set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE PAT_HEALTH_PLAN set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_pat_health_plan_in IN pat_health_plan.id_pat_health_plan%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_health_plan
         WHERE id_pat_health_plan = id_pat_health_plan_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_pat_health_plan_in IN pat_health_plan.id_pat_health_plan%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_pat_health_plan_in => id_pat_health_plan_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_PAT_HEALTH_PLAN
    PROCEDURE del_id_pat_health_plan
    (
        id_pat_health_plan_in IN pat_health_plan.id_pat_health_plan%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_health_plan
         WHERE id_pat_health_plan = id_pat_health_plan_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_pat_health_plan;

    -- Delete all rows for primary key column ID_PAT_HEALTH_PLAN
    PROCEDURE del_id_pat_health_plan
    (
        id_pat_health_plan_in IN pat_health_plan.id_pat_health_plan%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_pat_health_plan(id_pat_health_plan_in => id_pat_health_plan_in,
                               handle_error_in       => handle_error_in,
                               rows_out              => rows_out);
    END del_id_pat_health_plan;

    PROCEDURE del_php_epis_fk
    (
        id_episode_in   IN pat_health_plan.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_health_plan
         WHERE id_episode = del_php_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_php_epis_fk;

    PROCEDURE del_php_epis_fk
    (
        id_episode_in   IN pat_health_plan.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_php_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_php_epis_fk;

    PROCEDURE del_php_hpn_fk
    (
        id_health_plan_in IN pat_health_plan.id_health_plan%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_health_plan
         WHERE id_health_plan = del_php_hpn_fk.id_health_plan_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_php_hpn_fk;

    PROCEDURE del_php_hpn_fk
    (
        id_health_plan_in IN pat_health_plan.id_health_plan%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_php_hpn_fk(id_health_plan_in => id_health_plan_in,
                       handle_error_in   => handle_error_in,
                       rows_out          => rows_out);
    END del_php_hpn_fk;

    PROCEDURE del_php_pat_fk
    (
        id_patient_in   IN pat_health_plan.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pat_health_plan
         WHERE id_patient = del_php_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_php_pat_fk;

    PROCEDURE del_php_pat_fk
    (
        id_patient_in   IN pat_health_plan.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_php_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_php_pat_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM PAT_HEALTH_PLAN';
        ELSE
            RETURN 'DELETE FROM PAT_HEALTH_PLAN WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'PAT_HEALTH_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'PAT_HEALTH_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(pat_health_plan_inout IN OUT pat_health_plan%ROWTYPE) IS
    BEGIN
        pat_health_plan_inout.id_pat_health_plan := NULL;
        pat_health_plan_inout.dt_health_plan     := NULL;
        pat_health_plan_inout.id_patient         := NULL;
        pat_health_plan_inout.id_health_plan     := NULL;
        pat_health_plan_inout.num_health_plan    := NULL;
        pat_health_plan_inout.flg_status         := NULL;
        pat_health_plan_inout.barcode            := NULL;
        pat_health_plan_inout.flg_default        := NULL;
        pat_health_plan_inout.id_institution     := NULL;
        pat_health_plan_inout.desc_health_plan   := NULL;
        pat_health_plan_inout.id_episode         := NULL;
    END initrec;

    FUNCTION initrec RETURN pat_health_plan%ROWTYPE IS
        l_pat_health_plan pat_health_plan%ROWTYPE;
    BEGIN
        RETURN l_pat_health_plan;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN pat_health_plan_tc IS
        data pat_health_plan_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM pat_health_plan
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN pat_health_plan_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data pat_health_plan_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_pat_health_plan;
/
