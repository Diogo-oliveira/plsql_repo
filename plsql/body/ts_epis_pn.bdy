/*-- Last Change Revision: $Rev: 1817951 $*/
/*-- Last Change by: $Author: anna.kurowska $*/
/*-- Date of last change: $Date: 2018-01-21 23:20:29 +0000 (dom, 21 jan 2018) $*/
CREATE OR REPLACE PACKAGE BODY ts_epis_pn
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2018-01-19 12:59:15
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN epis_pn.id_epis_pn%TYPE IS
        retval epis_pn.id_epis_pn%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_epis_pn.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_episode_in          IN epis_pn.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN epis_pn.flg_status%TYPE DEFAULT 'D',
        id_prof_create_in      IN epis_pn.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN epis_pn.dt_create%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN epis_pn.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_prof_last_update_in IN epis_pn.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN epis_pn.dt_last_update%TYPE DEFAULT NULL,
        dt_signoff_in          IN epis_pn.dt_signoff%TYPE DEFAULT NULL,
        id_prof_signoff_in     IN epis_pn.id_prof_signoff%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_pn.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN epis_pn.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_pn.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_pn.notes_cancel%TYPE DEFAULT NULL,
        id_dictation_report_in IN epis_pn.id_dictation_report%TYPE DEFAULT NULL,
        create_time_in         IN epis_pn.create_time%TYPE DEFAULT NULL,
        create_user_in         IN epis_pn.create_user%TYPE DEFAULT NULL,
        create_institution_in  IN epis_pn.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_pn.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_pn.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_pn.update_institution%TYPE DEFAULT NULL,
        id_pn_note_type_in     IN epis_pn.id_pn_note_type%TYPE DEFAULT NULL,
        dt_pn_date_in          IN epis_pn.dt_pn_date%TYPE DEFAULT NULL,
        id_pn_area_in          IN epis_pn.id_pn_area%TYPE DEFAULT NULL,
        flg_auto_saved_in      IN epis_pn.flg_auto_saved%TYPE DEFAULT 'N',
        id_software_in         IN epis_pn.id_software%TYPE DEFAULT NULL,
        id_prof_submit_in      IN epis_pn.id_prof_submit%TYPE DEFAULT NULL,
        dt_submit_in           IN epis_pn.dt_submit%TYPE DEFAULT NULL,
        id_prof_reviewed_in    IN epis_pn.id_prof_reviewed%TYPE DEFAULT NULL,
        dt_reviewed_in         IN epis_pn.dt_reviewed%TYPE DEFAULT NULL,
        id_submit_reason_in    IN epis_pn.id_submit_reason%TYPE DEFAULT NULL,
        notes_submit_in        IN epis_pn.notes_submit%TYPE DEFAULT NULL,
        dt_proposed_in         IN epis_pn.dt_proposed%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky epis_pn.id_epis_pn%TYPE := next_key;
    BEGIN
        ins(id_epis_pn_in          => l_pky,
            id_episode_in          => id_episode_in,
            flg_status_in          => flg_status_in,
            id_prof_create_in      => id_prof_create_in,
            dt_create_in           => dt_create_in,
            id_dep_clin_serv_in    => id_dep_clin_serv_in,
            id_prof_last_update_in => id_prof_last_update_in,
            dt_last_update_in      => dt_last_update_in,
            dt_signoff_in          => dt_signoff_in,
            id_prof_signoff_in     => id_prof_signoff_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            id_dictation_report_in => id_dictation_report_in,
            create_time_in         => create_time_in,
            create_user_in         => create_user_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_pn_note_type_in     => id_pn_note_type_in,
            dt_pn_date_in          => dt_pn_date_in,
            id_pn_area_in          => id_pn_area_in,
            flg_auto_saved_in      => flg_auto_saved_in,
            id_software_in         => id_software_in,
            id_prof_submit_in      => id_prof_submit_in,
            dt_submit_in           => dt_submit_in,
            id_prof_reviewed_in    => id_prof_reviewed_in,
            dt_reviewed_in         => dt_reviewed_in,
            id_submit_reason_in    => id_submit_reason_in,
            notes_submit_in        => notes_submit_in,
            dt_proposed_in         => dt_proposed_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_episode_in          IN epis_pn.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN epis_pn.flg_status%TYPE DEFAULT 'D',
        id_prof_create_in      IN epis_pn.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN epis_pn.dt_create%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN epis_pn.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_prof_last_update_in IN epis_pn.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN epis_pn.dt_last_update%TYPE DEFAULT NULL,
        dt_signoff_in          IN epis_pn.dt_signoff%TYPE DEFAULT NULL,
        id_prof_signoff_in     IN epis_pn.id_prof_signoff%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_pn.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN epis_pn.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_pn.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_pn.notes_cancel%TYPE DEFAULT NULL,
        id_dictation_report_in IN epis_pn.id_dictation_report%TYPE DEFAULT NULL,
        create_time_in         IN epis_pn.create_time%TYPE DEFAULT NULL,
        create_user_in         IN epis_pn.create_user%TYPE DEFAULT NULL,
        create_institution_in  IN epis_pn.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_pn.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_pn.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_pn.update_institution%TYPE DEFAULT NULL,
        id_pn_note_type_in     IN epis_pn.id_pn_note_type%TYPE DEFAULT NULL,
        dt_pn_date_in          IN epis_pn.dt_pn_date%TYPE DEFAULT NULL,
        id_pn_area_in          IN epis_pn.id_pn_area%TYPE DEFAULT NULL,
        flg_auto_saved_in      IN epis_pn.flg_auto_saved%TYPE DEFAULT 'N',
        id_software_in         IN epis_pn.id_software%TYPE DEFAULT NULL,
        id_prof_submit_in      IN epis_pn.id_prof_submit%TYPE DEFAULT NULL,
        dt_submit_in           IN epis_pn.dt_submit%TYPE DEFAULT NULL,
        id_prof_reviewed_in    IN epis_pn.id_prof_reviewed%TYPE DEFAULT NULL,
        dt_reviewed_in         IN epis_pn.dt_reviewed%TYPE DEFAULT NULL,
        id_submit_reason_in    IN epis_pn.id_submit_reason%TYPE DEFAULT NULL,
        notes_submit_in        IN epis_pn.notes_submit%TYPE DEFAULT NULL,
        dt_proposed_in         IN epis_pn.dt_proposed%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in          => id_episode_in,
            flg_status_in          => flg_status_in,
            id_prof_create_in      => id_prof_create_in,
            dt_create_in           => dt_create_in,
            id_dep_clin_serv_in    => id_dep_clin_serv_in,
            id_prof_last_update_in => id_prof_last_update_in,
            dt_last_update_in      => dt_last_update_in,
            dt_signoff_in          => dt_signoff_in,
            id_prof_signoff_in     => id_prof_signoff_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            id_dictation_report_in => id_dictation_report_in,
            create_time_in         => create_time_in,
            create_user_in         => create_user_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_pn_note_type_in     => id_pn_note_type_in,
            dt_pn_date_in          => dt_pn_date_in,
            id_pn_area_in          => id_pn_area_in,
            flg_auto_saved_in      => flg_auto_saved_in,
            id_software_in         => id_software_in,
            id_prof_submit_in      => id_prof_submit_in,
            dt_submit_in           => dt_submit_in,
            id_prof_reviewed_in    => id_prof_reviewed_in,
            dt_reviewed_in         => dt_reviewed_in,
            id_submit_reason_in    => id_submit_reason_in,
            notes_submit_in        => notes_submit_in,
            dt_proposed_in         => dt_proposed_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_episode_in          IN epis_pn.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN epis_pn.flg_status%TYPE DEFAULT 'D',
        id_prof_create_in      IN epis_pn.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN epis_pn.dt_create%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN epis_pn.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_prof_last_update_in IN epis_pn.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN epis_pn.dt_last_update%TYPE DEFAULT NULL,
        dt_signoff_in          IN epis_pn.dt_signoff%TYPE DEFAULT NULL,
        id_prof_signoff_in     IN epis_pn.id_prof_signoff%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_pn.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN epis_pn.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_pn.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_pn.notes_cancel%TYPE DEFAULT NULL,
        id_dictation_report_in IN epis_pn.id_dictation_report%TYPE DEFAULT NULL,
        create_time_in         IN epis_pn.create_time%TYPE DEFAULT NULL,
        create_user_in         IN epis_pn.create_user%TYPE DEFAULT NULL,
        create_institution_in  IN epis_pn.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_pn.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_pn.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_pn.update_institution%TYPE DEFAULT NULL,
        id_pn_note_type_in     IN epis_pn.id_pn_note_type%TYPE DEFAULT NULL,
        dt_pn_date_in          IN epis_pn.dt_pn_date%TYPE DEFAULT NULL,
        id_pn_area_in          IN epis_pn.id_pn_area%TYPE DEFAULT NULL,
        flg_auto_saved_in      IN epis_pn.flg_auto_saved%TYPE DEFAULT 'N',
        id_software_in         IN epis_pn.id_software%TYPE DEFAULT NULL,
        id_prof_submit_in      IN epis_pn.id_prof_submit%TYPE DEFAULT NULL,
        dt_submit_in           IN epis_pn.dt_submit%TYPE DEFAULT NULL,
        id_prof_reviewed_in    IN epis_pn.id_prof_reviewed%TYPE DEFAULT NULL,
        dt_reviewed_in         IN epis_pn.dt_reviewed%TYPE DEFAULT NULL,
        id_submit_reason_in    IN epis_pn.id_submit_reason%TYPE DEFAULT NULL,
        notes_submit_in        IN epis_pn.notes_submit%TYPE DEFAULT NULL,
        dt_proposed_in         IN epis_pn.dt_proposed%TYPE DEFAULT NULL,
        id_epis_pn_out         IN OUT epis_pn.id_epis_pn%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky epis_pn.id_epis_pn%TYPE := next_key;
    BEGIN
        ins(id_epis_pn_in          => l_pky,
            id_episode_in          => id_episode_in,
            flg_status_in          => flg_status_in,
            id_prof_create_in      => id_prof_create_in,
            dt_create_in           => dt_create_in,
            id_dep_clin_serv_in    => id_dep_clin_serv_in,
            id_prof_last_update_in => id_prof_last_update_in,
            dt_last_update_in      => dt_last_update_in,
            dt_signoff_in          => dt_signoff_in,
            id_prof_signoff_in     => id_prof_signoff_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            id_dictation_report_in => id_dictation_report_in,
            create_time_in         => create_time_in,
            create_user_in         => create_user_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_pn_note_type_in     => id_pn_note_type_in,
            dt_pn_date_in          => dt_pn_date_in,
            id_pn_area_in          => id_pn_area_in,
            flg_auto_saved_in      => flg_auto_saved_in,
            id_software_in         => id_software_in,
            id_prof_submit_in      => id_prof_submit_in,
            dt_submit_in           => dt_submit_in,
            id_prof_reviewed_in    => id_prof_reviewed_in,
            dt_reviewed_in         => dt_reviewed_in,
            id_submit_reason_in    => id_submit_reason_in,
            notes_submit_in        => notes_submit_in,
            dt_proposed_in         => dt_proposed_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        id_epis_pn_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_episode_in          IN epis_pn.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN epis_pn.flg_status%TYPE DEFAULT 'D',
        id_prof_create_in      IN epis_pn.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN epis_pn.dt_create%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN epis_pn.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_prof_last_update_in IN epis_pn.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN epis_pn.dt_last_update%TYPE DEFAULT NULL,
        dt_signoff_in          IN epis_pn.dt_signoff%TYPE DEFAULT NULL,
        id_prof_signoff_in     IN epis_pn.id_prof_signoff%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_pn.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN epis_pn.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_pn.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_pn.notes_cancel%TYPE DEFAULT NULL,
        id_dictation_report_in IN epis_pn.id_dictation_report%TYPE DEFAULT NULL,
        create_time_in         IN epis_pn.create_time%TYPE DEFAULT NULL,
        create_user_in         IN epis_pn.create_user%TYPE DEFAULT NULL,
        create_institution_in  IN epis_pn.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_pn.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_pn.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_pn.update_institution%TYPE DEFAULT NULL,
        id_pn_note_type_in     IN epis_pn.id_pn_note_type%TYPE DEFAULT NULL,
        dt_pn_date_in          IN epis_pn.dt_pn_date%TYPE DEFAULT NULL,
        id_pn_area_in          IN epis_pn.id_pn_area%TYPE DEFAULT NULL,
        flg_auto_saved_in      IN epis_pn.flg_auto_saved%TYPE DEFAULT 'N',
        id_software_in         IN epis_pn.id_software%TYPE DEFAULT NULL,
        id_prof_submit_in      IN epis_pn.id_prof_submit%TYPE DEFAULT NULL,
        dt_submit_in           IN epis_pn.dt_submit%TYPE DEFAULT NULL,
        id_prof_reviewed_in    IN epis_pn.id_prof_reviewed%TYPE DEFAULT NULL,
        dt_reviewed_in         IN epis_pn.dt_reviewed%TYPE DEFAULT NULL,
        id_submit_reason_in    IN epis_pn.id_submit_reason%TYPE DEFAULT NULL,
        notes_submit_in        IN epis_pn.notes_submit%TYPE DEFAULT NULL,
        dt_proposed_in         IN epis_pn.dt_proposed%TYPE DEFAULT NULL,
        id_epis_pn_out         IN OUT epis_pn.id_epis_pn%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in          => id_episode_in,
            flg_status_in          => flg_status_in,
            id_prof_create_in      => id_prof_create_in,
            dt_create_in           => dt_create_in,
            id_dep_clin_serv_in    => id_dep_clin_serv_in,
            id_prof_last_update_in => id_prof_last_update_in,
            dt_last_update_in      => dt_last_update_in,
            dt_signoff_in          => dt_signoff_in,
            id_prof_signoff_in     => id_prof_signoff_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            id_dictation_report_in => id_dictation_report_in,
            create_time_in         => create_time_in,
            create_user_in         => create_user_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_pn_note_type_in     => id_pn_note_type_in,
            dt_pn_date_in          => dt_pn_date_in,
            id_pn_area_in          => id_pn_area_in,
            flg_auto_saved_in      => flg_auto_saved_in,
            id_software_in         => id_software_in,
            id_prof_submit_in      => id_prof_submit_in,
            dt_submit_in           => dt_submit_in,
            id_prof_reviewed_in    => id_prof_reviewed_in,
            dt_reviewed_in         => dt_reviewed_in,
            id_submit_reason_in    => id_submit_reason_in,
            notes_submit_in        => notes_submit_in,
            dt_proposed_in         => dt_proposed_in,
            id_epis_pn_out         => id_epis_pn_out,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_episode_in          IN epis_pn.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN epis_pn.flg_status%TYPE DEFAULT 'D',
        id_prof_create_in      IN epis_pn.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN epis_pn.dt_create%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN epis_pn.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_prof_last_update_in IN epis_pn.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN epis_pn.dt_last_update%TYPE DEFAULT NULL,
        dt_signoff_in          IN epis_pn.dt_signoff%TYPE DEFAULT NULL,
        id_prof_signoff_in     IN epis_pn.id_prof_signoff%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_pn.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN epis_pn.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_pn.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_pn.notes_cancel%TYPE DEFAULT NULL,
        id_dictation_report_in IN epis_pn.id_dictation_report%TYPE DEFAULT NULL,
        create_time_in         IN epis_pn.create_time%TYPE DEFAULT NULL,
        create_user_in         IN epis_pn.create_user%TYPE DEFAULT NULL,
        create_institution_in  IN epis_pn.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_pn.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_pn.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_pn.update_institution%TYPE DEFAULT NULL,
        id_pn_note_type_in     IN epis_pn.id_pn_note_type%TYPE DEFAULT NULL,
        dt_pn_date_in          IN epis_pn.dt_pn_date%TYPE DEFAULT NULL,
        id_pn_area_in          IN epis_pn.id_pn_area%TYPE DEFAULT NULL,
        flg_auto_saved_in      IN epis_pn.flg_auto_saved%TYPE DEFAULT 'N',
        id_software_in         IN epis_pn.id_software%TYPE DEFAULT NULL,
        id_prof_submit_in      IN epis_pn.id_prof_submit%TYPE DEFAULT NULL,
        dt_submit_in           IN epis_pn.dt_submit%TYPE DEFAULT NULL,
        id_prof_reviewed_in    IN epis_pn.id_prof_reviewed%TYPE DEFAULT NULL,
        dt_reviewed_in         IN epis_pn.dt_reviewed%TYPE DEFAULT NULL,
        id_submit_reason_in    IN epis_pn.id_submit_reason%TYPE DEFAULT NULL,
        notes_submit_in        IN epis_pn.notes_submit%TYPE DEFAULT NULL,
        dt_proposed_in         IN epis_pn.dt_proposed%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN epis_pn.id_epis_pn%TYPE IS
        l_pky epis_pn.id_epis_pn%TYPE := next_key;
    BEGIN
        ins(id_epis_pn_in          => l_pky,
            id_episode_in          => id_episode_in,
            flg_status_in          => flg_status_in,
            id_prof_create_in      => id_prof_create_in,
            dt_create_in           => dt_create_in,
            id_dep_clin_serv_in    => id_dep_clin_serv_in,
            id_prof_last_update_in => id_prof_last_update_in,
            dt_last_update_in      => dt_last_update_in,
            dt_signoff_in          => dt_signoff_in,
            id_prof_signoff_in     => id_prof_signoff_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            id_dictation_report_in => id_dictation_report_in,
            create_time_in         => create_time_in,
            create_user_in         => create_user_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_pn_note_type_in     => id_pn_note_type_in,
            dt_pn_date_in          => dt_pn_date_in,
            id_pn_area_in          => id_pn_area_in,
            flg_auto_saved_in      => flg_auto_saved_in,
            id_software_in         => id_software_in,
            id_prof_submit_in      => id_prof_submit_in,
            dt_submit_in           => dt_submit_in,
            id_prof_reviewed_in    => id_prof_reviewed_in,
            dt_reviewed_in         => dt_reviewed_in,
            id_submit_reason_in    => id_submit_reason_in,
            notes_submit_in        => notes_submit_in,
            dt_proposed_in         => dt_proposed_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_episode_in          IN epis_pn.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN epis_pn.flg_status%TYPE DEFAULT 'D',
        id_prof_create_in      IN epis_pn.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN epis_pn.dt_create%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN epis_pn.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_prof_last_update_in IN epis_pn.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN epis_pn.dt_last_update%TYPE DEFAULT NULL,
        dt_signoff_in          IN epis_pn.dt_signoff%TYPE DEFAULT NULL,
        id_prof_signoff_in     IN epis_pn.id_prof_signoff%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_pn.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN epis_pn.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_pn.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_pn.notes_cancel%TYPE DEFAULT NULL,
        id_dictation_report_in IN epis_pn.id_dictation_report%TYPE DEFAULT NULL,
        create_time_in         IN epis_pn.create_time%TYPE DEFAULT NULL,
        create_user_in         IN epis_pn.create_user%TYPE DEFAULT NULL,
        create_institution_in  IN epis_pn.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_pn.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_pn.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_pn.update_institution%TYPE DEFAULT NULL,
        id_pn_note_type_in     IN epis_pn.id_pn_note_type%TYPE DEFAULT NULL,
        dt_pn_date_in          IN epis_pn.dt_pn_date%TYPE DEFAULT NULL,
        id_pn_area_in          IN epis_pn.id_pn_area%TYPE DEFAULT NULL,
        flg_auto_saved_in      IN epis_pn.flg_auto_saved%TYPE DEFAULT 'N',
        id_software_in         IN epis_pn.id_software%TYPE DEFAULT NULL,
        id_prof_submit_in      IN epis_pn.id_prof_submit%TYPE DEFAULT NULL,
        dt_submit_in           IN epis_pn.dt_submit%TYPE DEFAULT NULL,
        id_prof_reviewed_in    IN epis_pn.id_prof_reviewed%TYPE DEFAULT NULL,
        dt_reviewed_in         IN epis_pn.dt_reviewed%TYPE DEFAULT NULL,
        id_submit_reason_in    IN epis_pn.id_submit_reason%TYPE DEFAULT NULL,
        notes_submit_in        IN epis_pn.notes_submit%TYPE DEFAULT NULL,
        dt_proposed_in         IN epis_pn.dt_proposed%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN epis_pn.id_epis_pn%TYPE IS
        l_pky    epis_pn.id_epis_pn%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_epis_pn_in          => l_pky,
            id_episode_in          => id_episode_in,
            flg_status_in          => flg_status_in,
            id_prof_create_in      => id_prof_create_in,
            dt_create_in           => dt_create_in,
            id_dep_clin_serv_in    => id_dep_clin_serv_in,
            id_prof_last_update_in => id_prof_last_update_in,
            dt_last_update_in      => dt_last_update_in,
            dt_signoff_in          => dt_signoff_in,
            id_prof_signoff_in     => id_prof_signoff_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            id_dictation_report_in => id_dictation_report_in,
            create_time_in         => create_time_in,
            create_user_in         => create_user_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_pn_note_type_in     => id_pn_note_type_in,
            dt_pn_date_in          => dt_pn_date_in,
            id_pn_area_in          => id_pn_area_in,
            flg_auto_saved_in      => flg_auto_saved_in,
            id_software_in         => id_software_in,
            id_prof_submit_in      => id_prof_submit_in,
            dt_submit_in           => dt_submit_in,
            id_prof_reviewed_in    => id_prof_reviewed_in,
            dt_reviewed_in         => dt_reviewed_in,
            id_submit_reason_in    => id_submit_reason_in,
            notes_submit_in        => notes_submit_in,
            dt_proposed_in         => dt_proposed_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_epis_pn_in          IN epis_pn.id_epis_pn%TYPE,
        id_episode_in          IN epis_pn.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN epis_pn.flg_status%TYPE DEFAULT 'D',
        id_prof_create_in      IN epis_pn.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN epis_pn.dt_create%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN epis_pn.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_prof_last_update_in IN epis_pn.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN epis_pn.dt_last_update%TYPE DEFAULT NULL,
        dt_signoff_in          IN epis_pn.dt_signoff%TYPE DEFAULT NULL,
        id_prof_signoff_in     IN epis_pn.id_prof_signoff%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_pn.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN epis_pn.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_pn.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_pn.notes_cancel%TYPE DEFAULT NULL,
        id_dictation_report_in IN epis_pn.id_dictation_report%TYPE DEFAULT NULL,
        create_time_in         IN epis_pn.create_time%TYPE DEFAULT NULL,
        create_user_in         IN epis_pn.create_user%TYPE DEFAULT NULL,
        create_institution_in  IN epis_pn.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_pn.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_pn.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_pn.update_institution%TYPE DEFAULT NULL,
        id_pn_note_type_in     IN epis_pn.id_pn_note_type%TYPE DEFAULT NULL,
        dt_pn_date_in          IN epis_pn.dt_pn_date%TYPE DEFAULT NULL,
        id_pn_area_in          IN epis_pn.id_pn_area%TYPE DEFAULT NULL,
        flg_auto_saved_in      IN epis_pn.flg_auto_saved%TYPE DEFAULT 'N',
        id_software_in         IN epis_pn.id_software%TYPE DEFAULT NULL,
        id_prof_submit_in      IN epis_pn.id_prof_submit%TYPE DEFAULT NULL,
        dt_submit_in           IN epis_pn.dt_submit%TYPE DEFAULT NULL,
        id_prof_reviewed_in    IN epis_pn.id_prof_reviewed%TYPE DEFAULT NULL,
        dt_reviewed_in         IN epis_pn.dt_reviewed%TYPE DEFAULT NULL,
        id_submit_reason_in    IN epis_pn.id_submit_reason%TYPE DEFAULT NULL,
        notes_submit_in        IN epis_pn.notes_submit%TYPE DEFAULT NULL,
        dt_proposed_in         IN epis_pn.dt_proposed%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO epis_pn
            (id_epis_pn,
             id_episode,
             flg_status,
             id_prof_create,
             dt_create,
             id_dep_clin_serv,
             id_prof_last_update,
             dt_last_update,
             dt_signoff,
             id_prof_signoff,
             id_prof_cancel,
             dt_cancel,
             id_cancel_reason,
             notes_cancel,
             id_dictation_report,
             create_time,
             create_user,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_pn_note_type,
             dt_pn_date,
             id_pn_area,
             flg_auto_saved,
             id_software,
             id_prof_submit,
             dt_submit,
             id_prof_reviewed,
             dt_reviewed,
             id_submit_reason,
             notes_submit,
             dt_proposed)
        VALUES
            (id_epis_pn_in,
             id_episode_in,
             flg_status_in,
             id_prof_create_in,
             dt_create_in,
             id_dep_clin_serv_in,
             id_prof_last_update_in,
             dt_last_update_in,
             dt_signoff_in,
             id_prof_signoff_in,
             id_prof_cancel_in,
             dt_cancel_in,
             id_cancel_reason_in,
             notes_cancel_in,
             id_dictation_report_in,
             create_time_in,
             create_user_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_pn_note_type_in,
             dt_pn_date_in,
             id_pn_area_in,
             flg_auto_saved_in,
             id_software_in,
             id_prof_submit_in,
             dt_submit_in,
             id_prof_reviewed_in,
             dt_reviewed_in,
             id_submit_reason_in,
             notes_submit_in,
             dt_proposed_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_epis_pn_in          IN epis_pn.id_epis_pn%TYPE,
        id_episode_in          IN epis_pn.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN epis_pn.flg_status%TYPE DEFAULT 'D',
        id_prof_create_in      IN epis_pn.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN epis_pn.dt_create%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN epis_pn.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_prof_last_update_in IN epis_pn.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN epis_pn.dt_last_update%TYPE DEFAULT NULL,
        dt_signoff_in          IN epis_pn.dt_signoff%TYPE DEFAULT NULL,
        id_prof_signoff_in     IN epis_pn.id_prof_signoff%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_pn.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN epis_pn.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_pn.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_pn.notes_cancel%TYPE DEFAULT NULL,
        id_dictation_report_in IN epis_pn.id_dictation_report%TYPE DEFAULT NULL,
        create_time_in         IN epis_pn.create_time%TYPE DEFAULT NULL,
        create_user_in         IN epis_pn.create_user%TYPE DEFAULT NULL,
        create_institution_in  IN epis_pn.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_pn.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_pn.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_pn.update_institution%TYPE DEFAULT NULL,
        id_pn_note_type_in     IN epis_pn.id_pn_note_type%TYPE DEFAULT NULL,
        dt_pn_date_in          IN epis_pn.dt_pn_date%TYPE DEFAULT NULL,
        id_pn_area_in          IN epis_pn.id_pn_area%TYPE DEFAULT NULL,
        flg_auto_saved_in      IN epis_pn.flg_auto_saved%TYPE DEFAULT 'N',
        id_software_in         IN epis_pn.id_software%TYPE DEFAULT NULL,
        id_prof_submit_in      IN epis_pn.id_prof_submit%TYPE DEFAULT NULL,
        dt_submit_in           IN epis_pn.dt_submit%TYPE DEFAULT NULL,
        id_prof_reviewed_in    IN epis_pn.id_prof_reviewed%TYPE DEFAULT NULL,
        dt_reviewed_in         IN epis_pn.dt_reviewed%TYPE DEFAULT NULL,
        id_submit_reason_in    IN epis_pn.id_submit_reason%TYPE DEFAULT NULL,
        notes_submit_in        IN epis_pn.notes_submit%TYPE DEFAULT NULL,
        dt_proposed_in         IN epis_pn.dt_proposed%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_epis_pn_in          => id_epis_pn_in,
            id_episode_in          => id_episode_in,
            flg_status_in          => flg_status_in,
            id_prof_create_in      => id_prof_create_in,
            dt_create_in           => dt_create_in,
            id_dep_clin_serv_in    => id_dep_clin_serv_in,
            id_prof_last_update_in => id_prof_last_update_in,
            dt_last_update_in      => dt_last_update_in,
            dt_signoff_in          => dt_signoff_in,
            id_prof_signoff_in     => id_prof_signoff_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            id_dictation_report_in => id_dictation_report_in,
            create_time_in         => create_time_in,
            create_user_in         => create_user_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_pn_note_type_in     => id_pn_note_type_in,
            dt_pn_date_in          => dt_pn_date_in,
            id_pn_area_in          => id_pn_area_in,
            flg_auto_saved_in      => flg_auto_saved_in,
            id_software_in         => id_software_in,
            id_prof_submit_in      => id_prof_submit_in,
            dt_submit_in           => dt_submit_in,
            id_prof_reviewed_in    => id_prof_reviewed_in,
            dt_reviewed_in         => dt_reviewed_in,
            id_submit_reason_in    => id_submit_reason_in,
            notes_submit_in        => notes_submit_in,
            dt_proposed_in         => dt_proposed_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_pn%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec epis_pn%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_epis_pn := next_key(sequence_in);
        END IF;
    
        ins(id_epis_pn_in          => l_rec.id_epis_pn,
            id_episode_in          => l_rec.id_episode,
            flg_status_in          => l_rec.flg_status,
            id_prof_create_in      => l_rec.id_prof_create,
            dt_create_in           => l_rec.dt_create,
            id_dep_clin_serv_in    => l_rec.id_dep_clin_serv,
            id_prof_last_update_in => l_rec.id_prof_last_update,
            dt_last_update_in      => l_rec.dt_last_update,
            dt_signoff_in          => l_rec.dt_signoff,
            id_prof_signoff_in     => l_rec.id_prof_signoff,
            id_prof_cancel_in      => l_rec.id_prof_cancel,
            dt_cancel_in           => l_rec.dt_cancel,
            id_cancel_reason_in    => l_rec.id_cancel_reason,
            notes_cancel_in        => l_rec.notes_cancel,
            id_dictation_report_in => l_rec.id_dictation_report,
            create_time_in         => l_rec.create_time,
            create_user_in         => l_rec.create_user,
            create_institution_in  => l_rec.create_institution,
            update_user_in         => l_rec.update_user,
            update_time_in         => l_rec.update_time,
            update_institution_in  => l_rec.update_institution,
            id_pn_note_type_in     => l_rec.id_pn_note_type,
            dt_pn_date_in          => l_rec.dt_pn_date,
            id_pn_area_in          => l_rec.id_pn_area,
            flg_auto_saved_in      => l_rec.flg_auto_saved,
            id_software_in         => l_rec.id_software,
            id_prof_submit_in      => l_rec.id_prof_submit,
            dt_submit_in           => l_rec.dt_submit,
            id_prof_reviewed_in    => l_rec.id_prof_reviewed,
            dt_reviewed_in         => l_rec.dt_reviewed,
            id_submit_reason_in    => l_rec.id_submit_reason,
            notes_submit_in        => l_rec.notes_submit,
            dt_proposed_in         => l_rec.dt_proposed,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_pn%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_pn_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO epis_pn
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_pn_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_pn_in           IN epis_pn.id_epis_pn%TYPE,
        id_episode_in           IN epis_pn.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        flg_status_in           IN epis_pn.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        id_prof_create_in       IN epis_pn.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin      IN BOOLEAN := TRUE,
        dt_create_in            IN epis_pn.dt_create%TYPE DEFAULT NULL,
        dt_create_nin           IN BOOLEAN := TRUE,
        id_dep_clin_serv_in     IN epis_pn.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin    IN BOOLEAN := TRUE,
        id_prof_last_update_in  IN epis_pn.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin IN BOOLEAN := TRUE,
        dt_last_update_in       IN epis_pn.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin      IN BOOLEAN := TRUE,
        dt_signoff_in           IN epis_pn.dt_signoff%TYPE DEFAULT NULL,
        dt_signoff_nin          IN BOOLEAN := TRUE,
        id_prof_signoff_in      IN epis_pn.id_prof_signoff%TYPE DEFAULT NULL,
        id_prof_signoff_nin     IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN epis_pn.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        dt_cancel_in            IN epis_pn.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin           IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN epis_pn.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        notes_cancel_in         IN epis_pn.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_dictation_report_in  IN epis_pn.id_dictation_report%TYPE DEFAULT NULL,
        id_dictation_report_nin IN BOOLEAN := TRUE,
        create_time_in          IN epis_pn.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_user_in          IN epis_pn.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_pn.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_pn.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_pn.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_pn.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_pn_note_type_in      IN epis_pn.id_pn_note_type%TYPE DEFAULT NULL,
        id_pn_note_type_nin     IN BOOLEAN := TRUE,
        dt_pn_date_in           IN epis_pn.dt_pn_date%TYPE DEFAULT NULL,
        dt_pn_date_nin          IN BOOLEAN := TRUE,
        id_pn_area_in           IN epis_pn.id_pn_area%TYPE DEFAULT NULL,
        id_pn_area_nin          IN BOOLEAN := TRUE,
        flg_auto_saved_in       IN epis_pn.flg_auto_saved%TYPE DEFAULT NULL,
        flg_auto_saved_nin      IN BOOLEAN := TRUE,
        id_software_in          IN epis_pn.id_software%TYPE DEFAULT NULL,
        id_software_nin         IN BOOLEAN := TRUE,
        id_prof_submit_in       IN epis_pn.id_prof_submit%TYPE DEFAULT NULL,
        id_prof_submit_nin      IN BOOLEAN := TRUE,
        dt_submit_in            IN epis_pn.dt_submit%TYPE DEFAULT NULL,
        dt_submit_nin           IN BOOLEAN := TRUE,
        id_prof_reviewed_in     IN epis_pn.id_prof_reviewed%TYPE DEFAULT NULL,
        id_prof_reviewed_nin    IN BOOLEAN := TRUE,
        dt_reviewed_in          IN epis_pn.dt_reviewed%TYPE DEFAULT NULL,
        dt_reviewed_nin         IN BOOLEAN := TRUE,
        id_submit_reason_in     IN epis_pn.id_submit_reason%TYPE DEFAULT NULL,
        id_submit_reason_nin    IN BOOLEAN := TRUE,
        notes_submit_in         IN epis_pn.notes_submit%TYPE DEFAULT NULL,
        notes_submit_nin        IN BOOLEAN := TRUE,
        dt_proposed_in          IN epis_pn.dt_proposed%TYPE DEFAULT NULL,
        dt_proposed_nin         IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_id_episode_n          NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_flg_status_n          NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_create_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_create_n           NUMBER(1) := sys.diutil.bool_to_int(dt_create_nin);
        l_id_dep_clin_serv_n    NUMBER(1) := sys.diutil.bool_to_int(id_dep_clin_serv_nin);
        l_id_prof_last_update_n NUMBER(1) := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_n      NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_nin);
        l_dt_signoff_n          NUMBER(1) := sys.diutil.bool_to_int(dt_signoff_nin);
        l_id_prof_signoff_n     NUMBER(1) := sys.diutil.bool_to_int(id_prof_signoff_nin);
        l_id_prof_cancel_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_dt_cancel_n           NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_nin);
        l_id_cancel_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n        NUMBER(1) := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_dictation_report_n NUMBER(1) := sys.diutil.bool_to_int(id_dictation_report_nin);
        l_create_time_n         NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_user_n         NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_institution_n  NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_pn_note_type_n     NUMBER(1) := sys.diutil.bool_to_int(id_pn_note_type_nin);
        l_dt_pn_date_n          NUMBER(1) := sys.diutil.bool_to_int(dt_pn_date_nin);
        l_id_pn_area_n          NUMBER(1) := sys.diutil.bool_to_int(id_pn_area_nin);
        l_flg_auto_saved_n      NUMBER(1) := sys.diutil.bool_to_int(flg_auto_saved_nin);
        l_id_software_n         NUMBER(1) := sys.diutil.bool_to_int(id_software_nin);
        l_id_prof_submit_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_submit_nin);
        l_dt_submit_n           NUMBER(1) := sys.diutil.bool_to_int(dt_submit_nin);
        l_id_prof_reviewed_n    NUMBER(1) := sys.diutil.bool_to_int(id_prof_reviewed_nin);
        l_dt_reviewed_n         NUMBER(1) := sys.diutil.bool_to_int(dt_reviewed_nin);
        l_id_submit_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_submit_reason_nin);
        l_notes_submit_n        NUMBER(1) := sys.diutil.bool_to_int(notes_submit_nin);
        l_dt_proposed_n         NUMBER(1) := sys.diutil.bool_to_int(dt_proposed_nin);
    BEGIN
    
        UPDATE epis_pn
           SET id_episode          = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               flg_status          = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_prof_create      = decode(l_id_prof_create_n,
                                            0,
                                            id_prof_create_in,
                                            nvl(id_prof_create_in, id_prof_create)),
               dt_create           = decode(l_dt_create_n, 0, dt_create_in, nvl(dt_create_in, dt_create)),
               id_dep_clin_serv    = decode(l_id_dep_clin_serv_n,
                                            0,
                                            id_dep_clin_serv_in,
                                            nvl(id_dep_clin_serv_in, id_dep_clin_serv)),
               id_prof_last_update = decode(l_id_prof_last_update_n,
                                            0,
                                            id_prof_last_update_in,
                                            nvl(id_prof_last_update_in, id_prof_last_update)),
               dt_last_update      = decode(l_dt_last_update_n,
                                            0,
                                            dt_last_update_in,
                                            nvl(dt_last_update_in, dt_last_update)),
               dt_signoff          = decode(l_dt_signoff_n, 0, dt_signoff_in, nvl(dt_signoff_in, dt_signoff)),
               id_prof_signoff     = decode(l_id_prof_signoff_n,
                                            0,
                                            id_prof_signoff_in,
                                            nvl(id_prof_signoff_in, id_prof_signoff)),
               id_prof_cancel      = decode(l_id_prof_cancel_n,
                                            0,
                                            id_prof_cancel_in,
                                            nvl(id_prof_cancel_in, id_prof_cancel)),
               dt_cancel           = decode(l_dt_cancel_n, 0, dt_cancel_in, nvl(dt_cancel_in, dt_cancel)),
               id_cancel_reason    = decode(l_id_cancel_reason_n,
                                            0,
                                            id_cancel_reason_in,
                                            nvl(id_cancel_reason_in, id_cancel_reason)),
               notes_cancel        = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               id_dictation_report = decode(l_id_dictation_report_n,
                                            0,
                                            id_dictation_report_in,
                                            nvl(id_dictation_report_in, id_dictation_report)),
               create_time         = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_user         = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_institution  = decode(l_create_institution_n,
                                            0,
                                            create_institution_in,
                                            nvl(create_institution_in, create_institution)),
               update_user         = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time         = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution  = decode(l_update_institution_n,
                                            0,
                                            update_institution_in,
                                            nvl(update_institution_in, update_institution)),
               id_pn_note_type     = decode(l_id_pn_note_type_n,
                                            0,
                                            id_pn_note_type_in,
                                            nvl(id_pn_note_type_in, id_pn_note_type)),
               dt_pn_date          = decode(l_dt_pn_date_n, 0, dt_pn_date_in, nvl(dt_pn_date_in, dt_pn_date)),
               id_pn_area          = decode(l_id_pn_area_n, 0, id_pn_area_in, nvl(id_pn_area_in, id_pn_area)),
               flg_auto_saved      = decode(l_flg_auto_saved_n,
                                            0,
                                            flg_auto_saved_in,
                                            nvl(flg_auto_saved_in, flg_auto_saved)),
               id_software         = decode(l_id_software_n, 0, id_software_in, nvl(id_software_in, id_software)),
               id_prof_submit      = decode(l_id_prof_submit_n,
                                            0,
                                            id_prof_submit_in,
                                            nvl(id_prof_submit_in, id_prof_submit)),
               dt_submit           = decode(l_dt_submit_n, 0, dt_submit_in, nvl(dt_submit_in, dt_submit)),
               id_prof_reviewed    = decode(l_id_prof_reviewed_n,
                                            0,
                                            id_prof_reviewed_in,
                                            nvl(id_prof_reviewed_in, id_prof_reviewed)),
               dt_reviewed         = decode(l_dt_reviewed_n, 0, dt_reviewed_in, nvl(dt_reviewed_in, dt_reviewed)),
               id_submit_reason    = decode(l_id_submit_reason_n,
                                            0,
                                            id_submit_reason_in,
                                            nvl(id_submit_reason_in, id_submit_reason)),
               notes_submit        = decode(l_notes_submit_n, 0, notes_submit_in, nvl(notes_submit_in, notes_submit)),
               dt_proposed         = decode(l_dt_proposed_n, 0, dt_proposed_in, nvl(dt_proposed_in, dt_proposed))
         WHERE id_epis_pn = id_epis_pn_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_pn_in           IN epis_pn.id_epis_pn%TYPE,
        id_episode_in           IN epis_pn.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        flg_status_in           IN epis_pn.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        id_prof_create_in       IN epis_pn.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin      IN BOOLEAN := TRUE,
        dt_create_in            IN epis_pn.dt_create%TYPE DEFAULT NULL,
        dt_create_nin           IN BOOLEAN := TRUE,
        id_dep_clin_serv_in     IN epis_pn.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin    IN BOOLEAN := TRUE,
        id_prof_last_update_in  IN epis_pn.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin IN BOOLEAN := TRUE,
        dt_last_update_in       IN epis_pn.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin      IN BOOLEAN := TRUE,
        dt_signoff_in           IN epis_pn.dt_signoff%TYPE DEFAULT NULL,
        dt_signoff_nin          IN BOOLEAN := TRUE,
        id_prof_signoff_in      IN epis_pn.id_prof_signoff%TYPE DEFAULT NULL,
        id_prof_signoff_nin     IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN epis_pn.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        dt_cancel_in            IN epis_pn.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin           IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN epis_pn.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        notes_cancel_in         IN epis_pn.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_dictation_report_in  IN epis_pn.id_dictation_report%TYPE DEFAULT NULL,
        id_dictation_report_nin IN BOOLEAN := TRUE,
        create_time_in          IN epis_pn.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_user_in          IN epis_pn.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_pn.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_pn.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_pn.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_pn.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_pn_note_type_in      IN epis_pn.id_pn_note_type%TYPE DEFAULT NULL,
        id_pn_note_type_nin     IN BOOLEAN := TRUE,
        dt_pn_date_in           IN epis_pn.dt_pn_date%TYPE DEFAULT NULL,
        dt_pn_date_nin          IN BOOLEAN := TRUE,
        id_pn_area_in           IN epis_pn.id_pn_area%TYPE DEFAULT NULL,
        id_pn_area_nin          IN BOOLEAN := TRUE,
        flg_auto_saved_in       IN epis_pn.flg_auto_saved%TYPE DEFAULT NULL,
        flg_auto_saved_nin      IN BOOLEAN := TRUE,
        id_software_in          IN epis_pn.id_software%TYPE DEFAULT NULL,
        id_software_nin         IN BOOLEAN := TRUE,
        id_prof_submit_in       IN epis_pn.id_prof_submit%TYPE DEFAULT NULL,
        id_prof_submit_nin      IN BOOLEAN := TRUE,
        dt_submit_in            IN epis_pn.dt_submit%TYPE DEFAULT NULL,
        dt_submit_nin           IN BOOLEAN := TRUE,
        id_prof_reviewed_in     IN epis_pn.id_prof_reviewed%TYPE DEFAULT NULL,
        id_prof_reviewed_nin    IN BOOLEAN := TRUE,
        dt_reviewed_in          IN epis_pn.dt_reviewed%TYPE DEFAULT NULL,
        dt_reviewed_nin         IN BOOLEAN := TRUE,
        id_submit_reason_in     IN epis_pn.id_submit_reason%TYPE DEFAULT NULL,
        id_submit_reason_nin    IN BOOLEAN := TRUE,
        notes_submit_in         IN epis_pn.notes_submit%TYPE DEFAULT NULL,
        notes_submit_nin        IN BOOLEAN := TRUE,
        dt_proposed_in          IN epis_pn.dt_proposed%TYPE DEFAULT NULL,
        dt_proposed_nin         IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_pn_in           => id_epis_pn_in,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            flg_status_in           => flg_status_in,
            flg_status_nin          => flg_status_nin,
            id_prof_create_in       => id_prof_create_in,
            id_prof_create_nin      => id_prof_create_nin,
            dt_create_in            => dt_create_in,
            dt_create_nin           => dt_create_nin,
            id_dep_clin_serv_in     => id_dep_clin_serv_in,
            id_dep_clin_serv_nin    => id_dep_clin_serv_nin,
            id_prof_last_update_in  => id_prof_last_update_in,
            id_prof_last_update_nin => id_prof_last_update_nin,
            dt_last_update_in       => dt_last_update_in,
            dt_last_update_nin      => dt_last_update_nin,
            dt_signoff_in           => dt_signoff_in,
            dt_signoff_nin          => dt_signoff_nin,
            id_prof_signoff_in      => id_prof_signoff_in,
            id_prof_signoff_nin     => id_prof_signoff_nin,
            id_prof_cancel_in       => id_prof_cancel_in,
            id_prof_cancel_nin      => id_prof_cancel_nin,
            dt_cancel_in            => dt_cancel_in,
            dt_cancel_nin           => dt_cancel_nin,
            id_cancel_reason_in     => id_cancel_reason_in,
            id_cancel_reason_nin    => id_cancel_reason_nin,
            notes_cancel_in         => notes_cancel_in,
            notes_cancel_nin        => notes_cancel_nin,
            id_dictation_report_in  => id_dictation_report_in,
            id_dictation_report_nin => id_dictation_report_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            id_pn_note_type_in      => id_pn_note_type_in,
            id_pn_note_type_nin     => id_pn_note_type_nin,
            dt_pn_date_in           => dt_pn_date_in,
            dt_pn_date_nin          => dt_pn_date_nin,
            id_pn_area_in           => id_pn_area_in,
            id_pn_area_nin          => id_pn_area_nin,
            flg_auto_saved_in       => flg_auto_saved_in,
            flg_auto_saved_nin      => flg_auto_saved_nin,
            id_software_in          => id_software_in,
            id_software_nin         => id_software_nin,
            id_prof_submit_in       => id_prof_submit_in,
            id_prof_submit_nin      => id_prof_submit_nin,
            dt_submit_in            => dt_submit_in,
            dt_submit_nin           => dt_submit_nin,
            id_prof_reviewed_in     => id_prof_reviewed_in,
            id_prof_reviewed_nin    => id_prof_reviewed_nin,
            dt_reviewed_in          => dt_reviewed_in,
            dt_reviewed_nin         => dt_reviewed_nin,
            id_submit_reason_in     => id_submit_reason_in,
            id_submit_reason_nin    => id_submit_reason_nin,
            notes_submit_in         => notes_submit_in,
            notes_submit_nin        => notes_submit_nin,
            dt_proposed_in          => dt_proposed_in,
            dt_proposed_nin         => dt_proposed_nin,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_episode_in           IN epis_pn.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        flg_status_in           IN epis_pn.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        id_prof_create_in       IN epis_pn.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin      IN BOOLEAN := TRUE,
        dt_create_in            IN epis_pn.dt_create%TYPE DEFAULT NULL,
        dt_create_nin           IN BOOLEAN := TRUE,
        id_dep_clin_serv_in     IN epis_pn.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin    IN BOOLEAN := TRUE,
        id_prof_last_update_in  IN epis_pn.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin IN BOOLEAN := TRUE,
        dt_last_update_in       IN epis_pn.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin      IN BOOLEAN := TRUE,
        dt_signoff_in           IN epis_pn.dt_signoff%TYPE DEFAULT NULL,
        dt_signoff_nin          IN BOOLEAN := TRUE,
        id_prof_signoff_in      IN epis_pn.id_prof_signoff%TYPE DEFAULT NULL,
        id_prof_signoff_nin     IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN epis_pn.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        dt_cancel_in            IN epis_pn.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin           IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN epis_pn.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        notes_cancel_in         IN epis_pn.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_dictation_report_in  IN epis_pn.id_dictation_report%TYPE DEFAULT NULL,
        id_dictation_report_nin IN BOOLEAN := TRUE,
        create_time_in          IN epis_pn.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_user_in          IN epis_pn.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_pn.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_pn.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_pn.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_pn.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_pn_note_type_in      IN epis_pn.id_pn_note_type%TYPE DEFAULT NULL,
        id_pn_note_type_nin     IN BOOLEAN := TRUE,
        dt_pn_date_in           IN epis_pn.dt_pn_date%TYPE DEFAULT NULL,
        dt_pn_date_nin          IN BOOLEAN := TRUE,
        id_pn_area_in           IN epis_pn.id_pn_area%TYPE DEFAULT NULL,
        id_pn_area_nin          IN BOOLEAN := TRUE,
        flg_auto_saved_in       IN epis_pn.flg_auto_saved%TYPE DEFAULT NULL,
        flg_auto_saved_nin      IN BOOLEAN := TRUE,
        id_software_in          IN epis_pn.id_software%TYPE DEFAULT NULL,
        id_software_nin         IN BOOLEAN := TRUE,
        id_prof_submit_in       IN epis_pn.id_prof_submit%TYPE DEFAULT NULL,
        id_prof_submit_nin      IN BOOLEAN := TRUE,
        dt_submit_in            IN epis_pn.dt_submit%TYPE DEFAULT NULL,
        dt_submit_nin           IN BOOLEAN := TRUE,
        id_prof_reviewed_in     IN epis_pn.id_prof_reviewed%TYPE DEFAULT NULL,
        id_prof_reviewed_nin    IN BOOLEAN := TRUE,
        dt_reviewed_in          IN epis_pn.dt_reviewed%TYPE DEFAULT NULL,
        dt_reviewed_nin         IN BOOLEAN := TRUE,
        id_submit_reason_in     IN epis_pn.id_submit_reason%TYPE DEFAULT NULL,
        id_submit_reason_nin    IN BOOLEAN := TRUE,
        notes_submit_in         IN epis_pn.notes_submit%TYPE DEFAULT NULL,
        notes_submit_nin        IN BOOLEAN := TRUE,
        dt_proposed_in          IN epis_pn.dt_proposed%TYPE DEFAULT NULL,
        dt_proposed_nin         IN BOOLEAN := TRUE,
        where_in                IN VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                   VARCHAR2(32767);
        l_rows_out              table_varchar;
        l_id_episode_n          NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_flg_status_n          NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_create_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_create_n           NUMBER(1) := sys.diutil.bool_to_int(dt_create_nin);
        l_id_dep_clin_serv_n    NUMBER(1) := sys.diutil.bool_to_int(id_dep_clin_serv_nin);
        l_id_prof_last_update_n NUMBER(1) := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_n      NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_nin);
        l_dt_signoff_n          NUMBER(1) := sys.diutil.bool_to_int(dt_signoff_nin);
        l_id_prof_signoff_n     NUMBER(1) := sys.diutil.bool_to_int(id_prof_signoff_nin);
        l_id_prof_cancel_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_dt_cancel_n           NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_nin);
        l_id_cancel_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n        NUMBER(1) := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_dictation_report_n NUMBER(1) := sys.diutil.bool_to_int(id_dictation_report_nin);
        l_create_time_n         NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_user_n         NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_institution_n  NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_pn_note_type_n     NUMBER(1) := sys.diutil.bool_to_int(id_pn_note_type_nin);
        l_dt_pn_date_n          NUMBER(1) := sys.diutil.bool_to_int(dt_pn_date_nin);
        l_id_pn_area_n          NUMBER(1) := sys.diutil.bool_to_int(id_pn_area_nin);
        l_flg_auto_saved_n      NUMBER(1) := sys.diutil.bool_to_int(flg_auto_saved_nin);
        l_id_software_n         NUMBER(1) := sys.diutil.bool_to_int(id_software_nin);
        l_id_prof_submit_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_submit_nin);
        l_dt_submit_n           NUMBER(1) := sys.diutil.bool_to_int(dt_submit_nin);
        l_id_prof_reviewed_n    NUMBER(1) := sys.diutil.bool_to_int(id_prof_reviewed_nin);
        l_dt_reviewed_n         NUMBER(1) := sys.diutil.bool_to_int(dt_reviewed_nin);
        l_id_submit_reason_n    NUMBER(1) := sys.diutil.bool_to_int(id_submit_reason_nin);
        l_notes_submit_n        NUMBER(1) := sys.diutil.bool_to_int(notes_submit_nin);
        l_dt_proposed_n         NUMBER(1) := sys.diutil.bool_to_int(dt_proposed_nin);
    BEGIN
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
        l_flg_status_n          := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_create_n      := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_create_n           := sys.diutil.bool_to_int(dt_create_nin);
        l_id_dep_clin_serv_n    := sys.diutil.bool_to_int(id_dep_clin_serv_nin);
        l_id_prof_last_update_n := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_n      := sys.diutil.bool_to_int(dt_last_update_nin);
        l_dt_signoff_n          := sys.diutil.bool_to_int(dt_signoff_nin);
        l_id_prof_signoff_n     := sys.diutil.bool_to_int(id_prof_signoff_nin);
        l_id_prof_cancel_n      := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_dt_cancel_n           := sys.diutil.bool_to_int(dt_cancel_nin);
        l_id_cancel_reason_n    := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n        := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_dictation_report_n := sys.diutil.bool_to_int(id_dictation_report_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_id_pn_note_type_n     := sys.diutil.bool_to_int(id_pn_note_type_nin);
        l_dt_pn_date_n          := sys.diutil.bool_to_int(dt_pn_date_nin);
        l_id_pn_area_n          := sys.diutil.bool_to_int(id_pn_area_nin);
        l_flg_auto_saved_n      := sys.diutil.bool_to_int(flg_auto_saved_nin);
        l_id_software_n         := sys.diutil.bool_to_int(id_software_nin);
        l_id_prof_submit_n      := sys.diutil.bool_to_int(id_prof_submit_nin);
        l_dt_submit_n           := sys.diutil.bool_to_int(dt_submit_nin);
        l_id_prof_reviewed_n    := sys.diutil.bool_to_int(id_prof_reviewed_nin);
        l_dt_reviewed_n         := sys.diutil.bool_to_int(dt_reviewed_nin);
        l_id_submit_reason_n    := sys.diutil.bool_to_int(id_submit_reason_nin);
        l_notes_submit_n        := sys.diutil.bool_to_int(notes_submit_nin);
        l_dt_proposed_n         := sys.diutil.bool_to_int(dt_proposed_nin);
        l_sql                   := 'UPDATE epis_pn SET' || ' ID_EPISODE = decode (' || l_id_episode_n ||
                                   ',0,:ID_EPISODE_in, NVL (:ID_EPISODE_in, ID_EPISODE)) ' || ',' ||
                                   ' FLG_STATUS = decode (' || l_flg_status_n ||
                                   ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' || ',' ||
                                   ' ID_PROF_CREATE = decode (' || l_id_prof_create_n ||
                                   ',0,:ID_PROF_CREATE_in, NVL (:ID_PROF_CREATE_in, ID_PROF_CREATE)) ' || ',' ||
                                   ' DT_CREATE = decode (' || l_dt_create_n ||
                                   ',0,:DT_CREATE_in, NVL (:DT_CREATE_in, DT_CREATE)) ' || ',' ||
                                   ' ID_DEP_CLIN_SERV = decode (' || l_id_dep_clin_serv_n ||
                                   ',0,:ID_DEP_CLIN_SERV_in, NVL (:ID_DEP_CLIN_SERV_in, ID_DEP_CLIN_SERV)) ' || ',' ||
                                   ' ID_PROF_LAST_UPDATE = decode (' || l_id_prof_last_update_n ||
                                   ',0,:ID_PROF_LAST_UPDATE_in, NVL (:ID_PROF_LAST_UPDATE_in, ID_PROF_LAST_UPDATE)) ' || ',' ||
                                   ' DT_LAST_UPDATE = decode (' || l_dt_last_update_n ||
                                   ',0,:DT_LAST_UPDATE_in, NVL (:DT_LAST_UPDATE_in, DT_LAST_UPDATE)) ' || ',' ||
                                   ' DT_SIGNOFF = decode (' || l_dt_signoff_n ||
                                   ',0,:DT_SIGNOFF_in, NVL (:DT_SIGNOFF_in, DT_SIGNOFF)) ' || ',' ||
                                   ' ID_PROF_SIGNOFF = decode (' || l_id_prof_signoff_n ||
                                   ',0,:ID_PROF_SIGNOFF_in, NVL (:ID_PROF_SIGNOFF_in, ID_PROF_SIGNOFF)) ' || ',' ||
                                   ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                                   ',0,:ID_PROF_CANCEL_in, NVL (:ID_PROF_CANCEL_in, ID_PROF_CANCEL)) ' || ',' ||
                                   ' DT_CANCEL = decode (' || l_dt_cancel_n ||
                                   ',0,:DT_CANCEL_in, NVL (:DT_CANCEL_in, DT_CANCEL)) ' || ',' ||
                                   ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                                   ',0,:ID_CANCEL_REASON_in, NVL (:ID_CANCEL_REASON_in, ID_CANCEL_REASON)) ' || ',' ||
                                   ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                                   ',0,:NOTES_CANCEL_in, NVL (:NOTES_CANCEL_in, NOTES_CANCEL)) ' || ',' ||
                                   ' ID_DICTATION_REPORT = decode (' || l_id_dictation_report_n ||
                                   ',0,:ID_DICTATION_REPORT_in, NVL (:ID_DICTATION_REPORT_in, ID_DICTATION_REPORT)) ' || ',' ||
                                   ' CREATE_TIME = decode (' || l_create_time_n ||
                                   ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                   ' CREATE_USER = decode (' || l_create_user_n ||
                                   ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                   ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                   ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                   ' UPDATE_USER = decode (' || l_update_user_n ||
                                   ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                   ' UPDATE_TIME = decode (' || l_update_time_n ||
                                   ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                   ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                   ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                   ' ID_PN_NOTE_TYPE = decode (' || l_id_pn_note_type_n ||
                                   ',0,:ID_PN_NOTE_TYPE_in, NVL (:ID_PN_NOTE_TYPE_in, ID_PN_NOTE_TYPE)) ' || ',' ||
                                   ' DT_PN_DATE = decode (' || l_dt_pn_date_n ||
                                   ',0,:DT_PN_DATE_in, NVL (:DT_PN_DATE_in, DT_PN_DATE)) ' || ',' ||
                                   ' ID_PN_AREA = decode (' || l_id_pn_area_n ||
                                   ',0,:ID_PN_AREA_in, NVL (:ID_PN_AREA_in, ID_PN_AREA)) ' || ',' ||
                                   ' FLG_AUTO_SAVED = decode (' || l_flg_auto_saved_n ||
                                   ',0,:FLG_AUTO_SAVED_in, NVL (:FLG_AUTO_SAVED_in, FLG_AUTO_SAVED)) ' || ',' ||
                                   ' ID_SOFTWARE = decode (' || l_id_software_n ||
                                   ',0,:ID_SOFTWARE_in, NVL (:ID_SOFTWARE_in, ID_SOFTWARE)) ' || ',' ||
                                   ' ID_PROF_SUBMIT = decode (' || l_id_prof_submit_n ||
                                   ',0,:ID_PROF_SUBMIT_in, NVL (:ID_PROF_SUBMIT_in, ID_PROF_SUBMIT)) ' || ',' ||
                                   ' DT_SUBMIT = decode (' || l_dt_submit_n ||
                                   ',0,:DT_SUBMIT_in, NVL (:DT_SUBMIT_in, DT_SUBMIT)) ' || ',' ||
                                   ' ID_PROF_REVIEWED = decode (' || l_id_prof_reviewed_n ||
                                   ',0,:ID_PROF_REVIEWED_in, NVL (:ID_PROF_REVIEWED_in, ID_PROF_REVIEWED)) ' || ',' ||
                                   ' DT_REVIEWED = decode (' || l_dt_reviewed_n ||
                                   ',0,:DT_REVIEWED_in, NVL (:DT_REVIEWED_in, DT_REVIEWED)) ' || ',' ||
                                   ' ID_SUBMIT_REASON = decode (' || l_id_submit_reason_n ||
                                   ',0,:ID_SUBMIT_REASON_in, NVL (:ID_SUBMIT_REASON_in, ID_SUBMIT_REASON)) ' || ',' ||
                                   ' NOTES_SUBMIT = decode (' || l_notes_submit_n ||
                                   ',0,:NOTES_SUBMIT_in, NVL (:NOTES_SUBMIT_in, NOTES_SUBMIT)) ' || ',' ||
                                   ' DT_PROPOSED = decode (' || l_dt_proposed_n ||
                                   ',0,:DT_PROPOSED_in, NVL (:DT_PROPOSED_in, DT_PROPOSED)) ' || ' where ' ||
                                   nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_episode_in, flg_status_in, id_prof_create_in, dt_create_in, id_dep_clin_serv_in, id_prof_last_update_in, dt_last_update_in, dt_signoff_in, id_prof_signoff_in, id_prof_cancel_in, dt_cancel_in, id_cancel_reason_in, notes_cancel_in, id_dictation_report_in, create_time_in, create_user_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_pn_note_type_in, dt_pn_date_in, id_pn_area_in, flg_auto_saved_in, id_software_in, id_prof_submit_in, dt_submit_in, id_prof_reviewed_in, dt_reviewed_in, id_submit_reason_in, notes_submit_in, dt_proposed_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_episode_in           IN epis_pn.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        flg_status_in           IN epis_pn.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        id_prof_create_in       IN epis_pn.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin      IN BOOLEAN := TRUE,
        dt_create_in            IN epis_pn.dt_create%TYPE DEFAULT NULL,
        dt_create_nin           IN BOOLEAN := TRUE,
        id_dep_clin_serv_in     IN epis_pn.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin    IN BOOLEAN := TRUE,
        id_prof_last_update_in  IN epis_pn.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin IN BOOLEAN := TRUE,
        dt_last_update_in       IN epis_pn.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin      IN BOOLEAN := TRUE,
        dt_signoff_in           IN epis_pn.dt_signoff%TYPE DEFAULT NULL,
        dt_signoff_nin          IN BOOLEAN := TRUE,
        id_prof_signoff_in      IN epis_pn.id_prof_signoff%TYPE DEFAULT NULL,
        id_prof_signoff_nin     IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN epis_pn.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        dt_cancel_in            IN epis_pn.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin           IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN epis_pn.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        notes_cancel_in         IN epis_pn.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_dictation_report_in  IN epis_pn.id_dictation_report%TYPE DEFAULT NULL,
        id_dictation_report_nin IN BOOLEAN := TRUE,
        create_time_in          IN epis_pn.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_user_in          IN epis_pn.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_pn.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_pn.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_pn.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_pn.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        id_pn_note_type_in      IN epis_pn.id_pn_note_type%TYPE DEFAULT NULL,
        id_pn_note_type_nin     IN BOOLEAN := TRUE,
        dt_pn_date_in           IN epis_pn.dt_pn_date%TYPE DEFAULT NULL,
        dt_pn_date_nin          IN BOOLEAN := TRUE,
        id_pn_area_in           IN epis_pn.id_pn_area%TYPE DEFAULT NULL,
        id_pn_area_nin          IN BOOLEAN := TRUE,
        flg_auto_saved_in       IN epis_pn.flg_auto_saved%TYPE DEFAULT NULL,
        flg_auto_saved_nin      IN BOOLEAN := TRUE,
        id_software_in          IN epis_pn.id_software%TYPE DEFAULT NULL,
        id_software_nin         IN BOOLEAN := TRUE,
        id_prof_submit_in       IN epis_pn.id_prof_submit%TYPE DEFAULT NULL,
        id_prof_submit_nin      IN BOOLEAN := TRUE,
        dt_submit_in            IN epis_pn.dt_submit%TYPE DEFAULT NULL,
        dt_submit_nin           IN BOOLEAN := TRUE,
        id_prof_reviewed_in     IN epis_pn.id_prof_reviewed%TYPE DEFAULT NULL,
        id_prof_reviewed_nin    IN BOOLEAN := TRUE,
        dt_reviewed_in          IN epis_pn.dt_reviewed%TYPE DEFAULT NULL,
        dt_reviewed_nin         IN BOOLEAN := TRUE,
        id_submit_reason_in     IN epis_pn.id_submit_reason%TYPE DEFAULT NULL,
        id_submit_reason_nin    IN BOOLEAN := TRUE,
        notes_submit_in         IN epis_pn.notes_submit%TYPE DEFAULT NULL,
        notes_submit_nin        IN BOOLEAN := TRUE,
        dt_proposed_in          IN epis_pn.dt_proposed%TYPE DEFAULT NULL,
        dt_proposed_nin         IN BOOLEAN := TRUE,
        where_in                IN VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            flg_status_in           => flg_status_in,
            flg_status_nin          => flg_status_nin,
            id_prof_create_in       => id_prof_create_in,
            id_prof_create_nin      => id_prof_create_nin,
            dt_create_in            => dt_create_in,
            dt_create_nin           => dt_create_nin,
            id_dep_clin_serv_in     => id_dep_clin_serv_in,
            id_dep_clin_serv_nin    => id_dep_clin_serv_nin,
            id_prof_last_update_in  => id_prof_last_update_in,
            id_prof_last_update_nin => id_prof_last_update_nin,
            dt_last_update_in       => dt_last_update_in,
            dt_last_update_nin      => dt_last_update_nin,
            dt_signoff_in           => dt_signoff_in,
            dt_signoff_nin          => dt_signoff_nin,
            id_prof_signoff_in      => id_prof_signoff_in,
            id_prof_signoff_nin     => id_prof_signoff_nin,
            id_prof_cancel_in       => id_prof_cancel_in,
            id_prof_cancel_nin      => id_prof_cancel_nin,
            dt_cancel_in            => dt_cancel_in,
            dt_cancel_nin           => dt_cancel_nin,
            id_cancel_reason_in     => id_cancel_reason_in,
            id_cancel_reason_nin    => id_cancel_reason_nin,
            notes_cancel_in         => notes_cancel_in,
            notes_cancel_nin        => notes_cancel_nin,
            id_dictation_report_in  => id_dictation_report_in,
            id_dictation_report_nin => id_dictation_report_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            id_pn_note_type_in      => id_pn_note_type_in,
            id_pn_note_type_nin     => id_pn_note_type_nin,
            dt_pn_date_in           => dt_pn_date_in,
            dt_pn_date_nin          => dt_pn_date_nin,
            id_pn_area_in           => id_pn_area_in,
            id_pn_area_nin          => id_pn_area_nin,
            flg_auto_saved_in       => flg_auto_saved_in,
            flg_auto_saved_nin      => flg_auto_saved_nin,
            id_software_in          => id_software_in,
            id_software_nin         => id_software_nin,
            id_prof_submit_in       => id_prof_submit_in,
            id_prof_submit_nin      => id_prof_submit_nin,
            dt_submit_in            => dt_submit_in,
            dt_submit_nin           => dt_submit_nin,
            id_prof_reviewed_in     => id_prof_reviewed_in,
            id_prof_reviewed_nin    => id_prof_reviewed_nin,
            dt_reviewed_in          => dt_reviewed_in,
            dt_reviewed_nin         => dt_reviewed_nin,
            id_submit_reason_in     => id_submit_reason_in,
            id_submit_reason_nin    => id_submit_reason_nin,
            notes_submit_in         => notes_submit_in,
            notes_submit_nin        => notes_submit_nin,
            dt_proposed_in          => dt_proposed_in,
            dt_proposed_nin         => dt_proposed_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_epis_pn_in          IN epis_pn.id_epis_pn%TYPE,
        id_episode_in          IN epis_pn.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN epis_pn.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in      IN epis_pn.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN epis_pn.dt_create%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN epis_pn.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_prof_last_update_in IN epis_pn.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN epis_pn.dt_last_update%TYPE DEFAULT NULL,
        dt_signoff_in          IN epis_pn.dt_signoff%TYPE DEFAULT NULL,
        id_prof_signoff_in     IN epis_pn.id_prof_signoff%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_pn.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN epis_pn.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_pn.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_pn.notes_cancel%TYPE DEFAULT NULL,
        id_dictation_report_in IN epis_pn.id_dictation_report%TYPE DEFAULT NULL,
        create_time_in         IN epis_pn.create_time%TYPE DEFAULT NULL,
        create_user_in         IN epis_pn.create_user%TYPE DEFAULT NULL,
        create_institution_in  IN epis_pn.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_pn.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_pn.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_pn.update_institution%TYPE DEFAULT NULL,
        id_pn_note_type_in     IN epis_pn.id_pn_note_type%TYPE DEFAULT NULL,
        dt_pn_date_in          IN epis_pn.dt_pn_date%TYPE DEFAULT NULL,
        id_pn_area_in          IN epis_pn.id_pn_area%TYPE DEFAULT NULL,
        flg_auto_saved_in      IN epis_pn.flg_auto_saved%TYPE DEFAULT NULL,
        id_software_in         IN epis_pn.id_software%TYPE DEFAULT NULL,
        id_prof_submit_in      IN epis_pn.id_prof_submit%TYPE DEFAULT NULL,
        dt_submit_in           IN epis_pn.dt_submit%TYPE DEFAULT NULL,
        id_prof_reviewed_in    IN epis_pn.id_prof_reviewed%TYPE DEFAULT NULL,
        dt_reviewed_in         IN epis_pn.dt_reviewed%TYPE DEFAULT NULL,
        id_submit_reason_in    IN epis_pn.id_submit_reason%TYPE DEFAULT NULL,
        notes_submit_in        IN epis_pn.notes_submit%TYPE DEFAULT NULL,
        dt_proposed_in         IN epis_pn.dt_proposed%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_pn_in          => id_epis_pn_in,
            id_episode_in          => id_episode_in,
            flg_status_in          => flg_status_in,
            id_prof_create_in      => id_prof_create_in,
            dt_create_in           => dt_create_in,
            id_dep_clin_serv_in    => id_dep_clin_serv_in,
            id_prof_last_update_in => id_prof_last_update_in,
            dt_last_update_in      => dt_last_update_in,
            dt_signoff_in          => dt_signoff_in,
            id_prof_signoff_in     => id_prof_signoff_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            id_dictation_report_in => id_dictation_report_in,
            create_time_in         => create_time_in,
            create_user_in         => create_user_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_pn_note_type_in     => id_pn_note_type_in,
            dt_pn_date_in          => dt_pn_date_in,
            id_pn_area_in          => id_pn_area_in,
            flg_auto_saved_in      => flg_auto_saved_in,
            id_software_in         => id_software_in,
            id_prof_submit_in      => id_prof_submit_in,
            dt_submit_in           => dt_submit_in,
            id_prof_reviewed_in    => id_prof_reviewed_in,
            dt_reviewed_in         => dt_reviewed_in,
            id_submit_reason_in    => id_submit_reason_in,
            notes_submit_in        => notes_submit_in,
            dt_proposed_in         => dt_proposed_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_epis_pn_in          => id_epis_pn_in,
                id_episode_in          => id_episode_in,
                flg_status_in          => flg_status_in,
                id_prof_create_in      => id_prof_create_in,
                dt_create_in           => dt_create_in,
                id_dep_clin_serv_in    => id_dep_clin_serv_in,
                id_prof_last_update_in => id_prof_last_update_in,
                dt_last_update_in      => dt_last_update_in,
                dt_signoff_in          => dt_signoff_in,
                id_prof_signoff_in     => id_prof_signoff_in,
                id_prof_cancel_in      => id_prof_cancel_in,
                dt_cancel_in           => dt_cancel_in,
                id_cancel_reason_in    => id_cancel_reason_in,
                notes_cancel_in        => notes_cancel_in,
                id_dictation_report_in => id_dictation_report_in,
                create_time_in         => create_time_in,
                create_user_in         => create_user_in,
                create_institution_in  => create_institution_in,
                update_user_in         => update_user_in,
                update_time_in         => update_time_in,
                update_institution_in  => update_institution_in,
                id_pn_note_type_in     => id_pn_note_type_in,
                dt_pn_date_in          => dt_pn_date_in,
                id_pn_area_in          => id_pn_area_in,
                flg_auto_saved_in      => flg_auto_saved_in,
                id_software_in         => id_software_in,
                id_prof_submit_in      => id_prof_submit_in,
                dt_submit_in           => dt_submit_in,
                id_prof_reviewed_in    => id_prof_reviewed_in,
                dt_reviewed_in         => dt_reviewed_in,
                id_submit_reason_in    => id_submit_reason_in,
                notes_submit_in        => notes_submit_in,
                dt_proposed_in         => dt_proposed_in,
                handle_error_in        => handle_error_in,
                rows_out               => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_epis_pn_in          IN epis_pn.id_epis_pn%TYPE,
        id_episode_in          IN epis_pn.id_episode%TYPE DEFAULT NULL,
        flg_status_in          IN epis_pn.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in      IN epis_pn.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN epis_pn.dt_create%TYPE DEFAULT NULL,
        id_dep_clin_serv_in    IN epis_pn.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_prof_last_update_in IN epis_pn.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN epis_pn.dt_last_update%TYPE DEFAULT NULL,
        dt_signoff_in          IN epis_pn.dt_signoff%TYPE DEFAULT NULL,
        id_prof_signoff_in     IN epis_pn.id_prof_signoff%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_pn.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN epis_pn.dt_cancel%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_pn.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_pn.notes_cancel%TYPE DEFAULT NULL,
        id_dictation_report_in IN epis_pn.id_dictation_report%TYPE DEFAULT NULL,
        create_time_in         IN epis_pn.create_time%TYPE DEFAULT NULL,
        create_user_in         IN epis_pn.create_user%TYPE DEFAULT NULL,
        create_institution_in  IN epis_pn.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_pn.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_pn.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_pn.update_institution%TYPE DEFAULT NULL,
        id_pn_note_type_in     IN epis_pn.id_pn_note_type%TYPE DEFAULT NULL,
        dt_pn_date_in          IN epis_pn.dt_pn_date%TYPE DEFAULT NULL,
        id_pn_area_in          IN epis_pn.id_pn_area%TYPE DEFAULT NULL,
        flg_auto_saved_in      IN epis_pn.flg_auto_saved%TYPE DEFAULT NULL,
        id_software_in         IN epis_pn.id_software%TYPE DEFAULT NULL,
        id_prof_submit_in      IN epis_pn.id_prof_submit%TYPE DEFAULT NULL,
        dt_submit_in           IN epis_pn.dt_submit%TYPE DEFAULT NULL,
        id_prof_reviewed_in    IN epis_pn.id_prof_reviewed%TYPE DEFAULT NULL,
        dt_reviewed_in         IN epis_pn.dt_reviewed%TYPE DEFAULT NULL,
        id_submit_reason_in    IN epis_pn.id_submit_reason%TYPE DEFAULT NULL,
        notes_submit_in        IN epis_pn.notes_submit%TYPE DEFAULT NULL,
        dt_proposed_in         IN epis_pn.dt_proposed%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_epis_pn_in,
                id_episode_in,
                flg_status_in,
                id_prof_create_in,
                dt_create_in,
                id_dep_clin_serv_in,
                id_prof_last_update_in,
                dt_last_update_in,
                dt_signoff_in,
                id_prof_signoff_in,
                id_prof_cancel_in,
                dt_cancel_in,
                id_cancel_reason_in,
                notes_cancel_in,
                id_dictation_report_in,
                create_time_in,
                create_user_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_pn_note_type_in,
                dt_pn_date_in,
                id_pn_area_in,
                flg_auto_saved_in,
                id_software_in,
                id_prof_submit_in,
                dt_submit_in,
                id_prof_reviewed_in,
                dt_reviewed_in,
                id_submit_reason_in,
                notes_submit_in,
                dt_proposed_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_pn%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_pn_in          => rec_in.id_epis_pn,
            id_episode_in          => rec_in.id_episode,
            flg_status_in          => rec_in.flg_status,
            id_prof_create_in      => rec_in.id_prof_create,
            dt_create_in           => rec_in.dt_create,
            id_dep_clin_serv_in    => rec_in.id_dep_clin_serv,
            id_prof_last_update_in => rec_in.id_prof_last_update,
            dt_last_update_in      => rec_in.dt_last_update,
            dt_signoff_in          => rec_in.dt_signoff,
            id_prof_signoff_in     => rec_in.id_prof_signoff,
            id_prof_cancel_in      => rec_in.id_prof_cancel,
            dt_cancel_in           => rec_in.dt_cancel,
            id_cancel_reason_in    => rec_in.id_cancel_reason,
            notes_cancel_in        => rec_in.notes_cancel,
            id_dictation_report_in => rec_in.id_dictation_report,
            create_time_in         => rec_in.create_time,
            create_user_in         => rec_in.create_user,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            id_pn_note_type_in     => rec_in.id_pn_note_type,
            dt_pn_date_in          => rec_in.dt_pn_date,
            id_pn_area_in          => rec_in.id_pn_area,
            flg_auto_saved_in      => rec_in.flg_auto_saved,
            id_software_in         => rec_in.id_software,
            id_prof_submit_in      => rec_in.id_prof_submit,
            dt_submit_in           => rec_in.dt_submit,
            id_prof_reviewed_in    => rec_in.id_prof_reviewed,
            dt_reviewed_in         => rec_in.dt_reviewed,
            id_submit_reason_in    => rec_in.id_submit_reason,
            notes_submit_in        => rec_in.notes_submit,
            dt_proposed_in         => rec_in.dt_proposed,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_pn%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_pn_in          => rec_in.id_epis_pn,
            id_episode_in          => rec_in.id_episode,
            flg_status_in          => rec_in.flg_status,
            id_prof_create_in      => rec_in.id_prof_create,
            dt_create_in           => rec_in.dt_create,
            id_dep_clin_serv_in    => rec_in.id_dep_clin_serv,
            id_prof_last_update_in => rec_in.id_prof_last_update,
            dt_last_update_in      => rec_in.dt_last_update,
            dt_signoff_in          => rec_in.dt_signoff,
            id_prof_signoff_in     => rec_in.id_prof_signoff,
            id_prof_cancel_in      => rec_in.id_prof_cancel,
            dt_cancel_in           => rec_in.dt_cancel,
            id_cancel_reason_in    => rec_in.id_cancel_reason,
            notes_cancel_in        => rec_in.notes_cancel,
            id_dictation_report_in => rec_in.id_dictation_report,
            create_time_in         => rec_in.create_time,
            create_user_in         => rec_in.create_user,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            id_pn_note_type_in     => rec_in.id_pn_note_type,
            dt_pn_date_in          => rec_in.dt_pn_date,
            id_pn_area_in          => rec_in.id_pn_area,
            flg_auto_saved_in      => rec_in.flg_auto_saved,
            id_software_in         => rec_in.id_software,
            id_prof_submit_in      => rec_in.id_prof_submit,
            dt_submit_in           => rec_in.dt_submit,
            id_prof_reviewed_in    => rec_in.id_prof_reviewed,
            dt_reviewed_in         => rec_in.dt_reviewed,
            id_submit_reason_in    => rec_in.id_submit_reason,
            notes_submit_in        => rec_in.notes_submit,
            dt_proposed_in         => rec_in.dt_proposed,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_pn_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_epis_pn          id_epis_pn_cc;
        l_id_episode          id_episode_cc;
        l_flg_status          flg_status_cc;
        l_id_prof_create      id_prof_create_cc;
        l_dt_create           dt_create_cc;
        l_id_dep_clin_serv    id_dep_clin_serv_cc;
        l_id_prof_last_update id_prof_last_update_cc;
        l_dt_last_update      dt_last_update_cc;
        l_dt_signoff          dt_signoff_cc;
        l_id_prof_signoff     id_prof_signoff_cc;
        l_id_prof_cancel      id_prof_cancel_cc;
        l_dt_cancel           dt_cancel_cc;
        l_id_cancel_reason    id_cancel_reason_cc;
        l_notes_cancel        notes_cancel_cc;
        l_id_dictation_report id_dictation_report_cc;
        l_create_time         create_time_cc;
        l_create_user         create_user_cc;
        l_create_institution  create_institution_cc;
        l_update_user         update_user_cc;
        l_update_time         update_time_cc;
        l_update_institution  update_institution_cc;
        l_id_pn_note_type     id_pn_note_type_cc;
        l_dt_pn_date          dt_pn_date_cc;
        l_id_pn_area          id_pn_area_cc;
        l_flg_auto_saved      flg_auto_saved_cc;
        l_id_software         id_software_cc;
        l_id_prof_submit      id_prof_submit_cc;
        l_dt_submit           dt_submit_cc;
        l_id_prof_reviewed    id_prof_reviewed_cc;
        l_dt_reviewed         dt_reviewed_cc;
        l_id_submit_reason    id_submit_reason_cc;
        l_notes_submit        notes_submit_cc;
        l_dt_proposed         dt_proposed_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_epis_pn(i) := col_in(i).id_epis_pn;
            l_id_episode(i) := col_in(i).id_episode;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_prof_create(i) := col_in(i).id_prof_create;
            l_dt_create(i) := col_in(i).dt_create;
            l_id_dep_clin_serv(i) := col_in(i).id_dep_clin_serv;
            l_id_prof_last_update(i) := col_in(i).id_prof_last_update;
            l_dt_last_update(i) := col_in(i).dt_last_update;
            l_dt_signoff(i) := col_in(i).dt_signoff;
            l_id_prof_signoff(i) := col_in(i).id_prof_signoff;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_dt_cancel(i) := col_in(i).dt_cancel;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_id_dictation_report(i) := col_in(i).id_dictation_report;
            l_create_time(i) := col_in(i).create_time;
            l_create_user(i) := col_in(i).create_user;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_pn_note_type(i) := col_in(i).id_pn_note_type;
            l_dt_pn_date(i) := col_in(i).dt_pn_date;
            l_id_pn_area(i) := col_in(i).id_pn_area;
            l_flg_auto_saved(i) := col_in(i).flg_auto_saved;
            l_id_software(i) := col_in(i).id_software;
            l_id_prof_submit(i) := col_in(i).id_prof_submit;
            l_dt_submit(i) := col_in(i).dt_submit;
            l_id_prof_reviewed(i) := col_in(i).id_prof_reviewed;
            l_dt_reviewed(i) := col_in(i).dt_reviewed;
            l_id_submit_reason(i) := col_in(i).id_submit_reason;
            l_notes_submit(i) := col_in(i).notes_submit;
            l_dt_proposed(i) := col_in(i).dt_proposed;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_pn
                   SET id_episode          = nvl(l_id_episode(i), id_episode),
                       flg_status          = nvl(l_flg_status(i), flg_status),
                       id_prof_create      = nvl(l_id_prof_create(i), id_prof_create),
                       dt_create           = nvl(l_dt_create(i), dt_create),
                       id_dep_clin_serv    = nvl(l_id_dep_clin_serv(i), id_dep_clin_serv),
                       id_prof_last_update = nvl(l_id_prof_last_update(i), id_prof_last_update),
                       dt_last_update      = nvl(l_dt_last_update(i), dt_last_update),
                       dt_signoff          = nvl(l_dt_signoff(i), dt_signoff),
                       id_prof_signoff     = nvl(l_id_prof_signoff(i), id_prof_signoff),
                       id_prof_cancel      = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       dt_cancel           = nvl(l_dt_cancel(i), dt_cancel),
                       id_cancel_reason    = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       notes_cancel        = nvl(l_notes_cancel(i), notes_cancel),
                       id_dictation_report = nvl(l_id_dictation_report(i), id_dictation_report),
                       create_time         = nvl(l_create_time(i), create_time),
                       create_user         = nvl(l_create_user(i), create_user),
                       create_institution  = nvl(l_create_institution(i), create_institution),
                       update_user         = nvl(l_update_user(i), update_user),
                       update_time         = nvl(l_update_time(i), update_time),
                       update_institution  = nvl(l_update_institution(i), update_institution),
                       id_pn_note_type     = nvl(l_id_pn_note_type(i), id_pn_note_type),
                       dt_pn_date          = nvl(l_dt_pn_date(i), dt_pn_date),
                       id_pn_area          = nvl(l_id_pn_area(i), id_pn_area),
                       flg_auto_saved      = nvl(l_flg_auto_saved(i), flg_auto_saved),
                       id_software         = nvl(l_id_software(i), id_software),
                       id_prof_submit      = nvl(l_id_prof_submit(i), id_prof_submit),
                       dt_submit           = nvl(l_dt_submit(i), dt_submit),
                       id_prof_reviewed    = nvl(l_id_prof_reviewed(i), id_prof_reviewed),
                       dt_reviewed         = nvl(l_dt_reviewed(i), dt_reviewed),
                       id_submit_reason    = nvl(l_id_submit_reason(i), id_submit_reason),
                       notes_submit        = nvl(l_notes_submit(i), notes_submit),
                       dt_proposed         = nvl(l_dt_proposed(i), dt_proposed)
                 WHERE id_epis_pn = l_id_epis_pn(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_pn
                   SET id_episode          = l_id_episode(i),
                       flg_status          = l_flg_status(i),
                       id_prof_create      = l_id_prof_create(i),
                       dt_create           = l_dt_create(i),
                       id_dep_clin_serv    = l_id_dep_clin_serv(i),
                       id_prof_last_update = l_id_prof_last_update(i),
                       dt_last_update      = l_dt_last_update(i),
                       dt_signoff          = l_dt_signoff(i),
                       id_prof_signoff     = l_id_prof_signoff(i),
                       id_prof_cancel      = l_id_prof_cancel(i),
                       dt_cancel           = l_dt_cancel(i),
                       id_cancel_reason    = l_id_cancel_reason(i),
                       notes_cancel        = l_notes_cancel(i),
                       id_dictation_report = l_id_dictation_report(i),
                       create_time         = l_create_time(i),
                       create_user         = l_create_user(i),
                       create_institution  = l_create_institution(i),
                       update_user         = l_update_user(i),
                       update_time         = l_update_time(i),
                       update_institution  = l_update_institution(i),
                       id_pn_note_type     = l_id_pn_note_type(i),
                       dt_pn_date          = l_dt_pn_date(i),
                       id_pn_area          = l_id_pn_area(i),
                       flg_auto_saved      = l_flg_auto_saved(i),
                       id_software         = l_id_software(i),
                       id_prof_submit      = l_id_prof_submit(i),
                       dt_submit           = l_dt_submit(i),
                       id_prof_reviewed    = l_id_prof_reviewed(i),
                       dt_reviewed         = l_dt_reviewed(i),
                       id_submit_reason    = l_id_submit_reason(i),
                       notes_submit        = l_notes_submit(i),
                       dt_proposed         = l_dt_proposed(i)
                 WHERE id_epis_pn = l_id_epis_pn(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_pn_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE epis_pn
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE epis_pn
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE epis_pn
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_pn_in   IN epis_pn.id_epis_pn%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_pn
         WHERE id_epis_pn = id_epis_pn_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_pn_in   IN epis_pn.id_epis_pn%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_epis_pn_in => id_epis_pn_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del;

    -- Delete all rows for this EPGN_EPIS_FK foreign key value
    PROCEDURE del_epgn_epis_fk
    (
        id_episode_in   IN epis_pn.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_pn
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epgn_epis_fk;

    -- Delete all rows for this EPN_CRN_FK foreign key value
    PROCEDURE del_epn_crn_fk
    (
        id_cancel_reason_in IN epis_pn.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_pn
         WHERE id_cancel_reason = id_cancel_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epn_crn_fk;

    -- Delete all rows for this EPN_DCS_FK foreign key value
    PROCEDURE del_epn_dcs_fk
    (
        id_dep_clin_serv_in IN epis_pn.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_pn
         WHERE id_dep_clin_serv = id_dep_clin_serv_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epn_dcs_fk;

    -- Delete all rows for this EPN_DICREP_FK foreign key value
    PROCEDURE del_epn_dicrep_fk
    (
        id_dictation_report_in IN epis_pn.id_dictation_report%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_pn
         WHERE id_dictation_report = id_dictation_report_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epn_dicrep_fk;

    -- Delete all rows for this EPN_ID_AREA_FK foreign key value
    PROCEDURE del_epn_id_area_fk
    (
        id_pn_area_in   IN epis_pn.id_pn_area%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_pn
         WHERE id_pn_area = id_pn_area_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epn_id_area_fk;

    -- Delete all rows for this EPN_ID_SOFTWARE_FK foreign key value
    PROCEDURE del_epn_id_software_fk
    (
        id_software_in  IN epis_pn.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_pn
         WHERE id_software = id_software_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epn_id_software_fk;

    -- Delete all rows for this EPN_PNNT_FK foreign key value
    PROCEDURE del_epn_pnnt_fk
    (
        id_pn_note_type_in IN epis_pn.id_pn_note_type%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_pn
         WHERE id_pn_note_type = id_pn_note_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epn_pnnt_fk;

    -- Delete all rows for this EPN_PROF_CANCEL_FK foreign key value
    PROCEDURE del_epn_prof_cancel_fk
    (
        id_prof_cancel_in IN epis_pn.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_pn
         WHERE id_prof_cancel = id_prof_cancel_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epn_prof_cancel_fk;

    -- Delete all rows for this EPN_PROF_FK foreign key value
    PROCEDURE del_epn_prof_fk
    (
        id_prof_create_in IN epis_pn.id_prof_create%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_pn
         WHERE id_prof_create = id_prof_create_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epn_prof_fk;

    -- Delete all rows for this EPN_PROF_REVIEWED_FK foreign key value
    PROCEDURE del_epn_prof_reviewed_fk
    (
        id_prof_reviewed_in IN epis_pn.id_prof_reviewed%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_pn
         WHERE id_prof_reviewed = id_prof_reviewed_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epn_prof_reviewed_fk;

    -- Delete all rows for this EPN_PROF_SIGNOFF_FK foreign key value
    PROCEDURE del_epn_prof_signoff_fk
    (
        id_prof_signoff_in IN epis_pn.id_prof_signoff%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_pn
         WHERE id_prof_signoff = id_prof_signoff_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epn_prof_signoff_fk;

    -- Delete all rows for this EPN_PROF_SUBMIT_FK foreign key value
    PROCEDURE del_epn_prof_submit_fk
    (
        id_prof_submit_in IN epis_pn.id_prof_submit%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_pn
         WHERE id_prof_submit = id_prof_submit_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epn_prof_submit_fk;

    -- Delete all rows for this EPN_PROF_UPD_FK foreign key value
    PROCEDURE del_epn_prof_upd_fk
    (
        id_prof_last_update_in IN epis_pn.id_prof_last_update%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_pn
         WHERE id_prof_last_update = id_prof_last_update_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epn_prof_upd_fk;

    -- Delete all rows for this EPN_SRN_FK foreign key value
    PROCEDURE del_epn_srn_fk
    (
        id_submit_reason_in IN epis_pn.id_submit_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_pn
         WHERE id_submit_reason = id_submit_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epn_srn_fk;

    -- Delete all rows for this EPGN_EPIS_FK foreign key value
    PROCEDURE del_epgn_epis_fk
    (
        id_episode_in   IN epis_pn.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epgn_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_epgn_epis_fk;

    -- Delete all rows for this EPN_CRN_FK foreign key value
    PROCEDURE del_epn_crn_fk
    (
        id_cancel_reason_in IN epis_pn.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epn_crn_fk(id_cancel_reason_in => id_cancel_reason_in,
                       handle_error_in     => handle_error_in,
                       rows_out            => rows_out);
    END del_epn_crn_fk;

    -- Delete all rows for this EPN_DCS_FK foreign key value
    PROCEDURE del_epn_dcs_fk
    (
        id_dep_clin_serv_in IN epis_pn.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epn_dcs_fk(id_dep_clin_serv_in => id_dep_clin_serv_in,
                       handle_error_in     => handle_error_in,
                       rows_out            => rows_out);
    END del_epn_dcs_fk;

    -- Delete all rows for this EPN_DICREP_FK foreign key value
    PROCEDURE del_epn_dicrep_fk
    (
        id_dictation_report_in IN epis_pn.id_dictation_report%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epn_dicrep_fk(id_dictation_report_in => id_dictation_report_in,
                          handle_error_in        => handle_error_in,
                          rows_out               => rows_out);
    END del_epn_dicrep_fk;

    -- Delete all rows for this EPN_ID_AREA_FK foreign key value
    PROCEDURE del_epn_id_area_fk
    (
        id_pn_area_in   IN epis_pn.id_pn_area%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epn_id_area_fk(id_pn_area_in => id_pn_area_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_epn_id_area_fk;

    -- Delete all rows for this EPN_ID_SOFTWARE_FK foreign key value
    PROCEDURE del_epn_id_software_fk
    (
        id_software_in  IN epis_pn.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epn_id_software_fk(id_software_in  => id_software_in,
                               handle_error_in => handle_error_in,
                               rows_out        => rows_out);
    END del_epn_id_software_fk;

    -- Delete all rows for this EPN_PNNT_FK foreign key value
    PROCEDURE del_epn_pnnt_fk
    (
        id_pn_note_type_in IN epis_pn.id_pn_note_type%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epn_pnnt_fk(id_pn_note_type_in => id_pn_note_type_in,
                        handle_error_in    => handle_error_in,
                        rows_out           => rows_out);
    END del_epn_pnnt_fk;

    -- Delete all rows for this EPN_PROF_CANCEL_FK foreign key value
    PROCEDURE del_epn_prof_cancel_fk
    (
        id_prof_cancel_in IN epis_pn.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epn_prof_cancel_fk(id_prof_cancel_in => id_prof_cancel_in,
                               handle_error_in   => handle_error_in,
                               rows_out          => rows_out);
    END del_epn_prof_cancel_fk;

    -- Delete all rows for this EPN_PROF_FK foreign key value
    PROCEDURE del_epn_prof_fk
    (
        id_prof_create_in IN epis_pn.id_prof_create%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epn_prof_fk(id_prof_create_in => id_prof_create_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_epn_prof_fk;

    -- Delete all rows for this EPN_PROF_REVIEWED_FK foreign key value
    PROCEDURE del_epn_prof_reviewed_fk
    (
        id_prof_reviewed_in IN epis_pn.id_prof_reviewed%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epn_prof_reviewed_fk(id_prof_reviewed_in => id_prof_reviewed_in,
                                 handle_error_in     => handle_error_in,
                                 rows_out            => rows_out);
    END del_epn_prof_reviewed_fk;

    -- Delete all rows for this EPN_PROF_SIGNOFF_FK foreign key value
    PROCEDURE del_epn_prof_signoff_fk
    (
        id_prof_signoff_in IN epis_pn.id_prof_signoff%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epn_prof_signoff_fk(id_prof_signoff_in => id_prof_signoff_in,
                                handle_error_in    => handle_error_in,
                                rows_out           => rows_out);
    END del_epn_prof_signoff_fk;

    -- Delete all rows for this EPN_PROF_SUBMIT_FK foreign key value
    PROCEDURE del_epn_prof_submit_fk
    (
        id_prof_submit_in IN epis_pn.id_prof_submit%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epn_prof_submit_fk(id_prof_submit_in => id_prof_submit_in,
                               handle_error_in   => handle_error_in,
                               rows_out          => rows_out);
    END del_epn_prof_submit_fk;

    -- Delete all rows for this EPN_PROF_UPD_FK foreign key value
    PROCEDURE del_epn_prof_upd_fk
    (
        id_prof_last_update_in IN epis_pn.id_prof_last_update%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epn_prof_upd_fk(id_prof_last_update_in => id_prof_last_update_in,
                            handle_error_in        => handle_error_in,
                            rows_out               => rows_out);
    END del_epn_prof_upd_fk;

    -- Delete all rows for this EPN_SRN_FK foreign key value
    PROCEDURE del_epn_srn_fk
    (
        id_submit_reason_in IN epis_pn.id_submit_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epn_srn_fk(id_submit_reason_in => id_submit_reason_in,
                       handle_error_in     => handle_error_in,
                       rows_out            => rows_out);
    END del_epn_srn_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM epis_pn';
        ELSE
            RETURN 'DELETE FROM epis_pn WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(epis_pn_inout IN OUT epis_pn%ROWTYPE) IS
    BEGIN
        epis_pn_inout.id_epis_pn          := NULL;
        epis_pn_inout.id_episode          := NULL;
        epis_pn_inout.flg_status          := NULL;
        epis_pn_inout.id_prof_create      := NULL;
        epis_pn_inout.dt_create           := NULL;
        epis_pn_inout.id_dep_clin_serv    := NULL;
        epis_pn_inout.id_prof_last_update := NULL;
        epis_pn_inout.dt_last_update      := NULL;
        epis_pn_inout.dt_signoff          := NULL;
        epis_pn_inout.id_prof_signoff     := NULL;
        epis_pn_inout.id_prof_cancel      := NULL;
        epis_pn_inout.dt_cancel           := NULL;
        epis_pn_inout.id_cancel_reason    := NULL;
        epis_pn_inout.notes_cancel        := NULL;
        epis_pn_inout.id_dictation_report := NULL;
        epis_pn_inout.create_time         := NULL;
        epis_pn_inout.create_user         := NULL;
        epis_pn_inout.create_institution  := NULL;
        epis_pn_inout.update_user         := NULL;
        epis_pn_inout.update_time         := NULL;
        epis_pn_inout.update_institution  := NULL;
        epis_pn_inout.id_pn_note_type     := NULL;
        epis_pn_inout.dt_pn_date          := NULL;
        epis_pn_inout.id_pn_area          := NULL;
        epis_pn_inout.flg_auto_saved      := NULL;
        epis_pn_inout.id_software         := NULL;
        epis_pn_inout.id_prof_submit      := NULL;
        epis_pn_inout.dt_submit           := NULL;
        epis_pn_inout.id_prof_reviewed    := NULL;
        epis_pn_inout.dt_reviewed         := NULL;
        epis_pn_inout.id_submit_reason    := NULL;
        epis_pn_inout.notes_submit        := NULL;
        epis_pn_inout.dt_proposed         := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN epis_pn%ROWTYPE IS
        l_epis_pn epis_pn%ROWTYPE;
    BEGIN
        RETURN l_epis_pn;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_pn_tc IS
        data epis_pn_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM epis_pn
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_pn_tc IS
        data epis_pn_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_epis_pn;
/
