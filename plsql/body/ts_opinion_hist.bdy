/*-- Last Change Revision: $Rev: 2028279 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:49 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY TS_OPINION_HIST
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Outubro 20, 2011 11:39:5
| Created By: ALERT
*/
IS


   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_opinion_hist_in IN OPINION_HIST.ID_OPINION_HIST%TYPE
      ,
      id_opinion_in IN OPINION_HIST.ID_OPINION%TYPE DEFAULT NULL,
      id_episode_in IN OPINION_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      flg_state_in IN OPINION_HIST.FLG_STATE%TYPE DEFAULT NULL,
      desc_problem_in IN OPINION_HIST.DESC_PROBLEM%TYPE DEFAULT NULL,
      id_prof_questions_in IN OPINION_HIST.ID_PROF_QUESTIONS%TYPE DEFAULT NULL,
      id_prof_questioned_in IN OPINION_HIST.ID_PROF_QUESTIONED%TYPE DEFAULT NULL,
      id_speciality_in IN OPINION_HIST.ID_SPECIALITY%TYPE DEFAULT NULL,
      notes_cancel_in IN OPINION_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_problem_tstz_in IN OPINION_HIST.DT_PROBLEM_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN OPINION_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      status_flg_in IN OPINION_HIST.STATUS_FLG%TYPE DEFAULT NULL,
      status_icon_in IN OPINION_HIST.STATUS_ICON%TYPE DEFAULT NULL,
      status_msg_in IN OPINION_HIST.STATUS_MSG%TYPE DEFAULT NULL,
      status_str_in IN OPINION_HIST.STATUS_STR%TYPE DEFAULT NULL,
      id_management_level_in IN OPINION_HIST.ID_MANAGEMENT_LEVEL%TYPE DEFAULT NULL,
      id_episode_answer_in IN OPINION_HIST.ID_EPISODE_ANSWER%TYPE DEFAULT NULL,
      id_cancel_reason_in IN OPINION_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_patient_in IN OPINION_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      dt_last_update_in IN OPINION_HIST.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      id_opinion_type_in IN OPINION_HIST.ID_OPINION_TYPE%TYPE DEFAULT NULL,
      id_clinical_service_in IN OPINION_HIST.ID_CLINICAL_SERVICE%TYPE DEFAULT NULL,
      dt_approved_in IN OPINION_HIST.DT_APPROVED%TYPE DEFAULT NULL,
      id_prof_approved_in IN OPINION_HIST.ID_PROF_APPROVED%TYPE DEFAULT NULL,
      notes_in IN OPINION_HIST.NOTES%TYPE DEFAULT NULL,
      id_prof_created_hist_in IN OPINION_HIST.ID_PROF_CREATED_HIST%TYPE DEFAULT NULL,
      dt_created_hist_in IN OPINION_HIST.DT_CREATED_HIST%TYPE DEFAULT NULL,
      create_user_in IN OPINION_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN OPINION_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN OPINION_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN OPINION_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN OPINION_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN OPINION_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_approval_in IN OPINION_HIST.ID_EPISODE_APPROVAL%TYPE DEFAULT NULL,
      flg_auto_follow_up_in IN OPINION_HIST.FLG_AUTO_FOLLOW_UP%TYPE DEFAULT 'N'
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO OPINION_HIST (
         ID_OPINION_HIST,
         ID_OPINION,
         ID_EPISODE,
         FLG_STATE,
         DESC_PROBLEM,
         ID_PROF_QUESTIONS,
         ID_PROF_QUESTIONED,
         ID_SPECIALITY,
         NOTES_CANCEL,
         DT_PROBLEM_TSTZ,
         DT_CANCEL_TSTZ,
         STATUS_FLG,
         STATUS_ICON,
         STATUS_MSG,
         STATUS_STR,
         ID_MANAGEMENT_LEVEL,
         ID_EPISODE_ANSWER,
         ID_CANCEL_REASON,
         ID_PATIENT,
         DT_LAST_UPDATE,
         ID_OPINION_TYPE,
         ID_CLINICAL_SERVICE,
         DT_APPROVED,
         ID_PROF_APPROVED,
         NOTES,
         ID_PROF_CREATED_HIST,
         DT_CREATED_HIST,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION,
         ID_EPISODE_APPROVAL,
         FLG_AUTO_FOLLOW_UP
         )
      VALUES (
         id_opinion_hist_in,
         id_opinion_in,
         id_episode_in,
         flg_state_in,
         desc_problem_in,
         id_prof_questions_in,
         id_prof_questioned_in,
         id_speciality_in,
         notes_cancel_in,
         dt_problem_tstz_in,
         dt_cancel_tstz_in,
         status_flg_in,
         status_icon_in,
         status_msg_in,
         status_str_in,
         id_management_level_in,
         id_episode_answer_in,
         id_cancel_reason_in,
         id_patient_in,
         dt_last_update_in,
         id_opinion_type_in,
         id_clinical_service_in,
         dt_approved_in,
         id_prof_approved_in,
         notes_in,
         id_prof_created_hist_in,
         dt_created_hist_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in,
         id_episode_approval_in,
         flg_auto_follow_up_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'OPINION_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'OPINION_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'OPINION_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_opinion_hist_in IN OPINION_HIST.ID_OPINION_HIST%TYPE
      ,
      id_opinion_in IN OPINION_HIST.ID_OPINION%TYPE DEFAULT NULL,
      id_episode_in IN OPINION_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      flg_state_in IN OPINION_HIST.FLG_STATE%TYPE DEFAULT NULL,
      desc_problem_in IN OPINION_HIST.DESC_PROBLEM%TYPE DEFAULT NULL,
      id_prof_questions_in IN OPINION_HIST.ID_PROF_QUESTIONS%TYPE DEFAULT NULL,
      id_prof_questioned_in IN OPINION_HIST.ID_PROF_QUESTIONED%TYPE DEFAULT NULL,
      id_speciality_in IN OPINION_HIST.ID_SPECIALITY%TYPE DEFAULT NULL,
      notes_cancel_in IN OPINION_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_problem_tstz_in IN OPINION_HIST.DT_PROBLEM_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN OPINION_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      status_flg_in IN OPINION_HIST.STATUS_FLG%TYPE DEFAULT NULL,
      status_icon_in IN OPINION_HIST.STATUS_ICON%TYPE DEFAULT NULL,
      status_msg_in IN OPINION_HIST.STATUS_MSG%TYPE DEFAULT NULL,
      status_str_in IN OPINION_HIST.STATUS_STR%TYPE DEFAULT NULL,
      id_management_level_in IN OPINION_HIST.ID_MANAGEMENT_LEVEL%TYPE DEFAULT NULL,
      id_episode_answer_in IN OPINION_HIST.ID_EPISODE_ANSWER%TYPE DEFAULT NULL,
      id_cancel_reason_in IN OPINION_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_patient_in IN OPINION_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      dt_last_update_in IN OPINION_HIST.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      id_opinion_type_in IN OPINION_HIST.ID_OPINION_TYPE%TYPE DEFAULT NULL,
      id_clinical_service_in IN OPINION_HIST.ID_CLINICAL_SERVICE%TYPE DEFAULT NULL,
      dt_approved_in IN OPINION_HIST.DT_APPROVED%TYPE DEFAULT NULL,
      id_prof_approved_in IN OPINION_HIST.ID_PROF_APPROVED%TYPE DEFAULT NULL,
      notes_in IN OPINION_HIST.NOTES%TYPE DEFAULT NULL,
      id_prof_created_hist_in IN OPINION_HIST.ID_PROF_CREATED_HIST%TYPE DEFAULT NULL,
      dt_created_hist_in IN OPINION_HIST.DT_CREATED_HIST%TYPE DEFAULT NULL,
      create_user_in IN OPINION_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN OPINION_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN OPINION_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN OPINION_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN OPINION_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN OPINION_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_approval_in IN OPINION_HIST.ID_EPISODE_APPROVAL%TYPE DEFAULT NULL,
      flg_auto_follow_up_in IN OPINION_HIST.FLG_AUTO_FOLLOW_UP%TYPE DEFAULT 'N'
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_opinion_hist_in => id_opinion_hist_in
      ,
      id_opinion_in => id_opinion_in,
      id_episode_in => id_episode_in,
      flg_state_in => flg_state_in,
      desc_problem_in => desc_problem_in,
      id_prof_questions_in => id_prof_questions_in,
      id_prof_questioned_in => id_prof_questioned_in,
      id_speciality_in => id_speciality_in,
      notes_cancel_in => notes_cancel_in,
      dt_problem_tstz_in => dt_problem_tstz_in,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      status_flg_in => status_flg_in,
      status_icon_in => status_icon_in,
      status_msg_in => status_msg_in,
      status_str_in => status_str_in,
      id_management_level_in => id_management_level_in,
      id_episode_answer_in => id_episode_answer_in,
      id_cancel_reason_in => id_cancel_reason_in,
      id_patient_in => id_patient_in,
      dt_last_update_in => dt_last_update_in,
      id_opinion_type_in => id_opinion_type_in,
      id_clinical_service_in => id_clinical_service_in,
      dt_approved_in => dt_approved_in,
      id_prof_approved_in => id_prof_approved_in,
      notes_in => notes_in,
      id_prof_created_hist_in => id_prof_created_hist_in,
      dt_created_hist_in => dt_created_hist_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      id_episode_approval_in => id_episode_approval_in,
      flg_auto_follow_up_in => flg_auto_follow_up_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;

   /*
   START Special logic for handling LOB columns....
   */

   PROCEDURE n_ins_clobs_in_chunks (
      id_opinion_hist_in IN OPINION_HIST.ID_OPINION_HIST%TYPE,
      id_opinion_in IN OPINION_HIST.ID_OPINION%TYPE DEFAULT NULL,
      id_episode_in IN OPINION_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      flg_state_in IN OPINION_HIST.FLG_STATE%TYPE DEFAULT NULL,
      desc_problem_in IN OPINION_HIST.DESC_PROBLEM%TYPE DEFAULT NULL,
      id_prof_questions_in IN OPINION_HIST.ID_PROF_QUESTIONS%TYPE DEFAULT NULL,
      id_prof_questioned_in IN OPINION_HIST.ID_PROF_QUESTIONED%TYPE DEFAULT NULL,
      id_speciality_in IN OPINION_HIST.ID_SPECIALITY%TYPE DEFAULT NULL,
      notes_cancel_in IN OPINION_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_problem_tstz_in IN OPINION_HIST.DT_PROBLEM_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN OPINION_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      status_flg_in IN OPINION_HIST.STATUS_FLG%TYPE DEFAULT NULL,
      status_icon_in IN OPINION_HIST.STATUS_ICON%TYPE DEFAULT NULL,
      status_msg_in IN OPINION_HIST.STATUS_MSG%TYPE DEFAULT NULL,
      status_str_in IN OPINION_HIST.STATUS_STR%TYPE DEFAULT NULL,
      id_management_level_in IN OPINION_HIST.ID_MANAGEMENT_LEVEL%TYPE DEFAULT NULL,
      id_episode_answer_in IN OPINION_HIST.ID_EPISODE_ANSWER%TYPE DEFAULT NULL,
      id_cancel_reason_in IN OPINION_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_patient_in IN OPINION_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      dt_last_update_in IN OPINION_HIST.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      id_opinion_type_in IN OPINION_HIST.ID_OPINION_TYPE%TYPE DEFAULT NULL,
      id_clinical_service_in IN OPINION_HIST.ID_CLINICAL_SERVICE%TYPE DEFAULT NULL,
      dt_approved_in IN OPINION_HIST.DT_APPROVED%TYPE DEFAULT NULL,
      id_prof_approved_in IN OPINION_HIST.ID_PROF_APPROVED%TYPE DEFAULT NULL,
      id_prof_created_hist_in IN OPINION_HIST.ID_PROF_CREATED_HIST%TYPE DEFAULT NULL,
      dt_created_hist_in IN OPINION_HIST.DT_CREATED_HIST%TYPE DEFAULT NULL,
      create_user_in IN OPINION_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN OPINION_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN OPINION_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN OPINION_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN OPINION_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN OPINION_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_approval_in IN OPINION_HIST.ID_EPISODE_APPROVAL%TYPE DEFAULT NULL,
      flg_auto_follow_up_in IN OPINION_HIST.FLG_AUTO_FOLLOW_UP%TYPE DEFAULT 'N',
      handle_error_in IN BOOLEAN := TRUE,
      clob_columns_in IN varchar2_t,
      clob_pieces_in IN  varchar2_t
   ) IS
        l_NOTES clob;
      i                PLS_INTEGER;
      current_column varchar2(30) := '';
   BEGIN
      /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
         variables from pointing to the same temporary CLOB (it creates copies).
         Otherwise, the code could have been written a bit more compactly. */

      FOR i IN clob_columns_in.FIRST .. clob_columns_in.LAST
      LOOP
         /* Even when all clobs are null, DOA must send 1 row so skip it. */
         IF clob_columns_in (i) IS NOT NULL
         THEN
            IF current_column <> clob_columns_in (i) OR current_column IS NULL
            THEN
               current_column := LOWER (clob_columns_in (i));

               CASE current_column
                  WHEN 'notes_in'
                  THEN
                     IF l_NOTES IS NULL
                     THEN
                       DBMS_LOB.createtemporary (
                         l_NOTES, TRUE, DBMS_LOB.CALL);
                     END IF;
               END CASE;
            END IF;

            CASE current_column
              WHEN 'notes_in'
              THEN
                  DBMS_LOB.writeappend (l_NOTES
                                      , LENGTH (clob_pieces_in (i))
                                      , clob_pieces_in (i)
                                       );
            END CASE;
         END IF;
      END LOOP;

      ins (
         id_opinion_hist_in => id_opinion_hist_in,
         id_opinion_in => id_opinion_in,
         id_episode_in => id_episode_in,
         flg_state_in => flg_state_in,
         desc_problem_in => desc_problem_in,
         id_prof_questions_in => id_prof_questions_in,
         id_prof_questioned_in => id_prof_questioned_in,
         id_speciality_in => id_speciality_in,
         notes_cancel_in => notes_cancel_in,
         dt_problem_tstz_in => dt_problem_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         status_flg_in => status_flg_in,
         status_icon_in => status_icon_in,
         status_msg_in => status_msg_in,
         status_str_in => status_str_in,
         id_management_level_in => id_management_level_in,
         id_episode_answer_in => id_episode_answer_in,
         id_cancel_reason_in => id_cancel_reason_in,
         id_patient_in => id_patient_in,
         dt_last_update_in => dt_last_update_in,
         id_opinion_type_in => id_opinion_type_in,
         id_clinical_service_in => id_clinical_service_in,
         dt_approved_in => dt_approved_in,
         id_prof_approved_in => id_prof_approved_in,
         notes_in => l_NOTES,
         id_prof_created_hist_in => id_prof_created_hist_in,
         dt_created_hist_in => dt_created_hist_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_episode_approval_in => id_episode_approval_in,
         flg_auto_follow_up_in => flg_auto_follow_up_in,
         handle_error_in => handle_error_in
         );

   END n_ins_clobs_in_chunks;

   PROCEDURE n_upd_clobs_in_chunks (
      id_opinion_hist_in IN OPINION_HIST.ID_OPINION_HIST%TYPE,
      id_opinion_in IN OPINION_HIST.ID_OPINION%TYPE DEFAULT NULL,
      id_episode_in IN OPINION_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      flg_state_in IN OPINION_HIST.FLG_STATE%TYPE DEFAULT NULL,
      desc_problem_in IN OPINION_HIST.DESC_PROBLEM%TYPE DEFAULT NULL,
      id_prof_questions_in IN OPINION_HIST.ID_PROF_QUESTIONS%TYPE DEFAULT NULL,
      id_prof_questioned_in IN OPINION_HIST.ID_PROF_QUESTIONED%TYPE DEFAULT NULL,
      id_speciality_in IN OPINION_HIST.ID_SPECIALITY%TYPE DEFAULT NULL,
      notes_cancel_in IN OPINION_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_problem_tstz_in IN OPINION_HIST.DT_PROBLEM_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN OPINION_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      status_flg_in IN OPINION_HIST.STATUS_FLG%TYPE DEFAULT NULL,
      status_icon_in IN OPINION_HIST.STATUS_ICON%TYPE DEFAULT NULL,
      status_msg_in IN OPINION_HIST.STATUS_MSG%TYPE DEFAULT NULL,
      status_str_in IN OPINION_HIST.STATUS_STR%TYPE DEFAULT NULL,
      id_management_level_in IN OPINION_HIST.ID_MANAGEMENT_LEVEL%TYPE DEFAULT NULL,
      id_episode_answer_in IN OPINION_HIST.ID_EPISODE_ANSWER%TYPE DEFAULT NULL,
      id_cancel_reason_in IN OPINION_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_patient_in IN OPINION_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      dt_last_update_in IN OPINION_HIST.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      id_opinion_type_in IN OPINION_HIST.ID_OPINION_TYPE%TYPE DEFAULT NULL,
      id_clinical_service_in IN OPINION_HIST.ID_CLINICAL_SERVICE%TYPE DEFAULT NULL,
      dt_approved_in IN OPINION_HIST.DT_APPROVED%TYPE DEFAULT NULL,
      id_prof_approved_in IN OPINION_HIST.ID_PROF_APPROVED%TYPE DEFAULT NULL,
      id_prof_created_hist_in IN OPINION_HIST.ID_PROF_CREATED_HIST%TYPE DEFAULT NULL,
      dt_created_hist_in IN OPINION_HIST.DT_CREATED_HIST%TYPE DEFAULT NULL,
      create_user_in IN OPINION_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN OPINION_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN OPINION_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN OPINION_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN OPINION_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN OPINION_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_approval_in IN OPINION_HIST.ID_EPISODE_APPROVAL%TYPE DEFAULT NULL,
      flg_auto_follow_up_in IN OPINION_HIST.FLG_AUTO_FOLLOW_UP%TYPE DEFAULT 'N',
      ignore_if_null_in IN BOOLEAN := TRUE,
      handle_error_in IN BOOLEAN := TRUE,
      clob_columns_in IN varchar2_t,
      clob_pieces_in IN  varchar2_t
      )
   IS
       l_NOTES clob;
      i                PLS_INTEGER;
      current_column varchar2(30) := '';
      l_rows PLS_INTEGER;
   BEGIN

      /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
         variables from pointing to the same temporary CLOB (it creates copies).
         Otherwise, the code could have been written a bit more compactly. */

      FOR i IN clob_columns_in.FIRST .. clob_columns_in.LAST
      LOOP
         /* Even when all clobs are null, DOA must send 1 row so skip it. */
         IF clob_columns_in (i) IS NOT NULL
         THEN
            IF current_column <> clob_columns_in (i) OR current_column IS NULL
            THEN
               current_column := LOWER (clob_columns_in (i));

               CASE current_column
                  WHEN 'notes_in'
                  THEN
                    IF l_NOTES IS NULL
                    THEN
                      DBMS_LOB.createtemporary (
                         l_NOTES, TRUE, DBMS_LOB.CALL);
                    END IF;
               END CASE;
            END IF;

            CASE current_column
              WHEN 'notes_in'
              THEN
                  DBMS_LOB.writeappend (l_NOTES
                                      , LENGTH (clob_pieces_in (i))
                                      , clob_pieces_in (i)
                                       );
            END CASE;
         END IF;
      END LOOP;

      upd (
         id_opinion_hist_in => id_opinion_hist_in,
         id_opinion_in => id_opinion_in,
         id_episode_in => id_episode_in,
         flg_state_in => flg_state_in,
         desc_problem_in => desc_problem_in,
         id_prof_questions_in => id_prof_questions_in,
         id_prof_questioned_in => id_prof_questioned_in,
         id_speciality_in => id_speciality_in,
         notes_cancel_in => notes_cancel_in,
         dt_problem_tstz_in => dt_problem_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         status_flg_in => status_flg_in,
         status_icon_in => status_icon_in,
         status_msg_in => status_msg_in,
         status_str_in => status_str_in,
         id_management_level_in => id_management_level_in,
         id_episode_answer_in => id_episode_answer_in,
         id_cancel_reason_in => id_cancel_reason_in,
         id_patient_in => id_patient_in,
         dt_last_update_in => dt_last_update_in,
         id_opinion_type_in => id_opinion_type_in,
         id_clinical_service_in => id_clinical_service_in,
         dt_approved_in => dt_approved_in,
         id_prof_approved_in => id_prof_approved_in,
         notes_in => l_NOTES,
         id_prof_created_hist_in => id_prof_created_hist_in,
         dt_created_hist_in => dt_created_hist_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_episode_approval_in => id_episode_approval_in,
         flg_auto_follow_up_in => flg_auto_follow_up_in,
         handle_error_in => handle_error_in
         );
   END n_upd_clobs_in_chunks;

   PROCEDURE n_upd_ins_clobs_in_chunks (
      id_opinion_hist_in IN OPINION_HIST.ID_OPINION_HIST%TYPE,
      id_opinion_in IN OPINION_HIST.ID_OPINION%TYPE DEFAULT NULL,
      id_episode_in IN OPINION_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      flg_state_in IN OPINION_HIST.FLG_STATE%TYPE DEFAULT NULL,
      desc_problem_in IN OPINION_HIST.DESC_PROBLEM%TYPE DEFAULT NULL,
      id_prof_questions_in IN OPINION_HIST.ID_PROF_QUESTIONS%TYPE DEFAULT NULL,
      id_prof_questioned_in IN OPINION_HIST.ID_PROF_QUESTIONED%TYPE DEFAULT NULL,
      id_speciality_in IN OPINION_HIST.ID_SPECIALITY%TYPE DEFAULT NULL,
      notes_cancel_in IN OPINION_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_problem_tstz_in IN OPINION_HIST.DT_PROBLEM_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN OPINION_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      status_flg_in IN OPINION_HIST.STATUS_FLG%TYPE DEFAULT NULL,
      status_icon_in IN OPINION_HIST.STATUS_ICON%TYPE DEFAULT NULL,
      status_msg_in IN OPINION_HIST.STATUS_MSG%TYPE DEFAULT NULL,
      status_str_in IN OPINION_HIST.STATUS_STR%TYPE DEFAULT NULL,
      id_management_level_in IN OPINION_HIST.ID_MANAGEMENT_LEVEL%TYPE DEFAULT NULL,
      id_episode_answer_in IN OPINION_HIST.ID_EPISODE_ANSWER%TYPE DEFAULT NULL,
      id_cancel_reason_in IN OPINION_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_patient_in IN OPINION_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      dt_last_update_in IN OPINION_HIST.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      id_opinion_type_in IN OPINION_HIST.ID_OPINION_TYPE%TYPE DEFAULT NULL,
      id_clinical_service_in IN OPINION_HIST.ID_CLINICAL_SERVICE%TYPE DEFAULT NULL,
      dt_approved_in IN OPINION_HIST.DT_APPROVED%TYPE DEFAULT NULL,
      id_prof_approved_in IN OPINION_HIST.ID_PROF_APPROVED%TYPE DEFAULT NULL,
      id_prof_created_hist_in IN OPINION_HIST.ID_PROF_CREATED_HIST%TYPE DEFAULT NULL,
      dt_created_hist_in IN OPINION_HIST.DT_CREATED_HIST%TYPE DEFAULT NULL,
      create_user_in IN OPINION_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN OPINION_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN OPINION_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN OPINION_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN OPINION_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN OPINION_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_approval_in IN OPINION_HIST.ID_EPISODE_APPROVAL%TYPE DEFAULT NULL,
      flg_auto_follow_up_in IN OPINION_HIST.FLG_AUTO_FOLLOW_UP%TYPE DEFAULT 'N',
      ignore_if_null_in IN BOOLEAN DEFAULT TRUE,
      handle_error_in IN BOOLEAN DEFAULT TRUE,
      clob_columns_in IN varchar2_t,
      clob_pieces_in IN  varchar2_t
      )
   IS
   BEGIN
      n_upd_clobs_in_chunks (
         id_opinion_hist_in => id_opinion_hist_in,
         id_opinion_in => id_opinion_in,
         id_episode_in => id_episode_in,
         flg_state_in => flg_state_in,
         desc_problem_in => desc_problem_in,
         id_prof_questions_in => id_prof_questions_in,
         id_prof_questioned_in => id_prof_questioned_in,
         id_speciality_in => id_speciality_in,
         notes_cancel_in => notes_cancel_in,
         dt_problem_tstz_in => dt_problem_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         status_flg_in => status_flg_in,
         status_icon_in => status_icon_in,
         status_msg_in => status_msg_in,
         status_str_in => status_str_in,
         id_management_level_in => id_management_level_in,
         id_episode_answer_in => id_episode_answer_in,
         id_cancel_reason_in => id_cancel_reason_in,
         id_patient_in => id_patient_in,
         dt_last_update_in => dt_last_update_in,
         id_opinion_type_in => id_opinion_type_in,
         id_clinical_service_in => id_clinical_service_in,
         dt_approved_in => dt_approved_in,
         id_prof_approved_in => id_prof_approved_in,
         id_prof_created_hist_in => id_prof_created_hist_in,
         dt_created_hist_in => dt_created_hist_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_episode_approval_in => id_episode_approval_in,
         flg_auto_follow_up_in => flg_auto_follow_up_in,
         clob_columns_in => clob_columns_in ,
         clob_pieces_in => clob_pieces_in ,
         ignore_if_null_in => ignore_if_null_in,
         handle_error_in => handle_error_in
       );

      IF SQL%ROWCOUNT = 0
      THEN
         n_ins_clobs_in_chunks (
            id_opinion_hist_in => id_opinion_hist_in,
            id_opinion_in => id_opinion_in,
            id_episode_in => id_episode_in,
            flg_state_in => flg_state_in,
            desc_problem_in => desc_problem_in,
            id_prof_questions_in => id_prof_questions_in,
            id_prof_questioned_in => id_prof_questioned_in,
            id_speciality_in => id_speciality_in,
            notes_cancel_in => notes_cancel_in,
            dt_problem_tstz_in => dt_problem_tstz_in,
            dt_cancel_tstz_in => dt_cancel_tstz_in,
            status_flg_in => status_flg_in,
            status_icon_in => status_icon_in,
            status_msg_in => status_msg_in,
            status_str_in => status_str_in,
            id_management_level_in => id_management_level_in,
            id_episode_answer_in => id_episode_answer_in,
            id_cancel_reason_in => id_cancel_reason_in,
            id_patient_in => id_patient_in,
            dt_last_update_in => dt_last_update_in,
            id_opinion_type_in => id_opinion_type_in,
            id_clinical_service_in => id_clinical_service_in,
            dt_approved_in => dt_approved_in,
            id_prof_approved_in => id_prof_approved_in,
            id_prof_created_hist_in => id_prof_created_hist_in,
            dt_created_hist_in => dt_created_hist_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            id_episode_approval_in => id_episode_approval_in,
            flg_auto_follow_up_in => flg_auto_follow_up_in,
            clob_columns_in => clob_columns_in ,
            clob_pieces_in => clob_pieces_in ,
            handle_error_in => handle_error_in
         );
      END IF;
   END n_upd_ins_clobs_in_chunks;

   /*
   END Special logic for handling LOB columns.
   */

   PROCEDURE ins (
      rec_in IN OPINION_HIST%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec OPINION_HIST%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_OPINION_HIST := next_key (sequence_in);
      END IF;
      ins (
         id_opinion_hist_in => l_rec.ID_OPINION_HIST
         ,
         id_opinion_in => l_rec.ID_OPINION,
         id_episode_in => l_rec.ID_EPISODE,
         flg_state_in => l_rec.FLG_STATE,
         desc_problem_in => l_rec.DESC_PROBLEM,
         id_prof_questions_in => l_rec.ID_PROF_QUESTIONS,
         id_prof_questioned_in => l_rec.ID_PROF_QUESTIONED,
         id_speciality_in => l_rec.ID_SPECIALITY,
         notes_cancel_in => l_rec.NOTES_CANCEL,
         dt_problem_tstz_in => l_rec.DT_PROBLEM_TSTZ,
         dt_cancel_tstz_in => l_rec.DT_CANCEL_TSTZ,
         status_flg_in => l_rec.STATUS_FLG,
         status_icon_in => l_rec.STATUS_ICON,
         status_msg_in => l_rec.STATUS_MSG,
         status_str_in => l_rec.STATUS_STR,
         id_management_level_in => l_rec.ID_MANAGEMENT_LEVEL,
         id_episode_answer_in => l_rec.ID_EPISODE_ANSWER,
         id_cancel_reason_in => l_rec.ID_CANCEL_REASON,
         id_patient_in => l_rec.ID_PATIENT,
         dt_last_update_in => l_rec.DT_LAST_UPDATE,
         id_opinion_type_in => l_rec.ID_OPINION_TYPE,
         id_clinical_service_in => l_rec.ID_CLINICAL_SERVICE,
         dt_approved_in => l_rec.DT_APPROVED,
         id_prof_approved_in => l_rec.ID_PROF_APPROVED,
         notes_in => l_rec.NOTES,
         id_prof_created_hist_in => l_rec.ID_PROF_CREATED_HIST,
         dt_created_hist_in => l_rec.DT_CREATED_HIST,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION,
         id_episode_approval_in => l_rec.ID_EPISODE_APPROVAL,
         flg_auto_follow_up_in => l_rec.FLG_AUTO_FOLLOW_UP
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN OPINION_HIST%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN OPINION_HIST.ID_OPINION_HIST%TYPE

   IS
     retval OPINION_HIST.ID_OPINION_HIST%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_OPINION_HIST.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_OPINION_HIST')
           );
   END next_key;

   PROCEDURE ins (
      id_opinion_in IN OPINION_HIST.ID_OPINION%TYPE DEFAULT NULL,
      id_episode_in IN OPINION_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      flg_state_in IN OPINION_HIST.FLG_STATE%TYPE DEFAULT NULL,
      desc_problem_in IN OPINION_HIST.DESC_PROBLEM%TYPE DEFAULT NULL,
      id_prof_questions_in IN OPINION_HIST.ID_PROF_QUESTIONS%TYPE DEFAULT NULL,
      id_prof_questioned_in IN OPINION_HIST.ID_PROF_QUESTIONED%TYPE DEFAULT NULL,
      id_speciality_in IN OPINION_HIST.ID_SPECIALITY%TYPE DEFAULT NULL,
      notes_cancel_in IN OPINION_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_problem_tstz_in IN OPINION_HIST.DT_PROBLEM_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN OPINION_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      status_flg_in IN OPINION_HIST.STATUS_FLG%TYPE DEFAULT NULL,
      status_icon_in IN OPINION_HIST.STATUS_ICON%TYPE DEFAULT NULL,
      status_msg_in IN OPINION_HIST.STATUS_MSG%TYPE DEFAULT NULL,
      status_str_in IN OPINION_HIST.STATUS_STR%TYPE DEFAULT NULL,
      id_management_level_in IN OPINION_HIST.ID_MANAGEMENT_LEVEL%TYPE DEFAULT NULL,
      id_episode_answer_in IN OPINION_HIST.ID_EPISODE_ANSWER%TYPE DEFAULT NULL,
      id_cancel_reason_in IN OPINION_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_patient_in IN OPINION_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      dt_last_update_in IN OPINION_HIST.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      id_opinion_type_in IN OPINION_HIST.ID_OPINION_TYPE%TYPE DEFAULT NULL,
      id_clinical_service_in IN OPINION_HIST.ID_CLINICAL_SERVICE%TYPE DEFAULT NULL,
      dt_approved_in IN OPINION_HIST.DT_APPROVED%TYPE DEFAULT NULL,
      id_prof_approved_in IN OPINION_HIST.ID_PROF_APPROVED%TYPE DEFAULT NULL,
      notes_in IN OPINION_HIST.NOTES%TYPE DEFAULT NULL,
      id_prof_created_hist_in IN OPINION_HIST.ID_PROF_CREATED_HIST%TYPE DEFAULT NULL,
      dt_created_hist_in IN OPINION_HIST.DT_CREATED_HIST%TYPE DEFAULT NULL,
      create_user_in IN OPINION_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN OPINION_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN OPINION_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN OPINION_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN OPINION_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN OPINION_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_approval_in IN OPINION_HIST.ID_EPISODE_APPROVAL%TYPE DEFAULT NULL,
      flg_auto_follow_up_in IN OPINION_HIST.FLG_AUTO_FOLLOW_UP%TYPE DEFAULT 'N',
      id_opinion_hist_out IN OUT OPINION_HIST.ID_OPINION_HIST%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky OPINION_HIST.ID_OPINION_HIST%TYPE := next_key;
   BEGIN
      ins (
         id_opinion_hist_in => l_pky,
         id_opinion_in => id_opinion_in,
         id_episode_in => id_episode_in,
         flg_state_in => flg_state_in,
         desc_problem_in => desc_problem_in,
         id_prof_questions_in => id_prof_questions_in,
         id_prof_questioned_in => id_prof_questioned_in,
         id_speciality_in => id_speciality_in,
         notes_cancel_in => notes_cancel_in,
         dt_problem_tstz_in => dt_problem_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         status_flg_in => status_flg_in,
         status_icon_in => status_icon_in,
         status_msg_in => status_msg_in,
         status_str_in => status_str_in,
         id_management_level_in => id_management_level_in,
         id_episode_answer_in => id_episode_answer_in,
         id_cancel_reason_in => id_cancel_reason_in,
         id_patient_in => id_patient_in,
         dt_last_update_in => dt_last_update_in,
         id_opinion_type_in => id_opinion_type_in,
         id_clinical_service_in => id_clinical_service_in,
         dt_approved_in => dt_approved_in,
         id_prof_approved_in => id_prof_approved_in,
         notes_in => notes_in,
         id_prof_created_hist_in => id_prof_created_hist_in,
         dt_created_hist_in => dt_created_hist_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_episode_approval_in => id_episode_approval_in,
         flg_auto_follow_up_in => flg_auto_follow_up_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_opinion_hist_out := l_pky;
   END ins;

   PROCEDURE ins (
      id_opinion_in IN OPINION_HIST.ID_OPINION%TYPE DEFAULT NULL,
      id_episode_in IN OPINION_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      flg_state_in IN OPINION_HIST.FLG_STATE%TYPE DEFAULT NULL,
      desc_problem_in IN OPINION_HIST.DESC_PROBLEM%TYPE DEFAULT NULL,
      id_prof_questions_in IN OPINION_HIST.ID_PROF_QUESTIONS%TYPE DEFAULT NULL,
      id_prof_questioned_in IN OPINION_HIST.ID_PROF_QUESTIONED%TYPE DEFAULT NULL,
      id_speciality_in IN OPINION_HIST.ID_SPECIALITY%TYPE DEFAULT NULL,
      notes_cancel_in IN OPINION_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_problem_tstz_in IN OPINION_HIST.DT_PROBLEM_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN OPINION_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      status_flg_in IN OPINION_HIST.STATUS_FLG%TYPE DEFAULT NULL,
      status_icon_in IN OPINION_HIST.STATUS_ICON%TYPE DEFAULT NULL,
      status_msg_in IN OPINION_HIST.STATUS_MSG%TYPE DEFAULT NULL,
      status_str_in IN OPINION_HIST.STATUS_STR%TYPE DEFAULT NULL,
      id_management_level_in IN OPINION_HIST.ID_MANAGEMENT_LEVEL%TYPE DEFAULT NULL,
      id_episode_answer_in IN OPINION_HIST.ID_EPISODE_ANSWER%TYPE DEFAULT NULL,
      id_cancel_reason_in IN OPINION_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_patient_in IN OPINION_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      dt_last_update_in IN OPINION_HIST.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      id_opinion_type_in IN OPINION_HIST.ID_OPINION_TYPE%TYPE DEFAULT NULL,
      id_clinical_service_in IN OPINION_HIST.ID_CLINICAL_SERVICE%TYPE DEFAULT NULL,
      dt_approved_in IN OPINION_HIST.DT_APPROVED%TYPE DEFAULT NULL,
      id_prof_approved_in IN OPINION_HIST.ID_PROF_APPROVED%TYPE DEFAULT NULL,
      notes_in IN OPINION_HIST.NOTES%TYPE DEFAULT NULL,
      id_prof_created_hist_in IN OPINION_HIST.ID_PROF_CREATED_HIST%TYPE DEFAULT NULL,
      dt_created_hist_in IN OPINION_HIST.DT_CREATED_HIST%TYPE DEFAULT NULL,
      create_user_in IN OPINION_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN OPINION_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN OPINION_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN OPINION_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN OPINION_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN OPINION_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_approval_in IN OPINION_HIST.ID_EPISODE_APPROVAL%TYPE DEFAULT NULL,
      flg_auto_follow_up_in IN OPINION_HIST.FLG_AUTO_FOLLOW_UP%TYPE DEFAULT 'N',
      id_opinion_hist_out IN OUT OPINION_HIST.ID_OPINION_HIST%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      id_opinion_in => id_opinion_in,
      id_episode_in => id_episode_in,
      flg_state_in => flg_state_in,
      desc_problem_in => desc_problem_in,
      id_prof_questions_in => id_prof_questions_in,
      id_prof_questioned_in => id_prof_questioned_in,
      id_speciality_in => id_speciality_in,
      notes_cancel_in => notes_cancel_in,
      dt_problem_tstz_in => dt_problem_tstz_in,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      status_flg_in => status_flg_in,
      status_icon_in => status_icon_in,
      status_msg_in => status_msg_in,
      status_str_in => status_str_in,
      id_management_level_in => id_management_level_in,
      id_episode_answer_in => id_episode_answer_in,
      id_cancel_reason_in => id_cancel_reason_in,
      id_patient_in => id_patient_in,
      dt_last_update_in => dt_last_update_in,
      id_opinion_type_in => id_opinion_type_in,
      id_clinical_service_in => id_clinical_service_in,
      dt_approved_in => dt_approved_in,
      id_prof_approved_in => id_prof_approved_in,
      notes_in => notes_in,
      id_prof_created_hist_in => id_prof_created_hist_in,
      dt_created_hist_in => dt_created_hist_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      id_episode_approval_in => id_episode_approval_in,
      flg_auto_follow_up_in => flg_auto_follow_up_in,
      id_opinion_hist_out => id_opinion_hist_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      id_opinion_in IN OPINION_HIST.ID_OPINION%TYPE DEFAULT NULL,
      id_episode_in IN OPINION_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      flg_state_in IN OPINION_HIST.FLG_STATE%TYPE DEFAULT NULL,
      desc_problem_in IN OPINION_HIST.DESC_PROBLEM%TYPE DEFAULT NULL,
      id_prof_questions_in IN OPINION_HIST.ID_PROF_QUESTIONS%TYPE DEFAULT NULL,
      id_prof_questioned_in IN OPINION_HIST.ID_PROF_QUESTIONED%TYPE DEFAULT NULL,
      id_speciality_in IN OPINION_HIST.ID_SPECIALITY%TYPE DEFAULT NULL,
      notes_cancel_in IN OPINION_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_problem_tstz_in IN OPINION_HIST.DT_PROBLEM_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN OPINION_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      status_flg_in IN OPINION_HIST.STATUS_FLG%TYPE DEFAULT NULL,
      status_icon_in IN OPINION_HIST.STATUS_ICON%TYPE DEFAULT NULL,
      status_msg_in IN OPINION_HIST.STATUS_MSG%TYPE DEFAULT NULL,
      status_str_in IN OPINION_HIST.STATUS_STR%TYPE DEFAULT NULL,
      id_management_level_in IN OPINION_HIST.ID_MANAGEMENT_LEVEL%TYPE DEFAULT NULL,
      id_episode_answer_in IN OPINION_HIST.ID_EPISODE_ANSWER%TYPE DEFAULT NULL,
      id_cancel_reason_in IN OPINION_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_patient_in IN OPINION_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      dt_last_update_in IN OPINION_HIST.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      id_opinion_type_in IN OPINION_HIST.ID_OPINION_TYPE%TYPE DEFAULT NULL,
      id_clinical_service_in IN OPINION_HIST.ID_CLINICAL_SERVICE%TYPE DEFAULT NULL,
      dt_approved_in IN OPINION_HIST.DT_APPROVED%TYPE DEFAULT NULL,
      id_prof_approved_in IN OPINION_HIST.ID_PROF_APPROVED%TYPE DEFAULT NULL,
      notes_in IN OPINION_HIST.NOTES%TYPE DEFAULT NULL,
      id_prof_created_hist_in IN OPINION_HIST.ID_PROF_CREATED_HIST%TYPE DEFAULT NULL,
      dt_created_hist_in IN OPINION_HIST.DT_CREATED_HIST%TYPE DEFAULT NULL,
      create_user_in IN OPINION_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN OPINION_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN OPINION_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN OPINION_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN OPINION_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN OPINION_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_approval_in IN OPINION_HIST.ID_EPISODE_APPROVAL%TYPE DEFAULT NULL,
      flg_auto_follow_up_in IN OPINION_HIST.FLG_AUTO_FOLLOW_UP%TYPE DEFAULT 'N'
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         OPINION_HIST.ID_OPINION_HIST%TYPE
   IS
        l_pky OPINION_HIST.ID_OPINION_HIST%TYPE := next_key;
   BEGIN
      ins (
         id_opinion_hist_in => l_pky,
         id_opinion_in => id_opinion_in,
         id_episode_in => id_episode_in,
         flg_state_in => flg_state_in,
         desc_problem_in => desc_problem_in,
         id_prof_questions_in => id_prof_questions_in,
         id_prof_questioned_in => id_prof_questioned_in,
         id_speciality_in => id_speciality_in,
         notes_cancel_in => notes_cancel_in,
         dt_problem_tstz_in => dt_problem_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         status_flg_in => status_flg_in,
         status_icon_in => status_icon_in,
         status_msg_in => status_msg_in,
         status_str_in => status_str_in,
         id_management_level_in => id_management_level_in,
         id_episode_answer_in => id_episode_answer_in,
         id_cancel_reason_in => id_cancel_reason_in,
         id_patient_in => id_patient_in,
         dt_last_update_in => dt_last_update_in,
         id_opinion_type_in => id_opinion_type_in,
         id_clinical_service_in => id_clinical_service_in,
         dt_approved_in => dt_approved_in,
         id_prof_approved_in => id_prof_approved_in,
         notes_in => notes_in,
         id_prof_created_hist_in => id_prof_created_hist_in,
         dt_created_hist_in => dt_created_hist_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_episode_approval_in => id_episode_approval_in,
         flg_auto_follow_up_in => flg_auto_follow_up_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      id_opinion_in IN OPINION_HIST.ID_OPINION%TYPE DEFAULT NULL,
      id_episode_in IN OPINION_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      flg_state_in IN OPINION_HIST.FLG_STATE%TYPE DEFAULT NULL,
      desc_problem_in IN OPINION_HIST.DESC_PROBLEM%TYPE DEFAULT NULL,
      id_prof_questions_in IN OPINION_HIST.ID_PROF_QUESTIONS%TYPE DEFAULT NULL,
      id_prof_questioned_in IN OPINION_HIST.ID_PROF_QUESTIONED%TYPE DEFAULT NULL,
      id_speciality_in IN OPINION_HIST.ID_SPECIALITY%TYPE DEFAULT NULL,
      notes_cancel_in IN OPINION_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_problem_tstz_in IN OPINION_HIST.DT_PROBLEM_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN OPINION_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      status_flg_in IN OPINION_HIST.STATUS_FLG%TYPE DEFAULT NULL,
      status_icon_in IN OPINION_HIST.STATUS_ICON%TYPE DEFAULT NULL,
      status_msg_in IN OPINION_HIST.STATUS_MSG%TYPE DEFAULT NULL,
      status_str_in IN OPINION_HIST.STATUS_STR%TYPE DEFAULT NULL,
      id_management_level_in IN OPINION_HIST.ID_MANAGEMENT_LEVEL%TYPE DEFAULT NULL,
      id_episode_answer_in IN OPINION_HIST.ID_EPISODE_ANSWER%TYPE DEFAULT NULL,
      id_cancel_reason_in IN OPINION_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_patient_in IN OPINION_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      dt_last_update_in IN OPINION_HIST.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      id_opinion_type_in IN OPINION_HIST.ID_OPINION_TYPE%TYPE DEFAULT NULL,
      id_clinical_service_in IN OPINION_HIST.ID_CLINICAL_SERVICE%TYPE DEFAULT NULL,
      dt_approved_in IN OPINION_HIST.DT_APPROVED%TYPE DEFAULT NULL,
      id_prof_approved_in IN OPINION_HIST.ID_PROF_APPROVED%TYPE DEFAULT NULL,
      notes_in IN OPINION_HIST.NOTES%TYPE DEFAULT NULL,
      id_prof_created_hist_in IN OPINION_HIST.ID_PROF_CREATED_HIST%TYPE DEFAULT NULL,
      dt_created_hist_in IN OPINION_HIST.DT_CREATED_HIST%TYPE DEFAULT NULL,
      create_user_in IN OPINION_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN OPINION_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN OPINION_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN OPINION_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN OPINION_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN OPINION_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_approval_in IN OPINION_HIST.ID_EPISODE_APPROVAL%TYPE DEFAULT NULL,
      flg_auto_follow_up_in IN OPINION_HIST.FLG_AUTO_FOLLOW_UP%TYPE DEFAULT 'N'
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         OPINION_HIST.ID_OPINION_HIST%TYPE
   IS
        l_pky OPINION_HIST.ID_OPINION_HIST%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_opinion_hist_in => l_pky,
         id_opinion_in => id_opinion_in,
         id_episode_in => id_episode_in,
         flg_state_in => flg_state_in,
         desc_problem_in => desc_problem_in,
         id_prof_questions_in => id_prof_questions_in,
         id_prof_questioned_in => id_prof_questioned_in,
         id_speciality_in => id_speciality_in,
         notes_cancel_in => notes_cancel_in,
         dt_problem_tstz_in => dt_problem_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         status_flg_in => status_flg_in,
         status_icon_in => status_icon_in,
         status_msg_in => status_msg_in,
         status_str_in => status_str_in,
         id_management_level_in => id_management_level_in,
         id_episode_answer_in => id_episode_answer_in,
         id_cancel_reason_in => id_cancel_reason_in,
         id_patient_in => id_patient_in,
         dt_last_update_in => dt_last_update_in,
         id_opinion_type_in => id_opinion_type_in,
         id_clinical_service_in => id_clinical_service_in,
         dt_approved_in => dt_approved_in,
         id_prof_approved_in => id_prof_approved_in,
         notes_in => notes_in,
         id_prof_created_hist_in => id_prof_created_hist_in,
         dt_created_hist_in => dt_created_hist_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_episode_approval_in => id_episode_approval_in,
         flg_auto_follow_up_in => flg_auto_follow_up_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      id_opinion_in IN OPINION_HIST.ID_OPINION%TYPE DEFAULT NULL,
      id_episode_in IN OPINION_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      flg_state_in IN OPINION_HIST.FLG_STATE%TYPE DEFAULT NULL,
      desc_problem_in IN OPINION_HIST.DESC_PROBLEM%TYPE DEFAULT NULL,
      id_prof_questions_in IN OPINION_HIST.ID_PROF_QUESTIONS%TYPE DEFAULT NULL,
      id_prof_questioned_in IN OPINION_HIST.ID_PROF_QUESTIONED%TYPE DEFAULT NULL,
      id_speciality_in IN OPINION_HIST.ID_SPECIALITY%TYPE DEFAULT NULL,
      notes_cancel_in IN OPINION_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_problem_tstz_in IN OPINION_HIST.DT_PROBLEM_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN OPINION_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      status_flg_in IN OPINION_HIST.STATUS_FLG%TYPE DEFAULT NULL,
      status_icon_in IN OPINION_HIST.STATUS_ICON%TYPE DEFAULT NULL,
      status_msg_in IN OPINION_HIST.STATUS_MSG%TYPE DEFAULT NULL,
      status_str_in IN OPINION_HIST.STATUS_STR%TYPE DEFAULT NULL,
      id_management_level_in IN OPINION_HIST.ID_MANAGEMENT_LEVEL%TYPE DEFAULT NULL,
      id_episode_answer_in IN OPINION_HIST.ID_EPISODE_ANSWER%TYPE DEFAULT NULL,
      id_cancel_reason_in IN OPINION_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_patient_in IN OPINION_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      dt_last_update_in IN OPINION_HIST.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      id_opinion_type_in IN OPINION_HIST.ID_OPINION_TYPE%TYPE DEFAULT NULL,
      id_clinical_service_in IN OPINION_HIST.ID_CLINICAL_SERVICE%TYPE DEFAULT NULL,
      dt_approved_in IN OPINION_HIST.DT_APPROVED%TYPE DEFAULT NULL,
      id_prof_approved_in IN OPINION_HIST.ID_PROF_APPROVED%TYPE DEFAULT NULL,
      notes_in IN OPINION_HIST.NOTES%TYPE DEFAULT NULL,
      id_prof_created_hist_in IN OPINION_HIST.ID_PROF_CREATED_HIST%TYPE DEFAULT NULL,
      dt_created_hist_in IN OPINION_HIST.DT_CREATED_HIST%TYPE DEFAULT NULL,
      create_user_in IN OPINION_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN OPINION_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN OPINION_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN OPINION_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN OPINION_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN OPINION_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_approval_in IN OPINION_HIST.ID_EPISODE_APPROVAL%TYPE DEFAULT NULL,
      flg_auto_follow_up_in IN OPINION_HIST.FLG_AUTO_FOLLOW_UP%TYPE DEFAULT 'N'
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky OPINION_HIST.ID_OPINION_HIST%TYPE := next_key;
   BEGIN
      ins (
         id_opinion_hist_in => l_pky,
         id_opinion_in => id_opinion_in,
         id_episode_in => id_episode_in,
         flg_state_in => flg_state_in,
         desc_problem_in => desc_problem_in,
         id_prof_questions_in => id_prof_questions_in,
         id_prof_questioned_in => id_prof_questioned_in,
         id_speciality_in => id_speciality_in,
         notes_cancel_in => notes_cancel_in,
         dt_problem_tstz_in => dt_problem_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         status_flg_in => status_flg_in,
         status_icon_in => status_icon_in,
         status_msg_in => status_msg_in,
         status_str_in => status_str_in,
         id_management_level_in => id_management_level_in,
         id_episode_answer_in => id_episode_answer_in,
         id_cancel_reason_in => id_cancel_reason_in,
         id_patient_in => id_patient_in,
         dt_last_update_in => dt_last_update_in,
         id_opinion_type_in => id_opinion_type_in,
         id_clinical_service_in => id_clinical_service_in,
         dt_approved_in => dt_approved_in,
         id_prof_approved_in => id_prof_approved_in,
         notes_in => notes_in,
         id_prof_created_hist_in => id_prof_created_hist_in,
         dt_created_hist_in => dt_created_hist_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_episode_approval_in => id_episode_approval_in,
         flg_auto_follow_up_in => flg_auto_follow_up_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      id_opinion_in IN OPINION_HIST.ID_OPINION%TYPE DEFAULT NULL,
      id_episode_in IN OPINION_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      flg_state_in IN OPINION_HIST.FLG_STATE%TYPE DEFAULT NULL,
      desc_problem_in IN OPINION_HIST.DESC_PROBLEM%TYPE DEFAULT NULL,
      id_prof_questions_in IN OPINION_HIST.ID_PROF_QUESTIONS%TYPE DEFAULT NULL,
      id_prof_questioned_in IN OPINION_HIST.ID_PROF_QUESTIONED%TYPE DEFAULT NULL,
      id_speciality_in IN OPINION_HIST.ID_SPECIALITY%TYPE DEFAULT NULL,
      notes_cancel_in IN OPINION_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_problem_tstz_in IN OPINION_HIST.DT_PROBLEM_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN OPINION_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      status_flg_in IN OPINION_HIST.STATUS_FLG%TYPE DEFAULT NULL,
      status_icon_in IN OPINION_HIST.STATUS_ICON%TYPE DEFAULT NULL,
      status_msg_in IN OPINION_HIST.STATUS_MSG%TYPE DEFAULT NULL,
      status_str_in IN OPINION_HIST.STATUS_STR%TYPE DEFAULT NULL,
      id_management_level_in IN OPINION_HIST.ID_MANAGEMENT_LEVEL%TYPE DEFAULT NULL,
      id_episode_answer_in IN OPINION_HIST.ID_EPISODE_ANSWER%TYPE DEFAULT NULL,
      id_cancel_reason_in IN OPINION_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_patient_in IN OPINION_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      dt_last_update_in IN OPINION_HIST.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      id_opinion_type_in IN OPINION_HIST.ID_OPINION_TYPE%TYPE DEFAULT NULL,
      id_clinical_service_in IN OPINION_HIST.ID_CLINICAL_SERVICE%TYPE DEFAULT NULL,
      dt_approved_in IN OPINION_HIST.DT_APPROVED%TYPE DEFAULT NULL,
      id_prof_approved_in IN OPINION_HIST.ID_PROF_APPROVED%TYPE DEFAULT NULL,
      notes_in IN OPINION_HIST.NOTES%TYPE DEFAULT NULL,
      id_prof_created_hist_in IN OPINION_HIST.ID_PROF_CREATED_HIST%TYPE DEFAULT NULL,
      dt_created_hist_in IN OPINION_HIST.DT_CREATED_HIST%TYPE DEFAULT NULL,
      create_user_in IN OPINION_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN OPINION_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN OPINION_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN OPINION_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN OPINION_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN OPINION_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_approval_in IN OPINION_HIST.ID_EPISODE_APPROVAL%TYPE DEFAULT NULL,
      flg_auto_follow_up_in IN OPINION_HIST.FLG_AUTO_FOLLOW_UP%TYPE DEFAULT 'N'
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky OPINION_HIST.ID_OPINION_HIST%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_opinion_hist_in => l_pky,
         id_opinion_in => id_opinion_in,
         id_episode_in => id_episode_in,
         flg_state_in => flg_state_in,
         desc_problem_in => desc_problem_in,
         id_prof_questions_in => id_prof_questions_in,
         id_prof_questioned_in => id_prof_questioned_in,
         id_speciality_in => id_speciality_in,
         notes_cancel_in => notes_cancel_in,
         dt_problem_tstz_in => dt_problem_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         status_flg_in => status_flg_in,
         status_icon_in => status_icon_in,
         status_msg_in => status_msg_in,
         status_str_in => status_str_in,
         id_management_level_in => id_management_level_in,
         id_episode_answer_in => id_episode_answer_in,
         id_cancel_reason_in => id_cancel_reason_in,
         id_patient_in => id_patient_in,
         dt_last_update_in => dt_last_update_in,
         id_opinion_type_in => id_opinion_type_in,
         id_clinical_service_in => id_clinical_service_in,
         dt_approved_in => dt_approved_in,
         id_prof_approved_in => id_prof_approved_in,
         notes_in => notes_in,
         id_prof_created_hist_in => id_prof_created_hist_in,
         dt_created_hist_in => dt_created_hist_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_episode_approval_in => id_episode_approval_in,
         flg_auto_follow_up_in => flg_auto_follow_up_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN OPINION_HIST_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
         FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO OPINION_HIST VALUES rows_in (indx) RETURNING ROWID BULK COLLECT INTO rows_out;
      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_CODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_OPINION_HIST _' || indx
                  ,value_in => rows_in(indx).ID_OPINION_HIST
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_OPINION _' || indx
                  ,value_in => rows_in(indx).ID_OPINION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPISODE _' || indx
                  ,value_in => rows_in(indx).ID_EPISODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATE _' || indx
                  ,value_in => rows_in(indx).FLG_STATE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DESC_PROBLEM _' || indx
                  ,value_in => rows_in(indx).DESC_PROBLEM
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_QUESTIONS _' || indx
                  ,value_in => rows_in(indx).ID_PROF_QUESTIONS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_QUESTIONED _' || indx
                  ,value_in => rows_in(indx).ID_PROF_QUESTIONED
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SPECIALITY _' || indx
                  ,value_in => rows_in(indx).ID_SPECIALITY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES_CANCEL _' || indx
                  ,value_in => rows_in(indx).NOTES_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_PROBLEM_TSTZ _' || indx
                  ,value_in => rows_in(indx).DT_PROBLEM_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CANCEL_TSTZ _' || indx
                  ,value_in => rows_in(indx).DT_CANCEL_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'STATUS_FLG _' || indx
                  ,value_in => rows_in(indx).STATUS_FLG
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'STATUS_ICON _' || indx
                  ,value_in => rows_in(indx).STATUS_ICON
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'STATUS_MSG _' || indx
                  ,value_in => rows_in(indx).STATUS_MSG
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'STATUS_STR _' || indx
                  ,value_in => rows_in(indx).STATUS_STR
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_MANAGEMENT_LEVEL _' || indx
                  ,value_in => rows_in(indx).ID_MANAGEMENT_LEVEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPISODE_ANSWER _' || indx
                  ,value_in => rows_in(indx).ID_EPISODE_ANSWER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CANCEL_REASON _' || indx
                  ,value_in => rows_in(indx).ID_CANCEL_REASON
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PATIENT _' || indx
                  ,value_in => rows_in(indx).ID_PATIENT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_LAST_UPDATE _' || indx
                  ,value_in => rows_in(indx).DT_LAST_UPDATE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_OPINION_TYPE _' || indx
                  ,value_in => rows_in(indx).ID_OPINION_TYPE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CLINICAL_SERVICE _' || indx
                  ,value_in => rows_in(indx).ID_CLINICAL_SERVICE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_APPROVED _' || indx
                  ,value_in => rows_in(indx).DT_APPROVED
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_APPROVED _' || indx
                  ,value_in => rows_in(indx).ID_PROF_APPROVED
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_CREATED_HIST _' || indx
                  ,value_in => rows_in(indx).ID_PROF_CREATED_HIST
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CREATED_HIST _' || indx
                  ,value_in => rows_in(indx).DT_CREATED_HIST
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(indx).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(indx).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(indx).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(indx).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPISODE_APPROVAL _' || indx
                  ,value_in => rows_in(indx).ID_EPISODE_APPROVAL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_AUTO_FOLLOW_UP _' || indx
                  ,value_in => rows_in(indx).FLG_AUTO_FOLLOW_UP
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'OPINION_HIST'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN OPINION_HIST_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_opinion_hist_in IN OPINION_HIST.ID_OPINION_HIST%TYPE,
      id_opinion_in IN OPINION_HIST.ID_OPINION%TYPE DEFAULT NULL,
      ID_OPINION_nin IN BOOLEAN := TRUE,
      id_episode_in IN OPINION_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      flg_state_in IN OPINION_HIST.FLG_STATE%TYPE DEFAULT NULL,
      FLG_STATE_nin IN BOOLEAN := TRUE,
      desc_problem_in IN OPINION_HIST.DESC_PROBLEM%TYPE DEFAULT NULL,
      DESC_PROBLEM_nin IN BOOLEAN := TRUE,
      id_prof_questions_in IN OPINION_HIST.ID_PROF_QUESTIONS%TYPE DEFAULT NULL,
      ID_PROF_QUESTIONS_nin IN BOOLEAN := TRUE,
      id_prof_questioned_in IN OPINION_HIST.ID_PROF_QUESTIONED%TYPE DEFAULT NULL,
      ID_PROF_QUESTIONED_nin IN BOOLEAN := TRUE,
      id_speciality_in IN OPINION_HIST.ID_SPECIALITY%TYPE DEFAULT NULL,
      ID_SPECIALITY_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN OPINION_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      dt_problem_tstz_in IN OPINION_HIST.DT_PROBLEM_TSTZ%TYPE DEFAULT NULL,
      DT_PROBLEM_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN OPINION_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      status_flg_in IN OPINION_HIST.STATUS_FLG%TYPE DEFAULT NULL,
      STATUS_FLG_nin IN BOOLEAN := TRUE,
      status_icon_in IN OPINION_HIST.STATUS_ICON%TYPE DEFAULT NULL,
      STATUS_ICON_nin IN BOOLEAN := TRUE,
      status_msg_in IN OPINION_HIST.STATUS_MSG%TYPE DEFAULT NULL,
      STATUS_MSG_nin IN BOOLEAN := TRUE,
      status_str_in IN OPINION_HIST.STATUS_STR%TYPE DEFAULT NULL,
      STATUS_STR_nin IN BOOLEAN := TRUE,
      id_management_level_in IN OPINION_HIST.ID_MANAGEMENT_LEVEL%TYPE DEFAULT NULL,
      ID_MANAGEMENT_LEVEL_nin IN BOOLEAN := TRUE,
      id_episode_answer_in IN OPINION_HIST.ID_EPISODE_ANSWER%TYPE DEFAULT NULL,
      ID_EPISODE_ANSWER_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN OPINION_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      id_patient_in IN OPINION_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      dt_last_update_in IN OPINION_HIST.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      DT_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      id_opinion_type_in IN OPINION_HIST.ID_OPINION_TYPE%TYPE DEFAULT NULL,
      ID_OPINION_TYPE_nin IN BOOLEAN := TRUE,
      id_clinical_service_in IN OPINION_HIST.ID_CLINICAL_SERVICE%TYPE DEFAULT NULL,
      ID_CLINICAL_SERVICE_nin IN BOOLEAN := TRUE,
      dt_approved_in IN OPINION_HIST.DT_APPROVED%TYPE DEFAULT NULL,
      DT_APPROVED_nin IN BOOLEAN := TRUE,
      id_prof_approved_in IN OPINION_HIST.ID_PROF_APPROVED%TYPE DEFAULT NULL,
      ID_PROF_APPROVED_nin IN BOOLEAN := TRUE,
      notes_in IN OPINION_HIST.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      id_prof_created_hist_in IN OPINION_HIST.ID_PROF_CREATED_HIST%TYPE DEFAULT NULL,
      ID_PROF_CREATED_HIST_nin IN BOOLEAN := TRUE,
      dt_created_hist_in IN OPINION_HIST.DT_CREATED_HIST%TYPE DEFAULT NULL,
      DT_CREATED_HIST_nin IN BOOLEAN := TRUE,
      create_user_in IN OPINION_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN OPINION_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN OPINION_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN OPINION_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN OPINION_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN OPINION_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_episode_approval_in IN OPINION_HIST.ID_EPISODE_APPROVAL%TYPE DEFAULT NULL,
      ID_EPISODE_APPROVAL_nin IN BOOLEAN := TRUE,
      flg_auto_follow_up_in IN OPINION_HIST.FLG_AUTO_FOLLOW_UP%TYPE DEFAULT NULL,
      FLG_AUTO_FOLLOW_UP_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_OPINION_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
   l_FLG_STATE_n NUMBER(1);
   l_DESC_PROBLEM_n NUMBER(1);
   l_ID_PROF_QUESTIONS_n NUMBER(1);
   l_ID_PROF_QUESTIONED_n NUMBER(1);
   l_ID_SPECIALITY_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_DT_PROBLEM_TSTZ_n NUMBER(1);
   l_DT_CANCEL_TSTZ_n NUMBER(1);
   l_STATUS_FLG_n NUMBER(1);
   l_STATUS_ICON_n NUMBER(1);
   l_STATUS_MSG_n NUMBER(1);
   l_STATUS_STR_n NUMBER(1);
   l_ID_MANAGEMENT_LEVEL_n NUMBER(1);
   l_ID_EPISODE_ANSWER_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_ID_PATIENT_n NUMBER(1);
   l_DT_LAST_UPDATE_n NUMBER(1);
   l_ID_OPINION_TYPE_n NUMBER(1);
   l_ID_CLINICAL_SERVICE_n NUMBER(1);
   l_DT_APPROVED_n NUMBER(1);
   l_ID_PROF_APPROVED_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_ID_PROF_CREATED_HIST_n NUMBER(1);
   l_DT_CREATED_HIST_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_ID_EPISODE_APPROVAL_n NUMBER(1);
   l_FLG_AUTO_FOLLOW_UP_n NUMBER(1);
   BEGIN

   l_ID_OPINION_n := sys.diutil.bool_to_int(ID_OPINION_nin);
   l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
   l_FLG_STATE_n := sys.diutil.bool_to_int(FLG_STATE_nin);
   l_DESC_PROBLEM_n := sys.diutil.bool_to_int(DESC_PROBLEM_nin);
   l_ID_PROF_QUESTIONS_n := sys.diutil.bool_to_int(ID_PROF_QUESTIONS_nin);
   l_ID_PROF_QUESTIONED_n := sys.diutil.bool_to_int(ID_PROF_QUESTIONED_nin);
   l_ID_SPECIALITY_n := sys.diutil.bool_to_int(ID_SPECIALITY_nin);
   l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
   l_DT_PROBLEM_TSTZ_n := sys.diutil.bool_to_int(DT_PROBLEM_TSTZ_nin);
   l_DT_CANCEL_TSTZ_n := sys.diutil.bool_to_int(DT_CANCEL_TSTZ_nin);
   l_STATUS_FLG_n := sys.diutil.bool_to_int(STATUS_FLG_nin);
   l_STATUS_ICON_n := sys.diutil.bool_to_int(STATUS_ICON_nin);
   l_STATUS_MSG_n := sys.diutil.bool_to_int(STATUS_MSG_nin);
   l_STATUS_STR_n := sys.diutil.bool_to_int(STATUS_STR_nin);
   l_ID_MANAGEMENT_LEVEL_n := sys.diutil.bool_to_int(ID_MANAGEMENT_LEVEL_nin);
   l_ID_EPISODE_ANSWER_n := sys.diutil.bool_to_int(ID_EPISODE_ANSWER_nin);
   l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
   l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
   l_DT_LAST_UPDATE_n := sys.diutil.bool_to_int(DT_LAST_UPDATE_nin);
   l_ID_OPINION_TYPE_n := sys.diutil.bool_to_int(ID_OPINION_TYPE_nin);
   l_ID_CLINICAL_SERVICE_n := sys.diutil.bool_to_int(ID_CLINICAL_SERVICE_nin);
   l_DT_APPROVED_n := sys.diutil.bool_to_int(DT_APPROVED_nin);
   l_ID_PROF_APPROVED_n := sys.diutil.bool_to_int(ID_PROF_APPROVED_nin);
   l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
   l_ID_PROF_CREATED_HIST_n := sys.diutil.bool_to_int(ID_PROF_CREATED_HIST_nin);
   l_DT_CREATED_HIST_n := sys.diutil.bool_to_int(DT_CREATED_HIST_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
   l_ID_EPISODE_APPROVAL_n := sys.diutil.bool_to_int(ID_EPISODE_APPROVAL_nin);
   l_FLG_AUTO_FOLLOW_UP_n := sys.diutil.bool_to_int(FLG_AUTO_FOLLOW_UP_nin);


         UPDATE OPINION_HIST SET
     ID_OPINION = decode (l_ID_OPINION_n,0,id_opinion_in, NVL (id_opinion_in, ID_OPINION)),
     ID_EPISODE = decode (l_ID_EPISODE_n,0,id_episode_in, NVL (id_episode_in, ID_EPISODE)),
     FLG_STATE = decode (l_FLG_STATE_n,0,flg_state_in, NVL (flg_state_in, FLG_STATE)),
     DESC_PROBLEM = decode (l_DESC_PROBLEM_n,0,desc_problem_in, NVL (desc_problem_in, DESC_PROBLEM)),
     ID_PROF_QUESTIONS = decode (l_ID_PROF_QUESTIONS_n,0,id_prof_questions_in, NVL (id_prof_questions_in, ID_PROF_QUESTIONS)),
     ID_PROF_QUESTIONED = decode (l_ID_PROF_QUESTIONED_n,0,id_prof_questioned_in, NVL (id_prof_questioned_in, ID_PROF_QUESTIONED)),
     ID_SPECIALITY = decode (l_ID_SPECIALITY_n,0,id_speciality_in, NVL (id_speciality_in, ID_SPECIALITY)),
     NOTES_CANCEL = decode (l_NOTES_CANCEL_n,0,notes_cancel_in, NVL (notes_cancel_in, NOTES_CANCEL)),
     DT_PROBLEM_TSTZ = decode (l_DT_PROBLEM_TSTZ_n,0,dt_problem_tstz_in, NVL (dt_problem_tstz_in, DT_PROBLEM_TSTZ)),
     DT_CANCEL_TSTZ = decode (l_DT_CANCEL_TSTZ_n,0,dt_cancel_tstz_in, NVL (dt_cancel_tstz_in, DT_CANCEL_TSTZ)),
     STATUS_FLG = decode (l_STATUS_FLG_n,0,status_flg_in, NVL (status_flg_in, STATUS_FLG)),
     STATUS_ICON = decode (l_STATUS_ICON_n,0,status_icon_in, NVL (status_icon_in, STATUS_ICON)),
     STATUS_MSG = decode (l_STATUS_MSG_n,0,status_msg_in, NVL (status_msg_in, STATUS_MSG)),
     STATUS_STR = decode (l_STATUS_STR_n,0,status_str_in, NVL (status_str_in, STATUS_STR)),
     ID_MANAGEMENT_LEVEL = decode (l_ID_MANAGEMENT_LEVEL_n,0,id_management_level_in, NVL (id_management_level_in, ID_MANAGEMENT_LEVEL)),
     ID_EPISODE_ANSWER = decode (l_ID_EPISODE_ANSWER_n,0,id_episode_answer_in, NVL (id_episode_answer_in, ID_EPISODE_ANSWER)),
     ID_CANCEL_REASON = decode (l_ID_CANCEL_REASON_n,0,id_cancel_reason_in, NVL (id_cancel_reason_in, ID_CANCEL_REASON)),
     ID_PATIENT = decode (l_ID_PATIENT_n,0,id_patient_in, NVL (id_patient_in, ID_PATIENT)),
     DT_LAST_UPDATE = decode (l_DT_LAST_UPDATE_n,0,dt_last_update_in, NVL (dt_last_update_in, DT_LAST_UPDATE)),
     ID_OPINION_TYPE = decode (l_ID_OPINION_TYPE_n,0,id_opinion_type_in, NVL (id_opinion_type_in, ID_OPINION_TYPE)),
     ID_CLINICAL_SERVICE = decode (l_ID_CLINICAL_SERVICE_n,0,id_clinical_service_in, NVL (id_clinical_service_in, ID_CLINICAL_SERVICE)),
     DT_APPROVED = decode (l_DT_APPROVED_n,0,dt_approved_in, NVL (dt_approved_in, DT_APPROVED)),
     ID_PROF_APPROVED = decode (l_ID_PROF_APPROVED_n,0,id_prof_approved_in, NVL (id_prof_approved_in, ID_PROF_APPROVED)),
     NOTES = decode (l_NOTES_n,0,notes_in, NVL (notes_in, NOTES)),
     ID_PROF_CREATED_HIST = decode (l_ID_PROF_CREATED_HIST_n,0,id_prof_created_hist_in, NVL (id_prof_created_hist_in, ID_PROF_CREATED_HIST)),
     DT_CREATED_HIST = decode (l_DT_CREATED_HIST_n,0,dt_created_hist_in, NVL (dt_created_hist_in, DT_CREATED_HIST)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION)),
     ID_EPISODE_APPROVAL = decode (l_ID_EPISODE_APPROVAL_n,0,id_episode_approval_in, NVL (id_episode_approval_in, ID_EPISODE_APPROVAL)),
     FLG_AUTO_FOLLOW_UP = decode (l_FLG_AUTO_FOLLOW_UP_n,0,flg_auto_follow_up_in, NVL (flg_auto_follow_up_in, FLG_AUTO_FOLLOW_UP))
          WHERE
             ID_OPINION_HIST = id_opinion_hist_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'OPINION_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'OPINION_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'OPINION_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_opinion_hist_in IN OPINION_HIST.ID_OPINION_HIST%TYPE,
      id_opinion_in IN OPINION_HIST.ID_OPINION%TYPE DEFAULT NULL,
      ID_OPINION_nin IN BOOLEAN := TRUE,
      id_episode_in IN OPINION_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      flg_state_in IN OPINION_HIST.FLG_STATE%TYPE DEFAULT NULL,
      FLG_STATE_nin IN BOOLEAN := TRUE,
      desc_problem_in IN OPINION_HIST.DESC_PROBLEM%TYPE DEFAULT NULL,
      DESC_PROBLEM_nin IN BOOLEAN := TRUE,
      id_prof_questions_in IN OPINION_HIST.ID_PROF_QUESTIONS%TYPE DEFAULT NULL,
      ID_PROF_QUESTIONS_nin IN BOOLEAN := TRUE,
      id_prof_questioned_in IN OPINION_HIST.ID_PROF_QUESTIONED%TYPE DEFAULT NULL,
      ID_PROF_QUESTIONED_nin IN BOOLEAN := TRUE,
      id_speciality_in IN OPINION_HIST.ID_SPECIALITY%TYPE DEFAULT NULL,
      ID_SPECIALITY_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN OPINION_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      dt_problem_tstz_in IN OPINION_HIST.DT_PROBLEM_TSTZ%TYPE DEFAULT NULL,
      DT_PROBLEM_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN OPINION_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      status_flg_in IN OPINION_HIST.STATUS_FLG%TYPE DEFAULT NULL,
      STATUS_FLG_nin IN BOOLEAN := TRUE,
      status_icon_in IN OPINION_HIST.STATUS_ICON%TYPE DEFAULT NULL,
      STATUS_ICON_nin IN BOOLEAN := TRUE,
      status_msg_in IN OPINION_HIST.STATUS_MSG%TYPE DEFAULT NULL,
      STATUS_MSG_nin IN BOOLEAN := TRUE,
      status_str_in IN OPINION_HIST.STATUS_STR%TYPE DEFAULT NULL,
      STATUS_STR_nin IN BOOLEAN := TRUE,
      id_management_level_in IN OPINION_HIST.ID_MANAGEMENT_LEVEL%TYPE DEFAULT NULL,
      ID_MANAGEMENT_LEVEL_nin IN BOOLEAN := TRUE,
      id_episode_answer_in IN OPINION_HIST.ID_EPISODE_ANSWER%TYPE DEFAULT NULL,
      ID_EPISODE_ANSWER_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN OPINION_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      id_patient_in IN OPINION_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      dt_last_update_in IN OPINION_HIST.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      DT_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      id_opinion_type_in IN OPINION_HIST.ID_OPINION_TYPE%TYPE DEFAULT NULL,
      ID_OPINION_TYPE_nin IN BOOLEAN := TRUE,
      id_clinical_service_in IN OPINION_HIST.ID_CLINICAL_SERVICE%TYPE DEFAULT NULL,
      ID_CLINICAL_SERVICE_nin IN BOOLEAN := TRUE,
      dt_approved_in IN OPINION_HIST.DT_APPROVED%TYPE DEFAULT NULL,
      DT_APPROVED_nin IN BOOLEAN := TRUE,
      id_prof_approved_in IN OPINION_HIST.ID_PROF_APPROVED%TYPE DEFAULT NULL,
      ID_PROF_APPROVED_nin IN BOOLEAN := TRUE,
      notes_in IN OPINION_HIST.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      id_prof_created_hist_in IN OPINION_HIST.ID_PROF_CREATED_HIST%TYPE DEFAULT NULL,
      ID_PROF_CREATED_HIST_nin IN BOOLEAN := TRUE,
      dt_created_hist_in IN OPINION_HIST.DT_CREATED_HIST%TYPE DEFAULT NULL,
      DT_CREATED_HIST_nin IN BOOLEAN := TRUE,
      create_user_in IN OPINION_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN OPINION_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN OPINION_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN OPINION_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN OPINION_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN OPINION_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_episode_approval_in IN OPINION_HIST.ID_EPISODE_APPROVAL%TYPE DEFAULT NULL,
      ID_EPISODE_APPROVAL_nin IN BOOLEAN := TRUE,
      flg_auto_follow_up_in IN OPINION_HIST.FLG_AUTO_FOLLOW_UP%TYPE DEFAULT NULL,
      FLG_AUTO_FOLLOW_UP_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_opinion_hist_in => id_opinion_hist_in,
      id_opinion_in => id_opinion_in,
      ID_OPINION_nin => ID_OPINION_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      flg_state_in => flg_state_in,
      FLG_STATE_nin => FLG_STATE_nin,
      desc_problem_in => desc_problem_in,
      DESC_PROBLEM_nin => DESC_PROBLEM_nin,
      id_prof_questions_in => id_prof_questions_in,
      ID_PROF_QUESTIONS_nin => ID_PROF_QUESTIONS_nin,
      id_prof_questioned_in => id_prof_questioned_in,
      ID_PROF_QUESTIONED_nin => ID_PROF_QUESTIONED_nin,
      id_speciality_in => id_speciality_in,
      ID_SPECIALITY_nin => ID_SPECIALITY_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      dt_problem_tstz_in => dt_problem_tstz_in,
      DT_PROBLEM_TSTZ_nin => DT_PROBLEM_TSTZ_nin,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      DT_CANCEL_TSTZ_nin => DT_CANCEL_TSTZ_nin,
      status_flg_in => status_flg_in,
      STATUS_FLG_nin => STATUS_FLG_nin,
      status_icon_in => status_icon_in,
      STATUS_ICON_nin => STATUS_ICON_nin,
      status_msg_in => status_msg_in,
      STATUS_MSG_nin => STATUS_MSG_nin,
      status_str_in => status_str_in,
      STATUS_STR_nin => STATUS_STR_nin,
      id_management_level_in => id_management_level_in,
      ID_MANAGEMENT_LEVEL_nin => ID_MANAGEMENT_LEVEL_nin,
      id_episode_answer_in => id_episode_answer_in,
      ID_EPISODE_ANSWER_nin => ID_EPISODE_ANSWER_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      dt_last_update_in => dt_last_update_in,
      DT_LAST_UPDATE_nin => DT_LAST_UPDATE_nin,
      id_opinion_type_in => id_opinion_type_in,
      ID_OPINION_TYPE_nin => ID_OPINION_TYPE_nin,
      id_clinical_service_in => id_clinical_service_in,
      ID_CLINICAL_SERVICE_nin => ID_CLINICAL_SERVICE_nin,
      dt_approved_in => dt_approved_in,
      DT_APPROVED_nin => DT_APPROVED_nin,
      id_prof_approved_in => id_prof_approved_in,
      ID_PROF_APPROVED_nin => ID_PROF_APPROVED_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      id_prof_created_hist_in => id_prof_created_hist_in,
      ID_PROF_CREATED_HIST_nin => ID_PROF_CREATED_HIST_nin,
      dt_created_hist_in => dt_created_hist_in,
      DT_CREATED_HIST_nin => DT_CREATED_HIST_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      id_episode_approval_in => id_episode_approval_in,
      ID_EPISODE_APPROVAL_nin => ID_EPISODE_APPROVAL_nin,
      flg_auto_follow_up_in => flg_auto_follow_up_in,
      FLG_AUTO_FOLLOW_UP_nin => FLG_AUTO_FOLLOW_UP_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_opinion_in IN OPINION_HIST.ID_OPINION%TYPE DEFAULT NULL,
      ID_OPINION_nin IN BOOLEAN := TRUE,
      id_episode_in IN OPINION_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      flg_state_in IN OPINION_HIST.FLG_STATE%TYPE DEFAULT NULL,
      FLG_STATE_nin IN BOOLEAN := TRUE,
      desc_problem_in IN OPINION_HIST.DESC_PROBLEM%TYPE DEFAULT NULL,
      DESC_PROBLEM_nin IN BOOLEAN := TRUE,
      id_prof_questions_in IN OPINION_HIST.ID_PROF_QUESTIONS%TYPE DEFAULT NULL,
      ID_PROF_QUESTIONS_nin IN BOOLEAN := TRUE,
      id_prof_questioned_in IN OPINION_HIST.ID_PROF_QUESTIONED%TYPE DEFAULT NULL,
      ID_PROF_QUESTIONED_nin IN BOOLEAN := TRUE,
      id_speciality_in IN OPINION_HIST.ID_SPECIALITY%TYPE DEFAULT NULL,
      ID_SPECIALITY_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN OPINION_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      dt_problem_tstz_in IN OPINION_HIST.DT_PROBLEM_TSTZ%TYPE DEFAULT NULL,
      DT_PROBLEM_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN OPINION_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      status_flg_in IN OPINION_HIST.STATUS_FLG%TYPE DEFAULT NULL,
      STATUS_FLG_nin IN BOOLEAN := TRUE,
      status_icon_in IN OPINION_HIST.STATUS_ICON%TYPE DEFAULT NULL,
      STATUS_ICON_nin IN BOOLEAN := TRUE,
      status_msg_in IN OPINION_HIST.STATUS_MSG%TYPE DEFAULT NULL,
      STATUS_MSG_nin IN BOOLEAN := TRUE,
      status_str_in IN OPINION_HIST.STATUS_STR%TYPE DEFAULT NULL,
      STATUS_STR_nin IN BOOLEAN := TRUE,
      id_management_level_in IN OPINION_HIST.ID_MANAGEMENT_LEVEL%TYPE DEFAULT NULL,
      ID_MANAGEMENT_LEVEL_nin IN BOOLEAN := TRUE,
      id_episode_answer_in IN OPINION_HIST.ID_EPISODE_ANSWER%TYPE DEFAULT NULL,
      ID_EPISODE_ANSWER_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN OPINION_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      id_patient_in IN OPINION_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      dt_last_update_in IN OPINION_HIST.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      DT_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      id_opinion_type_in IN OPINION_HIST.ID_OPINION_TYPE%TYPE DEFAULT NULL,
      ID_OPINION_TYPE_nin IN BOOLEAN := TRUE,
      id_clinical_service_in IN OPINION_HIST.ID_CLINICAL_SERVICE%TYPE DEFAULT NULL,
      ID_CLINICAL_SERVICE_nin IN BOOLEAN := TRUE,
      dt_approved_in IN OPINION_HIST.DT_APPROVED%TYPE DEFAULT NULL,
      DT_APPROVED_nin IN BOOLEAN := TRUE,
      id_prof_approved_in IN OPINION_HIST.ID_PROF_APPROVED%TYPE DEFAULT NULL,
      ID_PROF_APPROVED_nin IN BOOLEAN := TRUE,
      notes_in IN OPINION_HIST.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      id_prof_created_hist_in IN OPINION_HIST.ID_PROF_CREATED_HIST%TYPE DEFAULT NULL,
      ID_PROF_CREATED_HIST_nin IN BOOLEAN := TRUE,
      dt_created_hist_in IN OPINION_HIST.DT_CREATED_HIST%TYPE DEFAULT NULL,
      DT_CREATED_HIST_nin IN BOOLEAN := TRUE,
      create_user_in IN OPINION_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN OPINION_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN OPINION_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN OPINION_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN OPINION_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN OPINION_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_episode_approval_in IN OPINION_HIST.ID_EPISODE_APPROVAL%TYPE DEFAULT NULL,
      ID_EPISODE_APPROVAL_nin IN BOOLEAN := TRUE,
      flg_auto_follow_up_in IN OPINION_HIST.FLG_AUTO_FOLLOW_UP%TYPE DEFAULT NULL,
      FLG_AUTO_FOLLOW_UP_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_ID_OPINION_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
   l_FLG_STATE_n NUMBER(1);
   l_DESC_PROBLEM_n NUMBER(1);
   l_ID_PROF_QUESTIONS_n NUMBER(1);
   l_ID_PROF_QUESTIONED_n NUMBER(1);
   l_ID_SPECIALITY_n NUMBER(1);
   l_NOTES_CANCEL_n NUMBER(1);
   l_DT_PROBLEM_TSTZ_n NUMBER(1);
   l_DT_CANCEL_TSTZ_n NUMBER(1);
   l_STATUS_FLG_n NUMBER(1);
   l_STATUS_ICON_n NUMBER(1);
   l_STATUS_MSG_n NUMBER(1);
   l_STATUS_STR_n NUMBER(1);
   l_ID_MANAGEMENT_LEVEL_n NUMBER(1);
   l_ID_EPISODE_ANSWER_n NUMBER(1);
   l_ID_CANCEL_REASON_n NUMBER(1);
   l_ID_PATIENT_n NUMBER(1);
   l_DT_LAST_UPDATE_n NUMBER(1);
   l_ID_OPINION_TYPE_n NUMBER(1);
   l_ID_CLINICAL_SERVICE_n NUMBER(1);
   l_DT_APPROVED_n NUMBER(1);
   l_ID_PROF_APPROVED_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_ID_PROF_CREATED_HIST_n NUMBER(1);
   l_DT_CREATED_HIST_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_ID_EPISODE_APPROVAL_n NUMBER(1);
   l_FLG_AUTO_FOLLOW_UP_n NUMBER(1);
      id_opinion_hist_in OPINION_HIST.ID_OPINION_HIST%TYPE;
   BEGIN



      l_ID_OPINION_n := sys.diutil.bool_to_int(ID_OPINION_nin);
      l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
      l_FLG_STATE_n := sys.diutil.bool_to_int(FLG_STATE_nin);
      l_DESC_PROBLEM_n := sys.diutil.bool_to_int(DESC_PROBLEM_nin);
      l_ID_PROF_QUESTIONS_n := sys.diutil.bool_to_int(ID_PROF_QUESTIONS_nin);
      l_ID_PROF_QUESTIONED_n := sys.diutil.bool_to_int(ID_PROF_QUESTIONED_nin);
      l_ID_SPECIALITY_n := sys.diutil.bool_to_int(ID_SPECIALITY_nin);
      l_NOTES_CANCEL_n := sys.diutil.bool_to_int(NOTES_CANCEL_nin);
      l_DT_PROBLEM_TSTZ_n := sys.diutil.bool_to_int(DT_PROBLEM_TSTZ_nin);
      l_DT_CANCEL_TSTZ_n := sys.diutil.bool_to_int(DT_CANCEL_TSTZ_nin);
      l_STATUS_FLG_n := sys.diutil.bool_to_int(STATUS_FLG_nin);
      l_STATUS_ICON_n := sys.diutil.bool_to_int(STATUS_ICON_nin);
      l_STATUS_MSG_n := sys.diutil.bool_to_int(STATUS_MSG_nin);
      l_STATUS_STR_n := sys.diutil.bool_to_int(STATUS_STR_nin);
      l_ID_MANAGEMENT_LEVEL_n := sys.diutil.bool_to_int(ID_MANAGEMENT_LEVEL_nin);
      l_ID_EPISODE_ANSWER_n := sys.diutil.bool_to_int(ID_EPISODE_ANSWER_nin);
      l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
      l_ID_PATIENT_n := sys.diutil.bool_to_int(ID_PATIENT_nin);
      l_DT_LAST_UPDATE_n := sys.diutil.bool_to_int(DT_LAST_UPDATE_nin);
      l_ID_OPINION_TYPE_n := sys.diutil.bool_to_int(ID_OPINION_TYPE_nin);
      l_ID_CLINICAL_SERVICE_n := sys.diutil.bool_to_int(ID_CLINICAL_SERVICE_nin);
      l_DT_APPROVED_n := sys.diutil.bool_to_int(DT_APPROVED_nin);
      l_ID_PROF_APPROVED_n := sys.diutil.bool_to_int(ID_PROF_APPROVED_nin);
      l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
      l_ID_PROF_CREATED_HIST_n := sys.diutil.bool_to_int(ID_PROF_CREATED_HIST_nin);
      l_DT_CREATED_HIST_n := sys.diutil.bool_to_int(DT_CREATED_HIST_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
      l_ID_EPISODE_APPROVAL_n := sys.diutil.bool_to_int(ID_EPISODE_APPROVAL_nin);
      l_FLG_AUTO_FOLLOW_UP_n := sys.diutil.bool_to_int(FLG_AUTO_FOLLOW_UP_nin);



l_sql := 'UPDATE OPINION_HIST SET '
     || ' ID_OPINION = decode (' || l_ID_OPINION_n || ',0,:id_opinion_in, NVL (:id_opinion_in, ID_OPINION)) '|| ','
     || ' ID_EPISODE = decode (' || l_ID_EPISODE_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) '|| ','
     || ' FLG_STATE = decode (' || l_FLG_STATE_n || ',0,:flg_state_in, NVL (:flg_state_in, FLG_STATE)) '|| ','
     || ' DESC_PROBLEM = decode (' || l_DESC_PROBLEM_n || ',0,:desc_problem_in, NVL (:desc_problem_in, DESC_PROBLEM)) '|| ','
     || ' ID_PROF_QUESTIONS = decode (' || l_ID_PROF_QUESTIONS_n || ',0,:id_prof_questions_in, NVL (:id_prof_questions_in, ID_PROF_QUESTIONS)) '|| ','
     || ' ID_PROF_QUESTIONED = decode (' || l_ID_PROF_QUESTIONED_n || ',0,:id_prof_questioned_in, NVL (:id_prof_questioned_in, ID_PROF_QUESTIONED)) '|| ','
     || ' ID_SPECIALITY = decode (' || l_ID_SPECIALITY_n || ',0,:id_speciality_in, NVL (:id_speciality_in, ID_SPECIALITY)) '|| ','
     || ' NOTES_CANCEL = decode (' || l_NOTES_CANCEL_n || ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) '|| ','
     || ' DT_PROBLEM_TSTZ = decode (' || l_DT_PROBLEM_TSTZ_n || ',0,:dt_problem_tstz_in, NVL (:dt_problem_tstz_in, DT_PROBLEM_TSTZ)) '|| ','
     || ' DT_CANCEL_TSTZ = decode (' || l_DT_CANCEL_TSTZ_n || ',0,:dt_cancel_tstz_in, NVL (:dt_cancel_tstz_in, DT_CANCEL_TSTZ)) '|| ','
     || ' STATUS_FLG = decode (' || l_STATUS_FLG_n || ',0,:status_flg_in, NVL (:status_flg_in, STATUS_FLG)) '|| ','
     || ' STATUS_ICON = decode (' || l_STATUS_ICON_n || ',0,:status_icon_in, NVL (:status_icon_in, STATUS_ICON)) '|| ','
     || ' STATUS_MSG = decode (' || l_STATUS_MSG_n || ',0,:status_msg_in, NVL (:status_msg_in, STATUS_MSG)) '|| ','
     || ' STATUS_STR = decode (' || l_STATUS_STR_n || ',0,:status_str_in, NVL (:status_str_in, STATUS_STR)) '|| ','
     || ' ID_MANAGEMENT_LEVEL = decode (' || l_ID_MANAGEMENT_LEVEL_n || ',0,:id_management_level_in, NVL (:id_management_level_in, ID_MANAGEMENT_LEVEL)) '|| ','
     || ' ID_EPISODE_ANSWER = decode (' || l_ID_EPISODE_ANSWER_n || ',0,:id_episode_answer_in, NVL (:id_episode_answer_in, ID_EPISODE_ANSWER)) '|| ','
     || ' ID_CANCEL_REASON = decode (' || l_ID_CANCEL_REASON_n || ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) '|| ','
     || ' ID_PATIENT = decode (' || l_ID_PATIENT_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) '|| ','
     || ' DT_LAST_UPDATE = decode (' || l_DT_LAST_UPDATE_n || ',0,:dt_last_update_in, NVL (:dt_last_update_in, DT_LAST_UPDATE)) '|| ','
     || ' ID_OPINION_TYPE = decode (' || l_ID_OPINION_TYPE_n || ',0,:id_opinion_type_in, NVL (:id_opinion_type_in, ID_OPINION_TYPE)) '|| ','
     || ' ID_CLINICAL_SERVICE = decode (' || l_ID_CLINICAL_SERVICE_n || ',0,:id_clinical_service_in, NVL (:id_clinical_service_in, ID_CLINICAL_SERVICE)) '|| ','
     || ' DT_APPROVED = decode (' || l_DT_APPROVED_n || ',0,:dt_approved_in, NVL (:dt_approved_in, DT_APPROVED)) '|| ','
     || ' ID_PROF_APPROVED = decode (' || l_ID_PROF_APPROVED_n || ',0,:id_prof_approved_in, NVL (:id_prof_approved_in, ID_PROF_APPROVED)) '|| ','
     || ' NOTES = decode (' || l_NOTES_n || ',0,:notes_in, NVL (:notes_in, NOTES)) '|| ','
     || ' ID_PROF_CREATED_HIST = decode (' || l_ID_PROF_CREATED_HIST_n || ',0,:id_prof_created_hist_in, NVL (:id_prof_created_hist_in, ID_PROF_CREATED_HIST)) '|| ','
     || ' DT_CREATED_HIST = decode (' || l_DT_CREATED_HIST_n || ',0,:dt_created_hist_in, NVL (:dt_created_hist_in, DT_CREATED_HIST)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '|| ','
     || ' ID_EPISODE_APPROVAL = decode (' || l_ID_EPISODE_APPROVAL_n || ',0,:id_episode_approval_in, NVL (:id_episode_approval_in, ID_EPISODE_APPROVAL)) '|| ','
     || ' FLG_AUTO_FOLLOW_UP = decode (' || l_FLG_AUTO_FOLLOW_UP_n || ',0,:flg_auto_follow_up_in, NVL (:flg_auto_follow_up_in, FLG_AUTO_FOLLOW_UP)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_opinion_in,
     id_episode_in,
     flg_state_in,
     desc_problem_in,
     id_prof_questions_in,
     id_prof_questioned_in,
     id_speciality_in,
     notes_cancel_in,
     dt_problem_tstz_in,
     dt_cancel_tstz_in,
     status_flg_in,
     status_icon_in,
     status_msg_in,
     status_str_in,
     id_management_level_in,
     id_episode_answer_in,
     id_cancel_reason_in,
     id_patient_in,
     dt_last_update_in,
     id_opinion_type_in,
     id_clinical_service_in,
     dt_approved_in,
     id_prof_approved_in,
     notes_in,
     id_prof_created_hist_in,
     dt_created_hist_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
     id_episode_approval_in,
     flg_auto_follow_up_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'OPINION_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'OPINION_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'OPINION_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_opinion_in IN OPINION_HIST.ID_OPINION%TYPE DEFAULT NULL,
      ID_OPINION_nin IN BOOLEAN := TRUE,
      id_episode_in IN OPINION_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      flg_state_in IN OPINION_HIST.FLG_STATE%TYPE DEFAULT NULL,
      FLG_STATE_nin IN BOOLEAN := TRUE,
      desc_problem_in IN OPINION_HIST.DESC_PROBLEM%TYPE DEFAULT NULL,
      DESC_PROBLEM_nin IN BOOLEAN := TRUE,
      id_prof_questions_in IN OPINION_HIST.ID_PROF_QUESTIONS%TYPE DEFAULT NULL,
      ID_PROF_QUESTIONS_nin IN BOOLEAN := TRUE,
      id_prof_questioned_in IN OPINION_HIST.ID_PROF_QUESTIONED%TYPE DEFAULT NULL,
      ID_PROF_QUESTIONED_nin IN BOOLEAN := TRUE,
      id_speciality_in IN OPINION_HIST.ID_SPECIALITY%TYPE DEFAULT NULL,
      ID_SPECIALITY_nin IN BOOLEAN := TRUE,
      notes_cancel_in IN OPINION_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      NOTES_CANCEL_nin IN BOOLEAN := TRUE,
      dt_problem_tstz_in IN OPINION_HIST.DT_PROBLEM_TSTZ%TYPE DEFAULT NULL,
      DT_PROBLEM_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN OPINION_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      status_flg_in IN OPINION_HIST.STATUS_FLG%TYPE DEFAULT NULL,
      STATUS_FLG_nin IN BOOLEAN := TRUE,
      status_icon_in IN OPINION_HIST.STATUS_ICON%TYPE DEFAULT NULL,
      STATUS_ICON_nin IN BOOLEAN := TRUE,
      status_msg_in IN OPINION_HIST.STATUS_MSG%TYPE DEFAULT NULL,
      STATUS_MSG_nin IN BOOLEAN := TRUE,
      status_str_in IN OPINION_HIST.STATUS_STR%TYPE DEFAULT NULL,
      STATUS_STR_nin IN BOOLEAN := TRUE,
      id_management_level_in IN OPINION_HIST.ID_MANAGEMENT_LEVEL%TYPE DEFAULT NULL,
      ID_MANAGEMENT_LEVEL_nin IN BOOLEAN := TRUE,
      id_episode_answer_in IN OPINION_HIST.ID_EPISODE_ANSWER%TYPE DEFAULT NULL,
      ID_EPISODE_ANSWER_nin IN BOOLEAN := TRUE,
      id_cancel_reason_in IN OPINION_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
      id_patient_in IN OPINION_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      ID_PATIENT_nin IN BOOLEAN := TRUE,
      dt_last_update_in IN OPINION_HIST.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      DT_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      id_opinion_type_in IN OPINION_HIST.ID_OPINION_TYPE%TYPE DEFAULT NULL,
      ID_OPINION_TYPE_nin IN BOOLEAN := TRUE,
      id_clinical_service_in IN OPINION_HIST.ID_CLINICAL_SERVICE%TYPE DEFAULT NULL,
      ID_CLINICAL_SERVICE_nin IN BOOLEAN := TRUE,
      dt_approved_in IN OPINION_HIST.DT_APPROVED%TYPE DEFAULT NULL,
      DT_APPROVED_nin IN BOOLEAN := TRUE,
      id_prof_approved_in IN OPINION_HIST.ID_PROF_APPROVED%TYPE DEFAULT NULL,
      ID_PROF_APPROVED_nin IN BOOLEAN := TRUE,
      notes_in IN OPINION_HIST.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      id_prof_created_hist_in IN OPINION_HIST.ID_PROF_CREATED_HIST%TYPE DEFAULT NULL,
      ID_PROF_CREATED_HIST_nin IN BOOLEAN := TRUE,
      dt_created_hist_in IN OPINION_HIST.DT_CREATED_HIST%TYPE DEFAULT NULL,
      DT_CREATED_HIST_nin IN BOOLEAN := TRUE,
      create_user_in IN OPINION_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN OPINION_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN OPINION_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN OPINION_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN OPINION_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN OPINION_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_episode_approval_in IN OPINION_HIST.ID_EPISODE_APPROVAL%TYPE DEFAULT NULL,
      ID_EPISODE_APPROVAL_nin IN BOOLEAN := TRUE,
      flg_auto_follow_up_in IN OPINION_HIST.FLG_AUTO_FOLLOW_UP%TYPE DEFAULT NULL,
      FLG_AUTO_FOLLOW_UP_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_opinion_in => id_opinion_in,
      ID_OPINION_nin => ID_OPINION_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      flg_state_in => flg_state_in,
      FLG_STATE_nin => FLG_STATE_nin,
      desc_problem_in => desc_problem_in,
      DESC_PROBLEM_nin => DESC_PROBLEM_nin,
      id_prof_questions_in => id_prof_questions_in,
      ID_PROF_QUESTIONS_nin => ID_PROF_QUESTIONS_nin,
      id_prof_questioned_in => id_prof_questioned_in,
      ID_PROF_QUESTIONED_nin => ID_PROF_QUESTIONED_nin,
      id_speciality_in => id_speciality_in,
      ID_SPECIALITY_nin => ID_SPECIALITY_nin,
      notes_cancel_in => notes_cancel_in,
      NOTES_CANCEL_nin => NOTES_CANCEL_nin,
      dt_problem_tstz_in => dt_problem_tstz_in,
      DT_PROBLEM_TSTZ_nin => DT_PROBLEM_TSTZ_nin,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      DT_CANCEL_TSTZ_nin => DT_CANCEL_TSTZ_nin,
      status_flg_in => status_flg_in,
      STATUS_FLG_nin => STATUS_FLG_nin,
      status_icon_in => status_icon_in,
      STATUS_ICON_nin => STATUS_ICON_nin,
      status_msg_in => status_msg_in,
      STATUS_MSG_nin => STATUS_MSG_nin,
      status_str_in => status_str_in,
      STATUS_STR_nin => STATUS_STR_nin,
      id_management_level_in => id_management_level_in,
      ID_MANAGEMENT_LEVEL_nin => ID_MANAGEMENT_LEVEL_nin,
      id_episode_answer_in => id_episode_answer_in,
      ID_EPISODE_ANSWER_nin => ID_EPISODE_ANSWER_nin,
      id_cancel_reason_in => id_cancel_reason_in,
      ID_CANCEL_REASON_nin => ID_CANCEL_REASON_nin,
      id_patient_in => id_patient_in,
      ID_PATIENT_nin => ID_PATIENT_nin,
      dt_last_update_in => dt_last_update_in,
      DT_LAST_UPDATE_nin => DT_LAST_UPDATE_nin,
      id_opinion_type_in => id_opinion_type_in,
      ID_OPINION_TYPE_nin => ID_OPINION_TYPE_nin,
      id_clinical_service_in => id_clinical_service_in,
      ID_CLINICAL_SERVICE_nin => ID_CLINICAL_SERVICE_nin,
      dt_approved_in => dt_approved_in,
      DT_APPROVED_nin => DT_APPROVED_nin,
      id_prof_approved_in => id_prof_approved_in,
      ID_PROF_APPROVED_nin => ID_PROF_APPROVED_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      id_prof_created_hist_in => id_prof_created_hist_in,
      ID_PROF_CREATED_HIST_nin => ID_PROF_CREATED_HIST_nin,
      dt_created_hist_in => dt_created_hist_in,
      DT_CREATED_HIST_nin => DT_CREATED_HIST_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      id_episode_approval_in => id_episode_approval_in,
      ID_EPISODE_APPROVAL_nin => ID_EPISODE_APPROVAL_nin,
      flg_auto_follow_up_in => flg_auto_follow_up_in,
      FLG_AUTO_FOLLOW_UP_nin => FLG_AUTO_FOLLOW_UP_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN OPINION_HIST%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_opinion_hist_in => rec_in.ID_OPINION_HIST,
         id_opinion_in => rec_in.ID_OPINION,
         id_episode_in => rec_in.ID_EPISODE,
         flg_state_in => rec_in.FLG_STATE,
         desc_problem_in => rec_in.DESC_PROBLEM,
         id_prof_questions_in => rec_in.ID_PROF_QUESTIONS,
         id_prof_questioned_in => rec_in.ID_PROF_QUESTIONED,
         id_speciality_in => rec_in.ID_SPECIALITY,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         dt_problem_tstz_in => rec_in.DT_PROBLEM_TSTZ,
         dt_cancel_tstz_in => rec_in.DT_CANCEL_TSTZ,
         status_flg_in => rec_in.STATUS_FLG,
         status_icon_in => rec_in.STATUS_ICON,
         status_msg_in => rec_in.STATUS_MSG,
         status_str_in => rec_in.STATUS_STR,
         id_management_level_in => rec_in.ID_MANAGEMENT_LEVEL,
         id_episode_answer_in => rec_in.ID_EPISODE_ANSWER,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         id_patient_in => rec_in.ID_PATIENT,
         dt_last_update_in => rec_in.DT_LAST_UPDATE,
         id_opinion_type_in => rec_in.ID_OPINION_TYPE,
         id_clinical_service_in => rec_in.ID_CLINICAL_SERVICE,
         dt_approved_in => rec_in.DT_APPROVED,
         id_prof_approved_in => rec_in.ID_PROF_APPROVED,
         notes_in => rec_in.NOTES,
         id_prof_created_hist_in => rec_in.ID_PROF_CREATED_HIST,
         dt_created_hist_in => rec_in.DT_CREATED_HIST,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         id_episode_approval_in => rec_in.ID_EPISODE_APPROVAL,
         flg_auto_follow_up_in => rec_in.FLG_AUTO_FOLLOW_UP

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN OPINION_HIST%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_opinion_hist_in => rec_in.ID_OPINION_HIST,
         id_opinion_in => rec_in.ID_OPINION,
         id_episode_in => rec_in.ID_EPISODE,
         flg_state_in => rec_in.FLG_STATE,
         desc_problem_in => rec_in.DESC_PROBLEM,
         id_prof_questions_in => rec_in.ID_PROF_QUESTIONS,
         id_prof_questioned_in => rec_in.ID_PROF_QUESTIONED,
         id_speciality_in => rec_in.ID_SPECIALITY,
         notes_cancel_in => rec_in.NOTES_CANCEL,
         dt_problem_tstz_in => rec_in.DT_PROBLEM_TSTZ,
         dt_cancel_tstz_in => rec_in.DT_CANCEL_TSTZ,
         status_flg_in => rec_in.STATUS_FLG,
         status_icon_in => rec_in.STATUS_ICON,
         status_msg_in => rec_in.STATUS_MSG,
         status_str_in => rec_in.STATUS_STR,
         id_management_level_in => rec_in.ID_MANAGEMENT_LEVEL,
         id_episode_answer_in => rec_in.ID_EPISODE_ANSWER,
         id_cancel_reason_in => rec_in.ID_CANCEL_REASON,
         id_patient_in => rec_in.ID_PATIENT,
         dt_last_update_in => rec_in.DT_LAST_UPDATE,
         id_opinion_type_in => rec_in.ID_OPINION_TYPE,
         id_clinical_service_in => rec_in.ID_CLINICAL_SERVICE,
         dt_approved_in => rec_in.DT_APPROVED,
         id_prof_approved_in => rec_in.ID_PROF_APPROVED,
         notes_in => rec_in.NOTES,
         id_prof_created_hist_in => rec_in.ID_PROF_CREATED_HIST,
         dt_created_hist_in => rec_in.DT_CREATED_HIST,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         id_episode_approval_in => rec_in.ID_EPISODE_APPROVAL,
         flg_auto_follow_up_in => rec_in.FLG_AUTO_FOLLOW_UP

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_opinion_hist_in IN OPINION_HIST.ID_OPINION_HIST%TYPE,
      id_opinion_in IN OPINION_HIST.ID_OPINION%TYPE DEFAULT NULL,
      id_episode_in IN OPINION_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      flg_state_in IN OPINION_HIST.FLG_STATE%TYPE DEFAULT NULL,
      desc_problem_in IN OPINION_HIST.DESC_PROBLEM%TYPE DEFAULT NULL,
      id_prof_questions_in IN OPINION_HIST.ID_PROF_QUESTIONS%TYPE DEFAULT NULL,
      id_prof_questioned_in IN OPINION_HIST.ID_PROF_QUESTIONED%TYPE DEFAULT NULL,
      id_speciality_in IN OPINION_HIST.ID_SPECIALITY%TYPE DEFAULT NULL,
      notes_cancel_in IN OPINION_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_problem_tstz_in IN OPINION_HIST.DT_PROBLEM_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN OPINION_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      status_flg_in IN OPINION_HIST.STATUS_FLG%TYPE DEFAULT NULL,
      status_icon_in IN OPINION_HIST.STATUS_ICON%TYPE DEFAULT NULL,
      status_msg_in IN OPINION_HIST.STATUS_MSG%TYPE DEFAULT NULL,
      status_str_in IN OPINION_HIST.STATUS_STR%TYPE DEFAULT NULL,
      id_management_level_in IN OPINION_HIST.ID_MANAGEMENT_LEVEL%TYPE DEFAULT NULL,
      id_episode_answer_in IN OPINION_HIST.ID_EPISODE_ANSWER%TYPE DEFAULT NULL,
      id_cancel_reason_in IN OPINION_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_patient_in IN OPINION_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      dt_last_update_in IN OPINION_HIST.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      id_opinion_type_in IN OPINION_HIST.ID_OPINION_TYPE%TYPE DEFAULT NULL,
      id_clinical_service_in IN OPINION_HIST.ID_CLINICAL_SERVICE%TYPE DEFAULT NULL,
      dt_approved_in IN OPINION_HIST.DT_APPROVED%TYPE DEFAULT NULL,
      id_prof_approved_in IN OPINION_HIST.ID_PROF_APPROVED%TYPE DEFAULT NULL,
      notes_in IN OPINION_HIST.NOTES%TYPE DEFAULT NULL,
      id_prof_created_hist_in IN OPINION_HIST.ID_PROF_CREATED_HIST%TYPE DEFAULT NULL,
      dt_created_hist_in IN OPINION_HIST.DT_CREATED_HIST%TYPE DEFAULT NULL,
      create_user_in IN OPINION_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN OPINION_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN OPINION_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN OPINION_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN OPINION_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN OPINION_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_approval_in IN OPINION_HIST.ID_EPISODE_APPROVAL%TYPE DEFAULT NULL,
      flg_auto_follow_up_in IN OPINION_HIST.FLG_AUTO_FOLLOW_UP%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_opinion_hist_in => id_opinion_hist_in,
         id_opinion_in => id_opinion_in,
         id_episode_in => id_episode_in,
         flg_state_in => flg_state_in,
         desc_problem_in => desc_problem_in,
         id_prof_questions_in => id_prof_questions_in,
         id_prof_questioned_in => id_prof_questioned_in,
         id_speciality_in => id_speciality_in,
         notes_cancel_in => notes_cancel_in,
         dt_problem_tstz_in => dt_problem_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         status_flg_in => status_flg_in,
         status_icon_in => status_icon_in,
         status_msg_in => status_msg_in,
         status_str_in => status_str_in,
         id_management_level_in => id_management_level_in,
         id_episode_answer_in => id_episode_answer_in,
         id_cancel_reason_in => id_cancel_reason_in,
         id_patient_in => id_patient_in,
         dt_last_update_in => dt_last_update_in,
         id_opinion_type_in => id_opinion_type_in,
         id_clinical_service_in => id_clinical_service_in,
         dt_approved_in => dt_approved_in,
         id_prof_approved_in => id_prof_approved_in,
         notes_in => notes_in,
         id_prof_created_hist_in => id_prof_created_hist_in,
         dt_created_hist_in => dt_created_hist_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_episode_approval_in => id_episode_approval_in,
         flg_auto_follow_up_in => flg_auto_follow_up_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_opinion_hist_in => id_opinion_hist_in,
            id_opinion_in => id_opinion_in,
            id_episode_in => id_episode_in,
            flg_state_in => flg_state_in,
            desc_problem_in => desc_problem_in,
            id_prof_questions_in => id_prof_questions_in,
            id_prof_questioned_in => id_prof_questioned_in,
            id_speciality_in => id_speciality_in,
            notes_cancel_in => notes_cancel_in,
            dt_problem_tstz_in => dt_problem_tstz_in,
            dt_cancel_tstz_in => dt_cancel_tstz_in,
            status_flg_in => status_flg_in,
            status_icon_in => status_icon_in,
            status_msg_in => status_msg_in,
            status_str_in => status_str_in,
            id_management_level_in => id_management_level_in,
            id_episode_answer_in => id_episode_answer_in,
            id_cancel_reason_in => id_cancel_reason_in,
            id_patient_in => id_patient_in,
            dt_last_update_in => dt_last_update_in,
            id_opinion_type_in => id_opinion_type_in,
            id_clinical_service_in => id_clinical_service_in,
            dt_approved_in => dt_approved_in,
            id_prof_approved_in => id_prof_approved_in,
            notes_in => notes_in,
            id_prof_created_hist_in => id_prof_created_hist_in,
            dt_created_hist_in => dt_created_hist_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            id_episode_approval_in => id_episode_approval_in,
            flg_auto_follow_up_in => flg_auto_follow_up_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_opinion_hist_in IN OPINION_HIST.ID_OPINION_HIST%TYPE,
      id_opinion_in IN OPINION_HIST.ID_OPINION%TYPE DEFAULT NULL,
      id_episode_in IN OPINION_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      flg_state_in IN OPINION_HIST.FLG_STATE%TYPE DEFAULT NULL,
      desc_problem_in IN OPINION_HIST.DESC_PROBLEM%TYPE DEFAULT NULL,
      id_prof_questions_in IN OPINION_HIST.ID_PROF_QUESTIONS%TYPE DEFAULT NULL,
      id_prof_questioned_in IN OPINION_HIST.ID_PROF_QUESTIONED%TYPE DEFAULT NULL,
      id_speciality_in IN OPINION_HIST.ID_SPECIALITY%TYPE DEFAULT NULL,
      notes_cancel_in IN OPINION_HIST.NOTES_CANCEL%TYPE DEFAULT NULL,
      dt_problem_tstz_in IN OPINION_HIST.DT_PROBLEM_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN OPINION_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      status_flg_in IN OPINION_HIST.STATUS_FLG%TYPE DEFAULT NULL,
      status_icon_in IN OPINION_HIST.STATUS_ICON%TYPE DEFAULT NULL,
      status_msg_in IN OPINION_HIST.STATUS_MSG%TYPE DEFAULT NULL,
      status_str_in IN OPINION_HIST.STATUS_STR%TYPE DEFAULT NULL,
      id_management_level_in IN OPINION_HIST.ID_MANAGEMENT_LEVEL%TYPE DEFAULT NULL,
      id_episode_answer_in IN OPINION_HIST.ID_EPISODE_ANSWER%TYPE DEFAULT NULL,
      id_cancel_reason_in IN OPINION_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
      id_patient_in IN OPINION_HIST.ID_PATIENT%TYPE DEFAULT NULL,
      dt_last_update_in IN OPINION_HIST.DT_LAST_UPDATE%TYPE DEFAULT NULL,
      id_opinion_type_in IN OPINION_HIST.ID_OPINION_TYPE%TYPE DEFAULT NULL,
      id_clinical_service_in IN OPINION_HIST.ID_CLINICAL_SERVICE%TYPE DEFAULT NULL,
      dt_approved_in IN OPINION_HIST.DT_APPROVED%TYPE DEFAULT NULL,
      id_prof_approved_in IN OPINION_HIST.ID_PROF_APPROVED%TYPE DEFAULT NULL,
      notes_in IN OPINION_HIST.NOTES%TYPE DEFAULT NULL,
      id_prof_created_hist_in IN OPINION_HIST.ID_PROF_CREATED_HIST%TYPE DEFAULT NULL,
      dt_created_hist_in IN OPINION_HIST.DT_CREATED_HIST%TYPE DEFAULT NULL,
      create_user_in IN OPINION_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN OPINION_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN OPINION_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN OPINION_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN OPINION_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN OPINION_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_episode_approval_in IN OPINION_HIST.ID_EPISODE_APPROVAL%TYPE DEFAULT NULL,
      flg_auto_follow_up_in IN OPINION_HIST.FLG_AUTO_FOLLOW_UP%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_opinion_hist_in,
      id_opinion_in,
      id_episode_in,
      flg_state_in,
      desc_problem_in,
      id_prof_questions_in,
      id_prof_questioned_in,
      id_speciality_in,
      notes_cancel_in,
      dt_problem_tstz_in,
      dt_cancel_tstz_in,
      status_flg_in,
      status_icon_in,
      status_msg_in,
      status_str_in,
      id_management_level_in,
      id_episode_answer_in,
      id_cancel_reason_in,
      id_patient_in,
      dt_last_update_in,
      id_opinion_type_in,
      id_clinical_service_in,
      dt_approved_in,
      id_prof_approved_in,
      notes_in,
      id_prof_created_hist_in,
      dt_created_hist_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
      id_episode_approval_in,
      flg_auto_follow_up_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN OPINION_HIST_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_OPINION_HIST ID_OPINION_HIST_cc;
      l_ID_OPINION ID_OPINION_cc;
      l_ID_EPISODE ID_EPISODE_cc;
      l_FLG_STATE FLG_STATE_cc;
      l_DESC_PROBLEM DESC_PROBLEM_cc;
      l_ID_PROF_QUESTIONS ID_PROF_QUESTIONS_cc;
      l_ID_PROF_QUESTIONED ID_PROF_QUESTIONED_cc;
      l_ID_SPECIALITY ID_SPECIALITY_cc;
      l_NOTES_CANCEL NOTES_CANCEL_cc;
      l_DT_PROBLEM_TSTZ DT_PROBLEM_TSTZ_cc;
      l_DT_CANCEL_TSTZ DT_CANCEL_TSTZ_cc;
      l_STATUS_FLG STATUS_FLG_cc;
      l_STATUS_ICON STATUS_ICON_cc;
      l_STATUS_MSG STATUS_MSG_cc;
      l_STATUS_STR STATUS_STR_cc;
      l_ID_MANAGEMENT_LEVEL ID_MANAGEMENT_LEVEL_cc;
      l_ID_EPISODE_ANSWER ID_EPISODE_ANSWER_cc;
      l_ID_CANCEL_REASON ID_CANCEL_REASON_cc;
      l_ID_PATIENT ID_PATIENT_cc;
      l_DT_LAST_UPDATE DT_LAST_UPDATE_cc;
      l_ID_OPINION_TYPE ID_OPINION_TYPE_cc;
      l_ID_CLINICAL_SERVICE ID_CLINICAL_SERVICE_cc;
      l_DT_APPROVED DT_APPROVED_cc;
      l_ID_PROF_APPROVED ID_PROF_APPROVED_cc;
      l_NOTES NOTES_cc;
      l_ID_PROF_CREATED_HIST ID_PROF_CREATED_HIST_cc;
      l_DT_CREATED_HIST DT_CREATED_HIST_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
      l_ID_EPISODE_APPROVAL ID_EPISODE_APPROVAL_cc;
      l_FLG_AUTO_FOLLOW_UP FLG_AUTO_FOLLOW_UP_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_OPINION_HIST(i) := col_in(i).ID_OPINION_HIST;
         l_ID_OPINION(i) := col_in(i).ID_OPINION;
         l_ID_EPISODE(i) := col_in(i).ID_EPISODE;
         l_FLG_STATE(i) := col_in(i).FLG_STATE;
         l_DESC_PROBLEM(i) := col_in(i).DESC_PROBLEM;
         l_ID_PROF_QUESTIONS(i) := col_in(i).ID_PROF_QUESTIONS;
         l_ID_PROF_QUESTIONED(i) := col_in(i).ID_PROF_QUESTIONED;
         l_ID_SPECIALITY(i) := col_in(i).ID_SPECIALITY;
         l_NOTES_CANCEL(i) := col_in(i).NOTES_CANCEL;
         l_DT_PROBLEM_TSTZ(i) := col_in(i).DT_PROBLEM_TSTZ;
         l_DT_CANCEL_TSTZ(i) := col_in(i).DT_CANCEL_TSTZ;
         l_STATUS_FLG(i) := col_in(i).STATUS_FLG;
         l_STATUS_ICON(i) := col_in(i).STATUS_ICON;
         l_STATUS_MSG(i) := col_in(i).STATUS_MSG;
         l_STATUS_STR(i) := col_in(i).STATUS_STR;
         l_ID_MANAGEMENT_LEVEL(i) := col_in(i).ID_MANAGEMENT_LEVEL;
         l_ID_EPISODE_ANSWER(i) := col_in(i).ID_EPISODE_ANSWER;
         l_ID_CANCEL_REASON(i) := col_in(i).ID_CANCEL_REASON;
         l_ID_PATIENT(i) := col_in(i).ID_PATIENT;
         l_DT_LAST_UPDATE(i) := col_in(i).DT_LAST_UPDATE;
         l_ID_OPINION_TYPE(i) := col_in(i).ID_OPINION_TYPE;
         l_ID_CLINICAL_SERVICE(i) := col_in(i).ID_CLINICAL_SERVICE;
         l_DT_APPROVED(i) := col_in(i).DT_APPROVED;
         l_ID_PROF_APPROVED(i) := col_in(i).ID_PROF_APPROVED;
         l_NOTES(i) := col_in(i).NOTES;
         l_ID_PROF_CREATED_HIST(i) := col_in(i).ID_PROF_CREATED_HIST;
         l_DT_CREATED_HIST(i) := col_in(i).DT_CREATED_HIST;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
         l_ID_EPISODE_APPROVAL(i) := col_in(i).ID_EPISODE_APPROVAL;
         l_FLG_AUTO_FOLLOW_UP(i) := col_in(i).FLG_AUTO_FOLLOW_UP;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE OPINION_HIST SET
               ID_OPINION = NVL (l_ID_OPINION(i), ID_OPINION),
               ID_EPISODE = NVL (l_ID_EPISODE(i), ID_EPISODE),
               FLG_STATE = NVL (l_FLG_STATE(i), FLG_STATE),
               DESC_PROBLEM = NVL (l_DESC_PROBLEM(i), DESC_PROBLEM),
               ID_PROF_QUESTIONS = NVL (l_ID_PROF_QUESTIONS(i), ID_PROF_QUESTIONS),
               ID_PROF_QUESTIONED = NVL (l_ID_PROF_QUESTIONED(i), ID_PROF_QUESTIONED),
               ID_SPECIALITY = NVL (l_ID_SPECIALITY(i), ID_SPECIALITY),
               NOTES_CANCEL = NVL (l_NOTES_CANCEL(i), NOTES_CANCEL),
               DT_PROBLEM_TSTZ = NVL (l_DT_PROBLEM_TSTZ(i), DT_PROBLEM_TSTZ),
               DT_CANCEL_TSTZ = NVL (l_DT_CANCEL_TSTZ(i), DT_CANCEL_TSTZ),
               STATUS_FLG = NVL (l_STATUS_FLG(i), STATUS_FLG),
               STATUS_ICON = NVL (l_STATUS_ICON(i), STATUS_ICON),
               STATUS_MSG = NVL (l_STATUS_MSG(i), STATUS_MSG),
               STATUS_STR = NVL (l_STATUS_STR(i), STATUS_STR),
               ID_MANAGEMENT_LEVEL = NVL (l_ID_MANAGEMENT_LEVEL(i), ID_MANAGEMENT_LEVEL),
               ID_EPISODE_ANSWER = NVL (l_ID_EPISODE_ANSWER(i), ID_EPISODE_ANSWER),
               ID_CANCEL_REASON = NVL (l_ID_CANCEL_REASON(i), ID_CANCEL_REASON),
               ID_PATIENT = NVL (l_ID_PATIENT(i), ID_PATIENT),
               DT_LAST_UPDATE = NVL (l_DT_LAST_UPDATE(i), DT_LAST_UPDATE),
               ID_OPINION_TYPE = NVL (l_ID_OPINION_TYPE(i), ID_OPINION_TYPE),
               ID_CLINICAL_SERVICE = NVL (l_ID_CLINICAL_SERVICE(i), ID_CLINICAL_SERVICE),
               DT_APPROVED = NVL (l_DT_APPROVED(i), DT_APPROVED),
               ID_PROF_APPROVED = NVL (l_ID_PROF_APPROVED(i), ID_PROF_APPROVED),
               NOTES = NVL (l_NOTES(i), NOTES),
               ID_PROF_CREATED_HIST = NVL (l_ID_PROF_CREATED_HIST(i), ID_PROF_CREATED_HIST),
               DT_CREATED_HIST = NVL (l_DT_CREATED_HIST(i), DT_CREATED_HIST),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
               ID_EPISODE_APPROVAL = NVL (l_ID_EPISODE_APPROVAL(i), ID_EPISODE_APPROVAL),
               FLG_AUTO_FOLLOW_UP = NVL (l_FLG_AUTO_FOLLOW_UP(i), FLG_AUTO_FOLLOW_UP)
             WHERE
                ID_OPINION_HIST = l_ID_OPINION_HIST(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE OPINION_HIST SET
               ID_OPINION = l_ID_OPINION(i),
               ID_EPISODE = l_ID_EPISODE(i),
               FLG_STATE = l_FLG_STATE(i),
               DESC_PROBLEM = l_DESC_PROBLEM(i),
               ID_PROF_QUESTIONS = l_ID_PROF_QUESTIONS(i),
               ID_PROF_QUESTIONED = l_ID_PROF_QUESTIONED(i),
               ID_SPECIALITY = l_ID_SPECIALITY(i),
               NOTES_CANCEL = l_NOTES_CANCEL(i),
               DT_PROBLEM_TSTZ = l_DT_PROBLEM_TSTZ(i),
               DT_CANCEL_TSTZ = l_DT_CANCEL_TSTZ(i),
               STATUS_FLG = l_STATUS_FLG(i),
               STATUS_ICON = l_STATUS_ICON(i),
               STATUS_MSG = l_STATUS_MSG(i),
               STATUS_STR = l_STATUS_STR(i),
               ID_MANAGEMENT_LEVEL = l_ID_MANAGEMENT_LEVEL(i),
               ID_EPISODE_ANSWER = l_ID_EPISODE_ANSWER(i),
               ID_CANCEL_REASON = l_ID_CANCEL_REASON(i),
               ID_PATIENT = l_ID_PATIENT(i),
               DT_LAST_UPDATE = l_DT_LAST_UPDATE(i),
               ID_OPINION_TYPE = l_ID_OPINION_TYPE(i),
               ID_CLINICAL_SERVICE = l_ID_CLINICAL_SERVICE(i),
               DT_APPROVED = l_DT_APPROVED(i),
               ID_PROF_APPROVED = l_ID_PROF_APPROVED(i),
               NOTES = l_NOTES(i),
               ID_PROF_CREATED_HIST = l_ID_PROF_CREATED_HIST(i),
               DT_CREATED_HIST = l_DT_CREATED_HIST(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
               ID_EPISODE_APPROVAL = l_ID_EPISODE_APPROVAL(i),
               FLG_AUTO_FOLLOW_UP = l_FLG_AUTO_FOLLOW_UP(i)
             WHERE
                ID_OPINION_HIST = l_ID_OPINION_HIST(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN OPINION_HIST_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE OPINION_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE OPINION_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE OPINION_HIST set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'OPINION_HIST');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'OPINION_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'OPINION_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE OPINION_HIST set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'OPINION_HIST');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'OPINION_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'OPINION_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_opinion_hist_in IN OPINION_HIST.ID_OPINION_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM OPINION_HIST
       WHERE
          ID_OPINION_HIST = id_opinion_hist_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'OPINION_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'OPINION_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_opinion_hist_in IN OPINION_HIST.ID_OPINION_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_opinion_hist_in => id_opinion_hist_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_OPINION_HIST
   PROCEDURE del_ID_OPINION_HIST (
      id_opinion_hist_in IN OPINION_HIST.ID_OPINION_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM OPINION_HIST
       WHERE ID_OPINION_HIST = id_opinion_hist_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'OPINION_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'OPINION_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_OPINION_HIST;






   -- Delete all rows for primary key column ID_OPINION_HIST
   PROCEDURE del_ID_OPINION_HIST (
      id_opinion_hist_in IN OPINION_HIST.ID_OPINION_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_OPINION_HIST (
      id_opinion_hist_in => id_opinion_hist_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_OPINION_HIST;






















   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM OPINION_HIST';
      ELSE
         RETURN
            'DELETE FROM OPINION_HIST WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'OPINION_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'OPINION_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'OPINION_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'OPINION_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'OPINION_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'OPINION_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'OPINION_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'OPINION_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'OPINION_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'OPINION_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'OPINION_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'OPINION_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'OPINION_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'OPINION_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'OPINION_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'OPINION_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'OPINION_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'OPINION_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'OPINION_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'OPINION_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      opinion_hist_inout IN OUT OPINION_HIST%ROWTYPE
   )
   IS
   BEGIN
      opinion_hist_inout.ID_OPINION_HIST := NULL;
      opinion_hist_inout.ID_OPINION := NULL;
      opinion_hist_inout.ID_EPISODE := NULL;
      opinion_hist_inout.FLG_STATE := NULL;
      opinion_hist_inout.DESC_PROBLEM := NULL;
      opinion_hist_inout.ID_PROF_QUESTIONS := NULL;
      opinion_hist_inout.ID_PROF_QUESTIONED := NULL;
      opinion_hist_inout.ID_SPECIALITY := NULL;
      opinion_hist_inout.NOTES_CANCEL := NULL;
      opinion_hist_inout.DT_PROBLEM_TSTZ := NULL;
      opinion_hist_inout.DT_CANCEL_TSTZ := NULL;
      opinion_hist_inout.STATUS_FLG := NULL;
      opinion_hist_inout.STATUS_ICON := NULL;
      opinion_hist_inout.STATUS_MSG := NULL;
      opinion_hist_inout.STATUS_STR := NULL;
      opinion_hist_inout.ID_MANAGEMENT_LEVEL := NULL;
      opinion_hist_inout.ID_EPISODE_ANSWER := NULL;
      opinion_hist_inout.ID_CANCEL_REASON := NULL;
      opinion_hist_inout.ID_PATIENT := NULL;
      opinion_hist_inout.DT_LAST_UPDATE := NULL;
      opinion_hist_inout.ID_OPINION_TYPE := NULL;
      opinion_hist_inout.ID_CLINICAL_SERVICE := NULL;
      opinion_hist_inout.DT_APPROVED := NULL;
      opinion_hist_inout.ID_PROF_APPROVED := NULL;
      opinion_hist_inout.NOTES := NULL;
      opinion_hist_inout.ID_PROF_CREATED_HIST := NULL;
      opinion_hist_inout.DT_CREATED_HIST := NULL;
      opinion_hist_inout.CREATE_USER := NULL;
      opinion_hist_inout.CREATE_TIME := NULL;
      opinion_hist_inout.CREATE_INSTITUTION := NULL;
      opinion_hist_inout.UPDATE_USER := NULL;
      opinion_hist_inout.UPDATE_TIME := NULL;
      opinion_hist_inout.UPDATE_INSTITUTION := NULL;
      opinion_hist_inout.ID_EPISODE_APPROVAL := NULL;
      opinion_hist_inout.FLG_AUTO_FOLLOW_UP := 'N';
   END initrec;

   FUNCTION initrec RETURN OPINION_HIST%ROWTYPE
   IS
      l_opinion_hist OPINION_HIST%ROWTYPE;
   BEGIN
      l_opinion_hist.FLG_AUTO_FOLLOW_UP := 'N';
      RETURN l_opinion_hist;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN OPINION_HIST_tc
   IS
        data OPINION_HIST_tc;
   BEGIN
        select * bulk collect into data from OPINION_HIST where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN OPINION_HIST_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data OPINION_HIST_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_OPINION_HIST;
/
