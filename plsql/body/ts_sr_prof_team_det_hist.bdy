/*-- Last Change Revision: $Rev: 2028388 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:29 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY TS_SR_PROF_TEAM_DET_HIST
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: October 31, 2011 14:30:52
| Created By: ALERT
*/
IS

   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_sr_prof_team_det_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE
      ,
      id_sr_prof_team_det_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET%TYPE DEFAULT NULL,
      flg_status_hist_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS_HIST%TYPE DEFAULT NULL,
      id_sr_epis_interv_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_EPIS_INTERV_HIST%TYPE DEFAULT NULL,
      id_surgery_record_in IN SR_PROF_TEAM_DET_HIST.ID_SURGERY_RECORD%TYPE DEFAULT NULL,
      id_episode_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_prof_team_leader_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
      id_professional_in IN SR_PROF_TEAM_DET_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      id_category_sub_in IN SR_PROF_TEAM_DET_HIST.ID_CATEGORY_SUB%TYPE DEFAULT NULL,
      id_prof_team_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
      flg_status_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_reg_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_REG%TYPE DEFAULT NULL,
      id_prof_cancel_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_reg_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_REG_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_episode_context_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE_CONTEXT%TYPE DEFAULT NULL,
      create_user_in IN SR_PROF_TEAM_DET_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SR_PROF_TEAM_DET_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SR_PROF_TEAM_DET_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SR_PROF_TEAM_DET_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SR_PROF_TEAM_DET_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SR_PROF_TEAM_DET_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO SR_PROF_TEAM_DET_HIST (
         ID_SR_PROF_TEAM_DET_HIST,
         ID_SR_PROF_TEAM_DET,
         FLG_STATUS_HIST,
         ID_SR_EPIS_INTERV_HIST,
         ID_SURGERY_RECORD,
         ID_EPISODE,
         ID_PROF_TEAM_LEADER,
         ID_PROFESSIONAL,
         ID_CATEGORY_SUB,
         ID_PROF_TEAM,
         FLG_STATUS,
         ID_PROF_REG,
         ID_PROF_CANCEL,
         DT_BEGIN_TSTZ,
         DT_END_TSTZ,
         DT_REG_TSTZ,
         DT_CANCEL_TSTZ,
         ID_EPISODE_CONTEXT,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION
         )
      VALUES (
         id_sr_prof_team_det_hist_in,
         id_sr_prof_team_det_in,
         flg_status_hist_in,
         id_sr_epis_interv_hist_in,
         id_surgery_record_in,
         id_episode_in,
         id_prof_team_leader_in,
         id_professional_in,
         id_category_sub_in,
         id_prof_team_in,
         flg_status_in,
         id_prof_reg_in,
         id_prof_cancel_in,
         dt_begin_tstz_in,
         dt_end_tstz_in,
         dt_reg_tstz_in,
         dt_cancel_tstz_in,
         id_episode_context_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'SR_PROF_TEAM_DET_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           IF l_name = 'SR_PFH_CONTEXT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE_CONTEXT'
               , value_in => id_episode_context_in);
           END IF;
           IF l_name = 'SR_PFH_SREIH_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SR_EPIS_INTERV_HIST'
               , value_in => id_sr_epis_interv_hist_in);
           END IF;
           IF l_name = 'SR_PFH_SRPT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SR_PROF_TEAM_DET'
               , value_in => id_sr_prof_team_det_in);
           END IF;
           IF l_name = 'SR_PFH_TEAM_CATS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CATEGORY_SUB'
               , value_in => id_category_sub_in);
           END IF;
           IF l_name = 'SR_PF_TEAMH_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'SR_PF_TEAMH_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_TEAM_LEADER'
               , value_in => id_prof_team_leader_in);
           END IF;
           IF l_name = 'SR_PF_TEAMH_PROF_FK2'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           IF l_name = 'SR_PF_TEAMH_PROF_FK3'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_REG'
               , value_in => id_prof_reg_in);
           END IF;
           IF l_name = 'SR_PF_TEAMH_PROF_FK4'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'SR_PF_TEAMH_PROF_TEAM_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_TEAM'
               , value_in => id_prof_team_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_sr_prof_team_det_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE
      ,
      id_sr_prof_team_det_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET%TYPE DEFAULT NULL,
      flg_status_hist_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS_HIST%TYPE DEFAULT NULL,
      id_sr_epis_interv_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_EPIS_INTERV_HIST%TYPE DEFAULT NULL,
      id_surgery_record_in IN SR_PROF_TEAM_DET_HIST.ID_SURGERY_RECORD%TYPE DEFAULT NULL,
      id_episode_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_prof_team_leader_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
      id_professional_in IN SR_PROF_TEAM_DET_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      id_category_sub_in IN SR_PROF_TEAM_DET_HIST.ID_CATEGORY_SUB%TYPE DEFAULT NULL,
      id_prof_team_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
      flg_status_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_reg_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_REG%TYPE DEFAULT NULL,
      id_prof_cancel_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_reg_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_REG_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_episode_context_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE_CONTEXT%TYPE DEFAULT NULL,
      create_user_in IN SR_PROF_TEAM_DET_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SR_PROF_TEAM_DET_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SR_PROF_TEAM_DET_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SR_PROF_TEAM_DET_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SR_PROF_TEAM_DET_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SR_PROF_TEAM_DET_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_sr_prof_team_det_hist_in => id_sr_prof_team_det_hist_in
      ,
      id_sr_prof_team_det_in => id_sr_prof_team_det_in,
      flg_status_hist_in => flg_status_hist_in,
      id_sr_epis_interv_hist_in => id_sr_epis_interv_hist_in,
      id_surgery_record_in => id_surgery_record_in,
      id_episode_in => id_episode_in,
      id_prof_team_leader_in => id_prof_team_leader_in,
      id_professional_in => id_professional_in,
      id_category_sub_in => id_category_sub_in,
      id_prof_team_in => id_prof_team_in,
      flg_status_in => flg_status_in,
      id_prof_reg_in => id_prof_reg_in,
      id_prof_cancel_in => id_prof_cancel_in,
      dt_begin_tstz_in => dt_begin_tstz_in,
      dt_end_tstz_in => dt_end_tstz_in,
      dt_reg_tstz_in => dt_reg_tstz_in,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      id_episode_context_in => id_episode_context_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN SR_PROF_TEAM_DET_HIST%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec SR_PROF_TEAM_DET_HIST%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_SR_PROF_TEAM_DET_HIST := next_key (sequence_in);
      END IF;
      ins (
         id_sr_prof_team_det_hist_in => l_rec.ID_SR_PROF_TEAM_DET_HIST
         ,
         id_sr_prof_team_det_in => l_rec.ID_SR_PROF_TEAM_DET,
         flg_status_hist_in => l_rec.FLG_STATUS_HIST,
         id_sr_epis_interv_hist_in => l_rec.ID_SR_EPIS_INTERV_HIST,
         id_surgery_record_in => l_rec.ID_SURGERY_RECORD,
         id_episode_in => l_rec.ID_EPISODE,
         id_prof_team_leader_in => l_rec.ID_PROF_TEAM_LEADER,
         id_professional_in => l_rec.ID_PROFESSIONAL,
         id_category_sub_in => l_rec.ID_CATEGORY_SUB,
         id_prof_team_in => l_rec.ID_PROF_TEAM,
         flg_status_in => l_rec.FLG_STATUS,
         id_prof_reg_in => l_rec.ID_PROF_REG,
         id_prof_cancel_in => l_rec.ID_PROF_CANCEL,
         dt_begin_tstz_in => l_rec.DT_BEGIN_TSTZ,
         dt_end_tstz_in => l_rec.DT_END_TSTZ,
         dt_reg_tstz_in => l_rec.DT_REG_TSTZ,
         dt_cancel_tstz_in => l_rec.DT_CANCEL_TSTZ,
         id_episode_context_in => l_rec.ID_EPISODE_CONTEXT,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN SR_PROF_TEAM_DET_HIST%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE

   IS
     retval SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_SR_PROF_TEAM_DET_HIST.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_SR_PROF_TEAM_DET_HIST')
           );
   END next_key;

   PROCEDURE ins (
      id_sr_prof_team_det_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET%TYPE DEFAULT NULL,
      flg_status_hist_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS_HIST%TYPE DEFAULT NULL,
      id_sr_epis_interv_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_EPIS_INTERV_HIST%TYPE DEFAULT NULL,
      id_surgery_record_in IN SR_PROF_TEAM_DET_HIST.ID_SURGERY_RECORD%TYPE DEFAULT NULL,
      id_episode_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_prof_team_leader_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
      id_professional_in IN SR_PROF_TEAM_DET_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      id_category_sub_in IN SR_PROF_TEAM_DET_HIST.ID_CATEGORY_SUB%TYPE DEFAULT NULL,
      id_prof_team_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
      flg_status_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_reg_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_REG%TYPE DEFAULT NULL,
      id_prof_cancel_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_reg_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_REG_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_episode_context_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE_CONTEXT%TYPE DEFAULT NULL,
      create_user_in IN SR_PROF_TEAM_DET_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SR_PROF_TEAM_DET_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SR_PROF_TEAM_DET_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SR_PROF_TEAM_DET_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SR_PROF_TEAM_DET_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SR_PROF_TEAM_DET_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_sr_prof_team_det_hist_out IN OUT SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE := next_key;
   BEGIN
      ins (
         id_sr_prof_team_det_hist_in => l_pky,
         id_sr_prof_team_det_in => id_sr_prof_team_det_in,
         flg_status_hist_in => flg_status_hist_in,
         id_sr_epis_interv_hist_in => id_sr_epis_interv_hist_in,
         id_surgery_record_in => id_surgery_record_in,
         id_episode_in => id_episode_in,
         id_prof_team_leader_in => id_prof_team_leader_in,
         id_professional_in => id_professional_in,
         id_category_sub_in => id_category_sub_in,
         id_prof_team_in => id_prof_team_in,
         flg_status_in => flg_status_in,
         id_prof_reg_in => id_prof_reg_in,
         id_prof_cancel_in => id_prof_cancel_in,
         dt_begin_tstz_in => dt_begin_tstz_in,
         dt_end_tstz_in => dt_end_tstz_in,
         dt_reg_tstz_in => dt_reg_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         id_episode_context_in => id_episode_context_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_sr_prof_team_det_hist_out := l_pky;
   END ins;

   PROCEDURE ins (
      id_sr_prof_team_det_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET%TYPE DEFAULT NULL,
      flg_status_hist_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS_HIST%TYPE DEFAULT NULL,
      id_sr_epis_interv_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_EPIS_INTERV_HIST%TYPE DEFAULT NULL,
      id_surgery_record_in IN SR_PROF_TEAM_DET_HIST.ID_SURGERY_RECORD%TYPE DEFAULT NULL,
      id_episode_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_prof_team_leader_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
      id_professional_in IN SR_PROF_TEAM_DET_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      id_category_sub_in IN SR_PROF_TEAM_DET_HIST.ID_CATEGORY_SUB%TYPE DEFAULT NULL,
      id_prof_team_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
      flg_status_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_reg_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_REG%TYPE DEFAULT NULL,
      id_prof_cancel_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_reg_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_REG_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_episode_context_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE_CONTEXT%TYPE DEFAULT NULL,
      create_user_in IN SR_PROF_TEAM_DET_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SR_PROF_TEAM_DET_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SR_PROF_TEAM_DET_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SR_PROF_TEAM_DET_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SR_PROF_TEAM_DET_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SR_PROF_TEAM_DET_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_sr_prof_team_det_hist_out IN OUT SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      id_sr_prof_team_det_in => id_sr_prof_team_det_in,
      flg_status_hist_in => flg_status_hist_in,
      id_sr_epis_interv_hist_in => id_sr_epis_interv_hist_in,
      id_surgery_record_in => id_surgery_record_in,
      id_episode_in => id_episode_in,
      id_prof_team_leader_in => id_prof_team_leader_in,
      id_professional_in => id_professional_in,
      id_category_sub_in => id_category_sub_in,
      id_prof_team_in => id_prof_team_in,
      flg_status_in => flg_status_in,
      id_prof_reg_in => id_prof_reg_in,
      id_prof_cancel_in => id_prof_cancel_in,
      dt_begin_tstz_in => dt_begin_tstz_in,
      dt_end_tstz_in => dt_end_tstz_in,
      dt_reg_tstz_in => dt_reg_tstz_in,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      id_episode_context_in => id_episode_context_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      id_sr_prof_team_det_hist_out => id_sr_prof_team_det_hist_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      id_sr_prof_team_det_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET%TYPE DEFAULT NULL,
      flg_status_hist_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS_HIST%TYPE DEFAULT NULL,
      id_sr_epis_interv_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_EPIS_INTERV_HIST%TYPE DEFAULT NULL,
      id_surgery_record_in IN SR_PROF_TEAM_DET_HIST.ID_SURGERY_RECORD%TYPE DEFAULT NULL,
      id_episode_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_prof_team_leader_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
      id_professional_in IN SR_PROF_TEAM_DET_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      id_category_sub_in IN SR_PROF_TEAM_DET_HIST.ID_CATEGORY_SUB%TYPE DEFAULT NULL,
      id_prof_team_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
      flg_status_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_reg_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_REG%TYPE DEFAULT NULL,
      id_prof_cancel_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_reg_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_REG_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_episode_context_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE_CONTEXT%TYPE DEFAULT NULL,
      create_user_in IN SR_PROF_TEAM_DET_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SR_PROF_TEAM_DET_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SR_PROF_TEAM_DET_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SR_PROF_TEAM_DET_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SR_PROF_TEAM_DET_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SR_PROF_TEAM_DET_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE
   IS
        l_pky SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE := next_key;
   BEGIN
      ins (
         id_sr_prof_team_det_hist_in => l_pky,
         id_sr_prof_team_det_in => id_sr_prof_team_det_in,
         flg_status_hist_in => flg_status_hist_in,
         id_sr_epis_interv_hist_in => id_sr_epis_interv_hist_in,
         id_surgery_record_in => id_surgery_record_in,
         id_episode_in => id_episode_in,
         id_prof_team_leader_in => id_prof_team_leader_in,
         id_professional_in => id_professional_in,
         id_category_sub_in => id_category_sub_in,
         id_prof_team_in => id_prof_team_in,
         flg_status_in => flg_status_in,
         id_prof_reg_in => id_prof_reg_in,
         id_prof_cancel_in => id_prof_cancel_in,
         dt_begin_tstz_in => dt_begin_tstz_in,
         dt_end_tstz_in => dt_end_tstz_in,
         dt_reg_tstz_in => dt_reg_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         id_episode_context_in => id_episode_context_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      id_sr_prof_team_det_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET%TYPE DEFAULT NULL,
      flg_status_hist_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS_HIST%TYPE DEFAULT NULL,
      id_sr_epis_interv_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_EPIS_INTERV_HIST%TYPE DEFAULT NULL,
      id_surgery_record_in IN SR_PROF_TEAM_DET_HIST.ID_SURGERY_RECORD%TYPE DEFAULT NULL,
      id_episode_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_prof_team_leader_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
      id_professional_in IN SR_PROF_TEAM_DET_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      id_category_sub_in IN SR_PROF_TEAM_DET_HIST.ID_CATEGORY_SUB%TYPE DEFAULT NULL,
      id_prof_team_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
      flg_status_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_reg_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_REG%TYPE DEFAULT NULL,
      id_prof_cancel_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_reg_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_REG_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_episode_context_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE_CONTEXT%TYPE DEFAULT NULL,
      create_user_in IN SR_PROF_TEAM_DET_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SR_PROF_TEAM_DET_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SR_PROF_TEAM_DET_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SR_PROF_TEAM_DET_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SR_PROF_TEAM_DET_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SR_PROF_TEAM_DET_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE
   IS
        l_pky SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_sr_prof_team_det_hist_in => l_pky,
         id_sr_prof_team_det_in => id_sr_prof_team_det_in,
         flg_status_hist_in => flg_status_hist_in,
         id_sr_epis_interv_hist_in => id_sr_epis_interv_hist_in,
         id_surgery_record_in => id_surgery_record_in,
         id_episode_in => id_episode_in,
         id_prof_team_leader_in => id_prof_team_leader_in,
         id_professional_in => id_professional_in,
         id_category_sub_in => id_category_sub_in,
         id_prof_team_in => id_prof_team_in,
         flg_status_in => flg_status_in,
         id_prof_reg_in => id_prof_reg_in,
         id_prof_cancel_in => id_prof_cancel_in,
         dt_begin_tstz_in => dt_begin_tstz_in,
         dt_end_tstz_in => dt_end_tstz_in,
         dt_reg_tstz_in => dt_reg_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         id_episode_context_in => id_episode_context_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      id_sr_prof_team_det_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET%TYPE DEFAULT NULL,
      flg_status_hist_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS_HIST%TYPE DEFAULT NULL,
      id_sr_epis_interv_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_EPIS_INTERV_HIST%TYPE DEFAULT NULL,
      id_surgery_record_in IN SR_PROF_TEAM_DET_HIST.ID_SURGERY_RECORD%TYPE DEFAULT NULL,
      id_episode_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_prof_team_leader_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
      id_professional_in IN SR_PROF_TEAM_DET_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      id_category_sub_in IN SR_PROF_TEAM_DET_HIST.ID_CATEGORY_SUB%TYPE DEFAULT NULL,
      id_prof_team_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
      flg_status_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_reg_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_REG%TYPE DEFAULT NULL,
      id_prof_cancel_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_reg_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_REG_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_episode_context_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE_CONTEXT%TYPE DEFAULT NULL,
      create_user_in IN SR_PROF_TEAM_DET_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SR_PROF_TEAM_DET_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SR_PROF_TEAM_DET_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SR_PROF_TEAM_DET_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SR_PROF_TEAM_DET_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SR_PROF_TEAM_DET_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE := next_key;
   BEGIN
      ins (
         id_sr_prof_team_det_hist_in => l_pky,
         id_sr_prof_team_det_in => id_sr_prof_team_det_in,
         flg_status_hist_in => flg_status_hist_in,
         id_sr_epis_interv_hist_in => id_sr_epis_interv_hist_in,
         id_surgery_record_in => id_surgery_record_in,
         id_episode_in => id_episode_in,
         id_prof_team_leader_in => id_prof_team_leader_in,
         id_professional_in => id_professional_in,
         id_category_sub_in => id_category_sub_in,
         id_prof_team_in => id_prof_team_in,
         flg_status_in => flg_status_in,
         id_prof_reg_in => id_prof_reg_in,
         id_prof_cancel_in => id_prof_cancel_in,
         dt_begin_tstz_in => dt_begin_tstz_in,
         dt_end_tstz_in => dt_end_tstz_in,
         dt_reg_tstz_in => dt_reg_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         id_episode_context_in => id_episode_context_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      id_sr_prof_team_det_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET%TYPE DEFAULT NULL,
      flg_status_hist_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS_HIST%TYPE DEFAULT NULL,
      id_sr_epis_interv_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_EPIS_INTERV_HIST%TYPE DEFAULT NULL,
      id_surgery_record_in IN SR_PROF_TEAM_DET_HIST.ID_SURGERY_RECORD%TYPE DEFAULT NULL,
      id_episode_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_prof_team_leader_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
      id_professional_in IN SR_PROF_TEAM_DET_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      id_category_sub_in IN SR_PROF_TEAM_DET_HIST.ID_CATEGORY_SUB%TYPE DEFAULT NULL,
      id_prof_team_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
      flg_status_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_reg_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_REG%TYPE DEFAULT NULL,
      id_prof_cancel_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_reg_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_REG_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_episode_context_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE_CONTEXT%TYPE DEFAULT NULL,
      create_user_in IN SR_PROF_TEAM_DET_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SR_PROF_TEAM_DET_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SR_PROF_TEAM_DET_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SR_PROF_TEAM_DET_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SR_PROF_TEAM_DET_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SR_PROF_TEAM_DET_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_sr_prof_team_det_hist_in => l_pky,
         id_sr_prof_team_det_in => id_sr_prof_team_det_in,
         flg_status_hist_in => flg_status_hist_in,
         id_sr_epis_interv_hist_in => id_sr_epis_interv_hist_in,
         id_surgery_record_in => id_surgery_record_in,
         id_episode_in => id_episode_in,
         id_prof_team_leader_in => id_prof_team_leader_in,
         id_professional_in => id_professional_in,
         id_category_sub_in => id_category_sub_in,
         id_prof_team_in => id_prof_team_in,
         flg_status_in => flg_status_in,
         id_prof_reg_in => id_prof_reg_in,
         id_prof_cancel_in => id_prof_cancel_in,
         dt_begin_tstz_in => dt_begin_tstz_in,
         dt_end_tstz_in => dt_end_tstz_in,
         dt_reg_tstz_in => dt_reg_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         id_episode_context_in => id_episode_context_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN SR_PROF_TEAM_DET_HIST_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
         FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO SR_PROF_TEAM_DET_HIST VALUES rows_in (indx) RETURNING ROWID BULK COLLECT INTO rows_out;
      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_CODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SR_PROF_TEAM_DET_HIST _' || indx
                  ,value_in => rows_in(indx).ID_SR_PROF_TEAM_DET_HIST
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SR_PROF_TEAM_DET _' || indx
                  ,value_in => rows_in(indx).ID_SR_PROF_TEAM_DET
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATUS_HIST _' || indx
                  ,value_in => rows_in(indx).FLG_STATUS_HIST
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SR_EPIS_INTERV_HIST _' || indx
                  ,value_in => rows_in(indx).ID_SR_EPIS_INTERV_HIST
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SURGERY_RECORD _' || indx
                  ,value_in => rows_in(indx).ID_SURGERY_RECORD
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPISODE _' || indx
                  ,value_in => rows_in(indx).ID_EPISODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_TEAM_LEADER _' || indx
                  ,value_in => rows_in(indx).ID_PROF_TEAM_LEADER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROFESSIONAL _' || indx
                  ,value_in => rows_in(indx).ID_PROFESSIONAL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CATEGORY_SUB _' || indx
                  ,value_in => rows_in(indx).ID_CATEGORY_SUB
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_TEAM _' || indx
                  ,value_in => rows_in(indx).ID_PROF_TEAM
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATUS _' || indx
                  ,value_in => rows_in(indx).FLG_STATUS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_REG _' || indx
                  ,value_in => rows_in(indx).ID_PROF_REG
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_CANCEL _' || indx
                  ,value_in => rows_in(indx).ID_PROF_CANCEL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_BEGIN_TSTZ _' || indx
                  ,value_in => rows_in(indx).DT_BEGIN_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_END_TSTZ _' || indx
                  ,value_in => rows_in(indx).DT_END_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_REG_TSTZ _' || indx
                  ,value_in => rows_in(indx).DT_REG_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CANCEL_TSTZ _' || indx
                  ,value_in => rows_in(indx).DT_CANCEL_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPISODE_CONTEXT _' || indx
                  ,value_in => rows_in(indx).ID_EPISODE_CONTEXT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(indx).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(indx).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(indx).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(indx).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'SR_PROF_TEAM_DET_HIST'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN SR_PROF_TEAM_DET_HIST_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_sr_prof_team_det_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE,
      id_sr_prof_team_det_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET%TYPE DEFAULT NULL,
      ID_SR_PROF_TEAM_DET_nin IN BOOLEAN := TRUE,
      flg_status_hist_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS_HIST%TYPE DEFAULT NULL,
      FLG_STATUS_HIST_nin IN BOOLEAN := TRUE,
      id_sr_epis_interv_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_EPIS_INTERV_HIST%TYPE DEFAULT NULL,
      ID_SR_EPIS_INTERV_HIST_nin IN BOOLEAN := TRUE,
      id_surgery_record_in IN SR_PROF_TEAM_DET_HIST.ID_SURGERY_RECORD%TYPE DEFAULT NULL,
      ID_SURGERY_RECORD_nin IN BOOLEAN := TRUE,
      id_episode_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_prof_team_leader_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
      ID_PROF_TEAM_LEADER_nin IN BOOLEAN := TRUE,
      id_professional_in IN SR_PROF_TEAM_DET_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      id_category_sub_in IN SR_PROF_TEAM_DET_HIST.ID_CATEGORY_SUB%TYPE DEFAULT NULL,
      ID_CATEGORY_SUB_nin IN BOOLEAN := TRUE,
      id_prof_team_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
      ID_PROF_TEAM_nin IN BOOLEAN := TRUE,
      flg_status_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_prof_reg_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_REG%TYPE DEFAULT NULL,
      ID_PROF_REG_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      dt_begin_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      DT_BEGIN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_end_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
      DT_END_TSTZ_nin IN BOOLEAN := TRUE,
      dt_reg_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_REG_TSTZ%TYPE DEFAULT NULL,
      DT_REG_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      id_episode_context_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE_CONTEXT%TYPE DEFAULT NULL,
      ID_EPISODE_CONTEXT_nin IN BOOLEAN := TRUE,
      create_user_in IN SR_PROF_TEAM_DET_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN SR_PROF_TEAM_DET_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN SR_PROF_TEAM_DET_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN SR_PROF_TEAM_DET_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN SR_PROF_TEAM_DET_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN SR_PROF_TEAM_DET_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_SR_PROF_TEAM_DET_n NUMBER(1);
   l_FLG_STATUS_HIST_n NUMBER(1);
   l_ID_SR_EPIS_INTERV_HIST_n NUMBER(1);
   l_ID_SURGERY_RECORD_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
   l_ID_PROF_TEAM_LEADER_n NUMBER(1);
   l_ID_PROFESSIONAL_n NUMBER(1);
   l_ID_CATEGORY_SUB_n NUMBER(1);
   l_ID_PROF_TEAM_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_ID_PROF_REG_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_DT_BEGIN_TSTZ_n NUMBER(1);
   l_DT_END_TSTZ_n NUMBER(1);
   l_DT_REG_TSTZ_n NUMBER(1);
   l_DT_CANCEL_TSTZ_n NUMBER(1);
   l_ID_EPISODE_CONTEXT_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   BEGIN

   l_ID_SR_PROF_TEAM_DET_n := sys.diutil.bool_to_int(ID_SR_PROF_TEAM_DET_nin);
   l_FLG_STATUS_HIST_n := sys.diutil.bool_to_int(FLG_STATUS_HIST_nin);
   l_ID_SR_EPIS_INTERV_HIST_n := sys.diutil.bool_to_int(ID_SR_EPIS_INTERV_HIST_nin);
   l_ID_SURGERY_RECORD_n := sys.diutil.bool_to_int(ID_SURGERY_RECORD_nin);
   l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
   l_ID_PROF_TEAM_LEADER_n := sys.diutil.bool_to_int(ID_PROF_TEAM_LEADER_nin);
   l_ID_PROFESSIONAL_n := sys.diutil.bool_to_int(ID_PROFESSIONAL_nin);
   l_ID_CATEGORY_SUB_n := sys.diutil.bool_to_int(ID_CATEGORY_SUB_nin);
   l_ID_PROF_TEAM_n := sys.diutil.bool_to_int(ID_PROF_TEAM_nin);
   l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
   l_ID_PROF_REG_n := sys.diutil.bool_to_int(ID_PROF_REG_nin);
   l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
   l_DT_BEGIN_TSTZ_n := sys.diutil.bool_to_int(DT_BEGIN_TSTZ_nin);
   l_DT_END_TSTZ_n := sys.diutil.bool_to_int(DT_END_TSTZ_nin);
   l_DT_REG_TSTZ_n := sys.diutil.bool_to_int(DT_REG_TSTZ_nin);
   l_DT_CANCEL_TSTZ_n := sys.diutil.bool_to_int(DT_CANCEL_TSTZ_nin);
   l_ID_EPISODE_CONTEXT_n := sys.diutil.bool_to_int(ID_EPISODE_CONTEXT_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);


         UPDATE SR_PROF_TEAM_DET_HIST SET
     ID_SR_PROF_TEAM_DET = decode (l_ID_SR_PROF_TEAM_DET_n,0,id_sr_prof_team_det_in, NVL (id_sr_prof_team_det_in, ID_SR_PROF_TEAM_DET)),
     FLG_STATUS_HIST = decode (l_FLG_STATUS_HIST_n,0,flg_status_hist_in, NVL (flg_status_hist_in, FLG_STATUS_HIST)),
     ID_SR_EPIS_INTERV_HIST = decode (l_ID_SR_EPIS_INTERV_HIST_n,0,id_sr_epis_interv_hist_in, NVL (id_sr_epis_interv_hist_in, ID_SR_EPIS_INTERV_HIST)),
     ID_SURGERY_RECORD = decode (l_ID_SURGERY_RECORD_n,0,id_surgery_record_in, NVL (id_surgery_record_in, ID_SURGERY_RECORD)),
     ID_EPISODE = decode (l_ID_EPISODE_n,0,id_episode_in, NVL (id_episode_in, ID_EPISODE)),
     ID_PROF_TEAM_LEADER = decode (l_ID_PROF_TEAM_LEADER_n,0,id_prof_team_leader_in, NVL (id_prof_team_leader_in, ID_PROF_TEAM_LEADER)),
     ID_PROFESSIONAL = decode (l_ID_PROFESSIONAL_n,0,id_professional_in, NVL (id_professional_in, ID_PROFESSIONAL)),
     ID_CATEGORY_SUB = decode (l_ID_CATEGORY_SUB_n,0,id_category_sub_in, NVL (id_category_sub_in, ID_CATEGORY_SUB)),
     ID_PROF_TEAM = decode (l_ID_PROF_TEAM_n,0,id_prof_team_in, NVL (id_prof_team_in, ID_PROF_TEAM)),
     FLG_STATUS = decode (l_FLG_STATUS_n,0,flg_status_in, NVL (flg_status_in, FLG_STATUS)),
     ID_PROF_REG = decode (l_ID_PROF_REG_n,0,id_prof_reg_in, NVL (id_prof_reg_in, ID_PROF_REG)),
     ID_PROF_CANCEL = decode (l_ID_PROF_CANCEL_n,0,id_prof_cancel_in, NVL (id_prof_cancel_in, ID_PROF_CANCEL)),
     DT_BEGIN_TSTZ = decode (l_DT_BEGIN_TSTZ_n,0,dt_begin_tstz_in, NVL (dt_begin_tstz_in, DT_BEGIN_TSTZ)),
     DT_END_TSTZ = decode (l_DT_END_TSTZ_n,0,dt_end_tstz_in, NVL (dt_end_tstz_in, DT_END_TSTZ)),
     DT_REG_TSTZ = decode (l_DT_REG_TSTZ_n,0,dt_reg_tstz_in, NVL (dt_reg_tstz_in, DT_REG_TSTZ)),
     DT_CANCEL_TSTZ = decode (l_DT_CANCEL_TSTZ_n,0,dt_cancel_tstz_in, NVL (dt_cancel_tstz_in, DT_CANCEL_TSTZ)),
     ID_EPISODE_CONTEXT = decode (l_ID_EPISODE_CONTEXT_n,0,id_episode_context_in, NVL (id_episode_context_in, ID_EPISODE_CONTEXT)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION))
          WHERE
             ID_SR_PROF_TEAM_DET_HIST = id_sr_prof_team_det_hist_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'SR_PROF_TEAM_DET_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           IF l_name = 'SR_PFH_CONTEXT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE_CONTEXT'
               , value_in => id_episode_context_in);
           END IF;
           IF l_name = 'SR_PFH_SREIH_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SR_EPIS_INTERV_HIST'
               , value_in => id_sr_epis_interv_hist_in);
           END IF;
           IF l_name = 'SR_PFH_SRPT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SR_PROF_TEAM_DET'
               , value_in => id_sr_prof_team_det_in);
           END IF;
           IF l_name = 'SR_PFH_TEAM_CATS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CATEGORY_SUB'
               , value_in => id_category_sub_in);
           END IF;
           IF l_name = 'SR_PF_TEAMH_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'SR_PF_TEAMH_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_TEAM_LEADER'
               , value_in => id_prof_team_leader_in);
           END IF;
           IF l_name = 'SR_PF_TEAMH_PROF_FK2'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           IF l_name = 'SR_PF_TEAMH_PROF_FK3'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_REG'
               , value_in => id_prof_reg_in);
           END IF;
           IF l_name = 'SR_PF_TEAMH_PROF_FK4'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'SR_PF_TEAMH_PROF_TEAM_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_TEAM'
               , value_in => id_prof_team_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_sr_prof_team_det_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE,
      id_sr_prof_team_det_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET%TYPE DEFAULT NULL,
      ID_SR_PROF_TEAM_DET_nin IN BOOLEAN := TRUE,
      flg_status_hist_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS_HIST%TYPE DEFAULT NULL,
      FLG_STATUS_HIST_nin IN BOOLEAN := TRUE,
      id_sr_epis_interv_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_EPIS_INTERV_HIST%TYPE DEFAULT NULL,
      ID_SR_EPIS_INTERV_HIST_nin IN BOOLEAN := TRUE,
      id_surgery_record_in IN SR_PROF_TEAM_DET_HIST.ID_SURGERY_RECORD%TYPE DEFAULT NULL,
      ID_SURGERY_RECORD_nin IN BOOLEAN := TRUE,
      id_episode_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_prof_team_leader_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
      ID_PROF_TEAM_LEADER_nin IN BOOLEAN := TRUE,
      id_professional_in IN SR_PROF_TEAM_DET_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      id_category_sub_in IN SR_PROF_TEAM_DET_HIST.ID_CATEGORY_SUB%TYPE DEFAULT NULL,
      ID_CATEGORY_SUB_nin IN BOOLEAN := TRUE,
      id_prof_team_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
      ID_PROF_TEAM_nin IN BOOLEAN := TRUE,
      flg_status_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_prof_reg_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_REG%TYPE DEFAULT NULL,
      ID_PROF_REG_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      dt_begin_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      DT_BEGIN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_end_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
      DT_END_TSTZ_nin IN BOOLEAN := TRUE,
      dt_reg_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_REG_TSTZ%TYPE DEFAULT NULL,
      DT_REG_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      id_episode_context_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE_CONTEXT%TYPE DEFAULT NULL,
      ID_EPISODE_CONTEXT_nin IN BOOLEAN := TRUE,
      create_user_in IN SR_PROF_TEAM_DET_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN SR_PROF_TEAM_DET_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN SR_PROF_TEAM_DET_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN SR_PROF_TEAM_DET_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN SR_PROF_TEAM_DET_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN SR_PROF_TEAM_DET_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_sr_prof_team_det_hist_in => id_sr_prof_team_det_hist_in,
      id_sr_prof_team_det_in => id_sr_prof_team_det_in,
      ID_SR_PROF_TEAM_DET_nin => ID_SR_PROF_TEAM_DET_nin,
      flg_status_hist_in => flg_status_hist_in,
      FLG_STATUS_HIST_nin => FLG_STATUS_HIST_nin,
      id_sr_epis_interv_hist_in => id_sr_epis_interv_hist_in,
      ID_SR_EPIS_INTERV_HIST_nin => ID_SR_EPIS_INTERV_HIST_nin,
      id_surgery_record_in => id_surgery_record_in,
      ID_SURGERY_RECORD_nin => ID_SURGERY_RECORD_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      id_prof_team_leader_in => id_prof_team_leader_in,
      ID_PROF_TEAM_LEADER_nin => ID_PROF_TEAM_LEADER_nin,
      id_professional_in => id_professional_in,
      ID_PROFESSIONAL_nin => ID_PROFESSIONAL_nin,
      id_category_sub_in => id_category_sub_in,
      ID_CATEGORY_SUB_nin => ID_CATEGORY_SUB_nin,
      id_prof_team_in => id_prof_team_in,
      ID_PROF_TEAM_nin => ID_PROF_TEAM_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      id_prof_reg_in => id_prof_reg_in,
      ID_PROF_REG_nin => ID_PROF_REG_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      dt_begin_tstz_in => dt_begin_tstz_in,
      DT_BEGIN_TSTZ_nin => DT_BEGIN_TSTZ_nin,
      dt_end_tstz_in => dt_end_tstz_in,
      DT_END_TSTZ_nin => DT_END_TSTZ_nin,
      dt_reg_tstz_in => dt_reg_tstz_in,
      DT_REG_TSTZ_nin => DT_REG_TSTZ_nin,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      DT_CANCEL_TSTZ_nin => DT_CANCEL_TSTZ_nin,
      id_episode_context_in => id_episode_context_in,
      ID_EPISODE_CONTEXT_nin => ID_EPISODE_CONTEXT_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_sr_prof_team_det_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET%TYPE DEFAULT NULL,
      ID_SR_PROF_TEAM_DET_nin IN BOOLEAN := TRUE,
      flg_status_hist_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS_HIST%TYPE DEFAULT NULL,
      FLG_STATUS_HIST_nin IN BOOLEAN := TRUE,
      id_sr_epis_interv_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_EPIS_INTERV_HIST%TYPE DEFAULT NULL,
      ID_SR_EPIS_INTERV_HIST_nin IN BOOLEAN := TRUE,
      id_surgery_record_in IN SR_PROF_TEAM_DET_HIST.ID_SURGERY_RECORD%TYPE DEFAULT NULL,
      ID_SURGERY_RECORD_nin IN BOOLEAN := TRUE,
      id_episode_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_prof_team_leader_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
      ID_PROF_TEAM_LEADER_nin IN BOOLEAN := TRUE,
      id_professional_in IN SR_PROF_TEAM_DET_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      id_category_sub_in IN SR_PROF_TEAM_DET_HIST.ID_CATEGORY_SUB%TYPE DEFAULT NULL,
      ID_CATEGORY_SUB_nin IN BOOLEAN := TRUE,
      id_prof_team_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
      ID_PROF_TEAM_nin IN BOOLEAN := TRUE,
      flg_status_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_prof_reg_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_REG%TYPE DEFAULT NULL,
      ID_PROF_REG_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      dt_begin_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      DT_BEGIN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_end_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
      DT_END_TSTZ_nin IN BOOLEAN := TRUE,
      dt_reg_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_REG_TSTZ%TYPE DEFAULT NULL,
      DT_REG_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      id_episode_context_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE_CONTEXT%TYPE DEFAULT NULL,
      ID_EPISODE_CONTEXT_nin IN BOOLEAN := TRUE,
      create_user_in IN SR_PROF_TEAM_DET_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN SR_PROF_TEAM_DET_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN SR_PROF_TEAM_DET_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN SR_PROF_TEAM_DET_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN SR_PROF_TEAM_DET_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN SR_PROF_TEAM_DET_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_ID_SR_PROF_TEAM_DET_n NUMBER(1);
   l_FLG_STATUS_HIST_n NUMBER(1);
   l_ID_SR_EPIS_INTERV_HIST_n NUMBER(1);
   l_ID_SURGERY_RECORD_n NUMBER(1);
   l_ID_EPISODE_n NUMBER(1);
   l_ID_PROF_TEAM_LEADER_n NUMBER(1);
   l_ID_PROFESSIONAL_n NUMBER(1);
   l_ID_CATEGORY_SUB_n NUMBER(1);
   l_ID_PROF_TEAM_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_ID_PROF_REG_n NUMBER(1);
   l_ID_PROF_CANCEL_n NUMBER(1);
   l_DT_BEGIN_TSTZ_n NUMBER(1);
   l_DT_END_TSTZ_n NUMBER(1);
   l_DT_REG_TSTZ_n NUMBER(1);
   l_DT_CANCEL_TSTZ_n NUMBER(1);
   l_ID_EPISODE_CONTEXT_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
      id_sr_prof_team_det_hist_in SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE;
   BEGIN



      l_ID_SR_PROF_TEAM_DET_n := sys.diutil.bool_to_int(ID_SR_PROF_TEAM_DET_nin);
      l_FLG_STATUS_HIST_n := sys.diutil.bool_to_int(FLG_STATUS_HIST_nin);
      l_ID_SR_EPIS_INTERV_HIST_n := sys.diutil.bool_to_int(ID_SR_EPIS_INTERV_HIST_nin);
      l_ID_SURGERY_RECORD_n := sys.diutil.bool_to_int(ID_SURGERY_RECORD_nin);
      l_ID_EPISODE_n := sys.diutil.bool_to_int(ID_EPISODE_nin);
      l_ID_PROF_TEAM_LEADER_n := sys.diutil.bool_to_int(ID_PROF_TEAM_LEADER_nin);
      l_ID_PROFESSIONAL_n := sys.diutil.bool_to_int(ID_PROFESSIONAL_nin);
      l_ID_CATEGORY_SUB_n := sys.diutil.bool_to_int(ID_CATEGORY_SUB_nin);
      l_ID_PROF_TEAM_n := sys.diutil.bool_to_int(ID_PROF_TEAM_nin);
      l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
      l_ID_PROF_REG_n := sys.diutil.bool_to_int(ID_PROF_REG_nin);
      l_ID_PROF_CANCEL_n := sys.diutil.bool_to_int(ID_PROF_CANCEL_nin);
      l_DT_BEGIN_TSTZ_n := sys.diutil.bool_to_int(DT_BEGIN_TSTZ_nin);
      l_DT_END_TSTZ_n := sys.diutil.bool_to_int(DT_END_TSTZ_nin);
      l_DT_REG_TSTZ_n := sys.diutil.bool_to_int(DT_REG_TSTZ_nin);
      l_DT_CANCEL_TSTZ_n := sys.diutil.bool_to_int(DT_CANCEL_TSTZ_nin);
      l_ID_EPISODE_CONTEXT_n := sys.diutil.bool_to_int(ID_EPISODE_CONTEXT_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);



l_sql := 'UPDATE SR_PROF_TEAM_DET_HIST SET '
     || ' ID_SR_PROF_TEAM_DET = decode (' || l_ID_SR_PROF_TEAM_DET_n || ',0,:id_sr_prof_team_det_in, NVL (:id_sr_prof_team_det_in, ID_SR_PROF_TEAM_DET)) '|| ','
     || ' FLG_STATUS_HIST = decode (' || l_FLG_STATUS_HIST_n || ',0,:flg_status_hist_in, NVL (:flg_status_hist_in, FLG_STATUS_HIST)) '|| ','
     || ' ID_SR_EPIS_INTERV_HIST = decode (' || l_ID_SR_EPIS_INTERV_HIST_n || ',0,:id_sr_epis_interv_hist_in, NVL (:id_sr_epis_interv_hist_in, ID_SR_EPIS_INTERV_HIST)) '|| ','
     || ' ID_SURGERY_RECORD = decode (' || l_ID_SURGERY_RECORD_n || ',0,:id_surgery_record_in, NVL (:id_surgery_record_in, ID_SURGERY_RECORD)) '|| ','
     || ' ID_EPISODE = decode (' || l_ID_EPISODE_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) '|| ','
     || ' ID_PROF_TEAM_LEADER = decode (' || l_ID_PROF_TEAM_LEADER_n || ',0,:id_prof_team_leader_in, NVL (:id_prof_team_leader_in, ID_PROF_TEAM_LEADER)) '|| ','
     || ' ID_PROFESSIONAL = decode (' || l_ID_PROFESSIONAL_n || ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) '|| ','
     || ' ID_CATEGORY_SUB = decode (' || l_ID_CATEGORY_SUB_n || ',0,:id_category_sub_in, NVL (:id_category_sub_in, ID_CATEGORY_SUB)) '|| ','
     || ' ID_PROF_TEAM = decode (' || l_ID_PROF_TEAM_n || ',0,:id_prof_team_in, NVL (:id_prof_team_in, ID_PROF_TEAM)) '|| ','
     || ' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) '|| ','
     || ' ID_PROF_REG = decode (' || l_ID_PROF_REG_n || ',0,:id_prof_reg_in, NVL (:id_prof_reg_in, ID_PROF_REG)) '|| ','
     || ' ID_PROF_CANCEL = decode (' || l_ID_PROF_CANCEL_n || ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) '|| ','
     || ' DT_BEGIN_TSTZ = decode (' || l_DT_BEGIN_TSTZ_n || ',0,:dt_begin_tstz_in, NVL (:dt_begin_tstz_in, DT_BEGIN_TSTZ)) '|| ','
     || ' DT_END_TSTZ = decode (' || l_DT_END_TSTZ_n || ',0,:dt_end_tstz_in, NVL (:dt_end_tstz_in, DT_END_TSTZ)) '|| ','
     || ' DT_REG_TSTZ = decode (' || l_DT_REG_TSTZ_n || ',0,:dt_reg_tstz_in, NVL (:dt_reg_tstz_in, DT_REG_TSTZ)) '|| ','
     || ' DT_CANCEL_TSTZ = decode (' || l_DT_CANCEL_TSTZ_n || ',0,:dt_cancel_tstz_in, NVL (:dt_cancel_tstz_in, DT_CANCEL_TSTZ)) '|| ','
     || ' ID_EPISODE_CONTEXT = decode (' || l_ID_EPISODE_CONTEXT_n || ',0,:id_episode_context_in, NVL (:id_episode_context_in, ID_EPISODE_CONTEXT)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_sr_prof_team_det_in,
     flg_status_hist_in,
     id_sr_epis_interv_hist_in,
     id_surgery_record_in,
     id_episode_in,
     id_prof_team_leader_in,
     id_professional_in,
     id_category_sub_in,
     id_prof_team_in,
     flg_status_in,
     id_prof_reg_in,
     id_prof_cancel_in,
     dt_begin_tstz_in,
     dt_end_tstz_in,
     dt_reg_tstz_in,
     dt_cancel_tstz_in,
     id_episode_context_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'SR_PROF_TEAM_DET_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           IF l_name = 'SR_PFH_CONTEXT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE_CONTEXT'
               , value_in => id_episode_context_in);
           END IF;
           IF l_name = 'SR_PFH_SREIH_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SR_EPIS_INTERV_HIST'
               , value_in => id_sr_epis_interv_hist_in);
           END IF;
           IF l_name = 'SR_PFH_SRPT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SR_PROF_TEAM_DET'
               , value_in => id_sr_prof_team_det_in);
           END IF;
           IF l_name = 'SR_PFH_TEAM_CATS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_CATEGORY_SUB'
               , value_in => id_category_sub_in);
           END IF;
           IF l_name = 'SR_PF_TEAMH_EPIS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPISODE'
               , value_in => id_episode_in);
           END IF;
           IF l_name = 'SR_PF_TEAMH_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_TEAM_LEADER'
               , value_in => id_prof_team_leader_in);
           END IF;
           IF l_name = 'SR_PF_TEAMH_PROF_FK2'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           IF l_name = 'SR_PF_TEAMH_PROF_FK3'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_REG'
               , value_in => id_prof_reg_in);
           END IF;
           IF l_name = 'SR_PF_TEAMH_PROF_FK4'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CANCEL'
               , value_in => id_prof_cancel_in);
           END IF;
           IF l_name = 'SR_PF_TEAMH_PROF_TEAM_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_TEAM'
               , value_in => id_prof_team_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_sr_prof_team_det_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET%TYPE DEFAULT NULL,
      ID_SR_PROF_TEAM_DET_nin IN BOOLEAN := TRUE,
      flg_status_hist_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS_HIST%TYPE DEFAULT NULL,
      FLG_STATUS_HIST_nin IN BOOLEAN := TRUE,
      id_sr_epis_interv_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_EPIS_INTERV_HIST%TYPE DEFAULT NULL,
      ID_SR_EPIS_INTERV_HIST_nin IN BOOLEAN := TRUE,
      id_surgery_record_in IN SR_PROF_TEAM_DET_HIST.ID_SURGERY_RECORD%TYPE DEFAULT NULL,
      ID_SURGERY_RECORD_nin IN BOOLEAN := TRUE,
      id_episode_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      ID_EPISODE_nin IN BOOLEAN := TRUE,
      id_prof_team_leader_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
      ID_PROF_TEAM_LEADER_nin IN BOOLEAN := TRUE,
      id_professional_in IN SR_PROF_TEAM_DET_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      id_category_sub_in IN SR_PROF_TEAM_DET_HIST.ID_CATEGORY_SUB%TYPE DEFAULT NULL,
      ID_CATEGORY_SUB_nin IN BOOLEAN := TRUE,
      id_prof_team_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
      ID_PROF_TEAM_nin IN BOOLEAN := TRUE,
      flg_status_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_prof_reg_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_REG%TYPE DEFAULT NULL,
      ID_PROF_REG_nin IN BOOLEAN := TRUE,
      id_prof_cancel_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      ID_PROF_CANCEL_nin IN BOOLEAN := TRUE,
      dt_begin_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      DT_BEGIN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_end_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
      DT_END_TSTZ_nin IN BOOLEAN := TRUE,
      dt_reg_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_REG_TSTZ%TYPE DEFAULT NULL,
      DT_REG_TSTZ_nin IN BOOLEAN := TRUE,
      dt_cancel_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      DT_CANCEL_TSTZ_nin IN BOOLEAN := TRUE,
      id_episode_context_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE_CONTEXT%TYPE DEFAULT NULL,
      ID_EPISODE_CONTEXT_nin IN BOOLEAN := TRUE,
      create_user_in IN SR_PROF_TEAM_DET_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN SR_PROF_TEAM_DET_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN SR_PROF_TEAM_DET_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN SR_PROF_TEAM_DET_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN SR_PROF_TEAM_DET_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN SR_PROF_TEAM_DET_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_sr_prof_team_det_in => id_sr_prof_team_det_in,
      ID_SR_PROF_TEAM_DET_nin => ID_SR_PROF_TEAM_DET_nin,
      flg_status_hist_in => flg_status_hist_in,
      FLG_STATUS_HIST_nin => FLG_STATUS_HIST_nin,
      id_sr_epis_interv_hist_in => id_sr_epis_interv_hist_in,
      ID_SR_EPIS_INTERV_HIST_nin => ID_SR_EPIS_INTERV_HIST_nin,
      id_surgery_record_in => id_surgery_record_in,
      ID_SURGERY_RECORD_nin => ID_SURGERY_RECORD_nin,
      id_episode_in => id_episode_in,
      ID_EPISODE_nin => ID_EPISODE_nin,
      id_prof_team_leader_in => id_prof_team_leader_in,
      ID_PROF_TEAM_LEADER_nin => ID_PROF_TEAM_LEADER_nin,
      id_professional_in => id_professional_in,
      ID_PROFESSIONAL_nin => ID_PROFESSIONAL_nin,
      id_category_sub_in => id_category_sub_in,
      ID_CATEGORY_SUB_nin => ID_CATEGORY_SUB_nin,
      id_prof_team_in => id_prof_team_in,
      ID_PROF_TEAM_nin => ID_PROF_TEAM_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      id_prof_reg_in => id_prof_reg_in,
      ID_PROF_REG_nin => ID_PROF_REG_nin,
      id_prof_cancel_in => id_prof_cancel_in,
      ID_PROF_CANCEL_nin => ID_PROF_CANCEL_nin,
      dt_begin_tstz_in => dt_begin_tstz_in,
      DT_BEGIN_TSTZ_nin => DT_BEGIN_TSTZ_nin,
      dt_end_tstz_in => dt_end_tstz_in,
      DT_END_TSTZ_nin => DT_END_TSTZ_nin,
      dt_reg_tstz_in => dt_reg_tstz_in,
      DT_REG_TSTZ_nin => DT_REG_TSTZ_nin,
      dt_cancel_tstz_in => dt_cancel_tstz_in,
      DT_CANCEL_TSTZ_nin => DT_CANCEL_TSTZ_nin,
      id_episode_context_in => id_episode_context_in,
      ID_EPISODE_CONTEXT_nin => ID_EPISODE_CONTEXT_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN SR_PROF_TEAM_DET_HIST%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_sr_prof_team_det_hist_in => rec_in.ID_SR_PROF_TEAM_DET_HIST,
         id_sr_prof_team_det_in => rec_in.ID_SR_PROF_TEAM_DET,
         flg_status_hist_in => rec_in.FLG_STATUS_HIST,
         id_sr_epis_interv_hist_in => rec_in.ID_SR_EPIS_INTERV_HIST,
         id_surgery_record_in => rec_in.ID_SURGERY_RECORD,
         id_episode_in => rec_in.ID_EPISODE,
         id_prof_team_leader_in => rec_in.ID_PROF_TEAM_LEADER,
         id_professional_in => rec_in.ID_PROFESSIONAL,
         id_category_sub_in => rec_in.ID_CATEGORY_SUB,
         id_prof_team_in => rec_in.ID_PROF_TEAM,
         flg_status_in => rec_in.FLG_STATUS,
         id_prof_reg_in => rec_in.ID_PROF_REG,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         dt_begin_tstz_in => rec_in.DT_BEGIN_TSTZ,
         dt_end_tstz_in => rec_in.DT_END_TSTZ,
         dt_reg_tstz_in => rec_in.DT_REG_TSTZ,
         dt_cancel_tstz_in => rec_in.DT_CANCEL_TSTZ,
         id_episode_context_in => rec_in.ID_EPISODE_CONTEXT,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN SR_PROF_TEAM_DET_HIST%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_sr_prof_team_det_hist_in => rec_in.ID_SR_PROF_TEAM_DET_HIST,
         id_sr_prof_team_det_in => rec_in.ID_SR_PROF_TEAM_DET,
         flg_status_hist_in => rec_in.FLG_STATUS_HIST,
         id_sr_epis_interv_hist_in => rec_in.ID_SR_EPIS_INTERV_HIST,
         id_surgery_record_in => rec_in.ID_SURGERY_RECORD,
         id_episode_in => rec_in.ID_EPISODE,
         id_prof_team_leader_in => rec_in.ID_PROF_TEAM_LEADER,
         id_professional_in => rec_in.ID_PROFESSIONAL,
         id_category_sub_in => rec_in.ID_CATEGORY_SUB,
         id_prof_team_in => rec_in.ID_PROF_TEAM,
         flg_status_in => rec_in.FLG_STATUS,
         id_prof_reg_in => rec_in.ID_PROF_REG,
         id_prof_cancel_in => rec_in.ID_PROF_CANCEL,
         dt_begin_tstz_in => rec_in.DT_BEGIN_TSTZ,
         dt_end_tstz_in => rec_in.DT_END_TSTZ,
         dt_reg_tstz_in => rec_in.DT_REG_TSTZ,
         dt_cancel_tstz_in => rec_in.DT_CANCEL_TSTZ,
         id_episode_context_in => rec_in.ID_EPISODE_CONTEXT,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_sr_prof_team_det_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE,
      id_sr_prof_team_det_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET%TYPE DEFAULT NULL,
      flg_status_hist_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS_HIST%TYPE DEFAULT NULL,
      id_sr_epis_interv_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_EPIS_INTERV_HIST%TYPE DEFAULT NULL,
      id_surgery_record_in IN SR_PROF_TEAM_DET_HIST.ID_SURGERY_RECORD%TYPE DEFAULT NULL,
      id_episode_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_prof_team_leader_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
      id_professional_in IN SR_PROF_TEAM_DET_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      id_category_sub_in IN SR_PROF_TEAM_DET_HIST.ID_CATEGORY_SUB%TYPE DEFAULT NULL,
      id_prof_team_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
      flg_status_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_reg_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_REG%TYPE DEFAULT NULL,
      id_prof_cancel_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_reg_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_REG_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_episode_context_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE_CONTEXT%TYPE DEFAULT NULL,
      create_user_in IN SR_PROF_TEAM_DET_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SR_PROF_TEAM_DET_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SR_PROF_TEAM_DET_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SR_PROF_TEAM_DET_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SR_PROF_TEAM_DET_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SR_PROF_TEAM_DET_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_sr_prof_team_det_hist_in => id_sr_prof_team_det_hist_in,
         id_sr_prof_team_det_in => id_sr_prof_team_det_in,
         flg_status_hist_in => flg_status_hist_in,
         id_sr_epis_interv_hist_in => id_sr_epis_interv_hist_in,
         id_surgery_record_in => id_surgery_record_in,
         id_episode_in => id_episode_in,
         id_prof_team_leader_in => id_prof_team_leader_in,
         id_professional_in => id_professional_in,
         id_category_sub_in => id_category_sub_in,
         id_prof_team_in => id_prof_team_in,
         flg_status_in => flg_status_in,
         id_prof_reg_in => id_prof_reg_in,
         id_prof_cancel_in => id_prof_cancel_in,
         dt_begin_tstz_in => dt_begin_tstz_in,
         dt_end_tstz_in => dt_end_tstz_in,
         dt_reg_tstz_in => dt_reg_tstz_in,
         dt_cancel_tstz_in => dt_cancel_tstz_in,
         id_episode_context_in => id_episode_context_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_sr_prof_team_det_hist_in => id_sr_prof_team_det_hist_in,
            id_sr_prof_team_det_in => id_sr_prof_team_det_in,
            flg_status_hist_in => flg_status_hist_in,
            id_sr_epis_interv_hist_in => id_sr_epis_interv_hist_in,
            id_surgery_record_in => id_surgery_record_in,
            id_episode_in => id_episode_in,
            id_prof_team_leader_in => id_prof_team_leader_in,
            id_professional_in => id_professional_in,
            id_category_sub_in => id_category_sub_in,
            id_prof_team_in => id_prof_team_in,
            flg_status_in => flg_status_in,
            id_prof_reg_in => id_prof_reg_in,
            id_prof_cancel_in => id_prof_cancel_in,
            dt_begin_tstz_in => dt_begin_tstz_in,
            dt_end_tstz_in => dt_end_tstz_in,
            dt_reg_tstz_in => dt_reg_tstz_in,
            dt_cancel_tstz_in => dt_cancel_tstz_in,
            id_episode_context_in => id_episode_context_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_sr_prof_team_det_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE,
      id_sr_prof_team_det_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET%TYPE DEFAULT NULL,
      flg_status_hist_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS_HIST%TYPE DEFAULT NULL,
      id_sr_epis_interv_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_EPIS_INTERV_HIST%TYPE DEFAULT NULL,
      id_surgery_record_in IN SR_PROF_TEAM_DET_HIST.ID_SURGERY_RECORD%TYPE DEFAULT NULL,
      id_episode_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE%TYPE DEFAULT NULL,
      id_prof_team_leader_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM_LEADER%TYPE DEFAULT NULL,
      id_professional_in IN SR_PROF_TEAM_DET_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      id_category_sub_in IN SR_PROF_TEAM_DET_HIST.ID_CATEGORY_SUB%TYPE DEFAULT NULL,
      id_prof_team_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM%TYPE DEFAULT NULL,
      flg_status_in IN SR_PROF_TEAM_DET_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_prof_reg_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_REG%TYPE DEFAULT NULL,
      id_prof_cancel_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_CANCEL%TYPE DEFAULT NULL,
      dt_begin_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_BEGIN_TSTZ%TYPE DEFAULT NULL,
      dt_end_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_END_TSTZ%TYPE DEFAULT NULL,
      dt_reg_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_REG_TSTZ%TYPE DEFAULT NULL,
      dt_cancel_tstz_in IN SR_PROF_TEAM_DET_HIST.DT_CANCEL_TSTZ%TYPE DEFAULT NULL,
      id_episode_context_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE_CONTEXT%TYPE DEFAULT NULL,
      create_user_in IN SR_PROF_TEAM_DET_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN SR_PROF_TEAM_DET_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN SR_PROF_TEAM_DET_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN SR_PROF_TEAM_DET_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN SR_PROF_TEAM_DET_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN SR_PROF_TEAM_DET_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_sr_prof_team_det_hist_in,
      id_sr_prof_team_det_in,
      flg_status_hist_in,
      id_sr_epis_interv_hist_in,
      id_surgery_record_in,
      id_episode_in,
      id_prof_team_leader_in,
      id_professional_in,
      id_category_sub_in,
      id_prof_team_in,
      flg_status_in,
      id_prof_reg_in,
      id_prof_cancel_in,
      dt_begin_tstz_in,
      dt_end_tstz_in,
      dt_reg_tstz_in,
      dt_cancel_tstz_in,
      id_episode_context_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN SR_PROF_TEAM_DET_HIST_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_SR_PROF_TEAM_DET_HIST ID_SR_PROF_TEAM_DET_HIST_cc;
      l_ID_SR_PROF_TEAM_DET ID_SR_PROF_TEAM_DET_cc;
      l_FLG_STATUS_HIST FLG_STATUS_HIST_cc;
      l_ID_SR_EPIS_INTERV_HIST ID_SR_EPIS_INTERV_HIST_cc;
      l_ID_SURGERY_RECORD ID_SURGERY_RECORD_cc;
      l_ID_EPISODE ID_EPISODE_cc;
      l_ID_PROF_TEAM_LEADER ID_PROF_TEAM_LEADER_cc;
      l_ID_PROFESSIONAL ID_PROFESSIONAL_cc;
      l_ID_CATEGORY_SUB ID_CATEGORY_SUB_cc;
      l_ID_PROF_TEAM ID_PROF_TEAM_cc;
      l_FLG_STATUS FLG_STATUS_cc;
      l_ID_PROF_REG ID_PROF_REG_cc;
      l_ID_PROF_CANCEL ID_PROF_CANCEL_cc;
      l_DT_BEGIN_TSTZ DT_BEGIN_TSTZ_cc;
      l_DT_END_TSTZ DT_END_TSTZ_cc;
      l_DT_REG_TSTZ DT_REG_TSTZ_cc;
      l_DT_CANCEL_TSTZ DT_CANCEL_TSTZ_cc;
      l_ID_EPISODE_CONTEXT ID_EPISODE_CONTEXT_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_SR_PROF_TEAM_DET_HIST(i) := col_in(i).ID_SR_PROF_TEAM_DET_HIST;
         l_ID_SR_PROF_TEAM_DET(i) := col_in(i).ID_SR_PROF_TEAM_DET;
         l_FLG_STATUS_HIST(i) := col_in(i).FLG_STATUS_HIST;
         l_ID_SR_EPIS_INTERV_HIST(i) := col_in(i).ID_SR_EPIS_INTERV_HIST;
         l_ID_SURGERY_RECORD(i) := col_in(i).ID_SURGERY_RECORD;
         l_ID_EPISODE(i) := col_in(i).ID_EPISODE;
         l_ID_PROF_TEAM_LEADER(i) := col_in(i).ID_PROF_TEAM_LEADER;
         l_ID_PROFESSIONAL(i) := col_in(i).ID_PROFESSIONAL;
         l_ID_CATEGORY_SUB(i) := col_in(i).ID_CATEGORY_SUB;
         l_ID_PROF_TEAM(i) := col_in(i).ID_PROF_TEAM;
         l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
         l_ID_PROF_REG(i) := col_in(i).ID_PROF_REG;
         l_ID_PROF_CANCEL(i) := col_in(i).ID_PROF_CANCEL;
         l_DT_BEGIN_TSTZ(i) := col_in(i).DT_BEGIN_TSTZ;
         l_DT_END_TSTZ(i) := col_in(i).DT_END_TSTZ;
         l_DT_REG_TSTZ(i) := col_in(i).DT_REG_TSTZ;
         l_DT_CANCEL_TSTZ(i) := col_in(i).DT_CANCEL_TSTZ;
         l_ID_EPISODE_CONTEXT(i) := col_in(i).ID_EPISODE_CONTEXT;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE SR_PROF_TEAM_DET_HIST SET
               ID_SR_PROF_TEAM_DET = NVL (l_ID_SR_PROF_TEAM_DET(i), ID_SR_PROF_TEAM_DET),
               FLG_STATUS_HIST = NVL (l_FLG_STATUS_HIST(i), FLG_STATUS_HIST),
               ID_SR_EPIS_INTERV_HIST = NVL (l_ID_SR_EPIS_INTERV_HIST(i), ID_SR_EPIS_INTERV_HIST),
               ID_SURGERY_RECORD = NVL (l_ID_SURGERY_RECORD(i), ID_SURGERY_RECORD),
               ID_EPISODE = NVL (l_ID_EPISODE(i), ID_EPISODE),
               ID_PROF_TEAM_LEADER = NVL (l_ID_PROF_TEAM_LEADER(i), ID_PROF_TEAM_LEADER),
               ID_PROFESSIONAL = NVL (l_ID_PROFESSIONAL(i), ID_PROFESSIONAL),
               ID_CATEGORY_SUB = NVL (l_ID_CATEGORY_SUB(i), ID_CATEGORY_SUB),
               ID_PROF_TEAM = NVL (l_ID_PROF_TEAM(i), ID_PROF_TEAM),
               FLG_STATUS = NVL (l_FLG_STATUS(i), FLG_STATUS),
               ID_PROF_REG = NVL (l_ID_PROF_REG(i), ID_PROF_REG),
               ID_PROF_CANCEL = NVL (l_ID_PROF_CANCEL(i), ID_PROF_CANCEL),
               DT_BEGIN_TSTZ = NVL (l_DT_BEGIN_TSTZ(i), DT_BEGIN_TSTZ),
               DT_END_TSTZ = NVL (l_DT_END_TSTZ(i), DT_END_TSTZ),
               DT_REG_TSTZ = NVL (l_DT_REG_TSTZ(i), DT_REG_TSTZ),
               DT_CANCEL_TSTZ = NVL (l_DT_CANCEL_TSTZ(i), DT_CANCEL_TSTZ),
               ID_EPISODE_CONTEXT = NVL (l_ID_EPISODE_CONTEXT(i), ID_EPISODE_CONTEXT),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION)
             WHERE
                ID_SR_PROF_TEAM_DET_HIST = l_ID_SR_PROF_TEAM_DET_HIST(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE SR_PROF_TEAM_DET_HIST SET
               ID_SR_PROF_TEAM_DET = l_ID_SR_PROF_TEAM_DET(i),
               FLG_STATUS_HIST = l_FLG_STATUS_HIST(i),
               ID_SR_EPIS_INTERV_HIST = l_ID_SR_EPIS_INTERV_HIST(i),
               ID_SURGERY_RECORD = l_ID_SURGERY_RECORD(i),
               ID_EPISODE = l_ID_EPISODE(i),
               ID_PROF_TEAM_LEADER = l_ID_PROF_TEAM_LEADER(i),
               ID_PROFESSIONAL = l_ID_PROFESSIONAL(i),
               ID_CATEGORY_SUB = l_ID_CATEGORY_SUB(i),
               ID_PROF_TEAM = l_ID_PROF_TEAM(i),
               FLG_STATUS = l_FLG_STATUS(i),
               ID_PROF_REG = l_ID_PROF_REG(i),
               ID_PROF_CANCEL = l_ID_PROF_CANCEL(i),
               DT_BEGIN_TSTZ = l_DT_BEGIN_TSTZ(i),
               DT_END_TSTZ = l_DT_END_TSTZ(i),
               DT_REG_TSTZ = l_DT_REG_TSTZ(i),
               DT_CANCEL_TSTZ = l_DT_CANCEL_TSTZ(i),
               ID_EPISODE_CONTEXT = l_ID_EPISODE_CONTEXT(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i)
             WHERE
                ID_SR_PROF_TEAM_DET_HIST = l_ID_SR_PROF_TEAM_DET_HIST(i)
          returning rowid bulk collect into rows_out;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN SR_PROF_TEAM_DET_HIST_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE SR_PROF_TEAM_DET_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE SR_PROF_TEAM_DET_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE SR_PROF_TEAM_DET_HIST set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE SR_PROF_TEAM_DET_HIST set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_sr_prof_team_det_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM SR_PROF_TEAM_DET_HIST
       WHERE
          ID_SR_PROF_TEAM_DET_HIST = id_sr_prof_team_det_hist_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_sr_prof_team_det_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_sr_prof_team_det_hist_in => id_sr_prof_team_det_hist_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_SR_PROF_TEAM_DET_HIST
   PROCEDURE del_ID_SR_PROF_TEAM_DET_HIST (
      id_sr_prof_team_det_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM SR_PROF_TEAM_DET_HIST
       WHERE ID_SR_PROF_TEAM_DET_HIST = id_sr_prof_team_det_hist_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_SR_PROF_TEAM_DET_HIST;






   -- Delete all rows for primary key column ID_SR_PROF_TEAM_DET_HIST
   PROCEDURE del_ID_SR_PROF_TEAM_DET_HIST (
      id_sr_prof_team_det_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_SR_PROF_TEAM_DET_HIST (
      id_sr_prof_team_det_hist_in => id_sr_prof_team_det_hist_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_SR_PROF_TEAM_DET_HIST;















   PROCEDURE del_SR_PFH_CONTEXT_FK (
      id_episode_context_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE_CONTEXT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM SR_PROF_TEAM_DET_HIST
       WHERE
          ID_EPISODE_CONTEXT = del_SR_PFH_CONTEXT_FK.id_episode_context_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_SR_PFH_CONTEXT_FK;



PROCEDURE del_SR_PFH_CONTEXT_FK (
      id_episode_context_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE_CONTEXT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_SR_PFH_CONTEXT_FK (
      id_episode_context_in => id_episode_context_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_SR_PFH_CONTEXT_FK;





   PROCEDURE del_SR_PFH_SREIH_FK (
      id_sr_epis_interv_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_EPIS_INTERV_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM SR_PROF_TEAM_DET_HIST
       WHERE
          ID_SR_EPIS_INTERV_HIST = del_SR_PFH_SREIH_FK.id_sr_epis_interv_hist_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_SR_PFH_SREIH_FK;



PROCEDURE del_SR_PFH_SREIH_FK (
      id_sr_epis_interv_hist_in IN SR_PROF_TEAM_DET_HIST.ID_SR_EPIS_INTERV_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_SR_PFH_SREIH_FK (
      id_sr_epis_interv_hist_in => id_sr_epis_interv_hist_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_SR_PFH_SREIH_FK;





   PROCEDURE del_SR_PFH_SRPT_FK (
      id_sr_prof_team_det_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM SR_PROF_TEAM_DET_HIST
       WHERE
          ID_SR_PROF_TEAM_DET = del_SR_PFH_SRPT_FK.id_sr_prof_team_det_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_SR_PFH_SRPT_FK;



PROCEDURE del_SR_PFH_SRPT_FK (
      id_sr_prof_team_det_in IN SR_PROF_TEAM_DET_HIST.ID_SR_PROF_TEAM_DET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_SR_PFH_SRPT_FK (
      id_sr_prof_team_det_in => id_sr_prof_team_det_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_SR_PFH_SRPT_FK;





   PROCEDURE del_SR_PFH_TEAM_CATS_FK (
      id_category_sub_in IN SR_PROF_TEAM_DET_HIST.ID_CATEGORY_SUB%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM SR_PROF_TEAM_DET_HIST
       WHERE
          ID_CATEGORY_SUB = del_SR_PFH_TEAM_CATS_FK.id_category_sub_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_SR_PFH_TEAM_CATS_FK;



PROCEDURE del_SR_PFH_TEAM_CATS_FK (
      id_category_sub_in IN SR_PROF_TEAM_DET_HIST.ID_CATEGORY_SUB%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_SR_PFH_TEAM_CATS_FK (
      id_category_sub_in => id_category_sub_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_SR_PFH_TEAM_CATS_FK;





   PROCEDURE del_SR_PF_TEAMH_EPIS_FK (
      id_episode_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM SR_PROF_TEAM_DET_HIST
       WHERE
          ID_EPISODE = del_SR_PF_TEAMH_EPIS_FK.id_episode_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_SR_PF_TEAMH_EPIS_FK;



PROCEDURE del_SR_PF_TEAMH_EPIS_FK (
      id_episode_in IN SR_PROF_TEAM_DET_HIST.ID_EPISODE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_SR_PF_TEAMH_EPIS_FK (
      id_episode_in => id_episode_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_SR_PF_TEAMH_EPIS_FK;





   PROCEDURE del_SR_PF_TEAMH_PROF_FK (
      id_prof_team_leader_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM_LEADER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM SR_PROF_TEAM_DET_HIST
       WHERE
          ID_PROF_TEAM_LEADER = del_SR_PF_TEAMH_PROF_FK.id_prof_team_leader_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_SR_PF_TEAMH_PROF_FK;



PROCEDURE del_SR_PF_TEAMH_PROF_FK (
      id_prof_team_leader_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM_LEADER%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_SR_PF_TEAMH_PROF_FK (
      id_prof_team_leader_in => id_prof_team_leader_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_SR_PF_TEAMH_PROF_FK;





   PROCEDURE del_SR_PF_TEAMH_PROF_FK2 (
      id_professional_in IN SR_PROF_TEAM_DET_HIST.ID_PROFESSIONAL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM SR_PROF_TEAM_DET_HIST
       WHERE
          ID_PROFESSIONAL = del_SR_PF_TEAMH_PROF_FK2.id_professional_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_SR_PF_TEAMH_PROF_FK2;



PROCEDURE del_SR_PF_TEAMH_PROF_FK2 (
      id_professional_in IN SR_PROF_TEAM_DET_HIST.ID_PROFESSIONAL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_SR_PF_TEAMH_PROF_FK2 (
      id_professional_in => id_professional_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_SR_PF_TEAMH_PROF_FK2;





   PROCEDURE del_SR_PF_TEAMH_PROF_FK3 (
      id_prof_reg_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_REG%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM SR_PROF_TEAM_DET_HIST
       WHERE
          ID_PROF_REG = del_SR_PF_TEAMH_PROF_FK3.id_prof_reg_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_SR_PF_TEAMH_PROF_FK3;



PROCEDURE del_SR_PF_TEAMH_PROF_FK3 (
      id_prof_reg_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_REG%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_SR_PF_TEAMH_PROF_FK3 (
      id_prof_reg_in => id_prof_reg_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_SR_PF_TEAMH_PROF_FK3;





   PROCEDURE del_SR_PF_TEAMH_PROF_FK4 (
      id_prof_cancel_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM SR_PROF_TEAM_DET_HIST
       WHERE
          ID_PROF_CANCEL = del_SR_PF_TEAMH_PROF_FK4.id_prof_cancel_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_SR_PF_TEAMH_PROF_FK4;



PROCEDURE del_SR_PF_TEAMH_PROF_FK4 (
      id_prof_cancel_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_CANCEL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_SR_PF_TEAMH_PROF_FK4 (
      id_prof_cancel_in => id_prof_cancel_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_SR_PF_TEAMH_PROF_FK4;





   PROCEDURE del_SR_PF_TEAMH_PROF_TEAM_FK (
      id_prof_team_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM SR_PROF_TEAM_DET_HIST
       WHERE
          ID_PROF_TEAM = del_SR_PF_TEAMH_PROF_TEAM_FK.id_prof_team_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_SR_PF_TEAMH_PROF_TEAM_FK;



PROCEDURE del_SR_PF_TEAMH_PROF_TEAM_FK (
      id_prof_team_in IN SR_PROF_TEAM_DET_HIST.ID_PROF_TEAM%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_SR_PF_TEAMH_PROF_TEAM_FK (
      id_prof_team_in => id_prof_team_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_SR_PF_TEAMH_PROF_TEAM_FK;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM SR_PROF_TEAM_DET_HIST';
      ELSE
         RETURN
            'DELETE FROM SR_PROF_TEAM_DET_HIST WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'SR_PROF_TEAM_DET_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'SR_PROF_TEAM_DET_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      sr_prof_team_det_hist_inout IN OUT SR_PROF_TEAM_DET_HIST%ROWTYPE
   )
   IS
   BEGIN
      sr_prof_team_det_hist_inout.ID_SR_PROF_TEAM_DET_HIST := NULL;
      sr_prof_team_det_hist_inout.ID_SR_PROF_TEAM_DET := NULL;
      sr_prof_team_det_hist_inout.FLG_STATUS_HIST := NULL;
      sr_prof_team_det_hist_inout.ID_SR_EPIS_INTERV_HIST := NULL;
      sr_prof_team_det_hist_inout.ID_SURGERY_RECORD := NULL;
      sr_prof_team_det_hist_inout.ID_EPISODE := NULL;
      sr_prof_team_det_hist_inout.ID_PROF_TEAM_LEADER := NULL;
      sr_prof_team_det_hist_inout.ID_PROFESSIONAL := NULL;
      sr_prof_team_det_hist_inout.ID_CATEGORY_SUB := NULL;
      sr_prof_team_det_hist_inout.ID_PROF_TEAM := NULL;
      sr_prof_team_det_hist_inout.FLG_STATUS := NULL;
      sr_prof_team_det_hist_inout.ID_PROF_REG := NULL;
      sr_prof_team_det_hist_inout.ID_PROF_CANCEL := NULL;
      sr_prof_team_det_hist_inout.DT_BEGIN_TSTZ := NULL;
      sr_prof_team_det_hist_inout.DT_END_TSTZ := NULL;
      sr_prof_team_det_hist_inout.DT_REG_TSTZ := NULL;
      sr_prof_team_det_hist_inout.DT_CANCEL_TSTZ := NULL;
      sr_prof_team_det_hist_inout.ID_EPISODE_CONTEXT := NULL;
      sr_prof_team_det_hist_inout.CREATE_USER := NULL;
      sr_prof_team_det_hist_inout.CREATE_TIME := NULL;
      sr_prof_team_det_hist_inout.CREATE_INSTITUTION := NULL;
      sr_prof_team_det_hist_inout.UPDATE_USER := NULL;
      sr_prof_team_det_hist_inout.UPDATE_TIME := NULL;
      sr_prof_team_det_hist_inout.UPDATE_INSTITUTION := NULL;
   END initrec;

   FUNCTION initrec RETURN SR_PROF_TEAM_DET_HIST%ROWTYPE
   IS
      l_sr_prof_team_det_hist SR_PROF_TEAM_DET_HIST%ROWTYPE;
   BEGIN
      RETURN l_sr_prof_team_det_hist;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN SR_PROF_TEAM_DET_HIST_tc
   IS
        data SR_PROF_TEAM_DET_HIST_tc;
   BEGIN
        select * bulk collect into data from SR_PROF_TEAM_DET_HIST where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001)*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN SR_PROF_TEAM_DET_HIST_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data SR_PROF_TEAM_DET_HIST_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_SR_PROF_TEAM_DET_HIST;
/
/
