/*-- Last Change Revision: $Rev: 920557 $*/
/*-- Last Change by: $Author: sergio.dias $*/
/*-- Date of last change: $Date: 2011-03-22 17:17:15 +0000 (ter, 22 mar 2011) $*/

CREATE OR REPLACE PACKAGE BODY ts_opinion_prof
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Março 17, 2011 12:4:39
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_opinion_prof_in      IN opinion_prof.id_opinion_prof%TYPE,
        id_opinion_in           IN opinion_prof.id_opinion%TYPE DEFAULT NULL,
        flg_type_in             IN opinion_prof.flg_type%TYPE DEFAULT NULL,
        id_professional_in      IN opinion_prof.id_professional%TYPE DEFAULT NULL,
        desc_reply_in           IN opinion_prof.desc_reply%TYPE DEFAULT NULL,
        dt_opinion_prof_tstz_in IN opinion_prof.dt_opinion_prof_tstz%TYPE DEFAULT NULL,
        flg_face_to_face_in     IN opinion_prof.flg_face_to_face%TYPE DEFAULT 'U',
        create_user_in          IN opinion_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN opinion_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN opinion_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN opinion_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN opinion_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN opinion_prof.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in     IN opinion_prof.id_cancel_reason%TYPE DEFAULT NULL,
        flg_co_sign_in          IN opinion_prof.flg_co_sign%TYPE DEFAULT 'N',
        dt_co_sign_in           IN opinion_prof.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in        IN opinion_prof.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in      IN opinion_prof.id_prof_co_sign%TYPE DEFAULT NULL,
        id_order_type_in        IN opinion_prof.id_order_type%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO opinion_prof
            (id_opinion_prof,
             id_opinion,
             flg_type,
             id_professional,
             desc_reply,
             dt_opinion_prof_tstz,
             flg_face_to_face,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_cancel_reason,
             flg_co_sign,
             dt_co_sign,
             notes_co_sign,
             id_prof_co_sign,
             id_order_type)
        VALUES
            (id_opinion_prof_in,
             id_opinion_in,
             flg_type_in,
             id_professional_in,
             desc_reply_in,
             dt_opinion_prof_tstz_in,
             flg_face_to_face_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_cancel_reason_in,
             flg_co_sign_in,
             dt_co_sign_in,
             notes_co_sign_in,
             id_prof_co_sign_in,
             id_order_type_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'OPINION_PROF');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    IF l_name = 'OPF_CRE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'OPF_OPN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_OPINION',
                                                        value_in           => id_opinion_in);
                    END IF;
                    IF l_name = 'OPF_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'OPP_ORDER_TYPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ORDER_TYPE',
                                                        value_in           => id_order_type_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_opinion_prof_in      IN opinion_prof.id_opinion_prof%TYPE,
        id_opinion_in           IN opinion_prof.id_opinion%TYPE DEFAULT NULL,
        flg_type_in             IN opinion_prof.flg_type%TYPE DEFAULT NULL,
        id_professional_in      IN opinion_prof.id_professional%TYPE DEFAULT NULL,
        desc_reply_in           IN opinion_prof.desc_reply%TYPE DEFAULT NULL,
        dt_opinion_prof_tstz_in IN opinion_prof.dt_opinion_prof_tstz%TYPE DEFAULT NULL,
        flg_face_to_face_in     IN opinion_prof.flg_face_to_face%TYPE DEFAULT 'U',
        create_user_in          IN opinion_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN opinion_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN opinion_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN opinion_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN opinion_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN opinion_prof.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in     IN opinion_prof.id_cancel_reason%TYPE DEFAULT NULL,
        flg_co_sign_in          IN opinion_prof.flg_co_sign%TYPE DEFAULT 'N',
        dt_co_sign_in           IN opinion_prof.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in        IN opinion_prof.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in      IN opinion_prof.id_prof_co_sign%TYPE DEFAULT NULL,
        id_order_type_in        IN opinion_prof.id_order_type%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_opinion_prof_in      => id_opinion_prof_in,
            id_opinion_in           => id_opinion_in,
            flg_type_in             => flg_type_in,
            id_professional_in      => id_professional_in,
            desc_reply_in           => desc_reply_in,
            dt_opinion_prof_tstz_in => dt_opinion_prof_tstz_in,
            flg_face_to_face_in     => flg_face_to_face_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            id_cancel_reason_in     => id_cancel_reason_in,
            flg_co_sign_in          => flg_co_sign_in,
            dt_co_sign_in           => dt_co_sign_in,
            notes_co_sign_in        => notes_co_sign_in,
            id_prof_co_sign_in      => id_prof_co_sign_in,
            id_order_type_in        => id_order_type_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN opinion_prof%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec opinion_prof%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_opinion_prof := next_key(sequence_in);
        END IF;
        ins(id_opinion_prof_in      => l_rec.id_opinion_prof,
            id_opinion_in           => l_rec.id_opinion,
            flg_type_in             => l_rec.flg_type,
            id_professional_in      => l_rec.id_professional,
            desc_reply_in           => l_rec.desc_reply,
            dt_opinion_prof_tstz_in => l_rec.dt_opinion_prof_tstz,
            flg_face_to_face_in     => l_rec.flg_face_to_face,
            create_user_in          => l_rec.create_user,
            create_time_in          => l_rec.create_time,
            create_institution_in   => l_rec.create_institution,
            update_user_in          => l_rec.update_user,
            update_time_in          => l_rec.update_time,
            update_institution_in   => l_rec.update_institution,
            id_cancel_reason_in     => l_rec.id_cancel_reason,
            flg_co_sign_in          => l_rec.flg_co_sign,
            dt_co_sign_in           => l_rec.dt_co_sign,
            notes_co_sign_in        => l_rec.notes_co_sign,
            id_prof_co_sign_in      => l_rec.id_prof_co_sign,
            id_order_type_in        => l_rec.id_order_type,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN opinion_prof%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN opinion_prof.id_opinion_prof%TYPE
    
     IS
        retval opinion_prof.id_opinion_prof%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_opinion_prof.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_OPINION_PROF'));
    END next_key;

    PROCEDURE ins
    (
        id_opinion_in           IN opinion_prof.id_opinion%TYPE DEFAULT NULL,
        flg_type_in             IN opinion_prof.flg_type%TYPE DEFAULT NULL,
        id_professional_in      IN opinion_prof.id_professional%TYPE DEFAULT NULL,
        desc_reply_in           IN opinion_prof.desc_reply%TYPE DEFAULT NULL,
        dt_opinion_prof_tstz_in IN opinion_prof.dt_opinion_prof_tstz%TYPE DEFAULT NULL,
        flg_face_to_face_in     IN opinion_prof.flg_face_to_face%TYPE DEFAULT 'U',
        create_user_in          IN opinion_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN opinion_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN opinion_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN opinion_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN opinion_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN opinion_prof.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in     IN opinion_prof.id_cancel_reason%TYPE DEFAULT NULL,
        flg_co_sign_in          IN opinion_prof.flg_co_sign%TYPE DEFAULT 'N',
        dt_co_sign_in           IN opinion_prof.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in        IN opinion_prof.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in      IN opinion_prof.id_prof_co_sign%TYPE DEFAULT NULL,
        id_order_type_in        IN opinion_prof.id_order_type%TYPE DEFAULT NULL,
        id_opinion_prof_out     IN OUT opinion_prof.id_opinion_prof%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
        l_pky opinion_prof.id_opinion_prof%TYPE := next_key;
    BEGIN
        ins(id_opinion_prof_in      => l_pky,
            id_opinion_in           => id_opinion_in,
            flg_type_in             => flg_type_in,
            id_professional_in      => id_professional_in,
            desc_reply_in           => desc_reply_in,
            dt_opinion_prof_tstz_in => dt_opinion_prof_tstz_in,
            flg_face_to_face_in     => flg_face_to_face_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            id_cancel_reason_in     => id_cancel_reason_in,
            flg_co_sign_in          => flg_co_sign_in,
            dt_co_sign_in           => dt_co_sign_in,
            notes_co_sign_in        => notes_co_sign_in,
            id_prof_co_sign_in      => id_prof_co_sign_in,
            id_order_type_in        => id_order_type_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
        id_opinion_prof_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_opinion_in           IN opinion_prof.id_opinion%TYPE DEFAULT NULL,
        flg_type_in             IN opinion_prof.flg_type%TYPE DEFAULT NULL,
        id_professional_in      IN opinion_prof.id_professional%TYPE DEFAULT NULL,
        desc_reply_in           IN opinion_prof.desc_reply%TYPE DEFAULT NULL,
        dt_opinion_prof_tstz_in IN opinion_prof.dt_opinion_prof_tstz%TYPE DEFAULT NULL,
        flg_face_to_face_in     IN opinion_prof.flg_face_to_face%TYPE DEFAULT 'U',
        create_user_in          IN opinion_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN opinion_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN opinion_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN opinion_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN opinion_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN opinion_prof.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in     IN opinion_prof.id_cancel_reason%TYPE DEFAULT NULL,
        flg_co_sign_in          IN opinion_prof.flg_co_sign%TYPE DEFAULT 'N',
        dt_co_sign_in           IN opinion_prof.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in        IN opinion_prof.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in      IN opinion_prof.id_prof_co_sign%TYPE DEFAULT NULL,
        id_order_type_in        IN opinion_prof.id_order_type%TYPE DEFAULT NULL,
        id_opinion_prof_out     IN OUT opinion_prof.id_opinion_prof%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_opinion_in           => id_opinion_in,
            flg_type_in             => flg_type_in,
            id_professional_in      => id_professional_in,
            desc_reply_in           => desc_reply_in,
            dt_opinion_prof_tstz_in => dt_opinion_prof_tstz_in,
            flg_face_to_face_in     => flg_face_to_face_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            id_cancel_reason_in     => id_cancel_reason_in,
            flg_co_sign_in          => flg_co_sign_in,
            dt_co_sign_in           => dt_co_sign_in,
            notes_co_sign_in        => notes_co_sign_in,
            id_prof_co_sign_in      => id_prof_co_sign_in,
            id_order_type_in        => id_order_type_in,
            id_opinion_prof_out     => id_opinion_prof_out,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    FUNCTION ins
    (
        id_opinion_in           IN opinion_prof.id_opinion%TYPE DEFAULT NULL,
        flg_type_in             IN opinion_prof.flg_type%TYPE DEFAULT NULL,
        id_professional_in      IN opinion_prof.id_professional%TYPE DEFAULT NULL,
        desc_reply_in           IN opinion_prof.desc_reply%TYPE DEFAULT NULL,
        dt_opinion_prof_tstz_in IN opinion_prof.dt_opinion_prof_tstz%TYPE DEFAULT NULL,
        flg_face_to_face_in     IN opinion_prof.flg_face_to_face%TYPE DEFAULT 'U',
        create_user_in          IN opinion_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN opinion_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN opinion_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN opinion_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN opinion_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN opinion_prof.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in     IN opinion_prof.id_cancel_reason%TYPE DEFAULT NULL,
        flg_co_sign_in          IN opinion_prof.flg_co_sign%TYPE DEFAULT 'N',
        dt_co_sign_in           IN opinion_prof.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in        IN opinion_prof.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in      IN opinion_prof.id_prof_co_sign%TYPE DEFAULT NULL,
        id_order_type_in        IN opinion_prof.id_order_type%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) RETURN opinion_prof.id_opinion_prof%TYPE IS
        l_pky opinion_prof.id_opinion_prof%TYPE := next_key;
    BEGIN
        ins(id_opinion_prof_in      => l_pky,
            id_opinion_in           => id_opinion_in,
            flg_type_in             => flg_type_in,
            id_professional_in      => id_professional_in,
            desc_reply_in           => desc_reply_in,
            dt_opinion_prof_tstz_in => dt_opinion_prof_tstz_in,
            flg_face_to_face_in     => flg_face_to_face_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            id_cancel_reason_in     => id_cancel_reason_in,
            flg_co_sign_in          => flg_co_sign_in,
            dt_co_sign_in           => dt_co_sign_in,
            notes_co_sign_in        => notes_co_sign_in,
            id_prof_co_sign_in      => id_prof_co_sign_in,
            id_order_type_in        => id_order_type_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_opinion_in           IN opinion_prof.id_opinion%TYPE DEFAULT NULL,
        flg_type_in             IN opinion_prof.flg_type%TYPE DEFAULT NULL,
        id_professional_in      IN opinion_prof.id_professional%TYPE DEFAULT NULL,
        desc_reply_in           IN opinion_prof.desc_reply%TYPE DEFAULT NULL,
        dt_opinion_prof_tstz_in IN opinion_prof.dt_opinion_prof_tstz%TYPE DEFAULT NULL,
        flg_face_to_face_in     IN opinion_prof.flg_face_to_face%TYPE DEFAULT 'U',
        create_user_in          IN opinion_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN opinion_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN opinion_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN opinion_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN opinion_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN opinion_prof.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in     IN opinion_prof.id_cancel_reason%TYPE DEFAULT NULL,
        flg_co_sign_in          IN opinion_prof.flg_co_sign%TYPE DEFAULT 'N',
        dt_co_sign_in           IN opinion_prof.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in        IN opinion_prof.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in      IN opinion_prof.id_prof_co_sign%TYPE DEFAULT NULL,
        id_order_type_in        IN opinion_prof.id_order_type%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) RETURN opinion_prof.id_opinion_prof%TYPE IS
        l_pky    opinion_prof.id_opinion_prof%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_opinion_prof_in      => l_pky,
            id_opinion_in           => id_opinion_in,
            flg_type_in             => flg_type_in,
            id_professional_in      => id_professional_in,
            desc_reply_in           => desc_reply_in,
            dt_opinion_prof_tstz_in => dt_opinion_prof_tstz_in,
            flg_face_to_face_in     => flg_face_to_face_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            id_cancel_reason_in     => id_cancel_reason_in,
            flg_co_sign_in          => flg_co_sign_in,
            dt_co_sign_in           => dt_co_sign_in,
            notes_co_sign_in        => notes_co_sign_in,
            id_prof_co_sign_in      => id_prof_co_sign_in,
            id_order_type_in        => id_order_type_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_opinion_in           IN opinion_prof.id_opinion%TYPE DEFAULT NULL,
        flg_type_in             IN opinion_prof.flg_type%TYPE DEFAULT NULL,
        id_professional_in      IN opinion_prof.id_professional%TYPE DEFAULT NULL,
        desc_reply_in           IN opinion_prof.desc_reply%TYPE DEFAULT NULL,
        dt_opinion_prof_tstz_in IN opinion_prof.dt_opinion_prof_tstz%TYPE DEFAULT NULL,
        flg_face_to_face_in     IN opinion_prof.flg_face_to_face%TYPE DEFAULT 'U',
        create_user_in          IN opinion_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN opinion_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN opinion_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN opinion_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN opinion_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN opinion_prof.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in     IN opinion_prof.id_cancel_reason%TYPE DEFAULT NULL,
        flg_co_sign_in          IN opinion_prof.flg_co_sign%TYPE DEFAULT 'N',
        dt_co_sign_in           IN opinion_prof.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in        IN opinion_prof.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in      IN opinion_prof.id_prof_co_sign%TYPE DEFAULT NULL,
        id_order_type_in        IN opinion_prof.id_order_type%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
        l_pky opinion_prof.id_opinion_prof%TYPE := next_key;
    BEGIN
        ins(id_opinion_prof_in      => l_pky,
            id_opinion_in           => id_opinion_in,
            flg_type_in             => flg_type_in,
            id_professional_in      => id_professional_in,
            desc_reply_in           => desc_reply_in,
            dt_opinion_prof_tstz_in => dt_opinion_prof_tstz_in,
            flg_face_to_face_in     => flg_face_to_face_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            id_cancel_reason_in     => id_cancel_reason_in,
            flg_co_sign_in          => flg_co_sign_in,
            dt_co_sign_in           => dt_co_sign_in,
            notes_co_sign_in        => notes_co_sign_in,
            id_prof_co_sign_in      => id_prof_co_sign_in,
            id_order_type_in        => id_order_type_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_opinion_in           IN opinion_prof.id_opinion%TYPE DEFAULT NULL,
        flg_type_in             IN opinion_prof.flg_type%TYPE DEFAULT NULL,
        id_professional_in      IN opinion_prof.id_professional%TYPE DEFAULT NULL,
        desc_reply_in           IN opinion_prof.desc_reply%TYPE DEFAULT NULL,
        dt_opinion_prof_tstz_in IN opinion_prof.dt_opinion_prof_tstz%TYPE DEFAULT NULL,
        flg_face_to_face_in     IN opinion_prof.flg_face_to_face%TYPE DEFAULT 'U',
        create_user_in          IN opinion_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN opinion_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN opinion_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN opinion_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN opinion_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN opinion_prof.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in     IN opinion_prof.id_cancel_reason%TYPE DEFAULT NULL,
        flg_co_sign_in          IN opinion_prof.flg_co_sign%TYPE DEFAULT 'N',
        dt_co_sign_in           IN opinion_prof.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in        IN opinion_prof.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in      IN opinion_prof.id_prof_co_sign%TYPE DEFAULT NULL,
        id_order_type_in        IN opinion_prof.id_order_type%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        l_pky    opinion_prof.id_opinion_prof%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_opinion_prof_in      => l_pky,
            id_opinion_in           => id_opinion_in,
            flg_type_in             => flg_type_in,
            id_professional_in      => id_professional_in,
            desc_reply_in           => desc_reply_in,
            dt_opinion_prof_tstz_in => dt_opinion_prof_tstz_in,
            flg_face_to_face_in     => flg_face_to_face_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            id_cancel_reason_in     => id_cancel_reason_in,
            flg_co_sign_in          => flg_co_sign_in,
            dt_co_sign_in           => dt_co_sign_in,
            notes_co_sign_in        => notes_co_sign_in,
            id_prof_co_sign_in      => id_prof_co_sign_in,
            id_order_type_in        => id_order_type_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN opinion_prof_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO opinion_prof
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_OPINION_PROF _' || indx,
                                                        value_in           => rows_in(indx).id_opinion_prof,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_OPINION _' || indx,
                                                        value_in           => rows_in(indx).id_opinion,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TYPE _' || indx,
                                                        value_in           => rows_in(indx).flg_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(indx).id_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DESC_REPLY _' || indx,
                                                        value_in           => rows_in(indx).desc_reply,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_OPINION_PROF_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_opinion_prof_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_FACE_TO_FACE _' || indx,
                                                        value_in           => rows_in(indx).flg_face_to_face,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_REASON _' || indx,
                                                        value_in           => rows_in(indx).id_cancel_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_CO_SIGN _' || indx,
                                                        value_in           => rows_in(indx).flg_co_sign,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CO_SIGN _' || indx,
                                                        value_in           => rows_in(indx).dt_co_sign,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CO_SIGN _' || indx,
                                                        value_in           => rows_in(indx).notes_co_sign,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CO_SIGN _' || indx,
                                                        value_in           => rows_in(indx).id_prof_co_sign,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ORDER_TYPE _' || indx,
                                                        value_in           => rows_in(indx).id_order_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'OPINION_PROF',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN opinion_prof_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_opinion_prof_in       IN opinion_prof.id_opinion_prof%TYPE,
        id_opinion_in            IN opinion_prof.id_opinion%TYPE DEFAULT NULL,
        id_opinion_nin           IN BOOLEAN := TRUE,
        flg_type_in              IN opinion_prof.flg_type%TYPE DEFAULT NULL,
        flg_type_nin             IN BOOLEAN := TRUE,
        id_professional_in       IN opinion_prof.id_professional%TYPE DEFAULT NULL,
        id_professional_nin      IN BOOLEAN := TRUE,
        desc_reply_in            IN opinion_prof.desc_reply%TYPE DEFAULT NULL,
        desc_reply_nin           IN BOOLEAN := TRUE,
        dt_opinion_prof_tstz_in  IN opinion_prof.dt_opinion_prof_tstz%TYPE DEFAULT NULL,
        dt_opinion_prof_tstz_nin IN BOOLEAN := TRUE,
        flg_face_to_face_in      IN opinion_prof.flg_face_to_face%TYPE DEFAULT NULL,
        flg_face_to_face_nin     IN BOOLEAN := TRUE,
        create_user_in           IN opinion_prof.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN opinion_prof.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN opinion_prof.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN opinion_prof.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN opinion_prof.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN opinion_prof.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        id_cancel_reason_in      IN opinion_prof.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin     IN BOOLEAN := TRUE,
        flg_co_sign_in           IN opinion_prof.flg_co_sign%TYPE DEFAULT NULL,
        flg_co_sign_nin          IN BOOLEAN := TRUE,
        dt_co_sign_in            IN opinion_prof.dt_co_sign%TYPE DEFAULT NULL,
        dt_co_sign_nin           IN BOOLEAN := TRUE,
        notes_co_sign_in         IN opinion_prof.notes_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_nin        IN BOOLEAN := TRUE,
        id_prof_co_sign_in       IN opinion_prof.id_prof_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_nin      IN BOOLEAN := TRUE,
        id_order_type_in         IN opinion_prof.id_order_type%TYPE DEFAULT NULL,
        id_order_type_nin        IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    ) IS
        l_rows_out               table_varchar;
        l_id_opinion_n           NUMBER(1);
        l_flg_type_n             NUMBER(1);
        l_id_professional_n      NUMBER(1);
        l_desc_reply_n           NUMBER(1);
        l_dt_opinion_prof_tstz_n NUMBER(1);
        l_flg_face_to_face_n     NUMBER(1);
        l_create_user_n          NUMBER(1);
        l_create_time_n          NUMBER(1);
        l_create_institution_n   NUMBER(1);
        l_update_user_n          NUMBER(1);
        l_update_time_n          NUMBER(1);
        l_update_institution_n   NUMBER(1);
        l_id_cancel_reason_n     NUMBER(1);
        l_flg_co_sign_n          NUMBER(1);
        l_dt_co_sign_n           NUMBER(1);
        l_notes_co_sign_n        NUMBER(1);
        l_id_prof_co_sign_n      NUMBER(1);
        l_id_order_type_n        NUMBER(1);
    BEGIN
    
        l_id_opinion_n           := sys.diutil.bool_to_int(id_opinion_nin);
        l_flg_type_n             := sys.diutil.bool_to_int(flg_type_nin);
        l_id_professional_n      := sys.diutil.bool_to_int(id_professional_nin);
        l_desc_reply_n           := sys.diutil.bool_to_int(desc_reply_nin);
        l_dt_opinion_prof_tstz_n := sys.diutil.bool_to_int(dt_opinion_prof_tstz_nin);
        l_flg_face_to_face_n     := sys.diutil.bool_to_int(flg_face_to_face_nin);
        l_create_user_n          := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   := sys.diutil.bool_to_int(update_institution_nin);
        l_id_cancel_reason_n     := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_flg_co_sign_n          := sys.diutil.bool_to_int(flg_co_sign_nin);
        l_dt_co_sign_n           := sys.diutil.bool_to_int(dt_co_sign_nin);
        l_notes_co_sign_n        := sys.diutil.bool_to_int(notes_co_sign_nin);
        l_id_prof_co_sign_n      := sys.diutil.bool_to_int(id_prof_co_sign_nin);
        l_id_order_type_n        := sys.diutil.bool_to_int(id_order_type_nin);
    
        UPDATE opinion_prof
           SET id_opinion           = decode(l_id_opinion_n, 0, id_opinion_in, nvl(id_opinion_in, id_opinion)),
               flg_type             = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               id_professional      = decode(l_id_professional_n,
                                             0,
                                             id_professional_in,
                                             nvl(id_professional_in, id_professional)),
               desc_reply           = decode(l_desc_reply_n, 0, desc_reply_in, nvl(desc_reply_in, desc_reply)),
               dt_opinion_prof_tstz = decode(l_dt_opinion_prof_tstz_n,
                                             0,
                                             dt_opinion_prof_tstz_in,
                                             nvl(dt_opinion_prof_tstz_in, dt_opinion_prof_tstz)),
               flg_face_to_face     = decode(l_flg_face_to_face_n,
                                             0,
                                             flg_face_to_face_in,
                                             nvl(flg_face_to_face_in, flg_face_to_face)),
               create_user          = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time          = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution   = decode(l_create_institution_n,
                                             0,
                                             create_institution_in,
                                             nvl(create_institution_in, create_institution)),
               update_user          = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time          = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution   = decode(l_update_institution_n,
                                             0,
                                             update_institution_in,
                                             nvl(update_institution_in, update_institution)),
               id_cancel_reason     = decode(l_id_cancel_reason_n,
                                             0,
                                             id_cancel_reason_in,
                                             nvl(id_cancel_reason_in, id_cancel_reason)),
               flg_co_sign          = decode(l_flg_co_sign_n, 0, flg_co_sign_in, nvl(flg_co_sign_in, flg_co_sign)),
               dt_co_sign           = decode(l_dt_co_sign_n, 0, dt_co_sign_in, nvl(dt_co_sign_in, dt_co_sign)),
               notes_co_sign        = decode(l_notes_co_sign_n,
                                             0,
                                             notes_co_sign_in,
                                             nvl(notes_co_sign_in, notes_co_sign)),
               id_prof_co_sign      = decode(l_id_prof_co_sign_n,
                                             0,
                                             id_prof_co_sign_in,
                                             nvl(id_prof_co_sign_in, id_prof_co_sign)),
               id_order_type        = decode(l_id_order_type_n,
                                             0,
                                             id_order_type_in,
                                             nvl(id_order_type_in, id_order_type))
         WHERE id_opinion_prof = id_opinion_prof_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'OPINION_PROF');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    IF l_name = 'OPF_CRE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'OPF_OPN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_OPINION',
                                                        value_in           => id_opinion_in);
                    END IF;
                    IF l_name = 'OPF_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'OPP_ORDER_TYPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ORDER_TYPE',
                                                        value_in           => id_order_type_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_opinion_prof_in       IN opinion_prof.id_opinion_prof%TYPE,
        id_opinion_in            IN opinion_prof.id_opinion%TYPE DEFAULT NULL,
        id_opinion_nin           IN BOOLEAN := TRUE,
        flg_type_in              IN opinion_prof.flg_type%TYPE DEFAULT NULL,
        flg_type_nin             IN BOOLEAN := TRUE,
        id_professional_in       IN opinion_prof.id_professional%TYPE DEFAULT NULL,
        id_professional_nin      IN BOOLEAN := TRUE,
        desc_reply_in            IN opinion_prof.desc_reply%TYPE DEFAULT NULL,
        desc_reply_nin           IN BOOLEAN := TRUE,
        dt_opinion_prof_tstz_in  IN opinion_prof.dt_opinion_prof_tstz%TYPE DEFAULT NULL,
        dt_opinion_prof_tstz_nin IN BOOLEAN := TRUE,
        flg_face_to_face_in      IN opinion_prof.flg_face_to_face%TYPE DEFAULT NULL,
        flg_face_to_face_nin     IN BOOLEAN := TRUE,
        create_user_in           IN opinion_prof.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN opinion_prof.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN opinion_prof.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN opinion_prof.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN opinion_prof.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN opinion_prof.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        id_cancel_reason_in      IN opinion_prof.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin     IN BOOLEAN := TRUE,
        flg_co_sign_in           IN opinion_prof.flg_co_sign%TYPE DEFAULT NULL,
        flg_co_sign_nin          IN BOOLEAN := TRUE,
        dt_co_sign_in            IN opinion_prof.dt_co_sign%TYPE DEFAULT NULL,
        dt_co_sign_nin           IN BOOLEAN := TRUE,
        notes_co_sign_in         IN opinion_prof.notes_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_nin        IN BOOLEAN := TRUE,
        id_prof_co_sign_in       IN opinion_prof.id_prof_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_nin      IN BOOLEAN := TRUE,
        id_order_type_in         IN opinion_prof.id_order_type%TYPE DEFAULT NULL,
        id_order_type_nin        IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_opinion_prof_in       => id_opinion_prof_in,
            id_opinion_in            => id_opinion_in,
            id_opinion_nin           => id_opinion_nin,
            flg_type_in              => flg_type_in,
            flg_type_nin             => flg_type_nin,
            id_professional_in       => id_professional_in,
            id_professional_nin      => id_professional_nin,
            desc_reply_in            => desc_reply_in,
            desc_reply_nin           => desc_reply_nin,
            dt_opinion_prof_tstz_in  => dt_opinion_prof_tstz_in,
            dt_opinion_prof_tstz_nin => dt_opinion_prof_tstz_nin,
            flg_face_to_face_in      => flg_face_to_face_in,
            flg_face_to_face_nin     => flg_face_to_face_nin,
            create_user_in           => create_user_in,
            create_user_nin          => create_user_nin,
            create_time_in           => create_time_in,
            create_time_nin          => create_time_nin,
            create_institution_in    => create_institution_in,
            create_institution_nin   => create_institution_nin,
            update_user_in           => update_user_in,
            update_user_nin          => update_user_nin,
            update_time_in           => update_time_in,
            update_time_nin          => update_time_nin,
            update_institution_in    => update_institution_in,
            update_institution_nin   => update_institution_nin,
            id_cancel_reason_in      => id_cancel_reason_in,
            id_cancel_reason_nin     => id_cancel_reason_nin,
            flg_co_sign_in           => flg_co_sign_in,
            flg_co_sign_nin          => flg_co_sign_nin,
            dt_co_sign_in            => dt_co_sign_in,
            dt_co_sign_nin           => dt_co_sign_nin,
            notes_co_sign_in         => notes_co_sign_in,
            notes_co_sign_nin        => notes_co_sign_nin,
            id_prof_co_sign_in       => id_prof_co_sign_in,
            id_prof_co_sign_nin      => id_prof_co_sign_nin,
            id_order_type_in         => id_order_type_in,
            id_order_type_nin        => id_order_type_nin,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_opinion_in            IN opinion_prof.id_opinion%TYPE DEFAULT NULL,
        id_opinion_nin           IN BOOLEAN := TRUE,
        flg_type_in              IN opinion_prof.flg_type%TYPE DEFAULT NULL,
        flg_type_nin             IN BOOLEAN := TRUE,
        id_professional_in       IN opinion_prof.id_professional%TYPE DEFAULT NULL,
        id_professional_nin      IN BOOLEAN := TRUE,
        desc_reply_in            IN opinion_prof.desc_reply%TYPE DEFAULT NULL,
        desc_reply_nin           IN BOOLEAN := TRUE,
        dt_opinion_prof_tstz_in  IN opinion_prof.dt_opinion_prof_tstz%TYPE DEFAULT NULL,
        dt_opinion_prof_tstz_nin IN BOOLEAN := TRUE,
        flg_face_to_face_in      IN opinion_prof.flg_face_to_face%TYPE DEFAULT NULL,
        flg_face_to_face_nin     IN BOOLEAN := TRUE,
        create_user_in           IN opinion_prof.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN opinion_prof.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN opinion_prof.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN opinion_prof.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN opinion_prof.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN opinion_prof.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        id_cancel_reason_in      IN opinion_prof.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin     IN BOOLEAN := TRUE,
        flg_co_sign_in           IN opinion_prof.flg_co_sign%TYPE DEFAULT NULL,
        flg_co_sign_nin          IN BOOLEAN := TRUE,
        dt_co_sign_in            IN opinion_prof.dt_co_sign%TYPE DEFAULT NULL,
        dt_co_sign_nin           IN BOOLEAN := TRUE,
        notes_co_sign_in         IN opinion_prof.notes_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_nin        IN BOOLEAN := TRUE,
        id_prof_co_sign_in       IN opinion_prof.id_prof_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_nin      IN BOOLEAN := TRUE,
        id_order_type_in         IN opinion_prof.id_order_type%TYPE DEFAULT NULL,
        id_order_type_nin        IN BOOLEAN := TRUE,
        where_in                 VARCHAR2 DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    ) IS
        l_sql                    VARCHAR2(32767);
        l_rows_out               table_varchar;
        l_id_opinion_n           NUMBER(1);
        l_flg_type_n             NUMBER(1);
        l_id_professional_n      NUMBER(1);
        l_desc_reply_n           NUMBER(1);
        l_dt_opinion_prof_tstz_n NUMBER(1);
        l_flg_face_to_face_n     NUMBER(1);
        l_create_user_n          NUMBER(1);
        l_create_time_n          NUMBER(1);
        l_create_institution_n   NUMBER(1);
        l_update_user_n          NUMBER(1);
        l_update_time_n          NUMBER(1);
        l_update_institution_n   NUMBER(1);
        l_id_cancel_reason_n     NUMBER(1);
        l_flg_co_sign_n          NUMBER(1);
        l_dt_co_sign_n           NUMBER(1);
        l_notes_co_sign_n        NUMBER(1);
        l_id_prof_co_sign_n      NUMBER(1);
        l_id_order_type_n        NUMBER(1);
        id_opinion_prof_in       opinion_prof.id_opinion_prof%TYPE;
    BEGIN
    
        l_id_opinion_n           := sys.diutil.bool_to_int(id_opinion_nin);
        l_flg_type_n             := sys.diutil.bool_to_int(flg_type_nin);
        l_id_professional_n      := sys.diutil.bool_to_int(id_professional_nin);
        l_desc_reply_n           := sys.diutil.bool_to_int(desc_reply_nin);
        l_dt_opinion_prof_tstz_n := sys.diutil.bool_to_int(dt_opinion_prof_tstz_nin);
        l_flg_face_to_face_n     := sys.diutil.bool_to_int(flg_face_to_face_nin);
        l_create_user_n          := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   := sys.diutil.bool_to_int(update_institution_nin);
        l_id_cancel_reason_n     := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_flg_co_sign_n          := sys.diutil.bool_to_int(flg_co_sign_nin);
        l_dt_co_sign_n           := sys.diutil.bool_to_int(dt_co_sign_nin);
        l_notes_co_sign_n        := sys.diutil.bool_to_int(notes_co_sign_nin);
        l_id_prof_co_sign_n      := sys.diutil.bool_to_int(id_prof_co_sign_nin);
        l_id_order_type_n        := sys.diutil.bool_to_int(id_order_type_nin);
    
        l_sql := 'UPDATE OPINION_PROF SET ' || ' ID_OPINION = decode (' || l_id_opinion_n ||
                 ',0,:id_opinion_in, NVL (:id_opinion_in, ID_OPINION)) ' || ',' || ' FLG_TYPE = decode (' ||
                 l_flg_type_n || ',0,:flg_type_in, NVL (:flg_type_in, FLG_TYPE)) ' || ',' ||
                 ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                 ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) ' || ',' ||
                 ' DESC_REPLY = decode (' || l_desc_reply_n || ',0,:desc_reply_in, NVL (:desc_reply_in, DESC_REPLY)) ' || ',' ||
                 ' DT_OPINION_PROF_TSTZ = decode (' || l_dt_opinion_prof_tstz_n ||
                 ',0,:dt_opinion_prof_tstz_in, NVL (:dt_opinion_prof_tstz_in, DT_OPINION_PROF_TSTZ)) ' || ',' ||
                 ' FLG_FACE_TO_FACE = decode (' || l_flg_face_to_face_n ||
                 ',0,:flg_face_to_face_in, NVL (:flg_face_to_face_in, FLG_FACE_TO_FACE)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                 ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) ' || ',' ||
                 ' FLG_CO_SIGN = decode (' || l_flg_co_sign_n ||
                 ',0,:flg_co_sign_in, NVL (:flg_co_sign_in, FLG_CO_SIGN)) ' || ',' || ' DT_CO_SIGN = decode (' ||
                 l_dt_co_sign_n || ',0,:dt_co_sign_in, NVL (:dt_co_sign_in, DT_CO_SIGN)) ' || ',' ||
                 ' NOTES_CO_SIGN = decode (' || l_notes_co_sign_n ||
                 ',0,:notes_co_sign_in, NVL (:notes_co_sign_in, NOTES_CO_SIGN)) ' || ',' ||
                 ' ID_PROF_CO_SIGN = decode (' || l_id_prof_co_sign_n ||
                 ',0,:id_prof_co_sign_in, NVL (:id_prof_co_sign_in, ID_PROF_CO_SIGN)) ' || ',' ||
                 ' ID_ORDER_TYPE = decode (' || l_id_order_type_n ||
                 ',0,:id_order_type_in, NVL (:id_order_type_in, ID_ORDER_TYPE)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_opinion_in, flg_type_in, id_professional_in, desc_reply_in, dt_opinion_prof_tstz_in, flg_face_to_face_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_cancel_reason_in, flg_co_sign_in, dt_co_sign_in, notes_co_sign_in, id_prof_co_sign_in, id_order_type_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'OPINION_PROF');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    IF l_name = 'OPF_CRE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'OPF_OPN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_OPINION',
                                                        value_in           => id_opinion_in);
                    END IF;
                    IF l_name = 'OPF_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'OPP_ORDER_TYPE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ORDER_TYPE',
                                                        value_in           => id_order_type_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_opinion_in            IN opinion_prof.id_opinion%TYPE DEFAULT NULL,
        id_opinion_nin           IN BOOLEAN := TRUE,
        flg_type_in              IN opinion_prof.flg_type%TYPE DEFAULT NULL,
        flg_type_nin             IN BOOLEAN := TRUE,
        id_professional_in       IN opinion_prof.id_professional%TYPE DEFAULT NULL,
        id_professional_nin      IN BOOLEAN := TRUE,
        desc_reply_in            IN opinion_prof.desc_reply%TYPE DEFAULT NULL,
        desc_reply_nin           IN BOOLEAN := TRUE,
        dt_opinion_prof_tstz_in  IN opinion_prof.dt_opinion_prof_tstz%TYPE DEFAULT NULL,
        dt_opinion_prof_tstz_nin IN BOOLEAN := TRUE,
        flg_face_to_face_in      IN opinion_prof.flg_face_to_face%TYPE DEFAULT NULL,
        flg_face_to_face_nin     IN BOOLEAN := TRUE,
        create_user_in           IN opinion_prof.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN opinion_prof.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN opinion_prof.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN opinion_prof.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN opinion_prof.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN opinion_prof.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        id_cancel_reason_in      IN opinion_prof.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin     IN BOOLEAN := TRUE,
        flg_co_sign_in           IN opinion_prof.flg_co_sign%TYPE DEFAULT NULL,
        flg_co_sign_nin          IN BOOLEAN := TRUE,
        dt_co_sign_in            IN opinion_prof.dt_co_sign%TYPE DEFAULT NULL,
        dt_co_sign_nin           IN BOOLEAN := TRUE,
        notes_co_sign_in         IN opinion_prof.notes_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_nin        IN BOOLEAN := TRUE,
        id_prof_co_sign_in       IN opinion_prof.id_prof_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_nin      IN BOOLEAN := TRUE,
        id_order_type_in         IN opinion_prof.id_order_type%TYPE DEFAULT NULL,
        id_order_type_nin        IN BOOLEAN := TRUE,
        where_in                 VARCHAR2 DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_opinion_in            => id_opinion_in,
            id_opinion_nin           => id_opinion_nin,
            flg_type_in              => flg_type_in,
            flg_type_nin             => flg_type_nin,
            id_professional_in       => id_professional_in,
            id_professional_nin      => id_professional_nin,
            desc_reply_in            => desc_reply_in,
            desc_reply_nin           => desc_reply_nin,
            dt_opinion_prof_tstz_in  => dt_opinion_prof_tstz_in,
            dt_opinion_prof_tstz_nin => dt_opinion_prof_tstz_nin,
            flg_face_to_face_in      => flg_face_to_face_in,
            flg_face_to_face_nin     => flg_face_to_face_nin,
            create_user_in           => create_user_in,
            create_user_nin          => create_user_nin,
            create_time_in           => create_time_in,
            create_time_nin          => create_time_nin,
            create_institution_in    => create_institution_in,
            create_institution_nin   => create_institution_nin,
            update_user_in           => update_user_in,
            update_user_nin          => update_user_nin,
            update_time_in           => update_time_in,
            update_time_nin          => update_time_nin,
            update_institution_in    => update_institution_in,
            update_institution_nin   => update_institution_nin,
            id_cancel_reason_in      => id_cancel_reason_in,
            id_cancel_reason_nin     => id_cancel_reason_nin,
            flg_co_sign_in           => flg_co_sign_in,
            flg_co_sign_nin          => flg_co_sign_nin,
            dt_co_sign_in            => dt_co_sign_in,
            dt_co_sign_nin           => dt_co_sign_nin,
            notes_co_sign_in         => notes_co_sign_in,
            notes_co_sign_nin        => notes_co_sign_nin,
            id_prof_co_sign_in       => id_prof_co_sign_in,
            id_prof_co_sign_nin      => id_prof_co_sign_nin,
            id_order_type_in         => id_order_type_in,
            id_order_type_nin        => id_order_type_nin,
            where_in                 => where_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN opinion_prof%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_opinion_prof_in      => rec_in.id_opinion_prof,
            id_opinion_in           => rec_in.id_opinion,
            flg_type_in             => rec_in.flg_type,
            id_professional_in      => rec_in.id_professional,
            desc_reply_in           => rec_in.desc_reply,
            dt_opinion_prof_tstz_in => rec_in.dt_opinion_prof_tstz,
            flg_face_to_face_in     => rec_in.flg_face_to_face,
            create_user_in          => rec_in.create_user,
            create_time_in          => rec_in.create_time,
            create_institution_in   => rec_in.create_institution,
            update_user_in          => rec_in.update_user,
            update_time_in          => rec_in.update_time,
            update_institution_in   => rec_in.update_institution,
            id_cancel_reason_in     => rec_in.id_cancel_reason,
            flg_co_sign_in          => rec_in.flg_co_sign,
            dt_co_sign_in           => rec_in.dt_co_sign,
            notes_co_sign_in        => rec_in.notes_co_sign,
            id_prof_co_sign_in      => rec_in.id_prof_co_sign,
            id_order_type_in        => rec_in.id_order_type
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN opinion_prof%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_opinion_prof_in      => rec_in.id_opinion_prof,
            id_opinion_in           => rec_in.id_opinion,
            flg_type_in             => rec_in.flg_type,
            id_professional_in      => rec_in.id_professional,
            desc_reply_in           => rec_in.desc_reply,
            dt_opinion_prof_tstz_in => rec_in.dt_opinion_prof_tstz,
            flg_face_to_face_in     => rec_in.flg_face_to_face,
            create_user_in          => rec_in.create_user,
            create_time_in          => rec_in.create_time,
            create_institution_in   => rec_in.create_institution,
            update_user_in          => rec_in.update_user,
            update_time_in          => rec_in.update_time,
            update_institution_in   => rec_in.update_institution,
            id_cancel_reason_in     => rec_in.id_cancel_reason,
            flg_co_sign_in          => rec_in.flg_co_sign,
            dt_co_sign_in           => rec_in.dt_co_sign,
            notes_co_sign_in        => rec_in.notes_co_sign,
            id_prof_co_sign_in      => rec_in.id_prof_co_sign,
            id_order_type_in        => rec_in.id_order_type
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_opinion_prof_in      IN opinion_prof.id_opinion_prof%TYPE,
        id_opinion_in           IN opinion_prof.id_opinion%TYPE DEFAULT NULL,
        flg_type_in             IN opinion_prof.flg_type%TYPE DEFAULT NULL,
        id_professional_in      IN opinion_prof.id_professional%TYPE DEFAULT NULL,
        desc_reply_in           IN opinion_prof.desc_reply%TYPE DEFAULT NULL,
        dt_opinion_prof_tstz_in IN opinion_prof.dt_opinion_prof_tstz%TYPE DEFAULT NULL,
        flg_face_to_face_in     IN opinion_prof.flg_face_to_face%TYPE DEFAULT NULL,
        create_user_in          IN opinion_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN opinion_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN opinion_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN opinion_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN opinion_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN opinion_prof.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in     IN opinion_prof.id_cancel_reason%TYPE DEFAULT NULL,
        flg_co_sign_in          IN opinion_prof.flg_co_sign%TYPE DEFAULT NULL,
        dt_co_sign_in           IN opinion_prof.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in        IN opinion_prof.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in      IN opinion_prof.id_prof_co_sign%TYPE DEFAULT NULL,
        id_order_type_in        IN opinion_prof.id_order_type%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        upd(id_opinion_prof_in      => id_opinion_prof_in,
            id_opinion_in           => id_opinion_in,
            flg_type_in             => flg_type_in,
            id_professional_in      => id_professional_in,
            desc_reply_in           => desc_reply_in,
            dt_opinion_prof_tstz_in => dt_opinion_prof_tstz_in,
            flg_face_to_face_in     => flg_face_to_face_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            id_cancel_reason_in     => id_cancel_reason_in,
            flg_co_sign_in          => flg_co_sign_in,
            dt_co_sign_in           => dt_co_sign_in,
            notes_co_sign_in        => notes_co_sign_in,
            id_prof_co_sign_in      => id_prof_co_sign_in,
            id_order_type_in        => id_order_type_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_opinion_prof_in      => id_opinion_prof_in,
                id_opinion_in           => id_opinion_in,
                flg_type_in             => flg_type_in,
                id_professional_in      => id_professional_in,
                desc_reply_in           => desc_reply_in,
                dt_opinion_prof_tstz_in => dt_opinion_prof_tstz_in,
                flg_face_to_face_in     => flg_face_to_face_in,
                create_user_in          => create_user_in,
                create_time_in          => create_time_in,
                create_institution_in   => create_institution_in,
                update_user_in          => update_user_in,
                update_time_in          => update_time_in,
                update_institution_in   => update_institution_in,
                id_cancel_reason_in     => id_cancel_reason_in,
                flg_co_sign_in          => flg_co_sign_in,
                dt_co_sign_in           => dt_co_sign_in,
                notes_co_sign_in        => notes_co_sign_in,
                id_prof_co_sign_in      => id_prof_co_sign_in,
                id_order_type_in        => id_order_type_in,
                handle_error_in         => handle_error_in,
                rows_out                => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_opinion_prof_in      IN opinion_prof.id_opinion_prof%TYPE,
        id_opinion_in           IN opinion_prof.id_opinion%TYPE DEFAULT NULL,
        flg_type_in             IN opinion_prof.flg_type%TYPE DEFAULT NULL,
        id_professional_in      IN opinion_prof.id_professional%TYPE DEFAULT NULL,
        desc_reply_in           IN opinion_prof.desc_reply%TYPE DEFAULT NULL,
        dt_opinion_prof_tstz_in IN opinion_prof.dt_opinion_prof_tstz%TYPE DEFAULT NULL,
        flg_face_to_face_in     IN opinion_prof.flg_face_to_face%TYPE DEFAULT NULL,
        create_user_in          IN opinion_prof.create_user%TYPE DEFAULT NULL,
        create_time_in          IN opinion_prof.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN opinion_prof.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN opinion_prof.update_user%TYPE DEFAULT NULL,
        update_time_in          IN opinion_prof.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN opinion_prof.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in     IN opinion_prof.id_cancel_reason%TYPE DEFAULT NULL,
        flg_co_sign_in          IN opinion_prof.flg_co_sign%TYPE DEFAULT NULL,
        dt_co_sign_in           IN opinion_prof.dt_co_sign%TYPE DEFAULT NULL,
        notes_co_sign_in        IN opinion_prof.notes_co_sign%TYPE DEFAULT NULL,
        id_prof_co_sign_in      IN opinion_prof.id_prof_co_sign%TYPE DEFAULT NULL,
        id_order_type_in        IN opinion_prof.id_order_type%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_opinion_prof_in,
                id_opinion_in,
                flg_type_in,
                id_professional_in,
                desc_reply_in,
                dt_opinion_prof_tstz_in,
                flg_face_to_face_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_cancel_reason_in,
                flg_co_sign_in,
                dt_co_sign_in,
                notes_co_sign_in,
                id_prof_co_sign_in,
                id_order_type_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN opinion_prof_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_opinion_prof      id_opinion_prof_cc;
        l_id_opinion           id_opinion_cc;
        l_flg_type             flg_type_cc;
        l_id_professional      id_professional_cc;
        l_desc_reply           desc_reply_cc;
        l_dt_opinion_prof_tstz dt_opinion_prof_tstz_cc;
        l_flg_face_to_face     flg_face_to_face_cc;
        l_create_user          create_user_cc;
        l_create_time          create_time_cc;
        l_create_institution   create_institution_cc;
        l_update_user          update_user_cc;
        l_update_time          update_time_cc;
        l_update_institution   update_institution_cc;
        l_id_cancel_reason     id_cancel_reason_cc;
        l_flg_co_sign          flg_co_sign_cc;
        l_dt_co_sign           dt_co_sign_cc;
        l_notes_co_sign        notes_co_sign_cc;
        l_id_prof_co_sign      id_prof_co_sign_cc;
        l_id_order_type        id_order_type_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_opinion_prof(i) := col_in(i).id_opinion_prof;
            l_id_opinion(i) := col_in(i).id_opinion;
            l_flg_type(i) := col_in(i).flg_type;
            l_id_professional(i) := col_in(i).id_professional;
            l_desc_reply(i) := col_in(i).desc_reply;
            l_dt_opinion_prof_tstz(i) := col_in(i).dt_opinion_prof_tstz;
            l_flg_face_to_face(i) := col_in(i).flg_face_to_face;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_flg_co_sign(i) := col_in(i).flg_co_sign;
            l_dt_co_sign(i) := col_in(i).dt_co_sign;
            l_notes_co_sign(i) := col_in(i).notes_co_sign;
            l_id_prof_co_sign(i) := col_in(i).id_prof_co_sign;
            l_id_order_type(i) := col_in(i).id_order_type;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE opinion_prof
                   SET id_opinion           = nvl(l_id_opinion(i), id_opinion),
                       flg_type             = nvl(l_flg_type(i), flg_type),
                       id_professional      = nvl(l_id_professional(i), id_professional),
                       desc_reply           = nvl(l_desc_reply(i), desc_reply),
                       dt_opinion_prof_tstz = nvl(l_dt_opinion_prof_tstz(i), dt_opinion_prof_tstz),
                       flg_face_to_face     = nvl(l_flg_face_to_face(i), flg_face_to_face),
                       create_user          = nvl(l_create_user(i), create_user),
                       create_time          = nvl(l_create_time(i), create_time),
                       create_institution   = nvl(l_create_institution(i), create_institution),
                       update_user          = nvl(l_update_user(i), update_user),
                       update_time          = nvl(l_update_time(i), update_time),
                       update_institution   = nvl(l_update_institution(i), update_institution),
                       id_cancel_reason     = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       flg_co_sign          = nvl(l_flg_co_sign(i), flg_co_sign),
                       dt_co_sign           = nvl(l_dt_co_sign(i), dt_co_sign),
                       notes_co_sign        = nvl(l_notes_co_sign(i), notes_co_sign),
                       id_prof_co_sign      = nvl(l_id_prof_co_sign(i), id_prof_co_sign),
                       id_order_type        = nvl(l_id_order_type(i), id_order_type)
                 WHERE id_opinion_prof = l_id_opinion_prof(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE opinion_prof
                   SET id_opinion           = l_id_opinion(i),
                       flg_type             = l_flg_type(i),
                       id_professional      = l_id_professional(i),
                       desc_reply           = l_desc_reply(i),
                       dt_opinion_prof_tstz = l_dt_opinion_prof_tstz(i),
                       flg_face_to_face     = l_flg_face_to_face(i),
                       create_user          = l_create_user(i),
                       create_time          = l_create_time(i),
                       create_institution   = l_create_institution(i),
                       update_user          = l_update_user(i),
                       update_time          = l_update_time(i),
                       update_institution   = l_update_institution(i),
                       id_cancel_reason     = l_id_cancel_reason(i),
                       flg_co_sign          = l_flg_co_sign(i),
                       dt_co_sign           = l_dt_co_sign(i),
                       notes_co_sign        = l_notes_co_sign(i),
                       id_prof_co_sign      = l_id_prof_co_sign(i),
                       id_order_type        = l_id_order_type(i)
                 WHERE id_opinion_prof = l_id_opinion_prof(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN opinion_prof_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE OPINION_PROF
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE OPINION_PROF
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE OPINION_PROF set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE OPINION_PROF set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_opinion_prof_in IN opinion_prof.id_opinion_prof%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion_prof
         WHERE id_opinion_prof = id_opinion_prof_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_opinion_prof_in IN opinion_prof.id_opinion_prof%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_opinion_prof_in => id_opinion_prof_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_OPINION_PROF
    PROCEDURE del_id_opinion_prof
    (
        id_opinion_prof_in IN opinion_prof.id_opinion_prof%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion_prof
         WHERE id_opinion_prof = id_opinion_prof_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_opinion_prof;

    -- Delete all rows for primary key column ID_OPINION_PROF
    PROCEDURE del_id_opinion_prof
    (
        id_opinion_prof_in IN opinion_prof.id_opinion_prof%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_opinion_prof(id_opinion_prof_in => id_opinion_prof_in,
                            handle_error_in    => handle_error_in,
                            rows_out           => rows_out);
    END del_id_opinion_prof;

    PROCEDURE del_opf_cre_fk
    (
        id_cancel_reason_in IN opinion_prof.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion_prof
         WHERE id_cancel_reason = del_opf_cre_fk.id_cancel_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_opf_cre_fk;

    PROCEDURE del_opf_cre_fk
    (
        id_cancel_reason_in IN opinion_prof.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opf_cre_fk(id_cancel_reason_in => id_cancel_reason_in,
                       handle_error_in     => handle_error_in,
                       rows_out            => rows_out);
    END del_opf_cre_fk;

    PROCEDURE del_opf_opn_fk
    (
        id_opinion_in   IN opinion_prof.id_opinion%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion_prof
         WHERE id_opinion = del_opf_opn_fk.id_opinion_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_opf_opn_fk;

    PROCEDURE del_opf_opn_fk
    (
        id_opinion_in   IN opinion_prof.id_opinion%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opf_opn_fk(id_opinion_in => id_opinion_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_opf_opn_fk;

    PROCEDURE del_opf_prof_fk
    (
        id_professional_in IN opinion_prof.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion_prof
         WHERE id_professional = del_opf_prof_fk.id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_opf_prof_fk;

    PROCEDURE del_opf_prof_fk
    (
        id_professional_in IN opinion_prof.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opf_prof_fk(id_professional_in => id_professional_in,
                        handle_error_in    => handle_error_in,
                        rows_out           => rows_out);
    END del_opf_prof_fk;

    PROCEDURE del_opp_order_type_fk
    (
        id_order_type_in IN opinion_prof.id_order_type%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion_prof
         WHERE id_order_type = del_opp_order_type_fk.id_order_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_opp_order_type_fk;

    PROCEDURE del_opp_order_type_fk
    (
        id_order_type_in IN opinion_prof.id_order_type%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opp_order_type_fk(id_order_type_in => id_order_type_in,
                              handle_error_in  => handle_error_in,
                              rows_out         => rows_out);
    END del_opp_order_type_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM OPINION_PROF';
        ELSE
            RETURN 'DELETE FROM OPINION_PROF WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'OPINION_PROF');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'OPINION_PROF');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(opinion_prof_inout IN OUT opinion_prof%ROWTYPE) IS
    BEGIN
        opinion_prof_inout.id_opinion_prof      := NULL;
        opinion_prof_inout.id_opinion           := NULL;
        opinion_prof_inout.flg_type             := NULL;
        opinion_prof_inout.id_professional      := NULL;
        opinion_prof_inout.desc_reply           := NULL;
        opinion_prof_inout.dt_opinion_prof_tstz := NULL;
        opinion_prof_inout.flg_face_to_face     := 'U';
        opinion_prof_inout.create_user          := NULL;
        opinion_prof_inout.create_time          := NULL;
        opinion_prof_inout.create_institution   := NULL;
        opinion_prof_inout.update_user          := NULL;
        opinion_prof_inout.update_time          := NULL;
        opinion_prof_inout.update_institution   := NULL;
        opinion_prof_inout.id_cancel_reason     := NULL;
        opinion_prof_inout.flg_co_sign          := 'N';
        opinion_prof_inout.dt_co_sign           := NULL;
        opinion_prof_inout.notes_co_sign        := NULL;
        opinion_prof_inout.id_prof_co_sign      := NULL;
        opinion_prof_inout.id_order_type        := NULL;
    END initrec;

    FUNCTION initrec RETURN opinion_prof%ROWTYPE IS
        l_opinion_prof opinion_prof%ROWTYPE;
    BEGIN
        l_opinion_prof.flg_face_to_face := 'U';
        l_opinion_prof.flg_co_sign      := 'N';
        RETURN l_opinion_prof;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN opinion_prof_tc IS
        data opinion_prof_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM opinion_prof
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN opinion_prof_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data opinion_prof_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_opinion_prof;
/
