/*-- Last Change Revision: $Rev: 2028124 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:15 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_epis_out_on_pass
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2019-06-12 14:49:48
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN epis_out_on_pass.id_epis_out_on_pass%TYPE IS
        retval epis_out_on_pass.id_epis_out_on_pass%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_epis_out_on_pass.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_patient_in                 IN epis_out_on_pass.id_patient%TYPE DEFAULT NULL,
        id_episode_in                 IN epis_out_on_pass.id_episode%TYPE DEFAULT NULL,
        id_status_in                  IN epis_out_on_pass.id_status%TYPE DEFAULT NULL,
        id_request_reason_in          IN epis_out_on_pass.id_request_reason%TYPE DEFAULT NULL,
        dt_out_in                     IN epis_out_on_pass.dt_out%TYPE DEFAULT NULL,
        dt_in_in                      IN epis_out_on_pass.dt_in%TYPE DEFAULT NULL,
        total_allowed_hours_in        IN epis_out_on_pass.total_allowed_hours%TYPE DEFAULT NULL,
        flg_attending_physic_agree_in IN epis_out_on_pass.flg_attending_physic_agree%TYPE DEFAULT 'A',
        id_conclude_reason_in         IN epis_out_on_pass.id_conclude_reason%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN epis_out_on_pass.id_cancel_reason%TYPE DEFAULT NULL,
        dt_last_update_in             IN epis_out_on_pass.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in        IN epis_out_on_pass.id_prof_last_update%TYPE DEFAULT NULL,
        create_user_in                IN epis_out_on_pass.create_user%TYPE DEFAULT NULL,
        create_time_in                IN epis_out_on_pass.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN epis_out_on_pass.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN epis_out_on_pass.update_user%TYPE DEFAULT NULL,
        update_time_in                IN epis_out_on_pass.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN epis_out_on_pass.update_institution%TYPE DEFAULT NULL,
        id_workflow_in                IN epis_out_on_pass.id_workflow%TYPE DEFAULT NULL,
        dt_in_returned_in             IN epis_out_on_pass.dt_in_returned%TYPE DEFAULT NULL,
        id_requested_by_in            IN epis_out_on_pass.id_requested_by%TYPE DEFAULT NULL,
        patient_contact_number_in     IN epis_out_on_pass.patient_contact_number%TYPE DEFAULT NULL,
        flg_all_med_adm_in            IN epis_out_on_pass.flg_all_med_adm%TYPE DEFAULT 'N',
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky epis_out_on_pass.id_epis_out_on_pass%TYPE := next_key;
    BEGIN
        ins(id_epis_out_on_pass_in        => l_pky,
            id_patient_in                 => id_patient_in,
            id_episode_in                 => id_episode_in,
            id_status_in                  => id_status_in,
            id_request_reason_in          => id_request_reason_in,
            dt_out_in                     => dt_out_in,
            dt_in_in                      => dt_in_in,
            total_allowed_hours_in        => total_allowed_hours_in,
            flg_attending_physic_agree_in => flg_attending_physic_agree_in,
            id_conclude_reason_in         => id_conclude_reason_in,
            id_cancel_reason_in           => id_cancel_reason_in,
            dt_last_update_in             => dt_last_update_in,
            id_prof_last_update_in        => id_prof_last_update_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            id_workflow_in                => id_workflow_in,
            dt_in_returned_in             => dt_in_returned_in,
            id_requested_by_in            => id_requested_by_in,
            patient_contact_number_in     => patient_contact_number_in,
            flg_all_med_adm_in            => flg_all_med_adm_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_patient_in                 IN epis_out_on_pass.id_patient%TYPE DEFAULT NULL,
        id_episode_in                 IN epis_out_on_pass.id_episode%TYPE DEFAULT NULL,
        id_status_in                  IN epis_out_on_pass.id_status%TYPE DEFAULT NULL,
        id_request_reason_in          IN epis_out_on_pass.id_request_reason%TYPE DEFAULT NULL,
        dt_out_in                     IN epis_out_on_pass.dt_out%TYPE DEFAULT NULL,
        dt_in_in                      IN epis_out_on_pass.dt_in%TYPE DEFAULT NULL,
        total_allowed_hours_in        IN epis_out_on_pass.total_allowed_hours%TYPE DEFAULT NULL,
        flg_attending_physic_agree_in IN epis_out_on_pass.flg_attending_physic_agree%TYPE DEFAULT 'A',
        id_conclude_reason_in         IN epis_out_on_pass.id_conclude_reason%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN epis_out_on_pass.id_cancel_reason%TYPE DEFAULT NULL,
        dt_last_update_in             IN epis_out_on_pass.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in        IN epis_out_on_pass.id_prof_last_update%TYPE DEFAULT NULL,
        create_user_in                IN epis_out_on_pass.create_user%TYPE DEFAULT NULL,
        create_time_in                IN epis_out_on_pass.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN epis_out_on_pass.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN epis_out_on_pass.update_user%TYPE DEFAULT NULL,
        update_time_in                IN epis_out_on_pass.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN epis_out_on_pass.update_institution%TYPE DEFAULT NULL,
        id_workflow_in                IN epis_out_on_pass.id_workflow%TYPE DEFAULT NULL,
        dt_in_returned_in             IN epis_out_on_pass.dt_in_returned%TYPE DEFAULT NULL,
        id_requested_by_in            IN epis_out_on_pass.id_requested_by%TYPE DEFAULT NULL,
        patient_contact_number_in     IN epis_out_on_pass.patient_contact_number%TYPE DEFAULT NULL,
        flg_all_med_adm_in            IN epis_out_on_pass.flg_all_med_adm%TYPE DEFAULT 'N',
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_patient_in                 => id_patient_in,
            id_episode_in                 => id_episode_in,
            id_status_in                  => id_status_in,
            id_request_reason_in          => id_request_reason_in,
            dt_out_in                     => dt_out_in,
            dt_in_in                      => dt_in_in,
            total_allowed_hours_in        => total_allowed_hours_in,
            flg_attending_physic_agree_in => flg_attending_physic_agree_in,
            id_conclude_reason_in         => id_conclude_reason_in,
            id_cancel_reason_in           => id_cancel_reason_in,
            dt_last_update_in             => dt_last_update_in,
            id_prof_last_update_in        => id_prof_last_update_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            id_workflow_in                => id_workflow_in,
            dt_in_returned_in             => dt_in_returned_in,
            id_requested_by_in            => id_requested_by_in,
            patient_contact_number_in     => patient_contact_number_in,
            flg_all_med_adm_in            => flg_all_med_adm_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_patient_in                 IN epis_out_on_pass.id_patient%TYPE DEFAULT NULL,
        id_episode_in                 IN epis_out_on_pass.id_episode%TYPE DEFAULT NULL,
        id_status_in                  IN epis_out_on_pass.id_status%TYPE DEFAULT NULL,
        id_request_reason_in          IN epis_out_on_pass.id_request_reason%TYPE DEFAULT NULL,
        dt_out_in                     IN epis_out_on_pass.dt_out%TYPE DEFAULT NULL,
        dt_in_in                      IN epis_out_on_pass.dt_in%TYPE DEFAULT NULL,
        total_allowed_hours_in        IN epis_out_on_pass.total_allowed_hours%TYPE DEFAULT NULL,
        flg_attending_physic_agree_in IN epis_out_on_pass.flg_attending_physic_agree%TYPE DEFAULT 'A',
        id_conclude_reason_in         IN epis_out_on_pass.id_conclude_reason%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN epis_out_on_pass.id_cancel_reason%TYPE DEFAULT NULL,
        dt_last_update_in             IN epis_out_on_pass.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in        IN epis_out_on_pass.id_prof_last_update%TYPE DEFAULT NULL,
        create_user_in                IN epis_out_on_pass.create_user%TYPE DEFAULT NULL,
        create_time_in                IN epis_out_on_pass.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN epis_out_on_pass.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN epis_out_on_pass.update_user%TYPE DEFAULT NULL,
        update_time_in                IN epis_out_on_pass.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN epis_out_on_pass.update_institution%TYPE DEFAULT NULL,
        id_workflow_in                IN epis_out_on_pass.id_workflow%TYPE DEFAULT NULL,
        dt_in_returned_in             IN epis_out_on_pass.dt_in_returned%TYPE DEFAULT NULL,
        id_requested_by_in            IN epis_out_on_pass.id_requested_by%TYPE DEFAULT NULL,
        patient_contact_number_in     IN epis_out_on_pass.patient_contact_number%TYPE DEFAULT NULL,
        flg_all_med_adm_in            IN epis_out_on_pass.flg_all_med_adm%TYPE DEFAULT 'N',
        id_epis_out_on_pass_out       IN OUT epis_out_on_pass.id_epis_out_on_pass%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky epis_out_on_pass.id_epis_out_on_pass%TYPE := next_key;
    BEGIN
        ins(id_epis_out_on_pass_in        => l_pky,
            id_patient_in                 => id_patient_in,
            id_episode_in                 => id_episode_in,
            id_status_in                  => id_status_in,
            id_request_reason_in          => id_request_reason_in,
            dt_out_in                     => dt_out_in,
            dt_in_in                      => dt_in_in,
            total_allowed_hours_in        => total_allowed_hours_in,
            flg_attending_physic_agree_in => flg_attending_physic_agree_in,
            id_conclude_reason_in         => id_conclude_reason_in,
            id_cancel_reason_in           => id_cancel_reason_in,
            dt_last_update_in             => dt_last_update_in,
            id_prof_last_update_in        => id_prof_last_update_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            id_workflow_in                => id_workflow_in,
            dt_in_returned_in             => dt_in_returned_in,
            id_requested_by_in            => id_requested_by_in,
            patient_contact_number_in     => patient_contact_number_in,
            flg_all_med_adm_in            => flg_all_med_adm_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
        id_epis_out_on_pass_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_patient_in                 IN epis_out_on_pass.id_patient%TYPE DEFAULT NULL,
        id_episode_in                 IN epis_out_on_pass.id_episode%TYPE DEFAULT NULL,
        id_status_in                  IN epis_out_on_pass.id_status%TYPE DEFAULT NULL,
        id_request_reason_in          IN epis_out_on_pass.id_request_reason%TYPE DEFAULT NULL,
        dt_out_in                     IN epis_out_on_pass.dt_out%TYPE DEFAULT NULL,
        dt_in_in                      IN epis_out_on_pass.dt_in%TYPE DEFAULT NULL,
        total_allowed_hours_in        IN epis_out_on_pass.total_allowed_hours%TYPE DEFAULT NULL,
        flg_attending_physic_agree_in IN epis_out_on_pass.flg_attending_physic_agree%TYPE DEFAULT 'A',
        id_conclude_reason_in         IN epis_out_on_pass.id_conclude_reason%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN epis_out_on_pass.id_cancel_reason%TYPE DEFAULT NULL,
        dt_last_update_in             IN epis_out_on_pass.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in        IN epis_out_on_pass.id_prof_last_update%TYPE DEFAULT NULL,
        create_user_in                IN epis_out_on_pass.create_user%TYPE DEFAULT NULL,
        create_time_in                IN epis_out_on_pass.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN epis_out_on_pass.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN epis_out_on_pass.update_user%TYPE DEFAULT NULL,
        update_time_in                IN epis_out_on_pass.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN epis_out_on_pass.update_institution%TYPE DEFAULT NULL,
        id_workflow_in                IN epis_out_on_pass.id_workflow%TYPE DEFAULT NULL,
        dt_in_returned_in             IN epis_out_on_pass.dt_in_returned%TYPE DEFAULT NULL,
        id_requested_by_in            IN epis_out_on_pass.id_requested_by%TYPE DEFAULT NULL,
        patient_contact_number_in     IN epis_out_on_pass.patient_contact_number%TYPE DEFAULT NULL,
        flg_all_med_adm_in            IN epis_out_on_pass.flg_all_med_adm%TYPE DEFAULT 'N',
        id_epis_out_on_pass_out       IN OUT epis_out_on_pass.id_epis_out_on_pass%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_patient_in                 => id_patient_in,
            id_episode_in                 => id_episode_in,
            id_status_in                  => id_status_in,
            id_request_reason_in          => id_request_reason_in,
            dt_out_in                     => dt_out_in,
            dt_in_in                      => dt_in_in,
            total_allowed_hours_in        => total_allowed_hours_in,
            flg_attending_physic_agree_in => flg_attending_physic_agree_in,
            id_conclude_reason_in         => id_conclude_reason_in,
            id_cancel_reason_in           => id_cancel_reason_in,
            dt_last_update_in             => dt_last_update_in,
            id_prof_last_update_in        => id_prof_last_update_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            id_workflow_in                => id_workflow_in,
            dt_in_returned_in             => dt_in_returned_in,
            id_requested_by_in            => id_requested_by_in,
            patient_contact_number_in     => patient_contact_number_in,
            flg_all_med_adm_in            => flg_all_med_adm_in,
            id_epis_out_on_pass_out       => id_epis_out_on_pass_out,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_patient_in                 IN epis_out_on_pass.id_patient%TYPE DEFAULT NULL,
        id_episode_in                 IN epis_out_on_pass.id_episode%TYPE DEFAULT NULL,
        id_status_in                  IN epis_out_on_pass.id_status%TYPE DEFAULT NULL,
        id_request_reason_in          IN epis_out_on_pass.id_request_reason%TYPE DEFAULT NULL,
        dt_out_in                     IN epis_out_on_pass.dt_out%TYPE DEFAULT NULL,
        dt_in_in                      IN epis_out_on_pass.dt_in%TYPE DEFAULT NULL,
        total_allowed_hours_in        IN epis_out_on_pass.total_allowed_hours%TYPE DEFAULT NULL,
        flg_attending_physic_agree_in IN epis_out_on_pass.flg_attending_physic_agree%TYPE DEFAULT 'A',
        id_conclude_reason_in         IN epis_out_on_pass.id_conclude_reason%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN epis_out_on_pass.id_cancel_reason%TYPE DEFAULT NULL,
        dt_last_update_in             IN epis_out_on_pass.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in        IN epis_out_on_pass.id_prof_last_update%TYPE DEFAULT NULL,
        create_user_in                IN epis_out_on_pass.create_user%TYPE DEFAULT NULL,
        create_time_in                IN epis_out_on_pass.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN epis_out_on_pass.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN epis_out_on_pass.update_user%TYPE DEFAULT NULL,
        update_time_in                IN epis_out_on_pass.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN epis_out_on_pass.update_institution%TYPE DEFAULT NULL,
        id_workflow_in                IN epis_out_on_pass.id_workflow%TYPE DEFAULT NULL,
        dt_in_returned_in             IN epis_out_on_pass.dt_in_returned%TYPE DEFAULT NULL,
        id_requested_by_in            IN epis_out_on_pass.id_requested_by%TYPE DEFAULT NULL,
        patient_contact_number_in     IN epis_out_on_pass.patient_contact_number%TYPE DEFAULT NULL,
        flg_all_med_adm_in            IN epis_out_on_pass.flg_all_med_adm%TYPE DEFAULT 'N',
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN epis_out_on_pass.id_epis_out_on_pass%TYPE IS
        l_pky epis_out_on_pass.id_epis_out_on_pass%TYPE := next_key;
    BEGIN
        ins(id_epis_out_on_pass_in        => l_pky,
            id_patient_in                 => id_patient_in,
            id_episode_in                 => id_episode_in,
            id_status_in                  => id_status_in,
            id_request_reason_in          => id_request_reason_in,
            dt_out_in                     => dt_out_in,
            dt_in_in                      => dt_in_in,
            total_allowed_hours_in        => total_allowed_hours_in,
            flg_attending_physic_agree_in => flg_attending_physic_agree_in,
            id_conclude_reason_in         => id_conclude_reason_in,
            id_cancel_reason_in           => id_cancel_reason_in,
            dt_last_update_in             => dt_last_update_in,
            id_prof_last_update_in        => id_prof_last_update_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            id_workflow_in                => id_workflow_in,
            dt_in_returned_in             => dt_in_returned_in,
            id_requested_by_in            => id_requested_by_in,
            patient_contact_number_in     => patient_contact_number_in,
            flg_all_med_adm_in            => flg_all_med_adm_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_patient_in                 IN epis_out_on_pass.id_patient%TYPE DEFAULT NULL,
        id_episode_in                 IN epis_out_on_pass.id_episode%TYPE DEFAULT NULL,
        id_status_in                  IN epis_out_on_pass.id_status%TYPE DEFAULT NULL,
        id_request_reason_in          IN epis_out_on_pass.id_request_reason%TYPE DEFAULT NULL,
        dt_out_in                     IN epis_out_on_pass.dt_out%TYPE DEFAULT NULL,
        dt_in_in                      IN epis_out_on_pass.dt_in%TYPE DEFAULT NULL,
        total_allowed_hours_in        IN epis_out_on_pass.total_allowed_hours%TYPE DEFAULT NULL,
        flg_attending_physic_agree_in IN epis_out_on_pass.flg_attending_physic_agree%TYPE DEFAULT 'A',
        id_conclude_reason_in         IN epis_out_on_pass.id_conclude_reason%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN epis_out_on_pass.id_cancel_reason%TYPE DEFAULT NULL,
        dt_last_update_in             IN epis_out_on_pass.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in        IN epis_out_on_pass.id_prof_last_update%TYPE DEFAULT NULL,
        create_user_in                IN epis_out_on_pass.create_user%TYPE DEFAULT NULL,
        create_time_in                IN epis_out_on_pass.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN epis_out_on_pass.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN epis_out_on_pass.update_user%TYPE DEFAULT NULL,
        update_time_in                IN epis_out_on_pass.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN epis_out_on_pass.update_institution%TYPE DEFAULT NULL,
        id_workflow_in                IN epis_out_on_pass.id_workflow%TYPE DEFAULT NULL,
        dt_in_returned_in             IN epis_out_on_pass.dt_in_returned%TYPE DEFAULT NULL,
        id_requested_by_in            IN epis_out_on_pass.id_requested_by%TYPE DEFAULT NULL,
        patient_contact_number_in     IN epis_out_on_pass.patient_contact_number%TYPE DEFAULT NULL,
        flg_all_med_adm_in            IN epis_out_on_pass.flg_all_med_adm%TYPE DEFAULT 'N',
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN epis_out_on_pass.id_epis_out_on_pass%TYPE IS
        l_pky    epis_out_on_pass.id_epis_out_on_pass%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_epis_out_on_pass_in        => l_pky,
            id_patient_in                 => id_patient_in,
            id_episode_in                 => id_episode_in,
            id_status_in                  => id_status_in,
            id_request_reason_in          => id_request_reason_in,
            dt_out_in                     => dt_out_in,
            dt_in_in                      => dt_in_in,
            total_allowed_hours_in        => total_allowed_hours_in,
            flg_attending_physic_agree_in => flg_attending_physic_agree_in,
            id_conclude_reason_in         => id_conclude_reason_in,
            id_cancel_reason_in           => id_cancel_reason_in,
            dt_last_update_in             => dt_last_update_in,
            id_prof_last_update_in        => id_prof_last_update_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            id_workflow_in                => id_workflow_in,
            dt_in_returned_in             => dt_in_returned_in,
            id_requested_by_in            => id_requested_by_in,
            patient_contact_number_in     => patient_contact_number_in,
            flg_all_med_adm_in            => flg_all_med_adm_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_epis_out_on_pass_in        IN epis_out_on_pass.id_epis_out_on_pass%TYPE,
        id_patient_in                 IN epis_out_on_pass.id_patient%TYPE DEFAULT NULL,
        id_episode_in                 IN epis_out_on_pass.id_episode%TYPE DEFAULT NULL,
        id_status_in                  IN epis_out_on_pass.id_status%TYPE DEFAULT NULL,
        id_request_reason_in          IN epis_out_on_pass.id_request_reason%TYPE DEFAULT NULL,
        dt_out_in                     IN epis_out_on_pass.dt_out%TYPE DEFAULT NULL,
        dt_in_in                      IN epis_out_on_pass.dt_in%TYPE DEFAULT NULL,
        total_allowed_hours_in        IN epis_out_on_pass.total_allowed_hours%TYPE DEFAULT NULL,
        flg_attending_physic_agree_in IN epis_out_on_pass.flg_attending_physic_agree%TYPE DEFAULT 'A',
        id_conclude_reason_in         IN epis_out_on_pass.id_conclude_reason%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN epis_out_on_pass.id_cancel_reason%TYPE DEFAULT NULL,
        dt_last_update_in             IN epis_out_on_pass.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in        IN epis_out_on_pass.id_prof_last_update%TYPE DEFAULT NULL,
        create_user_in                IN epis_out_on_pass.create_user%TYPE DEFAULT NULL,
        create_time_in                IN epis_out_on_pass.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN epis_out_on_pass.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN epis_out_on_pass.update_user%TYPE DEFAULT NULL,
        update_time_in                IN epis_out_on_pass.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN epis_out_on_pass.update_institution%TYPE DEFAULT NULL,
        id_workflow_in                IN epis_out_on_pass.id_workflow%TYPE DEFAULT NULL,
        dt_in_returned_in             IN epis_out_on_pass.dt_in_returned%TYPE DEFAULT NULL,
        id_requested_by_in            IN epis_out_on_pass.id_requested_by%TYPE DEFAULT NULL,
        patient_contact_number_in     IN epis_out_on_pass.patient_contact_number%TYPE DEFAULT NULL,
        flg_all_med_adm_in            IN epis_out_on_pass.flg_all_med_adm%TYPE DEFAULT 'N',
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO epis_out_on_pass
            (id_epis_out_on_pass,
             id_patient,
             id_episode,
             id_status,
             id_request_reason,
             dt_out,
             dt_in,
             total_allowed_hours,
             flg_attending_physic_agree,
             id_conclude_reason,
             id_cancel_reason,
             dt_last_update,
             id_prof_last_update,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_workflow,
             dt_in_returned,
             id_requested_by,
             patient_contact_number,
             flg_all_med_adm)
        VALUES
            (id_epis_out_on_pass_in,
             id_patient_in,
             id_episode_in,
             id_status_in,
             id_request_reason_in,
             dt_out_in,
             dt_in_in,
             total_allowed_hours_in,
             flg_attending_physic_agree_in,
             id_conclude_reason_in,
             id_cancel_reason_in,
             dt_last_update_in,
             id_prof_last_update_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_workflow_in,
             dt_in_returned_in,
             id_requested_by_in,
             patient_contact_number_in,
             flg_all_med_adm_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_epis_out_on_pass_in        IN epis_out_on_pass.id_epis_out_on_pass%TYPE,
        id_patient_in                 IN epis_out_on_pass.id_patient%TYPE DEFAULT NULL,
        id_episode_in                 IN epis_out_on_pass.id_episode%TYPE DEFAULT NULL,
        id_status_in                  IN epis_out_on_pass.id_status%TYPE DEFAULT NULL,
        id_request_reason_in          IN epis_out_on_pass.id_request_reason%TYPE DEFAULT NULL,
        dt_out_in                     IN epis_out_on_pass.dt_out%TYPE DEFAULT NULL,
        dt_in_in                      IN epis_out_on_pass.dt_in%TYPE DEFAULT NULL,
        total_allowed_hours_in        IN epis_out_on_pass.total_allowed_hours%TYPE DEFAULT NULL,
        flg_attending_physic_agree_in IN epis_out_on_pass.flg_attending_physic_agree%TYPE DEFAULT 'A',
        id_conclude_reason_in         IN epis_out_on_pass.id_conclude_reason%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN epis_out_on_pass.id_cancel_reason%TYPE DEFAULT NULL,
        dt_last_update_in             IN epis_out_on_pass.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in        IN epis_out_on_pass.id_prof_last_update%TYPE DEFAULT NULL,
        create_user_in                IN epis_out_on_pass.create_user%TYPE DEFAULT NULL,
        create_time_in                IN epis_out_on_pass.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN epis_out_on_pass.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN epis_out_on_pass.update_user%TYPE DEFAULT NULL,
        update_time_in                IN epis_out_on_pass.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN epis_out_on_pass.update_institution%TYPE DEFAULT NULL,
        id_workflow_in                IN epis_out_on_pass.id_workflow%TYPE DEFAULT NULL,
        dt_in_returned_in             IN epis_out_on_pass.dt_in_returned%TYPE DEFAULT NULL,
        id_requested_by_in            IN epis_out_on_pass.id_requested_by%TYPE DEFAULT NULL,
        patient_contact_number_in     IN epis_out_on_pass.patient_contact_number%TYPE DEFAULT NULL,
        flg_all_med_adm_in            IN epis_out_on_pass.flg_all_med_adm%TYPE DEFAULT 'N',
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_epis_out_on_pass_in        => id_epis_out_on_pass_in,
            id_patient_in                 => id_patient_in,
            id_episode_in                 => id_episode_in,
            id_status_in                  => id_status_in,
            id_request_reason_in          => id_request_reason_in,
            dt_out_in                     => dt_out_in,
            dt_in_in                      => dt_in_in,
            total_allowed_hours_in        => total_allowed_hours_in,
            flg_attending_physic_agree_in => flg_attending_physic_agree_in,
            id_conclude_reason_in         => id_conclude_reason_in,
            id_cancel_reason_in           => id_cancel_reason_in,
            dt_last_update_in             => dt_last_update_in,
            id_prof_last_update_in        => id_prof_last_update_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            id_workflow_in                => id_workflow_in,
            dt_in_returned_in             => dt_in_returned_in,
            id_requested_by_in            => id_requested_by_in,
            patient_contact_number_in     => patient_contact_number_in,
            flg_all_med_adm_in            => flg_all_med_adm_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_out_on_pass%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec epis_out_on_pass%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_epis_out_on_pass := next_key(sequence_in);
        END IF;
    
        ins(id_epis_out_on_pass_in        => l_rec.id_epis_out_on_pass,
            id_patient_in                 => l_rec.id_patient,
            id_episode_in                 => l_rec.id_episode,
            id_status_in                  => l_rec.id_status,
            id_request_reason_in          => l_rec.id_request_reason,
            dt_out_in                     => l_rec.dt_out,
            dt_in_in                      => l_rec.dt_in,
            total_allowed_hours_in        => l_rec.total_allowed_hours,
            flg_attending_physic_agree_in => l_rec.flg_attending_physic_agree,
            id_conclude_reason_in         => l_rec.id_conclude_reason,
            id_cancel_reason_in           => l_rec.id_cancel_reason,
            dt_last_update_in             => l_rec.dt_last_update,
            id_prof_last_update_in        => l_rec.id_prof_last_update,
            create_user_in                => l_rec.create_user,
            create_time_in                => l_rec.create_time,
            create_institution_in         => l_rec.create_institution,
            update_user_in                => l_rec.update_user,
            update_time_in                => l_rec.update_time,
            update_institution_in         => l_rec.update_institution,
            id_workflow_in                => l_rec.id_workflow,
            dt_in_returned_in             => l_rec.dt_in_returned,
            id_requested_by_in            => l_rec.id_requested_by,
            patient_contact_number_in     => l_rec.patient_contact_number,
            flg_all_med_adm_in            => l_rec.flg_all_med_adm,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_out_on_pass%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_out_on_pass_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO epis_out_on_pass
                    (id_epis_out_on_pass,
                     id_patient,
                     id_episode,
                     id_status,
                     id_request_reason,
                     dt_out,
                     dt_in,
                     total_allowed_hours,
                     flg_attending_physic_agree,
                     id_conclude_reason,
                     id_cancel_reason,
                     dt_last_update,
                     id_prof_last_update,
                     id_workflow,
                     dt_in_returned,
                     id_requested_by,
                     patient_contact_number,
                     flg_all_med_adm)
                VALUES
                    (rows_in(indx).id_epis_out_on_pass,
                     rows_in(indx).id_patient,
                     rows_in(indx).id_episode,
                     rows_in(indx).id_status,
                     rows_in(indx).id_request_reason,
                     rows_in(indx).dt_out,
                     rows_in(indx).dt_in,
                     rows_in(indx).total_allowed_hours,
                     rows_in(indx).flg_attending_physic_agree,
                     rows_in(indx).id_conclude_reason,
                     rows_in(indx).id_cancel_reason,
                     rows_in(indx).dt_last_update,
                     rows_in(indx).id_prof_last_update,
                     rows_in(indx).id_workflow,
                     rows_in(indx).dt_in_returned,
                     rows_in(indx).id_requested_by,
                     rows_in(indx).patient_contact_number,
                     rows_in(indx).flg_all_med_adm)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_out_on_pass_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_out_on_pass_in         IN epis_out_on_pass.id_epis_out_on_pass%TYPE,
        id_patient_in                  IN epis_out_on_pass.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                 IN BOOLEAN := TRUE,
        id_episode_in                  IN epis_out_on_pass.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                 IN BOOLEAN := TRUE,
        id_status_in                   IN epis_out_on_pass.id_status%TYPE DEFAULT NULL,
        id_status_nin                  IN BOOLEAN := TRUE,
        id_request_reason_in           IN epis_out_on_pass.id_request_reason%TYPE DEFAULT NULL,
        id_request_reason_nin          IN BOOLEAN := TRUE,
        dt_out_in                      IN epis_out_on_pass.dt_out%TYPE DEFAULT NULL,
        dt_out_nin                     IN BOOLEAN := TRUE,
        dt_in_in                       IN epis_out_on_pass.dt_in%TYPE DEFAULT NULL,
        dt_in_nin                      IN BOOLEAN := TRUE,
        total_allowed_hours_in         IN epis_out_on_pass.total_allowed_hours%TYPE DEFAULT NULL,
        total_allowed_hours_nin        IN BOOLEAN := TRUE,
        flg_attending_physic_agree_in  IN epis_out_on_pass.flg_attending_physic_agree%TYPE DEFAULT NULL,
        flg_attending_physic_agree_nin IN BOOLEAN := TRUE,
        id_conclude_reason_in          IN epis_out_on_pass.id_conclude_reason%TYPE DEFAULT NULL,
        id_conclude_reason_nin         IN BOOLEAN := TRUE,
        id_cancel_reason_in            IN epis_out_on_pass.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin           IN BOOLEAN := TRUE,
        dt_last_update_in              IN epis_out_on_pass.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin             IN BOOLEAN := TRUE,
        id_prof_last_update_in         IN epis_out_on_pass.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin        IN BOOLEAN := TRUE,
        create_user_in                 IN epis_out_on_pass.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN epis_out_on_pass.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN epis_out_on_pass.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN epis_out_on_pass.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN epis_out_on_pass.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN epis_out_on_pass.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        id_workflow_in                 IN epis_out_on_pass.id_workflow%TYPE DEFAULT NULL,
        id_workflow_nin                IN BOOLEAN := TRUE,
        dt_in_returned_in              IN epis_out_on_pass.dt_in_returned%TYPE DEFAULT NULL,
        dt_in_returned_nin             IN BOOLEAN := TRUE,
        id_requested_by_in             IN epis_out_on_pass.id_requested_by%TYPE DEFAULT NULL,
        id_requested_by_nin            IN BOOLEAN := TRUE,
        patient_contact_number_in      IN epis_out_on_pass.patient_contact_number%TYPE DEFAULT NULL,
        patient_contact_number_nin     IN BOOLEAN := TRUE,
        flg_all_med_adm_in             IN epis_out_on_pass.flg_all_med_adm%TYPE DEFAULT NULL,
        flg_all_med_adm_nin            IN BOOLEAN := TRUE,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       IN OUT table_varchar
    ) IS
        l_rows_out                     table_varchar;
        l_id_patient_n                 NUMBER(1) := sys.diutil.bool_to_int(id_patient_nin);
        l_id_episode_n                 NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_id_status_n                  NUMBER(1) := sys.diutil.bool_to_int(id_status_nin);
        l_id_request_reason_n          NUMBER(1) := sys.diutil.bool_to_int(id_request_reason_nin);
        l_dt_out_n                     NUMBER(1) := sys.diutil.bool_to_int(dt_out_nin);
        l_dt_in_n                      NUMBER(1) := sys.diutil.bool_to_int(dt_in_nin);
        l_total_allowed_hours_n        NUMBER(1) := sys.diutil.bool_to_int(total_allowed_hours_nin);
        l_flg_attending_physic_agree_n NUMBER(1) := sys.diutil.bool_to_int(flg_attending_physic_agree_nin);
        l_id_conclude_reason_n         NUMBER(1) := sys.diutil.bool_to_int(id_conclude_reason_nin);
        l_id_cancel_reason_n           NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_dt_last_update_n             NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_nin);
        l_id_prof_last_update_n        NUMBER(1) := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_create_user_n                NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n                NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n         NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n                NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n                NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n         NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_workflow_n                NUMBER(1) := sys.diutil.bool_to_int(id_workflow_nin);
        l_dt_in_returned_n             NUMBER(1) := sys.diutil.bool_to_int(dt_in_returned_nin);
        l_id_requested_by_n            NUMBER(1) := sys.diutil.bool_to_int(id_requested_by_nin);
        l_patient_contact_number_n     NUMBER(1) := sys.diutil.bool_to_int(patient_contact_number_nin);
        l_flg_all_med_adm_n            NUMBER(1) := sys.diutil.bool_to_int(flg_all_med_adm_nin);
    BEGIN
    
        UPDATE epis_out_on_pass
           SET id_patient                 = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_episode                 = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_status                  = decode(l_id_status_n, 0, id_status_in, nvl(id_status_in, id_status)),
               id_request_reason          = decode(l_id_request_reason_n,
                                                   0,
                                                   id_request_reason_in,
                                                   nvl(id_request_reason_in, id_request_reason)),
               dt_out                     = decode(l_dt_out_n, 0, dt_out_in, nvl(dt_out_in, dt_out)),
               dt_in                      = decode(l_dt_in_n, 0, dt_in_in, nvl(dt_in_in, dt_in)),
               total_allowed_hours        = decode(l_total_allowed_hours_n,
                                                   0,
                                                   total_allowed_hours_in,
                                                   nvl(total_allowed_hours_in, total_allowed_hours)),
               flg_attending_physic_agree = decode(l_flg_attending_physic_agree_n,
                                                   0,
                                                   flg_attending_physic_agree_in,
                                                   nvl(flg_attending_physic_agree_in, flg_attending_physic_agree)),
               id_conclude_reason         = decode(l_id_conclude_reason_n,
                                                   0,
                                                   id_conclude_reason_in,
                                                   nvl(id_conclude_reason_in, id_conclude_reason)),
               id_cancel_reason           = decode(l_id_cancel_reason_n,
                                                   0,
                                                   id_cancel_reason_in,
                                                   nvl(id_cancel_reason_in, id_cancel_reason)),
               dt_last_update             = decode(l_dt_last_update_n,
                                                   0,
                                                   dt_last_update_in,
                                                   nvl(dt_last_update_in, dt_last_update)),
               id_prof_last_update        = decode(l_id_prof_last_update_n,
                                                   0,
                                                   id_prof_last_update_in,
                                                   nvl(id_prof_last_update_in, id_prof_last_update)),
               create_user                = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time                = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution         = decode(l_create_institution_n,
                                                   0,
                                                   create_institution_in,
                                                   nvl(create_institution_in, create_institution)),
               update_user                = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time                = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution         = decode(l_update_institution_n,
                                                   0,
                                                   update_institution_in,
                                                   nvl(update_institution_in, update_institution)),
               id_workflow                = decode(l_id_workflow_n, 0, id_workflow_in, nvl(id_workflow_in, id_workflow)),
               dt_in_returned             = decode(l_dt_in_returned_n,
                                                   0,
                                                   dt_in_returned_in,
                                                   nvl(dt_in_returned_in, dt_in_returned)),
               id_requested_by            = decode(l_id_requested_by_n,
                                                   0,
                                                   id_requested_by_in,
                                                   nvl(id_requested_by_in, id_requested_by)),
               patient_contact_number     = decode(l_patient_contact_number_n,
                                                   0,
                                                   patient_contact_number_in,
                                                   nvl(patient_contact_number_in, patient_contact_number)),
               flg_all_med_adm            = decode(l_flg_all_med_adm_n,
                                                   0,
                                                   flg_all_med_adm_in,
                                                   nvl(flg_all_med_adm_in, flg_all_med_adm))
         WHERE id_epis_out_on_pass = id_epis_out_on_pass_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_out_on_pass_in         IN epis_out_on_pass.id_epis_out_on_pass%TYPE,
        id_patient_in                  IN epis_out_on_pass.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                 IN BOOLEAN := TRUE,
        id_episode_in                  IN epis_out_on_pass.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                 IN BOOLEAN := TRUE,
        id_status_in                   IN epis_out_on_pass.id_status%TYPE DEFAULT NULL,
        id_status_nin                  IN BOOLEAN := TRUE,
        id_request_reason_in           IN epis_out_on_pass.id_request_reason%TYPE DEFAULT NULL,
        id_request_reason_nin          IN BOOLEAN := TRUE,
        dt_out_in                      IN epis_out_on_pass.dt_out%TYPE DEFAULT NULL,
        dt_out_nin                     IN BOOLEAN := TRUE,
        dt_in_in                       IN epis_out_on_pass.dt_in%TYPE DEFAULT NULL,
        dt_in_nin                      IN BOOLEAN := TRUE,
        total_allowed_hours_in         IN epis_out_on_pass.total_allowed_hours%TYPE DEFAULT NULL,
        total_allowed_hours_nin        IN BOOLEAN := TRUE,
        flg_attending_physic_agree_in  IN epis_out_on_pass.flg_attending_physic_agree%TYPE DEFAULT NULL,
        flg_attending_physic_agree_nin IN BOOLEAN := TRUE,
        id_conclude_reason_in          IN epis_out_on_pass.id_conclude_reason%TYPE DEFAULT NULL,
        id_conclude_reason_nin         IN BOOLEAN := TRUE,
        id_cancel_reason_in            IN epis_out_on_pass.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin           IN BOOLEAN := TRUE,
        dt_last_update_in              IN epis_out_on_pass.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin             IN BOOLEAN := TRUE,
        id_prof_last_update_in         IN epis_out_on_pass.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin        IN BOOLEAN := TRUE,
        create_user_in                 IN epis_out_on_pass.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN epis_out_on_pass.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN epis_out_on_pass.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN epis_out_on_pass.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN epis_out_on_pass.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN epis_out_on_pass.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        id_workflow_in                 IN epis_out_on_pass.id_workflow%TYPE DEFAULT NULL,
        id_workflow_nin                IN BOOLEAN := TRUE,
        dt_in_returned_in              IN epis_out_on_pass.dt_in_returned%TYPE DEFAULT NULL,
        dt_in_returned_nin             IN BOOLEAN := TRUE,
        id_requested_by_in             IN epis_out_on_pass.id_requested_by%TYPE DEFAULT NULL,
        id_requested_by_nin            IN BOOLEAN := TRUE,
        patient_contact_number_in      IN epis_out_on_pass.patient_contact_number%TYPE DEFAULT NULL,
        patient_contact_number_nin     IN BOOLEAN := TRUE,
        flg_all_med_adm_in             IN epis_out_on_pass.flg_all_med_adm%TYPE DEFAULT NULL,
        flg_all_med_adm_nin            IN BOOLEAN := TRUE,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_out_on_pass_in         => id_epis_out_on_pass_in,
            id_patient_in                  => id_patient_in,
            id_patient_nin                 => id_patient_nin,
            id_episode_in                  => id_episode_in,
            id_episode_nin                 => id_episode_nin,
            id_status_in                   => id_status_in,
            id_status_nin                  => id_status_nin,
            id_request_reason_in           => id_request_reason_in,
            id_request_reason_nin          => id_request_reason_nin,
            dt_out_in                      => dt_out_in,
            dt_out_nin                     => dt_out_nin,
            dt_in_in                       => dt_in_in,
            dt_in_nin                      => dt_in_nin,
            total_allowed_hours_in         => total_allowed_hours_in,
            total_allowed_hours_nin        => total_allowed_hours_nin,
            flg_attending_physic_agree_in  => flg_attending_physic_agree_in,
            flg_attending_physic_agree_nin => flg_attending_physic_agree_nin,
            id_conclude_reason_in          => id_conclude_reason_in,
            id_conclude_reason_nin         => id_conclude_reason_nin,
            id_cancel_reason_in            => id_cancel_reason_in,
            id_cancel_reason_nin           => id_cancel_reason_nin,
            dt_last_update_in              => dt_last_update_in,
            dt_last_update_nin             => dt_last_update_nin,
            id_prof_last_update_in         => id_prof_last_update_in,
            id_prof_last_update_nin        => id_prof_last_update_nin,
            create_user_in                 => create_user_in,
            create_user_nin                => create_user_nin,
            create_time_in                 => create_time_in,
            create_time_nin                => create_time_nin,
            create_institution_in          => create_institution_in,
            create_institution_nin         => create_institution_nin,
            update_user_in                 => update_user_in,
            update_user_nin                => update_user_nin,
            update_time_in                 => update_time_in,
            update_time_nin                => update_time_nin,
            update_institution_in          => update_institution_in,
            update_institution_nin         => update_institution_nin,
            id_workflow_in                 => id_workflow_in,
            id_workflow_nin                => id_workflow_nin,
            dt_in_returned_in              => dt_in_returned_in,
            dt_in_returned_nin             => dt_in_returned_nin,
            id_requested_by_in             => id_requested_by_in,
            id_requested_by_nin            => id_requested_by_nin,
            patient_contact_number_in      => patient_contact_number_in,
            patient_contact_number_nin     => patient_contact_number_nin,
            flg_all_med_adm_in             => flg_all_med_adm_in,
            flg_all_med_adm_nin            => flg_all_med_adm_nin,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_patient_in                  IN epis_out_on_pass.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                 IN BOOLEAN := TRUE,
        id_episode_in                  IN epis_out_on_pass.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                 IN BOOLEAN := TRUE,
        id_status_in                   IN epis_out_on_pass.id_status%TYPE DEFAULT NULL,
        id_status_nin                  IN BOOLEAN := TRUE,
        id_request_reason_in           IN epis_out_on_pass.id_request_reason%TYPE DEFAULT NULL,
        id_request_reason_nin          IN BOOLEAN := TRUE,
        dt_out_in                      IN epis_out_on_pass.dt_out%TYPE DEFAULT NULL,
        dt_out_nin                     IN BOOLEAN := TRUE,
        dt_in_in                       IN epis_out_on_pass.dt_in%TYPE DEFAULT NULL,
        dt_in_nin                      IN BOOLEAN := TRUE,
        total_allowed_hours_in         IN epis_out_on_pass.total_allowed_hours%TYPE DEFAULT NULL,
        total_allowed_hours_nin        IN BOOLEAN := TRUE,
        flg_attending_physic_agree_in  IN epis_out_on_pass.flg_attending_physic_agree%TYPE DEFAULT NULL,
        flg_attending_physic_agree_nin IN BOOLEAN := TRUE,
        id_conclude_reason_in          IN epis_out_on_pass.id_conclude_reason%TYPE DEFAULT NULL,
        id_conclude_reason_nin         IN BOOLEAN := TRUE,
        id_cancel_reason_in            IN epis_out_on_pass.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin           IN BOOLEAN := TRUE,
        dt_last_update_in              IN epis_out_on_pass.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin             IN BOOLEAN := TRUE,
        id_prof_last_update_in         IN epis_out_on_pass.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin        IN BOOLEAN := TRUE,
        create_user_in                 IN epis_out_on_pass.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN epis_out_on_pass.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN epis_out_on_pass.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN epis_out_on_pass.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN epis_out_on_pass.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN epis_out_on_pass.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        id_workflow_in                 IN epis_out_on_pass.id_workflow%TYPE DEFAULT NULL,
        id_workflow_nin                IN BOOLEAN := TRUE,
        dt_in_returned_in              IN epis_out_on_pass.dt_in_returned%TYPE DEFAULT NULL,
        dt_in_returned_nin             IN BOOLEAN := TRUE,
        id_requested_by_in             IN epis_out_on_pass.id_requested_by%TYPE DEFAULT NULL,
        id_requested_by_nin            IN BOOLEAN := TRUE,
        patient_contact_number_in      IN epis_out_on_pass.patient_contact_number%TYPE DEFAULT NULL,
        patient_contact_number_nin     IN BOOLEAN := TRUE,
        flg_all_med_adm_in             IN epis_out_on_pass.flg_all_med_adm%TYPE DEFAULT NULL,
        flg_all_med_adm_nin            IN BOOLEAN := TRUE,
        where_in                       IN VARCHAR2,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       IN OUT table_varchar
    ) IS
        l_sql                          VARCHAR2(32767);
        l_rows_out                     table_varchar;
        l_id_patient_n                 NUMBER(1) := sys.diutil.bool_to_int(id_patient_nin);
        l_id_episode_n                 NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_id_status_n                  NUMBER(1) := sys.diutil.bool_to_int(id_status_nin);
        l_id_request_reason_n          NUMBER(1) := sys.diutil.bool_to_int(id_request_reason_nin);
        l_dt_out_n                     NUMBER(1) := sys.diutil.bool_to_int(dt_out_nin);
        l_dt_in_n                      NUMBER(1) := sys.diutil.bool_to_int(dt_in_nin);
        l_total_allowed_hours_n        NUMBER(1) := sys.diutil.bool_to_int(total_allowed_hours_nin);
        l_flg_attending_physic_agree_n NUMBER(1) := sys.diutil.bool_to_int(flg_attending_physic_agree_nin);
        l_id_conclude_reason_n         NUMBER(1) := sys.diutil.bool_to_int(id_conclude_reason_nin);
        l_id_cancel_reason_n           NUMBER(1) := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_dt_last_update_n             NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_nin);
        l_id_prof_last_update_n        NUMBER(1) := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_create_user_n                NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n                NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n         NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n                NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n                NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n         NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_workflow_n                NUMBER(1) := sys.diutil.bool_to_int(id_workflow_nin);
        l_dt_in_returned_n             NUMBER(1) := sys.diutil.bool_to_int(dt_in_returned_nin);
        l_id_requested_by_n            NUMBER(1) := sys.diutil.bool_to_int(id_requested_by_nin);
        l_patient_contact_number_n     NUMBER(1) := sys.diutil.bool_to_int(patient_contact_number_nin);
        l_flg_all_med_adm_n            NUMBER(1) := sys.diutil.bool_to_int(flg_all_med_adm_nin);
    BEGIN
        l_id_patient_n                 := sys.diutil.bool_to_int(id_patient_nin);
        l_id_episode_n                 := sys.diutil.bool_to_int(id_episode_nin);
        l_id_status_n                  := sys.diutil.bool_to_int(id_status_nin);
        l_id_request_reason_n          := sys.diutil.bool_to_int(id_request_reason_nin);
        l_dt_out_n                     := sys.diutil.bool_to_int(dt_out_nin);
        l_dt_in_n                      := sys.diutil.bool_to_int(dt_in_nin);
        l_total_allowed_hours_n        := sys.diutil.bool_to_int(total_allowed_hours_nin);
        l_flg_attending_physic_agree_n := sys.diutil.bool_to_int(flg_attending_physic_agree_nin);
        l_id_conclude_reason_n         := sys.diutil.bool_to_int(id_conclude_reason_nin);
        l_id_cancel_reason_n           := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_dt_last_update_n             := sys.diutil.bool_to_int(dt_last_update_nin);
        l_id_prof_last_update_n        := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_create_user_n                := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n                := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n         := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n                := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n                := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n         := sys.diutil.bool_to_int(update_institution_nin);
        l_id_workflow_n                := sys.diutil.bool_to_int(id_workflow_nin);
        l_dt_in_returned_n             := sys.diutil.bool_to_int(dt_in_returned_nin);
        l_id_requested_by_n            := sys.diutil.bool_to_int(id_requested_by_nin);
        l_patient_contact_number_n     := sys.diutil.bool_to_int(patient_contact_number_nin);
        l_flg_all_med_adm_n            := sys.diutil.bool_to_int(flg_all_med_adm_nin);
        l_sql                          := 'UPDATE epis_out_on_pass SET' || ' ID_PATIENT = decode (' || l_id_patient_n ||
                                          ',0,:ID_PATIENT_in, NVL (:ID_PATIENT_in, ID_PATIENT)) ' || ',' ||
                                          ' ID_EPISODE = decode (' || l_id_episode_n ||
                                          ',0,:ID_EPISODE_in, NVL (:ID_EPISODE_in, ID_EPISODE)) ' || ',' ||
                                          ' ID_STATUS = decode (' || l_id_status_n ||
                                          ',0,:ID_STATUS_in, NVL (:ID_STATUS_in, ID_STATUS)) ' || ',' ||
                                          ' ID_REQUEST_REASON = decode (' || l_id_request_reason_n ||
                                          ',0,:ID_REQUEST_REASON_in, NVL (:ID_REQUEST_REASON_in, ID_REQUEST_REASON)) ' || ',' ||
                                          ' DT_OUT = decode (' || l_dt_out_n ||
                                          ',0,:DT_OUT_in, NVL (:DT_OUT_in, DT_OUT)) ' || ',' || ' DT_IN = decode (' ||
                                          l_dt_in_n || ',0,:DT_IN_in, NVL (:DT_IN_in, DT_IN)) ' || ',' ||
                                          ' TOTAL_ALLOWED_HOURS = decode (' || l_total_allowed_hours_n ||
                                          ',0,:TOTAL_ALLOWED_HOURS_in, NVL (:TOTAL_ALLOWED_HOURS_in, TOTAL_ALLOWED_HOURS)) ' || ',' ||
                                          ' FLG_ATTENDING_PHYSIC_AGREE = decode (' || l_flg_attending_physic_agree_n ||
                                          ',0,:FLG_ATTENDING_PHYSIC_AGREE_in, NVL (:FLG_ATTENDING_PHYSIC_AGREE_in, FLG_ATTENDING_PHYSIC_AGREE)) ' || ',' ||
                                          ' ID_CONCLUDE_REASON = decode (' || l_id_conclude_reason_n ||
                                          ',0,:ID_CONCLUDE_REASON_in, NVL (:ID_CONCLUDE_REASON_in, ID_CONCLUDE_REASON)) ' || ',' ||
                                          ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                                          ',0,:ID_CANCEL_REASON_in, NVL (:ID_CANCEL_REASON_in, ID_CANCEL_REASON)) ' || ',' ||
                                          ' DT_LAST_UPDATE = decode (' || l_dt_last_update_n ||
                                          ',0,:DT_LAST_UPDATE_in, NVL (:DT_LAST_UPDATE_in, DT_LAST_UPDATE)) ' || ',' ||
                                          ' ID_PROF_LAST_UPDATE = decode (' || l_id_prof_last_update_n ||
                                          ',0,:ID_PROF_LAST_UPDATE_in, NVL (:ID_PROF_LAST_UPDATE_in, ID_PROF_LAST_UPDATE)) ' || ',' ||
                                          ' CREATE_USER = decode (' || l_create_user_n ||
                                          ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                          ' CREATE_TIME = decode (' || l_create_time_n ||
                                          ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                          ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                          ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                          ' UPDATE_USER = decode (' || l_update_user_n ||
                                          ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                          ' UPDATE_TIME = decode (' || l_update_time_n ||
                                          ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                          ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                          ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                          ' ID_WORKFLOW = decode (' || l_id_workflow_n ||
                                          ',0,:ID_WORKFLOW_in, NVL (:ID_WORKFLOW_in, ID_WORKFLOW)) ' || ',' ||
                                          ' DT_IN_RETURNED = decode (' || l_dt_in_returned_n ||
                                          ',0,:DT_IN_RETURNED_in, NVL (:DT_IN_RETURNED_in, DT_IN_RETURNED)) ' || ',' ||
                                          ' ID_REQUESTED_BY = decode (' || l_id_requested_by_n ||
                                          ',0,:ID_REQUESTED_BY_in, NVL (:ID_REQUESTED_BY_in, ID_REQUESTED_BY)) ' || ',' ||
                                          ' PATIENT_CONTACT_NUMBER = decode (' || l_patient_contact_number_n ||
                                          ',0,:PATIENT_CONTACT_NUMBER_in, NVL (:PATIENT_CONTACT_NUMBER_in, PATIENT_CONTACT_NUMBER)) ' || ',' ||
                                          ' FLG_ALL_MED_ADM = decode (' || l_flg_all_med_adm_n ||
                                          ',0,:FLG_ALL_MED_ADM_in, NVL (:FLG_ALL_MED_ADM_in, FLG_ALL_MED_ADM)) ' ||
                                          ' where ' || nvl(where_in, '(1=1)') ||
                                          ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_patient_in, id_episode_in, id_status_in, id_request_reason_in, dt_out_in, dt_in_in, total_allowed_hours_in, flg_attending_physic_agree_in, id_conclude_reason_in, id_cancel_reason_in, dt_last_update_in, id_prof_last_update_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_workflow_in, dt_in_returned_in, id_requested_by_in, patient_contact_number_in, flg_all_med_adm_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_patient_in                  IN epis_out_on_pass.id_patient%TYPE DEFAULT NULL,
        id_patient_nin                 IN BOOLEAN := TRUE,
        id_episode_in                  IN epis_out_on_pass.id_episode%TYPE DEFAULT NULL,
        id_episode_nin                 IN BOOLEAN := TRUE,
        id_status_in                   IN epis_out_on_pass.id_status%TYPE DEFAULT NULL,
        id_status_nin                  IN BOOLEAN := TRUE,
        id_request_reason_in           IN epis_out_on_pass.id_request_reason%TYPE DEFAULT NULL,
        id_request_reason_nin          IN BOOLEAN := TRUE,
        dt_out_in                      IN epis_out_on_pass.dt_out%TYPE DEFAULT NULL,
        dt_out_nin                     IN BOOLEAN := TRUE,
        dt_in_in                       IN epis_out_on_pass.dt_in%TYPE DEFAULT NULL,
        dt_in_nin                      IN BOOLEAN := TRUE,
        total_allowed_hours_in         IN epis_out_on_pass.total_allowed_hours%TYPE DEFAULT NULL,
        total_allowed_hours_nin        IN BOOLEAN := TRUE,
        flg_attending_physic_agree_in  IN epis_out_on_pass.flg_attending_physic_agree%TYPE DEFAULT NULL,
        flg_attending_physic_agree_nin IN BOOLEAN := TRUE,
        id_conclude_reason_in          IN epis_out_on_pass.id_conclude_reason%TYPE DEFAULT NULL,
        id_conclude_reason_nin         IN BOOLEAN := TRUE,
        id_cancel_reason_in            IN epis_out_on_pass.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin           IN BOOLEAN := TRUE,
        dt_last_update_in              IN epis_out_on_pass.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin             IN BOOLEAN := TRUE,
        id_prof_last_update_in         IN epis_out_on_pass.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin        IN BOOLEAN := TRUE,
        create_user_in                 IN epis_out_on_pass.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN epis_out_on_pass.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN epis_out_on_pass.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN epis_out_on_pass.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN epis_out_on_pass.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN epis_out_on_pass.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        id_workflow_in                 IN epis_out_on_pass.id_workflow%TYPE DEFAULT NULL,
        id_workflow_nin                IN BOOLEAN := TRUE,
        dt_in_returned_in              IN epis_out_on_pass.dt_in_returned%TYPE DEFAULT NULL,
        dt_in_returned_nin             IN BOOLEAN := TRUE,
        id_requested_by_in             IN epis_out_on_pass.id_requested_by%TYPE DEFAULT NULL,
        id_requested_by_nin            IN BOOLEAN := TRUE,
        patient_contact_number_in      IN epis_out_on_pass.patient_contact_number%TYPE DEFAULT NULL,
        patient_contact_number_nin     IN BOOLEAN := TRUE,
        flg_all_med_adm_in             IN epis_out_on_pass.flg_all_med_adm%TYPE DEFAULT NULL,
        flg_all_med_adm_nin            IN BOOLEAN := TRUE,
        where_in                       IN VARCHAR2,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_patient_in                  => id_patient_in,
            id_patient_nin                 => id_patient_nin,
            id_episode_in                  => id_episode_in,
            id_episode_nin                 => id_episode_nin,
            id_status_in                   => id_status_in,
            id_status_nin                  => id_status_nin,
            id_request_reason_in           => id_request_reason_in,
            id_request_reason_nin          => id_request_reason_nin,
            dt_out_in                      => dt_out_in,
            dt_out_nin                     => dt_out_nin,
            dt_in_in                       => dt_in_in,
            dt_in_nin                      => dt_in_nin,
            total_allowed_hours_in         => total_allowed_hours_in,
            total_allowed_hours_nin        => total_allowed_hours_nin,
            flg_attending_physic_agree_in  => flg_attending_physic_agree_in,
            flg_attending_physic_agree_nin => flg_attending_physic_agree_nin,
            id_conclude_reason_in          => id_conclude_reason_in,
            id_conclude_reason_nin         => id_conclude_reason_nin,
            id_cancel_reason_in            => id_cancel_reason_in,
            id_cancel_reason_nin           => id_cancel_reason_nin,
            dt_last_update_in              => dt_last_update_in,
            dt_last_update_nin             => dt_last_update_nin,
            id_prof_last_update_in         => id_prof_last_update_in,
            id_prof_last_update_nin        => id_prof_last_update_nin,
            create_user_in                 => create_user_in,
            create_user_nin                => create_user_nin,
            create_time_in                 => create_time_in,
            create_time_nin                => create_time_nin,
            create_institution_in          => create_institution_in,
            create_institution_nin         => create_institution_nin,
            update_user_in                 => update_user_in,
            update_user_nin                => update_user_nin,
            update_time_in                 => update_time_in,
            update_time_nin                => update_time_nin,
            update_institution_in          => update_institution_in,
            update_institution_nin         => update_institution_nin,
            id_workflow_in                 => id_workflow_in,
            id_workflow_nin                => id_workflow_nin,
            dt_in_returned_in              => dt_in_returned_in,
            dt_in_returned_nin             => dt_in_returned_nin,
            id_requested_by_in             => id_requested_by_in,
            id_requested_by_nin            => id_requested_by_nin,
            patient_contact_number_in      => patient_contact_number_in,
            patient_contact_number_nin     => patient_contact_number_nin,
            flg_all_med_adm_in             => flg_all_med_adm_in,
            flg_all_med_adm_nin            => flg_all_med_adm_nin,
            where_in                       => where_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_epis_out_on_pass_in        IN epis_out_on_pass.id_epis_out_on_pass%TYPE,
        id_patient_in                 IN epis_out_on_pass.id_patient%TYPE DEFAULT NULL,
        id_episode_in                 IN epis_out_on_pass.id_episode%TYPE DEFAULT NULL,
        id_status_in                  IN epis_out_on_pass.id_status%TYPE DEFAULT NULL,
        id_request_reason_in          IN epis_out_on_pass.id_request_reason%TYPE DEFAULT NULL,
        dt_out_in                     IN epis_out_on_pass.dt_out%TYPE DEFAULT NULL,
        dt_in_in                      IN epis_out_on_pass.dt_in%TYPE DEFAULT NULL,
        total_allowed_hours_in        IN epis_out_on_pass.total_allowed_hours%TYPE DEFAULT NULL,
        flg_attending_physic_agree_in IN epis_out_on_pass.flg_attending_physic_agree%TYPE DEFAULT NULL,
        id_conclude_reason_in         IN epis_out_on_pass.id_conclude_reason%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN epis_out_on_pass.id_cancel_reason%TYPE DEFAULT NULL,
        dt_last_update_in             IN epis_out_on_pass.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in        IN epis_out_on_pass.id_prof_last_update%TYPE DEFAULT NULL,
        create_user_in                IN epis_out_on_pass.create_user%TYPE DEFAULT NULL,
        create_time_in                IN epis_out_on_pass.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN epis_out_on_pass.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN epis_out_on_pass.update_user%TYPE DEFAULT NULL,
        update_time_in                IN epis_out_on_pass.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN epis_out_on_pass.update_institution%TYPE DEFAULT NULL,
        id_workflow_in                IN epis_out_on_pass.id_workflow%TYPE DEFAULT NULL,
        dt_in_returned_in             IN epis_out_on_pass.dt_in_returned%TYPE DEFAULT NULL,
        id_requested_by_in            IN epis_out_on_pass.id_requested_by%TYPE DEFAULT NULL,
        patient_contact_number_in     IN epis_out_on_pass.patient_contact_number%TYPE DEFAULT NULL,
        flg_all_med_adm_in            IN epis_out_on_pass.flg_all_med_adm%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_out_on_pass_in        => id_epis_out_on_pass_in,
            id_patient_in                 => id_patient_in,
            id_episode_in                 => id_episode_in,
            id_status_in                  => id_status_in,
            id_request_reason_in          => id_request_reason_in,
            dt_out_in                     => dt_out_in,
            dt_in_in                      => dt_in_in,
            total_allowed_hours_in        => total_allowed_hours_in,
            flg_attending_physic_agree_in => flg_attending_physic_agree_in,
            id_conclude_reason_in         => id_conclude_reason_in,
            id_cancel_reason_in           => id_cancel_reason_in,
            dt_last_update_in             => dt_last_update_in,
            id_prof_last_update_in        => id_prof_last_update_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            id_workflow_in                => id_workflow_in,
            dt_in_returned_in             => dt_in_returned_in,
            id_requested_by_in            => id_requested_by_in,
            patient_contact_number_in     => patient_contact_number_in,
            flg_all_med_adm_in            => flg_all_med_adm_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_epis_out_on_pass_in        => id_epis_out_on_pass_in,
                id_patient_in                 => id_patient_in,
                id_episode_in                 => id_episode_in,
                id_status_in                  => id_status_in,
                id_request_reason_in          => id_request_reason_in,
                dt_out_in                     => dt_out_in,
                dt_in_in                      => dt_in_in,
                total_allowed_hours_in        => total_allowed_hours_in,
                flg_attending_physic_agree_in => flg_attending_physic_agree_in,
                id_conclude_reason_in         => id_conclude_reason_in,
                id_cancel_reason_in           => id_cancel_reason_in,
                dt_last_update_in             => dt_last_update_in,
                id_prof_last_update_in        => id_prof_last_update_in,
                create_user_in                => create_user_in,
                create_time_in                => create_time_in,
                create_institution_in         => create_institution_in,
                update_user_in                => update_user_in,
                update_time_in                => update_time_in,
                update_institution_in         => update_institution_in,
                id_workflow_in                => id_workflow_in,
                dt_in_returned_in             => dt_in_returned_in,
                id_requested_by_in            => id_requested_by_in,
                patient_contact_number_in     => patient_contact_number_in,
                flg_all_med_adm_in            => flg_all_med_adm_in,
                handle_error_in               => handle_error_in,
                rows_out                      => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_epis_out_on_pass_in        IN epis_out_on_pass.id_epis_out_on_pass%TYPE,
        id_patient_in                 IN epis_out_on_pass.id_patient%TYPE DEFAULT NULL,
        id_episode_in                 IN epis_out_on_pass.id_episode%TYPE DEFAULT NULL,
        id_status_in                  IN epis_out_on_pass.id_status%TYPE DEFAULT NULL,
        id_request_reason_in          IN epis_out_on_pass.id_request_reason%TYPE DEFAULT NULL,
        dt_out_in                     IN epis_out_on_pass.dt_out%TYPE DEFAULT NULL,
        dt_in_in                      IN epis_out_on_pass.dt_in%TYPE DEFAULT NULL,
        total_allowed_hours_in        IN epis_out_on_pass.total_allowed_hours%TYPE DEFAULT NULL,
        flg_attending_physic_agree_in IN epis_out_on_pass.flg_attending_physic_agree%TYPE DEFAULT NULL,
        id_conclude_reason_in         IN epis_out_on_pass.id_conclude_reason%TYPE DEFAULT NULL,
        id_cancel_reason_in           IN epis_out_on_pass.id_cancel_reason%TYPE DEFAULT NULL,
        dt_last_update_in             IN epis_out_on_pass.dt_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_in        IN epis_out_on_pass.id_prof_last_update%TYPE DEFAULT NULL,
        create_user_in                IN epis_out_on_pass.create_user%TYPE DEFAULT NULL,
        create_time_in                IN epis_out_on_pass.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN epis_out_on_pass.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN epis_out_on_pass.update_user%TYPE DEFAULT NULL,
        update_time_in                IN epis_out_on_pass.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN epis_out_on_pass.update_institution%TYPE DEFAULT NULL,
        id_workflow_in                IN epis_out_on_pass.id_workflow%TYPE DEFAULT NULL,
        dt_in_returned_in             IN epis_out_on_pass.dt_in_returned%TYPE DEFAULT NULL,
        id_requested_by_in            IN epis_out_on_pass.id_requested_by%TYPE DEFAULT NULL,
        patient_contact_number_in     IN epis_out_on_pass.patient_contact_number%TYPE DEFAULT NULL,
        flg_all_med_adm_in            IN epis_out_on_pass.flg_all_med_adm%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_epis_out_on_pass_in,
                id_patient_in,
                id_episode_in,
                id_status_in,
                id_request_reason_in,
                dt_out_in,
                dt_in_in,
                total_allowed_hours_in,
                flg_attending_physic_agree_in,
                id_conclude_reason_in,
                id_cancel_reason_in,
                dt_last_update_in,
                id_prof_last_update_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_workflow_in,
                dt_in_returned_in,
                id_requested_by_in,
                patient_contact_number_in,
                flg_all_med_adm_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_out_on_pass%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_out_on_pass_in        => rec_in.id_epis_out_on_pass,
            id_patient_in                 => rec_in.id_patient,
            id_episode_in                 => rec_in.id_episode,
            id_status_in                  => rec_in.id_status,
            id_request_reason_in          => rec_in.id_request_reason,
            dt_out_in                     => rec_in.dt_out,
            dt_in_in                      => rec_in.dt_in,
            total_allowed_hours_in        => rec_in.total_allowed_hours,
            flg_attending_physic_agree_in => rec_in.flg_attending_physic_agree,
            id_conclude_reason_in         => rec_in.id_conclude_reason,
            id_cancel_reason_in           => rec_in.id_cancel_reason,
            dt_last_update_in             => rec_in.dt_last_update,
            id_prof_last_update_in        => rec_in.id_prof_last_update,
            create_user_in                => rec_in.create_user,
            create_time_in                => rec_in.create_time,
            create_institution_in         => rec_in.create_institution,
            update_user_in                => rec_in.update_user,
            update_time_in                => rec_in.update_time,
            update_institution_in         => rec_in.update_institution,
            id_workflow_in                => rec_in.id_workflow,
            dt_in_returned_in             => rec_in.dt_in_returned,
            id_requested_by_in            => rec_in.id_requested_by,
            patient_contact_number_in     => rec_in.patient_contact_number,
            flg_all_med_adm_in            => rec_in.flg_all_med_adm,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_out_on_pass%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_out_on_pass_in        => rec_in.id_epis_out_on_pass,
            id_patient_in                 => rec_in.id_patient,
            id_episode_in                 => rec_in.id_episode,
            id_status_in                  => rec_in.id_status,
            id_request_reason_in          => rec_in.id_request_reason,
            dt_out_in                     => rec_in.dt_out,
            dt_in_in                      => rec_in.dt_in,
            total_allowed_hours_in        => rec_in.total_allowed_hours,
            flg_attending_physic_agree_in => rec_in.flg_attending_physic_agree,
            id_conclude_reason_in         => rec_in.id_conclude_reason,
            id_cancel_reason_in           => rec_in.id_cancel_reason,
            dt_last_update_in             => rec_in.dt_last_update,
            id_prof_last_update_in        => rec_in.id_prof_last_update,
            create_user_in                => rec_in.create_user,
            create_time_in                => rec_in.create_time,
            create_institution_in         => rec_in.create_institution,
            update_user_in                => rec_in.update_user,
            update_time_in                => rec_in.update_time,
            update_institution_in         => rec_in.update_institution,
            id_workflow_in                => rec_in.id_workflow,
            dt_in_returned_in             => rec_in.dt_in_returned,
            id_requested_by_in            => rec_in.id_requested_by,
            patient_contact_number_in     => rec_in.patient_contact_number,
            flg_all_med_adm_in            => rec_in.flg_all_med_adm,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_out_on_pass_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_epis_out_on_pass        id_epis_out_on_pass_cc;
        l_id_patient                 id_patient_cc;
        l_id_episode                 id_episode_cc;
        l_id_status                  id_status_cc;
        l_id_request_reason          id_request_reason_cc;
        l_dt_out                     dt_out_cc;
        l_dt_in                      dt_in_cc;
        l_total_allowed_hours        total_allowed_hours_cc;
        l_flg_attending_physic_agree flg_attending_physic_agree_cc;
        l_id_conclude_reason         id_conclude_reason_cc;
        l_id_cancel_reason           id_cancel_reason_cc;
        l_dt_last_update             dt_last_update_cc;
        l_id_prof_last_update        id_prof_last_update_cc;
        l_create_user                create_user_cc;
        l_create_time                create_time_cc;
        l_create_institution         create_institution_cc;
        l_update_user                update_user_cc;
        l_update_time                update_time_cc;
        l_update_institution         update_institution_cc;
        l_id_workflow                id_workflow_cc;
        l_dt_in_returned             dt_in_returned_cc;
        l_id_requested_by            id_requested_by_cc;
        l_patient_contact_number     patient_contact_number_cc;
        l_flg_all_med_adm            flg_all_med_adm_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_epis_out_on_pass(i) := col_in(i).id_epis_out_on_pass;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_status(i) := col_in(i).id_status;
            l_id_request_reason(i) := col_in(i).id_request_reason;
            l_dt_out(i) := col_in(i).dt_out;
            l_dt_in(i) := col_in(i).dt_in;
            l_total_allowed_hours(i) := col_in(i).total_allowed_hours;
            l_flg_attending_physic_agree(i) := col_in(i).flg_attending_physic_agree;
            l_id_conclude_reason(i) := col_in(i).id_conclude_reason;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_dt_last_update(i) := col_in(i).dt_last_update;
            l_id_prof_last_update(i) := col_in(i).id_prof_last_update;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_workflow(i) := col_in(i).id_workflow;
            l_dt_in_returned(i) := col_in(i).dt_in_returned;
            l_id_requested_by(i) := col_in(i).id_requested_by;
            l_patient_contact_number(i) := col_in(i).patient_contact_number;
            l_flg_all_med_adm(i) := col_in(i).flg_all_med_adm;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_out_on_pass
                   SET id_patient                 = nvl(l_id_patient(i), id_patient),
                       id_episode                 = nvl(l_id_episode(i), id_episode),
                       id_status                  = nvl(l_id_status(i), id_status),
                       id_request_reason          = nvl(l_id_request_reason(i), id_request_reason),
                       dt_out                     = nvl(l_dt_out(i), dt_out),
                       dt_in                      = nvl(l_dt_in(i), dt_in),
                       total_allowed_hours        = nvl(l_total_allowed_hours(i), total_allowed_hours),
                       flg_attending_physic_agree = nvl(l_flg_attending_physic_agree(i), flg_attending_physic_agree),
                       id_conclude_reason         = nvl(l_id_conclude_reason(i), id_conclude_reason),
                       id_cancel_reason           = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       dt_last_update             = nvl(l_dt_last_update(i), dt_last_update),
                       id_prof_last_update        = nvl(l_id_prof_last_update(i), id_prof_last_update),
                       create_user                = nvl(l_create_user(i), create_user),
                       create_time                = nvl(l_create_time(i), create_time),
                       create_institution         = nvl(l_create_institution(i), create_institution),
                       update_user                = nvl(l_update_user(i), update_user),
                       update_time                = nvl(l_update_time(i), update_time),
                       update_institution         = nvl(l_update_institution(i), update_institution),
                       id_workflow                = nvl(l_id_workflow(i), id_workflow),
                       dt_in_returned             = nvl(l_dt_in_returned(i), dt_in_returned),
                       id_requested_by            = nvl(l_id_requested_by(i), id_requested_by),
                       patient_contact_number     = nvl(l_patient_contact_number(i), patient_contact_number),
                       flg_all_med_adm            = nvl(l_flg_all_med_adm(i), flg_all_med_adm)
                 WHERE id_epis_out_on_pass = l_id_epis_out_on_pass(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_out_on_pass
                   SET id_patient                 = l_id_patient(i),
                       id_episode                 = l_id_episode(i),
                       id_status                  = l_id_status(i),
                       id_request_reason          = l_id_request_reason(i),
                       dt_out                     = l_dt_out(i),
                       dt_in                      = l_dt_in(i),
                       total_allowed_hours        = l_total_allowed_hours(i),
                       flg_attending_physic_agree = l_flg_attending_physic_agree(i),
                       id_conclude_reason         = l_id_conclude_reason(i),
                       id_cancel_reason           = l_id_cancel_reason(i),
                       dt_last_update             = l_dt_last_update(i),
                       id_prof_last_update        = l_id_prof_last_update(i),
                       create_user                = l_create_user(i),
                       create_time                = l_create_time(i),
                       create_institution         = l_create_institution(i),
                       update_user                = l_update_user(i),
                       update_time                = l_update_time(i),
                       update_institution         = l_update_institution(i),
                       id_workflow                = l_id_workflow(i),
                       dt_in_returned             = l_dt_in_returned(i),
                       id_requested_by            = l_id_requested_by(i),
                       patient_contact_number     = l_patient_contact_number(i),
                       flg_all_med_adm            = l_flg_all_med_adm(i)
                 WHERE id_epis_out_on_pass = l_id_epis_out_on_pass(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_out_on_pass_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE epis_out_on_pass
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE epis_out_on_pass
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE epis_out_on_pass
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_out_on_pass_in IN epis_out_on_pass.id_epis_out_on_pass%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_out_on_pass
         WHERE id_epis_out_on_pass = id_epis_out_on_pass_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_out_on_pass_in IN epis_out_on_pass.id_epis_out_on_pass%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_epis_out_on_pass_in => id_epis_out_on_pass_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del;

    -- Delete all rows for this EOOP_EPIS_FK foreign key value
    PROCEDURE del_eoop_epis_fk
    (
        id_episode_in   IN epis_out_on_pass.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_out_on_pass
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_eoop_epis_fk;

    -- Delete all rows for this EOOP_ID_WF_FK foreign key value
    PROCEDURE del_eoop_id_wf_fk
    (
        id_workflow_in  IN epis_out_on_pass.id_workflow%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_out_on_pass
         WHERE id_workflow = id_workflow_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_eoop_id_wf_fk;

    -- Delete all rows for this EOOP_PAT_FK foreign key value
    PROCEDURE del_eoop_pat_fk
    (
        id_patient_in   IN epis_out_on_pass.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_out_on_pass
         WHERE id_patient = id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_eoop_pat_fk;

    -- Delete all rows for this EOOP_STATUS_FK foreign key value
    PROCEDURE del_eoop_status_fk
    (
        id_status_in    IN epis_out_on_pass.id_status%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_out_on_pass
         WHERE id_status = id_status_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_eoop_status_fk;

    -- Delete all rows for this EOOP_EPIS_FK foreign key value
    PROCEDURE del_eoop_epis_fk
    (
        id_episode_in   IN epis_out_on_pass.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eoop_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eoop_epis_fk;

    -- Delete all rows for this EOOP_ID_WF_FK foreign key value
    PROCEDURE del_eoop_id_wf_fk
    (
        id_workflow_in  IN epis_out_on_pass.id_workflow%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eoop_id_wf_fk(id_workflow_in => id_workflow_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eoop_id_wf_fk;

    -- Delete all rows for this EOOP_PAT_FK foreign key value
    PROCEDURE del_eoop_pat_fk
    (
        id_patient_in   IN epis_out_on_pass.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eoop_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eoop_pat_fk;

    -- Delete all rows for this EOOP_STATUS_FK foreign key value
    PROCEDURE del_eoop_status_fk
    (
        id_status_in    IN epis_out_on_pass.id_status%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_eoop_status_fk(id_status_in => id_status_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_eoop_status_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM epis_out_on_pass';
        ELSE
            RETURN 'DELETE FROM epis_out_on_pass WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(epis_out_on_pass_inout IN OUT epis_out_on_pass%ROWTYPE) IS
    BEGIN
        epis_out_on_pass_inout.id_epis_out_on_pass        := NULL;
        epis_out_on_pass_inout.id_patient                 := NULL;
        epis_out_on_pass_inout.id_episode                 := NULL;
        epis_out_on_pass_inout.id_status                  := NULL;
        epis_out_on_pass_inout.id_request_reason          := NULL;
        epis_out_on_pass_inout.dt_out                     := NULL;
        epis_out_on_pass_inout.dt_in                      := NULL;
        epis_out_on_pass_inout.total_allowed_hours        := NULL;
        epis_out_on_pass_inout.flg_attending_physic_agree := NULL;
        epis_out_on_pass_inout.id_conclude_reason         := NULL;
        epis_out_on_pass_inout.id_cancel_reason           := NULL;
        epis_out_on_pass_inout.dt_last_update             := NULL;
        epis_out_on_pass_inout.id_prof_last_update        := NULL;
        epis_out_on_pass_inout.create_user                := NULL;
        epis_out_on_pass_inout.create_time                := NULL;
        epis_out_on_pass_inout.create_institution         := NULL;
        epis_out_on_pass_inout.update_user                := NULL;
        epis_out_on_pass_inout.update_time                := NULL;
        epis_out_on_pass_inout.update_institution         := NULL;
        epis_out_on_pass_inout.id_workflow                := NULL;
        epis_out_on_pass_inout.dt_in_returned             := NULL;
        epis_out_on_pass_inout.id_requested_by            := NULL;
        epis_out_on_pass_inout.patient_contact_number     := NULL;
        epis_out_on_pass_inout.flg_all_med_adm            := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN epis_out_on_pass%ROWTYPE IS
        l_epis_out_on_pass epis_out_on_pass%ROWTYPE;
    BEGIN
        RETURN l_epis_out_on_pass;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_out_on_pass_tc IS
        data epis_out_on_pass_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM epis_out_on_pass
         WHERE ROWID IN (SELECT /*+ OPT_ESTIMATE(TABLE t ROWS=1) */
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_out_on_pass_tc IS
        data epis_out_on_pass_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_epis_out_on_pass;

