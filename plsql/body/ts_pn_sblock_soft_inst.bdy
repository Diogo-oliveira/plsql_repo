/*-- Last Change Revision: $Rev: 1863801 $*/
/*-- Last Change by: $Author: anna.kurowska $*/
/*-- Date of last change: $Date: 2018-09-07 12:38:09 +0100 (sex, 07 set 2018) $*/
CREATE OR REPLACE PACKAGE BODY ts_pn_sblock_soft_inst
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2018-09-07 12:32:57
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    PROCEDURE ins
    (
        id_department_in      IN pn_sblock_soft_inst.id_department%TYPE,
        id_pn_soap_block_in   IN pn_sblock_soft_inst.id_pn_soap_block%TYPE,
        id_institution_in     IN pn_sblock_soft_inst.id_institution%TYPE,
        id_dep_clin_serv_in   IN pn_sblock_soft_inst.id_dep_clin_serv%TYPE,
        id_pn_note_type_in    IN pn_sblock_soft_inst.id_pn_note_type%TYPE,
        id_software_in        IN pn_sblock_soft_inst.id_software%TYPE,
        rank_in               IN pn_sblock_soft_inst.rank%TYPE DEFAULT NULL,
        create_user_in        IN pn_sblock_soft_inst.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pn_sblock_soft_inst.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pn_sblock_soft_inst.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pn_sblock_soft_inst.update_user%TYPE DEFAULT NULL,
        update_institution_in IN pn_sblock_soft_inst.update_institution%TYPE DEFAULT NULL,
        update_time_in        IN pn_sblock_soft_inst.update_time%TYPE DEFAULT NULL,
        flg_execute_import_in IN pn_sblock_soft_inst.flg_execute_import%TYPE DEFAULT 'N',
        flg_show_title_in     IN pn_sblock_soft_inst.flg_show_title%TYPE DEFAULT 'Y',
        id_swf_file_viewer_in IN pn_sblock_soft_inst.id_swf_file_viewer%TYPE DEFAULT NULL,
        value_viewer_in       IN pn_sblock_soft_inst.value_viewer%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO pn_sblock_soft_inst
            (id_department,
             id_pn_soap_block,
             id_institution,
             id_dep_clin_serv,
             id_pn_note_type,
             id_software,
             rank,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_institution,
             update_time,
             flg_execute_import,
             flg_show_title,
             id_swf_file_viewer,
             value_viewer)
        VALUES
            (id_department_in,
             id_pn_soap_block_in,
             id_institution_in,
             id_dep_clin_serv_in,
             id_pn_note_type_in,
             id_software_in,
             rank_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_institution_in,
             update_time_in,
             flg_execute_import_in,
             flg_show_title_in,
             id_swf_file_viewer_in,
             value_viewer_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_department_in      IN pn_sblock_soft_inst.id_department%TYPE,
        id_pn_soap_block_in   IN pn_sblock_soft_inst.id_pn_soap_block%TYPE,
        id_institution_in     IN pn_sblock_soft_inst.id_institution%TYPE,
        id_dep_clin_serv_in   IN pn_sblock_soft_inst.id_dep_clin_serv%TYPE,
        id_pn_note_type_in    IN pn_sblock_soft_inst.id_pn_note_type%TYPE,
        id_software_in        IN pn_sblock_soft_inst.id_software%TYPE,
        rank_in               IN pn_sblock_soft_inst.rank%TYPE DEFAULT NULL,
        create_user_in        IN pn_sblock_soft_inst.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pn_sblock_soft_inst.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pn_sblock_soft_inst.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pn_sblock_soft_inst.update_user%TYPE DEFAULT NULL,
        update_institution_in IN pn_sblock_soft_inst.update_institution%TYPE DEFAULT NULL,
        update_time_in        IN pn_sblock_soft_inst.update_time%TYPE DEFAULT NULL,
        flg_execute_import_in IN pn_sblock_soft_inst.flg_execute_import%TYPE DEFAULT 'N',
        flg_show_title_in     IN pn_sblock_soft_inst.flg_show_title%TYPE DEFAULT 'Y',
        id_swf_file_viewer_in IN pn_sblock_soft_inst.id_swf_file_viewer%TYPE DEFAULT NULL,
        value_viewer_in       IN pn_sblock_soft_inst.value_viewer%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_department_in      => id_department_in,
            id_pn_soap_block_in   => id_pn_soap_block_in,
            id_institution_in     => id_institution_in,
            id_dep_clin_serv_in   => id_dep_clin_serv_in,
            id_pn_note_type_in    => id_pn_note_type_in,
            id_software_in        => id_software_in,
            rank_in               => rank_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_institution_in => update_institution_in,
            update_time_in        => update_time_in,
            flg_execute_import_in => flg_execute_import_in,
            flg_show_title_in     => flg_show_title_in,
            id_swf_file_viewer_in => id_swf_file_viewer_in,
            value_viewer_in       => value_viewer_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pn_sblock_soft_inst%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec pn_sblock_soft_inst%ROWTYPE := rec_in;
    BEGIN
    
        ins(id_department_in      => l_rec.id_department,
            id_pn_soap_block_in   => l_rec.id_pn_soap_block,
            id_institution_in     => l_rec.id_institution,
            id_dep_clin_serv_in   => l_rec.id_dep_clin_serv,
            id_pn_note_type_in    => l_rec.id_pn_note_type,
            id_software_in        => l_rec.id_software,
            rank_in               => l_rec.rank,
            create_user_in        => l_rec.create_user,
            create_time_in        => l_rec.create_time,
            create_institution_in => l_rec.create_institution,
            update_user_in        => l_rec.update_user,
            update_institution_in => l_rec.update_institution,
            update_time_in        => l_rec.update_time,
            flg_execute_import_in => l_rec.flg_execute_import,
            flg_show_title_in     => l_rec.flg_show_title,
            id_swf_file_viewer_in => l_rec.id_swf_file_viewer,
            value_viewer_in       => l_rec.value_viewer,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN pn_sblock_soft_inst%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN pn_sblock_soft_inst_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO pn_sblock_soft_inst
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN pn_sblock_soft_inst_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_department_in       IN pn_sblock_soft_inst.id_department%TYPE,
        id_pn_soap_block_in    IN pn_sblock_soft_inst.id_pn_soap_block%TYPE,
        id_institution_in      IN pn_sblock_soft_inst.id_institution%TYPE,
        id_dep_clin_serv_in    IN pn_sblock_soft_inst.id_dep_clin_serv%TYPE,
        id_pn_note_type_in     IN pn_sblock_soft_inst.id_pn_note_type%TYPE,
        id_software_in         IN pn_sblock_soft_inst.id_software%TYPE,
        rank_in                IN pn_sblock_soft_inst.rank%TYPE DEFAULT NULL,
        rank_nin               IN BOOLEAN := TRUE,
        create_user_in         IN pn_sblock_soft_inst.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN pn_sblock_soft_inst.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN pn_sblock_soft_inst.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN pn_sblock_soft_inst.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN pn_sblock_soft_inst.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        update_time_in         IN pn_sblock_soft_inst.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        flg_execute_import_in  IN pn_sblock_soft_inst.flg_execute_import%TYPE DEFAULT NULL,
        flg_execute_import_nin IN BOOLEAN := TRUE,
        flg_show_title_in      IN pn_sblock_soft_inst.flg_show_title%TYPE DEFAULT NULL,
        flg_show_title_nin     IN BOOLEAN := TRUE,
        id_swf_file_viewer_in  IN pn_sblock_soft_inst.id_swf_file_viewer%TYPE DEFAULT NULL,
        id_swf_file_viewer_nin IN BOOLEAN := TRUE,
        value_viewer_in        IN pn_sblock_soft_inst.value_viewer%TYPE DEFAULT NULL,
        value_viewer_nin       IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_rows_out             table_varchar;
        l_rank_n               NUMBER(1) := sys.diutil.bool_to_int(rank_nin);
        l_create_user_n        NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_institution_n NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_update_time_n        NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_flg_execute_import_n NUMBER(1) := sys.diutil.bool_to_int(flg_execute_import_nin);
        l_flg_show_title_n     NUMBER(1) := sys.diutil.bool_to_int(flg_show_title_nin);
        l_id_swf_file_viewer_n NUMBER(1) := sys.diutil.bool_to_int(id_swf_file_viewer_nin);
        l_value_viewer_n       NUMBER(1) := sys.diutil.bool_to_int(value_viewer_nin);
    BEGIN
    
        UPDATE pn_sblock_soft_inst
           SET rank               = decode(l_rank_n, 0, rank_in, nvl(rank_in, rank)),
               create_user        = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time        = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution = decode(l_create_institution_n,
                                           0,
                                           create_institution_in,
                                           nvl(create_institution_in, create_institution)),
               update_user        = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_institution = decode(l_update_institution_n,
                                           0,
                                           update_institution_in,
                                           nvl(update_institution_in, update_institution)),
               update_time        = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               flg_execute_import = decode(l_flg_execute_import_n,
                                           0,
                                           flg_execute_import_in,
                                           nvl(flg_execute_import_in, flg_execute_import)),
               flg_show_title     = decode(l_flg_show_title_n,
                                           0,
                                           flg_show_title_in,
                                           nvl(flg_show_title_in, flg_show_title)),
               id_swf_file_viewer = decode(l_id_swf_file_viewer_n,
                                           0,
                                           id_swf_file_viewer_in,
                                           nvl(id_swf_file_viewer_in, id_swf_file_viewer)),
               value_viewer       = decode(l_value_viewer_n, 0, value_viewer_in, nvl(value_viewer_in, value_viewer))
         WHERE id_department = id_department_in
           AND id_pn_soap_block = id_pn_soap_block_in
           AND id_institution = id_institution_in
           AND id_dep_clin_serv = id_dep_clin_serv_in
           AND id_pn_note_type = id_pn_note_type_in
           AND id_software = id_software_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_department_in       IN pn_sblock_soft_inst.id_department%TYPE,
        id_pn_soap_block_in    IN pn_sblock_soft_inst.id_pn_soap_block%TYPE,
        id_institution_in      IN pn_sblock_soft_inst.id_institution%TYPE,
        id_dep_clin_serv_in    IN pn_sblock_soft_inst.id_dep_clin_serv%TYPE,
        id_pn_note_type_in     IN pn_sblock_soft_inst.id_pn_note_type%TYPE,
        id_software_in         IN pn_sblock_soft_inst.id_software%TYPE,
        rank_in                IN pn_sblock_soft_inst.rank%TYPE DEFAULT NULL,
        rank_nin               IN BOOLEAN := TRUE,
        create_user_in         IN pn_sblock_soft_inst.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN pn_sblock_soft_inst.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN pn_sblock_soft_inst.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN pn_sblock_soft_inst.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN pn_sblock_soft_inst.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        update_time_in         IN pn_sblock_soft_inst.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        flg_execute_import_in  IN pn_sblock_soft_inst.flg_execute_import%TYPE DEFAULT NULL,
        flg_execute_import_nin IN BOOLEAN := TRUE,
        flg_show_title_in      IN pn_sblock_soft_inst.flg_show_title%TYPE DEFAULT NULL,
        flg_show_title_nin     IN BOOLEAN := TRUE,
        id_swf_file_viewer_in  IN pn_sblock_soft_inst.id_swf_file_viewer%TYPE DEFAULT NULL,
        id_swf_file_viewer_nin IN BOOLEAN := TRUE,
        value_viewer_in        IN pn_sblock_soft_inst.value_viewer%TYPE DEFAULT NULL,
        value_viewer_nin       IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_department_in       => id_department_in,
            id_pn_soap_block_in    => id_pn_soap_block_in,
            id_institution_in      => id_institution_in,
            id_dep_clin_serv_in    => id_dep_clin_serv_in,
            id_pn_note_type_in     => id_pn_note_type_in,
            id_software_in         => id_software_in,
            rank_in                => rank_in,
            rank_nin               => rank_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            flg_execute_import_in  => flg_execute_import_in,
            flg_execute_import_nin => flg_execute_import_nin,
            flg_show_title_in      => flg_show_title_in,
            flg_show_title_nin     => flg_show_title_nin,
            id_swf_file_viewer_in  => id_swf_file_viewer_in,
            id_swf_file_viewer_nin => id_swf_file_viewer_nin,
            value_viewer_in        => value_viewer_in,
            value_viewer_nin       => value_viewer_nin,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        rank_in                IN pn_sblock_soft_inst.rank%TYPE DEFAULT NULL,
        rank_nin               IN BOOLEAN := TRUE,
        create_user_in         IN pn_sblock_soft_inst.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN pn_sblock_soft_inst.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN pn_sblock_soft_inst.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN pn_sblock_soft_inst.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN pn_sblock_soft_inst.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        update_time_in         IN pn_sblock_soft_inst.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        flg_execute_import_in  IN pn_sblock_soft_inst.flg_execute_import%TYPE DEFAULT NULL,
        flg_execute_import_nin IN BOOLEAN := TRUE,
        flg_show_title_in      IN pn_sblock_soft_inst.flg_show_title%TYPE DEFAULT NULL,
        flg_show_title_nin     IN BOOLEAN := TRUE,
        id_swf_file_viewer_in  IN pn_sblock_soft_inst.id_swf_file_viewer%TYPE DEFAULT NULL,
        id_swf_file_viewer_nin IN BOOLEAN := TRUE,
        value_viewer_in        IN pn_sblock_soft_inst.value_viewer%TYPE DEFAULT NULL,
        value_viewer_nin       IN BOOLEAN := TRUE,
        where_in               IN VARCHAR2,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_sql                  VARCHAR2(32767);
        l_rows_out             table_varchar;
        l_rank_n               NUMBER(1) := sys.diutil.bool_to_int(rank_nin);
        l_create_user_n        NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_institution_n NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_update_time_n        NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_flg_execute_import_n NUMBER(1) := sys.diutil.bool_to_int(flg_execute_import_nin);
        l_flg_show_title_n     NUMBER(1) := sys.diutil.bool_to_int(flg_show_title_nin);
        l_id_swf_file_viewer_n NUMBER(1) := sys.diutil.bool_to_int(id_swf_file_viewer_nin);
        l_value_viewer_n       NUMBER(1) := sys.diutil.bool_to_int(value_viewer_nin);
    BEGIN
        l_rank_n               := sys.diutil.bool_to_int(rank_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_flg_execute_import_n := sys.diutil.bool_to_int(flg_execute_import_nin);
        l_flg_show_title_n     := sys.diutil.bool_to_int(flg_show_title_nin);
        l_id_swf_file_viewer_n := sys.diutil.bool_to_int(id_swf_file_viewer_nin);
        l_value_viewer_n       := sys.diutil.bool_to_int(value_viewer_nin);
        l_sql                  := 'UPDATE pn_sblock_soft_inst SET' || ' RANK = decode (' || l_rank_n ||
                                  ',0,:RANK_in, NVL (:RANK_in, RANK)) ' || ',' || ' CREATE_USER = decode (' ||
                                  l_create_user_n || ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                  ' CREATE_TIME = decode (' || l_create_time_n ||
                                  ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                  ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                  ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                  ' UPDATE_USER = decode (' || l_update_user_n ||
                                  ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                  ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                  ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                  ' UPDATE_TIME = decode (' || l_update_time_n ||
                                  ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                  ' FLG_EXECUTE_IMPORT = decode (' || l_flg_execute_import_n ||
                                  ',0,:FLG_EXECUTE_IMPORT_in, NVL (:FLG_EXECUTE_IMPORT_in, FLG_EXECUTE_IMPORT)) ' || ',' ||
                                  ' FLG_SHOW_TITLE = decode (' || l_flg_show_title_n ||
                                  ',0,:FLG_SHOW_TITLE_in, NVL (:FLG_SHOW_TITLE_in, FLG_SHOW_TITLE)) ' || ',' ||
                                  ' ID_SWF_FILE_VIEWER = decode (' || l_id_swf_file_viewer_n ||
                                  ',0,:ID_SWF_FILE_VIEWER_in, NVL (:ID_SWF_FILE_VIEWER_in, ID_SWF_FILE_VIEWER)) ' || ',' ||
                                  ' VALUE_VIEWER = decode (' || l_value_viewer_n ||
                                  ',0,:VALUE_VIEWER_in, NVL (:VALUE_VIEWER_in, VALUE_VIEWER)) ' || ' where ' ||
                                  nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN rank_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_institution_in, update_time_in, flg_execute_import_in, flg_show_title_in, id_swf_file_viewer_in, value_viewer_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        rank_in                IN pn_sblock_soft_inst.rank%TYPE DEFAULT NULL,
        rank_nin               IN BOOLEAN := TRUE,
        create_user_in         IN pn_sblock_soft_inst.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN pn_sblock_soft_inst.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN pn_sblock_soft_inst.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN pn_sblock_soft_inst.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN pn_sblock_soft_inst.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        update_time_in         IN pn_sblock_soft_inst.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        flg_execute_import_in  IN pn_sblock_soft_inst.flg_execute_import%TYPE DEFAULT NULL,
        flg_execute_import_nin IN BOOLEAN := TRUE,
        flg_show_title_in      IN pn_sblock_soft_inst.flg_show_title%TYPE DEFAULT NULL,
        flg_show_title_nin     IN BOOLEAN := TRUE,
        id_swf_file_viewer_in  IN pn_sblock_soft_inst.id_swf_file_viewer%TYPE DEFAULT NULL,
        id_swf_file_viewer_nin IN BOOLEAN := TRUE,
        value_viewer_in        IN pn_sblock_soft_inst.value_viewer%TYPE DEFAULT NULL,
        value_viewer_nin       IN BOOLEAN := TRUE,
        where_in               IN VARCHAR2,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(rank_in                => rank_in,
            rank_nin               => rank_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            flg_execute_import_in  => flg_execute_import_in,
            flg_execute_import_nin => flg_execute_import_nin,
            flg_show_title_in      => flg_show_title_in,
            flg_show_title_nin     => flg_show_title_nin,
            id_swf_file_viewer_in  => id_swf_file_viewer_in,
            id_swf_file_viewer_nin => id_swf_file_viewer_nin,
            value_viewer_in        => value_viewer_in,
            value_viewer_nin       => value_viewer_nin,
            where_in               => where_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_department_in      IN pn_sblock_soft_inst.id_department%TYPE,
        id_pn_soap_block_in   IN pn_sblock_soft_inst.id_pn_soap_block%TYPE,
        id_institution_in     IN pn_sblock_soft_inst.id_institution%TYPE,
        id_dep_clin_serv_in   IN pn_sblock_soft_inst.id_dep_clin_serv%TYPE,
        id_pn_note_type_in    IN pn_sblock_soft_inst.id_pn_note_type%TYPE,
        id_software_in        IN pn_sblock_soft_inst.id_software%TYPE,
        rank_in               IN pn_sblock_soft_inst.rank%TYPE DEFAULT NULL,
        create_user_in        IN pn_sblock_soft_inst.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pn_sblock_soft_inst.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pn_sblock_soft_inst.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pn_sblock_soft_inst.update_user%TYPE DEFAULT NULL,
        update_institution_in IN pn_sblock_soft_inst.update_institution%TYPE DEFAULT NULL,
        update_time_in        IN pn_sblock_soft_inst.update_time%TYPE DEFAULT NULL,
        flg_execute_import_in IN pn_sblock_soft_inst.flg_execute_import%TYPE DEFAULT NULL,
        flg_show_title_in     IN pn_sblock_soft_inst.flg_show_title%TYPE DEFAULT NULL,
        id_swf_file_viewer_in IN pn_sblock_soft_inst.id_swf_file_viewer%TYPE DEFAULT NULL,
        value_viewer_in       IN pn_sblock_soft_inst.value_viewer%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_department_in      => id_department_in,
            id_pn_soap_block_in   => id_pn_soap_block_in,
            id_institution_in     => id_institution_in,
            id_dep_clin_serv_in   => id_dep_clin_serv_in,
            id_pn_note_type_in    => id_pn_note_type_in,
            id_software_in        => id_software_in,
            rank_in               => rank_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_institution_in => update_institution_in,
            update_time_in        => update_time_in,
            flg_execute_import_in => flg_execute_import_in,
            flg_show_title_in     => flg_show_title_in,
            id_swf_file_viewer_in => id_swf_file_viewer_in,
            value_viewer_in       => value_viewer_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_department_in      => id_department_in,
                id_pn_soap_block_in   => id_pn_soap_block_in,
                id_institution_in     => id_institution_in,
                id_dep_clin_serv_in   => id_dep_clin_serv_in,
                id_pn_note_type_in    => id_pn_note_type_in,
                id_software_in        => id_software_in,
                rank_in               => rank_in,
                create_user_in        => create_user_in,
                create_time_in        => create_time_in,
                create_institution_in => create_institution_in,
                update_user_in        => update_user_in,
                update_institution_in => update_institution_in,
                update_time_in        => update_time_in,
                flg_execute_import_in => flg_execute_import_in,
                flg_show_title_in     => flg_show_title_in,
                id_swf_file_viewer_in => id_swf_file_viewer_in,
                value_viewer_in       => value_viewer_in,
                handle_error_in       => handle_error_in,
                rows_out              => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_department_in      IN pn_sblock_soft_inst.id_department%TYPE,
        id_pn_soap_block_in   IN pn_sblock_soft_inst.id_pn_soap_block%TYPE,
        id_institution_in     IN pn_sblock_soft_inst.id_institution%TYPE,
        id_dep_clin_serv_in   IN pn_sblock_soft_inst.id_dep_clin_serv%TYPE,
        id_pn_note_type_in    IN pn_sblock_soft_inst.id_pn_note_type%TYPE,
        id_software_in        IN pn_sblock_soft_inst.id_software%TYPE,
        rank_in               IN pn_sblock_soft_inst.rank%TYPE DEFAULT NULL,
        create_user_in        IN pn_sblock_soft_inst.create_user%TYPE DEFAULT NULL,
        create_time_in        IN pn_sblock_soft_inst.create_time%TYPE DEFAULT NULL,
        create_institution_in IN pn_sblock_soft_inst.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN pn_sblock_soft_inst.update_user%TYPE DEFAULT NULL,
        update_institution_in IN pn_sblock_soft_inst.update_institution%TYPE DEFAULT NULL,
        update_time_in        IN pn_sblock_soft_inst.update_time%TYPE DEFAULT NULL,
        flg_execute_import_in IN pn_sblock_soft_inst.flg_execute_import%TYPE DEFAULT NULL,
        flg_show_title_in     IN pn_sblock_soft_inst.flg_show_title%TYPE DEFAULT NULL,
        id_swf_file_viewer_in IN pn_sblock_soft_inst.id_swf_file_viewer%TYPE DEFAULT NULL,
        value_viewer_in       IN pn_sblock_soft_inst.value_viewer%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_department_in,
                id_pn_soap_block_in,
                id_institution_in,
                id_dep_clin_serv_in,
                id_pn_note_type_in,
                id_software_in,
                rank_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_institution_in,
                update_time_in,
                flg_execute_import_in,
                flg_show_title_in,
                id_swf_file_viewer_in,
                value_viewer_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN pn_sblock_soft_inst%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_department_in      => rec_in.id_department,
            id_pn_soap_block_in   => rec_in.id_pn_soap_block,
            id_institution_in     => rec_in.id_institution,
            id_dep_clin_serv_in   => rec_in.id_dep_clin_serv,
            id_pn_note_type_in    => rec_in.id_pn_note_type,
            id_software_in        => rec_in.id_software,
            rank_in               => rec_in.rank,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_institution_in => rec_in.update_institution,
            update_time_in        => rec_in.update_time,
            flg_execute_import_in => rec_in.flg_execute_import,
            flg_show_title_in     => rec_in.flg_show_title,
            id_swf_file_viewer_in => rec_in.id_swf_file_viewer,
            value_viewer_in       => rec_in.value_viewer,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN pn_sblock_soft_inst%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_department_in      => rec_in.id_department,
            id_pn_soap_block_in   => rec_in.id_pn_soap_block,
            id_institution_in     => rec_in.id_institution,
            id_dep_clin_serv_in   => rec_in.id_dep_clin_serv,
            id_pn_note_type_in    => rec_in.id_pn_note_type,
            id_software_in        => rec_in.id_software,
            rank_in               => rec_in.rank,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_institution_in => rec_in.update_institution,
            update_time_in        => rec_in.update_time,
            flg_execute_import_in => rec_in.flg_execute_import,
            flg_show_title_in     => rec_in.flg_show_title,
            id_swf_file_viewer_in => rec_in.id_swf_file_viewer,
            value_viewer_in       => rec_in.value_viewer,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN pn_sblock_soft_inst_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_department      id_department_cc;
        l_id_pn_soap_block   id_pn_soap_block_cc;
        l_id_institution     id_institution_cc;
        l_id_dep_clin_serv   id_dep_clin_serv_cc;
        l_id_pn_note_type    id_pn_note_type_cc;
        l_id_software        id_software_cc;
        l_rank               rank_cc;
        l_create_user        create_user_cc;
        l_create_time        create_time_cc;
        l_create_institution create_institution_cc;
        l_update_user        update_user_cc;
        l_update_institution update_institution_cc;
        l_update_time        update_time_cc;
        l_flg_execute_import flg_execute_import_cc;
        l_flg_show_title     flg_show_title_cc;
        l_id_swf_file_viewer id_swf_file_viewer_cc;
        l_value_viewer       value_viewer_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_department(i) := col_in(i).id_department;
            l_id_pn_soap_block(i) := col_in(i).id_pn_soap_block;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_dep_clin_serv(i) := col_in(i).id_dep_clin_serv;
            l_id_pn_note_type(i) := col_in(i).id_pn_note_type;
            l_id_software(i) := col_in(i).id_software;
            l_rank(i) := col_in(i).rank;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_institution(i) := col_in(i).update_institution;
            l_update_time(i) := col_in(i).update_time;
            l_flg_execute_import(i) := col_in(i).flg_execute_import;
            l_flg_show_title(i) := col_in(i).flg_show_title;
            l_id_swf_file_viewer(i) := col_in(i).id_swf_file_viewer;
            l_value_viewer(i) := col_in(i).value_viewer;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE pn_sblock_soft_inst
                   SET rank               = nvl(l_rank(i), rank),
                       create_user        = nvl(l_create_user(i), create_user),
                       create_time        = nvl(l_create_time(i), create_time),
                       create_institution = nvl(l_create_institution(i), create_institution),
                       update_user        = nvl(l_update_user(i), update_user),
                       update_institution = nvl(l_update_institution(i), update_institution),
                       update_time        = nvl(l_update_time(i), update_time),
                       flg_execute_import = nvl(l_flg_execute_import(i), flg_execute_import),
                       flg_show_title     = nvl(l_flg_show_title(i), flg_show_title),
                       id_swf_file_viewer = nvl(l_id_swf_file_viewer(i), id_swf_file_viewer),
                       value_viewer       = nvl(l_value_viewer(i), value_viewer)
                 WHERE id_department = l_id_department(i)
                   AND id_pn_soap_block = l_id_pn_soap_block(i)
                   AND id_institution = l_id_institution(i)
                   AND id_dep_clin_serv = l_id_dep_clin_serv(i)
                   AND id_pn_note_type = l_id_pn_note_type(i)
                   AND id_software = l_id_software(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE pn_sblock_soft_inst
                   SET rank               = l_rank(i),
                       create_user        = l_create_user(i),
                       create_time        = l_create_time(i),
                       create_institution = l_create_institution(i),
                       update_user        = l_update_user(i),
                       update_institution = l_update_institution(i),
                       update_time        = l_update_time(i),
                       flg_execute_import = l_flg_execute_import(i),
                       flg_show_title     = l_flg_show_title(i),
                       id_swf_file_viewer = l_id_swf_file_viewer(i),
                       value_viewer       = l_value_viewer(i)
                 WHERE id_department = l_id_department(i)
                   AND id_pn_soap_block = l_id_pn_soap_block(i)
                   AND id_institution = l_id_institution(i)
                   AND id_dep_clin_serv = l_id_dep_clin_serv(i)
                   AND id_pn_note_type = l_id_pn_note_type(i)
                   AND id_software = l_id_software(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN pn_sblock_soft_inst_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE pn_sblock_soft_inst
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE pn_sblock_soft_inst
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE pn_sblock_soft_inst
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_department_in    IN pn_sblock_soft_inst.id_department%TYPE,
        id_pn_soap_block_in IN pn_sblock_soft_inst.id_pn_soap_block%TYPE,
        id_institution_in   IN pn_sblock_soft_inst.id_institution%TYPE,
        id_dep_clin_serv_in IN pn_sblock_soft_inst.id_dep_clin_serv%TYPE,
        id_pn_note_type_in  IN pn_sblock_soft_inst.id_pn_note_type%TYPE,
        id_software_in      IN pn_sblock_soft_inst.id_software%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_sblock_soft_inst
         WHERE id_department = id_department_in
           AND id_pn_soap_block = id_pn_soap_block_in
           AND id_institution = id_institution_in
           AND id_dep_clin_serv = id_dep_clin_serv_in
           AND id_pn_note_type = id_pn_note_type_in
           AND id_software = id_software_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_department_in    IN pn_sblock_soft_inst.id_department%TYPE,
        id_pn_soap_block_in IN pn_sblock_soft_inst.id_pn_soap_block%TYPE,
        id_institution_in   IN pn_sblock_soft_inst.id_institution%TYPE,
        id_dep_clin_serv_in IN pn_sblock_soft_inst.id_dep_clin_serv%TYPE,
        id_pn_note_type_in  IN pn_sblock_soft_inst.id_pn_note_type%TYPE,
        id_software_in      IN pn_sblock_soft_inst.id_software%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_department_in    => id_department_in,
            id_pn_soap_block_in => id_pn_soap_block_in,
            id_institution_in   => id_institution_in,
            id_dep_clin_serv_in => id_dep_clin_serv_in,
            id_pn_note_type_in  => id_pn_note_type_in,
            id_software_in      => id_software_in,
            handle_error_in     => handle_error_in,
            rows_out            => rows_out);
    END del;

    -- Delete all rows for this PNSBSI_PNNT_FK foreign key value
    PROCEDURE del_pnsbsi_pnnt_fk
    (
        id_pn_note_type_in IN pn_sblock_soft_inst.id_pn_note_type%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_sblock_soft_inst
         WHERE id_pn_note_type = id_pn_note_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_pnsbsi_pnnt_fk;

    -- Delete all rows for this PSST_DCS_FK foreign key value
    PROCEDURE del_psst_dcs_fk
    (
        id_dep_clin_serv_in IN pn_sblock_soft_inst.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_sblock_soft_inst
         WHERE id_dep_clin_serv = id_dep_clin_serv_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_psst_dcs_fk;

    -- Delete all rows for this PSST_DEP_FK foreign key value
    PROCEDURE del_psst_dep_fk
    (
        id_department_in IN pn_sblock_soft_inst.id_department%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_sblock_soft_inst
         WHERE id_department = id_department_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_psst_dep_fk;

    -- Delete all rows for this PSST_INST_FK foreign key value
    PROCEDURE del_psst_inst_fk
    (
        id_institution_in IN pn_sblock_soft_inst.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_sblock_soft_inst
         WHERE id_institution = id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_psst_inst_fk;

    -- Delete all rows for this PSST_PNSB_FK foreign key value
    PROCEDURE del_psst_pnsb_fk
    (
        id_pn_soap_block_in IN pn_sblock_soft_inst.id_pn_soap_block%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_sblock_soft_inst
         WHERE id_pn_soap_block = id_pn_soap_block_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_psst_pnsb_fk;

    -- Delete all rows for this PSST_S_FK foreign key value
    PROCEDURE del_psst_s_fk
    (
        id_software_in  IN pn_sblock_soft_inst.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM pn_sblock_soft_inst
         WHERE id_software = id_software_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_psst_s_fk;

    -- Delete all rows for this PNSBSI_PNNT_FK foreign key value
    PROCEDURE del_pnsbsi_pnnt_fk
    (
        id_pn_note_type_in IN pn_sblock_soft_inst.id_pn_note_type%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_pnsbsi_pnnt_fk(id_pn_note_type_in => id_pn_note_type_in,
                           handle_error_in    => handle_error_in,
                           rows_out           => rows_out);
    END del_pnsbsi_pnnt_fk;

    -- Delete all rows for this PSST_DCS_FK foreign key value
    PROCEDURE del_psst_dcs_fk
    (
        id_dep_clin_serv_in IN pn_sblock_soft_inst.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_psst_dcs_fk(id_dep_clin_serv_in => id_dep_clin_serv_in,
                        handle_error_in     => handle_error_in,
                        rows_out            => rows_out);
    END del_psst_dcs_fk;

    -- Delete all rows for this PSST_DEP_FK foreign key value
    PROCEDURE del_psst_dep_fk
    (
        id_department_in IN pn_sblock_soft_inst.id_department%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_psst_dep_fk(id_department_in => id_department_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_psst_dep_fk;

    -- Delete all rows for this PSST_INST_FK foreign key value
    PROCEDURE del_psst_inst_fk
    (
        id_institution_in IN pn_sblock_soft_inst.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_psst_inst_fk(id_institution_in => id_institution_in,
                         handle_error_in   => handle_error_in,
                         rows_out          => rows_out);
    END del_psst_inst_fk;

    -- Delete all rows for this PSST_PNSB_FK foreign key value
    PROCEDURE del_psst_pnsb_fk
    (
        id_pn_soap_block_in IN pn_sblock_soft_inst.id_pn_soap_block%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_psst_pnsb_fk(id_pn_soap_block_in => id_pn_soap_block_in,
                         handle_error_in     => handle_error_in,
                         rows_out            => rows_out);
    END del_psst_pnsb_fk;

    -- Delete all rows for this PSST_S_FK foreign key value
    PROCEDURE del_psst_s_fk
    (
        id_software_in  IN pn_sblock_soft_inst.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_psst_s_fk(id_software_in => id_software_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_psst_s_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM pn_sblock_soft_inst';
        ELSE
            RETURN 'DELETE FROM pn_sblock_soft_inst WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(pn_sblock_soft_inst_inout IN OUT pn_sblock_soft_inst%ROWTYPE) IS
    BEGIN
        pn_sblock_soft_inst_inout.id_department      := NULL;
        pn_sblock_soft_inst_inout.id_pn_soap_block   := NULL;
        pn_sblock_soft_inst_inout.id_institution     := NULL;
        pn_sblock_soft_inst_inout.id_dep_clin_serv   := NULL;
        pn_sblock_soft_inst_inout.id_pn_note_type    := NULL;
        pn_sblock_soft_inst_inout.id_software        := NULL;
        pn_sblock_soft_inst_inout.rank               := NULL;
        pn_sblock_soft_inst_inout.create_user        := NULL;
        pn_sblock_soft_inst_inout.create_time        := NULL;
        pn_sblock_soft_inst_inout.create_institution := NULL;
        pn_sblock_soft_inst_inout.update_user        := NULL;
        pn_sblock_soft_inst_inout.update_institution := NULL;
        pn_sblock_soft_inst_inout.update_time        := NULL;
        pn_sblock_soft_inst_inout.flg_execute_import := NULL;
        pn_sblock_soft_inst_inout.flg_show_title     := NULL;
        pn_sblock_soft_inst_inout.id_swf_file_viewer := NULL;
        pn_sblock_soft_inst_inout.value_viewer       := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN pn_sblock_soft_inst%ROWTYPE IS
        l_pn_sblock_soft_inst pn_sblock_soft_inst%ROWTYPE;
    BEGIN
        RETURN l_pn_sblock_soft_inst;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN pn_sblock_soft_inst_tc IS
        data pn_sblock_soft_inst_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM pn_sblock_soft_inst
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN pn_sblock_soft_inst_tc IS
        data pn_sblock_soft_inst_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_pn_sblock_soft_inst;
/
