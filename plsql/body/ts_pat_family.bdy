/*-- Last Change Revision: $Rev: 1451863 $*/
/*-- Last Change by: $Author: jorge.silva $*/
/*-- Date of last change: $Date: 2013-03-20 16:52:42 +0000 (qua, 20 mar 2013) $*/
CREATE OR REPLACE PACKAGE BODY TS_PAT_FAMILY
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: MarÃ§o 20, 2013 16:46:27
| Created By: ALERT
*/
IS


   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_pat_family_in IN PAT_FAMILY.ID_PAT_FAMILY%TYPE
      ,
      name_in IN PAT_FAMILY.NAME%TYPE DEFAULT NULL,
      address_in IN PAT_FAMILY.ADDRESS%TYPE DEFAULT NULL,
      zip_code_in IN PAT_FAMILY.ZIP_CODE%TYPE DEFAULT NULL,
      location_in IN PAT_FAMILY.LOCATION%TYPE DEFAULT NULL,
      district_in IN PAT_FAMILY.DISTRICT%TYPE DEFAULT NULL,
      num_contact_in IN PAT_FAMILY.NUM_CONTACT%TYPE DEFAULT NULL,
      notes_in IN PAT_FAMILY.NOTES%TYPE DEFAULT NULL,
      adw_last_update_in IN PAT_FAMILY.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      id_institution_in IN PAT_FAMILY.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_instit_enroled_in IN PAT_FAMILY.ID_INSTIT_ENROLED%TYPE DEFAULT NULL,
      id_social_class_in IN PAT_FAMILY.ID_SOCIAL_CLASS%TYPE DEFAULT NULL,
      social_class_notes_in IN PAT_FAMILY.SOCIAL_CLASS_NOTES%TYPE DEFAULT NULL,
      id_prof_social_class_in IN PAT_FAMILY.ID_PROF_SOCIAL_CLASS%TYPE DEFAULT NULL,
      dt_social_class_tstz_in IN PAT_FAMILY.DT_SOCIAL_CLASS_TSTZ%TYPE DEFAULT NULL,
      create_user_in IN PAT_FAMILY.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_FAMILY.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_FAMILY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_FAMILY.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_FAMILY.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_FAMILY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      num_family_record_in IN PAT_FAMILY.NUM_FAMILY_RECORD%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO PAT_FAMILY (
         ID_PAT_FAMILY,
         NAME,
         ADDRESS,
         ZIP_CODE,
         LOCATION,
         DISTRICT,
         NUM_CONTACT,
         NOTES,
         ADW_LAST_UPDATE,
         ID_INSTITUTION,
         ID_INSTIT_ENROLED,
         ID_SOCIAL_CLASS,
         SOCIAL_CLASS_NOTES,
         ID_PROF_SOCIAL_CLASS,
         DT_SOCIAL_CLASS_TSTZ,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION,
         NUM_FAMILY_RECORD
         )
      VALUES (
         id_pat_family_in,
         name_in,
         address_in,
         zip_code_in,
         location_in,
         district_in,
         num_contact_in,
         notes_in,
         adw_last_update_in,
         id_institution_in,
         id_instit_enroled_in,
         id_social_class_in,
         social_class_notes_in,
         id_prof_social_class_in,
         dt_social_class_tstz_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in,
         num_family_record_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PAT_FAMILY');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           IF l_name = 'PTFAM_INST_ENROLED_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INSTIT_ENROLED'
               , value_in => id_instit_enroled_in);
           END IF;
           IF l_name = 'PTFAM_INST_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INSTITUTION'
               , value_in => id_institution_in);
           END IF;
           IF l_name = 'PTFAM_SCS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SOCIAL_CLASS'
               , value_in => id_social_class_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_pat_family_in IN PAT_FAMILY.ID_PAT_FAMILY%TYPE
      ,
      name_in IN PAT_FAMILY.NAME%TYPE DEFAULT NULL,
      address_in IN PAT_FAMILY.ADDRESS%TYPE DEFAULT NULL,
      zip_code_in IN PAT_FAMILY.ZIP_CODE%TYPE DEFAULT NULL,
      location_in IN PAT_FAMILY.LOCATION%TYPE DEFAULT NULL,
      district_in IN PAT_FAMILY.DISTRICT%TYPE DEFAULT NULL,
      num_contact_in IN PAT_FAMILY.NUM_CONTACT%TYPE DEFAULT NULL,
      notes_in IN PAT_FAMILY.NOTES%TYPE DEFAULT NULL,
      adw_last_update_in IN PAT_FAMILY.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      id_institution_in IN PAT_FAMILY.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_instit_enroled_in IN PAT_FAMILY.ID_INSTIT_ENROLED%TYPE DEFAULT NULL,
      id_social_class_in IN PAT_FAMILY.ID_SOCIAL_CLASS%TYPE DEFAULT NULL,
      social_class_notes_in IN PAT_FAMILY.SOCIAL_CLASS_NOTES%TYPE DEFAULT NULL,
      id_prof_social_class_in IN PAT_FAMILY.ID_PROF_SOCIAL_CLASS%TYPE DEFAULT NULL,
      dt_social_class_tstz_in IN PAT_FAMILY.DT_SOCIAL_CLASS_TSTZ%TYPE DEFAULT NULL,
      create_user_in IN PAT_FAMILY.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_FAMILY.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_FAMILY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_FAMILY.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_FAMILY.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_FAMILY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      num_family_record_in IN PAT_FAMILY.NUM_FAMILY_RECORD%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_pat_family_in => id_pat_family_in
      ,
      name_in => name_in,
      address_in => address_in,
      zip_code_in => zip_code_in,
      location_in => location_in,
      district_in => district_in,
      num_contact_in => num_contact_in,
      notes_in => notes_in,
      adw_last_update_in => adw_last_update_in,
      id_institution_in => id_institution_in,
      id_instit_enroled_in => id_instit_enroled_in,
      id_social_class_in => id_social_class_in,
      social_class_notes_in => social_class_notes_in,
      id_prof_social_class_in => id_prof_social_class_in,
      dt_social_class_tstz_in => dt_social_class_tstz_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      num_family_record_in => num_family_record_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN PAT_FAMILY%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec PAT_FAMILY%ROWTYPE := rec_in;
   BEGIN
      ins (
         id_pat_family_in => l_rec.ID_PAT_FAMILY
         ,
         name_in => l_rec.NAME,
         address_in => l_rec.ADDRESS,
         zip_code_in => l_rec.ZIP_CODE,
         location_in => l_rec.LOCATION,
         district_in => l_rec.DISTRICT,
         num_contact_in => l_rec.NUM_CONTACT,
         notes_in => l_rec.NOTES,
         adw_last_update_in => l_rec.ADW_LAST_UPDATE,
         id_institution_in => l_rec.ID_INSTITUTION,
         id_instit_enroled_in => l_rec.ID_INSTIT_ENROLED,
         id_social_class_in => l_rec.ID_SOCIAL_CLASS,
         social_class_notes_in => l_rec.SOCIAL_CLASS_NOTES,
         id_prof_social_class_in => l_rec.ID_PROF_SOCIAL_CLASS,
         dt_social_class_tstz_in => l_rec.DT_SOCIAL_CLASS_TSTZ,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION,
         num_family_record_in => l_rec.NUM_FAMILY_RECORD
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN PAT_FAMILY%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;


    PROCEDURE ins (
      rows_in IN PAT_FAMILY_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
         FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO PAT_FAMILY VALUES rows_in (indx) RETURNING ROWID BULK COLLECT INTO rows_out;
      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQLERRM (-SQL%BULK_EXCEPTIONS (indx).ERROR_CODE)
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PAT_FAMILY _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PAT_FAMILY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NAME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NAME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ADDRESS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ADDRESS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ZIP_CODE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ZIP_CODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'LOCATION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).LOCATION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DISTRICT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DISTRICT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NUM_CONTACT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NUM_CONTACT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NOTES
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ADW_LAST_UPDATE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ADW_LAST_UPDATE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_INSTIT_ENROLED _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_INSTIT_ENROLED
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SOCIAL_CLASS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_SOCIAL_CLASS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'SOCIAL_CLASS_NOTES _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).SOCIAL_CLASS_NOTES
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_SOCIAL_CLASS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROF_SOCIAL_CLASS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_SOCIAL_CLASS_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_SOCIAL_CLASS_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NUM_FAMILY_RECORD _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NUM_FAMILY_RECORD
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'PAT_FAMILY'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN PAT_FAMILY_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_pat_family_in IN PAT_FAMILY.ID_PAT_FAMILY%TYPE,
      name_in IN PAT_FAMILY.NAME%TYPE DEFAULT NULL,
      NAME_nin IN BOOLEAN := TRUE,
      address_in IN PAT_FAMILY.ADDRESS%TYPE DEFAULT NULL,
      ADDRESS_nin IN BOOLEAN := TRUE,
      zip_code_in IN PAT_FAMILY.ZIP_CODE%TYPE DEFAULT NULL,
      ZIP_CODE_nin IN BOOLEAN := TRUE,
      location_in IN PAT_FAMILY.LOCATION%TYPE DEFAULT NULL,
      LOCATION_nin IN BOOLEAN := TRUE,
      district_in IN PAT_FAMILY.DISTRICT%TYPE DEFAULT NULL,
      DISTRICT_nin IN BOOLEAN := TRUE,
      num_contact_in IN PAT_FAMILY.NUM_CONTACT%TYPE DEFAULT NULL,
      NUM_CONTACT_nin IN BOOLEAN := TRUE,
      notes_in IN PAT_FAMILY.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN PAT_FAMILY.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      id_institution_in IN PAT_FAMILY.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_instit_enroled_in IN PAT_FAMILY.ID_INSTIT_ENROLED%TYPE DEFAULT NULL,
      ID_INSTIT_ENROLED_nin IN BOOLEAN := TRUE,
      id_social_class_in IN PAT_FAMILY.ID_SOCIAL_CLASS%TYPE DEFAULT NULL,
      ID_SOCIAL_CLASS_nin IN BOOLEAN := TRUE,
      social_class_notes_in IN PAT_FAMILY.SOCIAL_CLASS_NOTES%TYPE DEFAULT NULL,
      SOCIAL_CLASS_NOTES_nin IN BOOLEAN := TRUE,
      id_prof_social_class_in IN PAT_FAMILY.ID_PROF_SOCIAL_CLASS%TYPE DEFAULT NULL,
      ID_PROF_SOCIAL_CLASS_nin IN BOOLEAN := TRUE,
      dt_social_class_tstz_in IN PAT_FAMILY.DT_SOCIAL_CLASS_TSTZ%TYPE DEFAULT NULL,
      DT_SOCIAL_CLASS_TSTZ_nin IN BOOLEAN := TRUE,
      create_user_in IN PAT_FAMILY.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PAT_FAMILY.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PAT_FAMILY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PAT_FAMILY.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PAT_FAMILY.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PAT_FAMILY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      num_family_record_in IN PAT_FAMILY.NUM_FAMILY_RECORD%TYPE DEFAULT NULL,
      NUM_FAMILY_RECORD_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_NAME_n NUMBER(1);
   l_ADDRESS_n NUMBER(1);
   l_ZIP_CODE_n NUMBER(1);
   l_LOCATION_n NUMBER(1);
   l_DISTRICT_n NUMBER(1);
   l_NUM_CONTACT_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_ADW_LAST_UPDATE_n NUMBER(1);
   l_ID_INSTITUTION_n NUMBER(1);
   l_ID_INSTIT_ENROLED_n NUMBER(1);
   l_ID_SOCIAL_CLASS_n NUMBER(1);
   l_SOCIAL_CLASS_NOTES_n NUMBER(1);
   l_ID_PROF_SOCIAL_CLASS_n NUMBER(1);
   l_DT_SOCIAL_CLASS_TSTZ_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_NUM_FAMILY_RECORD_n NUMBER(1);
   BEGIN

   l_NAME_n := sys.diutil.bool_to_int(NAME_nin);
   l_ADDRESS_n := sys.diutil.bool_to_int(ADDRESS_nin);
   l_ZIP_CODE_n := sys.diutil.bool_to_int(ZIP_CODE_nin);
   l_LOCATION_n := sys.diutil.bool_to_int(LOCATION_nin);
   l_DISTRICT_n := sys.diutil.bool_to_int(DISTRICT_nin);
   l_NUM_CONTACT_n := sys.diutil.bool_to_int(NUM_CONTACT_nin);
   l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
   l_ADW_LAST_UPDATE_n := sys.diutil.bool_to_int(ADW_LAST_UPDATE_nin);
   l_ID_INSTITUTION_n := sys.diutil.bool_to_int(ID_INSTITUTION_nin);
   l_ID_INSTIT_ENROLED_n := sys.diutil.bool_to_int(ID_INSTIT_ENROLED_nin);
   l_ID_SOCIAL_CLASS_n := sys.diutil.bool_to_int(ID_SOCIAL_CLASS_nin);
   l_SOCIAL_CLASS_NOTES_n := sys.diutil.bool_to_int(SOCIAL_CLASS_NOTES_nin);
   l_ID_PROF_SOCIAL_CLASS_n := sys.diutil.bool_to_int(ID_PROF_SOCIAL_CLASS_nin);
   l_DT_SOCIAL_CLASS_TSTZ_n := sys.diutil.bool_to_int(DT_SOCIAL_CLASS_TSTZ_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
   l_NUM_FAMILY_RECORD_n := sys.diutil.bool_to_int(NUM_FAMILY_RECORD_nin);


         UPDATE PAT_FAMILY SET
     NAME = decode (l_NAME_n,0,name_in, NVL (name_in, NAME)),
     ADDRESS = decode (l_ADDRESS_n,0,address_in, NVL (address_in, ADDRESS)),
     ZIP_CODE = decode (l_ZIP_CODE_n,0,zip_code_in, NVL (zip_code_in, ZIP_CODE)),
     LOCATION = decode (l_LOCATION_n,0,location_in, NVL (location_in, LOCATION)),
     DISTRICT = decode (l_DISTRICT_n,0,district_in, NVL (district_in, DISTRICT)),
     NUM_CONTACT = decode (l_NUM_CONTACT_n,0,num_contact_in, NVL (num_contact_in, NUM_CONTACT)),
     NOTES = decode (l_NOTES_n,0,notes_in, NVL (notes_in, NOTES)),
     ADW_LAST_UPDATE = decode (l_ADW_LAST_UPDATE_n,0,adw_last_update_in, NVL (adw_last_update_in, ADW_LAST_UPDATE)),
     ID_INSTITUTION = decode (l_ID_INSTITUTION_n,0,id_institution_in, NVL (id_institution_in, ID_INSTITUTION)),
     ID_INSTIT_ENROLED = decode (l_ID_INSTIT_ENROLED_n,0,id_instit_enroled_in, NVL (id_instit_enroled_in, ID_INSTIT_ENROLED)),
     ID_SOCIAL_CLASS = decode (l_ID_SOCIAL_CLASS_n,0,id_social_class_in, NVL (id_social_class_in, ID_SOCIAL_CLASS)),
     SOCIAL_CLASS_NOTES = decode (l_SOCIAL_CLASS_NOTES_n,0,social_class_notes_in, NVL (social_class_notes_in, SOCIAL_CLASS_NOTES)),
     ID_PROF_SOCIAL_CLASS = decode (l_ID_PROF_SOCIAL_CLASS_n,0,id_prof_social_class_in, NVL (id_prof_social_class_in, ID_PROF_SOCIAL_CLASS)),
     DT_SOCIAL_CLASS_TSTZ = decode (l_DT_SOCIAL_CLASS_TSTZ_n,0,dt_social_class_tstz_in, NVL (dt_social_class_tstz_in, DT_SOCIAL_CLASS_TSTZ)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION)),
     NUM_FAMILY_RECORD = decode (l_NUM_FAMILY_RECORD_n,0,num_family_record_in, NVL (num_family_record_in, NUM_FAMILY_RECORD))
          WHERE
             ID_PAT_FAMILY = id_pat_family_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PAT_FAMILY');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           IF l_name = 'PTFAM_INST_ENROLED_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INSTIT_ENROLED'
               , value_in => id_instit_enroled_in);
           END IF;
           IF l_name = 'PTFAM_INST_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INSTITUTION'
               , value_in => id_institution_in);
           END IF;
           IF l_name = 'PTFAM_SCS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SOCIAL_CLASS'
               , value_in => id_social_class_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_pat_family_in IN PAT_FAMILY.ID_PAT_FAMILY%TYPE,
      name_in IN PAT_FAMILY.NAME%TYPE DEFAULT NULL,
      NAME_nin IN BOOLEAN := TRUE,
      address_in IN PAT_FAMILY.ADDRESS%TYPE DEFAULT NULL,
      ADDRESS_nin IN BOOLEAN := TRUE,
      zip_code_in IN PAT_FAMILY.ZIP_CODE%TYPE DEFAULT NULL,
      ZIP_CODE_nin IN BOOLEAN := TRUE,
      location_in IN PAT_FAMILY.LOCATION%TYPE DEFAULT NULL,
      LOCATION_nin IN BOOLEAN := TRUE,
      district_in IN PAT_FAMILY.DISTRICT%TYPE DEFAULT NULL,
      DISTRICT_nin IN BOOLEAN := TRUE,
      num_contact_in IN PAT_FAMILY.NUM_CONTACT%TYPE DEFAULT NULL,
      NUM_CONTACT_nin IN BOOLEAN := TRUE,
      notes_in IN PAT_FAMILY.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN PAT_FAMILY.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      id_institution_in IN PAT_FAMILY.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_instit_enroled_in IN PAT_FAMILY.ID_INSTIT_ENROLED%TYPE DEFAULT NULL,
      ID_INSTIT_ENROLED_nin IN BOOLEAN := TRUE,
      id_social_class_in IN PAT_FAMILY.ID_SOCIAL_CLASS%TYPE DEFAULT NULL,
      ID_SOCIAL_CLASS_nin IN BOOLEAN := TRUE,
      social_class_notes_in IN PAT_FAMILY.SOCIAL_CLASS_NOTES%TYPE DEFAULT NULL,
      SOCIAL_CLASS_NOTES_nin IN BOOLEAN := TRUE,
      id_prof_social_class_in IN PAT_FAMILY.ID_PROF_SOCIAL_CLASS%TYPE DEFAULT NULL,
      ID_PROF_SOCIAL_CLASS_nin IN BOOLEAN := TRUE,
      dt_social_class_tstz_in IN PAT_FAMILY.DT_SOCIAL_CLASS_TSTZ%TYPE DEFAULT NULL,
      DT_SOCIAL_CLASS_TSTZ_nin IN BOOLEAN := TRUE,
      create_user_in IN PAT_FAMILY.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PAT_FAMILY.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PAT_FAMILY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PAT_FAMILY.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PAT_FAMILY.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PAT_FAMILY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      num_family_record_in IN PAT_FAMILY.NUM_FAMILY_RECORD%TYPE DEFAULT NULL,
      NUM_FAMILY_RECORD_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_pat_family_in => id_pat_family_in,
      name_in => name_in,
      NAME_nin => NAME_nin,
      address_in => address_in,
      ADDRESS_nin => ADDRESS_nin,
      zip_code_in => zip_code_in,
      ZIP_CODE_nin => ZIP_CODE_nin,
      location_in => location_in,
      LOCATION_nin => LOCATION_nin,
      district_in => district_in,
      DISTRICT_nin => DISTRICT_nin,
      num_contact_in => num_contact_in,
      NUM_CONTACT_nin => NUM_CONTACT_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      adw_last_update_in => adw_last_update_in,
      ADW_LAST_UPDATE_nin => ADW_LAST_UPDATE_nin,
      id_institution_in => id_institution_in,
      ID_INSTITUTION_nin => ID_INSTITUTION_nin,
      id_instit_enroled_in => id_instit_enroled_in,
      ID_INSTIT_ENROLED_nin => ID_INSTIT_ENROLED_nin,
      id_social_class_in => id_social_class_in,
      ID_SOCIAL_CLASS_nin => ID_SOCIAL_CLASS_nin,
      social_class_notes_in => social_class_notes_in,
      SOCIAL_CLASS_NOTES_nin => SOCIAL_CLASS_NOTES_nin,
      id_prof_social_class_in => id_prof_social_class_in,
      ID_PROF_SOCIAL_CLASS_nin => ID_PROF_SOCIAL_CLASS_nin,
      dt_social_class_tstz_in => dt_social_class_tstz_in,
      DT_SOCIAL_CLASS_TSTZ_nin => DT_SOCIAL_CLASS_TSTZ_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      num_family_record_in => num_family_record_in,
      NUM_FAMILY_RECORD_nin => NUM_FAMILY_RECORD_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      name_in IN PAT_FAMILY.NAME%TYPE DEFAULT NULL,
      NAME_nin IN BOOLEAN := TRUE,
      address_in IN PAT_FAMILY.ADDRESS%TYPE DEFAULT NULL,
      ADDRESS_nin IN BOOLEAN := TRUE,
      zip_code_in IN PAT_FAMILY.ZIP_CODE%TYPE DEFAULT NULL,
      ZIP_CODE_nin IN BOOLEAN := TRUE,
      location_in IN PAT_FAMILY.LOCATION%TYPE DEFAULT NULL,
      LOCATION_nin IN BOOLEAN := TRUE,
      district_in IN PAT_FAMILY.DISTRICT%TYPE DEFAULT NULL,
      DISTRICT_nin IN BOOLEAN := TRUE,
      num_contact_in IN PAT_FAMILY.NUM_CONTACT%TYPE DEFAULT NULL,
      NUM_CONTACT_nin IN BOOLEAN := TRUE,
      notes_in IN PAT_FAMILY.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN PAT_FAMILY.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      id_institution_in IN PAT_FAMILY.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_instit_enroled_in IN PAT_FAMILY.ID_INSTIT_ENROLED%TYPE DEFAULT NULL,
      ID_INSTIT_ENROLED_nin IN BOOLEAN := TRUE,
      id_social_class_in IN PAT_FAMILY.ID_SOCIAL_CLASS%TYPE DEFAULT NULL,
      ID_SOCIAL_CLASS_nin IN BOOLEAN := TRUE,
      social_class_notes_in IN PAT_FAMILY.SOCIAL_CLASS_NOTES%TYPE DEFAULT NULL,
      SOCIAL_CLASS_NOTES_nin IN BOOLEAN := TRUE,
      id_prof_social_class_in IN PAT_FAMILY.ID_PROF_SOCIAL_CLASS%TYPE DEFAULT NULL,
      ID_PROF_SOCIAL_CLASS_nin IN BOOLEAN := TRUE,
      dt_social_class_tstz_in IN PAT_FAMILY.DT_SOCIAL_CLASS_TSTZ%TYPE DEFAULT NULL,
      DT_SOCIAL_CLASS_TSTZ_nin IN BOOLEAN := TRUE,
      create_user_in IN PAT_FAMILY.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PAT_FAMILY.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PAT_FAMILY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PAT_FAMILY.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PAT_FAMILY.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PAT_FAMILY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      num_family_record_in IN PAT_FAMILY.NUM_FAMILY_RECORD%TYPE DEFAULT NULL,
      NUM_FAMILY_RECORD_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_NAME_n NUMBER(1);
   l_ADDRESS_n NUMBER(1);
   l_ZIP_CODE_n NUMBER(1);
   l_LOCATION_n NUMBER(1);
   l_DISTRICT_n NUMBER(1);
   l_NUM_CONTACT_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_ADW_LAST_UPDATE_n NUMBER(1);
   l_ID_INSTITUTION_n NUMBER(1);
   l_ID_INSTIT_ENROLED_n NUMBER(1);
   l_ID_SOCIAL_CLASS_n NUMBER(1);
   l_SOCIAL_CLASS_NOTES_n NUMBER(1);
   l_ID_PROF_SOCIAL_CLASS_n NUMBER(1);
   l_DT_SOCIAL_CLASS_TSTZ_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_NUM_FAMILY_RECORD_n NUMBER(1);
      id_pat_family_in PAT_FAMILY.ID_PAT_FAMILY%TYPE;
   BEGIN



      l_NAME_n := sys.diutil.bool_to_int(NAME_nin);
      l_ADDRESS_n := sys.diutil.bool_to_int(ADDRESS_nin);
      l_ZIP_CODE_n := sys.diutil.bool_to_int(ZIP_CODE_nin);
      l_LOCATION_n := sys.diutil.bool_to_int(LOCATION_nin);
      l_DISTRICT_n := sys.diutil.bool_to_int(DISTRICT_nin);
      l_NUM_CONTACT_n := sys.diutil.bool_to_int(NUM_CONTACT_nin);
      l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
      l_ADW_LAST_UPDATE_n := sys.diutil.bool_to_int(ADW_LAST_UPDATE_nin);
      l_ID_INSTITUTION_n := sys.diutil.bool_to_int(ID_INSTITUTION_nin);
      l_ID_INSTIT_ENROLED_n := sys.diutil.bool_to_int(ID_INSTIT_ENROLED_nin);
      l_ID_SOCIAL_CLASS_n := sys.diutil.bool_to_int(ID_SOCIAL_CLASS_nin);
      l_SOCIAL_CLASS_NOTES_n := sys.diutil.bool_to_int(SOCIAL_CLASS_NOTES_nin);
      l_ID_PROF_SOCIAL_CLASS_n := sys.diutil.bool_to_int(ID_PROF_SOCIAL_CLASS_nin);
      l_DT_SOCIAL_CLASS_TSTZ_n := sys.diutil.bool_to_int(DT_SOCIAL_CLASS_TSTZ_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
      l_NUM_FAMILY_RECORD_n := sys.diutil.bool_to_int(NUM_FAMILY_RECORD_nin);



l_sql := 'UPDATE PAT_FAMILY SET '
     || ' NAME = decode (' || l_NAME_n || ',0,:name_in, NVL (:name_in, NAME)) '|| ','
     || ' ADDRESS = decode (' || l_ADDRESS_n || ',0,:address_in, NVL (:address_in, ADDRESS)) '|| ','
     || ' ZIP_CODE = decode (' || l_ZIP_CODE_n || ',0,:zip_code_in, NVL (:zip_code_in, ZIP_CODE)) '|| ','
     || ' LOCATION = decode (' || l_LOCATION_n || ',0,:location_in, NVL (:location_in, LOCATION)) '|| ','
     || ' DISTRICT = decode (' || l_DISTRICT_n || ',0,:district_in, NVL (:district_in, DISTRICT)) '|| ','
     || ' NUM_CONTACT = decode (' || l_NUM_CONTACT_n || ',0,:num_contact_in, NVL (:num_contact_in, NUM_CONTACT)) '|| ','
     || ' NOTES = decode (' || l_NOTES_n || ',0,:notes_in, NVL (:notes_in, NOTES)) '|| ','
     || ' ADW_LAST_UPDATE = decode (' || l_ADW_LAST_UPDATE_n || ',0,:adw_last_update_in, NVL (:adw_last_update_in, ADW_LAST_UPDATE)) '|| ','
     || ' ID_INSTITUTION = decode (' || l_ID_INSTITUTION_n || ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) '|| ','
     || ' ID_INSTIT_ENROLED = decode (' || l_ID_INSTIT_ENROLED_n || ',0,:id_instit_enroled_in, NVL (:id_instit_enroled_in, ID_INSTIT_ENROLED)) '|| ','
     || ' ID_SOCIAL_CLASS = decode (' || l_ID_SOCIAL_CLASS_n || ',0,:id_social_class_in, NVL (:id_social_class_in, ID_SOCIAL_CLASS)) '|| ','
     || ' SOCIAL_CLASS_NOTES = decode (' || l_SOCIAL_CLASS_NOTES_n || ',0,:social_class_notes_in, NVL (:social_class_notes_in, SOCIAL_CLASS_NOTES)) '|| ','
     || ' ID_PROF_SOCIAL_CLASS = decode (' || l_ID_PROF_SOCIAL_CLASS_n || ',0,:id_prof_social_class_in, NVL (:id_prof_social_class_in, ID_PROF_SOCIAL_CLASS)) '|| ','
     || ' DT_SOCIAL_CLASS_TSTZ = decode (' || l_DT_SOCIAL_CLASS_TSTZ_n || ',0,:dt_social_class_tstz_in, NVL (:dt_social_class_tstz_in, DT_SOCIAL_CLASS_TSTZ)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '|| ','
     || ' NUM_FAMILY_RECORD = decode (' || l_NUM_FAMILY_RECORD_n || ',0,:num_family_record_in, NVL (:num_family_record_in, NUM_FAMILY_RECORD)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     name_in,
     address_in,
     zip_code_in,
     location_in,
     district_in,
     num_contact_in,
     notes_in,
     adw_last_update_in,
     id_institution_in,
     id_instit_enroled_in,
     id_social_class_in,
     social_class_notes_in,
     id_prof_social_class_in,
     dt_social_class_tstz_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
     num_family_record_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'PAT_FAMILY');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           IF l_name = 'PTFAM_INST_ENROLED_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INSTIT_ENROLED'
               , value_in => id_instit_enroled_in);
           END IF;
           IF l_name = 'PTFAM_INST_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INSTITUTION'
               , value_in => id_institution_in);
           END IF;
           IF l_name = 'PTFAM_SCS_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SOCIAL_CLASS'
               , value_in => id_social_class_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      name_in IN PAT_FAMILY.NAME%TYPE DEFAULT NULL,
      NAME_nin IN BOOLEAN := TRUE,
      address_in IN PAT_FAMILY.ADDRESS%TYPE DEFAULT NULL,
      ADDRESS_nin IN BOOLEAN := TRUE,
      zip_code_in IN PAT_FAMILY.ZIP_CODE%TYPE DEFAULT NULL,
      ZIP_CODE_nin IN BOOLEAN := TRUE,
      location_in IN PAT_FAMILY.LOCATION%TYPE DEFAULT NULL,
      LOCATION_nin IN BOOLEAN := TRUE,
      district_in IN PAT_FAMILY.DISTRICT%TYPE DEFAULT NULL,
      DISTRICT_nin IN BOOLEAN := TRUE,
      num_contact_in IN PAT_FAMILY.NUM_CONTACT%TYPE DEFAULT NULL,
      NUM_CONTACT_nin IN BOOLEAN := TRUE,
      notes_in IN PAT_FAMILY.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN PAT_FAMILY.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      id_institution_in IN PAT_FAMILY.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_instit_enroled_in IN PAT_FAMILY.ID_INSTIT_ENROLED%TYPE DEFAULT NULL,
      ID_INSTIT_ENROLED_nin IN BOOLEAN := TRUE,
      id_social_class_in IN PAT_FAMILY.ID_SOCIAL_CLASS%TYPE DEFAULT NULL,
      ID_SOCIAL_CLASS_nin IN BOOLEAN := TRUE,
      social_class_notes_in IN PAT_FAMILY.SOCIAL_CLASS_NOTES%TYPE DEFAULT NULL,
      SOCIAL_CLASS_NOTES_nin IN BOOLEAN := TRUE,
      id_prof_social_class_in IN PAT_FAMILY.ID_PROF_SOCIAL_CLASS%TYPE DEFAULT NULL,
      ID_PROF_SOCIAL_CLASS_nin IN BOOLEAN := TRUE,
      dt_social_class_tstz_in IN PAT_FAMILY.DT_SOCIAL_CLASS_TSTZ%TYPE DEFAULT NULL,
      DT_SOCIAL_CLASS_TSTZ_nin IN BOOLEAN := TRUE,
      create_user_in IN PAT_FAMILY.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN PAT_FAMILY.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN PAT_FAMILY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN PAT_FAMILY.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN PAT_FAMILY.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN PAT_FAMILY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      num_family_record_in IN PAT_FAMILY.NUM_FAMILY_RECORD%TYPE DEFAULT NULL,
      NUM_FAMILY_RECORD_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      name_in => name_in,
      NAME_nin => NAME_nin,
      address_in => address_in,
      ADDRESS_nin => ADDRESS_nin,
      zip_code_in => zip_code_in,
      ZIP_CODE_nin => ZIP_CODE_nin,
      location_in => location_in,
      LOCATION_nin => LOCATION_nin,
      district_in => district_in,
      DISTRICT_nin => DISTRICT_nin,
      num_contact_in => num_contact_in,
      NUM_CONTACT_nin => NUM_CONTACT_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      adw_last_update_in => adw_last_update_in,
      ADW_LAST_UPDATE_nin => ADW_LAST_UPDATE_nin,
      id_institution_in => id_institution_in,
      ID_INSTITUTION_nin => ID_INSTITUTION_nin,
      id_instit_enroled_in => id_instit_enroled_in,
      ID_INSTIT_ENROLED_nin => ID_INSTIT_ENROLED_nin,
      id_social_class_in => id_social_class_in,
      ID_SOCIAL_CLASS_nin => ID_SOCIAL_CLASS_nin,
      social_class_notes_in => social_class_notes_in,
      SOCIAL_CLASS_NOTES_nin => SOCIAL_CLASS_NOTES_nin,
      id_prof_social_class_in => id_prof_social_class_in,
      ID_PROF_SOCIAL_CLASS_nin => ID_PROF_SOCIAL_CLASS_nin,
      dt_social_class_tstz_in => dt_social_class_tstz_in,
      DT_SOCIAL_CLASS_TSTZ_nin => DT_SOCIAL_CLASS_TSTZ_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      num_family_record_in => num_family_record_in,
      NUM_FAMILY_RECORD_nin => NUM_FAMILY_RECORD_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN PAT_FAMILY%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_pat_family_in => rec_in.ID_PAT_FAMILY,
         name_in => rec_in.NAME,
         address_in => rec_in.ADDRESS,
         zip_code_in => rec_in.ZIP_CODE,
         location_in => rec_in.LOCATION,
         district_in => rec_in.DISTRICT,
         num_contact_in => rec_in.NUM_CONTACT,
         notes_in => rec_in.NOTES,
         adw_last_update_in => rec_in.ADW_LAST_UPDATE,
         id_institution_in => rec_in.ID_INSTITUTION,
         id_instit_enroled_in => rec_in.ID_INSTIT_ENROLED,
         id_social_class_in => rec_in.ID_SOCIAL_CLASS,
         social_class_notes_in => rec_in.SOCIAL_CLASS_NOTES,
         id_prof_social_class_in => rec_in.ID_PROF_SOCIAL_CLASS,
         dt_social_class_tstz_in => rec_in.DT_SOCIAL_CLASS_TSTZ,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         num_family_record_in => rec_in.NUM_FAMILY_RECORD

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN PAT_FAMILY%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_pat_family_in => rec_in.ID_PAT_FAMILY,
         name_in => rec_in.NAME,
         address_in => rec_in.ADDRESS,
         zip_code_in => rec_in.ZIP_CODE,
         location_in => rec_in.LOCATION,
         district_in => rec_in.DISTRICT,
         num_contact_in => rec_in.NUM_CONTACT,
         notes_in => rec_in.NOTES,
         adw_last_update_in => rec_in.ADW_LAST_UPDATE,
         id_institution_in => rec_in.ID_INSTITUTION,
         id_instit_enroled_in => rec_in.ID_INSTIT_ENROLED,
         id_social_class_in => rec_in.ID_SOCIAL_CLASS,
         social_class_notes_in => rec_in.SOCIAL_CLASS_NOTES,
         id_prof_social_class_in => rec_in.ID_PROF_SOCIAL_CLASS,
         dt_social_class_tstz_in => rec_in.DT_SOCIAL_CLASS_TSTZ,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         num_family_record_in => rec_in.NUM_FAMILY_RECORD

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_pat_family_in IN PAT_FAMILY.ID_PAT_FAMILY%TYPE,
      name_in IN PAT_FAMILY.NAME%TYPE DEFAULT NULL,
      address_in IN PAT_FAMILY.ADDRESS%TYPE DEFAULT NULL,
      zip_code_in IN PAT_FAMILY.ZIP_CODE%TYPE DEFAULT NULL,
      location_in IN PAT_FAMILY.LOCATION%TYPE DEFAULT NULL,
      district_in IN PAT_FAMILY.DISTRICT%TYPE DEFAULT NULL,
      num_contact_in IN PAT_FAMILY.NUM_CONTACT%TYPE DEFAULT NULL,
      notes_in IN PAT_FAMILY.NOTES%TYPE DEFAULT NULL,
      adw_last_update_in IN PAT_FAMILY.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      id_institution_in IN PAT_FAMILY.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_instit_enroled_in IN PAT_FAMILY.ID_INSTIT_ENROLED%TYPE DEFAULT NULL,
      id_social_class_in IN PAT_FAMILY.ID_SOCIAL_CLASS%TYPE DEFAULT NULL,
      social_class_notes_in IN PAT_FAMILY.SOCIAL_CLASS_NOTES%TYPE DEFAULT NULL,
      id_prof_social_class_in IN PAT_FAMILY.ID_PROF_SOCIAL_CLASS%TYPE DEFAULT NULL,
      dt_social_class_tstz_in IN PAT_FAMILY.DT_SOCIAL_CLASS_TSTZ%TYPE DEFAULT NULL,
      create_user_in IN PAT_FAMILY.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_FAMILY.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_FAMILY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_FAMILY.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_FAMILY.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_FAMILY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      num_family_record_in IN PAT_FAMILY.NUM_FAMILY_RECORD%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_pat_family_in => id_pat_family_in,
         name_in => name_in,
         address_in => address_in,
         zip_code_in => zip_code_in,
         location_in => location_in,
         district_in => district_in,
         num_contact_in => num_contact_in,
         notes_in => notes_in,
         adw_last_update_in => adw_last_update_in,
         id_institution_in => id_institution_in,
         id_instit_enroled_in => id_instit_enroled_in,
         id_social_class_in => id_social_class_in,
         social_class_notes_in => social_class_notes_in,
         id_prof_social_class_in => id_prof_social_class_in,
         dt_social_class_tstz_in => dt_social_class_tstz_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         num_family_record_in => num_family_record_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_pat_family_in => id_pat_family_in,
            name_in => name_in,
            address_in => address_in,
            zip_code_in => zip_code_in,
            location_in => location_in,
            district_in => district_in,
            num_contact_in => num_contact_in,
            notes_in => notes_in,
            adw_last_update_in => adw_last_update_in,
            id_institution_in => id_institution_in,
            id_instit_enroled_in => id_instit_enroled_in,
            id_social_class_in => id_social_class_in,
            social_class_notes_in => social_class_notes_in,
            id_prof_social_class_in => id_prof_social_class_in,
            dt_social_class_tstz_in => dt_social_class_tstz_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            num_family_record_in => num_family_record_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_pat_family_in IN PAT_FAMILY.ID_PAT_FAMILY%TYPE,
      name_in IN PAT_FAMILY.NAME%TYPE DEFAULT NULL,
      address_in IN PAT_FAMILY.ADDRESS%TYPE DEFAULT NULL,
      zip_code_in IN PAT_FAMILY.ZIP_CODE%TYPE DEFAULT NULL,
      location_in IN PAT_FAMILY.LOCATION%TYPE DEFAULT NULL,
      district_in IN PAT_FAMILY.DISTRICT%TYPE DEFAULT NULL,
      num_contact_in IN PAT_FAMILY.NUM_CONTACT%TYPE DEFAULT NULL,
      notes_in IN PAT_FAMILY.NOTES%TYPE DEFAULT NULL,
      adw_last_update_in IN PAT_FAMILY.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      id_institution_in IN PAT_FAMILY.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_instit_enroled_in IN PAT_FAMILY.ID_INSTIT_ENROLED%TYPE DEFAULT NULL,
      id_social_class_in IN PAT_FAMILY.ID_SOCIAL_CLASS%TYPE DEFAULT NULL,
      social_class_notes_in IN PAT_FAMILY.SOCIAL_CLASS_NOTES%TYPE DEFAULT NULL,
      id_prof_social_class_in IN PAT_FAMILY.ID_PROF_SOCIAL_CLASS%TYPE DEFAULT NULL,
      dt_social_class_tstz_in IN PAT_FAMILY.DT_SOCIAL_CLASS_TSTZ%TYPE DEFAULT NULL,
      create_user_in IN PAT_FAMILY.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN PAT_FAMILY.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN PAT_FAMILY.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN PAT_FAMILY.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN PAT_FAMILY.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN PAT_FAMILY.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      num_family_record_in IN PAT_FAMILY.NUM_FAMILY_RECORD%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_pat_family_in,
      name_in,
      address_in,
      zip_code_in,
      location_in,
      district_in,
      num_contact_in,
      notes_in,
      adw_last_update_in,
      id_institution_in,
      id_instit_enroled_in,
      id_social_class_in,
      social_class_notes_in,
      id_prof_social_class_in,
      dt_social_class_tstz_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
      num_family_record_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN PAT_FAMILY_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_PAT_FAMILY ID_PAT_FAMILY_cc;
      l_NAME NAME_cc;
      l_ADDRESS ADDRESS_cc;
      l_ZIP_CODE ZIP_CODE_cc;
      l_LOCATION LOCATION_cc;
      l_DISTRICT DISTRICT_cc;
      l_NUM_CONTACT NUM_CONTACT_cc;
      l_NOTES NOTES_cc;
      l_ADW_LAST_UPDATE ADW_LAST_UPDATE_cc;
      l_ID_INSTITUTION ID_INSTITUTION_cc;
      l_ID_INSTIT_ENROLED ID_INSTIT_ENROLED_cc;
      l_ID_SOCIAL_CLASS ID_SOCIAL_CLASS_cc;
      l_SOCIAL_CLASS_NOTES SOCIAL_CLASS_NOTES_cc;
      l_ID_PROF_SOCIAL_CLASS ID_PROF_SOCIAL_CLASS_cc;
      l_DT_SOCIAL_CLASS_TSTZ DT_SOCIAL_CLASS_TSTZ_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
      l_NUM_FAMILY_RECORD NUM_FAMILY_RECORD_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_PAT_FAMILY(i) := col_in(i).ID_PAT_FAMILY;
         l_NAME(i) := col_in(i).NAME;
         l_ADDRESS(i) := col_in(i).ADDRESS;
         l_ZIP_CODE(i) := col_in(i).ZIP_CODE;
         l_LOCATION(i) := col_in(i).LOCATION;
         l_DISTRICT(i) := col_in(i).DISTRICT;
         l_NUM_CONTACT(i) := col_in(i).NUM_CONTACT;
         l_NOTES(i) := col_in(i).NOTES;
         l_ADW_LAST_UPDATE(i) := col_in(i).ADW_LAST_UPDATE;
         l_ID_INSTITUTION(i) := col_in(i).ID_INSTITUTION;
         l_ID_INSTIT_ENROLED(i) := col_in(i).ID_INSTIT_ENROLED;
         l_ID_SOCIAL_CLASS(i) := col_in(i).ID_SOCIAL_CLASS;
         l_SOCIAL_CLASS_NOTES(i) := col_in(i).SOCIAL_CLASS_NOTES;
         l_ID_PROF_SOCIAL_CLASS(i) := col_in(i).ID_PROF_SOCIAL_CLASS;
         l_DT_SOCIAL_CLASS_TSTZ(i) := col_in(i).DT_SOCIAL_CLASS_TSTZ;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
         l_NUM_FAMILY_RECORD(i) := col_in(i).NUM_FAMILY_RECORD;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE PAT_FAMILY SET
               NAME = NVL (l_NAME(i), NAME),
               ADDRESS = NVL (l_ADDRESS(i), ADDRESS),
               ZIP_CODE = NVL (l_ZIP_CODE(i), ZIP_CODE),
               LOCATION = NVL (l_LOCATION(i), LOCATION),
               DISTRICT = NVL (l_DISTRICT(i), DISTRICT),
               NUM_CONTACT = NVL (l_NUM_CONTACT(i), NUM_CONTACT),
               NOTES = NVL (l_NOTES(i), NOTES),
               ADW_LAST_UPDATE = NVL (l_ADW_LAST_UPDATE(i), ADW_LAST_UPDATE),
               ID_INSTITUTION = NVL (l_ID_INSTITUTION(i), ID_INSTITUTION),
               ID_INSTIT_ENROLED = NVL (l_ID_INSTIT_ENROLED(i), ID_INSTIT_ENROLED),
               ID_SOCIAL_CLASS = NVL (l_ID_SOCIAL_CLASS(i), ID_SOCIAL_CLASS),
               SOCIAL_CLASS_NOTES = NVL (l_SOCIAL_CLASS_NOTES(i), SOCIAL_CLASS_NOTES),
               ID_PROF_SOCIAL_CLASS = NVL (l_ID_PROF_SOCIAL_CLASS(i), ID_PROF_SOCIAL_CLASS),
               DT_SOCIAL_CLASS_TSTZ = NVL (l_DT_SOCIAL_CLASS_TSTZ(i), DT_SOCIAL_CLASS_TSTZ),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
               NUM_FAMILY_RECORD = NVL (l_NUM_FAMILY_RECORD(i), NUM_FAMILY_RECORD)
             WHERE
                ID_PAT_FAMILY = l_ID_PAT_FAMILY(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE PAT_FAMILY SET
               NAME = l_NAME(i),
               ADDRESS = l_ADDRESS(i),
               ZIP_CODE = l_ZIP_CODE(i),
               LOCATION = l_LOCATION(i),
               DISTRICT = l_DISTRICT(i),
               NUM_CONTACT = l_NUM_CONTACT(i),
               NOTES = l_NOTES(i),
               ADW_LAST_UPDATE = l_ADW_LAST_UPDATE(i),
               ID_INSTITUTION = l_ID_INSTITUTION(i),
               ID_INSTIT_ENROLED = l_ID_INSTIT_ENROLED(i),
               ID_SOCIAL_CLASS = l_ID_SOCIAL_CLASS(i),
               SOCIAL_CLASS_NOTES = l_SOCIAL_CLASS_NOTES(i),
               ID_PROF_SOCIAL_CLASS = l_ID_PROF_SOCIAL_CLASS(i),
               DT_SOCIAL_CLASS_TSTZ = l_DT_SOCIAL_CLASS_TSTZ(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
               NUM_FAMILY_RECORD = l_NUM_FAMILY_RECORD(i)
             WHERE
                ID_PAT_FAMILY = l_ID_PAT_FAMILY(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN PAT_FAMILY_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE PAT_FAMILY
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE PAT_FAMILY
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE PAT_FAMILY set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE PAT_FAMILY set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_pat_family_in IN PAT_FAMILY.ID_PAT_FAMILY%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_FAMILY
       WHERE
          ID_PAT_FAMILY = id_pat_family_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_pat_family_in IN PAT_FAMILY.ID_PAT_FAMILY%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_pat_family_in => id_pat_family_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_PAT_FAMILY
   PROCEDURE del_ID_PAT_FAMILY (
      id_pat_family_in IN PAT_FAMILY.ID_PAT_FAMILY%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM PAT_FAMILY
       WHERE ID_PAT_FAMILY = id_pat_family_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_PAT_FAMILY;






   -- Delete all rows for primary key column ID_PAT_FAMILY
   PROCEDURE del_ID_PAT_FAMILY (
      id_pat_family_in IN PAT_FAMILY.ID_PAT_FAMILY%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_PAT_FAMILY (
      id_pat_family_in => id_pat_family_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_PAT_FAMILY;















   PROCEDURE del_PTFAM_INST_ENROLED_FK (
      id_instit_enroled_in IN PAT_FAMILY.ID_INSTIT_ENROLED%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_FAMILY
       WHERE
          ID_INSTIT_ENROLED = del_PTFAM_INST_ENROLED_FK.id_instit_enroled_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PTFAM_INST_ENROLED_FK;



PROCEDURE del_PTFAM_INST_ENROLED_FK (
      id_instit_enroled_in IN PAT_FAMILY.ID_INSTIT_ENROLED%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PTFAM_INST_ENROLED_FK (
      id_instit_enroled_in => id_instit_enroled_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PTFAM_INST_ENROLED_FK;





   PROCEDURE del_PTFAM_INST_FK (
      id_institution_in IN PAT_FAMILY.ID_INSTITUTION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_FAMILY
       WHERE
          ID_INSTITUTION = del_PTFAM_INST_FK.id_institution_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PTFAM_INST_FK;



PROCEDURE del_PTFAM_INST_FK (
      id_institution_in IN PAT_FAMILY.ID_INSTITUTION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PTFAM_INST_FK (
      id_institution_in => id_institution_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PTFAM_INST_FK;





   PROCEDURE del_PTFAM_SCS_FK (
      id_social_class_in IN PAT_FAMILY.ID_SOCIAL_CLASS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM PAT_FAMILY
       WHERE
          ID_SOCIAL_CLASS = del_PTFAM_SCS_FK.id_social_class_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_PTFAM_SCS_FK;



PROCEDURE del_PTFAM_SCS_FK (
      id_social_class_in IN PAT_FAMILY.ID_SOCIAL_CLASS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_PTFAM_SCS_FK (
      id_social_class_in => id_social_class_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_PTFAM_SCS_FK;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM PAT_FAMILY';
      ELSE
         RETURN
            'DELETE FROM PAT_FAMILY WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'PAT_FAMILY');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'PAT_FAMILY');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      pat_family_inout IN OUT PAT_FAMILY%ROWTYPE
   )
   IS
   BEGIN
      pat_family_inout.ID_PAT_FAMILY := NULL;
      pat_family_inout.NAME := NULL;
      pat_family_inout.ADDRESS := NULL;
      pat_family_inout.ZIP_CODE := NULL;
      pat_family_inout.LOCATION := NULL;
      pat_family_inout.DISTRICT := NULL;
      pat_family_inout.NUM_CONTACT := NULL;
      pat_family_inout.NOTES := NULL;
      pat_family_inout.ADW_LAST_UPDATE := sysdate;
      pat_family_inout.ID_INSTITUTION := NULL;
      pat_family_inout.ID_INSTIT_ENROLED := NULL;
      pat_family_inout.ID_SOCIAL_CLASS := NULL;
      pat_family_inout.SOCIAL_CLASS_NOTES := NULL;
      pat_family_inout.ID_PROF_SOCIAL_CLASS := NULL;
      pat_family_inout.DT_SOCIAL_CLASS_TSTZ := NULL;
      pat_family_inout.CREATE_USER := NULL;
      pat_family_inout.CREATE_TIME := NULL;
      pat_family_inout.CREATE_INSTITUTION := NULL;
      pat_family_inout.UPDATE_USER := NULL;
      pat_family_inout.UPDATE_TIME := NULL;
      pat_family_inout.UPDATE_INSTITUTION := NULL;
      pat_family_inout.NUM_FAMILY_RECORD := NULL;
   END initrec;

   FUNCTION initrec RETURN PAT_FAMILY%ROWTYPE
   IS
      l_pat_family PAT_FAMILY%ROWTYPE;
   BEGIN
      l_pat_family.ADW_LAST_UPDATE := sysdate;
      RETURN l_pat_family;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN PAT_FAMILY_tc
   IS
        data PAT_FAMILY_tc;
   BEGIN
        select * bulk collect into data from PAT_FAMILY where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN PAT_FAMILY_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data PAT_FAMILY_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_PAT_FAMILY;
/
