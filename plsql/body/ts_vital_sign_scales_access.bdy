/*-- Last Change Revision: $Rev: 1683523 $*/
/*-- Last Change by: $Author: luis.r.silva $*/
/*-- Date of last change: $Date: 2015-02-04 16:57:36 +0000 (qua, 04 fev 2015) $*/
CREATE OR REPLACE PACKAGE BODY ts_vital_sign_scales_access
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Janeiro 22, 2015 10:46:23
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_vital_sign_scales_access_in IN vital_sign_scales_access.id_vital_sign_scales_access%TYPE,
        id_vital_sign_scales_in        IN vital_sign_scales_access.id_vital_sign_scales%TYPE DEFAULT NULL,
        id_institution_in              IN vital_sign_scales_access.id_institution%TYPE DEFAULT NULL,
        id_software_in                 IN vital_sign_scales_access.id_software%TYPE DEFAULT NULL,
        flg_available_in               IN vital_sign_scales_access.flg_available%TYPE DEFAULT NULL,
        adw_last_update_in             IN vital_sign_scales_access.adw_last_update%TYPE DEFAULT SYSDATE,
        create_user_in                 IN vital_sign_scales_access.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN vital_sign_scales_access.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN vital_sign_scales_access.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN vital_sign_scales_access.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN vital_sign_scales_access.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN vital_sign_scales_access.update_institution%TYPE DEFAULT NULL,
        rank_in                        IN vital_sign_scales_access.rank%TYPE DEFAULT NULL,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO vital_sign_scales_access
            (id_vital_sign_scales_access,
             id_vital_sign_scales,
             id_institution,
             id_software,
             flg_available,
             adw_last_update,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             rank)
        VALUES
            (id_vital_sign_scales_access_in,
             id_vital_sign_scales_in,
             id_institution_in,
             id_software_in,
             flg_available_in,
             adw_last_update_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             rank_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    IF l_name = 'VSSA_INS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'VSSA_SOF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    IF l_name = 'VSSA_VSS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VITAL_SIGN_SCALES',
                                                        value_in           => id_vital_sign_scales_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_vital_sign_scales_access_in IN vital_sign_scales_access.id_vital_sign_scales_access%TYPE,
        id_vital_sign_scales_in        IN vital_sign_scales_access.id_vital_sign_scales%TYPE DEFAULT NULL,
        id_institution_in              IN vital_sign_scales_access.id_institution%TYPE DEFAULT NULL,
        id_software_in                 IN vital_sign_scales_access.id_software%TYPE DEFAULT NULL,
        flg_available_in               IN vital_sign_scales_access.flg_available%TYPE DEFAULT NULL,
        adw_last_update_in             IN vital_sign_scales_access.adw_last_update%TYPE DEFAULT SYSDATE,
        create_user_in                 IN vital_sign_scales_access.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN vital_sign_scales_access.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN vital_sign_scales_access.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN vital_sign_scales_access.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN vital_sign_scales_access.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN vital_sign_scales_access.update_institution%TYPE DEFAULT NULL,
        rank_in                        IN vital_sign_scales_access.rank%TYPE DEFAULT NULL,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_vital_sign_scales_access_in => id_vital_sign_scales_access_in,
            id_vital_sign_scales_in        => id_vital_sign_scales_in,
            id_institution_in              => id_institution_in,
            id_software_in                 => id_software_in,
            flg_available_in               => flg_available_in,
            adw_last_update_in             => adw_last_update_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            rank_in                        => rank_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN vital_sign_scales_access%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec vital_sign_scales_access%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_vital_sign_scales_access := next_key(sequence_in);
        END IF;
        ins(id_vital_sign_scales_access_in => l_rec.id_vital_sign_scales_access,
            id_vital_sign_scales_in        => l_rec.id_vital_sign_scales,
            id_institution_in              => l_rec.id_institution,
            id_software_in                 => l_rec.id_software,
            flg_available_in               => l_rec.flg_available,
            adw_last_update_in             => l_rec.adw_last_update,
            create_user_in                 => l_rec.create_user,
            create_time_in                 => l_rec.create_time,
            create_institution_in          => l_rec.create_institution,
            update_user_in                 => l_rec.update_user,
            update_time_in                 => l_rec.update_time,
            update_institution_in          => l_rec.update_institution,
            rank_in                        => l_rec.rank,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN vital_sign_scales_access%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN vital_sign_scales_access.id_vital_sign_scales_access%TYPE
    
     IS
        retval vital_sign_scales_access.id_vital_sign_scales_access%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_vital_sign_scales_access.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_VITAL_SIGN_SCALES_ACCESS'));
    END next_key;

    PROCEDURE ins
    (
        id_vital_sign_scales_in IN vital_sign_scales_access.id_vital_sign_scales%TYPE DEFAULT NULL,
        id_institution_in       IN vital_sign_scales_access.id_institution%TYPE DEFAULT NULL,
        id_software_in          IN vital_sign_scales_access.id_software%TYPE DEFAULT NULL,
        flg_available_in        IN vital_sign_scales_access.flg_available%TYPE DEFAULT NULL,
        adw_last_update_in      IN vital_sign_scales_access.adw_last_update%TYPE DEFAULT SYSDATE,
        create_user_in          IN vital_sign_scales_access.create_user%TYPE DEFAULT NULL,
        create_time_in          IN vital_sign_scales_access.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN vital_sign_scales_access.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN vital_sign_scales_access.update_user%TYPE DEFAULT NULL,
        update_time_in          IN vital_sign_scales_access.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN vital_sign_scales_access.update_institution%TYPE DEFAULT NULL,
        rank_in                 IN vital_sign_scales_access.rank%TYPE DEFAULT NULL,
        id_vssa_out             IN OUT vital_sign_scales_access.id_vital_sign_scales_access%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
        l_pky vital_sign_scales_access.id_vital_sign_scales_access%TYPE := next_key;
    BEGIN
        ins(id_vital_sign_scales_access_in => l_pky,
            id_vital_sign_scales_in        => id_vital_sign_scales_in,
            id_institution_in              => id_institution_in,
            id_software_in                 => id_software_in,
            flg_available_in               => flg_available_in,
            adw_last_update_in             => adw_last_update_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            rank_in                        => rank_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
        id_vssa_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_vital_sign_scales_in IN vital_sign_scales_access.id_vital_sign_scales%TYPE DEFAULT NULL,
        id_institution_in       IN vital_sign_scales_access.id_institution%TYPE DEFAULT NULL,
        id_software_in          IN vital_sign_scales_access.id_software%TYPE DEFAULT NULL,
        flg_available_in        IN vital_sign_scales_access.flg_available%TYPE DEFAULT NULL,
        adw_last_update_in      IN vital_sign_scales_access.adw_last_update%TYPE DEFAULT SYSDATE,
        create_user_in          IN vital_sign_scales_access.create_user%TYPE DEFAULT NULL,
        create_time_in          IN vital_sign_scales_access.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN vital_sign_scales_access.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN vital_sign_scales_access.update_user%TYPE DEFAULT NULL,
        update_time_in          IN vital_sign_scales_access.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN vital_sign_scales_access.update_institution%TYPE DEFAULT NULL,
        rank_in                 IN vital_sign_scales_access.rank%TYPE DEFAULT NULL,
        id_vssa_out             IN OUT vital_sign_scales_access.id_vital_sign_scales_access%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_vital_sign_scales_in => id_vital_sign_scales_in,
            id_institution_in       => id_institution_in,
            id_software_in          => id_software_in,
            flg_available_in        => flg_available_in,
            adw_last_update_in      => adw_last_update_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            rank_in                 => rank_in,
            id_vssa_out             => id_vssa_out,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    FUNCTION ins
    (
        id_vital_sign_scales_in IN vital_sign_scales_access.id_vital_sign_scales%TYPE DEFAULT NULL,
        id_institution_in       IN vital_sign_scales_access.id_institution%TYPE DEFAULT NULL,
        id_software_in          IN vital_sign_scales_access.id_software%TYPE DEFAULT NULL,
        flg_available_in        IN vital_sign_scales_access.flg_available%TYPE DEFAULT NULL,
        adw_last_update_in      IN vital_sign_scales_access.adw_last_update%TYPE DEFAULT SYSDATE,
        create_user_in          IN vital_sign_scales_access.create_user%TYPE DEFAULT NULL,
        create_time_in          IN vital_sign_scales_access.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN vital_sign_scales_access.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN vital_sign_scales_access.update_user%TYPE DEFAULT NULL,
        update_time_in          IN vital_sign_scales_access.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN vital_sign_scales_access.update_institution%TYPE DEFAULT NULL,
        rank_in                 IN vital_sign_scales_access.rank%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) RETURN vital_sign_scales_access.id_vital_sign_scales_access%TYPE IS
        l_pky vital_sign_scales_access.id_vital_sign_scales_access%TYPE := next_key;
    BEGIN
        ins(id_vital_sign_scales_access_in => l_pky,
            id_vital_sign_scales_in        => id_vital_sign_scales_in,
            id_institution_in              => id_institution_in,
            id_software_in                 => id_software_in,
            flg_available_in               => flg_available_in,
            adw_last_update_in             => adw_last_update_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            rank_in                        => rank_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_vital_sign_scales_in IN vital_sign_scales_access.id_vital_sign_scales%TYPE DEFAULT NULL,
        id_institution_in       IN vital_sign_scales_access.id_institution%TYPE DEFAULT NULL,
        id_software_in          IN vital_sign_scales_access.id_software%TYPE DEFAULT NULL,
        flg_available_in        IN vital_sign_scales_access.flg_available%TYPE DEFAULT NULL,
        adw_last_update_in      IN vital_sign_scales_access.adw_last_update%TYPE DEFAULT SYSDATE,
        create_user_in          IN vital_sign_scales_access.create_user%TYPE DEFAULT NULL,
        create_time_in          IN vital_sign_scales_access.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN vital_sign_scales_access.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN vital_sign_scales_access.update_user%TYPE DEFAULT NULL,
        update_time_in          IN vital_sign_scales_access.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN vital_sign_scales_access.update_institution%TYPE DEFAULT NULL,
        rank_in                 IN vital_sign_scales_access.rank%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) RETURN vital_sign_scales_access.id_vital_sign_scales_access%TYPE IS
        l_pky    vital_sign_scales_access.id_vital_sign_scales_access%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_vital_sign_scales_access_in => l_pky,
            id_vital_sign_scales_in        => id_vital_sign_scales_in,
            id_institution_in              => id_institution_in,
            id_software_in                 => id_software_in,
            flg_available_in               => flg_available_in,
            adw_last_update_in             => adw_last_update_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            rank_in                        => rank_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_vital_sign_scales_in IN vital_sign_scales_access.id_vital_sign_scales%TYPE DEFAULT NULL,
        id_institution_in       IN vital_sign_scales_access.id_institution%TYPE DEFAULT NULL,
        id_software_in          IN vital_sign_scales_access.id_software%TYPE DEFAULT NULL,
        flg_available_in        IN vital_sign_scales_access.flg_available%TYPE DEFAULT NULL,
        adw_last_update_in      IN vital_sign_scales_access.adw_last_update%TYPE DEFAULT SYSDATE,
        create_user_in          IN vital_sign_scales_access.create_user%TYPE DEFAULT NULL,
        create_time_in          IN vital_sign_scales_access.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN vital_sign_scales_access.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN vital_sign_scales_access.update_user%TYPE DEFAULT NULL,
        update_time_in          IN vital_sign_scales_access.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN vital_sign_scales_access.update_institution%TYPE DEFAULT NULL,
        rank_in                 IN vital_sign_scales_access.rank%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
        l_pky vital_sign_scales_access.id_vital_sign_scales_access%TYPE := next_key;
    BEGIN
        ins(id_vital_sign_scales_access_in => l_pky,
            id_vital_sign_scales_in        => id_vital_sign_scales_in,
            id_institution_in              => id_institution_in,
            id_software_in                 => id_software_in,
            flg_available_in               => flg_available_in,
            adw_last_update_in             => adw_last_update_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            rank_in                        => rank_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_vital_sign_scales_in IN vital_sign_scales_access.id_vital_sign_scales%TYPE DEFAULT NULL,
        id_institution_in       IN vital_sign_scales_access.id_institution%TYPE DEFAULT NULL,
        id_software_in          IN vital_sign_scales_access.id_software%TYPE DEFAULT NULL,
        flg_available_in        IN vital_sign_scales_access.flg_available%TYPE DEFAULT NULL,
        adw_last_update_in      IN vital_sign_scales_access.adw_last_update%TYPE DEFAULT SYSDATE,
        create_user_in          IN vital_sign_scales_access.create_user%TYPE DEFAULT NULL,
        create_time_in          IN vital_sign_scales_access.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN vital_sign_scales_access.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN vital_sign_scales_access.update_user%TYPE DEFAULT NULL,
        update_time_in          IN vital_sign_scales_access.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN vital_sign_scales_access.update_institution%TYPE DEFAULT NULL,
        rank_in                 IN vital_sign_scales_access.rank%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        l_pky    vital_sign_scales_access.id_vital_sign_scales_access%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_vital_sign_scales_access_in => l_pky,
            id_vital_sign_scales_in        => id_vital_sign_scales_in,
            id_institution_in              => id_institution_in,
            id_software_in                 => id_software_in,
            flg_available_in               => flg_available_in,
            adw_last_update_in             => adw_last_update_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            rank_in                        => rank_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN vital_sign_scales_access_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO vital_sign_scales_access
                    (id_vital_sign_scales_access,
                     id_vital_sign_scales,
                     id_institution,
                     id_software,
                     flg_available,
                     adw_last_update,
                     create_user,
                     create_time,
                     create_institution,
                     update_user,
                     update_time,
                     update_institution,
                     rank)
                VALUES
                    (rows_in(indx).id_vital_sign_scales_access,
                     rows_in(indx).id_vital_sign_scales,
                     rows_in(indx).id_institution,
                     rows_in(indx).id_software,
                     rows_in(indx).flg_available,
                     rows_in(indx).adw_last_update,
                     rows_in(indx).create_user,
                     rows_in(indx).create_time,
                     rows_in(indx).create_institution,
                     rows_in(indx).update_user,
                     rows_in(indx).update_time,
                     rows_in(indx).update_institution,
                     rows_in(indx).rank)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VITAL_SIGN_SCALES_ACCESS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_vital_sign_scales_access,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VITAL_SIGN_SCALES _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_vital_sign_scales,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SOFTWARE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_software,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_AVAILABLE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_available,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ADW_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .adw_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'RANK _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index).rank,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'VITAL_SIGN_SCALES_ACCESS',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN vital_sign_scales_access_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_vital_sign_scales_access_in IN vital_sign_scales_access.id_vital_sign_scales_access%TYPE,
        id_vital_sign_scales_in        IN vital_sign_scales_access.id_vital_sign_scales%TYPE DEFAULT NULL,
        id_vital_sign_scales_nin       IN BOOLEAN := TRUE,
        id_institution_in              IN vital_sign_scales_access.id_institution%TYPE DEFAULT NULL,
        id_institution_nin             IN BOOLEAN := TRUE,
        id_software_in                 IN vital_sign_scales_access.id_software%TYPE DEFAULT NULL,
        id_software_nin                IN BOOLEAN := TRUE,
        flg_available_in               IN vital_sign_scales_access.flg_available%TYPE DEFAULT NULL,
        flg_available_nin              IN BOOLEAN := TRUE,
        adw_last_update_in             IN vital_sign_scales_access.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin            IN BOOLEAN := TRUE,
        create_user_in                 IN vital_sign_scales_access.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN vital_sign_scales_access.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN vital_sign_scales_access.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN vital_sign_scales_access.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN vital_sign_scales_access.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN vital_sign_scales_access.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        rank_in                        IN vital_sign_scales_access.rank%TYPE DEFAULT NULL,
        rank_nin                       IN BOOLEAN := TRUE,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       IN OUT table_varchar
    ) IS
        l_rows_out               table_varchar;
        l_id_vital_sign_scales_n NUMBER(1);
        l_id_institution_n       NUMBER(1);
        l_id_software_n          NUMBER(1);
        l_flg_available_n        NUMBER(1);
        l_adw_last_update_n      NUMBER(1);
        l_create_user_n          NUMBER(1);
        l_create_time_n          NUMBER(1);
        l_create_institution_n   NUMBER(1);
        l_update_user_n          NUMBER(1);
        l_update_time_n          NUMBER(1);
        l_update_institution_n   NUMBER(1);
        l_rank_n                 NUMBER(1);
    BEGIN
    
        l_id_vital_sign_scales_n := sys.diutil.bool_to_int(id_vital_sign_scales_nin);
        l_id_institution_n       := sys.diutil.bool_to_int(id_institution_nin);
        l_id_software_n          := sys.diutil.bool_to_int(id_software_nin);
        l_flg_available_n        := sys.diutil.bool_to_int(flg_available_nin);
        l_adw_last_update_n      := sys.diutil.bool_to_int(adw_last_update_nin);
        l_create_user_n          := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   := sys.diutil.bool_to_int(update_institution_nin);
        l_rank_n                 := sys.diutil.bool_to_int(rank_nin);
    
        UPDATE vital_sign_scales_access
           SET id_vital_sign_scales = decode(l_id_vital_sign_scales_n,
                                             0,
                                             id_vital_sign_scales_in,
                                             nvl(id_vital_sign_scales_in, id_vital_sign_scales)),
               id_institution       = decode(l_id_institution_n,
                                             0,
                                             id_institution_in,
                                             nvl(id_institution_in, id_institution)),
               id_software          = decode(l_id_software_n, 0, id_software_in, nvl(id_software_in, id_software)),
               flg_available        = decode(l_flg_available_n,
                                             0,
                                             flg_available_in,
                                             nvl(flg_available_in, flg_available)),
               adw_last_update      = decode(l_adw_last_update_n,
                                             0,
                                             adw_last_update_in,
                                             nvl(adw_last_update_in, adw_last_update)),
               create_user          = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time          = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution   = decode(l_create_institution_n,
                                             0,
                                             create_institution_in,
                                             nvl(create_institution_in, create_institution)),
               update_user          = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time          = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution   = decode(l_update_institution_n,
                                             0,
                                             update_institution_in,
                                             nvl(update_institution_in, update_institution)),
               rank                 = decode(l_rank_n, 0, rank_in, nvl(rank_in, rank))
         WHERE id_vital_sign_scales_access = id_vital_sign_scales_access_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    IF l_name = 'VSSA_INS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'VSSA_SOF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    IF l_name = 'VSSA_VSS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VITAL_SIGN_SCALES',
                                                        value_in           => id_vital_sign_scales_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_vital_sign_scales_access_in IN vital_sign_scales_access.id_vital_sign_scales_access%TYPE,
        id_vital_sign_scales_in        IN vital_sign_scales_access.id_vital_sign_scales%TYPE DEFAULT NULL,
        id_vital_sign_scales_nin       IN BOOLEAN := TRUE,
        id_institution_in              IN vital_sign_scales_access.id_institution%TYPE DEFAULT NULL,
        id_institution_nin             IN BOOLEAN := TRUE,
        id_software_in                 IN vital_sign_scales_access.id_software%TYPE DEFAULT NULL,
        id_software_nin                IN BOOLEAN := TRUE,
        flg_available_in               IN vital_sign_scales_access.flg_available%TYPE DEFAULT NULL,
        flg_available_nin              IN BOOLEAN := TRUE,
        adw_last_update_in             IN vital_sign_scales_access.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin            IN BOOLEAN := TRUE,
        create_user_in                 IN vital_sign_scales_access.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN vital_sign_scales_access.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN vital_sign_scales_access.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN vital_sign_scales_access.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN vital_sign_scales_access.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN vital_sign_scales_access.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        rank_in                        IN vital_sign_scales_access.rank%TYPE DEFAULT NULL,
        rank_nin                       IN BOOLEAN := TRUE,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_vital_sign_scales_access_in => id_vital_sign_scales_access_in,
            id_vital_sign_scales_in        => id_vital_sign_scales_in,
            id_vital_sign_scales_nin       => id_vital_sign_scales_nin,
            id_institution_in              => id_institution_in,
            id_institution_nin             => id_institution_nin,
            id_software_in                 => id_software_in,
            id_software_nin                => id_software_nin,
            flg_available_in               => flg_available_in,
            flg_available_nin              => flg_available_nin,
            adw_last_update_in             => adw_last_update_in,
            adw_last_update_nin            => adw_last_update_nin,
            create_user_in                 => create_user_in,
            create_user_nin                => create_user_nin,
            create_time_in                 => create_time_in,
            create_time_nin                => create_time_nin,
            create_institution_in          => create_institution_in,
            create_institution_nin         => create_institution_nin,
            update_user_in                 => update_user_in,
            update_user_nin                => update_user_nin,
            update_time_in                 => update_time_in,
            update_time_nin                => update_time_nin,
            update_institution_in          => update_institution_in,
            update_institution_nin         => update_institution_nin,
            rank_in                        => rank_in,
            rank_nin                       => rank_nin,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_vital_sign_scales_in  IN vital_sign_scales_access.id_vital_sign_scales%TYPE DEFAULT NULL,
        id_vital_sign_scales_nin IN BOOLEAN := TRUE,
        id_institution_in        IN vital_sign_scales_access.id_institution%TYPE DEFAULT NULL,
        id_institution_nin       IN BOOLEAN := TRUE,
        id_software_in           IN vital_sign_scales_access.id_software%TYPE DEFAULT NULL,
        id_software_nin          IN BOOLEAN := TRUE,
        flg_available_in         IN vital_sign_scales_access.flg_available%TYPE DEFAULT NULL,
        flg_available_nin        IN BOOLEAN := TRUE,
        adw_last_update_in       IN vital_sign_scales_access.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin      IN BOOLEAN := TRUE,
        create_user_in           IN vital_sign_scales_access.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN vital_sign_scales_access.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN vital_sign_scales_access.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN vital_sign_scales_access.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN vital_sign_scales_access.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN vital_sign_scales_access.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        rank_in                  IN vital_sign_scales_access.rank%TYPE DEFAULT NULL,
        rank_nin                 IN BOOLEAN := TRUE,
        where_in                 VARCHAR2,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    ) IS
        l_sql                          VARCHAR2(32767);
        l_rows_out                     table_varchar;
        l_id_vital_sign_scales_n       NUMBER(1);
        l_id_institution_n             NUMBER(1);
        l_id_software_n                NUMBER(1);
        l_flg_available_n              NUMBER(1);
        l_adw_last_update_n            NUMBER(1);
        l_create_user_n                NUMBER(1);
        l_create_time_n                NUMBER(1);
        l_create_institution_n         NUMBER(1);
        l_update_user_n                NUMBER(1);
        l_update_time_n                NUMBER(1);
        l_update_institution_n         NUMBER(1);
        l_rank_n                       NUMBER(1);
        id_vital_sign_scales_access_in vital_sign_scales_access.id_vital_sign_scales_access%TYPE;
    BEGIN
    
        l_id_vital_sign_scales_n := sys.diutil.bool_to_int(id_vital_sign_scales_nin);
        l_id_institution_n       := sys.diutil.bool_to_int(id_institution_nin);
        l_id_software_n          := sys.diutil.bool_to_int(id_software_nin);
        l_flg_available_n        := sys.diutil.bool_to_int(flg_available_nin);
        l_adw_last_update_n      := sys.diutil.bool_to_int(adw_last_update_nin);
        l_create_user_n          := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   := sys.diutil.bool_to_int(update_institution_nin);
        l_rank_n                 := sys.diutil.bool_to_int(rank_nin);
    
        l_sql := 'UPDATE VITAL_SIGN_SCALES_ACCESS SET ' || ' ID_VITAL_SIGN_SCALES = decode (' ||
                 l_id_vital_sign_scales_n ||
                 ',0,:id_vital_sign_scales_in, NVL (:id_vital_sign_scales_in, ID_VITAL_SIGN_SCALES)) ' || ',' ||
                 ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                 ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' ||
                 ' ID_SOFTWARE = decode (' || l_id_software_n ||
                 ',0,:id_software_in, NVL (:id_software_in, ID_SOFTWARE)) ' || ',' || ' FLG_AVAILABLE = decode (' ||
                 l_flg_available_n || ',0,:flg_available_in, NVL (:flg_available_in, FLG_AVAILABLE)) ' || ',' ||
                 ' ADW_LAST_UPDATE = decode (' || l_adw_last_update_n ||
                 ',0,:adw_last_update_in, NVL (:adw_last_update_in, ADW_LAST_UPDATE)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' RANK = decode (' || l_rank_n || ',0,:rank_in, NVL (:rank_in, RANK)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_vital_sign_scales_in, id_institution_in, id_software_in, flg_available_in, adw_last_update_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, rank_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    IF l_name = 'VSSA_INS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'VSSA_SOF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SOFTWARE',
                                                        value_in           => id_software_in);
                    END IF;
                    IF l_name = 'VSSA_VSS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VITAL_SIGN_SCALES',
                                                        value_in           => id_vital_sign_scales_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_vital_sign_scales_in  IN vital_sign_scales_access.id_vital_sign_scales%TYPE DEFAULT NULL,
        id_vital_sign_scales_nin IN BOOLEAN := TRUE,
        id_institution_in        IN vital_sign_scales_access.id_institution%TYPE DEFAULT NULL,
        id_institution_nin       IN BOOLEAN := TRUE,
        id_software_in           IN vital_sign_scales_access.id_software%TYPE DEFAULT NULL,
        id_software_nin          IN BOOLEAN := TRUE,
        flg_available_in         IN vital_sign_scales_access.flg_available%TYPE DEFAULT NULL,
        flg_available_nin        IN BOOLEAN := TRUE,
        adw_last_update_in       IN vital_sign_scales_access.adw_last_update%TYPE DEFAULT NULL,
        adw_last_update_nin      IN BOOLEAN := TRUE,
        create_user_in           IN vital_sign_scales_access.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN vital_sign_scales_access.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN vital_sign_scales_access.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN vital_sign_scales_access.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN vital_sign_scales_access.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN vital_sign_scales_access.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        rank_in                  IN vital_sign_scales_access.rank%TYPE DEFAULT NULL,
        rank_nin                 IN BOOLEAN := TRUE,
        where_in                 VARCHAR2,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_vital_sign_scales_in  => id_vital_sign_scales_in,
            id_vital_sign_scales_nin => id_vital_sign_scales_nin,
            id_institution_in        => id_institution_in,
            id_institution_nin       => id_institution_nin,
            id_software_in           => id_software_in,
            id_software_nin          => id_software_nin,
            flg_available_in         => flg_available_in,
            flg_available_nin        => flg_available_nin,
            adw_last_update_in       => adw_last_update_in,
            adw_last_update_nin      => adw_last_update_nin,
            create_user_in           => create_user_in,
            create_user_nin          => create_user_nin,
            create_time_in           => create_time_in,
            create_time_nin          => create_time_nin,
            create_institution_in    => create_institution_in,
            create_institution_nin   => create_institution_nin,
            update_user_in           => update_user_in,
            update_user_nin          => update_user_nin,
            update_time_in           => update_time_in,
            update_time_nin          => update_time_nin,
            update_institution_in    => update_institution_in,
            update_institution_nin   => update_institution_nin,
            rank_in                  => rank_in,
            rank_nin                 => rank_nin,
            where_in                 => where_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN vital_sign_scales_access%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_vital_sign_scales_access_in => rec_in.id_vital_sign_scales_access,
            id_vital_sign_scales_in        => rec_in.id_vital_sign_scales,
            id_institution_in              => rec_in.id_institution,
            id_software_in                 => rec_in.id_software,
            flg_available_in               => rec_in.flg_available,
            adw_last_update_in             => rec_in.adw_last_update,
            create_user_in                 => rec_in.create_user,
            create_time_in                 => rec_in.create_time,
            create_institution_in          => rec_in.create_institution,
            update_user_in                 => rec_in.update_user,
            update_time_in                 => rec_in.update_time,
            update_institution_in          => rec_in.update_institution,
            rank_in                        => rec_in.rank
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN vital_sign_scales_access%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_vital_sign_scales_access_in => rec_in.id_vital_sign_scales_access,
            id_vital_sign_scales_in        => rec_in.id_vital_sign_scales,
            id_institution_in              => rec_in.id_institution,
            id_software_in                 => rec_in.id_software,
            flg_available_in               => rec_in.flg_available,
            adw_last_update_in             => rec_in.adw_last_update,
            create_user_in                 => rec_in.create_user,
            create_time_in                 => rec_in.create_time,
            create_institution_in          => rec_in.create_institution,
            update_user_in                 => rec_in.update_user,
            update_time_in                 => rec_in.update_time,
            update_institution_in          => rec_in.update_institution,
            rank_in                        => rec_in.rank
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_vital_sign_scales_access_in IN vital_sign_scales_access.id_vital_sign_scales_access%TYPE,
        id_vital_sign_scales_in        IN vital_sign_scales_access.id_vital_sign_scales%TYPE DEFAULT NULL,
        id_institution_in              IN vital_sign_scales_access.id_institution%TYPE DEFAULT NULL,
        id_software_in                 IN vital_sign_scales_access.id_software%TYPE DEFAULT NULL,
        flg_available_in               IN vital_sign_scales_access.flg_available%TYPE DEFAULT NULL,
        adw_last_update_in             IN vital_sign_scales_access.adw_last_update%TYPE DEFAULT NULL,
        create_user_in                 IN vital_sign_scales_access.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN vital_sign_scales_access.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN vital_sign_scales_access.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN vital_sign_scales_access.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN vital_sign_scales_access.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN vital_sign_scales_access.update_institution%TYPE DEFAULT NULL,
        rank_in                        IN vital_sign_scales_access.rank%TYPE DEFAULT NULL,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       OUT table_varchar
    ) IS
    BEGIN
        upd(id_vital_sign_scales_access_in => id_vital_sign_scales_access_in,
            id_vital_sign_scales_in        => id_vital_sign_scales_in,
            id_institution_in              => id_institution_in,
            id_software_in                 => id_software_in,
            flg_available_in               => flg_available_in,
            adw_last_update_in             => adw_last_update_in,
            create_user_in                 => create_user_in,
            create_time_in                 => create_time_in,
            create_institution_in          => create_institution_in,
            update_user_in                 => update_user_in,
            update_time_in                 => update_time_in,
            update_institution_in          => update_institution_in,
            rank_in                        => rank_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_vital_sign_scales_access_in => id_vital_sign_scales_access_in,
                id_vital_sign_scales_in        => id_vital_sign_scales_in,
                id_institution_in              => id_institution_in,
                id_software_in                 => id_software_in,
                flg_available_in               => flg_available_in,
                adw_last_update_in             => adw_last_update_in,
                create_user_in                 => create_user_in,
                create_time_in                 => create_time_in,
                create_institution_in          => create_institution_in,
                update_user_in                 => update_user_in,
                update_time_in                 => update_time_in,
                update_institution_in          => update_institution_in,
                rank_in                        => rank_in,
                handle_error_in                => handle_error_in,
                rows_out                       => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_vital_sign_scales_access_in IN vital_sign_scales_access.id_vital_sign_scales_access%TYPE,
        id_vital_sign_scales_in        IN vital_sign_scales_access.id_vital_sign_scales%TYPE DEFAULT NULL,
        id_institution_in              IN vital_sign_scales_access.id_institution%TYPE DEFAULT NULL,
        id_software_in                 IN vital_sign_scales_access.id_software%TYPE DEFAULT NULL,
        flg_available_in               IN vital_sign_scales_access.flg_available%TYPE DEFAULT NULL,
        adw_last_update_in             IN vital_sign_scales_access.adw_last_update%TYPE DEFAULT NULL,
        create_user_in                 IN vital_sign_scales_access.create_user%TYPE DEFAULT NULL,
        create_time_in                 IN vital_sign_scales_access.create_time%TYPE DEFAULT NULL,
        create_institution_in          IN vital_sign_scales_access.create_institution%TYPE DEFAULT NULL,
        update_user_in                 IN vital_sign_scales_access.update_user%TYPE DEFAULT NULL,
        update_time_in                 IN vital_sign_scales_access.update_time%TYPE DEFAULT NULL,
        update_institution_in          IN vital_sign_scales_access.update_institution%TYPE DEFAULT NULL,
        rank_in                        IN vital_sign_scales_access.rank%TYPE DEFAULT NULL,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_vital_sign_scales_access_in,
                id_vital_sign_scales_in,
                id_institution_in,
                id_software_in,
                flg_available_in,
                adw_last_update_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                rank_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN vital_sign_scales_access_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_vital_sign_scales_access id_vital_sign_scales_access_cc;
        l_id_vital_sign_scales        id_vital_sign_scales_cc;
        l_id_institution              id_institution_cc;
        l_id_software                 id_software_cc;
        l_flg_available               flg_available_cc;
        l_adw_last_update             adw_last_update_cc;
        l_create_user                 create_user_cc;
        l_create_time                 create_time_cc;
        l_create_institution          create_institution_cc;
        l_update_user                 update_user_cc;
        l_update_time                 update_time_cc;
        l_update_institution          update_institution_cc;
        l_rank                        rank_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_vital_sign_scales_access(i) := col_in(i).id_vital_sign_scales_access;
            l_id_vital_sign_scales(i) := col_in(i).id_vital_sign_scales;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_software(i) := col_in(i).id_software;
            l_flg_available(i) := col_in(i).flg_available;
            l_adw_last_update(i) := col_in(i).adw_last_update;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_rank(i) := col_in(i).rank;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE vital_sign_scales_access
                   SET id_vital_sign_scales = nvl(l_id_vital_sign_scales(i), id_vital_sign_scales),
                       id_institution       = nvl(l_id_institution(i), id_institution),
                       id_software          = nvl(l_id_software(i), id_software),
                       flg_available        = nvl(l_flg_available(i), flg_available),
                       adw_last_update      = nvl(l_adw_last_update(i), adw_last_update),
                       create_user          = nvl(l_create_user(i), create_user),
                       create_time          = nvl(l_create_time(i), create_time),
                       create_institution   = nvl(l_create_institution(i), create_institution),
                       update_user          = nvl(l_update_user(i), update_user),
                       update_time          = nvl(l_update_time(i), update_time),
                       update_institution   = nvl(l_update_institution(i), update_institution),
                       rank                 = nvl(l_rank(i), rank)
                 WHERE id_vital_sign_scales_access = l_id_vital_sign_scales_access(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE vital_sign_scales_access
                   SET id_vital_sign_scales = l_id_vital_sign_scales(i),
                       id_institution       = l_id_institution(i),
                       id_software          = l_id_software(i),
                       flg_available        = l_flg_available(i),
                       adw_last_update      = l_adw_last_update(i),
                       create_user          = l_create_user(i),
                       create_time          = l_create_time(i),
                       create_institution   = l_create_institution(i),
                       update_user          = l_update_user(i),
                       update_time          = l_update_time(i),
                       update_institution   = l_update_institution(i),
                       rank                 = l_rank(i)
                 WHERE id_vital_sign_scales_access = l_id_vital_sign_scales_access(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN vital_sign_scales_access_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE VITAL_SIGN_SCALES_ACCESS
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE VITAL_SIGN_SCALES_ACCESS
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE VITAL_SIGN_SCALES_ACCESS set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE VITAL_SIGN_SCALES_ACCESS set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_vital_sign_scales_access_in IN vital_sign_scales_access.id_vital_sign_scales_access%TYPE,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM vital_sign_scales_access
         WHERE id_vital_sign_scales_access = id_vital_sign_scales_access_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_vital_sign_scales_access_in IN vital_sign_scales_access.id_vital_sign_scales_access%TYPE,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_vital_sign_scales_access_in => id_vital_sign_scales_access_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_VITAL_SIGN_SCALES_ACCESS
    PROCEDURE del_id_vssa
    (
        id_vital_sign_scales_access_in IN vital_sign_scales_access.id_vital_sign_scales_access%TYPE,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM vital_sign_scales_access
         WHERE id_vital_sign_scales_access = id_vital_sign_scales_access_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_vssa;

    -- Delete all rows for primary key column ID_VITAL_SIGN_SCALES_ACCESS
    PROCEDURE del_id_vssa
    (
        id_vital_sign_scales_access_in IN vital_sign_scales_access.id_vital_sign_scales_access%TYPE,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_vssa(id_vital_sign_scales_access_in => id_vital_sign_scales_access_in,
                    handle_error_in                => handle_error_in,
                    rows_out                       => rows_out);
    END del_id_vssa;

    PROCEDURE del_vssa_ins_fk
    (
        id_institution_in IN vital_sign_scales_access.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM vital_sign_scales_access
         WHERE id_institution = del_vssa_ins_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_vssa_ins_fk;

    PROCEDURE del_vssa_ins_fk
    (
        id_institution_in IN vital_sign_scales_access.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_vssa_ins_fk(id_institution_in => id_institution_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_vssa_ins_fk;

    PROCEDURE del_vssa_sof_fk
    (
        id_software_in  IN vital_sign_scales_access.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM vital_sign_scales_access
         WHERE id_software = del_vssa_sof_fk.id_software_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_vssa_sof_fk;

    PROCEDURE del_vssa_sof_fk
    (
        id_software_in  IN vital_sign_scales_access.id_software%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_vssa_sof_fk(id_software_in => id_software_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_vssa_sof_fk;

    PROCEDURE del_vssa_vss_fk
    (
        id_vital_sign_scales_in IN vital_sign_scales_access.id_vital_sign_scales%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM vital_sign_scales_access
         WHERE id_vital_sign_scales = del_vssa_vss_fk.id_vital_sign_scales_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_vssa_vss_fk;

    PROCEDURE del_vssa_vss_fk
    (
        id_vital_sign_scales_in IN vital_sign_scales_access.id_vital_sign_scales%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_vssa_vss_fk(id_vital_sign_scales_in => id_vital_sign_scales_in,
                        handle_error_in         => handle_error_in,
                        rows_out                => rows_out);
    END del_vssa_vss_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM VITAL_SIGN_SCALES_ACCESS';
        ELSE
            RETURN 'DELETE FROM VITAL_SIGN_SCALES_ACCESS WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGN_SCALES_ACCESS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGN_SCALES_ACCESS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(vital_sign_scales_access_inout IN OUT vital_sign_scales_access%ROWTYPE) IS
    BEGIN
        vital_sign_scales_access_inout.id_vital_sign_scales_access := NULL;
        vital_sign_scales_access_inout.id_vital_sign_scales        := NULL;
        vital_sign_scales_access_inout.id_institution              := NULL;
        vital_sign_scales_access_inout.id_software                 := NULL;
        vital_sign_scales_access_inout.flg_available               := NULL;
        vital_sign_scales_access_inout.adw_last_update             := SYSDATE;
        vital_sign_scales_access_inout.create_user                 := NULL;
        vital_sign_scales_access_inout.create_time                 := NULL;
        vital_sign_scales_access_inout.create_institution          := NULL;
        vital_sign_scales_access_inout.update_user                 := NULL;
        vital_sign_scales_access_inout.update_time                 := NULL;
        vital_sign_scales_access_inout.update_institution          := NULL;
        vital_sign_scales_access_inout.rank                        := NULL;
    END initrec;

    FUNCTION initrec RETURN vital_sign_scales_access%ROWTYPE IS
        l_vital_sign_scales_access vital_sign_scales_access%ROWTYPE;
    BEGIN
        l_vital_sign_scales_access.adw_last_update := SYSDATE;
        RETURN l_vital_sign_scales_access;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN vital_sign_scales_access_tc IS
        data vital_sign_scales_access_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM vital_sign_scales_access
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN vital_sign_scales_access_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data vital_sign_scales_access_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_vital_sign_scales_access;
/