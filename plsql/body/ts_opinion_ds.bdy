/*-- Last Change Revision: $Rev: 999999 $*/
/*-- Last Change by: $Author: arch.tech $*/
/*-- Date of last change: $Date: 2020-20-01 15:19:53 +0100) $*/
CREATE OR REPLACE PACKAGE BODY ts_opinion_ds
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2020-01-20 15:19:53
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN opinion_ds.id_opinion_ds%TYPE IS
        retval opinion_ds.id_opinion_ds%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_opinion_ds.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_opinion_in         IN opinion_ds.id_opinion%TYPE DEFAULT NULL,
        dt_problem_tstz_in    IN opinion_ds.dt_problem_tstz%TYPE DEFAULT NULL,
        id_ds_cmpt_mkt_rel_in IN opinion_ds.id_ds_cmpt_mkt_rel%TYPE DEFAULT NULL,
        value_in              IN opinion_ds.value%TYPE DEFAULT NULL,
        value_clob_in         IN opinion_ds.value_clob%TYPE DEFAULT NULL,
        create_user_in        IN opinion_ds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN opinion_ds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN opinion_ds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN opinion_ds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN opinion_ds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN opinion_ds.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky opinion_ds.id_opinion_ds%TYPE := next_key;
    BEGIN
        ins(id_opinion_ds_in      => l_pky,
            id_opinion_in         => id_opinion_in,
            dt_problem_tstz_in    => dt_problem_tstz_in,
            id_ds_cmpt_mkt_rel_in => id_ds_cmpt_mkt_rel_in,
            value_in              => value_in,
            value_clob_in         => value_clob_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_opinion_in         IN opinion_ds.id_opinion%TYPE DEFAULT NULL,
        dt_problem_tstz_in    IN opinion_ds.dt_problem_tstz%TYPE DEFAULT NULL,
        id_ds_cmpt_mkt_rel_in IN opinion_ds.id_ds_cmpt_mkt_rel%TYPE DEFAULT NULL,
        value_in              IN opinion_ds.value%TYPE DEFAULT NULL,
        value_clob_in         IN opinion_ds.value_clob%TYPE DEFAULT NULL,
        create_user_in        IN opinion_ds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN opinion_ds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN opinion_ds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN opinion_ds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN opinion_ds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN opinion_ds.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_opinion_in         => id_opinion_in,
            dt_problem_tstz_in    => dt_problem_tstz_in,
            id_ds_cmpt_mkt_rel_in => id_ds_cmpt_mkt_rel_in,
            value_in              => value_in,
            value_clob_in         => value_clob_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_opinion_in         IN opinion_ds.id_opinion%TYPE DEFAULT NULL,
        dt_problem_tstz_in    IN opinion_ds.dt_problem_tstz%TYPE DEFAULT NULL,
        id_ds_cmpt_mkt_rel_in IN opinion_ds.id_ds_cmpt_mkt_rel%TYPE DEFAULT NULL,
        value_in              IN opinion_ds.value%TYPE DEFAULT NULL,
        value_clob_in         IN opinion_ds.value_clob%TYPE DEFAULT NULL,
        create_user_in        IN opinion_ds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN opinion_ds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN opinion_ds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN opinion_ds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN opinion_ds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN opinion_ds.update_institution%TYPE DEFAULT NULL,
        id_opinion_ds_out     IN OUT opinion_ds.id_opinion_ds%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky opinion_ds.id_opinion_ds%TYPE := next_key;
    BEGIN
        ins(id_opinion_ds_in      => l_pky,
            id_opinion_in         => id_opinion_in,
            dt_problem_tstz_in    => dt_problem_tstz_in,
            id_ds_cmpt_mkt_rel_in => id_ds_cmpt_mkt_rel_in,
            value_in              => value_in,
            value_clob_in         => value_clob_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        id_opinion_ds_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_opinion_in         IN opinion_ds.id_opinion%TYPE DEFAULT NULL,
        dt_problem_tstz_in    IN opinion_ds.dt_problem_tstz%TYPE DEFAULT NULL,
        id_ds_cmpt_mkt_rel_in IN opinion_ds.id_ds_cmpt_mkt_rel%TYPE DEFAULT NULL,
        value_in              IN opinion_ds.value%TYPE DEFAULT NULL,
        value_clob_in         IN opinion_ds.value_clob%TYPE DEFAULT NULL,
        create_user_in        IN opinion_ds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN opinion_ds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN opinion_ds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN opinion_ds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN opinion_ds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN opinion_ds.update_institution%TYPE DEFAULT NULL,
        id_opinion_ds_out     IN OUT opinion_ds.id_opinion_ds%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_opinion_in         => id_opinion_in,
            dt_problem_tstz_in    => dt_problem_tstz_in,
            id_ds_cmpt_mkt_rel_in => id_ds_cmpt_mkt_rel_in,
            value_in              => value_in,
            value_clob_in         => value_clob_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            id_opinion_ds_out     => id_opinion_ds_out,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_opinion_in         IN opinion_ds.id_opinion%TYPE DEFAULT NULL,
        dt_problem_tstz_in    IN opinion_ds.dt_problem_tstz%TYPE DEFAULT NULL,
        id_ds_cmpt_mkt_rel_in IN opinion_ds.id_ds_cmpt_mkt_rel%TYPE DEFAULT NULL,
        value_in              IN opinion_ds.value%TYPE DEFAULT NULL,
        value_clob_in         IN opinion_ds.value_clob%TYPE DEFAULT NULL,
        create_user_in        IN opinion_ds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN opinion_ds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN opinion_ds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN opinion_ds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN opinion_ds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN opinion_ds.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN opinion_ds.id_opinion_ds%TYPE IS
        l_pky opinion_ds.id_opinion_ds%TYPE := next_key;
    BEGIN
        ins(id_opinion_ds_in      => l_pky,
            id_opinion_in         => id_opinion_in,
            dt_problem_tstz_in    => dt_problem_tstz_in,
            id_ds_cmpt_mkt_rel_in => id_ds_cmpt_mkt_rel_in,
            value_in              => value_in,
            value_clob_in         => value_clob_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_opinion_in         IN opinion_ds.id_opinion%TYPE DEFAULT NULL,
        dt_problem_tstz_in    IN opinion_ds.dt_problem_tstz%TYPE DEFAULT NULL,
        id_ds_cmpt_mkt_rel_in IN opinion_ds.id_ds_cmpt_mkt_rel%TYPE DEFAULT NULL,
        value_in              IN opinion_ds.value%TYPE DEFAULT NULL,
        value_clob_in         IN opinion_ds.value_clob%TYPE DEFAULT NULL,
        create_user_in        IN opinion_ds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN opinion_ds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN opinion_ds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN opinion_ds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN opinion_ds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN opinion_ds.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN opinion_ds.id_opinion_ds%TYPE IS
        l_pky    opinion_ds.id_opinion_ds%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_opinion_ds_in      => l_pky,
            id_opinion_in         => id_opinion_in,
            dt_problem_tstz_in    => dt_problem_tstz_in,
            id_ds_cmpt_mkt_rel_in => id_ds_cmpt_mkt_rel_in,
            value_in              => value_in,
            value_clob_in         => value_clob_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_opinion_ds_in      IN opinion_ds.id_opinion_ds%TYPE,
        id_opinion_in         IN opinion_ds.id_opinion%TYPE DEFAULT NULL,
        dt_problem_tstz_in    IN opinion_ds.dt_problem_tstz%TYPE DEFAULT NULL,
        id_ds_cmpt_mkt_rel_in IN opinion_ds.id_ds_cmpt_mkt_rel%TYPE DEFAULT NULL,
        value_in              IN opinion_ds.value%TYPE DEFAULT NULL,
        value_clob_in         IN opinion_ds.value_clob%TYPE DEFAULT NULL,
        create_user_in        IN opinion_ds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN opinion_ds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN opinion_ds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN opinion_ds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN opinion_ds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN opinion_ds.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO opinion_ds
            (id_opinion_ds,
             id_opinion,
             dt_problem_tstz,
             id_ds_cmpt_mkt_rel,
             VALUE,
             value_clob,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_opinion_ds_in,
             id_opinion_in,
             dt_problem_tstz_in,
             id_ds_cmpt_mkt_rel_in,
             value_in,
             value_clob_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_opinion_ds_in      IN opinion_ds.id_opinion_ds%TYPE,
        id_opinion_in         IN opinion_ds.id_opinion%TYPE DEFAULT NULL,
        dt_problem_tstz_in    IN opinion_ds.dt_problem_tstz%TYPE DEFAULT NULL,
        id_ds_cmpt_mkt_rel_in IN opinion_ds.id_ds_cmpt_mkt_rel%TYPE DEFAULT NULL,
        value_in              IN opinion_ds.value%TYPE DEFAULT NULL,
        value_clob_in         IN opinion_ds.value_clob%TYPE DEFAULT NULL,
        create_user_in        IN opinion_ds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN opinion_ds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN opinion_ds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN opinion_ds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN opinion_ds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN opinion_ds.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_opinion_ds_in      => id_opinion_ds_in,
            id_opinion_in         => id_opinion_in,
            dt_problem_tstz_in    => dt_problem_tstz_in,
            id_ds_cmpt_mkt_rel_in => id_ds_cmpt_mkt_rel_in,
            value_in              => value_in,
            value_clob_in         => value_clob_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN opinion_ds%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec opinion_ds%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_opinion_ds := next_key(sequence_in);
        END IF;
    
        ins(id_opinion_ds_in      => l_rec.id_opinion_ds,
            id_opinion_in         => l_rec.id_opinion,
            dt_problem_tstz_in    => l_rec.dt_problem_tstz,
            id_ds_cmpt_mkt_rel_in => l_rec.id_ds_cmpt_mkt_rel,
            value_in              => l_rec.value,
            value_clob_in         => l_rec.value_clob,
            create_user_in        => l_rec.create_user,
            create_time_in        => l_rec.create_time,
            create_institution_in => l_rec.create_institution,
            update_user_in        => l_rec.update_user,
            update_time_in        => l_rec.update_time,
            update_institution_in => l_rec.update_institution,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN opinion_ds%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN opinion_ds_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO opinion_ds
                    (id_opinion_ds, id_opinion, dt_problem_tstz, id_ds_cmpt_mkt_rel, VALUE, value_clob)
                VALUES
                    (rows_in(indx).id_opinion_ds,
                     rows_in(indx).id_opinion,
                     rows_in(indx).dt_problem_tstz,
                     rows_in(indx).id_ds_cmpt_mkt_rel,
                     rows_in(indx).value,
                     rows_in(indx).value_clob)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN opinion_ds_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_opinion_ds_in       IN opinion_ds.id_opinion_ds%TYPE,
        id_opinion_in          IN opinion_ds.id_opinion%TYPE DEFAULT NULL,
        id_opinion_nin         IN BOOLEAN := TRUE,
        dt_problem_tstz_in     IN opinion_ds.dt_problem_tstz%TYPE DEFAULT NULL,
        dt_problem_tstz_nin    IN BOOLEAN := TRUE,
        id_ds_cmpt_mkt_rel_in  IN opinion_ds.id_ds_cmpt_mkt_rel%TYPE DEFAULT NULL,
        id_ds_cmpt_mkt_rel_nin IN BOOLEAN := TRUE,
        value_in               IN opinion_ds.value%TYPE DEFAULT NULL,
        value_nin              IN BOOLEAN := TRUE,
        value_clob_in          IN opinion_ds.value_clob%TYPE DEFAULT NULL,
        value_clob_nin         IN BOOLEAN := TRUE,
        create_user_in         IN opinion_ds.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN opinion_ds.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN opinion_ds.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN opinion_ds.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN opinion_ds.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN opinion_ds.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_rows_out             table_varchar;
        l_id_opinion_n         NUMBER(1) := sys.diutil.bool_to_int(id_opinion_nin);
        l_dt_problem_tstz_n    NUMBER(1) := sys.diutil.bool_to_int(dt_problem_tstz_nin);
        l_id_ds_cmpt_mkt_rel_n NUMBER(1) := sys.diutil.bool_to_int(id_ds_cmpt_mkt_rel_nin);
        l_value_n              NUMBER(1) := sys.diutil.bool_to_int(value_nin);
        l_value_clob_n         NUMBER(1) := sys.diutil.bool_to_int(value_clob_nin);
        l_create_user_n        NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
    BEGIN
    
        UPDATE opinion_ds
           SET id_opinion         = decode(l_id_opinion_n, 0, id_opinion_in, nvl(id_opinion_in, id_opinion)),
               dt_problem_tstz    = decode(l_dt_problem_tstz_n,
                                           0,
                                           dt_problem_tstz_in,
                                           nvl(dt_problem_tstz_in, dt_problem_tstz)),
               id_ds_cmpt_mkt_rel = decode(l_id_ds_cmpt_mkt_rel_n,
                                           0,
                                           id_ds_cmpt_mkt_rel_in,
                                           nvl(id_ds_cmpt_mkt_rel_in, id_ds_cmpt_mkt_rel)),
               VALUE              = decode(l_value_n, 0, value_in, nvl(value_in, VALUE)),
               value_clob         = decode(l_value_clob_n, 0, value_clob_in, nvl(value_clob_in, value_clob)),
               create_user        = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time        = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution = decode(l_create_institution_n,
                                           0,
                                           create_institution_in,
                                           nvl(create_institution_in, create_institution)),
               update_user        = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time        = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution = decode(l_update_institution_n,
                                           0,
                                           update_institution_in,
                                           nvl(update_institution_in, update_institution))
         WHERE id_opinion_ds = id_opinion_ds_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_opinion_ds_in       IN opinion_ds.id_opinion_ds%TYPE,
        id_opinion_in          IN opinion_ds.id_opinion%TYPE DEFAULT NULL,
        id_opinion_nin         IN BOOLEAN := TRUE,
        dt_problem_tstz_in     IN opinion_ds.dt_problem_tstz%TYPE DEFAULT NULL,
        dt_problem_tstz_nin    IN BOOLEAN := TRUE,
        id_ds_cmpt_mkt_rel_in  IN opinion_ds.id_ds_cmpt_mkt_rel%TYPE DEFAULT NULL,
        id_ds_cmpt_mkt_rel_nin IN BOOLEAN := TRUE,
        value_in               IN opinion_ds.value%TYPE DEFAULT NULL,
        value_nin              IN BOOLEAN := TRUE,
        value_clob_in          IN opinion_ds.value_clob%TYPE DEFAULT NULL,
        value_clob_nin         IN BOOLEAN := TRUE,
        create_user_in         IN opinion_ds.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN opinion_ds.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN opinion_ds.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN opinion_ds.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN opinion_ds.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN opinion_ds.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_opinion_ds_in       => id_opinion_ds_in,
            id_opinion_in          => id_opinion_in,
            id_opinion_nin         => id_opinion_nin,
            dt_problem_tstz_in     => dt_problem_tstz_in,
            dt_problem_tstz_nin    => dt_problem_tstz_nin,
            id_ds_cmpt_mkt_rel_in  => id_ds_cmpt_mkt_rel_in,
            id_ds_cmpt_mkt_rel_nin => id_ds_cmpt_mkt_rel_nin,
            value_in               => value_in,
            value_nin              => value_nin,
            value_clob_in          => value_clob_in,
            value_clob_nin         => value_clob_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_opinion_in          IN opinion_ds.id_opinion%TYPE DEFAULT NULL,
        id_opinion_nin         IN BOOLEAN := TRUE,
        dt_problem_tstz_in     IN opinion_ds.dt_problem_tstz%TYPE DEFAULT NULL,
        dt_problem_tstz_nin    IN BOOLEAN := TRUE,
        id_ds_cmpt_mkt_rel_in  IN opinion_ds.id_ds_cmpt_mkt_rel%TYPE DEFAULT NULL,
        id_ds_cmpt_mkt_rel_nin IN BOOLEAN := TRUE,
        value_in               IN opinion_ds.value%TYPE DEFAULT NULL,
        value_nin              IN BOOLEAN := TRUE,
        value_clob_in          IN opinion_ds.value_clob%TYPE DEFAULT NULL,
        value_clob_nin         IN BOOLEAN := TRUE,
        create_user_in         IN opinion_ds.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN opinion_ds.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN opinion_ds.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN opinion_ds.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN opinion_ds.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN opinion_ds.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        where_in               IN VARCHAR2,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_sql                  VARCHAR2(32767);
        l_rows_out             table_varchar;
        l_id_opinion_n         NUMBER(1) := sys.diutil.bool_to_int(id_opinion_nin);
        l_dt_problem_tstz_n    NUMBER(1) := sys.diutil.bool_to_int(dt_problem_tstz_nin);
        l_id_ds_cmpt_mkt_rel_n NUMBER(1) := sys.diutil.bool_to_int(id_ds_cmpt_mkt_rel_nin);
        l_value_n              NUMBER(1) := sys.diutil.bool_to_int(value_nin);
        l_value_clob_n         NUMBER(1) := sys.diutil.bool_to_int(value_clob_nin);
        l_create_user_n        NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
    BEGIN
        l_id_opinion_n         := sys.diutil.bool_to_int(id_opinion_nin);
        l_dt_problem_tstz_n    := sys.diutil.bool_to_int(dt_problem_tstz_nin);
        l_id_ds_cmpt_mkt_rel_n := sys.diutil.bool_to_int(id_ds_cmpt_mkt_rel_nin);
        l_value_n              := sys.diutil.bool_to_int(value_nin);
        l_value_clob_n         := sys.diutil.bool_to_int(value_clob_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_sql                  := 'UPDATE opinion_ds SET' || ' ID_OPINION = decode (' || l_id_opinion_n ||
                                  ',0,:ID_OPINION_in, NVL (:ID_OPINION_in, ID_OPINION)) ' || ',' ||
                                  ' DT_PROBLEM_TSTZ = decode (' || l_dt_problem_tstz_n ||
                                  ',0,:DT_PROBLEM_TSTZ_in, NVL (:DT_PROBLEM_TSTZ_in, DT_PROBLEM_TSTZ)) ' || ',' ||
                                  ' ID_DS_CMPT_MKT_REL = decode (' || l_id_ds_cmpt_mkt_rel_n ||
                                  ',0,:ID_DS_CMPT_MKT_REL_in, NVL (:ID_DS_CMPT_MKT_REL_in, ID_DS_CMPT_MKT_REL)) ' || ',' ||
                                  ' VALUE = decode (' || l_value_n || ',0,:VALUE_in, NVL (:VALUE_in, VALUE)) ' || ',' ||
                                  ' VALUE_CLOB = decode (' || l_value_clob_n ||
                                  ',0,:VALUE_CLOB_in, NVL (:VALUE_CLOB_in, VALUE_CLOB)) ' || ',' ||
                                  ' CREATE_USER = decode (' || l_create_user_n ||
                                  ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                  ' CREATE_TIME = decode (' || l_create_time_n ||
                                  ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                  ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                  ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                  ' UPDATE_USER = decode (' || l_update_user_n ||
                                  ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                  ' UPDATE_TIME = decode (' || l_update_time_n ||
                                  ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                  ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                  ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' ||
                                  ' where ' || nvl(where_in, '(1=1)') ||
                                  ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_opinion_in, dt_problem_tstz_in, id_ds_cmpt_mkt_rel_in, value_in, value_clob_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_opinion_in          IN opinion_ds.id_opinion%TYPE DEFAULT NULL,
        id_opinion_nin         IN BOOLEAN := TRUE,
        dt_problem_tstz_in     IN opinion_ds.dt_problem_tstz%TYPE DEFAULT NULL,
        dt_problem_tstz_nin    IN BOOLEAN := TRUE,
        id_ds_cmpt_mkt_rel_in  IN opinion_ds.id_ds_cmpt_mkt_rel%TYPE DEFAULT NULL,
        id_ds_cmpt_mkt_rel_nin IN BOOLEAN := TRUE,
        value_in               IN opinion_ds.value%TYPE DEFAULT NULL,
        value_nin              IN BOOLEAN := TRUE,
        value_clob_in          IN opinion_ds.value_clob%TYPE DEFAULT NULL,
        value_clob_nin         IN BOOLEAN := TRUE,
        create_user_in         IN opinion_ds.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN opinion_ds.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN opinion_ds.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN opinion_ds.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN opinion_ds.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN opinion_ds.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        where_in               IN VARCHAR2,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_opinion_in          => id_opinion_in,
            id_opinion_nin         => id_opinion_nin,
            dt_problem_tstz_in     => dt_problem_tstz_in,
            dt_problem_tstz_nin    => dt_problem_tstz_nin,
            id_ds_cmpt_mkt_rel_in  => id_ds_cmpt_mkt_rel_in,
            id_ds_cmpt_mkt_rel_nin => id_ds_cmpt_mkt_rel_nin,
            value_in               => value_in,
            value_nin              => value_nin,
            value_clob_in          => value_clob_in,
            value_clob_nin         => value_clob_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            where_in               => where_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_opinion_ds_in      IN opinion_ds.id_opinion_ds%TYPE,
        id_opinion_in         IN opinion_ds.id_opinion%TYPE DEFAULT NULL,
        dt_problem_tstz_in    IN opinion_ds.dt_problem_tstz%TYPE DEFAULT NULL,
        id_ds_cmpt_mkt_rel_in IN opinion_ds.id_ds_cmpt_mkt_rel%TYPE DEFAULT NULL,
        value_in              IN opinion_ds.value%TYPE DEFAULT NULL,
        value_clob_in         IN opinion_ds.value_clob%TYPE DEFAULT NULL,
        create_user_in        IN opinion_ds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN opinion_ds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN opinion_ds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN opinion_ds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN opinion_ds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN opinion_ds.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_opinion_ds_in      => id_opinion_ds_in,
            id_opinion_in         => id_opinion_in,
            dt_problem_tstz_in    => dt_problem_tstz_in,
            id_ds_cmpt_mkt_rel_in => id_ds_cmpt_mkt_rel_in,
            value_in              => value_in,
            value_clob_in         => value_clob_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_opinion_ds_in      => id_opinion_ds_in,
                id_opinion_in         => id_opinion_in,
                dt_problem_tstz_in    => dt_problem_tstz_in,
                id_ds_cmpt_mkt_rel_in => id_ds_cmpt_mkt_rel_in,
                value_in              => value_in,
                value_clob_in         => value_clob_in,
                create_user_in        => create_user_in,
                create_time_in        => create_time_in,
                create_institution_in => create_institution_in,
                update_user_in        => update_user_in,
                update_time_in        => update_time_in,
                update_institution_in => update_institution_in,
                handle_error_in       => handle_error_in,
                rows_out              => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_opinion_ds_in      IN opinion_ds.id_opinion_ds%TYPE,
        id_opinion_in         IN opinion_ds.id_opinion%TYPE DEFAULT NULL,
        dt_problem_tstz_in    IN opinion_ds.dt_problem_tstz%TYPE DEFAULT NULL,
        id_ds_cmpt_mkt_rel_in IN opinion_ds.id_ds_cmpt_mkt_rel%TYPE DEFAULT NULL,
        value_in              IN opinion_ds.value%TYPE DEFAULT NULL,
        value_clob_in         IN opinion_ds.value_clob%TYPE DEFAULT NULL,
        create_user_in        IN opinion_ds.create_user%TYPE DEFAULT NULL,
        create_time_in        IN opinion_ds.create_time%TYPE DEFAULT NULL,
        create_institution_in IN opinion_ds.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN opinion_ds.update_user%TYPE DEFAULT NULL,
        update_time_in        IN opinion_ds.update_time%TYPE DEFAULT NULL,
        update_institution_in IN opinion_ds.update_institution%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_opinion_ds_in,
                id_opinion_in,
                dt_problem_tstz_in,
                id_ds_cmpt_mkt_rel_in,
                value_in,
                value_clob_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN opinion_ds%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_opinion_ds_in      => rec_in.id_opinion_ds,
            id_opinion_in         => rec_in.id_opinion,
            dt_problem_tstz_in    => rec_in.dt_problem_tstz,
            id_ds_cmpt_mkt_rel_in => rec_in.id_ds_cmpt_mkt_rel,
            value_in              => rec_in.value,
            value_clob_in         => rec_in.value_clob,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN opinion_ds%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_opinion_ds_in      => rec_in.id_opinion_ds,
            id_opinion_in         => rec_in.id_opinion,
            dt_problem_tstz_in    => rec_in.dt_problem_tstz,
            id_ds_cmpt_mkt_rel_in => rec_in.id_ds_cmpt_mkt_rel,
            value_in              => rec_in.value,
            value_clob_in         => rec_in.value_clob,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN opinion_ds_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_opinion_ds      id_opinion_ds_cc;
        l_id_opinion         id_opinion_cc;
        l_dt_problem_tstz    dt_problem_tstz_cc;
        l_id_ds_cmpt_mkt_rel id_ds_cmpt_mkt_rel_cc;
        l_value              value_cc;
        l_value_clob         value_clob_cc;
        l_create_user        create_user_cc;
        l_create_time        create_time_cc;
        l_create_institution create_institution_cc;
        l_update_user        update_user_cc;
        l_update_time        update_time_cc;
        l_update_institution update_institution_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_opinion_ds(i) := col_in(i).id_opinion_ds;
            l_id_opinion(i) := col_in(i).id_opinion;
            l_dt_problem_tstz(i) := col_in(i).dt_problem_tstz;
            l_id_ds_cmpt_mkt_rel(i) := col_in(i).id_ds_cmpt_mkt_rel;
            l_value(i) := col_in(i).value;
            l_value_clob(i) := col_in(i).value_clob;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE opinion_ds
                   SET id_opinion         = nvl(l_id_opinion(i), id_opinion),
                       dt_problem_tstz    = nvl(l_dt_problem_tstz(i), dt_problem_tstz),
                       id_ds_cmpt_mkt_rel = nvl(l_id_ds_cmpt_mkt_rel(i), id_ds_cmpt_mkt_rel),
                       VALUE              = nvl(l_value(i), VALUE),
                       value_clob         = nvl(l_value_clob(i), value_clob),
                       create_user        = nvl(l_create_user(i), create_user),
                       create_time        = nvl(l_create_time(i), create_time),
                       create_institution = nvl(l_create_institution(i), create_institution),
                       update_user        = nvl(l_update_user(i), update_user),
                       update_time        = nvl(l_update_time(i), update_time),
                       update_institution = nvl(l_update_institution(i), update_institution)
                 WHERE id_opinion_ds = l_id_opinion_ds(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE opinion_ds
                   SET id_opinion         = l_id_opinion(i),
                       dt_problem_tstz    = l_dt_problem_tstz(i),
                       id_ds_cmpt_mkt_rel = l_id_ds_cmpt_mkt_rel(i),
                       VALUE              = l_value(i),
                       value_clob         = l_value_clob(i),
                       create_user        = l_create_user(i),
                       create_time        = l_create_time(i),
                       create_institution = l_create_institution(i),
                       update_user        = l_update_user(i),
                       update_time        = l_update_time(i),
                       update_institution = l_update_institution(i)
                 WHERE id_opinion_ds = l_id_opinion_ds(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN opinion_ds_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE opinion_ds
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE opinion_ds
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE opinion_ds
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_opinion_ds_in IN opinion_ds.id_opinion_ds%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion_ds
         WHERE id_opinion_ds = id_opinion_ds_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_opinion_ds_in IN opinion_ds.id_opinion_ds%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_opinion_ds_in => id_opinion_ds_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del;

    -- Delete all rows for this OPN_DS_MKT_RL_FK foreign key value
    PROCEDURE del_opn_ds_mkt_rl_fk
    (
        id_ds_cmpt_mkt_rel_in IN opinion_ds.id_ds_cmpt_mkt_rel%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion_ds
         WHERE id_ds_cmpt_mkt_rel = id_ds_cmpt_mkt_rel_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_opn_ds_mkt_rl_fk;

    -- Delete all rows for this OPN_DS_OPINION_FK foreign key value
    PROCEDURE del_opn_ds_opinion_fk
    (
        id_opinion_in   IN opinion_ds.id_opinion%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM opinion_ds
         WHERE id_opinion = id_opinion_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_opn_ds_opinion_fk;

    -- Delete all rows for this OPN_DS_MKT_RL_FK foreign key value
    PROCEDURE del_opn_ds_mkt_rl_fk
    (
        id_ds_cmpt_mkt_rel_in IN opinion_ds.id_ds_cmpt_mkt_rel%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opn_ds_mkt_rl_fk(id_ds_cmpt_mkt_rel_in => id_ds_cmpt_mkt_rel_in,
                             handle_error_in       => handle_error_in,
                             rows_out              => rows_out);
    END del_opn_ds_mkt_rl_fk;

    -- Delete all rows for this OPN_DS_OPINION_FK foreign key value
    PROCEDURE del_opn_ds_opinion_fk
    (
        id_opinion_in   IN opinion_ds.id_opinion%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_opn_ds_opinion_fk(id_opinion_in => id_opinion_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_opn_ds_opinion_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM opinion_ds';
        ELSE
            RETURN 'DELETE FROM opinion_ds WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_error('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(opinion_ds_inout IN OUT opinion_ds%ROWTYPE) IS
    BEGIN
        opinion_ds_inout.id_opinion_ds      := NULL;
        opinion_ds_inout.id_opinion         := NULL;
        opinion_ds_inout.dt_problem_tstz    := NULL;
        opinion_ds_inout.id_ds_cmpt_mkt_rel := NULL;
        opinion_ds_inout.value              := NULL;
        opinion_ds_inout.value_clob         := NULL;
        opinion_ds_inout.create_user        := NULL;
        opinion_ds_inout.create_time        := NULL;
        opinion_ds_inout.create_institution := NULL;
        opinion_ds_inout.update_user        := NULL;
        opinion_ds_inout.update_time        := NULL;
        opinion_ds_inout.update_institution := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN opinion_ds%ROWTYPE IS
        l_opinion_ds opinion_ds%ROWTYPE;
    BEGIN
        RETURN l_opinion_ds;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN opinion_ds_tc IS
        data opinion_ds_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM opinion_ds
         WHERE ROWID IN (SELECT /*+ OPT_ESTIMATE(TABLE t ROWS=1) */
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN opinion_ds_tc IS
        data opinion_ds_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_opinion_ds;
/
