/*-- Last Change Revision: $Rev: 2027953 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:43:47 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_blood_product_analysis
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2019-02-07 17:11:55
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN blood_product_analysis.id_blood_product_analysis%TYPE IS
        retval blood_product_analysis.id_blood_product_analysis%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_blood_product_analysis.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_blood_product_det_in       IN blood_product_analysis.id_blood_product_det%TYPE DEFAULT NULL,
        id_analysis_req_det_in        IN blood_product_analysis.id_analysis_req_det%TYPE DEFAULT NULL,
        create_user_in                IN blood_product_analysis.create_user%TYPE DEFAULT NULL,
        create_time_in                IN blood_product_analysis.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN blood_product_analysis.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN blood_product_analysis.update_user%TYPE DEFAULT NULL,
        update_time_in                IN blood_product_analysis.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN blood_product_analysis.update_institution%TYPE DEFAULT NULL,
        id_blood_product_execution_in IN blood_product_analysis.id_blood_product_execution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky blood_product_analysis.id_blood_product_analysis%TYPE := next_key;
    BEGIN
        ins(id_blood_product_analysis_in  => l_pky,
            id_blood_product_det_in       => id_blood_product_det_in,
            id_analysis_req_det_in        => id_analysis_req_det_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            id_blood_product_execution_in => id_blood_product_execution_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_blood_product_det_in       IN blood_product_analysis.id_blood_product_det%TYPE DEFAULT NULL,
        id_analysis_req_det_in        IN blood_product_analysis.id_analysis_req_det%TYPE DEFAULT NULL,
        create_user_in                IN blood_product_analysis.create_user%TYPE DEFAULT NULL,
        create_time_in                IN blood_product_analysis.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN blood_product_analysis.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN blood_product_analysis.update_user%TYPE DEFAULT NULL,
        update_time_in                IN blood_product_analysis.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN blood_product_analysis.update_institution%TYPE DEFAULT NULL,
        id_blood_product_execution_in IN blood_product_analysis.id_blood_product_execution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_blood_product_det_in       => id_blood_product_det_in,
            id_analysis_req_det_in        => id_analysis_req_det_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            id_blood_product_execution_in => id_blood_product_execution_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_blood_product_det_in       IN blood_product_analysis.id_blood_product_det%TYPE DEFAULT NULL,
        id_analysis_req_det_in        IN blood_product_analysis.id_analysis_req_det%TYPE DEFAULT NULL,
        create_user_in                IN blood_product_analysis.create_user%TYPE DEFAULT NULL,
        create_time_in                IN blood_product_analysis.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN blood_product_analysis.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN blood_product_analysis.update_user%TYPE DEFAULT NULL,
        update_time_in                IN blood_product_analysis.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN blood_product_analysis.update_institution%TYPE DEFAULT NULL,
        id_blood_product_execution_in IN blood_product_analysis.id_blood_product_execution%TYPE DEFAULT NULL,
        id_blood_product_analysis_out IN OUT blood_product_analysis.id_blood_product_analysis%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky blood_product_analysis.id_blood_product_analysis%TYPE := next_key;
    BEGIN
        ins(id_blood_product_analysis_in  => l_pky,
            id_blood_product_det_in       => id_blood_product_det_in,
            id_analysis_req_det_in        => id_analysis_req_det_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            id_blood_product_execution_in => id_blood_product_execution_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
        id_blood_product_analysis_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_blood_product_det_in       IN blood_product_analysis.id_blood_product_det%TYPE DEFAULT NULL,
        id_analysis_req_det_in        IN blood_product_analysis.id_analysis_req_det%TYPE DEFAULT NULL,
        create_user_in                IN blood_product_analysis.create_user%TYPE DEFAULT NULL,
        create_time_in                IN blood_product_analysis.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN blood_product_analysis.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN blood_product_analysis.update_user%TYPE DEFAULT NULL,
        update_time_in                IN blood_product_analysis.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN blood_product_analysis.update_institution%TYPE DEFAULT NULL,
        id_blood_product_execution_in IN blood_product_analysis.id_blood_product_execution%TYPE DEFAULT NULL,
        id_blood_product_analysis_out IN OUT blood_product_analysis.id_blood_product_analysis%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_blood_product_det_in       => id_blood_product_det_in,
            id_analysis_req_det_in        => id_analysis_req_det_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            id_blood_product_execution_in => id_blood_product_execution_in,
            id_blood_product_analysis_out => id_blood_product_analysis_out,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_blood_product_det_in       IN blood_product_analysis.id_blood_product_det%TYPE DEFAULT NULL,
        id_analysis_req_det_in        IN blood_product_analysis.id_analysis_req_det%TYPE DEFAULT NULL,
        create_user_in                IN blood_product_analysis.create_user%TYPE DEFAULT NULL,
        create_time_in                IN blood_product_analysis.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN blood_product_analysis.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN blood_product_analysis.update_user%TYPE DEFAULT NULL,
        update_time_in                IN blood_product_analysis.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN blood_product_analysis.update_institution%TYPE DEFAULT NULL,
        id_blood_product_execution_in IN blood_product_analysis.id_blood_product_execution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN blood_product_analysis.id_blood_product_analysis%TYPE IS
        l_pky blood_product_analysis.id_blood_product_analysis%TYPE := next_key;
    BEGIN
        ins(id_blood_product_analysis_in  => l_pky,
            id_blood_product_det_in       => id_blood_product_det_in,
            id_analysis_req_det_in        => id_analysis_req_det_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            id_blood_product_execution_in => id_blood_product_execution_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_blood_product_det_in       IN blood_product_analysis.id_blood_product_det%TYPE DEFAULT NULL,
        id_analysis_req_det_in        IN blood_product_analysis.id_analysis_req_det%TYPE DEFAULT NULL,
        create_user_in                IN blood_product_analysis.create_user%TYPE DEFAULT NULL,
        create_time_in                IN blood_product_analysis.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN blood_product_analysis.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN blood_product_analysis.update_user%TYPE DEFAULT NULL,
        update_time_in                IN blood_product_analysis.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN blood_product_analysis.update_institution%TYPE DEFAULT NULL,
        id_blood_product_execution_in IN blood_product_analysis.id_blood_product_execution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN blood_product_analysis.id_blood_product_analysis%TYPE IS
        l_pky    blood_product_analysis.id_blood_product_analysis%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_blood_product_analysis_in  => l_pky,
            id_blood_product_det_in       => id_blood_product_det_in,
            id_analysis_req_det_in        => id_analysis_req_det_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            id_blood_product_execution_in => id_blood_product_execution_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_blood_product_analysis_in  IN blood_product_analysis.id_blood_product_analysis%TYPE,
        id_blood_product_det_in       IN blood_product_analysis.id_blood_product_det%TYPE DEFAULT NULL,
        id_analysis_req_det_in        IN blood_product_analysis.id_analysis_req_det%TYPE DEFAULT NULL,
        create_user_in                IN blood_product_analysis.create_user%TYPE DEFAULT NULL,
        create_time_in                IN blood_product_analysis.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN blood_product_analysis.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN blood_product_analysis.update_user%TYPE DEFAULT NULL,
        update_time_in                IN blood_product_analysis.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN blood_product_analysis.update_institution%TYPE DEFAULT NULL,
        id_blood_product_execution_in IN blood_product_analysis.id_blood_product_execution%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO blood_product_analysis
            (id_blood_product_analysis,
             id_blood_product_det,
             id_analysis_req_det,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_blood_product_execution)
        VALUES
            (id_blood_product_analysis_in,
             id_blood_product_det_in,
             id_analysis_req_det_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_blood_product_execution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_blood_product_analysis_in  IN blood_product_analysis.id_blood_product_analysis%TYPE,
        id_blood_product_det_in       IN blood_product_analysis.id_blood_product_det%TYPE DEFAULT NULL,
        id_analysis_req_det_in        IN blood_product_analysis.id_analysis_req_det%TYPE DEFAULT NULL,
        create_user_in                IN blood_product_analysis.create_user%TYPE DEFAULT NULL,
        create_time_in                IN blood_product_analysis.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN blood_product_analysis.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN blood_product_analysis.update_user%TYPE DEFAULT NULL,
        update_time_in                IN blood_product_analysis.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN blood_product_analysis.update_institution%TYPE DEFAULT NULL,
        id_blood_product_execution_in IN blood_product_analysis.id_blood_product_execution%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_blood_product_analysis_in  => id_blood_product_analysis_in,
            id_blood_product_det_in       => id_blood_product_det_in,
            id_analysis_req_det_in        => id_analysis_req_det_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            id_blood_product_execution_in => id_blood_product_execution_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN blood_product_analysis%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec blood_product_analysis%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_blood_product_analysis := next_key(sequence_in);
        END IF;
    
        ins(id_blood_product_analysis_in  => l_rec.id_blood_product_analysis,
            id_blood_product_det_in       => l_rec.id_blood_product_det,
            id_analysis_req_det_in        => l_rec.id_analysis_req_det,
            create_user_in                => l_rec.create_user,
            create_time_in                => l_rec.create_time,
            create_institution_in         => l_rec.create_institution,
            update_user_in                => l_rec.update_user,
            update_time_in                => l_rec.update_time,
            update_institution_in         => l_rec.update_institution,
            id_blood_product_execution_in => l_rec.id_blood_product_execution,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN blood_product_analysis%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN blood_product_analysis_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO blood_product_analysis
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN blood_product_analysis_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_blood_product_analysis_in   IN blood_product_analysis.id_blood_product_analysis%TYPE,
        id_blood_product_det_in        IN blood_product_analysis.id_blood_product_det%TYPE DEFAULT NULL,
        id_blood_product_det_nin       IN BOOLEAN := TRUE,
        id_analysis_req_det_in         IN blood_product_analysis.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_req_det_nin        IN BOOLEAN := TRUE,
        create_user_in                 IN blood_product_analysis.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN blood_product_analysis.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN blood_product_analysis.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN blood_product_analysis.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN blood_product_analysis.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN blood_product_analysis.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        id_blood_product_execution_in  IN blood_product_analysis.id_blood_product_execution%TYPE DEFAULT NULL,
        id_blood_product_execution_nin IN BOOLEAN := TRUE,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       IN OUT table_varchar
    ) IS
        l_rows_out                     table_varchar;
        l_id_blood_product_det_n       NUMBER(1) := sys.diutil.bool_to_int(id_blood_product_det_nin);
        l_id_analysis_req_det_n        NUMBER(1) := sys.diutil.bool_to_int(id_analysis_req_det_nin);
        l_create_user_n                NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n                NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n         NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n                NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n                NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n         NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_blood_product_execution_n NUMBER(1) := sys.diutil.bool_to_int(id_blood_product_execution_nin);
    BEGIN
    
        UPDATE blood_product_analysis
           SET id_blood_product_det       = decode(l_id_blood_product_det_n,
                                                   0,
                                                   id_blood_product_det_in,
                                                   nvl(id_blood_product_det_in, id_blood_product_det)),
               id_analysis_req_det        = decode(l_id_analysis_req_det_n,
                                                   0,
                                                   id_analysis_req_det_in,
                                                   nvl(id_analysis_req_det_in, id_analysis_req_det)),
               create_user                = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time                = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution         = decode(l_create_institution_n,
                                                   0,
                                                   create_institution_in,
                                                   nvl(create_institution_in, create_institution)),
               update_user                = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time                = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution         = decode(l_update_institution_n,
                                                   0,
                                                   update_institution_in,
                                                   nvl(update_institution_in, update_institution)),
               id_blood_product_execution = decode(l_id_blood_product_execution_n,
                                                   0,
                                                   id_blood_product_execution_in,
                                                   nvl(id_blood_product_execution_in, id_blood_product_execution))
         WHERE id_blood_product_analysis = id_blood_product_analysis_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_blood_product_analysis_in   IN blood_product_analysis.id_blood_product_analysis%TYPE,
        id_blood_product_det_in        IN blood_product_analysis.id_blood_product_det%TYPE DEFAULT NULL,
        id_blood_product_det_nin       IN BOOLEAN := TRUE,
        id_analysis_req_det_in         IN blood_product_analysis.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_req_det_nin        IN BOOLEAN := TRUE,
        create_user_in                 IN blood_product_analysis.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN blood_product_analysis.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN blood_product_analysis.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN blood_product_analysis.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN blood_product_analysis.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN blood_product_analysis.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        id_blood_product_execution_in  IN blood_product_analysis.id_blood_product_execution%TYPE DEFAULT NULL,
        id_blood_product_execution_nin IN BOOLEAN := TRUE,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_blood_product_analysis_in   => id_blood_product_analysis_in,
            id_blood_product_det_in        => id_blood_product_det_in,
            id_blood_product_det_nin       => id_blood_product_det_nin,
            id_analysis_req_det_in         => id_analysis_req_det_in,
            id_analysis_req_det_nin        => id_analysis_req_det_nin,
            create_user_in                 => create_user_in,
            create_user_nin                => create_user_nin,
            create_time_in                 => create_time_in,
            create_time_nin                => create_time_nin,
            create_institution_in          => create_institution_in,
            create_institution_nin         => create_institution_nin,
            update_user_in                 => update_user_in,
            update_user_nin                => update_user_nin,
            update_time_in                 => update_time_in,
            update_time_nin                => update_time_nin,
            update_institution_in          => update_institution_in,
            update_institution_nin         => update_institution_nin,
            id_blood_product_execution_in  => id_blood_product_execution_in,
            id_blood_product_execution_nin => id_blood_product_execution_nin,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_blood_product_det_in        IN blood_product_analysis.id_blood_product_det%TYPE DEFAULT NULL,
        id_blood_product_det_nin       IN BOOLEAN := TRUE,
        id_analysis_req_det_in         IN blood_product_analysis.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_req_det_nin        IN BOOLEAN := TRUE,
        create_user_in                 IN blood_product_analysis.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN blood_product_analysis.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN blood_product_analysis.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN blood_product_analysis.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN blood_product_analysis.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN blood_product_analysis.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        id_blood_product_execution_in  IN blood_product_analysis.id_blood_product_execution%TYPE DEFAULT NULL,
        id_blood_product_execution_nin IN BOOLEAN := TRUE,
        where_in                       IN VARCHAR2,
        handle_error_in                IN BOOLEAN := TRUE,
        rows_out                       IN OUT table_varchar
    ) IS
        l_sql                          VARCHAR2(32767);
        l_rows_out                     table_varchar;
        l_id_blood_product_det_n       NUMBER(1) := sys.diutil.bool_to_int(id_blood_product_det_nin);
        l_id_analysis_req_det_n        NUMBER(1) := sys.diutil.bool_to_int(id_analysis_req_det_nin);
        l_create_user_n                NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n                NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n         NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n                NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n                NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n         NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_blood_product_execution_n NUMBER(1) := sys.diutil.bool_to_int(id_blood_product_execution_nin);
    BEGIN
        l_id_blood_product_det_n       := sys.diutil.bool_to_int(id_blood_product_det_nin);
        l_id_analysis_req_det_n        := sys.diutil.bool_to_int(id_analysis_req_det_nin);
        l_create_user_n                := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n                := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n         := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n                := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n                := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n         := sys.diutil.bool_to_int(update_institution_nin);
        l_id_blood_product_execution_n := sys.diutil.bool_to_int(id_blood_product_execution_nin);
        l_sql                          := 'UPDATE blood_product_analysis SET' || ' ID_BLOOD_PRODUCT_DET = decode (' ||
                                          l_id_blood_product_det_n ||
                                          ',0,:ID_BLOOD_PRODUCT_DET_in, NVL (:ID_BLOOD_PRODUCT_DET_in, ID_BLOOD_PRODUCT_DET)) ' || ',' ||
                                          ' ID_ANALYSIS_REQ_DET = decode (' || l_id_analysis_req_det_n ||
                                          ',0,:ID_ANALYSIS_REQ_DET_in, NVL (:ID_ANALYSIS_REQ_DET_in, ID_ANALYSIS_REQ_DET)) ' || ',' ||
                                          ' CREATE_USER = decode (' || l_create_user_n ||
                                          ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                          ' CREATE_TIME = decode (' || l_create_time_n ||
                                          ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                          ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                          ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                          ' UPDATE_USER = decode (' || l_update_user_n ||
                                          ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                          ' UPDATE_TIME = decode (' || l_update_time_n ||
                                          ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                          ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                          ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                          ' ID_BLOOD_PRODUCT_EXECUTION = decode (' || l_id_blood_product_execution_n ||
                                          ',0,:ID_BLOOD_PRODUCT_EXECUTION_in, NVL (:ID_BLOOD_PRODUCT_EXECUTION_in, ID_BLOOD_PRODUCT_EXECUTION)) ' ||
                                          ' where ' || nvl(where_in, '(1=1)') ||
                                          ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_blood_product_det_in, id_analysis_req_det_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_blood_product_execution_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_blood_product_det_in        IN blood_product_analysis.id_blood_product_det%TYPE DEFAULT NULL,
        id_blood_product_det_nin       IN BOOLEAN := TRUE,
        id_analysis_req_det_in         IN blood_product_analysis.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_req_det_nin        IN BOOLEAN := TRUE,
        create_user_in                 IN blood_product_analysis.create_user%TYPE DEFAULT NULL,
        create_user_nin                IN BOOLEAN := TRUE,
        create_time_in                 IN blood_product_analysis.create_time%TYPE DEFAULT NULL,
        create_time_nin                IN BOOLEAN := TRUE,
        create_institution_in          IN blood_product_analysis.create_institution%TYPE DEFAULT NULL,
        create_institution_nin         IN BOOLEAN := TRUE,
        update_user_in                 IN blood_product_analysis.update_user%TYPE DEFAULT NULL,
        update_user_nin                IN BOOLEAN := TRUE,
        update_time_in                 IN blood_product_analysis.update_time%TYPE DEFAULT NULL,
        update_time_nin                IN BOOLEAN := TRUE,
        update_institution_in          IN blood_product_analysis.update_institution%TYPE DEFAULT NULL,
        update_institution_nin         IN BOOLEAN := TRUE,
        id_blood_product_execution_in  IN blood_product_analysis.id_blood_product_execution%TYPE DEFAULT NULL,
        id_blood_product_execution_nin IN BOOLEAN := TRUE,
        where_in                       IN VARCHAR2,
        handle_error_in                IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_blood_product_det_in        => id_blood_product_det_in,
            id_blood_product_det_nin       => id_blood_product_det_nin,
            id_analysis_req_det_in         => id_analysis_req_det_in,
            id_analysis_req_det_nin        => id_analysis_req_det_nin,
            create_user_in                 => create_user_in,
            create_user_nin                => create_user_nin,
            create_time_in                 => create_time_in,
            create_time_nin                => create_time_nin,
            create_institution_in          => create_institution_in,
            create_institution_nin         => create_institution_nin,
            update_user_in                 => update_user_in,
            update_user_nin                => update_user_nin,
            update_time_in                 => update_time_in,
            update_time_nin                => update_time_nin,
            update_institution_in          => update_institution_in,
            update_institution_nin         => update_institution_nin,
            id_blood_product_execution_in  => id_blood_product_execution_in,
            id_blood_product_execution_nin => id_blood_product_execution_nin,
            where_in                       => where_in,
            handle_error_in                => handle_error_in,
            rows_out                       => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_blood_product_analysis_in  IN blood_product_analysis.id_blood_product_analysis%TYPE,
        id_blood_product_det_in       IN blood_product_analysis.id_blood_product_det%TYPE DEFAULT NULL,
        id_analysis_req_det_in        IN blood_product_analysis.id_analysis_req_det%TYPE DEFAULT NULL,
        create_user_in                IN blood_product_analysis.create_user%TYPE DEFAULT NULL,
        create_time_in                IN blood_product_analysis.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN blood_product_analysis.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN blood_product_analysis.update_user%TYPE DEFAULT NULL,
        update_time_in                IN blood_product_analysis.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN blood_product_analysis.update_institution%TYPE DEFAULT NULL,
        id_blood_product_execution_in IN blood_product_analysis.id_blood_product_execution%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_blood_product_analysis_in  => id_blood_product_analysis_in,
            id_blood_product_det_in       => id_blood_product_det_in,
            id_analysis_req_det_in        => id_analysis_req_det_in,
            create_user_in                => create_user_in,
            create_time_in                => create_time_in,
            create_institution_in         => create_institution_in,
            update_user_in                => update_user_in,
            update_time_in                => update_time_in,
            update_institution_in         => update_institution_in,
            id_blood_product_execution_in => id_blood_product_execution_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_blood_product_analysis_in  => id_blood_product_analysis_in,
                id_blood_product_det_in       => id_blood_product_det_in,
                id_analysis_req_det_in        => id_analysis_req_det_in,
                create_user_in                => create_user_in,
                create_time_in                => create_time_in,
                create_institution_in         => create_institution_in,
                update_user_in                => update_user_in,
                update_time_in                => update_time_in,
                update_institution_in         => update_institution_in,
                id_blood_product_execution_in => id_blood_product_execution_in,
                handle_error_in               => handle_error_in,
                rows_out                      => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_blood_product_analysis_in  IN blood_product_analysis.id_blood_product_analysis%TYPE,
        id_blood_product_det_in       IN blood_product_analysis.id_blood_product_det%TYPE DEFAULT NULL,
        id_analysis_req_det_in        IN blood_product_analysis.id_analysis_req_det%TYPE DEFAULT NULL,
        create_user_in                IN blood_product_analysis.create_user%TYPE DEFAULT NULL,
        create_time_in                IN blood_product_analysis.create_time%TYPE DEFAULT NULL,
        create_institution_in         IN blood_product_analysis.create_institution%TYPE DEFAULT NULL,
        update_user_in                IN blood_product_analysis.update_user%TYPE DEFAULT NULL,
        update_time_in                IN blood_product_analysis.update_time%TYPE DEFAULT NULL,
        update_institution_in         IN blood_product_analysis.update_institution%TYPE DEFAULT NULL,
        id_blood_product_execution_in IN blood_product_analysis.id_blood_product_execution%TYPE DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_blood_product_analysis_in,
                id_blood_product_det_in,
                id_analysis_req_det_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_blood_product_execution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN blood_product_analysis%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_blood_product_analysis_in  => rec_in.id_blood_product_analysis,
            id_blood_product_det_in       => rec_in.id_blood_product_det,
            id_analysis_req_det_in        => rec_in.id_analysis_req_det,
            create_user_in                => rec_in.create_user,
            create_time_in                => rec_in.create_time,
            create_institution_in         => rec_in.create_institution,
            update_user_in                => rec_in.update_user,
            update_time_in                => rec_in.update_time,
            update_institution_in         => rec_in.update_institution,
            id_blood_product_execution_in => rec_in.id_blood_product_execution,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN blood_product_analysis%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_blood_product_analysis_in  => rec_in.id_blood_product_analysis,
            id_blood_product_det_in       => rec_in.id_blood_product_det,
            id_analysis_req_det_in        => rec_in.id_analysis_req_det,
            create_user_in                => rec_in.create_user,
            create_time_in                => rec_in.create_time,
            create_institution_in         => rec_in.create_institution,
            update_user_in                => rec_in.update_user,
            update_time_in                => rec_in.update_time,
            update_institution_in         => rec_in.update_institution,
            id_blood_product_execution_in => rec_in.id_blood_product_execution,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN blood_product_analysis_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_blood_product_analysis  id_blood_product_analysis_cc;
        l_id_blood_product_det       id_blood_product_det_cc;
        l_id_analysis_req_det        id_analysis_req_det_cc;
        l_create_user                create_user_cc;
        l_create_time                create_time_cc;
        l_create_institution         create_institution_cc;
        l_update_user                update_user_cc;
        l_update_time                update_time_cc;
        l_update_institution         update_institution_cc;
        l_id_blood_product_execution id_blood_product_execution_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_blood_product_analysis(i) := col_in(i).id_blood_product_analysis;
            l_id_blood_product_det(i) := col_in(i).id_blood_product_det;
            l_id_analysis_req_det(i) := col_in(i).id_analysis_req_det;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_blood_product_execution(i) := col_in(i).id_blood_product_execution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE blood_product_analysis
                   SET id_blood_product_det       = nvl(l_id_blood_product_det(i), id_blood_product_det),
                       id_analysis_req_det        = nvl(l_id_analysis_req_det(i), id_analysis_req_det),
                       create_user                = nvl(l_create_user(i), create_user),
                       create_time                = nvl(l_create_time(i), create_time),
                       create_institution         = nvl(l_create_institution(i), create_institution),
                       update_user                = nvl(l_update_user(i), update_user),
                       update_time                = nvl(l_update_time(i), update_time),
                       update_institution         = nvl(l_update_institution(i), update_institution),
                       id_blood_product_execution = nvl(l_id_blood_product_execution(i), id_blood_product_execution)
                 WHERE id_blood_product_analysis = l_id_blood_product_analysis(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE blood_product_analysis
                   SET id_blood_product_det       = l_id_blood_product_det(i),
                       id_analysis_req_det        = l_id_analysis_req_det(i),
                       create_user                = l_create_user(i),
                       create_time                = l_create_time(i),
                       create_institution         = l_create_institution(i),
                       update_user                = l_update_user(i),
                       update_time                = l_update_time(i),
                       update_institution         = l_update_institution(i),
                       id_blood_product_execution = l_id_blood_product_execution(i)
                 WHERE id_blood_product_analysis = l_id_blood_product_analysis(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN blood_product_analysis_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE blood_product_analysis
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE blood_product_analysis
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE blood_product_analysis
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_blood_product_analysis_in IN blood_product_analysis.id_blood_product_analysis%TYPE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM blood_product_analysis
         WHERE id_blood_product_analysis = id_blood_product_analysis_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_blood_product_analysis_in IN blood_product_analysis.id_blood_product_analysis%TYPE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_blood_product_analysis_in => id_blood_product_analysis_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END del;

    -- Delete all rows for this BPA_AR_FK foreign key value
    PROCEDURE del_bpa_ar_fk
    (
        id_analysis_req_det_in IN blood_product_analysis.id_analysis_req_det%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM blood_product_analysis
         WHERE id_analysis_req_det = id_analysis_req_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_bpa_ar_fk;

    -- Delete all rows for this BPA_BPD_FK foreign key value
    PROCEDURE del_bpa_bpd_fk
    (
        id_blood_product_det_in IN blood_product_analysis.id_blood_product_det%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM blood_product_analysis
         WHERE id_blood_product_det = id_blood_product_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_bpa_bpd_fk;

    -- Delete all rows for this BPA_AR_FK foreign key value
    PROCEDURE del_bpa_ar_fk
    (
        id_analysis_req_det_in IN blood_product_analysis.id_analysis_req_det%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bpa_ar_fk(id_analysis_req_det_in => id_analysis_req_det_in,
                      handle_error_in        => handle_error_in,
                      rows_out               => rows_out);
    END del_bpa_ar_fk;

    -- Delete all rows for this BPA_BPD_FK foreign key value
    PROCEDURE del_bpa_bpd_fk
    (
        id_blood_product_det_in IN blood_product_analysis.id_blood_product_det%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bpa_bpd_fk(id_blood_product_det_in => id_blood_product_det_in,
                       handle_error_in         => handle_error_in,
                       rows_out                => rows_out);
    END del_bpa_bpd_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM blood_product_analysis';
        ELSE
            RETURN 'DELETE FROM blood_product_analysis WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(blood_product_analysis_inout IN OUT blood_product_analysis%ROWTYPE) IS
    BEGIN
        blood_product_analysis_inout.id_blood_product_analysis  := NULL;
        blood_product_analysis_inout.id_blood_product_det       := NULL;
        blood_product_analysis_inout.id_analysis_req_det        := NULL;
        blood_product_analysis_inout.create_user                := NULL;
        blood_product_analysis_inout.create_time                := NULL;
        blood_product_analysis_inout.create_institution         := NULL;
        blood_product_analysis_inout.update_user                := NULL;
        blood_product_analysis_inout.update_time                := NULL;
        blood_product_analysis_inout.update_institution         := NULL;
        blood_product_analysis_inout.id_blood_product_execution := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN blood_product_analysis%ROWTYPE IS
        l_blood_product_analysis blood_product_analysis%ROWTYPE;
    BEGIN
        RETURN l_blood_product_analysis;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN blood_product_analysis_tc IS
        data blood_product_analysis_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM blood_product_analysis
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN blood_product_analysis_tc IS
        data blood_product_analysis_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_blood_product_analysis;
/
