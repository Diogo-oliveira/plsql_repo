/*-- Last Change Revision: $Rev: 2028407 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:35 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_transfer_institution
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Maio 26, 2011 16:3:24
| Created By: ALERT
*/
 IS

    /*-- Last Change Revision: $Rev: 2028407 $*/
    /*-- Last Change by: $Author: mario.fernandes $*/
    /*-- Date of last change: $Date: 2022-08-02 18:45:35 +0100 (ter, 02 ago 2022) $*/

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_episode_in            IN transfer_institution.id_episode%TYPE,
        dt_creation_tstz_in      IN transfer_institution.dt_creation_tstz%TYPE,
        id_institution_origin_in IN transfer_institution.id_institution_origin%TYPE DEFAULT NULL,
        id_institution_dest_in   IN transfer_institution.id_institution_dest%TYPE DEFAULT NULL,
        id_transp_entity_in      IN transfer_institution.id_transp_entity%TYPE DEFAULT NULL,
        notes_in                 IN transfer_institution.notes%TYPE DEFAULT NULL,
        dt_begin_tstz_in         IN transfer_institution.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in           IN transfer_institution.dt_end_tstz%TYPE DEFAULT NULL,
        flg_status_in            IN transfer_institution.flg_status%TYPE DEFAULT NULL,
        id_prof_reg_in           IN transfer_institution.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_begin_in         IN transfer_institution.id_prof_begin%TYPE DEFAULT NULL,
        id_prof_end_in           IN transfer_institution.id_prof_end%TYPE DEFAULT NULL,
        id_patient_in            IN transfer_institution.id_patient%TYPE DEFAULT NULL,
        id_transfer_option_in    IN transfer_institution.id_transfer_option%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN transfer_institution.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN transfer_institution.dt_cancel_tstz%TYPE DEFAULT NULL,
        notes_cancel_in          IN transfer_institution.notes_cancel%TYPE DEFAULT NULL,
        id_dep_clin_serv_in      IN transfer_institution.id_dep_clin_serv%TYPE DEFAULT NULL,
        create_user_in           IN transfer_institution.create_user%TYPE DEFAULT NULL,
        create_time_in           IN transfer_institution.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN transfer_institution.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN transfer_institution.update_user%TYPE DEFAULT NULL,
        update_time_in           IN transfer_institution.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN transfer_institution.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN transfer_institution.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO transfer_institution
            (id_institution_origin,
             id_institution_dest,
             dt_creation_tstz,
             id_transp_entity,
             notes,
             dt_begin_tstz,
             dt_end_tstz,
             flg_status,
             id_prof_reg,
             id_prof_begin,
             id_prof_end,
             id_episode,
             id_patient,
             id_transfer_option,
             id_prof_cancel,
             dt_cancel_tstz,
             notes_cancel,
             id_dep_clin_serv,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_cancel_reason)
        VALUES
            (id_institution_origin_in,
             id_institution_dest_in,
             dt_creation_tstz_in,
             id_transp_entity_in,
             notes_in,
             dt_begin_tstz_in,
             dt_end_tstz_in,
             flg_status_in,
             id_prof_reg_in,
             id_prof_begin_in,
             id_prof_end_in,
             id_episode_in,
             id_patient_in,
             id_transfer_option_in,
             id_prof_cancel_in,
             dt_cancel_tstz_in,
             notes_cancel_in,
             id_dep_clin_serv_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_cancel_reason_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'TRANSFER_INSTITUTION');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    IF l_name = 'TI_ICR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'TINST_DCS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV',
                                                        value_in           => id_dep_clin_serv_in);
                    END IF;
                    IF l_name = 'TINST_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'TINST_INSTD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION_DEST',
                                                        value_in           => id_institution_dest_in);
                    END IF;
                    IF l_name = 'TINST_INSTO_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION_ORIGIN',
                                                        value_in           => id_institution_origin_in);
                    END IF;
                    IF l_name = 'TINST_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'TINST_PROFB_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_BEGIN',
                                                        value_in           => id_prof_begin_in);
                    END IF;
                    IF l_name = 'TINST_PROFC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'TINST_PROFE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_END',
                                                        value_in           => id_prof_end_in);
                    END IF;
                    IF l_name = 'TINST_PROFR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_REG',
                                                        value_in           => id_prof_reg_in);
                    END IF;
                    IF l_name = 'TINST_TOPT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TRANSFER_OPTION',
                                                        value_in           => id_transfer_option_in);
                    END IF;
                    IF l_name = 'TINST_TRP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TRANSP_ENTITY',
                                                        value_in           => id_transp_entity_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_episode_in            IN transfer_institution.id_episode%TYPE,
        dt_creation_tstz_in      IN transfer_institution.dt_creation_tstz%TYPE,
        id_institution_origin_in IN transfer_institution.id_institution_origin%TYPE DEFAULT NULL,
        id_institution_dest_in   IN transfer_institution.id_institution_dest%TYPE DEFAULT NULL,
        id_transp_entity_in      IN transfer_institution.id_transp_entity%TYPE DEFAULT NULL,
        notes_in                 IN transfer_institution.notes%TYPE DEFAULT NULL,
        dt_begin_tstz_in         IN transfer_institution.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in           IN transfer_institution.dt_end_tstz%TYPE DEFAULT NULL,
        flg_status_in            IN transfer_institution.flg_status%TYPE DEFAULT NULL,
        id_prof_reg_in           IN transfer_institution.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_begin_in         IN transfer_institution.id_prof_begin%TYPE DEFAULT NULL,
        id_prof_end_in           IN transfer_institution.id_prof_end%TYPE DEFAULT NULL,
        id_patient_in            IN transfer_institution.id_patient%TYPE DEFAULT NULL,
        id_transfer_option_in    IN transfer_institution.id_transfer_option%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN transfer_institution.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN transfer_institution.dt_cancel_tstz%TYPE DEFAULT NULL,
        notes_cancel_in          IN transfer_institution.notes_cancel%TYPE DEFAULT NULL,
        id_dep_clin_serv_in      IN transfer_institution.id_dep_clin_serv%TYPE DEFAULT NULL,
        create_user_in           IN transfer_institution.create_user%TYPE DEFAULT NULL,
        create_time_in           IN transfer_institution.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN transfer_institution.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN transfer_institution.update_user%TYPE DEFAULT NULL,
        update_time_in           IN transfer_institution.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN transfer_institution.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN transfer_institution.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_episode_in            => id_episode_in,
            dt_creation_tstz_in      => dt_creation_tstz_in,
            id_institution_origin_in => id_institution_origin_in,
            id_institution_dest_in   => id_institution_dest_in,
            id_transp_entity_in      => id_transp_entity_in,
            notes_in                 => notes_in,
            dt_begin_tstz_in         => dt_begin_tstz_in,
            dt_end_tstz_in           => dt_end_tstz_in,
            flg_status_in            => flg_status_in,
            id_prof_reg_in           => id_prof_reg_in,
            id_prof_begin_in         => id_prof_begin_in,
            id_prof_end_in           => id_prof_end_in,
            id_patient_in            => id_patient_in,
            id_transfer_option_in    => id_transfer_option_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            dt_cancel_tstz_in        => dt_cancel_tstz_in,
            notes_cancel_in          => notes_cancel_in,
            id_dep_clin_serv_in      => id_dep_clin_serv_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN transfer_institution%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec transfer_institution%ROWTYPE := rec_in;
    BEGIN
        ins(id_episode_in            => l_rec.id_episode,
            dt_creation_tstz_in      => l_rec.dt_creation_tstz,
            id_institution_origin_in => l_rec.id_institution_origin,
            id_institution_dest_in   => l_rec.id_institution_dest,
            id_transp_entity_in      => l_rec.id_transp_entity,
            notes_in                 => l_rec.notes,
            dt_begin_tstz_in         => l_rec.dt_begin_tstz,
            dt_end_tstz_in           => l_rec.dt_end_tstz,
            flg_status_in            => l_rec.flg_status,
            id_prof_reg_in           => l_rec.id_prof_reg,
            id_prof_begin_in         => l_rec.id_prof_begin,
            id_prof_end_in           => l_rec.id_prof_end,
            id_patient_in            => l_rec.id_patient,
            id_transfer_option_in    => l_rec.id_transfer_option,
            id_prof_cancel_in        => l_rec.id_prof_cancel,
            dt_cancel_tstz_in        => l_rec.dt_cancel_tstz,
            notes_cancel_in          => l_rec.notes_cancel,
            id_dep_clin_serv_in      => l_rec.id_dep_clin_serv,
            create_user_in           => l_rec.create_user,
            create_time_in           => l_rec.create_time,
            create_institution_in    => l_rec.create_institution,
            update_user_in           => l_rec.update_user,
            update_time_in           => l_rec.update_time,
            update_institution_in    => l_rec.update_institution,
            id_cancel_reason_in      => l_rec.id_cancel_reason,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN transfer_institution%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN transfer_institution_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO transfer_institution
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION_ORIGIN _' || indx,
                                                        value_in           => rows_in(indx).id_institution_origin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION_DEST _' || indx,
                                                        value_in           => rows_in(indx).id_institution_dest,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CREATION_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_creation_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TRANSP_ENTITY _' || indx,
                                                        value_in           => rows_in(indx).id_transp_entity,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(indx).notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_BEGIN_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_begin_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_END_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_end_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_REG _' || indx,
                                                        value_in           => rows_in(indx).id_prof_reg,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_BEGIN _' || indx,
                                                        value_in           => rows_in(indx).id_prof_begin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_END _' || indx,
                                                        value_in           => rows_in(indx).id_prof_end,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TRANSFER_OPTION _' || indx,
                                                        value_in           => rows_in(indx).id_transfer_option,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).id_prof_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CANCEL_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_cancel_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).notes_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV _' || indx,
                                                        value_in           => rows_in(indx).id_dep_clin_serv,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_REASON _' || indx,
                                                        value_in           => rows_in(indx).id_cancel_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'TRANSFER_INSTITUTION',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN transfer_institution_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_episode_in             IN transfer_institution.id_episode%TYPE,
        dt_creation_tstz_in       IN transfer_institution.dt_creation_tstz%TYPE,
        id_institution_origin_in  IN transfer_institution.id_institution_origin%TYPE DEFAULT NULL,
        id_institution_origin_nin IN BOOLEAN := TRUE,
        id_institution_dest_in    IN transfer_institution.id_institution_dest%TYPE DEFAULT NULL,
        id_institution_dest_nin   IN BOOLEAN := TRUE,
        id_transp_entity_in       IN transfer_institution.id_transp_entity%TYPE DEFAULT NULL,
        id_transp_entity_nin      IN BOOLEAN := TRUE,
        notes_in                  IN transfer_institution.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        dt_begin_tstz_in          IN transfer_institution.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin         IN BOOLEAN := TRUE,
        dt_end_tstz_in            IN transfer_institution.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin           IN BOOLEAN := TRUE,
        flg_status_in             IN transfer_institution.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_reg_in            IN transfer_institution.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_reg_nin           IN BOOLEAN := TRUE,
        id_prof_begin_in          IN transfer_institution.id_prof_begin%TYPE DEFAULT NULL,
        id_prof_begin_nin         IN BOOLEAN := TRUE,
        id_prof_end_in            IN transfer_institution.id_prof_end%TYPE DEFAULT NULL,
        id_prof_end_nin           IN BOOLEAN := TRUE,
        id_patient_in             IN transfer_institution.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_transfer_option_in     IN transfer_institution.id_transfer_option%TYPE DEFAULT NULL,
        id_transfer_option_nin    IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN transfer_institution.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        dt_cancel_tstz_in         IN transfer_institution.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin        IN BOOLEAN := TRUE,
        notes_cancel_in           IN transfer_institution.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        id_dep_clin_serv_in       IN transfer_institution.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin      IN BOOLEAN := TRUE,
        create_user_in            IN transfer_institution.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN transfer_institution.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN transfer_institution.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN transfer_institution.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN transfer_institution.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN transfer_institution.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN transfer_institution.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_rows_out                table_varchar;
        l_id_institution_origin_n NUMBER(1);
        l_id_institution_dest_n   NUMBER(1);
        l_id_transp_entity_n      NUMBER(1);
        l_notes_n                 NUMBER(1);
        l_dt_begin_tstz_n         NUMBER(1);
        l_dt_end_tstz_n           NUMBER(1);
        l_flg_status_n            NUMBER(1);
        l_id_prof_reg_n           NUMBER(1);
        l_id_prof_begin_n         NUMBER(1);
        l_id_prof_end_n           NUMBER(1);
        l_id_patient_n            NUMBER(1);
        l_id_transfer_option_n    NUMBER(1);
        l_id_prof_cancel_n        NUMBER(1);
        l_dt_cancel_tstz_n        NUMBER(1);
        l_notes_cancel_n          NUMBER(1);
        l_id_dep_clin_serv_n      NUMBER(1);
        l_create_user_n           NUMBER(1);
        l_create_time_n           NUMBER(1);
        l_create_institution_n    NUMBER(1);
        l_update_user_n           NUMBER(1);
        l_update_time_n           NUMBER(1);
        l_update_institution_n    NUMBER(1);
        l_id_cancel_reason_n      NUMBER(1);
    BEGIN
    
        l_id_institution_origin_n := sys.diutil.bool_to_int(id_institution_origin_nin);
        l_id_institution_dest_n   := sys.diutil.bool_to_int(id_institution_dest_nin);
        l_id_transp_entity_n      := sys.diutil.bool_to_int(id_transp_entity_nin);
        l_notes_n                 := sys.diutil.bool_to_int(notes_nin);
        l_dt_begin_tstz_n         := sys.diutil.bool_to_int(dt_begin_tstz_nin);
        l_dt_end_tstz_n           := sys.diutil.bool_to_int(dt_end_tstz_nin);
        l_flg_status_n            := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_reg_n           := sys.diutil.bool_to_int(id_prof_reg_nin);
        l_id_prof_begin_n         := sys.diutil.bool_to_int(id_prof_begin_nin);
        l_id_prof_end_n           := sys.diutil.bool_to_int(id_prof_end_nin);
        l_id_patient_n            := sys.diutil.bool_to_int(id_patient_nin);
        l_id_transfer_option_n    := sys.diutil.bool_to_int(id_transfer_option_nin);
        l_id_prof_cancel_n        := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_dt_cancel_tstz_n        := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_notes_cancel_n          := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_dep_clin_serv_n      := sys.diutil.bool_to_int(id_dep_clin_serv_nin);
        l_create_user_n           := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n           := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    := sys.diutil.bool_to_int(update_institution_nin);
        l_id_cancel_reason_n      := sys.diutil.bool_to_int(id_cancel_reason_nin);
    
        UPDATE transfer_institution
           SET id_institution_origin = decode(l_id_institution_origin_n,
                                              0,
                                              id_institution_origin_in,
                                              nvl(id_institution_origin_in, id_institution_origin)),
               id_institution_dest   = decode(l_id_institution_dest_n,
                                              0,
                                              id_institution_dest_in,
                                              nvl(id_institution_dest_in, id_institution_dest)),
               id_transp_entity      = decode(l_id_transp_entity_n,
                                              0,
                                              id_transp_entity_in,
                                              nvl(id_transp_entity_in, id_transp_entity)),
               notes                 = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               dt_begin_tstz         = decode(l_dt_begin_tstz_n,
                                              0,
                                              dt_begin_tstz_in,
                                              nvl(dt_begin_tstz_in, dt_begin_tstz)),
               dt_end_tstz           = decode(l_dt_end_tstz_n, 0, dt_end_tstz_in, nvl(dt_end_tstz_in, dt_end_tstz)),
               flg_status            = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_prof_reg           = decode(l_id_prof_reg_n, 0, id_prof_reg_in, nvl(id_prof_reg_in, id_prof_reg)),
               id_prof_begin         = decode(l_id_prof_begin_n,
                                              0,
                                              id_prof_begin_in,
                                              nvl(id_prof_begin_in, id_prof_begin)),
               id_prof_end           = decode(l_id_prof_end_n, 0, id_prof_end_in, nvl(id_prof_end_in, id_prof_end)),
               id_patient            = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_transfer_option    = decode(l_id_transfer_option_n,
                                              0,
                                              id_transfer_option_in,
                                              nvl(id_transfer_option_in, id_transfer_option)),
               id_prof_cancel        = decode(l_id_prof_cancel_n,
                                              0,
                                              id_prof_cancel_in,
                                              nvl(id_prof_cancel_in, id_prof_cancel)),
               dt_cancel_tstz        = decode(l_dt_cancel_tstz_n,
                                              0,
                                              dt_cancel_tstz_in,
                                              nvl(dt_cancel_tstz_in, dt_cancel_tstz)),
               notes_cancel          = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               id_dep_clin_serv      = decode(l_id_dep_clin_serv_n,
                                              0,
                                              id_dep_clin_serv_in,
                                              nvl(id_dep_clin_serv_in, id_dep_clin_serv)),
               create_user           = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time           = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution    = decode(l_create_institution_n,
                                              0,
                                              create_institution_in,
                                              nvl(create_institution_in, create_institution)),
               update_user           = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time           = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution    = decode(l_update_institution_n,
                                              0,
                                              update_institution_in,
                                              nvl(update_institution_in, update_institution)),
               id_cancel_reason      = decode(l_id_cancel_reason_n,
                                              0,
                                              id_cancel_reason_in,
                                              nvl(id_cancel_reason_in, id_cancel_reason))
         WHERE id_episode = id_episode_in
           AND dt_creation_tstz = dt_creation_tstz_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'TRANSFER_INSTITUTION');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    IF l_name = 'TI_ICR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'TINST_DCS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV',
                                                        value_in           => id_dep_clin_serv_in);
                    END IF;
                    IF l_name = 'TINST_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'TINST_INSTD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION_DEST',
                                                        value_in           => id_institution_dest_in);
                    END IF;
                    IF l_name = 'TINST_INSTO_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION_ORIGIN',
                                                        value_in           => id_institution_origin_in);
                    END IF;
                    IF l_name = 'TINST_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'TINST_PROFB_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_BEGIN',
                                                        value_in           => id_prof_begin_in);
                    END IF;
                    IF l_name = 'TINST_PROFC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'TINST_PROFE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_END',
                                                        value_in           => id_prof_end_in);
                    END IF;
                    IF l_name = 'TINST_PROFR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_REG',
                                                        value_in           => id_prof_reg_in);
                    END IF;
                    IF l_name = 'TINST_TOPT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TRANSFER_OPTION',
                                                        value_in           => id_transfer_option_in);
                    END IF;
                    IF l_name = 'TINST_TRP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TRANSP_ENTITY',
                                                        value_in           => id_transp_entity_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_episode_in             IN transfer_institution.id_episode%TYPE,
        dt_creation_tstz_in       IN transfer_institution.dt_creation_tstz%TYPE,
        id_institution_origin_in  IN transfer_institution.id_institution_origin%TYPE DEFAULT NULL,
        id_institution_origin_nin IN BOOLEAN := TRUE,
        id_institution_dest_in    IN transfer_institution.id_institution_dest%TYPE DEFAULT NULL,
        id_institution_dest_nin   IN BOOLEAN := TRUE,
        id_transp_entity_in       IN transfer_institution.id_transp_entity%TYPE DEFAULT NULL,
        id_transp_entity_nin      IN BOOLEAN := TRUE,
        notes_in                  IN transfer_institution.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        dt_begin_tstz_in          IN transfer_institution.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin         IN BOOLEAN := TRUE,
        dt_end_tstz_in            IN transfer_institution.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin           IN BOOLEAN := TRUE,
        flg_status_in             IN transfer_institution.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_reg_in            IN transfer_institution.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_reg_nin           IN BOOLEAN := TRUE,
        id_prof_begin_in          IN transfer_institution.id_prof_begin%TYPE DEFAULT NULL,
        id_prof_begin_nin         IN BOOLEAN := TRUE,
        id_prof_end_in            IN transfer_institution.id_prof_end%TYPE DEFAULT NULL,
        id_prof_end_nin           IN BOOLEAN := TRUE,
        id_patient_in             IN transfer_institution.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_transfer_option_in     IN transfer_institution.id_transfer_option%TYPE DEFAULT NULL,
        id_transfer_option_nin    IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN transfer_institution.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        dt_cancel_tstz_in         IN transfer_institution.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin        IN BOOLEAN := TRUE,
        notes_cancel_in           IN transfer_institution.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        id_dep_clin_serv_in       IN transfer_institution.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin      IN BOOLEAN := TRUE,
        create_user_in            IN transfer_institution.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN transfer_institution.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN transfer_institution.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN transfer_institution.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN transfer_institution.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN transfer_institution.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN transfer_institution.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in             => id_episode_in,
            dt_creation_tstz_in       => dt_creation_tstz_in,
            id_institution_origin_in  => id_institution_origin_in,
            id_institution_origin_nin => id_institution_origin_nin,
            id_institution_dest_in    => id_institution_dest_in,
            id_institution_dest_nin   => id_institution_dest_nin,
            id_transp_entity_in       => id_transp_entity_in,
            id_transp_entity_nin      => id_transp_entity_nin,
            notes_in                  => notes_in,
            notes_nin                 => notes_nin,
            dt_begin_tstz_in          => dt_begin_tstz_in,
            dt_begin_tstz_nin         => dt_begin_tstz_nin,
            dt_end_tstz_in            => dt_end_tstz_in,
            dt_end_tstz_nin           => dt_end_tstz_nin,
            flg_status_in             => flg_status_in,
            flg_status_nin            => flg_status_nin,
            id_prof_reg_in            => id_prof_reg_in,
            id_prof_reg_nin           => id_prof_reg_nin,
            id_prof_begin_in          => id_prof_begin_in,
            id_prof_begin_nin         => id_prof_begin_nin,
            id_prof_end_in            => id_prof_end_in,
            id_prof_end_nin           => id_prof_end_nin,
            id_patient_in             => id_patient_in,
            id_patient_nin            => id_patient_nin,
            id_transfer_option_in     => id_transfer_option_in,
            id_transfer_option_nin    => id_transfer_option_nin,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_prof_cancel_nin        => id_prof_cancel_nin,
            dt_cancel_tstz_in         => dt_cancel_tstz_in,
            dt_cancel_tstz_nin        => dt_cancel_tstz_nin,
            notes_cancel_in           => notes_cancel_in,
            notes_cancel_nin          => notes_cancel_nin,
            id_dep_clin_serv_in       => id_dep_clin_serv_in,
            id_dep_clin_serv_nin      => id_dep_clin_serv_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            id_cancel_reason_in       => id_cancel_reason_in,
            id_cancel_reason_nin      => id_cancel_reason_nin,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_institution_origin_in  IN transfer_institution.id_institution_origin%TYPE DEFAULT NULL,
        id_institution_origin_nin IN BOOLEAN := TRUE,
        id_institution_dest_in    IN transfer_institution.id_institution_dest%TYPE DEFAULT NULL,
        id_institution_dest_nin   IN BOOLEAN := TRUE,
        id_transp_entity_in       IN transfer_institution.id_transp_entity%TYPE DEFAULT NULL,
        id_transp_entity_nin      IN BOOLEAN := TRUE,
        notes_in                  IN transfer_institution.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        dt_begin_tstz_in          IN transfer_institution.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin         IN BOOLEAN := TRUE,
        dt_end_tstz_in            IN transfer_institution.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin           IN BOOLEAN := TRUE,
        flg_status_in             IN transfer_institution.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_reg_in            IN transfer_institution.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_reg_nin           IN BOOLEAN := TRUE,
        id_prof_begin_in          IN transfer_institution.id_prof_begin%TYPE DEFAULT NULL,
        id_prof_begin_nin         IN BOOLEAN := TRUE,
        id_prof_end_in            IN transfer_institution.id_prof_end%TYPE DEFAULT NULL,
        id_prof_end_nin           IN BOOLEAN := TRUE,
        id_patient_in             IN transfer_institution.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_transfer_option_in     IN transfer_institution.id_transfer_option%TYPE DEFAULT NULL,
        id_transfer_option_nin    IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN transfer_institution.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        dt_cancel_tstz_in         IN transfer_institution.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin        IN BOOLEAN := TRUE,
        notes_cancel_in           IN transfer_institution.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        id_dep_clin_serv_in       IN transfer_institution.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin      IN BOOLEAN := TRUE,
        create_user_in            IN transfer_institution.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN transfer_institution.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN transfer_institution.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN transfer_institution.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN transfer_institution.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN transfer_institution.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN transfer_institution.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        where_in                  VARCHAR2 DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  IN OUT table_varchar
    ) IS
        l_sql                     VARCHAR2(32767);
        l_rows_out                table_varchar;
        l_id_institution_origin_n NUMBER(1);
        l_id_institution_dest_n   NUMBER(1);
        l_id_transp_entity_n      NUMBER(1);
        l_notes_n                 NUMBER(1);
        l_dt_begin_tstz_n         NUMBER(1);
        l_dt_end_tstz_n           NUMBER(1);
        l_flg_status_n            NUMBER(1);
        l_id_prof_reg_n           NUMBER(1);
        l_id_prof_begin_n         NUMBER(1);
        l_id_prof_end_n           NUMBER(1);
        l_id_patient_n            NUMBER(1);
        l_id_transfer_option_n    NUMBER(1);
        l_id_prof_cancel_n        NUMBER(1);
        l_dt_cancel_tstz_n        NUMBER(1);
        l_notes_cancel_n          NUMBER(1);
        l_id_dep_clin_serv_n      NUMBER(1);
        l_create_user_n           NUMBER(1);
        l_create_time_n           NUMBER(1);
        l_create_institution_n    NUMBER(1);
        l_update_user_n           NUMBER(1);
        l_update_time_n           NUMBER(1);
        l_update_institution_n    NUMBER(1);
        l_id_cancel_reason_n      NUMBER(1);
        id_episode_in             transfer_institution.id_episode%TYPE;
        dt_creation_tstz_in       transfer_institution.dt_creation_tstz%TYPE;
    BEGIN
    
        l_id_institution_origin_n := sys.diutil.bool_to_int(id_institution_origin_nin);
        l_id_institution_dest_n   := sys.diutil.bool_to_int(id_institution_dest_nin);
        l_id_transp_entity_n      := sys.diutil.bool_to_int(id_transp_entity_nin);
        l_notes_n                 := sys.diutil.bool_to_int(notes_nin);
        l_dt_begin_tstz_n         := sys.diutil.bool_to_int(dt_begin_tstz_nin);
        l_dt_end_tstz_n           := sys.diutil.bool_to_int(dt_end_tstz_nin);
        l_flg_status_n            := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_reg_n           := sys.diutil.bool_to_int(id_prof_reg_nin);
        l_id_prof_begin_n         := sys.diutil.bool_to_int(id_prof_begin_nin);
        l_id_prof_end_n           := sys.diutil.bool_to_int(id_prof_end_nin);
        l_id_patient_n            := sys.diutil.bool_to_int(id_patient_nin);
        l_id_transfer_option_n    := sys.diutil.bool_to_int(id_transfer_option_nin);
        l_id_prof_cancel_n        := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_dt_cancel_tstz_n        := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_notes_cancel_n          := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_dep_clin_serv_n      := sys.diutil.bool_to_int(id_dep_clin_serv_nin);
        l_create_user_n           := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n           := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n    := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n           := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n           := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n    := sys.diutil.bool_to_int(update_institution_nin);
        l_id_cancel_reason_n      := sys.diutil.bool_to_int(id_cancel_reason_nin);
    
        l_sql := 'UPDATE TRANSFER_INSTITUTION SET ' || ' ID_INSTITUTION_ORIGIN = decode (' || l_id_institution_origin_n ||
                 ',0,:id_institution_origin_in, NVL (:id_institution_origin_in, ID_INSTITUTION_ORIGIN)) ' || ',' ||
                 ' ID_INSTITUTION_DEST = decode (' || l_id_institution_dest_n ||
                 ',0,:id_institution_dest_in, NVL (:id_institution_dest_in, ID_INSTITUTION_DEST)) ' || ',' ||
                 ' ID_TRANSP_ENTITY = decode (' || l_id_transp_entity_n ||
                 ',0,:id_transp_entity_in, NVL (:id_transp_entity_in, ID_TRANSP_ENTITY)) ' || ',' ||
                 ' NOTES = decode (' || l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' ||
                 ' DT_BEGIN_TSTZ = decode (' || l_dt_begin_tstz_n ||
                 ',0,:dt_begin_tstz_in, NVL (:dt_begin_tstz_in, DT_BEGIN_TSTZ)) ' || ',' || ' DT_END_TSTZ = decode (' ||
                 l_dt_end_tstz_n || ',0,:dt_end_tstz_in, NVL (:dt_end_tstz_in, DT_END_TSTZ)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' ID_PROF_REG = decode (' || l_id_prof_reg_n ||
                 ',0,:id_prof_reg_in, NVL (:id_prof_reg_in, ID_PROF_REG)) ' || ',' || ' ID_PROF_BEGIN = decode (' ||
                 l_id_prof_begin_n || ',0,:id_prof_begin_in, NVL (:id_prof_begin_in, ID_PROF_BEGIN)) ' || ',' ||
                 ' ID_PROF_END = decode (' || l_id_prof_end_n ||
                 ',0,:id_prof_end_in, NVL (:id_prof_end_in, ID_PROF_END)) ' || ',' || ' ID_PATIENT = decode (' ||
                 l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' ID_TRANSFER_OPTION = decode (' || l_id_transfer_option_n ||
                 ',0,:id_transfer_option_in, NVL (:id_transfer_option_in, ID_TRANSFER_OPTION)) ' || ',' ||
                 ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                 ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) ' || ',' ||
                 ' DT_CANCEL_TSTZ = decode (' || l_dt_cancel_tstz_n ||
                 ',0,:dt_cancel_tstz_in, NVL (:dt_cancel_tstz_in, DT_CANCEL_TSTZ)) ' || ',' ||
                 ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                 ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) ' || ',' || ' ID_DEP_CLIN_SERV = decode (' ||
                 l_id_dep_clin_serv_n || ',0,:id_dep_clin_serv_in, NVL (:id_dep_clin_serv_in, ID_DEP_CLIN_SERV)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                 ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_institution_origin_in, id_institution_dest_in, id_transp_entity_in, notes_in, dt_begin_tstz_in, dt_end_tstz_in, flg_status_in, id_prof_reg_in, id_prof_begin_in, id_prof_end_in, id_patient_in, id_transfer_option_in, id_prof_cancel_in, dt_cancel_tstz_in, notes_cancel_in, id_dep_clin_serv_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_cancel_reason_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'TRANSFER_INSTITUTION');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    IF l_name = 'TI_ICR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'TINST_DCS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEP_CLIN_SERV',
                                                        value_in           => id_dep_clin_serv_in);
                    END IF;
                    IF l_name = 'TINST_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'TINST_INSTD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION_DEST',
                                                        value_in           => id_institution_dest_in);
                    END IF;
                    IF l_name = 'TINST_INSTO_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION_ORIGIN',
                                                        value_in           => id_institution_origin_in);
                    END IF;
                    IF l_name = 'TINST_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'TINST_PROFB_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_BEGIN',
                                                        value_in           => id_prof_begin_in);
                    END IF;
                    IF l_name = 'TINST_PROFC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'TINST_PROFE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_END',
                                                        value_in           => id_prof_end_in);
                    END IF;
                    IF l_name = 'TINST_PROFR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_REG',
                                                        value_in           => id_prof_reg_in);
                    END IF;
                    IF l_name = 'TINST_TOPT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TRANSFER_OPTION',
                                                        value_in           => id_transfer_option_in);
                    END IF;
                    IF l_name = 'TINST_TRP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TRANSP_ENTITY',
                                                        value_in           => id_transp_entity_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_institution_origin_in  IN transfer_institution.id_institution_origin%TYPE DEFAULT NULL,
        id_institution_origin_nin IN BOOLEAN := TRUE,
        id_institution_dest_in    IN transfer_institution.id_institution_dest%TYPE DEFAULT NULL,
        id_institution_dest_nin   IN BOOLEAN := TRUE,
        id_transp_entity_in       IN transfer_institution.id_transp_entity%TYPE DEFAULT NULL,
        id_transp_entity_nin      IN BOOLEAN := TRUE,
        notes_in                  IN transfer_institution.notes%TYPE DEFAULT NULL,
        notes_nin                 IN BOOLEAN := TRUE,
        dt_begin_tstz_in          IN transfer_institution.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin         IN BOOLEAN := TRUE,
        dt_end_tstz_in            IN transfer_institution.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin           IN BOOLEAN := TRUE,
        flg_status_in             IN transfer_institution.flg_status%TYPE DEFAULT NULL,
        flg_status_nin            IN BOOLEAN := TRUE,
        id_prof_reg_in            IN transfer_institution.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_reg_nin           IN BOOLEAN := TRUE,
        id_prof_begin_in          IN transfer_institution.id_prof_begin%TYPE DEFAULT NULL,
        id_prof_begin_nin         IN BOOLEAN := TRUE,
        id_prof_end_in            IN transfer_institution.id_prof_end%TYPE DEFAULT NULL,
        id_prof_end_nin           IN BOOLEAN := TRUE,
        id_patient_in             IN transfer_institution.id_patient%TYPE DEFAULT NULL,
        id_patient_nin            IN BOOLEAN := TRUE,
        id_transfer_option_in     IN transfer_institution.id_transfer_option%TYPE DEFAULT NULL,
        id_transfer_option_nin    IN BOOLEAN := TRUE,
        id_prof_cancel_in         IN transfer_institution.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin        IN BOOLEAN := TRUE,
        dt_cancel_tstz_in         IN transfer_institution.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin        IN BOOLEAN := TRUE,
        notes_cancel_in           IN transfer_institution.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin          IN BOOLEAN := TRUE,
        id_dep_clin_serv_in       IN transfer_institution.id_dep_clin_serv%TYPE DEFAULT NULL,
        id_dep_clin_serv_nin      IN BOOLEAN := TRUE,
        create_user_in            IN transfer_institution.create_user%TYPE DEFAULT NULL,
        create_user_nin           IN BOOLEAN := TRUE,
        create_time_in            IN transfer_institution.create_time%TYPE DEFAULT NULL,
        create_time_nin           IN BOOLEAN := TRUE,
        create_institution_in     IN transfer_institution.create_institution%TYPE DEFAULT NULL,
        create_institution_nin    IN BOOLEAN := TRUE,
        update_user_in            IN transfer_institution.update_user%TYPE DEFAULT NULL,
        update_user_nin           IN BOOLEAN := TRUE,
        update_time_in            IN transfer_institution.update_time%TYPE DEFAULT NULL,
        update_time_nin           IN BOOLEAN := TRUE,
        update_institution_in     IN transfer_institution.update_institution%TYPE DEFAULT NULL,
        update_institution_nin    IN BOOLEAN := TRUE,
        id_cancel_reason_in       IN transfer_institution.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin      IN BOOLEAN := TRUE,
        where_in                  VARCHAR2 DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_institution_origin_in  => id_institution_origin_in,
            id_institution_origin_nin => id_institution_origin_nin,
            id_institution_dest_in    => id_institution_dest_in,
            id_institution_dest_nin   => id_institution_dest_nin,
            id_transp_entity_in       => id_transp_entity_in,
            id_transp_entity_nin      => id_transp_entity_nin,
            notes_in                  => notes_in,
            notes_nin                 => notes_nin,
            dt_begin_tstz_in          => dt_begin_tstz_in,
            dt_begin_tstz_nin         => dt_begin_tstz_nin,
            dt_end_tstz_in            => dt_end_tstz_in,
            dt_end_tstz_nin           => dt_end_tstz_nin,
            flg_status_in             => flg_status_in,
            flg_status_nin            => flg_status_nin,
            id_prof_reg_in            => id_prof_reg_in,
            id_prof_reg_nin           => id_prof_reg_nin,
            id_prof_begin_in          => id_prof_begin_in,
            id_prof_begin_nin         => id_prof_begin_nin,
            id_prof_end_in            => id_prof_end_in,
            id_prof_end_nin           => id_prof_end_nin,
            id_patient_in             => id_patient_in,
            id_patient_nin            => id_patient_nin,
            id_transfer_option_in     => id_transfer_option_in,
            id_transfer_option_nin    => id_transfer_option_nin,
            id_prof_cancel_in         => id_prof_cancel_in,
            id_prof_cancel_nin        => id_prof_cancel_nin,
            dt_cancel_tstz_in         => dt_cancel_tstz_in,
            dt_cancel_tstz_nin        => dt_cancel_tstz_nin,
            notes_cancel_in           => notes_cancel_in,
            notes_cancel_nin          => notes_cancel_nin,
            id_dep_clin_serv_in       => id_dep_clin_serv_in,
            id_dep_clin_serv_nin      => id_dep_clin_serv_nin,
            create_user_in            => create_user_in,
            create_user_nin           => create_user_nin,
            create_time_in            => create_time_in,
            create_time_nin           => create_time_nin,
            create_institution_in     => create_institution_in,
            create_institution_nin    => create_institution_nin,
            update_user_in            => update_user_in,
            update_user_nin           => update_user_nin,
            update_time_in            => update_time_in,
            update_time_nin           => update_time_nin,
            update_institution_in     => update_institution_in,
            update_institution_nin    => update_institution_nin,
            id_cancel_reason_in       => id_cancel_reason_in,
            id_cancel_reason_nin      => id_cancel_reason_nin,
            where_in                  => where_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN transfer_institution%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_institution_origin_in => rec_in.id_institution_origin,
            id_institution_dest_in   => rec_in.id_institution_dest,
            dt_creation_tstz_in      => rec_in.dt_creation_tstz,
            id_transp_entity_in      => rec_in.id_transp_entity,
            notes_in                 => rec_in.notes,
            dt_begin_tstz_in         => rec_in.dt_begin_tstz,
            dt_end_tstz_in           => rec_in.dt_end_tstz,
            flg_status_in            => rec_in.flg_status,
            id_prof_reg_in           => rec_in.id_prof_reg,
            id_prof_begin_in         => rec_in.id_prof_begin,
            id_prof_end_in           => rec_in.id_prof_end,
            id_episode_in            => rec_in.id_episode,
            id_patient_in            => rec_in.id_patient,
            id_transfer_option_in    => rec_in.id_transfer_option,
            id_prof_cancel_in        => rec_in.id_prof_cancel,
            dt_cancel_tstz_in        => rec_in.dt_cancel_tstz,
            notes_cancel_in          => rec_in.notes_cancel,
            id_dep_clin_serv_in      => rec_in.id_dep_clin_serv,
            create_user_in           => rec_in.create_user,
            create_time_in           => rec_in.create_time,
            create_institution_in    => rec_in.create_institution,
            update_user_in           => rec_in.update_user,
            update_time_in           => rec_in.update_time,
            update_institution_in    => rec_in.update_institution,
            id_cancel_reason_in      => rec_in.id_cancel_reason
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN transfer_institution%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_institution_origin_in => rec_in.id_institution_origin,
            id_institution_dest_in   => rec_in.id_institution_dest,
            dt_creation_tstz_in      => rec_in.dt_creation_tstz,
            id_transp_entity_in      => rec_in.id_transp_entity,
            notes_in                 => rec_in.notes,
            dt_begin_tstz_in         => rec_in.dt_begin_tstz,
            dt_end_tstz_in           => rec_in.dt_end_tstz,
            flg_status_in            => rec_in.flg_status,
            id_prof_reg_in           => rec_in.id_prof_reg,
            id_prof_begin_in         => rec_in.id_prof_begin,
            id_prof_end_in           => rec_in.id_prof_end,
            id_episode_in            => rec_in.id_episode,
            id_patient_in            => rec_in.id_patient,
            id_transfer_option_in    => rec_in.id_transfer_option,
            id_prof_cancel_in        => rec_in.id_prof_cancel,
            dt_cancel_tstz_in        => rec_in.dt_cancel_tstz,
            notes_cancel_in          => rec_in.notes_cancel,
            id_dep_clin_serv_in      => rec_in.id_dep_clin_serv,
            create_user_in           => rec_in.create_user,
            create_time_in           => rec_in.create_time,
            create_institution_in    => rec_in.create_institution,
            update_user_in           => rec_in.update_user,
            update_time_in           => rec_in.update_time,
            update_institution_in    => rec_in.update_institution,
            id_cancel_reason_in      => rec_in.id_cancel_reason
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_episode_in            IN transfer_institution.id_episode%TYPE,
        dt_creation_tstz_in      IN transfer_institution.dt_creation_tstz%TYPE,
        id_institution_origin_in IN transfer_institution.id_institution_origin%TYPE DEFAULT NULL,
        id_institution_dest_in   IN transfer_institution.id_institution_dest%TYPE DEFAULT NULL,
        id_transp_entity_in      IN transfer_institution.id_transp_entity%TYPE DEFAULT NULL,
        notes_in                 IN transfer_institution.notes%TYPE DEFAULT NULL,
        dt_begin_tstz_in         IN transfer_institution.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in           IN transfer_institution.dt_end_tstz%TYPE DEFAULT NULL,
        flg_status_in            IN transfer_institution.flg_status%TYPE DEFAULT NULL,
        id_prof_reg_in           IN transfer_institution.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_begin_in         IN transfer_institution.id_prof_begin%TYPE DEFAULT NULL,
        id_prof_end_in           IN transfer_institution.id_prof_end%TYPE DEFAULT NULL,
        id_patient_in            IN transfer_institution.id_patient%TYPE DEFAULT NULL,
        id_transfer_option_in    IN transfer_institution.id_transfer_option%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN transfer_institution.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN transfer_institution.dt_cancel_tstz%TYPE DEFAULT NULL,
        notes_cancel_in          IN transfer_institution.notes_cancel%TYPE DEFAULT NULL,
        id_dep_clin_serv_in      IN transfer_institution.id_dep_clin_serv%TYPE DEFAULT NULL,
        create_user_in           IN transfer_institution.create_user%TYPE DEFAULT NULL,
        create_time_in           IN transfer_institution.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN transfer_institution.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN transfer_institution.update_user%TYPE DEFAULT NULL,
        update_time_in           IN transfer_institution.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN transfer_institution.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN transfer_institution.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        upd(id_episode_in            => id_episode_in,
            dt_creation_tstz_in      => dt_creation_tstz_in,
            id_institution_origin_in => id_institution_origin_in,
            id_institution_dest_in   => id_institution_dest_in,
            id_transp_entity_in      => id_transp_entity_in,
            notes_in                 => notes_in,
            dt_begin_tstz_in         => dt_begin_tstz_in,
            dt_end_tstz_in           => dt_end_tstz_in,
            flg_status_in            => flg_status_in,
            id_prof_reg_in           => id_prof_reg_in,
            id_prof_begin_in         => id_prof_begin_in,
            id_prof_end_in           => id_prof_end_in,
            id_patient_in            => id_patient_in,
            id_transfer_option_in    => id_transfer_option_in,
            id_prof_cancel_in        => id_prof_cancel_in,
            dt_cancel_tstz_in        => dt_cancel_tstz_in,
            notes_cancel_in          => notes_cancel_in,
            id_dep_clin_serv_in      => id_dep_clin_serv_in,
            create_user_in           => create_user_in,
            create_time_in           => create_time_in,
            create_institution_in    => create_institution_in,
            update_user_in           => update_user_in,
            update_time_in           => update_time_in,
            update_institution_in    => update_institution_in,
            id_cancel_reason_in      => id_cancel_reason_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_episode_in            => id_episode_in,
                dt_creation_tstz_in      => dt_creation_tstz_in,
                id_institution_origin_in => id_institution_origin_in,
                id_institution_dest_in   => id_institution_dest_in,
                id_transp_entity_in      => id_transp_entity_in,
                notes_in                 => notes_in,
                dt_begin_tstz_in         => dt_begin_tstz_in,
                dt_end_tstz_in           => dt_end_tstz_in,
                flg_status_in            => flg_status_in,
                id_prof_reg_in           => id_prof_reg_in,
                id_prof_begin_in         => id_prof_begin_in,
                id_prof_end_in           => id_prof_end_in,
                id_patient_in            => id_patient_in,
                id_transfer_option_in    => id_transfer_option_in,
                id_prof_cancel_in        => id_prof_cancel_in,
                dt_cancel_tstz_in        => dt_cancel_tstz_in,
                notes_cancel_in          => notes_cancel_in,
                id_dep_clin_serv_in      => id_dep_clin_serv_in,
                create_user_in           => create_user_in,
                create_time_in           => create_time_in,
                create_institution_in    => create_institution_in,
                update_user_in           => update_user_in,
                update_time_in           => update_time_in,
                update_institution_in    => update_institution_in,
                id_cancel_reason_in      => id_cancel_reason_in,
                handle_error_in          => handle_error_in,
                rows_out                 => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_episode_in            IN transfer_institution.id_episode%TYPE,
        dt_creation_tstz_in      IN transfer_institution.dt_creation_tstz%TYPE,
        id_institution_origin_in IN transfer_institution.id_institution_origin%TYPE DEFAULT NULL,
        id_institution_dest_in   IN transfer_institution.id_institution_dest%TYPE DEFAULT NULL,
        id_transp_entity_in      IN transfer_institution.id_transp_entity%TYPE DEFAULT NULL,
        notes_in                 IN transfer_institution.notes%TYPE DEFAULT NULL,
        dt_begin_tstz_in         IN transfer_institution.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in           IN transfer_institution.dt_end_tstz%TYPE DEFAULT NULL,
        flg_status_in            IN transfer_institution.flg_status%TYPE DEFAULT NULL,
        id_prof_reg_in           IN transfer_institution.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_begin_in         IN transfer_institution.id_prof_begin%TYPE DEFAULT NULL,
        id_prof_end_in           IN transfer_institution.id_prof_end%TYPE DEFAULT NULL,
        id_patient_in            IN transfer_institution.id_patient%TYPE DEFAULT NULL,
        id_transfer_option_in    IN transfer_institution.id_transfer_option%TYPE DEFAULT NULL,
        id_prof_cancel_in        IN transfer_institution.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_tstz_in        IN transfer_institution.dt_cancel_tstz%TYPE DEFAULT NULL,
        notes_cancel_in          IN transfer_institution.notes_cancel%TYPE DEFAULT NULL,
        id_dep_clin_serv_in      IN transfer_institution.id_dep_clin_serv%TYPE DEFAULT NULL,
        create_user_in           IN transfer_institution.create_user%TYPE DEFAULT NULL,
        create_time_in           IN transfer_institution.create_time%TYPE DEFAULT NULL,
        create_institution_in    IN transfer_institution.create_institution%TYPE DEFAULT NULL,
        update_user_in           IN transfer_institution.update_user%TYPE DEFAULT NULL,
        update_time_in           IN transfer_institution.update_time%TYPE DEFAULT NULL,
        update_institution_in    IN transfer_institution.update_institution%TYPE DEFAULT NULL,
        id_cancel_reason_in      IN transfer_institution.id_cancel_reason%TYPE DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_episode_in,
                dt_creation_tstz_in,
                id_institution_origin_in,
                id_institution_dest_in,
                id_transp_entity_in,
                notes_in,
                dt_begin_tstz_in,
                dt_end_tstz_in,
                flg_status_in,
                id_prof_reg_in,
                id_prof_begin_in,
                id_prof_end_in,
                id_patient_in,
                id_transfer_option_in,
                id_prof_cancel_in,
                dt_cancel_tstz_in,
                notes_cancel_in,
                id_dep_clin_serv_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_cancel_reason_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN transfer_institution_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_institution_origin id_institution_origin_cc;
        l_id_institution_dest   id_institution_dest_cc;
        l_dt_creation_tstz      dt_creation_tstz_cc;
        l_id_transp_entity      id_transp_entity_cc;
        l_notes                 notes_cc;
        l_dt_begin_tstz         dt_begin_tstz_cc;
        l_dt_end_tstz           dt_end_tstz_cc;
        l_flg_status            flg_status_cc;
        l_id_prof_reg           id_prof_reg_cc;
        l_id_prof_begin         id_prof_begin_cc;
        l_id_prof_end           id_prof_end_cc;
        l_id_episode            id_episode_cc;
        l_id_patient            id_patient_cc;
        l_id_transfer_option    id_transfer_option_cc;
        l_id_prof_cancel        id_prof_cancel_cc;
        l_dt_cancel_tstz        dt_cancel_tstz_cc;
        l_notes_cancel          notes_cancel_cc;
        l_id_dep_clin_serv      id_dep_clin_serv_cc;
        l_create_user           create_user_cc;
        l_create_time           create_time_cc;
        l_create_institution    create_institution_cc;
        l_update_user           update_user_cc;
        l_update_time           update_time_cc;
        l_update_institution    update_institution_cc;
        l_id_cancel_reason      id_cancel_reason_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_institution_origin(i) := col_in(i).id_institution_origin;
            l_id_institution_dest(i) := col_in(i).id_institution_dest;
            l_dt_creation_tstz(i) := col_in(i).dt_creation_tstz;
            l_id_transp_entity(i) := col_in(i).id_transp_entity;
            l_notes(i) := col_in(i).notes;
            l_dt_begin_tstz(i) := col_in(i).dt_begin_tstz;
            l_dt_end_tstz(i) := col_in(i).dt_end_tstz;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_prof_reg(i) := col_in(i).id_prof_reg;
            l_id_prof_begin(i) := col_in(i).id_prof_begin;
            l_id_prof_end(i) := col_in(i).id_prof_end;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_transfer_option(i) := col_in(i).id_transfer_option;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_dt_cancel_tstz(i) := col_in(i).dt_cancel_tstz;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_id_dep_clin_serv(i) := col_in(i).id_dep_clin_serv;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE transfer_institution
                   SET id_institution_origin = nvl(l_id_institution_origin(i), id_institution_origin),
                       id_institution_dest   = nvl(l_id_institution_dest(i), id_institution_dest),
                       id_transp_entity      = nvl(l_id_transp_entity(i), id_transp_entity),
                       notes                 = nvl(l_notes(i), notes),
                       dt_begin_tstz         = nvl(l_dt_begin_tstz(i), dt_begin_tstz),
                       dt_end_tstz           = nvl(l_dt_end_tstz(i), dt_end_tstz),
                       flg_status            = nvl(l_flg_status(i), flg_status),
                       id_prof_reg           = nvl(l_id_prof_reg(i), id_prof_reg),
                       id_prof_begin         = nvl(l_id_prof_begin(i), id_prof_begin),
                       id_prof_end           = nvl(l_id_prof_end(i), id_prof_end),
                       id_patient            = nvl(l_id_patient(i), id_patient),
                       id_transfer_option    = nvl(l_id_transfer_option(i), id_transfer_option),
                       id_prof_cancel        = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       dt_cancel_tstz        = nvl(l_dt_cancel_tstz(i), dt_cancel_tstz),
                       notes_cancel          = nvl(l_notes_cancel(i), notes_cancel),
                       id_dep_clin_serv      = nvl(l_id_dep_clin_serv(i), id_dep_clin_serv),
                       create_user           = nvl(l_create_user(i), create_user),
                       create_time           = nvl(l_create_time(i), create_time),
                       create_institution    = nvl(l_create_institution(i), create_institution),
                       update_user           = nvl(l_update_user(i), update_user),
                       update_time           = nvl(l_update_time(i), update_time),
                       update_institution    = nvl(l_update_institution(i), update_institution),
                       id_cancel_reason      = nvl(l_id_cancel_reason(i), id_cancel_reason)
                 WHERE id_episode = l_id_episode(i)
                   AND dt_creation_tstz = l_dt_creation_tstz(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE transfer_institution
                   SET id_institution_origin = l_id_institution_origin(i),
                       id_institution_dest   = l_id_institution_dest(i),
                       id_transp_entity      = l_id_transp_entity(i),
                       notes                 = l_notes(i),
                       dt_begin_tstz         = l_dt_begin_tstz(i),
                       dt_end_tstz           = l_dt_end_tstz(i),
                       flg_status            = l_flg_status(i),
                       id_prof_reg           = l_id_prof_reg(i),
                       id_prof_begin         = l_id_prof_begin(i),
                       id_prof_end           = l_id_prof_end(i),
                       id_patient            = l_id_patient(i),
                       id_transfer_option    = l_id_transfer_option(i),
                       id_prof_cancel        = l_id_prof_cancel(i),
                       dt_cancel_tstz        = l_dt_cancel_tstz(i),
                       notes_cancel          = l_notes_cancel(i),
                       id_dep_clin_serv      = l_id_dep_clin_serv(i),
                       create_user           = l_create_user(i),
                       create_time           = l_create_time(i),
                       create_institution    = l_create_institution(i),
                       update_user           = l_update_user(i),
                       update_time           = l_update_time(i),
                       update_institution    = l_update_institution(i),
                       id_cancel_reason      = l_id_cancel_reason(i)
                 WHERE id_episode = l_id_episode(i)
                   AND dt_creation_tstz = l_dt_creation_tstz(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN transfer_institution_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE TRANSFER_INSTITUTION
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE TRANSFER_INSTITUTION
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE TRANSFER_INSTITUTION set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE TRANSFER_INSTITUTION set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_episode_in       IN transfer_institution.id_episode%TYPE,
        dt_creation_tstz_in IN transfer_institution.dt_creation_tstz%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM transfer_institution
         WHERE id_episode = id_episode_in
           AND dt_creation_tstz = dt_creation_tstz_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_episode_in       IN transfer_institution.id_episode%TYPE,
        dt_creation_tstz_in IN transfer_institution.dt_creation_tstz%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_episode_in       => id_episode_in,
            dt_creation_tstz_in => dt_creation_tstz_in,
            handle_error_in     => handle_error_in,
            rows_out            => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_EPISODE
    PROCEDURE del_id_episode
    (
        id_episode_in   IN transfer_institution.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM transfer_institution
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_episode;

    -- Delete all rows for primary key column DT_CREATION_TSTZ
    PROCEDURE del_dt_creation_tstz
    (
        dt_creation_tstz_in IN transfer_institution.dt_creation_tstz%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM transfer_institution
         WHERE dt_creation_tstz = dt_creation_tstz_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_dt_creation_tstz;

    -- Delete all rows for primary key column ID_EPISODE
    PROCEDURE del_id_episode
    (
        id_episode_in   IN transfer_institution.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_episode(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_id_episode;

    -- Delete all rows for primary key column DT_CREATION_TSTZ
    PROCEDURE del_dt_creation_tstz
    (
        dt_creation_tstz_in IN transfer_institution.dt_creation_tstz%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dt_creation_tstz(dt_creation_tstz_in => dt_creation_tstz_in,
                             handle_error_in     => handle_error_in,
                             rows_out            => rows_out);
    END del_dt_creation_tstz;

    PROCEDURE del_ti_icr_fk
    (
        id_cancel_reason_in IN transfer_institution.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM transfer_institution
         WHERE id_cancel_reason = del_ti_icr_fk.id_cancel_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ti_icr_fk;

    PROCEDURE del_ti_icr_fk
    (
        id_cancel_reason_in IN transfer_institution.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ti_icr_fk(id_cancel_reason_in => id_cancel_reason_in,
                      handle_error_in     => handle_error_in,
                      rows_out            => rows_out);
    END del_ti_icr_fk;

    PROCEDURE del_tinst_dcs_fk
    (
        id_dep_clin_serv_in IN transfer_institution.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM transfer_institution
         WHERE id_dep_clin_serv = del_tinst_dcs_fk.id_dep_clin_serv_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_tinst_dcs_fk;

    PROCEDURE del_tinst_dcs_fk
    (
        id_dep_clin_serv_in IN transfer_institution.id_dep_clin_serv%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_tinst_dcs_fk(id_dep_clin_serv_in => id_dep_clin_serv_in,
                         handle_error_in     => handle_error_in,
                         rows_out            => rows_out);
    END del_tinst_dcs_fk;

    PROCEDURE del_tinst_epis_fk
    (
        id_episode_in   IN transfer_institution.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM transfer_institution
         WHERE id_episode = del_tinst_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_tinst_epis_fk;

    PROCEDURE del_tinst_epis_fk
    (
        id_episode_in   IN transfer_institution.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_tinst_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_tinst_epis_fk;

    PROCEDURE del_tinst_instd_fk
    (
        id_institution_dest_in IN transfer_institution.id_institution_dest%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM transfer_institution
         WHERE id_institution_dest = del_tinst_instd_fk.id_institution_dest_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_tinst_instd_fk;

    PROCEDURE del_tinst_instd_fk
    (
        id_institution_dest_in IN transfer_institution.id_institution_dest%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_tinst_instd_fk(id_institution_dest_in => id_institution_dest_in,
                           handle_error_in        => handle_error_in,
                           rows_out               => rows_out);
    END del_tinst_instd_fk;

    PROCEDURE del_tinst_insto_fk
    (
        id_institution_origin_in IN transfer_institution.id_institution_origin%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM transfer_institution
         WHERE id_institution_origin = del_tinst_insto_fk.id_institution_origin_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_tinst_insto_fk;

    PROCEDURE del_tinst_insto_fk
    (
        id_institution_origin_in IN transfer_institution.id_institution_origin%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_tinst_insto_fk(id_institution_origin_in => id_institution_origin_in,
                           handle_error_in          => handle_error_in,
                           rows_out                 => rows_out);
    END del_tinst_insto_fk;

    PROCEDURE del_tinst_pat_fk
    (
        id_patient_in   IN transfer_institution.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM transfer_institution
         WHERE id_patient = del_tinst_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_tinst_pat_fk;

    PROCEDURE del_tinst_pat_fk
    (
        id_patient_in   IN transfer_institution.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_tinst_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_tinst_pat_fk;

    PROCEDURE del_tinst_profb_fk
    (
        id_prof_begin_in IN transfer_institution.id_prof_begin%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM transfer_institution
         WHERE id_prof_begin = del_tinst_profb_fk.id_prof_begin_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_tinst_profb_fk;

    PROCEDURE del_tinst_profb_fk
    (
        id_prof_begin_in IN transfer_institution.id_prof_begin%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_tinst_profb_fk(id_prof_begin_in => id_prof_begin_in,
                           handle_error_in  => handle_error_in,
                           rows_out         => rows_out);
    END del_tinst_profb_fk;

    PROCEDURE del_tinst_profc_fk
    (
        id_prof_cancel_in IN transfer_institution.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM transfer_institution
         WHERE id_prof_cancel = del_tinst_profc_fk.id_prof_cancel_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_tinst_profc_fk;

    PROCEDURE del_tinst_profc_fk
    (
        id_prof_cancel_in IN transfer_institution.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_tinst_profc_fk(id_prof_cancel_in => id_prof_cancel_in,
                           handle_error_in   => handle_error_in,
                           rows_out          => rows_out);
    END del_tinst_profc_fk;

    PROCEDURE del_tinst_profe_fk
    (
        id_prof_end_in  IN transfer_institution.id_prof_end%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM transfer_institution
         WHERE id_prof_end = del_tinst_profe_fk.id_prof_end_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_tinst_profe_fk;

    PROCEDURE del_tinst_profe_fk
    (
        id_prof_end_in  IN transfer_institution.id_prof_end%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_tinst_profe_fk(id_prof_end_in => id_prof_end_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_tinst_profe_fk;

    PROCEDURE del_tinst_profr_fk
    (
        id_prof_reg_in  IN transfer_institution.id_prof_reg%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM transfer_institution
         WHERE id_prof_reg = del_tinst_profr_fk.id_prof_reg_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_tinst_profr_fk;

    PROCEDURE del_tinst_profr_fk
    (
        id_prof_reg_in  IN transfer_institution.id_prof_reg%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_tinst_profr_fk(id_prof_reg_in => id_prof_reg_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_tinst_profr_fk;

    PROCEDURE del_tinst_topt_fk
    (
        id_transfer_option_in IN transfer_institution.id_transfer_option%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM transfer_institution
         WHERE id_transfer_option = del_tinst_topt_fk.id_transfer_option_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_tinst_topt_fk;

    PROCEDURE del_tinst_topt_fk
    (
        id_transfer_option_in IN transfer_institution.id_transfer_option%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_tinst_topt_fk(id_transfer_option_in => id_transfer_option_in,
                          handle_error_in       => handle_error_in,
                          rows_out              => rows_out);
    END del_tinst_topt_fk;

    PROCEDURE del_tinst_trp_fk
    (
        id_transp_entity_in IN transfer_institution.id_transp_entity%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM transfer_institution
         WHERE id_transp_entity = del_tinst_trp_fk.id_transp_entity_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_tinst_trp_fk;

    PROCEDURE del_tinst_trp_fk
    (
        id_transp_entity_in IN transfer_institution.id_transp_entity%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_tinst_trp_fk(id_transp_entity_in => id_transp_entity_in,
                         handle_error_in     => handle_error_in,
                         rows_out            => rows_out);
    END del_tinst_trp_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM TRANSFER_INSTITUTION';
        ELSE
            RETURN 'DELETE FROM TRANSFER_INSTITUTION WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'TRANSFER_INSTITUTION');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'TRANSFER_INSTITUTION');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(transfer_institution_inout IN OUT transfer_institution%ROWTYPE) IS
    BEGIN
        transfer_institution_inout.id_institution_origin := NULL;
        transfer_institution_inout.id_institution_dest   := NULL;
        transfer_institution_inout.dt_creation_tstz      := NULL;
        transfer_institution_inout.id_transp_entity      := NULL;
        transfer_institution_inout.notes                 := NULL;
        transfer_institution_inout.dt_begin_tstz         := NULL;
        transfer_institution_inout.dt_end_tstz           := NULL;
        transfer_institution_inout.flg_status            := NULL;
        transfer_institution_inout.id_prof_reg           := NULL;
        transfer_institution_inout.id_prof_begin         := NULL;
        transfer_institution_inout.id_prof_end           := NULL;
        transfer_institution_inout.id_episode            := NULL;
        transfer_institution_inout.id_patient            := NULL;
        transfer_institution_inout.id_transfer_option    := NULL;
        transfer_institution_inout.id_prof_cancel        := NULL;
        transfer_institution_inout.dt_cancel_tstz        := NULL;
        transfer_institution_inout.notes_cancel          := NULL;
        transfer_institution_inout.id_dep_clin_serv      := NULL;
        transfer_institution_inout.create_user           := NULL;
        transfer_institution_inout.create_time           := NULL;
        transfer_institution_inout.create_institution    := NULL;
        transfer_institution_inout.update_user           := NULL;
        transfer_institution_inout.update_time           := NULL;
        transfer_institution_inout.update_institution    := NULL;
        transfer_institution_inout.id_cancel_reason      := NULL;
    END initrec;

    FUNCTION initrec RETURN transfer_institution%ROWTYPE IS
        l_transfer_institution transfer_institution%ROWTYPE;
    BEGIN
        RETURN l_transfer_institution;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN transfer_institution_tc IS
        data transfer_institution_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM transfer_institution
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN transfer_institution_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data transfer_institution_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_transfer_institution;
/
