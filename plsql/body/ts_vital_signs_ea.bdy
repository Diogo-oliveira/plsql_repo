/*-- Last Change Revision: $Rev: 2028414 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:37 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_vital_signs_ea
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Agosto 18, 2009 11:25:41
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_vital_sign_read_in   IN vital_signs_ea.id_vital_sign_read%TYPE,
        id_vital_sign_in        IN vital_signs_ea.id_vital_sign%TYPE DEFAULT NULL,
        id_vital_sign_desc_in   IN vital_signs_ea.id_vital_sign_desc%TYPE DEFAULT NULL,
        value_in                IN vital_signs_ea.value%TYPE DEFAULT NULL,
        id_unit_measure_in      IN vital_signs_ea.id_unit_measure%TYPE DEFAULT NULL,
        dt_vital_sign_read_in   IN vital_signs_ea.dt_vital_sign_read%TYPE DEFAULT NULL,
        flg_pain_in             IN vital_signs_ea.flg_pain%TYPE DEFAULT NULL,
        id_prof_read_in         IN vital_signs_ea.id_prof_read%TYPE DEFAULT NULL,
        id_prof_cancel_in       IN vital_signs_ea.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in         IN vital_signs_ea.notes_cancel%TYPE DEFAULT NULL,
        flg_state_in            IN vital_signs_ea.flg_state%TYPE DEFAULT NULL,
        dt_cancel_in            IN vital_signs_ea.dt_cancel%TYPE DEFAULT NULL,
        flg_available_in        IN vital_signs_ea.flg_available%TYPE DEFAULT NULL,
        id_institution_read_in  IN vital_signs_ea.id_institution_read%TYPE DEFAULT NULL,
        flg_status_epis_in      IN vital_signs_ea.flg_status_epis%TYPE DEFAULT NULL,
        id_visit_in             IN vital_signs_ea.id_visit%TYPE DEFAULT NULL,
        id_episode_in           IN vital_signs_ea.id_episode%TYPE DEFAULT NULL,
        id_patient_in           IN vital_signs_ea.id_patient%TYPE DEFAULT NULL,
        relation_domain_in      IN vital_signs_ea.relation_domain%TYPE DEFAULT NULL,
        id_epis_triage_in       IN vital_signs_ea.id_epis_triage%TYPE DEFAULT NULL,
        dt_dg_last_update_in    IN vital_signs_ea.dt_dg_last_update%TYPE DEFAULT current_timestamp,
        create_user_in          IN vital_signs_ea.create_user%TYPE DEFAULT NULL,
        create_time_in          IN vital_signs_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN vital_signs_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN vital_signs_ea.update_user%TYPE DEFAULT NULL,
        update_time_in          IN vital_signs_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN vital_signs_ea.update_institution%TYPE DEFAULT NULL,
        id_vs_scales_element_in IN vital_signs_ea.id_vs_scales_element%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO vital_signs_ea
            (id_vital_sign,
             id_vital_sign_read,
             id_vital_sign_desc,
             VALUE,
             id_unit_measure,
             dt_vital_sign_read,
             flg_pain,
             id_prof_read,
             id_prof_cancel,
             notes_cancel,
             flg_state,
             dt_cancel,
             flg_available,
             id_institution_read,
             flg_status_epis,
             id_visit,
             id_episode,
             id_patient,
             relation_domain,
             id_epis_triage,
             dt_dg_last_update,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_vs_scales_element)
        VALUES
            (id_vital_sign_in,
             id_vital_sign_read_in,
             id_vital_sign_desc_in,
             value_in,
             id_unit_measure_in,
             dt_vital_sign_read_in,
             flg_pain_in,
             id_prof_read_in,
             id_prof_cancel_in,
             notes_cancel_in,
             flg_state_in,
             dt_cancel_in,
             flg_available_in,
             id_institution_read_in,
             flg_status_epis_in,
             id_visit_in,
             id_episode_in,
             id_patient_in,
             relation_domain_in,
             id_epis_triage_in,
             dt_dg_last_update_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_vs_scales_element_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'VITAL_SIGNS_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGNS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGNS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_vital_sign_read_in   IN vital_signs_ea.id_vital_sign_read%TYPE,
        id_vital_sign_in        IN vital_signs_ea.id_vital_sign%TYPE DEFAULT NULL,
        id_vital_sign_desc_in   IN vital_signs_ea.id_vital_sign_desc%TYPE DEFAULT NULL,
        value_in                IN vital_signs_ea.value%TYPE DEFAULT NULL,
        id_unit_measure_in      IN vital_signs_ea.id_unit_measure%TYPE DEFAULT NULL,
        dt_vital_sign_read_in   IN vital_signs_ea.dt_vital_sign_read%TYPE DEFAULT NULL,
        flg_pain_in             IN vital_signs_ea.flg_pain%TYPE DEFAULT NULL,
        id_prof_read_in         IN vital_signs_ea.id_prof_read%TYPE DEFAULT NULL,
        id_prof_cancel_in       IN vital_signs_ea.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in         IN vital_signs_ea.notes_cancel%TYPE DEFAULT NULL,
        flg_state_in            IN vital_signs_ea.flg_state%TYPE DEFAULT NULL,
        dt_cancel_in            IN vital_signs_ea.dt_cancel%TYPE DEFAULT NULL,
        flg_available_in        IN vital_signs_ea.flg_available%TYPE DEFAULT NULL,
        id_institution_read_in  IN vital_signs_ea.id_institution_read%TYPE DEFAULT NULL,
        flg_status_epis_in      IN vital_signs_ea.flg_status_epis%TYPE DEFAULT NULL,
        id_visit_in             IN vital_signs_ea.id_visit%TYPE DEFAULT NULL,
        id_episode_in           IN vital_signs_ea.id_episode%TYPE DEFAULT NULL,
        id_patient_in           IN vital_signs_ea.id_patient%TYPE DEFAULT NULL,
        relation_domain_in      IN vital_signs_ea.relation_domain%TYPE DEFAULT NULL,
        id_epis_triage_in       IN vital_signs_ea.id_epis_triage%TYPE DEFAULT NULL,
        dt_dg_last_update_in    IN vital_signs_ea.dt_dg_last_update%TYPE DEFAULT current_timestamp,
        create_user_in          IN vital_signs_ea.create_user%TYPE DEFAULT NULL,
        create_time_in          IN vital_signs_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN vital_signs_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN vital_signs_ea.update_user%TYPE DEFAULT NULL,
        update_time_in          IN vital_signs_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN vital_signs_ea.update_institution%TYPE DEFAULT NULL,
        id_vs_scales_element_in IN vital_signs_ea.id_vs_scales_element%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_vital_sign_read_in   => id_vital_sign_read_in,
            id_vital_sign_in        => id_vital_sign_in,
            id_vital_sign_desc_in   => id_vital_sign_desc_in,
            value_in                => value_in,
            id_unit_measure_in      => id_unit_measure_in,
            dt_vital_sign_read_in   => dt_vital_sign_read_in,
            flg_pain_in             => flg_pain_in,
            id_prof_read_in         => id_prof_read_in,
            id_prof_cancel_in       => id_prof_cancel_in,
            notes_cancel_in         => notes_cancel_in,
            flg_state_in            => flg_state_in,
            dt_cancel_in            => dt_cancel_in,
            flg_available_in        => flg_available_in,
            id_institution_read_in  => id_institution_read_in,
            flg_status_epis_in      => flg_status_epis_in,
            id_visit_in             => id_visit_in,
            id_episode_in           => id_episode_in,
            id_patient_in           => id_patient_in,
            relation_domain_in      => relation_domain_in,
            id_epis_triage_in       => id_epis_triage_in,
            dt_dg_last_update_in    => dt_dg_last_update_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            id_vs_scales_element_in => id_vs_scales_element_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN vital_signs_ea%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec vital_signs_ea%ROWTYPE := rec_in;
    BEGIN
        ins(id_vital_sign_read_in   => l_rec.id_vital_sign_read,
            id_vital_sign_in        => l_rec.id_vital_sign,
            id_vital_sign_desc_in   => l_rec.id_vital_sign_desc,
            value_in                => l_rec.value,
            id_unit_measure_in      => l_rec.id_unit_measure,
            dt_vital_sign_read_in   => l_rec.dt_vital_sign_read,
            flg_pain_in             => l_rec.flg_pain,
            id_prof_read_in         => l_rec.id_prof_read,
            id_prof_cancel_in       => l_rec.id_prof_cancel,
            notes_cancel_in         => l_rec.notes_cancel,
            flg_state_in            => l_rec.flg_state,
            dt_cancel_in            => l_rec.dt_cancel,
            flg_available_in        => l_rec.flg_available,
            id_institution_read_in  => l_rec.id_institution_read,
            flg_status_epis_in      => l_rec.flg_status_epis,
            id_visit_in             => l_rec.id_visit,
            id_episode_in           => l_rec.id_episode,
            id_patient_in           => l_rec.id_patient,
            relation_domain_in      => l_rec.relation_domain,
            id_epis_triage_in       => l_rec.id_epis_triage,
            dt_dg_last_update_in    => l_rec.dt_dg_last_update,
            create_user_in          => l_rec.create_user,
            create_time_in          => l_rec.create_time,
            create_institution_in   => l_rec.create_institution,
            update_user_in          => l_rec.update_user,
            update_time_in          => l_rec.update_time,
            update_institution_in   => l_rec.update_institution,
            id_vs_scales_element_in => l_rec.id_vs_scales_element,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN vital_signs_ea%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN vital_signs_ea_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO vital_signs_ea
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VITAL_SIGN _' || indx,
                                                        value_in           => rows_in(indx).id_vital_sign,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VITAL_SIGN_READ _' || indx,
                                                        value_in           => rows_in(indx).id_vital_sign_read,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VITAL_SIGN_DESC _' || indx,
                                                        value_in           => rows_in(indx).id_vital_sign_desc,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'VALUE _' || indx,
                                                        value_in           => rows_in(indx).value,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_UNIT_MEASURE _' || indx,
                                                        value_in           => rows_in(indx).id_unit_measure,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_VITAL_SIGN_READ _' || indx,
                                                        value_in           => rows_in(indx).dt_vital_sign_read,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_PAIN _' || indx,
                                                        value_in           => rows_in(indx).flg_pain,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_READ _' || indx,
                                                        value_in           => rows_in(indx).id_prof_read,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).id_prof_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).notes_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATE _' || indx,
                                                        value_in           => rows_in(indx).flg_state,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).dt_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_AVAILABLE _' || indx,
                                                        value_in           => rows_in(indx).flg_available,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION_READ _' || indx,
                                                        value_in           => rows_in(indx).id_institution_read,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS_EPIS _' || indx,
                                                        value_in           => rows_in(indx).flg_status_epis,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VISIT _' || indx,
                                                        value_in           => rows_in(indx).id_visit,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'RELATION_DOMAIN _' || indx,
                                                        value_in           => rows_in(indx).relation_domain,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_TRIAGE _' || indx,
                                                        value_in           => rows_in(indx).id_epis_triage,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_DG_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(indx).dt_dg_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VS_SCALES_ELEMENT _' || indx,
                                                        value_in           => rows_in(indx).id_vs_scales_element,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'VITAL_SIGNS_EA',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN vital_signs_ea_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_vital_sign_read_in    IN vital_signs_ea.id_vital_sign_read%TYPE,
        id_vital_sign_in         IN vital_signs_ea.id_vital_sign%TYPE DEFAULT NULL,
        id_vital_sign_nin        IN BOOLEAN := TRUE,
        id_vital_sign_desc_in    IN vital_signs_ea.id_vital_sign_desc%TYPE DEFAULT NULL,
        id_vital_sign_desc_nin   IN BOOLEAN := TRUE,
        value_in                 IN vital_signs_ea.value%TYPE DEFAULT NULL,
        value_nin                IN BOOLEAN := TRUE,
        id_unit_measure_in       IN vital_signs_ea.id_unit_measure%TYPE DEFAULT NULL,
        id_unit_measure_nin      IN BOOLEAN := TRUE,
        dt_vital_sign_read_in    IN vital_signs_ea.dt_vital_sign_read%TYPE DEFAULT NULL,
        dt_vital_sign_read_nin   IN BOOLEAN := TRUE,
        flg_pain_in              IN vital_signs_ea.flg_pain%TYPE DEFAULT NULL,
        flg_pain_nin             IN BOOLEAN := TRUE,
        id_prof_read_in          IN vital_signs_ea.id_prof_read%TYPE DEFAULT NULL,
        id_prof_read_nin         IN BOOLEAN := TRUE,
        id_prof_cancel_in        IN vital_signs_ea.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin       IN BOOLEAN := TRUE,
        notes_cancel_in          IN vital_signs_ea.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin         IN BOOLEAN := TRUE,
        flg_state_in             IN vital_signs_ea.flg_state%TYPE DEFAULT NULL,
        flg_state_nin            IN BOOLEAN := TRUE,
        dt_cancel_in             IN vital_signs_ea.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin            IN BOOLEAN := TRUE,
        flg_available_in         IN vital_signs_ea.flg_available%TYPE DEFAULT NULL,
        flg_available_nin        IN BOOLEAN := TRUE,
        id_institution_read_in   IN vital_signs_ea.id_institution_read%TYPE DEFAULT NULL,
        id_institution_read_nin  IN BOOLEAN := TRUE,
        flg_status_epis_in       IN vital_signs_ea.flg_status_epis%TYPE DEFAULT NULL,
        flg_status_epis_nin      IN BOOLEAN := TRUE,
        id_visit_in              IN vital_signs_ea.id_visit%TYPE DEFAULT NULL,
        id_visit_nin             IN BOOLEAN := TRUE,
        id_episode_in            IN vital_signs_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin           IN BOOLEAN := TRUE,
        id_patient_in            IN vital_signs_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin           IN BOOLEAN := TRUE,
        relation_domain_in       IN vital_signs_ea.relation_domain%TYPE DEFAULT NULL,
        relation_domain_nin      IN BOOLEAN := TRUE,
        id_epis_triage_in        IN vital_signs_ea.id_epis_triage%TYPE DEFAULT NULL,
        id_epis_triage_nin       IN BOOLEAN := TRUE,
        dt_dg_last_update_in     IN vital_signs_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin    IN BOOLEAN := TRUE,
        create_user_in           IN vital_signs_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN vital_signs_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN vital_signs_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN vital_signs_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN vital_signs_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN vital_signs_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        id_vs_scales_element_in  IN vital_signs_ea.id_vs_scales_element%TYPE DEFAULT NULL,
        id_vs_scales_element_nin IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    ) IS
        l_rows_out               table_varchar;
        l_id_vital_sign_n        NUMBER(1);
        l_id_vital_sign_desc_n   NUMBER(1);
        l_value_n                NUMBER(1);
        l_id_unit_measure_n      NUMBER(1);
        l_dt_vital_sign_read_n   NUMBER(1);
        l_flg_pain_n             NUMBER(1);
        l_id_prof_read_n         NUMBER(1);
        l_id_prof_cancel_n       NUMBER(1);
        l_notes_cancel_n         NUMBER(1);
        l_flg_state_n            NUMBER(1);
        l_dt_cancel_n            NUMBER(1);
        l_flg_available_n        NUMBER(1);
        l_id_institution_read_n  NUMBER(1);
        l_flg_status_epis_n      NUMBER(1);
        l_id_visit_n             NUMBER(1);
        l_id_episode_n           NUMBER(1);
        l_id_patient_n           NUMBER(1);
        l_relation_domain_n      NUMBER(1);
        l_id_epis_triage_n       NUMBER(1);
        l_dt_dg_last_update_n    NUMBER(1);
        l_create_user_n          NUMBER(1);
        l_create_time_n          NUMBER(1);
        l_create_institution_n   NUMBER(1);
        l_update_user_n          NUMBER(1);
        l_update_time_n          NUMBER(1);
        l_update_institution_n   NUMBER(1);
        l_id_vs_scales_element_n NUMBER(1);
    BEGIN
    
        l_id_vital_sign_n        := sys.diutil.bool_to_int(id_vital_sign_nin);
        l_id_vital_sign_desc_n   := sys.diutil.bool_to_int(id_vital_sign_desc_nin);
        l_value_n                := sys.diutil.bool_to_int(value_nin);
        l_id_unit_measure_n      := sys.diutil.bool_to_int(id_unit_measure_nin);
        l_dt_vital_sign_read_n   := sys.diutil.bool_to_int(dt_vital_sign_read_nin);
        l_flg_pain_n             := sys.diutil.bool_to_int(flg_pain_nin);
        l_id_prof_read_n         := sys.diutil.bool_to_int(id_prof_read_nin);
        l_id_prof_cancel_n       := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n         := sys.diutil.bool_to_int(notes_cancel_nin);
        l_flg_state_n            := sys.diutil.bool_to_int(flg_state_nin);
        l_dt_cancel_n            := sys.diutil.bool_to_int(dt_cancel_nin);
        l_flg_available_n        := sys.diutil.bool_to_int(flg_available_nin);
        l_id_institution_read_n  := sys.diutil.bool_to_int(id_institution_read_nin);
        l_flg_status_epis_n      := sys.diutil.bool_to_int(flg_status_epis_nin);
        l_id_visit_n             := sys.diutil.bool_to_int(id_visit_nin);
        l_id_episode_n           := sys.diutil.bool_to_int(id_episode_nin);
        l_id_patient_n           := sys.diutil.bool_to_int(id_patient_nin);
        l_relation_domain_n      := sys.diutil.bool_to_int(relation_domain_nin);
        l_id_epis_triage_n       := sys.diutil.bool_to_int(id_epis_triage_nin);
        l_dt_dg_last_update_n    := sys.diutil.bool_to_int(dt_dg_last_update_nin);
        l_create_user_n          := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   := sys.diutil.bool_to_int(update_institution_nin);
        l_id_vs_scales_element_n := sys.diutil.bool_to_int(id_vs_scales_element_nin);
    
        UPDATE vital_signs_ea
           SET id_vital_sign        = decode(l_id_vital_sign_n,
                                             0,
                                             id_vital_sign_in,
                                             nvl(id_vital_sign_in, id_vital_sign)),
               id_vital_sign_desc   = decode(l_id_vital_sign_desc_n,
                                             0,
                                             id_vital_sign_desc_in,
                                             nvl(id_vital_sign_desc_in, id_vital_sign_desc)),
               VALUE                = decode(l_value_n, 0, value_in, nvl(value_in, VALUE)),
               id_unit_measure      = decode(l_id_unit_measure_n,
                                             0,
                                             id_unit_measure_in,
                                             nvl(id_unit_measure_in, id_unit_measure)),
               dt_vital_sign_read   = decode(l_dt_vital_sign_read_n,
                                             0,
                                             dt_vital_sign_read_in,
                                             nvl(dt_vital_sign_read_in, dt_vital_sign_read)),
               flg_pain             = decode(l_flg_pain_n, 0, flg_pain_in, nvl(flg_pain_in, flg_pain)),
               id_prof_read         = decode(l_id_prof_read_n, 0, id_prof_read_in, nvl(id_prof_read_in, id_prof_read)),
               id_prof_cancel       = decode(l_id_prof_cancel_n,
                                             0,
                                             id_prof_cancel_in,
                                             nvl(id_prof_cancel_in, id_prof_cancel)),
               notes_cancel         = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               flg_state            = decode(l_flg_state_n, 0, flg_state_in, nvl(flg_state_in, flg_state)),
               dt_cancel            = decode(l_dt_cancel_n, 0, dt_cancel_in, nvl(dt_cancel_in, dt_cancel)),
               flg_available        = decode(l_flg_available_n,
                                             0,
                                             flg_available_in,
                                             nvl(flg_available_in, flg_available)),
               id_institution_read  = decode(l_id_institution_read_n,
                                             0,
                                             id_institution_read_in,
                                             nvl(id_institution_read_in, id_institution_read)),
               flg_status_epis      = decode(l_flg_status_epis_n,
                                             0,
                                             flg_status_epis_in,
                                             nvl(flg_status_epis_in, flg_status_epis)),
               id_visit             = decode(l_id_visit_n, 0, id_visit_in, nvl(id_visit_in, id_visit)),
               id_episode           = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_patient           = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               relation_domain      = decode(l_relation_domain_n,
                                             0,
                                             relation_domain_in,
                                             nvl(relation_domain_in, relation_domain)),
               id_epis_triage       = decode(l_id_epis_triage_n,
                                             0,
                                             id_epis_triage_in,
                                             nvl(id_epis_triage_in, id_epis_triage)),
               dt_dg_last_update    = nvl(dt_dg_last_update_in, current_timestamp),
               create_user          = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time          = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution   = decode(l_create_institution_n,
                                             0,
                                             create_institution_in,
                                             nvl(create_institution_in, create_institution)),
               update_user          = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time          = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution   = decode(l_update_institution_n,
                                             0,
                                             update_institution_in,
                                             nvl(update_institution_in, update_institution)),
               id_vs_scales_element = decode(l_id_vs_scales_element_n,
                                             0,
                                             id_vs_scales_element_in,
                                             nvl(id_vs_scales_element_in, id_vs_scales_element))
         WHERE id_vital_sign_read = id_vital_sign_read_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'VITAL_SIGNS_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGNS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGNS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_vital_sign_read_in    IN vital_signs_ea.id_vital_sign_read%TYPE,
        id_vital_sign_in         IN vital_signs_ea.id_vital_sign%TYPE DEFAULT NULL,
        id_vital_sign_nin        IN BOOLEAN := TRUE,
        id_vital_sign_desc_in    IN vital_signs_ea.id_vital_sign_desc%TYPE DEFAULT NULL,
        id_vital_sign_desc_nin   IN BOOLEAN := TRUE,
        value_in                 IN vital_signs_ea.value%TYPE DEFAULT NULL,
        value_nin                IN BOOLEAN := TRUE,
        id_unit_measure_in       IN vital_signs_ea.id_unit_measure%TYPE DEFAULT NULL,
        id_unit_measure_nin      IN BOOLEAN := TRUE,
        dt_vital_sign_read_in    IN vital_signs_ea.dt_vital_sign_read%TYPE DEFAULT NULL,
        dt_vital_sign_read_nin   IN BOOLEAN := TRUE,
        flg_pain_in              IN vital_signs_ea.flg_pain%TYPE DEFAULT NULL,
        flg_pain_nin             IN BOOLEAN := TRUE,
        id_prof_read_in          IN vital_signs_ea.id_prof_read%TYPE DEFAULT NULL,
        id_prof_read_nin         IN BOOLEAN := TRUE,
        id_prof_cancel_in        IN vital_signs_ea.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin       IN BOOLEAN := TRUE,
        notes_cancel_in          IN vital_signs_ea.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin         IN BOOLEAN := TRUE,
        flg_state_in             IN vital_signs_ea.flg_state%TYPE DEFAULT NULL,
        flg_state_nin            IN BOOLEAN := TRUE,
        dt_cancel_in             IN vital_signs_ea.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin            IN BOOLEAN := TRUE,
        flg_available_in         IN vital_signs_ea.flg_available%TYPE DEFAULT NULL,
        flg_available_nin        IN BOOLEAN := TRUE,
        id_institution_read_in   IN vital_signs_ea.id_institution_read%TYPE DEFAULT NULL,
        id_institution_read_nin  IN BOOLEAN := TRUE,
        flg_status_epis_in       IN vital_signs_ea.flg_status_epis%TYPE DEFAULT NULL,
        flg_status_epis_nin      IN BOOLEAN := TRUE,
        id_visit_in              IN vital_signs_ea.id_visit%TYPE DEFAULT NULL,
        id_visit_nin             IN BOOLEAN := TRUE,
        id_episode_in            IN vital_signs_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin           IN BOOLEAN := TRUE,
        id_patient_in            IN vital_signs_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin           IN BOOLEAN := TRUE,
        relation_domain_in       IN vital_signs_ea.relation_domain%TYPE DEFAULT NULL,
        relation_domain_nin      IN BOOLEAN := TRUE,
        id_epis_triage_in        IN vital_signs_ea.id_epis_triage%TYPE DEFAULT NULL,
        id_epis_triage_nin       IN BOOLEAN := TRUE,
        dt_dg_last_update_in     IN vital_signs_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin    IN BOOLEAN := TRUE,
        create_user_in           IN vital_signs_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN vital_signs_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN vital_signs_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN vital_signs_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN vital_signs_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN vital_signs_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        id_vs_scales_element_in  IN vital_signs_ea.id_vs_scales_element%TYPE DEFAULT NULL,
        id_vs_scales_element_nin IN BOOLEAN := TRUE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_vital_sign_read_in    => id_vital_sign_read_in,
            id_vital_sign_in         => id_vital_sign_in,
            id_vital_sign_nin        => id_vital_sign_nin,
            id_vital_sign_desc_in    => id_vital_sign_desc_in,
            id_vital_sign_desc_nin   => id_vital_sign_desc_nin,
            value_in                 => value_in,
            value_nin                => value_nin,
            id_unit_measure_in       => id_unit_measure_in,
            id_unit_measure_nin      => id_unit_measure_nin,
            dt_vital_sign_read_in    => dt_vital_sign_read_in,
            dt_vital_sign_read_nin   => dt_vital_sign_read_nin,
            flg_pain_in              => flg_pain_in,
            flg_pain_nin             => flg_pain_nin,
            id_prof_read_in          => id_prof_read_in,
            id_prof_read_nin         => id_prof_read_nin,
            id_prof_cancel_in        => id_prof_cancel_in,
            id_prof_cancel_nin       => id_prof_cancel_nin,
            notes_cancel_in          => notes_cancel_in,
            notes_cancel_nin         => notes_cancel_nin,
            flg_state_in             => flg_state_in,
            flg_state_nin            => flg_state_nin,
            dt_cancel_in             => dt_cancel_in,
            dt_cancel_nin            => dt_cancel_nin,
            flg_available_in         => flg_available_in,
            flg_available_nin        => flg_available_nin,
            id_institution_read_in   => id_institution_read_in,
            id_institution_read_nin  => id_institution_read_nin,
            flg_status_epis_in       => flg_status_epis_in,
            flg_status_epis_nin      => flg_status_epis_nin,
            id_visit_in              => id_visit_in,
            id_visit_nin             => id_visit_nin,
            id_episode_in            => id_episode_in,
            id_episode_nin           => id_episode_nin,
            id_patient_in            => id_patient_in,
            id_patient_nin           => id_patient_nin,
            relation_domain_in       => relation_domain_in,
            relation_domain_nin      => relation_domain_nin,
            id_epis_triage_in        => id_epis_triage_in,
            id_epis_triage_nin       => id_epis_triage_nin,
            dt_dg_last_update_in     => dt_dg_last_update_in,
            dt_dg_last_update_nin    => dt_dg_last_update_nin,
            create_user_in           => create_user_in,
            create_user_nin          => create_user_nin,
            create_time_in           => create_time_in,
            create_time_nin          => create_time_nin,
            create_institution_in    => create_institution_in,
            create_institution_nin   => create_institution_nin,
            update_user_in           => update_user_in,
            update_user_nin          => update_user_nin,
            update_time_in           => update_time_in,
            update_time_nin          => update_time_nin,
            update_institution_in    => update_institution_in,
            update_institution_nin   => update_institution_nin,
            id_vs_scales_element_in  => id_vs_scales_element_in,
            id_vs_scales_element_nin => id_vs_scales_element_nin,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_vital_sign_in         IN vital_signs_ea.id_vital_sign%TYPE DEFAULT NULL,
        id_vital_sign_nin        IN BOOLEAN := TRUE,
        id_vital_sign_desc_in    IN vital_signs_ea.id_vital_sign_desc%TYPE DEFAULT NULL,
        id_vital_sign_desc_nin   IN BOOLEAN := TRUE,
        value_in                 IN vital_signs_ea.value%TYPE DEFAULT NULL,
        value_nin                IN BOOLEAN := TRUE,
        id_unit_measure_in       IN vital_signs_ea.id_unit_measure%TYPE DEFAULT NULL,
        id_unit_measure_nin      IN BOOLEAN := TRUE,
        dt_vital_sign_read_in    IN vital_signs_ea.dt_vital_sign_read%TYPE DEFAULT NULL,
        dt_vital_sign_read_nin   IN BOOLEAN := TRUE,
        flg_pain_in              IN vital_signs_ea.flg_pain%TYPE DEFAULT NULL,
        flg_pain_nin             IN BOOLEAN := TRUE,
        id_prof_read_in          IN vital_signs_ea.id_prof_read%TYPE DEFAULT NULL,
        id_prof_read_nin         IN BOOLEAN := TRUE,
        id_prof_cancel_in        IN vital_signs_ea.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin       IN BOOLEAN := TRUE,
        notes_cancel_in          IN vital_signs_ea.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin         IN BOOLEAN := TRUE,
        flg_state_in             IN vital_signs_ea.flg_state%TYPE DEFAULT NULL,
        flg_state_nin            IN BOOLEAN := TRUE,
        dt_cancel_in             IN vital_signs_ea.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin            IN BOOLEAN := TRUE,
        flg_available_in         IN vital_signs_ea.flg_available%TYPE DEFAULT NULL,
        flg_available_nin        IN BOOLEAN := TRUE,
        id_institution_read_in   IN vital_signs_ea.id_institution_read%TYPE DEFAULT NULL,
        id_institution_read_nin  IN BOOLEAN := TRUE,
        flg_status_epis_in       IN vital_signs_ea.flg_status_epis%TYPE DEFAULT NULL,
        flg_status_epis_nin      IN BOOLEAN := TRUE,
        id_visit_in              IN vital_signs_ea.id_visit%TYPE DEFAULT NULL,
        id_visit_nin             IN BOOLEAN := TRUE,
        id_episode_in            IN vital_signs_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin           IN BOOLEAN := TRUE,
        id_patient_in            IN vital_signs_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin           IN BOOLEAN := TRUE,
        relation_domain_in       IN vital_signs_ea.relation_domain%TYPE DEFAULT NULL,
        relation_domain_nin      IN BOOLEAN := TRUE,
        id_epis_triage_in        IN vital_signs_ea.id_epis_triage%TYPE DEFAULT NULL,
        id_epis_triage_nin       IN BOOLEAN := TRUE,
        dt_dg_last_update_in     IN vital_signs_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin    IN BOOLEAN := TRUE,
        create_user_in           IN vital_signs_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN vital_signs_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN vital_signs_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN vital_signs_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN vital_signs_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN vital_signs_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        id_vs_scales_element_in  IN vital_signs_ea.id_vs_scales_element%TYPE DEFAULT NULL,
        id_vs_scales_element_nin IN BOOLEAN := TRUE,
        where_in                 VARCHAR2 DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 IN OUT table_varchar
    ) IS
        l_sql                    VARCHAR2(32767);
        l_rows_out               table_varchar;
        l_id_vital_sign_n        NUMBER(1);
        l_id_vital_sign_desc_n   NUMBER(1);
        l_value_n                NUMBER(1);
        l_id_unit_measure_n      NUMBER(1);
        l_dt_vital_sign_read_n   NUMBER(1);
        l_flg_pain_n             NUMBER(1);
        l_id_prof_read_n         NUMBER(1);
        l_id_prof_cancel_n       NUMBER(1);
        l_notes_cancel_n         NUMBER(1);
        l_flg_state_n            NUMBER(1);
        l_dt_cancel_n            NUMBER(1);
        l_flg_available_n        NUMBER(1);
        l_id_institution_read_n  NUMBER(1);
        l_flg_status_epis_n      NUMBER(1);
        l_id_visit_n             NUMBER(1);
        l_id_episode_n           NUMBER(1);
        l_id_patient_n           NUMBER(1);
        l_relation_domain_n      NUMBER(1);
        l_id_epis_triage_n       NUMBER(1);
        l_dt_dg_last_update_n    NUMBER(1);
        l_create_user_n          NUMBER(1);
        l_create_time_n          NUMBER(1);
        l_create_institution_n   NUMBER(1);
        l_update_user_n          NUMBER(1);
        l_update_time_n          NUMBER(1);
        l_update_institution_n   NUMBER(1);
        l_id_vs_scales_element_n NUMBER(1);
        id_vital_sign_read_in    vital_signs_ea.id_vital_sign_read%TYPE;
    BEGIN
    
        l_id_vital_sign_n        := sys.diutil.bool_to_int(id_vital_sign_nin);
        l_id_vital_sign_desc_n   := sys.diutil.bool_to_int(id_vital_sign_desc_nin);
        l_value_n                := sys.diutil.bool_to_int(value_nin);
        l_id_unit_measure_n      := sys.diutil.bool_to_int(id_unit_measure_nin);
        l_dt_vital_sign_read_n   := sys.diutil.bool_to_int(dt_vital_sign_read_nin);
        l_flg_pain_n             := sys.diutil.bool_to_int(flg_pain_nin);
        l_id_prof_read_n         := sys.diutil.bool_to_int(id_prof_read_nin);
        l_id_prof_cancel_n       := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n         := sys.diutil.bool_to_int(notes_cancel_nin);
        l_flg_state_n            := sys.diutil.bool_to_int(flg_state_nin);
        l_dt_cancel_n            := sys.diutil.bool_to_int(dt_cancel_nin);
        l_flg_available_n        := sys.diutil.bool_to_int(flg_available_nin);
        l_id_institution_read_n  := sys.diutil.bool_to_int(id_institution_read_nin);
        l_flg_status_epis_n      := sys.diutil.bool_to_int(flg_status_epis_nin);
        l_id_visit_n             := sys.diutil.bool_to_int(id_visit_nin);
        l_id_episode_n           := sys.diutil.bool_to_int(id_episode_nin);
        l_id_patient_n           := sys.diutil.bool_to_int(id_patient_nin);
        l_relation_domain_n      := sys.diutil.bool_to_int(relation_domain_nin);
        l_id_epis_triage_n       := sys.diutil.bool_to_int(id_epis_triage_nin);
        l_dt_dg_last_update_n    := sys.diutil.bool_to_int(dt_dg_last_update_nin);
        l_create_user_n          := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n          := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n   := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n          := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n          := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n   := sys.diutil.bool_to_int(update_institution_nin);
        l_id_vs_scales_element_n := sys.diutil.bool_to_int(id_vs_scales_element_nin);
    
        l_sql := 'UPDATE VITAL_SIGNS_EA SET ' || ' ID_VITAL_SIGN = decode (' || l_id_vital_sign_n ||
                 ',0,:id_vital_sign_in, NVL (:id_vital_sign_in, ID_VITAL_SIGN)) ' || ',' ||
                 ' ID_VITAL_SIGN_DESC = decode (' || l_id_vital_sign_desc_n ||
                 ',0,:id_vital_sign_desc_in, NVL (:id_vital_sign_desc_in, ID_VITAL_SIGN_DESC)) ' || ',' ||
                 ' VALUE = decode (' || l_value_n || ',0,:value_in, NVL (:value_in, VALUE)) ' || ',' ||
                 ' ID_UNIT_MEASURE = decode (' || l_id_unit_measure_n ||
                 ',0,:id_unit_measure_in, NVL (:id_unit_measure_in, ID_UNIT_MEASURE)) ' || ',' ||
                 ' DT_VITAL_SIGN_READ = decode (' || l_dt_vital_sign_read_n ||
                 ',0,:dt_vital_sign_read_in, NVL (:dt_vital_sign_read_in, DT_VITAL_SIGN_READ)) ' || ',' ||
                 ' FLG_PAIN = decode (' || l_flg_pain_n || ',0,:flg_pain_in, NVL (:flg_pain_in, FLG_PAIN)) ' || ',' ||
                 ' ID_PROF_READ = decode (' || l_id_prof_read_n ||
                 ',0,:id_prof_read_in, NVL (:id_prof_read_in, ID_PROF_READ)) ' || ',' || ' ID_PROF_CANCEL = decode (' ||
                 l_id_prof_cancel_n || ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) ' || ',' ||
                 ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                 ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) ' || ',' || ' FLG_STATE = decode (' ||
                 l_flg_state_n || ',0,:flg_state_in, NVL (:flg_state_in, FLG_STATE)) ' || ',' ||
                 ' DT_CANCEL = decode (' || l_dt_cancel_n || ',0,:dt_cancel_in, NVL (:dt_cancel_in, DT_CANCEL)) ' || ',' ||
                 ' FLG_AVAILABLE = decode (' || l_flg_available_n ||
                 ',0,:flg_available_in, NVL (:flg_available_in, FLG_AVAILABLE)) ' || ',' ||
                 ' ID_INSTITUTION_READ = decode (' || l_id_institution_read_n ||
                 ',0,:id_institution_read_in, NVL (:id_institution_read_in, ID_INSTITUTION_READ)) ' || ',' ||
                 ' FLG_STATUS_EPIS = decode (' || l_flg_status_epis_n ||
                 ',0,:flg_status_epis_in, NVL (:flg_status_epis_in, FLG_STATUS_EPIS)) ' || ',' ||
                 ' ID_VISIT = decode (' || l_id_visit_n || ',0,:id_visit_in, NVL (:id_visit_in, ID_VISIT)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' ID_PATIENT = decode (' || l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' RELATION_DOMAIN = decode (' || l_relation_domain_n ||
                 ',0,:relation_domain_in, NVL (:relation_domain_in, RELATION_DOMAIN)) ' || ',' ||
                 ' ID_EPIS_TRIAGE = decode (' || l_id_epis_triage_n ||
                 ',0,:id_epis_triage_in, NVL (:id_epis_triage_in, ID_EPIS_TRIAGE)) ' || ',' ||
                 ' DT_DG_LAST_UPDATE = nvl(:dt_dg_last_update_in,current_timestamp) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' ID_VS_SCALES_ELEMENT = decode (' || l_id_vs_scales_element_n ||
                 ',0,:id_vs_scales_element_in, NVL (:id_vs_scales_element_in, ID_VS_SCALES_ELEMENT)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_vital_sign_in, id_vital_sign_desc_in, value_in, id_unit_measure_in, dt_vital_sign_read_in, flg_pain_in, id_prof_read_in, id_prof_cancel_in, notes_cancel_in, flg_state_in, dt_cancel_in, flg_available_in, id_institution_read_in, flg_status_epis_in, id_visit_in, id_episode_in, id_patient_in, relation_domain_in, id_epis_triage_in, dt_dg_last_update_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_vs_scales_element_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'VITAL_SIGNS_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGNS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGNS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_vital_sign_in         IN vital_signs_ea.id_vital_sign%TYPE DEFAULT NULL,
        id_vital_sign_nin        IN BOOLEAN := TRUE,
        id_vital_sign_desc_in    IN vital_signs_ea.id_vital_sign_desc%TYPE DEFAULT NULL,
        id_vital_sign_desc_nin   IN BOOLEAN := TRUE,
        value_in                 IN vital_signs_ea.value%TYPE DEFAULT NULL,
        value_nin                IN BOOLEAN := TRUE,
        id_unit_measure_in       IN vital_signs_ea.id_unit_measure%TYPE DEFAULT NULL,
        id_unit_measure_nin      IN BOOLEAN := TRUE,
        dt_vital_sign_read_in    IN vital_signs_ea.dt_vital_sign_read%TYPE DEFAULT NULL,
        dt_vital_sign_read_nin   IN BOOLEAN := TRUE,
        flg_pain_in              IN vital_signs_ea.flg_pain%TYPE DEFAULT NULL,
        flg_pain_nin             IN BOOLEAN := TRUE,
        id_prof_read_in          IN vital_signs_ea.id_prof_read%TYPE DEFAULT NULL,
        id_prof_read_nin         IN BOOLEAN := TRUE,
        id_prof_cancel_in        IN vital_signs_ea.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin       IN BOOLEAN := TRUE,
        notes_cancel_in          IN vital_signs_ea.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin         IN BOOLEAN := TRUE,
        flg_state_in             IN vital_signs_ea.flg_state%TYPE DEFAULT NULL,
        flg_state_nin            IN BOOLEAN := TRUE,
        dt_cancel_in             IN vital_signs_ea.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin            IN BOOLEAN := TRUE,
        flg_available_in         IN vital_signs_ea.flg_available%TYPE DEFAULT NULL,
        flg_available_nin        IN BOOLEAN := TRUE,
        id_institution_read_in   IN vital_signs_ea.id_institution_read%TYPE DEFAULT NULL,
        id_institution_read_nin  IN BOOLEAN := TRUE,
        flg_status_epis_in       IN vital_signs_ea.flg_status_epis%TYPE DEFAULT NULL,
        flg_status_epis_nin      IN BOOLEAN := TRUE,
        id_visit_in              IN vital_signs_ea.id_visit%TYPE DEFAULT NULL,
        id_visit_nin             IN BOOLEAN := TRUE,
        id_episode_in            IN vital_signs_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin           IN BOOLEAN := TRUE,
        id_patient_in            IN vital_signs_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin           IN BOOLEAN := TRUE,
        relation_domain_in       IN vital_signs_ea.relation_domain%TYPE DEFAULT NULL,
        relation_domain_nin      IN BOOLEAN := TRUE,
        id_epis_triage_in        IN vital_signs_ea.id_epis_triage%TYPE DEFAULT NULL,
        id_epis_triage_nin       IN BOOLEAN := TRUE,
        dt_dg_last_update_in     IN vital_signs_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin    IN BOOLEAN := TRUE,
        create_user_in           IN vital_signs_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin          IN BOOLEAN := TRUE,
        create_time_in           IN vital_signs_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin          IN BOOLEAN := TRUE,
        create_institution_in    IN vital_signs_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin   IN BOOLEAN := TRUE,
        update_user_in           IN vital_signs_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin          IN BOOLEAN := TRUE,
        update_time_in           IN vital_signs_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin          IN BOOLEAN := TRUE,
        update_institution_in    IN vital_signs_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin   IN BOOLEAN := TRUE,
        id_vs_scales_element_in  IN vital_signs_ea.id_vs_scales_element%TYPE DEFAULT NULL,
        id_vs_scales_element_nin IN BOOLEAN := TRUE,
        where_in                 VARCHAR2 DEFAULT NULL,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_vital_sign_in         => id_vital_sign_in,
            id_vital_sign_nin        => id_vital_sign_nin,
            id_vital_sign_desc_in    => id_vital_sign_desc_in,
            id_vital_sign_desc_nin   => id_vital_sign_desc_nin,
            value_in                 => value_in,
            value_nin                => value_nin,
            id_unit_measure_in       => id_unit_measure_in,
            id_unit_measure_nin      => id_unit_measure_nin,
            dt_vital_sign_read_in    => dt_vital_sign_read_in,
            dt_vital_sign_read_nin   => dt_vital_sign_read_nin,
            flg_pain_in              => flg_pain_in,
            flg_pain_nin             => flg_pain_nin,
            id_prof_read_in          => id_prof_read_in,
            id_prof_read_nin         => id_prof_read_nin,
            id_prof_cancel_in        => id_prof_cancel_in,
            id_prof_cancel_nin       => id_prof_cancel_nin,
            notes_cancel_in          => notes_cancel_in,
            notes_cancel_nin         => notes_cancel_nin,
            flg_state_in             => flg_state_in,
            flg_state_nin            => flg_state_nin,
            dt_cancel_in             => dt_cancel_in,
            dt_cancel_nin            => dt_cancel_nin,
            flg_available_in         => flg_available_in,
            flg_available_nin        => flg_available_nin,
            id_institution_read_in   => id_institution_read_in,
            id_institution_read_nin  => id_institution_read_nin,
            flg_status_epis_in       => flg_status_epis_in,
            flg_status_epis_nin      => flg_status_epis_nin,
            id_visit_in              => id_visit_in,
            id_visit_nin             => id_visit_nin,
            id_episode_in            => id_episode_in,
            id_episode_nin           => id_episode_nin,
            id_patient_in            => id_patient_in,
            id_patient_nin           => id_patient_nin,
            relation_domain_in       => relation_domain_in,
            relation_domain_nin      => relation_domain_nin,
            id_epis_triage_in        => id_epis_triage_in,
            id_epis_triage_nin       => id_epis_triage_nin,
            dt_dg_last_update_in     => dt_dg_last_update_in,
            dt_dg_last_update_nin    => dt_dg_last_update_nin,
            create_user_in           => create_user_in,
            create_user_nin          => create_user_nin,
            create_time_in           => create_time_in,
            create_time_nin          => create_time_nin,
            create_institution_in    => create_institution_in,
            create_institution_nin   => create_institution_nin,
            update_user_in           => update_user_in,
            update_user_nin          => update_user_nin,
            update_time_in           => update_time_in,
            update_time_nin          => update_time_nin,
            update_institution_in    => update_institution_in,
            update_institution_nin   => update_institution_nin,
            id_vs_scales_element_in  => id_vs_scales_element_in,
            id_vs_scales_element_nin => id_vs_scales_element_nin,
            where_in                 => where_in,
            handle_error_in          => handle_error_in,
            rows_out                 => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN vital_signs_ea%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_vital_sign_in        => rec_in.id_vital_sign,
            id_vital_sign_read_in   => rec_in.id_vital_sign_read,
            id_vital_sign_desc_in   => rec_in.id_vital_sign_desc,
            value_in                => rec_in.value,
            id_unit_measure_in      => rec_in.id_unit_measure,
            dt_vital_sign_read_in   => rec_in.dt_vital_sign_read,
            flg_pain_in             => rec_in.flg_pain,
            id_prof_read_in         => rec_in.id_prof_read,
            id_prof_cancel_in       => rec_in.id_prof_cancel,
            notes_cancel_in         => rec_in.notes_cancel,
            flg_state_in            => rec_in.flg_state,
            dt_cancel_in            => rec_in.dt_cancel,
            flg_available_in        => rec_in.flg_available,
            id_institution_read_in  => rec_in.id_institution_read,
            flg_status_epis_in      => rec_in.flg_status_epis,
            id_visit_in             => rec_in.id_visit,
            id_episode_in           => rec_in.id_episode,
            id_patient_in           => rec_in.id_patient,
            relation_domain_in      => rec_in.relation_domain,
            id_epis_triage_in       => rec_in.id_epis_triage,
            dt_dg_last_update_in    => rec_in.dt_dg_last_update,
            create_user_in          => rec_in.create_user,
            create_time_in          => rec_in.create_time,
            create_institution_in   => rec_in.create_institution,
            update_user_in          => rec_in.update_user,
            update_time_in          => rec_in.update_time,
            update_institution_in   => rec_in.update_institution,
            id_vs_scales_element_in => rec_in.id_vs_scales_element
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN vital_signs_ea%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_vital_sign_in        => rec_in.id_vital_sign,
            id_vital_sign_read_in   => rec_in.id_vital_sign_read,
            id_vital_sign_desc_in   => rec_in.id_vital_sign_desc,
            value_in                => rec_in.value,
            id_unit_measure_in      => rec_in.id_unit_measure,
            dt_vital_sign_read_in   => rec_in.dt_vital_sign_read,
            flg_pain_in             => rec_in.flg_pain,
            id_prof_read_in         => rec_in.id_prof_read,
            id_prof_cancel_in       => rec_in.id_prof_cancel,
            notes_cancel_in         => rec_in.notes_cancel,
            flg_state_in            => rec_in.flg_state,
            dt_cancel_in            => rec_in.dt_cancel,
            flg_available_in        => rec_in.flg_available,
            id_institution_read_in  => rec_in.id_institution_read,
            flg_status_epis_in      => rec_in.flg_status_epis,
            id_visit_in             => rec_in.id_visit,
            id_episode_in           => rec_in.id_episode,
            id_patient_in           => rec_in.id_patient,
            relation_domain_in      => rec_in.relation_domain,
            id_epis_triage_in       => rec_in.id_epis_triage,
            dt_dg_last_update_in    => rec_in.dt_dg_last_update,
            create_user_in          => rec_in.create_user,
            create_time_in          => rec_in.create_time,
            create_institution_in   => rec_in.create_institution,
            update_user_in          => rec_in.update_user,
            update_time_in          => rec_in.update_time,
            update_institution_in   => rec_in.update_institution,
            id_vs_scales_element_in => rec_in.id_vs_scales_element
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_vital_sign_read_in   IN vital_signs_ea.id_vital_sign_read%TYPE,
        id_vital_sign_in        IN vital_signs_ea.id_vital_sign%TYPE DEFAULT NULL,
        id_vital_sign_desc_in   IN vital_signs_ea.id_vital_sign_desc%TYPE DEFAULT NULL,
        value_in                IN vital_signs_ea.value%TYPE DEFAULT NULL,
        id_unit_measure_in      IN vital_signs_ea.id_unit_measure%TYPE DEFAULT NULL,
        dt_vital_sign_read_in   IN vital_signs_ea.dt_vital_sign_read%TYPE DEFAULT NULL,
        flg_pain_in             IN vital_signs_ea.flg_pain%TYPE DEFAULT NULL,
        id_prof_read_in         IN vital_signs_ea.id_prof_read%TYPE DEFAULT NULL,
        id_prof_cancel_in       IN vital_signs_ea.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in         IN vital_signs_ea.notes_cancel%TYPE DEFAULT NULL,
        flg_state_in            IN vital_signs_ea.flg_state%TYPE DEFAULT NULL,
        dt_cancel_in            IN vital_signs_ea.dt_cancel%TYPE DEFAULT NULL,
        flg_available_in        IN vital_signs_ea.flg_available%TYPE DEFAULT NULL,
        id_institution_read_in  IN vital_signs_ea.id_institution_read%TYPE DEFAULT NULL,
        flg_status_epis_in      IN vital_signs_ea.flg_status_epis%TYPE DEFAULT NULL,
        id_visit_in             IN vital_signs_ea.id_visit%TYPE DEFAULT NULL,
        id_episode_in           IN vital_signs_ea.id_episode%TYPE DEFAULT NULL,
        id_patient_in           IN vital_signs_ea.id_patient%TYPE DEFAULT NULL,
        relation_domain_in      IN vital_signs_ea.relation_domain%TYPE DEFAULT NULL,
        id_epis_triage_in       IN vital_signs_ea.id_epis_triage%TYPE DEFAULT NULL,
        dt_dg_last_update_in    IN vital_signs_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        create_user_in          IN vital_signs_ea.create_user%TYPE DEFAULT NULL,
        create_time_in          IN vital_signs_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN vital_signs_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN vital_signs_ea.update_user%TYPE DEFAULT NULL,
        update_time_in          IN vital_signs_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN vital_signs_ea.update_institution%TYPE DEFAULT NULL,
        id_vs_scales_element_in IN vital_signs_ea.id_vs_scales_element%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        upd(id_vital_sign_read_in   => id_vital_sign_read_in,
            id_vital_sign_in        => id_vital_sign_in,
            id_vital_sign_desc_in   => id_vital_sign_desc_in,
            value_in                => value_in,
            id_unit_measure_in      => id_unit_measure_in,
            dt_vital_sign_read_in   => dt_vital_sign_read_in,
            flg_pain_in             => flg_pain_in,
            id_prof_read_in         => id_prof_read_in,
            id_prof_cancel_in       => id_prof_cancel_in,
            notes_cancel_in         => notes_cancel_in,
            flg_state_in            => flg_state_in,
            dt_cancel_in            => dt_cancel_in,
            flg_available_in        => flg_available_in,
            id_institution_read_in  => id_institution_read_in,
            flg_status_epis_in      => flg_status_epis_in,
            id_visit_in             => id_visit_in,
            id_episode_in           => id_episode_in,
            id_patient_in           => id_patient_in,
            relation_domain_in      => relation_domain_in,
            id_epis_triage_in       => id_epis_triage_in,
            dt_dg_last_update_in    => dt_dg_last_update_in,
            create_user_in          => create_user_in,
            create_time_in          => create_time_in,
            create_institution_in   => create_institution_in,
            update_user_in          => update_user_in,
            update_time_in          => update_time_in,
            update_institution_in   => update_institution_in,
            id_vs_scales_element_in => id_vs_scales_element_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_vital_sign_read_in   => id_vital_sign_read_in,
                id_vital_sign_in        => id_vital_sign_in,
                id_vital_sign_desc_in   => id_vital_sign_desc_in,
                value_in                => value_in,
                id_unit_measure_in      => id_unit_measure_in,
                dt_vital_sign_read_in   => dt_vital_sign_read_in,
                flg_pain_in             => flg_pain_in,
                id_prof_read_in         => id_prof_read_in,
                id_prof_cancel_in       => id_prof_cancel_in,
                notes_cancel_in         => notes_cancel_in,
                flg_state_in            => flg_state_in,
                dt_cancel_in            => dt_cancel_in,
                flg_available_in        => flg_available_in,
                id_institution_read_in  => id_institution_read_in,
                flg_status_epis_in      => flg_status_epis_in,
                id_visit_in             => id_visit_in,
                id_episode_in           => id_episode_in,
                id_patient_in           => id_patient_in,
                relation_domain_in      => relation_domain_in,
                id_epis_triage_in       => id_epis_triage_in,
                dt_dg_last_update_in    => dt_dg_last_update_in,
                create_user_in          => create_user_in,
                create_time_in          => create_time_in,
                create_institution_in   => create_institution_in,
                update_user_in          => update_user_in,
                update_time_in          => update_time_in,
                update_institution_in   => update_institution_in,
                id_vs_scales_element_in => id_vs_scales_element_in,
                handle_error_in         => handle_error_in,
                rows_out                => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_vital_sign_read_in   IN vital_signs_ea.id_vital_sign_read%TYPE,
        id_vital_sign_in        IN vital_signs_ea.id_vital_sign%TYPE DEFAULT NULL,
        id_vital_sign_desc_in   IN vital_signs_ea.id_vital_sign_desc%TYPE DEFAULT NULL,
        value_in                IN vital_signs_ea.value%TYPE DEFAULT NULL,
        id_unit_measure_in      IN vital_signs_ea.id_unit_measure%TYPE DEFAULT NULL,
        dt_vital_sign_read_in   IN vital_signs_ea.dt_vital_sign_read%TYPE DEFAULT NULL,
        flg_pain_in             IN vital_signs_ea.flg_pain%TYPE DEFAULT NULL,
        id_prof_read_in         IN vital_signs_ea.id_prof_read%TYPE DEFAULT NULL,
        id_prof_cancel_in       IN vital_signs_ea.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in         IN vital_signs_ea.notes_cancel%TYPE DEFAULT NULL,
        flg_state_in            IN vital_signs_ea.flg_state%TYPE DEFAULT NULL,
        dt_cancel_in            IN vital_signs_ea.dt_cancel%TYPE DEFAULT NULL,
        flg_available_in        IN vital_signs_ea.flg_available%TYPE DEFAULT NULL,
        id_institution_read_in  IN vital_signs_ea.id_institution_read%TYPE DEFAULT NULL,
        flg_status_epis_in      IN vital_signs_ea.flg_status_epis%TYPE DEFAULT NULL,
        id_visit_in             IN vital_signs_ea.id_visit%TYPE DEFAULT NULL,
        id_episode_in           IN vital_signs_ea.id_episode%TYPE DEFAULT NULL,
        id_patient_in           IN vital_signs_ea.id_patient%TYPE DEFAULT NULL,
        relation_domain_in      IN vital_signs_ea.relation_domain%TYPE DEFAULT NULL,
        id_epis_triage_in       IN vital_signs_ea.id_epis_triage%TYPE DEFAULT NULL,
        dt_dg_last_update_in    IN vital_signs_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        create_user_in          IN vital_signs_ea.create_user%TYPE DEFAULT NULL,
        create_time_in          IN vital_signs_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in   IN vital_signs_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in          IN vital_signs_ea.update_user%TYPE DEFAULT NULL,
        update_time_in          IN vital_signs_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in   IN vital_signs_ea.update_institution%TYPE DEFAULT NULL,
        id_vs_scales_element_in IN vital_signs_ea.id_vs_scales_element%TYPE DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_vital_sign_read_in,
                id_vital_sign_in,
                id_vital_sign_desc_in,
                value_in,
                id_unit_measure_in,
                dt_vital_sign_read_in,
                flg_pain_in,
                id_prof_read_in,
                id_prof_cancel_in,
                notes_cancel_in,
                flg_state_in,
                dt_cancel_in,
                flg_available_in,
                id_institution_read_in,
                flg_status_epis_in,
                id_visit_in,
                id_episode_in,
                id_patient_in,
                relation_domain_in,
                id_epis_triage_in,
                dt_dg_last_update_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_vs_scales_element_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN vital_signs_ea_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_vital_sign        id_vital_sign_cc;
        l_id_vital_sign_read   id_vital_sign_read_cc;
        l_id_vital_sign_desc   id_vital_sign_desc_cc;
        l_value                value_cc;
        l_id_unit_measure      id_unit_measure_cc;
        l_dt_vital_sign_read   dt_vital_sign_read_cc;
        l_flg_pain             flg_pain_cc;
        l_id_prof_read         id_prof_read_cc;
        l_id_prof_cancel       id_prof_cancel_cc;
        l_notes_cancel         notes_cancel_cc;
        l_flg_state            flg_state_cc;
        l_dt_cancel            dt_cancel_cc;
        l_flg_available        flg_available_cc;
        l_id_institution_read  id_institution_read_cc;
        l_flg_status_epis      flg_status_epis_cc;
        l_id_visit             id_visit_cc;
        l_id_episode           id_episode_cc;
        l_id_patient           id_patient_cc;
        l_relation_domain      relation_domain_cc;
        l_id_epis_triage       id_epis_triage_cc;
        l_dt_dg_last_update    dt_dg_last_update_cc;
        l_create_user          create_user_cc;
        l_create_time          create_time_cc;
        l_create_institution   create_institution_cc;
        l_update_user          update_user_cc;
        l_update_time          update_time_cc;
        l_update_institution   update_institution_cc;
        l_id_vs_scales_element id_vs_scales_element_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_vital_sign(i) := col_in(i).id_vital_sign;
            l_id_vital_sign_read(i) := col_in(i).id_vital_sign_read;
            l_id_vital_sign_desc(i) := col_in(i).id_vital_sign_desc;
            l_value(i) := col_in(i).value;
            l_id_unit_measure(i) := col_in(i).id_unit_measure;
            l_dt_vital_sign_read(i) := col_in(i).dt_vital_sign_read;
            l_flg_pain(i) := col_in(i).flg_pain;
            l_id_prof_read(i) := col_in(i).id_prof_read;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_flg_state(i) := col_in(i).flg_state;
            l_dt_cancel(i) := col_in(i).dt_cancel;
            l_flg_available(i) := col_in(i).flg_available;
            l_id_institution_read(i) := col_in(i).id_institution_read;
            l_flg_status_epis(i) := col_in(i).flg_status_epis;
            l_id_visit(i) := col_in(i).id_visit;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_patient(i) := col_in(i).id_patient;
            l_relation_domain(i) := col_in(i).relation_domain;
            l_id_epis_triage(i) := col_in(i).id_epis_triage;
            l_dt_dg_last_update(i) := col_in(i).dt_dg_last_update;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_vs_scales_element(i) := col_in(i).id_vs_scales_element;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE vital_signs_ea
                   SET id_vital_sign        = nvl(l_id_vital_sign(i), id_vital_sign),
                       id_vital_sign_desc   = nvl(l_id_vital_sign_desc(i), id_vital_sign_desc),
                       VALUE                = nvl(l_value(i), VALUE),
                       id_unit_measure      = nvl(l_id_unit_measure(i), id_unit_measure),
                       dt_vital_sign_read   = nvl(l_dt_vital_sign_read(i), dt_vital_sign_read),
                       flg_pain             = nvl(l_flg_pain(i), flg_pain),
                       id_prof_read         = nvl(l_id_prof_read(i), id_prof_read),
                       id_prof_cancel       = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       notes_cancel         = nvl(l_notes_cancel(i), notes_cancel),
                       flg_state            = nvl(l_flg_state(i), flg_state),
                       dt_cancel            = nvl(l_dt_cancel(i), dt_cancel),
                       flg_available        = nvl(l_flg_available(i), flg_available),
                       id_institution_read  = nvl(l_id_institution_read(i), id_institution_read),
                       flg_status_epis      = nvl(l_flg_status_epis(i), flg_status_epis),
                       id_visit             = nvl(l_id_visit(i), id_visit),
                       id_episode           = nvl(l_id_episode(i), id_episode),
                       id_patient           = nvl(l_id_patient(i), id_patient),
                       relation_domain      = nvl(l_relation_domain(i), relation_domain),
                       id_epis_triage       = nvl(l_id_epis_triage(i), id_epis_triage),
                       dt_dg_last_update    = nvl(l_dt_dg_last_update(i), current_timestamp),
                       create_user          = nvl(l_create_user(i), create_user),
                       create_time          = nvl(l_create_time(i), create_time),
                       create_institution   = nvl(l_create_institution(i), create_institution),
                       update_user          = nvl(l_update_user(i), update_user),
                       update_time          = nvl(l_update_time(i), update_time),
                       update_institution   = nvl(l_update_institution(i), update_institution),
                       id_vs_scales_element = nvl(l_id_vs_scales_element(i), id_vs_scales_element)
                 WHERE id_vital_sign_read = l_id_vital_sign_read(i);
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE vital_signs_ea
                   SET id_vital_sign        = l_id_vital_sign(i),
                       id_vital_sign_desc   = l_id_vital_sign_desc(i),
                       VALUE                = l_value(i),
                       id_unit_measure      = l_id_unit_measure(i),
                       dt_vital_sign_read   = l_dt_vital_sign_read(i),
                       flg_pain             = l_flg_pain(i),
                       id_prof_read         = l_id_prof_read(i),
                       id_prof_cancel       = l_id_prof_cancel(i),
                       notes_cancel         = l_notes_cancel(i),
                       flg_state            = l_flg_state(i),
                       dt_cancel            = l_dt_cancel(i),
                       flg_available        = l_flg_available(i),
                       id_institution_read  = l_id_institution_read(i),
                       flg_status_epis      = l_flg_status_epis(i),
                       id_visit             = l_id_visit(i),
                       id_episode           = l_id_episode(i),
                       id_patient           = l_id_patient(i),
                       relation_domain      = l_relation_domain(i),
                       id_epis_triage       = l_id_epis_triage(i),
                       dt_dg_last_update    = nvl(l_dt_dg_last_update(i), current_timestamp),
                       create_user          = l_create_user(i),
                       create_time          = l_create_time(i),
                       create_institution   = l_create_institution(i),
                       update_user          = l_update_user(i),
                       update_time          = l_update_time(i),
                       update_institution   = l_update_institution(i),
                       id_vs_scales_element = l_id_vs_scales_element(i)
                 WHERE id_vital_sign_read = l_id_vital_sign_read(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN vital_signs_ea_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE VITAL_SIGNS_EA
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE VITAL_SIGNS_EA
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE VITAL_SIGNS_EA set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGNS_EA');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGNS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGNS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE VITAL_SIGNS_EA set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGNS_EA');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGNS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGNS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_vital_sign_read_in IN vital_signs_ea.id_vital_sign_read%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM vital_signs_ea
         WHERE id_vital_sign_read = id_vital_sign_read_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGNS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGNS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_vital_sign_read_in IN vital_signs_ea.id_vital_sign_read%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_vital_sign_read_in => id_vital_sign_read_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_VITAL_SIGN_READ
    PROCEDURE del_id_vital_sign_read
    (
        id_vital_sign_read_in IN vital_signs_ea.id_vital_sign_read%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM vital_signs_ea
         WHERE id_vital_sign_read = id_vital_sign_read_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGNS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGNS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_vital_sign_read;

    -- Delete all rows for primary key column ID_VITAL_SIGN_READ
    PROCEDURE del_id_vital_sign_read
    (
        id_vital_sign_read_in IN vital_signs_ea.id_vital_sign_read%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_vital_sign_read(id_vital_sign_read_in => id_vital_sign_read_in,
                               handle_error_in       => handle_error_in,
                               rows_out              => rows_out);
    END del_id_vital_sign_read;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM VITAL_SIGNS_EA';
        ELSE
            RETURN 'DELETE FROM VITAL_SIGNS_EA WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGNS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGNS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGNS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGNS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGNS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGNS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGNS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGNS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGNS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGNS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGNS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGNS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGNS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGNS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGNS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGNS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGNS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGNS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'VITAL_SIGNS_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'VITAL_SIGNS_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(vital_signs_ea_inout IN OUT vital_signs_ea%ROWTYPE) IS
    BEGIN
        vital_signs_ea_inout.id_vital_sign        := NULL;
        vital_signs_ea_inout.id_vital_sign_read   := NULL;
        vital_signs_ea_inout.id_vital_sign_desc   := NULL;
        vital_signs_ea_inout.value                := NULL;
        vital_signs_ea_inout.id_unit_measure      := NULL;
        vital_signs_ea_inout.dt_vital_sign_read   := NULL;
        vital_signs_ea_inout.flg_pain             := NULL;
        vital_signs_ea_inout.id_prof_read         := NULL;
        vital_signs_ea_inout.id_prof_cancel       := NULL;
        vital_signs_ea_inout.notes_cancel         := NULL;
        vital_signs_ea_inout.flg_state            := NULL;
        vital_signs_ea_inout.dt_cancel            := NULL;
        vital_signs_ea_inout.flg_available        := NULL;
        vital_signs_ea_inout.id_institution_read  := NULL;
        vital_signs_ea_inout.flg_status_epis      := NULL;
        vital_signs_ea_inout.id_visit             := NULL;
        vital_signs_ea_inout.id_episode           := NULL;
        vital_signs_ea_inout.id_patient           := NULL;
        vital_signs_ea_inout.relation_domain      := NULL;
        vital_signs_ea_inout.id_epis_triage       := NULL;
        vital_signs_ea_inout.dt_dg_last_update    := current_timestamp;
        vital_signs_ea_inout.create_user          := NULL;
        vital_signs_ea_inout.create_time          := NULL;
        vital_signs_ea_inout.create_institution   := NULL;
        vital_signs_ea_inout.update_user          := NULL;
        vital_signs_ea_inout.update_time          := NULL;
        vital_signs_ea_inout.update_institution   := NULL;
        vital_signs_ea_inout.id_vs_scales_element := NULL;
    END initrec;

    FUNCTION initrec RETURN vital_signs_ea%ROWTYPE IS
        l_vital_signs_ea vital_signs_ea%ROWTYPE;
    BEGIN
        l_vital_signs_ea.dt_dg_last_update := current_timestamp;
        RETURN l_vital_signs_ea;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN vital_signs_ea_tc IS
        data vital_signs_ea_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM vital_signs_ea
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN vital_signs_ea_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data vital_signs_ea_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_vital_signs_ea;
/
