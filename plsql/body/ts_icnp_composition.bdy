/*-- Last Change Revision: $Rev: 2028204 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:28 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY TS_ICNP_COMPOSITION
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Maio 23, 2012 11:45:53
| Created By: ALERT
*/
IS


   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_composition_in IN ICNP_COMPOSITION.ID_COMPOSITION%TYPE
      ,
      flg_type_in IN ICNP_COMPOSITION.FLG_TYPE%TYPE DEFAULT NULL,
      flg_nurse_tea_in IN ICNP_COMPOSITION.FLG_NURSE_TEA%TYPE DEFAULT NULL,
      flg_repeat_in IN ICNP_COMPOSITION.FLG_REPEAT%TYPE DEFAULT NULL,
      flg_gender_in IN ICNP_COMPOSITION.FLG_GENDER%TYPE DEFAULT NULL,
      flg_available_in IN ICNP_COMPOSITION.FLG_AVAILABLE%TYPE DEFAULT NULL,
      adw_last_update_in IN ICNP_COMPOSITION.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      code_icnp_composition_in IN ICNP_COMPOSITION.CODE_ICNP_COMPOSITION%TYPE DEFAULT NULL,
      id_vs_in IN ICNP_COMPOSITION.ID_VS%TYPE DEFAULT NULL,
      id_doc_template_in IN ICNP_COMPOSITION.ID_DOC_TEMPLATE%TYPE DEFAULT NULL,
      flg_task_in IN ICNP_COMPOSITION.FLG_TASK%TYPE DEFAULT NULL,
      flg_solved_in IN ICNP_COMPOSITION.FLG_SOLVED%TYPE DEFAULT NULL,
      id_content_in IN ICNP_COMPOSITION.ID_CONTENT%TYPE DEFAULT null,
      create_user_in IN ICNP_COMPOSITION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_COMPOSITION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_COMPOSITION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_COMPOSITION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_COMPOSITION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_COMPOSITION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_application_area_in IN ICNP_COMPOSITION.ID_APPLICATION_AREA%TYPE DEFAULT NULL,
      id_institution_in IN ICNP_COMPOSITION.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN ICNP_COMPOSITION.ID_SOFTWARE%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO ICNP_COMPOSITION (
         ID_COMPOSITION,
         FLG_TYPE,
         FLG_NURSE_TEA,
         FLG_REPEAT,
         FLG_GENDER,
         FLG_AVAILABLE,
         ADW_LAST_UPDATE,
         CODE_ICNP_COMPOSITION,
         ID_VS,
         ID_DOC_TEMPLATE,
         FLG_TASK,
         FLG_SOLVED,
         ID_CONTENT,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION,
         ID_APPLICATION_AREA,
         ID_INSTITUTION,
         ID_SOFTWARE
         )
      VALUES (
         id_composition_in,
         flg_type_in,
         flg_nurse_tea_in,
         flg_repeat_in,
         flg_gender_in,
         flg_available_in,
         adw_last_update_in,
         code_icnp_composition_in,
         id_vs_in,
         id_doc_template_in,
         flg_task_in,
         flg_solved_in,
         id_content_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in,
         id_application_area_in,
         id_institution_in,
         id_software_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'ICNP_COMPOSITION');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           IF l_name = 'ICN_ID_APPLICATION_AREA_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_APPLICATION_AREA'
               , value_in => id_application_area_in);
           END IF;
           IF l_name = 'ICN_ID_DOC_TEMPLATE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DOC_TEMPLATE'
               , value_in => id_doc_template_in);
           END IF;
           IF l_name = 'ICN_ID_SOFTWARE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SOFTWARE'
               , value_in => id_software_in);
           END IF;
           IF l_name = 'ICN_INST_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INSTITUTION'
               , value_in => id_institution_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_composition_in IN ICNP_COMPOSITION.ID_COMPOSITION%TYPE
      ,
      flg_type_in IN ICNP_COMPOSITION.FLG_TYPE%TYPE DEFAULT NULL,
      flg_nurse_tea_in IN ICNP_COMPOSITION.FLG_NURSE_TEA%TYPE DEFAULT NULL,
      flg_repeat_in IN ICNP_COMPOSITION.FLG_REPEAT%TYPE DEFAULT NULL,
      flg_gender_in IN ICNP_COMPOSITION.FLG_GENDER%TYPE DEFAULT NULL,
      flg_available_in IN ICNP_COMPOSITION.FLG_AVAILABLE%TYPE DEFAULT NULL,
      adw_last_update_in IN ICNP_COMPOSITION.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      code_icnp_composition_in IN ICNP_COMPOSITION.CODE_ICNP_COMPOSITION%TYPE DEFAULT NULL,
      id_vs_in IN ICNP_COMPOSITION.ID_VS%TYPE DEFAULT NULL,
      id_doc_template_in IN ICNP_COMPOSITION.ID_DOC_TEMPLATE%TYPE DEFAULT NULL,
      flg_task_in IN ICNP_COMPOSITION.FLG_TASK%TYPE DEFAULT NULL,
      flg_solved_in IN ICNP_COMPOSITION.FLG_SOLVED%TYPE DEFAULT NULL,
      id_content_in IN ICNP_COMPOSITION.ID_CONTENT%TYPE DEFAULT null,
      create_user_in IN ICNP_COMPOSITION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_COMPOSITION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_COMPOSITION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_COMPOSITION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_COMPOSITION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_COMPOSITION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_application_area_in IN ICNP_COMPOSITION.ID_APPLICATION_AREA%TYPE DEFAULT NULL,
      id_institution_in IN ICNP_COMPOSITION.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN ICNP_COMPOSITION.ID_SOFTWARE%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_composition_in => id_composition_in
      ,
      flg_type_in => flg_type_in,
      flg_nurse_tea_in => flg_nurse_tea_in,
      flg_repeat_in => flg_repeat_in,
      flg_gender_in => flg_gender_in,
      flg_available_in => flg_available_in,
      adw_last_update_in => adw_last_update_in,
      code_icnp_composition_in => code_icnp_composition_in,
      id_vs_in => id_vs_in,
      id_doc_template_in => id_doc_template_in,
      flg_task_in => flg_task_in,
      flg_solved_in => flg_solved_in,
      id_content_in => id_content_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      id_application_area_in => id_application_area_in,
      id_institution_in => id_institution_in,
      id_software_in => id_software_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN ICNP_COMPOSITION%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec ICNP_COMPOSITION%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_COMPOSITION := next_key (sequence_in);
      END IF;
      ins (
         id_composition_in => l_rec.ID_COMPOSITION
         ,
         flg_type_in => l_rec.FLG_TYPE,
         flg_nurse_tea_in => l_rec.FLG_NURSE_TEA,
         flg_repeat_in => l_rec.FLG_REPEAT,
         flg_gender_in => l_rec.FLG_GENDER,
         flg_available_in => l_rec.FLG_AVAILABLE,
         adw_last_update_in => l_rec.ADW_LAST_UPDATE,
         code_icnp_composition_in => l_rec.CODE_ICNP_COMPOSITION,
         id_vs_in => l_rec.ID_VS,
         id_doc_template_in => l_rec.ID_DOC_TEMPLATE,
         flg_task_in => l_rec.FLG_TASK,
         flg_solved_in => l_rec.FLG_SOLVED,
         id_content_in => l_rec.ID_CONTENT,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION,
         id_application_area_in => l_rec.ID_APPLICATION_AREA,
         id_institution_in => l_rec.ID_INSTITUTION,
         id_software_in => l_rec.ID_SOFTWARE
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN ICNP_COMPOSITION%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN ICNP_COMPOSITION.ID_COMPOSITION%TYPE

   IS
     retval ICNP_COMPOSITION.ID_COMPOSITION%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_ICNP_COMPOSITION.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_ICNP_COMPOSITION')
           );
   END next_key;

   PROCEDURE ins (
      flg_type_in IN ICNP_COMPOSITION.FLG_TYPE%TYPE DEFAULT NULL,
      flg_nurse_tea_in IN ICNP_COMPOSITION.FLG_NURSE_TEA%TYPE DEFAULT NULL,
      flg_repeat_in IN ICNP_COMPOSITION.FLG_REPEAT%TYPE DEFAULT NULL,
      flg_gender_in IN ICNP_COMPOSITION.FLG_GENDER%TYPE DEFAULT NULL,
      flg_available_in IN ICNP_COMPOSITION.FLG_AVAILABLE%TYPE DEFAULT NULL,
      adw_last_update_in IN ICNP_COMPOSITION.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      code_icnp_composition_in IN ICNP_COMPOSITION.CODE_ICNP_COMPOSITION%TYPE DEFAULT NULL,
      id_vs_in IN ICNP_COMPOSITION.ID_VS%TYPE DEFAULT NULL,
      id_doc_template_in IN ICNP_COMPOSITION.ID_DOC_TEMPLATE%TYPE DEFAULT NULL,
      flg_task_in IN ICNP_COMPOSITION.FLG_TASK%TYPE DEFAULT NULL,
      flg_solved_in IN ICNP_COMPOSITION.FLG_SOLVED%TYPE DEFAULT NULL,
      id_content_in IN ICNP_COMPOSITION.ID_CONTENT%TYPE DEFAULT null,
      create_user_in IN ICNP_COMPOSITION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_COMPOSITION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_COMPOSITION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_COMPOSITION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_COMPOSITION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_COMPOSITION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_application_area_in IN ICNP_COMPOSITION.ID_APPLICATION_AREA%TYPE DEFAULT NULL,
      id_institution_in IN ICNP_COMPOSITION.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN ICNP_COMPOSITION.ID_SOFTWARE%TYPE DEFAULT NULL,
      id_composition_out IN OUT ICNP_COMPOSITION.ID_COMPOSITION%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky ICNP_COMPOSITION.ID_COMPOSITION%TYPE := next_key;
   BEGIN
      ins (
         id_composition_in => l_pky,
         flg_type_in => flg_type_in,
         flg_nurse_tea_in => flg_nurse_tea_in,
         flg_repeat_in => flg_repeat_in,
         flg_gender_in => flg_gender_in,
         flg_available_in => flg_available_in,
         adw_last_update_in => adw_last_update_in,
         code_icnp_composition_in => code_icnp_composition_in,
         id_vs_in => id_vs_in,
         id_doc_template_in => id_doc_template_in,
         flg_task_in => flg_task_in,
         flg_solved_in => flg_solved_in,
         id_content_in => id_content_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_application_area_in => id_application_area_in,
         id_institution_in => id_institution_in,
         id_software_in => id_software_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_composition_out := l_pky;
   END ins;

   PROCEDURE ins (
      flg_type_in IN ICNP_COMPOSITION.FLG_TYPE%TYPE DEFAULT NULL,
      flg_nurse_tea_in IN ICNP_COMPOSITION.FLG_NURSE_TEA%TYPE DEFAULT NULL,
      flg_repeat_in IN ICNP_COMPOSITION.FLG_REPEAT%TYPE DEFAULT NULL,
      flg_gender_in IN ICNP_COMPOSITION.FLG_GENDER%TYPE DEFAULT NULL,
      flg_available_in IN ICNP_COMPOSITION.FLG_AVAILABLE%TYPE DEFAULT NULL,
      adw_last_update_in IN ICNP_COMPOSITION.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      code_icnp_composition_in IN ICNP_COMPOSITION.CODE_ICNP_COMPOSITION%TYPE DEFAULT NULL,
      id_vs_in IN ICNP_COMPOSITION.ID_VS%TYPE DEFAULT NULL,
      id_doc_template_in IN ICNP_COMPOSITION.ID_DOC_TEMPLATE%TYPE DEFAULT NULL,
      flg_task_in IN ICNP_COMPOSITION.FLG_TASK%TYPE DEFAULT NULL,
      flg_solved_in IN ICNP_COMPOSITION.FLG_SOLVED%TYPE DEFAULT NULL,
      id_content_in IN ICNP_COMPOSITION.ID_CONTENT%TYPE DEFAULT null,
      create_user_in IN ICNP_COMPOSITION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_COMPOSITION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_COMPOSITION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_COMPOSITION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_COMPOSITION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_COMPOSITION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_application_area_in IN ICNP_COMPOSITION.ID_APPLICATION_AREA%TYPE DEFAULT NULL,
      id_institution_in IN ICNP_COMPOSITION.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN ICNP_COMPOSITION.ID_SOFTWARE%TYPE DEFAULT NULL,
      id_composition_out IN OUT ICNP_COMPOSITION.ID_COMPOSITION%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      flg_type_in => flg_type_in,
      flg_nurse_tea_in => flg_nurse_tea_in,
      flg_repeat_in => flg_repeat_in,
      flg_gender_in => flg_gender_in,
      flg_available_in => flg_available_in,
      adw_last_update_in => adw_last_update_in,
      code_icnp_composition_in => code_icnp_composition_in,
      id_vs_in => id_vs_in,
      id_doc_template_in => id_doc_template_in,
      flg_task_in => flg_task_in,
      flg_solved_in => flg_solved_in,
      id_content_in => id_content_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      id_application_area_in => id_application_area_in,
      id_institution_in => id_institution_in,
      id_software_in => id_software_in,
      id_composition_out => id_composition_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      flg_type_in IN ICNP_COMPOSITION.FLG_TYPE%TYPE DEFAULT NULL,
      flg_nurse_tea_in IN ICNP_COMPOSITION.FLG_NURSE_TEA%TYPE DEFAULT NULL,
      flg_repeat_in IN ICNP_COMPOSITION.FLG_REPEAT%TYPE DEFAULT NULL,
      flg_gender_in IN ICNP_COMPOSITION.FLG_GENDER%TYPE DEFAULT NULL,
      flg_available_in IN ICNP_COMPOSITION.FLG_AVAILABLE%TYPE DEFAULT NULL,
      adw_last_update_in IN ICNP_COMPOSITION.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      code_icnp_composition_in IN ICNP_COMPOSITION.CODE_ICNP_COMPOSITION%TYPE DEFAULT NULL,
      id_vs_in IN ICNP_COMPOSITION.ID_VS%TYPE DEFAULT NULL,
      id_doc_template_in IN ICNP_COMPOSITION.ID_DOC_TEMPLATE%TYPE DEFAULT NULL,
      flg_task_in IN ICNP_COMPOSITION.FLG_TASK%TYPE DEFAULT NULL,
      flg_solved_in IN ICNP_COMPOSITION.FLG_SOLVED%TYPE DEFAULT NULL,
      id_content_in IN ICNP_COMPOSITION.ID_CONTENT%TYPE DEFAULT null,
      create_user_in IN ICNP_COMPOSITION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_COMPOSITION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_COMPOSITION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_COMPOSITION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_COMPOSITION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_COMPOSITION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_application_area_in IN ICNP_COMPOSITION.ID_APPLICATION_AREA%TYPE DEFAULT NULL,
      id_institution_in IN ICNP_COMPOSITION.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN ICNP_COMPOSITION.ID_SOFTWARE%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         ICNP_COMPOSITION.ID_COMPOSITION%TYPE
   IS
        l_pky ICNP_COMPOSITION.ID_COMPOSITION%TYPE := next_key;
   BEGIN
      ins (
         id_composition_in => l_pky,
         flg_type_in => flg_type_in,
         flg_nurse_tea_in => flg_nurse_tea_in,
         flg_repeat_in => flg_repeat_in,
         flg_gender_in => flg_gender_in,
         flg_available_in => flg_available_in,
         adw_last_update_in => adw_last_update_in,
         code_icnp_composition_in => code_icnp_composition_in,
         id_vs_in => id_vs_in,
         id_doc_template_in => id_doc_template_in,
         flg_task_in => flg_task_in,
         flg_solved_in => flg_solved_in,
         id_content_in => id_content_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_application_area_in => id_application_area_in,
         id_institution_in => id_institution_in,
         id_software_in => id_software_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      flg_type_in IN ICNP_COMPOSITION.FLG_TYPE%TYPE DEFAULT NULL,
      flg_nurse_tea_in IN ICNP_COMPOSITION.FLG_NURSE_TEA%TYPE DEFAULT NULL,
      flg_repeat_in IN ICNP_COMPOSITION.FLG_REPEAT%TYPE DEFAULT NULL,
      flg_gender_in IN ICNP_COMPOSITION.FLG_GENDER%TYPE DEFAULT NULL,
      flg_available_in IN ICNP_COMPOSITION.FLG_AVAILABLE%TYPE DEFAULT NULL,
      adw_last_update_in IN ICNP_COMPOSITION.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      code_icnp_composition_in IN ICNP_COMPOSITION.CODE_ICNP_COMPOSITION%TYPE DEFAULT NULL,
      id_vs_in IN ICNP_COMPOSITION.ID_VS%TYPE DEFAULT NULL,
      id_doc_template_in IN ICNP_COMPOSITION.ID_DOC_TEMPLATE%TYPE DEFAULT NULL,
      flg_task_in IN ICNP_COMPOSITION.FLG_TASK%TYPE DEFAULT NULL,
      flg_solved_in IN ICNP_COMPOSITION.FLG_SOLVED%TYPE DEFAULT NULL,
      id_content_in IN ICNP_COMPOSITION.ID_CONTENT%TYPE DEFAULT null,
      create_user_in IN ICNP_COMPOSITION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_COMPOSITION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_COMPOSITION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_COMPOSITION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_COMPOSITION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_COMPOSITION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_application_area_in IN ICNP_COMPOSITION.ID_APPLICATION_AREA%TYPE DEFAULT NULL,
      id_institution_in IN ICNP_COMPOSITION.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN ICNP_COMPOSITION.ID_SOFTWARE%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         ICNP_COMPOSITION.ID_COMPOSITION%TYPE
   IS
        l_pky ICNP_COMPOSITION.ID_COMPOSITION%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_composition_in => l_pky,
         flg_type_in => flg_type_in,
         flg_nurse_tea_in => flg_nurse_tea_in,
         flg_repeat_in => flg_repeat_in,
         flg_gender_in => flg_gender_in,
         flg_available_in => flg_available_in,
         adw_last_update_in => adw_last_update_in,
         code_icnp_composition_in => code_icnp_composition_in,
         id_vs_in => id_vs_in,
         id_doc_template_in => id_doc_template_in,
         flg_task_in => flg_task_in,
         flg_solved_in => flg_solved_in,
         id_content_in => id_content_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_application_area_in => id_application_area_in,
         id_institution_in => id_institution_in,
         id_software_in => id_software_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      flg_type_in IN ICNP_COMPOSITION.FLG_TYPE%TYPE DEFAULT NULL,
      flg_nurse_tea_in IN ICNP_COMPOSITION.FLG_NURSE_TEA%TYPE DEFAULT NULL,
      flg_repeat_in IN ICNP_COMPOSITION.FLG_REPEAT%TYPE DEFAULT NULL,
      flg_gender_in IN ICNP_COMPOSITION.FLG_GENDER%TYPE DEFAULT NULL,
      flg_available_in IN ICNP_COMPOSITION.FLG_AVAILABLE%TYPE DEFAULT NULL,
      adw_last_update_in IN ICNP_COMPOSITION.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      code_icnp_composition_in IN ICNP_COMPOSITION.CODE_ICNP_COMPOSITION%TYPE DEFAULT NULL,
      id_vs_in IN ICNP_COMPOSITION.ID_VS%TYPE DEFAULT NULL,
      id_doc_template_in IN ICNP_COMPOSITION.ID_DOC_TEMPLATE%TYPE DEFAULT NULL,
      flg_task_in IN ICNP_COMPOSITION.FLG_TASK%TYPE DEFAULT NULL,
      flg_solved_in IN ICNP_COMPOSITION.FLG_SOLVED%TYPE DEFAULT NULL,
      id_content_in IN ICNP_COMPOSITION.ID_CONTENT%TYPE DEFAULT null,
      create_user_in IN ICNP_COMPOSITION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_COMPOSITION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_COMPOSITION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_COMPOSITION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_COMPOSITION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_COMPOSITION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_application_area_in IN ICNP_COMPOSITION.ID_APPLICATION_AREA%TYPE DEFAULT NULL,
      id_institution_in IN ICNP_COMPOSITION.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN ICNP_COMPOSITION.ID_SOFTWARE%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky ICNP_COMPOSITION.ID_COMPOSITION%TYPE := next_key;
   BEGIN
      ins (
         id_composition_in => l_pky,
         flg_type_in => flg_type_in,
         flg_nurse_tea_in => flg_nurse_tea_in,
         flg_repeat_in => flg_repeat_in,
         flg_gender_in => flg_gender_in,
         flg_available_in => flg_available_in,
         adw_last_update_in => adw_last_update_in,
         code_icnp_composition_in => code_icnp_composition_in,
         id_vs_in => id_vs_in,
         id_doc_template_in => id_doc_template_in,
         flg_task_in => flg_task_in,
         flg_solved_in => flg_solved_in,
         id_content_in => id_content_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_application_area_in => id_application_area_in,
         id_institution_in => id_institution_in,
         id_software_in => id_software_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      flg_type_in IN ICNP_COMPOSITION.FLG_TYPE%TYPE DEFAULT NULL,
      flg_nurse_tea_in IN ICNP_COMPOSITION.FLG_NURSE_TEA%TYPE DEFAULT NULL,
      flg_repeat_in IN ICNP_COMPOSITION.FLG_REPEAT%TYPE DEFAULT NULL,
      flg_gender_in IN ICNP_COMPOSITION.FLG_GENDER%TYPE DEFAULT NULL,
      flg_available_in IN ICNP_COMPOSITION.FLG_AVAILABLE%TYPE DEFAULT NULL,
      adw_last_update_in IN ICNP_COMPOSITION.ADW_LAST_UPDATE%TYPE DEFAULT sysdate,
      code_icnp_composition_in IN ICNP_COMPOSITION.CODE_ICNP_COMPOSITION%TYPE DEFAULT NULL,
      id_vs_in IN ICNP_COMPOSITION.ID_VS%TYPE DEFAULT NULL,
      id_doc_template_in IN ICNP_COMPOSITION.ID_DOC_TEMPLATE%TYPE DEFAULT NULL,
      flg_task_in IN ICNP_COMPOSITION.FLG_TASK%TYPE DEFAULT NULL,
      flg_solved_in IN ICNP_COMPOSITION.FLG_SOLVED%TYPE DEFAULT NULL,
      id_content_in IN ICNP_COMPOSITION.ID_CONTENT%TYPE DEFAULT null,
      create_user_in IN ICNP_COMPOSITION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_COMPOSITION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_COMPOSITION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_COMPOSITION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_COMPOSITION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_COMPOSITION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_application_area_in IN ICNP_COMPOSITION.ID_APPLICATION_AREA%TYPE DEFAULT NULL,
      id_institution_in IN ICNP_COMPOSITION.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN ICNP_COMPOSITION.ID_SOFTWARE%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky ICNP_COMPOSITION.ID_COMPOSITION%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_composition_in => l_pky,
         flg_type_in => flg_type_in,
         flg_nurse_tea_in => flg_nurse_tea_in,
         flg_repeat_in => flg_repeat_in,
         flg_gender_in => flg_gender_in,
         flg_available_in => flg_available_in,
         adw_last_update_in => adw_last_update_in,
         code_icnp_composition_in => code_icnp_composition_in,
         id_vs_in => id_vs_in,
         id_doc_template_in => id_doc_template_in,
         flg_task_in => flg_task_in,
         flg_solved_in => flg_solved_in,
         id_content_in => id_content_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_application_area_in => id_application_area_in,
         id_institution_in => id_institution_in,
         id_software_in => id_software_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN ICNP_COMPOSITION_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
         FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO ICNP_COMPOSITION VALUES rows_in (indx) RETURNING ROWID BULK COLLECT INTO rows_out;
      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQLERRM (-SQL%BULK_EXCEPTIONS (indx).ERROR_CODE)
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_COMPOSITION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_COMPOSITION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_TYPE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_TYPE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_NURSE_TEA _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_NURSE_TEA
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_REPEAT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_REPEAT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_GENDER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_GENDER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_AVAILABLE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_AVAILABLE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ADW_LAST_UPDATE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ADW_LAST_UPDATE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CODE_ICNP_COMPOSITION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CODE_ICNP_COMPOSITION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_VS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_VS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_DOC_TEMPLATE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_DOC_TEMPLATE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_TASK _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_TASK
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_SOLVED _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_SOLVED
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CONTENT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_CONTENT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_APPLICATION_AREA _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_APPLICATION_AREA
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SOFTWARE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_SOFTWARE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'ICNP_COMPOSITION'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN ICNP_COMPOSITION_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_composition_in IN ICNP_COMPOSITION.ID_COMPOSITION%TYPE,
      flg_type_in IN ICNP_COMPOSITION.FLG_TYPE%TYPE DEFAULT NULL,
      FLG_TYPE_nin IN BOOLEAN := TRUE,
      flg_nurse_tea_in IN ICNP_COMPOSITION.FLG_NURSE_TEA%TYPE DEFAULT NULL,
      FLG_NURSE_TEA_nin IN BOOLEAN := TRUE,
      flg_repeat_in IN ICNP_COMPOSITION.FLG_REPEAT%TYPE DEFAULT NULL,
      FLG_REPEAT_nin IN BOOLEAN := TRUE,
      flg_gender_in IN ICNP_COMPOSITION.FLG_GENDER%TYPE DEFAULT NULL,
      FLG_GENDER_nin IN BOOLEAN := TRUE,
      flg_available_in IN ICNP_COMPOSITION.FLG_AVAILABLE%TYPE DEFAULT NULL,
      FLG_AVAILABLE_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN ICNP_COMPOSITION.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      code_icnp_composition_in IN ICNP_COMPOSITION.CODE_ICNP_COMPOSITION%TYPE DEFAULT NULL,
      CODE_ICNP_COMPOSITION_nin IN BOOLEAN := TRUE,
      id_vs_in IN ICNP_COMPOSITION.ID_VS%TYPE DEFAULT NULL,
      ID_VS_nin IN BOOLEAN := TRUE,
      id_doc_template_in IN ICNP_COMPOSITION.ID_DOC_TEMPLATE%TYPE DEFAULT NULL,
      ID_DOC_TEMPLATE_nin IN BOOLEAN := TRUE,
      flg_task_in IN ICNP_COMPOSITION.FLG_TASK%TYPE DEFAULT NULL,
      FLG_TASK_nin IN BOOLEAN := TRUE,
      flg_solved_in IN ICNP_COMPOSITION.FLG_SOLVED%TYPE DEFAULT NULL,
      FLG_SOLVED_nin IN BOOLEAN := TRUE,
      id_content_in IN ICNP_COMPOSITION.ID_CONTENT%TYPE DEFAULT NULL,
      ID_CONTENT_nin IN BOOLEAN := TRUE,
      create_user_in IN ICNP_COMPOSITION.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN ICNP_COMPOSITION.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN ICNP_COMPOSITION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN ICNP_COMPOSITION.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN ICNP_COMPOSITION.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN ICNP_COMPOSITION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_application_area_in IN ICNP_COMPOSITION.ID_APPLICATION_AREA%TYPE DEFAULT NULL,
      ID_APPLICATION_AREA_nin IN BOOLEAN := TRUE,
      id_institution_in IN ICNP_COMPOSITION.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_software_in IN ICNP_COMPOSITION.ID_SOFTWARE%TYPE DEFAULT NULL,
      ID_SOFTWARE_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_FLG_TYPE_n NUMBER(1);
   l_FLG_NURSE_TEA_n NUMBER(1);
   l_FLG_REPEAT_n NUMBER(1);
   l_FLG_GENDER_n NUMBER(1);
   l_FLG_AVAILABLE_n NUMBER(1);
   l_ADW_LAST_UPDATE_n NUMBER(1);
   l_CODE_ICNP_COMPOSITION_n NUMBER(1);
   l_ID_VS_n NUMBER(1);
   l_ID_DOC_TEMPLATE_n NUMBER(1);
   l_FLG_TASK_n NUMBER(1);
   l_FLG_SOLVED_n NUMBER(1);
   l_ID_CONTENT_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_ID_APPLICATION_AREA_n NUMBER(1);
   l_ID_INSTITUTION_n NUMBER(1);
   l_ID_SOFTWARE_n NUMBER(1);
   BEGIN

   l_FLG_TYPE_n := sys.diutil.bool_to_int(FLG_TYPE_nin);
   l_FLG_NURSE_TEA_n := sys.diutil.bool_to_int(FLG_NURSE_TEA_nin);
   l_FLG_REPEAT_n := sys.diutil.bool_to_int(FLG_REPEAT_nin);
   l_FLG_GENDER_n := sys.diutil.bool_to_int(FLG_GENDER_nin);
   l_FLG_AVAILABLE_n := sys.diutil.bool_to_int(FLG_AVAILABLE_nin);
   l_ADW_LAST_UPDATE_n := sys.diutil.bool_to_int(ADW_LAST_UPDATE_nin);
   l_CODE_ICNP_COMPOSITION_n := sys.diutil.bool_to_int(CODE_ICNP_COMPOSITION_nin);
   l_ID_VS_n := sys.diutil.bool_to_int(ID_VS_nin);
   l_ID_DOC_TEMPLATE_n := sys.diutil.bool_to_int(ID_DOC_TEMPLATE_nin);
   l_FLG_TASK_n := sys.diutil.bool_to_int(FLG_TASK_nin);
   l_FLG_SOLVED_n := sys.diutil.bool_to_int(FLG_SOLVED_nin);
   l_ID_CONTENT_n := sys.diutil.bool_to_int(ID_CONTENT_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
   l_ID_APPLICATION_AREA_n := sys.diutil.bool_to_int(ID_APPLICATION_AREA_nin);
   l_ID_INSTITUTION_n := sys.diutil.bool_to_int(ID_INSTITUTION_nin);
   l_ID_SOFTWARE_n := sys.diutil.bool_to_int(ID_SOFTWARE_nin);


         UPDATE ICNP_COMPOSITION SET
     FLG_TYPE = decode (l_FLG_TYPE_n,0,flg_type_in, NVL (flg_type_in, FLG_TYPE)),
     FLG_NURSE_TEA = decode (l_FLG_NURSE_TEA_n,0,flg_nurse_tea_in, NVL (flg_nurse_tea_in, FLG_NURSE_TEA)),
     FLG_REPEAT = decode (l_FLG_REPEAT_n,0,flg_repeat_in, NVL (flg_repeat_in, FLG_REPEAT)),
     FLG_GENDER = decode (l_FLG_GENDER_n,0,flg_gender_in, NVL (flg_gender_in, FLG_GENDER)),
     FLG_AVAILABLE = decode (l_FLG_AVAILABLE_n,0,flg_available_in, NVL (flg_available_in, FLG_AVAILABLE)),
     ADW_LAST_UPDATE = decode (l_ADW_LAST_UPDATE_n,0,adw_last_update_in, NVL (adw_last_update_in, ADW_LAST_UPDATE)),
     CODE_ICNP_COMPOSITION = decode (l_CODE_ICNP_COMPOSITION_n,0,code_icnp_composition_in, NVL (code_icnp_composition_in, CODE_ICNP_COMPOSITION)),
     ID_VS = decode (l_ID_VS_n,0,id_vs_in, NVL (id_vs_in, ID_VS)),
     ID_DOC_TEMPLATE = decode (l_ID_DOC_TEMPLATE_n,0,id_doc_template_in, NVL (id_doc_template_in, ID_DOC_TEMPLATE)),
     FLG_TASK = decode (l_FLG_TASK_n,0,flg_task_in, NVL (flg_task_in, FLG_TASK)),
     FLG_SOLVED = decode (l_FLG_SOLVED_n,0,flg_solved_in, NVL (flg_solved_in, FLG_SOLVED)),
     ID_CONTENT = decode (l_ID_CONTENT_n,0,id_content_in, NVL (id_content_in, ID_CONTENT)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION)),
     ID_APPLICATION_AREA = decode (l_ID_APPLICATION_AREA_n,0,id_application_area_in, NVL (id_application_area_in, ID_APPLICATION_AREA)),
     ID_INSTITUTION = decode (l_ID_INSTITUTION_n,0,id_institution_in, NVL (id_institution_in, ID_INSTITUTION)),
     ID_SOFTWARE = decode (l_ID_SOFTWARE_n,0,id_software_in, NVL (id_software_in, ID_SOFTWARE))
          WHERE
             ID_COMPOSITION = id_composition_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'ICNP_COMPOSITION');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           IF l_name = 'ICN_ID_APPLICATION_AREA_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_APPLICATION_AREA'
               , value_in => id_application_area_in);
           END IF;
           IF l_name = 'ICN_ID_DOC_TEMPLATE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DOC_TEMPLATE'
               , value_in => id_doc_template_in);
           END IF;
           IF l_name = 'ICN_ID_SOFTWARE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SOFTWARE'
               , value_in => id_software_in);
           END IF;
           IF l_name = 'ICN_INST_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INSTITUTION'
               , value_in => id_institution_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_composition_in IN ICNP_COMPOSITION.ID_COMPOSITION%TYPE,
      flg_type_in IN ICNP_COMPOSITION.FLG_TYPE%TYPE DEFAULT NULL,
      FLG_TYPE_nin IN BOOLEAN := TRUE,
      flg_nurse_tea_in IN ICNP_COMPOSITION.FLG_NURSE_TEA%TYPE DEFAULT NULL,
      FLG_NURSE_TEA_nin IN BOOLEAN := TRUE,
      flg_repeat_in IN ICNP_COMPOSITION.FLG_REPEAT%TYPE DEFAULT NULL,
      FLG_REPEAT_nin IN BOOLEAN := TRUE,
      flg_gender_in IN ICNP_COMPOSITION.FLG_GENDER%TYPE DEFAULT NULL,
      FLG_GENDER_nin IN BOOLEAN := TRUE,
      flg_available_in IN ICNP_COMPOSITION.FLG_AVAILABLE%TYPE DEFAULT NULL,
      FLG_AVAILABLE_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN ICNP_COMPOSITION.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      code_icnp_composition_in IN ICNP_COMPOSITION.CODE_ICNP_COMPOSITION%TYPE DEFAULT NULL,
      CODE_ICNP_COMPOSITION_nin IN BOOLEAN := TRUE,
      id_vs_in IN ICNP_COMPOSITION.ID_VS%TYPE DEFAULT NULL,
      ID_VS_nin IN BOOLEAN := TRUE,
      id_doc_template_in IN ICNP_COMPOSITION.ID_DOC_TEMPLATE%TYPE DEFAULT NULL,
      ID_DOC_TEMPLATE_nin IN BOOLEAN := TRUE,
      flg_task_in IN ICNP_COMPOSITION.FLG_TASK%TYPE DEFAULT NULL,
      FLG_TASK_nin IN BOOLEAN := TRUE,
      flg_solved_in IN ICNP_COMPOSITION.FLG_SOLVED%TYPE DEFAULT NULL,
      FLG_SOLVED_nin IN BOOLEAN := TRUE,
      id_content_in IN ICNP_COMPOSITION.ID_CONTENT%TYPE DEFAULT NULL,
      ID_CONTENT_nin IN BOOLEAN := TRUE,
      create_user_in IN ICNP_COMPOSITION.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN ICNP_COMPOSITION.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN ICNP_COMPOSITION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN ICNP_COMPOSITION.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN ICNP_COMPOSITION.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN ICNP_COMPOSITION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_application_area_in IN ICNP_COMPOSITION.ID_APPLICATION_AREA%TYPE DEFAULT NULL,
      ID_APPLICATION_AREA_nin IN BOOLEAN := TRUE,
      id_institution_in IN ICNP_COMPOSITION.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_software_in IN ICNP_COMPOSITION.ID_SOFTWARE%TYPE DEFAULT NULL,
      ID_SOFTWARE_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_composition_in => id_composition_in,
      flg_type_in => flg_type_in,
      FLG_TYPE_nin => FLG_TYPE_nin,
      flg_nurse_tea_in => flg_nurse_tea_in,
      FLG_NURSE_TEA_nin => FLG_NURSE_TEA_nin,
      flg_repeat_in => flg_repeat_in,
      FLG_REPEAT_nin => FLG_REPEAT_nin,
      flg_gender_in => flg_gender_in,
      FLG_GENDER_nin => FLG_GENDER_nin,
      flg_available_in => flg_available_in,
      FLG_AVAILABLE_nin => FLG_AVAILABLE_nin,
      adw_last_update_in => adw_last_update_in,
      ADW_LAST_UPDATE_nin => ADW_LAST_UPDATE_nin,
      code_icnp_composition_in => code_icnp_composition_in,
      CODE_ICNP_COMPOSITION_nin => CODE_ICNP_COMPOSITION_nin,
      id_vs_in => id_vs_in,
      ID_VS_nin => ID_VS_nin,
      id_doc_template_in => id_doc_template_in,
      ID_DOC_TEMPLATE_nin => ID_DOC_TEMPLATE_nin,
      flg_task_in => flg_task_in,
      FLG_TASK_nin => FLG_TASK_nin,
      flg_solved_in => flg_solved_in,
      FLG_SOLVED_nin => FLG_SOLVED_nin,
      id_content_in => id_content_in,
      ID_CONTENT_nin => ID_CONTENT_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      id_application_area_in => id_application_area_in,
      ID_APPLICATION_AREA_nin => ID_APPLICATION_AREA_nin,
      id_institution_in => id_institution_in,
      ID_INSTITUTION_nin => ID_INSTITUTION_nin,
      id_software_in => id_software_in,
      ID_SOFTWARE_nin => ID_SOFTWARE_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      flg_type_in IN ICNP_COMPOSITION.FLG_TYPE%TYPE DEFAULT NULL,
      FLG_TYPE_nin IN BOOLEAN := TRUE,
      flg_nurse_tea_in IN ICNP_COMPOSITION.FLG_NURSE_TEA%TYPE DEFAULT NULL,
      FLG_NURSE_TEA_nin IN BOOLEAN := TRUE,
      flg_repeat_in IN ICNP_COMPOSITION.FLG_REPEAT%TYPE DEFAULT NULL,
      FLG_REPEAT_nin IN BOOLEAN := TRUE,
      flg_gender_in IN ICNP_COMPOSITION.FLG_GENDER%TYPE DEFAULT NULL,
      FLG_GENDER_nin IN BOOLEAN := TRUE,
      flg_available_in IN ICNP_COMPOSITION.FLG_AVAILABLE%TYPE DEFAULT NULL,
      FLG_AVAILABLE_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN ICNP_COMPOSITION.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      code_icnp_composition_in IN ICNP_COMPOSITION.CODE_ICNP_COMPOSITION%TYPE DEFAULT NULL,
      CODE_ICNP_COMPOSITION_nin IN BOOLEAN := TRUE,
      id_vs_in IN ICNP_COMPOSITION.ID_VS%TYPE DEFAULT NULL,
      ID_VS_nin IN BOOLEAN := TRUE,
      id_doc_template_in IN ICNP_COMPOSITION.ID_DOC_TEMPLATE%TYPE DEFAULT NULL,
      ID_DOC_TEMPLATE_nin IN BOOLEAN := TRUE,
      flg_task_in IN ICNP_COMPOSITION.FLG_TASK%TYPE DEFAULT NULL,
      FLG_TASK_nin IN BOOLEAN := TRUE,
      flg_solved_in IN ICNP_COMPOSITION.FLG_SOLVED%TYPE DEFAULT NULL,
      FLG_SOLVED_nin IN BOOLEAN := TRUE,
      id_content_in IN ICNP_COMPOSITION.ID_CONTENT%TYPE DEFAULT NULL,
      ID_CONTENT_nin IN BOOLEAN := TRUE,
      create_user_in IN ICNP_COMPOSITION.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN ICNP_COMPOSITION.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN ICNP_COMPOSITION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN ICNP_COMPOSITION.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN ICNP_COMPOSITION.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN ICNP_COMPOSITION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_application_area_in IN ICNP_COMPOSITION.ID_APPLICATION_AREA%TYPE DEFAULT NULL,
      ID_APPLICATION_AREA_nin IN BOOLEAN := TRUE,
      id_institution_in IN ICNP_COMPOSITION.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_software_in IN ICNP_COMPOSITION.ID_SOFTWARE%TYPE DEFAULT NULL,
      ID_SOFTWARE_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_FLG_TYPE_n NUMBER(1);
   l_FLG_NURSE_TEA_n NUMBER(1);
   l_FLG_REPEAT_n NUMBER(1);
   l_FLG_GENDER_n NUMBER(1);
   l_FLG_AVAILABLE_n NUMBER(1);
   l_ADW_LAST_UPDATE_n NUMBER(1);
   l_CODE_ICNP_COMPOSITION_n NUMBER(1);
   l_ID_VS_n NUMBER(1);
   l_ID_DOC_TEMPLATE_n NUMBER(1);
   l_FLG_TASK_n NUMBER(1);
   l_FLG_SOLVED_n NUMBER(1);
   l_ID_CONTENT_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_ID_APPLICATION_AREA_n NUMBER(1);
   l_ID_INSTITUTION_n NUMBER(1);
   l_ID_SOFTWARE_n NUMBER(1);
      id_composition_in ICNP_COMPOSITION.ID_COMPOSITION%TYPE;
   BEGIN



      l_FLG_TYPE_n := sys.diutil.bool_to_int(FLG_TYPE_nin);
      l_FLG_NURSE_TEA_n := sys.diutil.bool_to_int(FLG_NURSE_TEA_nin);
      l_FLG_REPEAT_n := sys.diutil.bool_to_int(FLG_REPEAT_nin);
      l_FLG_GENDER_n := sys.diutil.bool_to_int(FLG_GENDER_nin);
      l_FLG_AVAILABLE_n := sys.diutil.bool_to_int(FLG_AVAILABLE_nin);
      l_ADW_LAST_UPDATE_n := sys.diutil.bool_to_int(ADW_LAST_UPDATE_nin);
      l_CODE_ICNP_COMPOSITION_n := sys.diutil.bool_to_int(CODE_ICNP_COMPOSITION_nin);
      l_ID_VS_n := sys.diutil.bool_to_int(ID_VS_nin);
      l_ID_DOC_TEMPLATE_n := sys.diutil.bool_to_int(ID_DOC_TEMPLATE_nin);
      l_FLG_TASK_n := sys.diutil.bool_to_int(FLG_TASK_nin);
      l_FLG_SOLVED_n := sys.diutil.bool_to_int(FLG_SOLVED_nin);
      l_ID_CONTENT_n := sys.diutil.bool_to_int(ID_CONTENT_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
      l_ID_APPLICATION_AREA_n := sys.diutil.bool_to_int(ID_APPLICATION_AREA_nin);
      l_ID_INSTITUTION_n := sys.diutil.bool_to_int(ID_INSTITUTION_nin);
      l_ID_SOFTWARE_n := sys.diutil.bool_to_int(ID_SOFTWARE_nin);



l_sql := 'UPDATE ICNP_COMPOSITION SET '
     || ' FLG_TYPE = decode (' || l_FLG_TYPE_n || ',0,:flg_type_in, NVL (:flg_type_in, FLG_TYPE)) '|| ','
     || ' FLG_NURSE_TEA = decode (' || l_FLG_NURSE_TEA_n || ',0,:flg_nurse_tea_in, NVL (:flg_nurse_tea_in, FLG_NURSE_TEA)) '|| ','
     || ' FLG_REPEAT = decode (' || l_FLG_REPEAT_n || ',0,:flg_repeat_in, NVL (:flg_repeat_in, FLG_REPEAT)) '|| ','
     || ' FLG_GENDER = decode (' || l_FLG_GENDER_n || ',0,:flg_gender_in, NVL (:flg_gender_in, FLG_GENDER)) '|| ','
     || ' FLG_AVAILABLE = decode (' || l_FLG_AVAILABLE_n || ',0,:flg_available_in, NVL (:flg_available_in, FLG_AVAILABLE)) '|| ','
     || ' ADW_LAST_UPDATE = decode (' || l_ADW_LAST_UPDATE_n || ',0,:adw_last_update_in, NVL (:adw_last_update_in, ADW_LAST_UPDATE)) '|| ','
     || ' CODE_ICNP_COMPOSITION = decode (' || l_CODE_ICNP_COMPOSITION_n || ',0,:code_icnp_composition_in, NVL (:code_icnp_composition_in, CODE_ICNP_COMPOSITION)) '|| ','
     || ' ID_VS = decode (' || l_ID_VS_n || ',0,:id_vs_in, NVL (:id_vs_in, ID_VS)) '|| ','
     || ' ID_DOC_TEMPLATE = decode (' || l_ID_DOC_TEMPLATE_n || ',0,:id_doc_template_in, NVL (:id_doc_template_in, ID_DOC_TEMPLATE)) '|| ','
     || ' FLG_TASK = decode (' || l_FLG_TASK_n || ',0,:flg_task_in, NVL (:flg_task_in, FLG_TASK)) '|| ','
     || ' FLG_SOLVED = decode (' || l_FLG_SOLVED_n || ',0,:flg_solved_in, NVL (:flg_solved_in, FLG_SOLVED)) '|| ','
     || ' ID_CONTENT = decode (' || l_ID_CONTENT_n || ',0,:id_content_in, NVL (:id_content_in, ID_CONTENT)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '|| ','
     || ' ID_APPLICATION_AREA = decode (' || l_ID_APPLICATION_AREA_n || ',0,:id_application_area_in, NVL (:id_application_area_in, ID_APPLICATION_AREA)) '|| ','
     || ' ID_INSTITUTION = decode (' || l_ID_INSTITUTION_n || ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) '|| ','
     || ' ID_SOFTWARE = decode (' || l_ID_SOFTWARE_n || ',0,:id_software_in, NVL (:id_software_in, ID_SOFTWARE)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     flg_type_in,
     flg_nurse_tea_in,
     flg_repeat_in,
     flg_gender_in,
     flg_available_in,
     adw_last_update_in,
     code_icnp_composition_in,
     id_vs_in,
     id_doc_template_in,
     flg_task_in,
     flg_solved_in,
     id_content_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
     id_application_area_in,
     id_institution_in,
     id_software_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'ICNP_COMPOSITION');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           IF l_name = 'ICN_ID_APPLICATION_AREA_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_APPLICATION_AREA'
               , value_in => id_application_area_in);
           END IF;
           IF l_name = 'ICN_ID_DOC_TEMPLATE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_DOC_TEMPLATE'
               , value_in => id_doc_template_in);
           END IF;
           IF l_name = 'ICN_ID_SOFTWARE_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SOFTWARE'
               , value_in => id_software_in);
           END IF;
           IF l_name = 'ICN_INST_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_INSTITUTION'
               , value_in => id_institution_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      flg_type_in IN ICNP_COMPOSITION.FLG_TYPE%TYPE DEFAULT NULL,
      FLG_TYPE_nin IN BOOLEAN := TRUE,
      flg_nurse_tea_in IN ICNP_COMPOSITION.FLG_NURSE_TEA%TYPE DEFAULT NULL,
      FLG_NURSE_TEA_nin IN BOOLEAN := TRUE,
      flg_repeat_in IN ICNP_COMPOSITION.FLG_REPEAT%TYPE DEFAULT NULL,
      FLG_REPEAT_nin IN BOOLEAN := TRUE,
      flg_gender_in IN ICNP_COMPOSITION.FLG_GENDER%TYPE DEFAULT NULL,
      FLG_GENDER_nin IN BOOLEAN := TRUE,
      flg_available_in IN ICNP_COMPOSITION.FLG_AVAILABLE%TYPE DEFAULT NULL,
      FLG_AVAILABLE_nin IN BOOLEAN := TRUE,
      adw_last_update_in IN ICNP_COMPOSITION.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
      code_icnp_composition_in IN ICNP_COMPOSITION.CODE_ICNP_COMPOSITION%TYPE DEFAULT NULL,
      CODE_ICNP_COMPOSITION_nin IN BOOLEAN := TRUE,
      id_vs_in IN ICNP_COMPOSITION.ID_VS%TYPE DEFAULT NULL,
      ID_VS_nin IN BOOLEAN := TRUE,
      id_doc_template_in IN ICNP_COMPOSITION.ID_DOC_TEMPLATE%TYPE DEFAULT NULL,
      ID_DOC_TEMPLATE_nin IN BOOLEAN := TRUE,
      flg_task_in IN ICNP_COMPOSITION.FLG_TASK%TYPE DEFAULT NULL,
      FLG_TASK_nin IN BOOLEAN := TRUE,
      flg_solved_in IN ICNP_COMPOSITION.FLG_SOLVED%TYPE DEFAULT NULL,
      FLG_SOLVED_nin IN BOOLEAN := TRUE,
      id_content_in IN ICNP_COMPOSITION.ID_CONTENT%TYPE DEFAULT NULL,
      ID_CONTENT_nin IN BOOLEAN := TRUE,
      create_user_in IN ICNP_COMPOSITION.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN ICNP_COMPOSITION.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN ICNP_COMPOSITION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN ICNP_COMPOSITION.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN ICNP_COMPOSITION.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN ICNP_COMPOSITION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_application_area_in IN ICNP_COMPOSITION.ID_APPLICATION_AREA%TYPE DEFAULT NULL,
      ID_APPLICATION_AREA_nin IN BOOLEAN := TRUE,
      id_institution_in IN ICNP_COMPOSITION.ID_INSTITUTION%TYPE DEFAULT NULL,
      ID_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_software_in IN ICNP_COMPOSITION.ID_SOFTWARE%TYPE DEFAULT NULL,
      ID_SOFTWARE_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      flg_type_in => flg_type_in,
      FLG_TYPE_nin => FLG_TYPE_nin,
      flg_nurse_tea_in => flg_nurse_tea_in,
      FLG_NURSE_TEA_nin => FLG_NURSE_TEA_nin,
      flg_repeat_in => flg_repeat_in,
      FLG_REPEAT_nin => FLG_REPEAT_nin,
      flg_gender_in => flg_gender_in,
      FLG_GENDER_nin => FLG_GENDER_nin,
      flg_available_in => flg_available_in,
      FLG_AVAILABLE_nin => FLG_AVAILABLE_nin,
      adw_last_update_in => adw_last_update_in,
      ADW_LAST_UPDATE_nin => ADW_LAST_UPDATE_nin,
      code_icnp_composition_in => code_icnp_composition_in,
      CODE_ICNP_COMPOSITION_nin => CODE_ICNP_COMPOSITION_nin,
      id_vs_in => id_vs_in,
      ID_VS_nin => ID_VS_nin,
      id_doc_template_in => id_doc_template_in,
      ID_DOC_TEMPLATE_nin => ID_DOC_TEMPLATE_nin,
      flg_task_in => flg_task_in,
      FLG_TASK_nin => FLG_TASK_nin,
      flg_solved_in => flg_solved_in,
      FLG_SOLVED_nin => FLG_SOLVED_nin,
      id_content_in => id_content_in,
      ID_CONTENT_nin => ID_CONTENT_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      id_application_area_in => id_application_area_in,
      ID_APPLICATION_AREA_nin => ID_APPLICATION_AREA_nin,
      id_institution_in => id_institution_in,
      ID_INSTITUTION_nin => ID_INSTITUTION_nin,
      id_software_in => id_software_in,
      ID_SOFTWARE_nin => ID_SOFTWARE_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN ICNP_COMPOSITION%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_composition_in => rec_in.ID_COMPOSITION,
         flg_type_in => rec_in.FLG_TYPE,
         flg_nurse_tea_in => rec_in.FLG_NURSE_TEA,
         flg_repeat_in => rec_in.FLG_REPEAT,
         flg_gender_in => rec_in.FLG_GENDER,
         flg_available_in => rec_in.FLG_AVAILABLE,
         adw_last_update_in => rec_in.ADW_LAST_UPDATE,
         code_icnp_composition_in => rec_in.CODE_ICNP_COMPOSITION,
         id_vs_in => rec_in.ID_VS,
         id_doc_template_in => rec_in.ID_DOC_TEMPLATE,
         flg_task_in => rec_in.FLG_TASK,
         flg_solved_in => rec_in.FLG_SOLVED,
         id_content_in => rec_in.ID_CONTENT,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         id_application_area_in => rec_in.ID_APPLICATION_AREA,
         id_institution_in => rec_in.ID_INSTITUTION,
         id_software_in => rec_in.ID_SOFTWARE

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN ICNP_COMPOSITION%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_composition_in => rec_in.ID_COMPOSITION,
         flg_type_in => rec_in.FLG_TYPE,
         flg_nurse_tea_in => rec_in.FLG_NURSE_TEA,
         flg_repeat_in => rec_in.FLG_REPEAT,
         flg_gender_in => rec_in.FLG_GENDER,
         flg_available_in => rec_in.FLG_AVAILABLE,
         adw_last_update_in => rec_in.ADW_LAST_UPDATE,
         code_icnp_composition_in => rec_in.CODE_ICNP_COMPOSITION,
         id_vs_in => rec_in.ID_VS,
         id_doc_template_in => rec_in.ID_DOC_TEMPLATE,
         flg_task_in => rec_in.FLG_TASK,
         flg_solved_in => rec_in.FLG_SOLVED,
         id_content_in => rec_in.ID_CONTENT,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         id_application_area_in => rec_in.ID_APPLICATION_AREA,
         id_institution_in => rec_in.ID_INSTITUTION,
         id_software_in => rec_in.ID_SOFTWARE

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_composition_in IN ICNP_COMPOSITION.ID_COMPOSITION%TYPE,
      flg_type_in IN ICNP_COMPOSITION.FLG_TYPE%TYPE DEFAULT NULL,
      flg_nurse_tea_in IN ICNP_COMPOSITION.FLG_NURSE_TEA%TYPE DEFAULT NULL,
      flg_repeat_in IN ICNP_COMPOSITION.FLG_REPEAT%TYPE DEFAULT NULL,
      flg_gender_in IN ICNP_COMPOSITION.FLG_GENDER%TYPE DEFAULT NULL,
      flg_available_in IN ICNP_COMPOSITION.FLG_AVAILABLE%TYPE DEFAULT NULL,
      adw_last_update_in IN ICNP_COMPOSITION.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      code_icnp_composition_in IN ICNP_COMPOSITION.CODE_ICNP_COMPOSITION%TYPE DEFAULT NULL,
      id_vs_in IN ICNP_COMPOSITION.ID_VS%TYPE DEFAULT NULL,
      id_doc_template_in IN ICNP_COMPOSITION.ID_DOC_TEMPLATE%TYPE DEFAULT NULL,
      flg_task_in IN ICNP_COMPOSITION.FLG_TASK%TYPE DEFAULT NULL,
      flg_solved_in IN ICNP_COMPOSITION.FLG_SOLVED%TYPE DEFAULT NULL,
      id_content_in IN ICNP_COMPOSITION.ID_CONTENT%TYPE DEFAULT NULL,
      create_user_in IN ICNP_COMPOSITION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_COMPOSITION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_COMPOSITION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_COMPOSITION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_COMPOSITION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_COMPOSITION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_application_area_in IN ICNP_COMPOSITION.ID_APPLICATION_AREA%TYPE DEFAULT NULL,
      id_institution_in IN ICNP_COMPOSITION.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN ICNP_COMPOSITION.ID_SOFTWARE%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_composition_in => id_composition_in,
         flg_type_in => flg_type_in,
         flg_nurse_tea_in => flg_nurse_tea_in,
         flg_repeat_in => flg_repeat_in,
         flg_gender_in => flg_gender_in,
         flg_available_in => flg_available_in,
         adw_last_update_in => adw_last_update_in,
         code_icnp_composition_in => code_icnp_composition_in,
         id_vs_in => id_vs_in,
         id_doc_template_in => id_doc_template_in,
         flg_task_in => flg_task_in,
         flg_solved_in => flg_solved_in,
         id_content_in => id_content_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_application_area_in => id_application_area_in,
         id_institution_in => id_institution_in,
         id_software_in => id_software_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_composition_in => id_composition_in,
            flg_type_in => flg_type_in,
            flg_nurse_tea_in => flg_nurse_tea_in,
            flg_repeat_in => flg_repeat_in,
            flg_gender_in => flg_gender_in,
            flg_available_in => flg_available_in,
            adw_last_update_in => adw_last_update_in,
            code_icnp_composition_in => code_icnp_composition_in,
            id_vs_in => id_vs_in,
            id_doc_template_in => id_doc_template_in,
            flg_task_in => flg_task_in,
            flg_solved_in => flg_solved_in,
            id_content_in => id_content_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            id_application_area_in => id_application_area_in,
            id_institution_in => id_institution_in,
            id_software_in => id_software_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_composition_in IN ICNP_COMPOSITION.ID_COMPOSITION%TYPE,
      flg_type_in IN ICNP_COMPOSITION.FLG_TYPE%TYPE DEFAULT NULL,
      flg_nurse_tea_in IN ICNP_COMPOSITION.FLG_NURSE_TEA%TYPE DEFAULT NULL,
      flg_repeat_in IN ICNP_COMPOSITION.FLG_REPEAT%TYPE DEFAULT NULL,
      flg_gender_in IN ICNP_COMPOSITION.FLG_GENDER%TYPE DEFAULT NULL,
      flg_available_in IN ICNP_COMPOSITION.FLG_AVAILABLE%TYPE DEFAULT NULL,
      adw_last_update_in IN ICNP_COMPOSITION.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
      code_icnp_composition_in IN ICNP_COMPOSITION.CODE_ICNP_COMPOSITION%TYPE DEFAULT NULL,
      id_vs_in IN ICNP_COMPOSITION.ID_VS%TYPE DEFAULT NULL,
      id_doc_template_in IN ICNP_COMPOSITION.ID_DOC_TEMPLATE%TYPE DEFAULT NULL,
      flg_task_in IN ICNP_COMPOSITION.FLG_TASK%TYPE DEFAULT NULL,
      flg_solved_in IN ICNP_COMPOSITION.FLG_SOLVED%TYPE DEFAULT NULL,
      id_content_in IN ICNP_COMPOSITION.ID_CONTENT%TYPE DEFAULT NULL,
      create_user_in IN ICNP_COMPOSITION.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN ICNP_COMPOSITION.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN ICNP_COMPOSITION.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN ICNP_COMPOSITION.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN ICNP_COMPOSITION.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN ICNP_COMPOSITION.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_application_area_in IN ICNP_COMPOSITION.ID_APPLICATION_AREA%TYPE DEFAULT NULL,
      id_institution_in IN ICNP_COMPOSITION.ID_INSTITUTION%TYPE DEFAULT NULL,
      id_software_in IN ICNP_COMPOSITION.ID_SOFTWARE%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_composition_in,
      flg_type_in,
      flg_nurse_tea_in,
      flg_repeat_in,
      flg_gender_in,
      flg_available_in,
      adw_last_update_in,
      code_icnp_composition_in,
      id_vs_in,
      id_doc_template_in,
      flg_task_in,
      flg_solved_in,
      id_content_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
      id_application_area_in,
      id_institution_in,
      id_software_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN ICNP_COMPOSITION_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_COMPOSITION ID_COMPOSITION_cc;
      l_FLG_TYPE FLG_TYPE_cc;
      l_FLG_NURSE_TEA FLG_NURSE_TEA_cc;
      l_FLG_REPEAT FLG_REPEAT_cc;
      l_FLG_GENDER FLG_GENDER_cc;
      l_FLG_AVAILABLE FLG_AVAILABLE_cc;
      l_ADW_LAST_UPDATE ADW_LAST_UPDATE_cc;
      l_CODE_ICNP_COMPOSITION CODE_ICNP_COMPOSITION_cc;
      l_ID_VS ID_VS_cc;
      l_ID_DOC_TEMPLATE ID_DOC_TEMPLATE_cc;
      l_FLG_TASK FLG_TASK_cc;
      l_FLG_SOLVED FLG_SOLVED_cc;
      l_ID_CONTENT ID_CONTENT_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
      l_ID_APPLICATION_AREA ID_APPLICATION_AREA_cc;
      l_ID_INSTITUTION ID_INSTITUTION_cc;
      l_ID_SOFTWARE ID_SOFTWARE_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_COMPOSITION(i) := col_in(i).ID_COMPOSITION;
         l_FLG_TYPE(i) := col_in(i).FLG_TYPE;
         l_FLG_NURSE_TEA(i) := col_in(i).FLG_NURSE_TEA;
         l_FLG_REPEAT(i) := col_in(i).FLG_REPEAT;
         l_FLG_GENDER(i) := col_in(i).FLG_GENDER;
         l_FLG_AVAILABLE(i) := col_in(i).FLG_AVAILABLE;
         l_ADW_LAST_UPDATE(i) := col_in(i).ADW_LAST_UPDATE;
         l_CODE_ICNP_COMPOSITION(i) := col_in(i).CODE_ICNP_COMPOSITION;
         l_ID_VS(i) := col_in(i).ID_VS;
         l_ID_DOC_TEMPLATE(i) := col_in(i).ID_DOC_TEMPLATE;
         l_FLG_TASK(i) := col_in(i).FLG_TASK;
         l_FLG_SOLVED(i) := col_in(i).FLG_SOLVED;
         l_ID_CONTENT(i) := col_in(i).ID_CONTENT;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
         l_ID_APPLICATION_AREA(i) := col_in(i).ID_APPLICATION_AREA;
         l_ID_INSTITUTION(i) := col_in(i).ID_INSTITUTION;
         l_ID_SOFTWARE(i) := col_in(i).ID_SOFTWARE;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE ICNP_COMPOSITION SET
               FLG_TYPE = NVL (l_FLG_TYPE(i), FLG_TYPE),
               FLG_NURSE_TEA = NVL (l_FLG_NURSE_TEA(i), FLG_NURSE_TEA),
               FLG_REPEAT = NVL (l_FLG_REPEAT(i), FLG_REPEAT),
               FLG_GENDER = NVL (l_FLG_GENDER(i), FLG_GENDER),
               FLG_AVAILABLE = NVL (l_FLG_AVAILABLE(i), FLG_AVAILABLE),
               ADW_LAST_UPDATE = NVL (l_ADW_LAST_UPDATE(i), ADW_LAST_UPDATE),
               CODE_ICNP_COMPOSITION = NVL (l_CODE_ICNP_COMPOSITION(i), CODE_ICNP_COMPOSITION),
               ID_VS = NVL (l_ID_VS(i), ID_VS),
               ID_DOC_TEMPLATE = NVL (l_ID_DOC_TEMPLATE(i), ID_DOC_TEMPLATE),
               FLG_TASK = NVL (l_FLG_TASK(i), FLG_TASK),
               FLG_SOLVED = NVL (l_FLG_SOLVED(i), FLG_SOLVED),
               ID_CONTENT = NVL (l_ID_CONTENT(i), ID_CONTENT),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
               ID_APPLICATION_AREA = NVL (l_ID_APPLICATION_AREA(i), ID_APPLICATION_AREA),
               ID_INSTITUTION = NVL (l_ID_INSTITUTION(i), ID_INSTITUTION),
               ID_SOFTWARE = NVL (l_ID_SOFTWARE(i), ID_SOFTWARE)
             WHERE
                ID_COMPOSITION = l_ID_COMPOSITION(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE ICNP_COMPOSITION SET
               FLG_TYPE = l_FLG_TYPE(i),
               FLG_NURSE_TEA = l_FLG_NURSE_TEA(i),
               FLG_REPEAT = l_FLG_REPEAT(i),
               FLG_GENDER = l_FLG_GENDER(i),
               FLG_AVAILABLE = l_FLG_AVAILABLE(i),
               ADW_LAST_UPDATE = l_ADW_LAST_UPDATE(i),
               CODE_ICNP_COMPOSITION = l_CODE_ICNP_COMPOSITION(i),
               ID_VS = l_ID_VS(i),
               ID_DOC_TEMPLATE = l_ID_DOC_TEMPLATE(i),
               FLG_TASK = l_FLG_TASK(i),
               FLG_SOLVED = l_FLG_SOLVED(i),
               ID_CONTENT = l_ID_CONTENT(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
               ID_APPLICATION_AREA = l_ID_APPLICATION_AREA(i),
               ID_INSTITUTION = l_ID_INSTITUTION(i),
               ID_SOFTWARE = l_ID_SOFTWARE(i)
             WHERE
                ID_COMPOSITION = l_ID_COMPOSITION(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN ICNP_COMPOSITION_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE ICNP_COMPOSITION
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE ICNP_COMPOSITION
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE ICNP_COMPOSITION set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE ICNP_COMPOSITION set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_composition_in IN ICNP_COMPOSITION.ID_COMPOSITION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM ICNP_COMPOSITION
       WHERE
          ID_COMPOSITION = id_composition_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_composition_in IN ICNP_COMPOSITION.ID_COMPOSITION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_composition_in => id_composition_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_COMPOSITION
   PROCEDURE del_ID_COMPOSITION (
      id_composition_in IN ICNP_COMPOSITION.ID_COMPOSITION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM ICNP_COMPOSITION
       WHERE ID_COMPOSITION = id_composition_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_COMPOSITION;






   -- Delete all rows for primary key column ID_COMPOSITION
   PROCEDURE del_ID_COMPOSITION (
      id_composition_in IN ICNP_COMPOSITION.ID_COMPOSITION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_COMPOSITION (
      id_composition_in => id_composition_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_COMPOSITION;















   PROCEDURE del_ICN_ID_APPLICATION_AREA_FK (
      id_application_area_in IN ICNP_COMPOSITION.ID_APPLICATION_AREA%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM ICNP_COMPOSITION
       WHERE
          ID_APPLICATION_AREA = del_ICN_ID_APPLICATION_AREA_FK.id_application_area_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ICN_ID_APPLICATION_AREA_FK;



PROCEDURE del_ICN_ID_APPLICATION_AREA_FK (
      id_application_area_in IN ICNP_COMPOSITION.ID_APPLICATION_AREA%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ICN_ID_APPLICATION_AREA_FK (
      id_application_area_in => id_application_area_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_ICN_ID_APPLICATION_AREA_FK;





   PROCEDURE del_ICN_ID_DOC_TEMPLATE_FK (
      id_doc_template_in IN ICNP_COMPOSITION.ID_DOC_TEMPLATE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM ICNP_COMPOSITION
       WHERE
          ID_DOC_TEMPLATE = del_ICN_ID_DOC_TEMPLATE_FK.id_doc_template_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ICN_ID_DOC_TEMPLATE_FK;



PROCEDURE del_ICN_ID_DOC_TEMPLATE_FK (
      id_doc_template_in IN ICNP_COMPOSITION.ID_DOC_TEMPLATE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ICN_ID_DOC_TEMPLATE_FK (
      id_doc_template_in => id_doc_template_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_ICN_ID_DOC_TEMPLATE_FK;





   PROCEDURE del_ICN_ID_SOFTWARE_FK (
      id_software_in IN ICNP_COMPOSITION.ID_SOFTWARE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM ICNP_COMPOSITION
       WHERE
          ID_SOFTWARE = del_ICN_ID_SOFTWARE_FK.id_software_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ICN_ID_SOFTWARE_FK;



PROCEDURE del_ICN_ID_SOFTWARE_FK (
      id_software_in IN ICNP_COMPOSITION.ID_SOFTWARE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ICN_ID_SOFTWARE_FK (
      id_software_in => id_software_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_ICN_ID_SOFTWARE_FK;





   PROCEDURE del_ICN_INST_FK (
      id_institution_in IN ICNP_COMPOSITION.ID_INSTITUTION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM ICNP_COMPOSITION
       WHERE
          ID_INSTITUTION = del_ICN_INST_FK.id_institution_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ICN_INST_FK;



PROCEDURE del_ICN_INST_FK (
      id_institution_in IN ICNP_COMPOSITION.ID_INSTITUTION%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ICN_INST_FK (
      id_institution_in => id_institution_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_ICN_INST_FK;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM ICNP_COMPOSITION';
      ELSE
         RETURN
            'DELETE FROM ICNP_COMPOSITION WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'ICNP_COMPOSITION');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'ICNP_COMPOSITION');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      icnp_composition_inout IN OUT ICNP_COMPOSITION%ROWTYPE
   )
   IS
   BEGIN
      icnp_composition_inout.ID_COMPOSITION := NULL;
      icnp_composition_inout.FLG_TYPE := NULL;
      icnp_composition_inout.FLG_NURSE_TEA := NULL;
      icnp_composition_inout.FLG_REPEAT := NULL;
      icnp_composition_inout.FLG_GENDER := NULL;
      icnp_composition_inout.FLG_AVAILABLE := NULL;
      icnp_composition_inout.ADW_LAST_UPDATE := sysdate;
      icnp_composition_inout.CODE_ICNP_COMPOSITION := NULL;
      icnp_composition_inout.ID_VS := NULL;
      icnp_composition_inout.ID_DOC_TEMPLATE := NULL;
      icnp_composition_inout.FLG_TASK := NULL;
      icnp_composition_inout.FLG_SOLVED := NULL;
      icnp_composition_inout.ID_CONTENT := null;
      icnp_composition_inout.CREATE_USER := NULL;
      icnp_composition_inout.CREATE_TIME := NULL;
      icnp_composition_inout.CREATE_INSTITUTION := NULL;
      icnp_composition_inout.UPDATE_USER := NULL;
      icnp_composition_inout.UPDATE_TIME := NULL;
      icnp_composition_inout.UPDATE_INSTITUTION := NULL;
      icnp_composition_inout.ID_APPLICATION_AREA := NULL;
      icnp_composition_inout.ID_INSTITUTION := NULL;
      icnp_composition_inout.ID_SOFTWARE := NULL;
   END initrec;

   FUNCTION initrec RETURN ICNP_COMPOSITION%ROWTYPE
   IS
      l_icnp_composition ICNP_COMPOSITION%ROWTYPE;
   BEGIN
      l_icnp_composition.ADW_LAST_UPDATE := sysdate;
      RETURN l_icnp_composition;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN ICNP_COMPOSITION_tc
   IS
        data ICNP_COMPOSITION_tc;
   BEGIN
        select * bulk collect into data from ICNP_COMPOSITION where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN ICNP_COMPOSITION_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data ICNP_COMPOSITION_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_ICNP_COMPOSITION;
/
