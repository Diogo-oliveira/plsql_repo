/*-- Last Change Revision: $Rev: 1666929 $*/
/*-- Last Change by: $Author: nuno.alves $*/
/*-- Date of last change: $Date: 2014-12-01 14:43:05 +0000 (seg, 01 dez 2014) $*/
CREATE OR REPLACE PACKAGE BODY TS_TL_TASK
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Novembro 20, 2014 10:56:39
| Created By: ALERT
*/
IS


   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_tl_task_in IN TL_TASK.ID_TL_TASK%TYPE
      ,
      default_back_color_in IN TL_TASK.DEFAULT_BACK_COLOR%TYPE DEFAULT NULL,
      layer_in IN TL_TASK.LAYER%TYPE DEFAULT NULL,
      code_tl_task_in IN TL_TASK.CODE_TL_TASK%TYPE DEFAULT NULL,
      icon_in IN TL_TASK.ICON%TYPE DEFAULT NULL,
      rank_in IN TL_TASK.RANK%TYPE DEFAULT NULL,
      create_user_in IN TL_TASK.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN TL_TASK.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN TL_TASK.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN TL_TASK.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN TL_TASK.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN TL_TASK.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_swf_file_create_in IN TL_TASK.ID_SWF_FILE_CREATE%TYPE DEFAULT NULL,
      id_swf_file_detail_in IN TL_TASK.ID_SWF_FILE_DETAIL%TYPE DEFAULT NULL,
      internal_name_in IN TL_TASK.INTERNAL_NAME%TYPE DEFAULT NULL,
      flg_functionality_in IN TL_TASK.FLG_FUNCTIONALITY%TYPE DEFAULT 'TP',
      review_context_in IN TL_TASK.REVIEW_CONTEXT%TYPE DEFAULT NULL,
      id_parent_in IN TL_TASK.ID_PARENT%TYPE DEFAULT NULL,
      ehr_access_area_in IN TL_TASK.EHR_ACCESS_AREA%TYPE DEFAULT NULL,
      flg_synch_area_in IN TL_TASK.FLG_SYNCH_AREA%TYPE DEFAULT 'N',
      flg_ea_in IN TL_TASK.FLG_EA%TYPE DEFAULT 'Y'
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO TL_TASK (
         ID_TL_TASK,
         DEFAULT_BACK_COLOR,
         LAYER,
         CODE_TL_TASK,
         ICON,
         RANK,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION,
         ID_SWF_FILE_CREATE,
         ID_SWF_FILE_DETAIL,
         INTERNAL_NAME,
         FLG_FUNCTIONALITY,
         REVIEW_CONTEXT,
         ID_PARENT,
         EHR_ACCESS_AREA,
         FLG_SYNCH_AREA,
         FLG_EA
         )
      VALUES (
         id_tl_task_in,
         default_back_color_in,
         layer_in,
         code_tl_task_in,
         icon_in,
         rank_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in,
         id_swf_file_create_in,
         id_swf_file_detail_in,
         internal_name_in,
         flg_functionality_in,
         review_context_in,
         id_parent_in,
         ehr_access_area_in,
         flg_synch_area_in,
         flg_ea_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'TL_TASK');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           IF l_name = 'TLT_EHRAA_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'EHR_ACCESS_AREA'
               , value_in => ehr_access_area_in);
           END IF;
           IF l_name = 'TLT_PRT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PARENT'
               , value_in => id_parent_in);
           END IF;
           IF l_name = 'TLTT_APPF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SWF_FILE_CREATE'
               , value_in => id_swf_file_create_in);
           END IF;
           IF l_name = 'TLTT_APPFL_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SWF_FILE_DETAIL'
               , value_in => id_swf_file_detail_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_tl_task_in IN TL_TASK.ID_TL_TASK%TYPE
      ,
      default_back_color_in IN TL_TASK.DEFAULT_BACK_COLOR%TYPE DEFAULT NULL,
      layer_in IN TL_TASK.LAYER%TYPE DEFAULT NULL,
      code_tl_task_in IN TL_TASK.CODE_TL_TASK%TYPE DEFAULT NULL,
      icon_in IN TL_TASK.ICON%TYPE DEFAULT NULL,
      rank_in IN TL_TASK.RANK%TYPE DEFAULT NULL,
      create_user_in IN TL_TASK.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN TL_TASK.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN TL_TASK.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN TL_TASK.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN TL_TASK.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN TL_TASK.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_swf_file_create_in IN TL_TASK.ID_SWF_FILE_CREATE%TYPE DEFAULT NULL,
      id_swf_file_detail_in IN TL_TASK.ID_SWF_FILE_DETAIL%TYPE DEFAULT NULL,
      internal_name_in IN TL_TASK.INTERNAL_NAME%TYPE DEFAULT NULL,
      flg_functionality_in IN TL_TASK.FLG_FUNCTIONALITY%TYPE DEFAULT 'TP',
      review_context_in IN TL_TASK.REVIEW_CONTEXT%TYPE DEFAULT NULL,
      id_parent_in IN TL_TASK.ID_PARENT%TYPE DEFAULT NULL,
      ehr_access_area_in IN TL_TASK.EHR_ACCESS_AREA%TYPE DEFAULT NULL,
      flg_synch_area_in IN TL_TASK.FLG_SYNCH_AREA%TYPE DEFAULT 'N',
      flg_ea_in IN TL_TASK.FLG_EA%TYPE DEFAULT 'Y'
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_tl_task_in => id_tl_task_in
      ,
      default_back_color_in => default_back_color_in,
      layer_in => layer_in,
      code_tl_task_in => code_tl_task_in,
      icon_in => icon_in,
      rank_in => rank_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      id_swf_file_create_in => id_swf_file_create_in,
      id_swf_file_detail_in => id_swf_file_detail_in,
      internal_name_in => internal_name_in,
      flg_functionality_in => flg_functionality_in,
      review_context_in => review_context_in,
      id_parent_in => id_parent_in,
      ehr_access_area_in => ehr_access_area_in,
      flg_synch_area_in => flg_synch_area_in,
      flg_ea_in => flg_ea_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN TL_TASK%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec TL_TASK%ROWTYPE := rec_in;
   BEGIN
      ins (
         id_tl_task_in => l_rec.ID_TL_TASK
         ,
         default_back_color_in => l_rec.DEFAULT_BACK_COLOR,
         layer_in => l_rec.LAYER,
         code_tl_task_in => l_rec.CODE_TL_TASK,
         icon_in => l_rec.ICON,
         rank_in => l_rec.RANK,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION,
         id_swf_file_create_in => l_rec.ID_SWF_FILE_CREATE,
         id_swf_file_detail_in => l_rec.ID_SWF_FILE_DETAIL,
         internal_name_in => l_rec.INTERNAL_NAME,
         flg_functionality_in => l_rec.FLG_FUNCTIONALITY,
         review_context_in => l_rec.REVIEW_CONTEXT,
         id_parent_in => l_rec.ID_PARENT,
         ehr_access_area_in => l_rec.EHR_ACCESS_AREA,
         flg_synch_area_in => l_rec.FLG_SYNCH_AREA,
         flg_ea_in => l_rec.FLG_EA
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN TL_TASK%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;


    PROCEDURE ins (
      rows_in IN TL_TASK_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
       FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO TL_TASK (
               ID_TL_TASK,
               DEFAULT_BACK_COLOR,
               LAYER,
               CODE_TL_TASK,
               ICON,
               RANK,
               CREATE_USER,
               CREATE_TIME,
               CREATE_INSTITUTION,
               UPDATE_USER,
               UPDATE_TIME,
               UPDATE_INSTITUTION,
               ID_SWF_FILE_CREATE,
               ID_SWF_FILE_DETAIL,
               INTERNAL_NAME,
               FLG_FUNCTIONALITY,
               REVIEW_CONTEXT,
               ID_PARENT,
               EHR_ACCESS_AREA,
               FLG_SYNCH_AREA,
               FLG_EA
               )
            VALUES (
               rows_in(indx).ID_TL_TASK,
               rows_in(indx).DEFAULT_BACK_COLOR,
               rows_in(indx).LAYER,
               rows_in(indx).CODE_TL_TASK,
               rows_in(indx).ICON,
               rows_in(indx).RANK,
               rows_in(indx).CREATE_USER,
               rows_in(indx).CREATE_TIME,
               rows_in(indx).CREATE_INSTITUTION,
               rows_in(indx).UPDATE_USER,
               rows_in(indx).UPDATE_TIME,
               rows_in(indx).UPDATE_INSTITUTION,
               rows_in(indx).ID_SWF_FILE_CREATE,
               rows_in(indx).ID_SWF_FILE_DETAIL,
               rows_in(indx).INTERNAL_NAME,
               rows_in(indx).FLG_FUNCTIONALITY,
               rows_in(indx).REVIEW_CONTEXT,
               rows_in(indx).ID_PARENT,
               rows_in(indx).EHR_ACCESS_AREA,
               rows_in(indx).FLG_SYNCH_AREA,
               rows_in(indx).FLG_EA
               ) RETURNING ROWID BULK COLLECT INTO rows_out;

      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQLERRM (-SQL%BULK_EXCEPTIONS (indx).ERROR_CODE)
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_TL_TASK _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_TL_TASK
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DEFAULT_BACK_COLOR _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DEFAULT_BACK_COLOR
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'LAYER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).LAYER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CODE_TL_TASK _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CODE_TL_TASK
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ICON _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ICON
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'RANK _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).RANK
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SWF_FILE_CREATE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_SWF_FILE_CREATE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_SWF_FILE_DETAIL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_SWF_FILE_DETAIL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'INTERNAL_NAME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).INTERNAL_NAME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_FUNCTIONALITY _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_FUNCTIONALITY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'REVIEW_CONTEXT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).REVIEW_CONTEXT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PARENT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PARENT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'EHR_ACCESS_AREA _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).EHR_ACCESS_AREA
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_SYNCH_AREA _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_SYNCH_AREA
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_EA _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_EA
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'TL_TASK'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN TL_TASK_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_tl_task_in IN TL_TASK.ID_TL_TASK%TYPE,
      default_back_color_in IN TL_TASK.DEFAULT_BACK_COLOR%TYPE DEFAULT NULL,
      DEFAULT_BACK_COLOR_nin IN BOOLEAN := TRUE,
      layer_in IN TL_TASK.LAYER%TYPE DEFAULT NULL,
      LAYER_nin IN BOOLEAN := TRUE,
      code_tl_task_in IN TL_TASK.CODE_TL_TASK%TYPE DEFAULT NULL,
      CODE_TL_TASK_nin IN BOOLEAN := TRUE,
      icon_in IN TL_TASK.ICON%TYPE DEFAULT NULL,
      ICON_nin IN BOOLEAN := TRUE,
      rank_in IN TL_TASK.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
      create_user_in IN TL_TASK.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN TL_TASK.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN TL_TASK.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN TL_TASK.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN TL_TASK.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN TL_TASK.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_swf_file_create_in IN TL_TASK.ID_SWF_FILE_CREATE%TYPE DEFAULT NULL,
      ID_SWF_FILE_CREATE_nin IN BOOLEAN := TRUE,
      id_swf_file_detail_in IN TL_TASK.ID_SWF_FILE_DETAIL%TYPE DEFAULT NULL,
      ID_SWF_FILE_DETAIL_nin IN BOOLEAN := TRUE,
      internal_name_in IN TL_TASK.INTERNAL_NAME%TYPE DEFAULT NULL,
      INTERNAL_NAME_nin IN BOOLEAN := TRUE,
      flg_functionality_in IN TL_TASK.FLG_FUNCTIONALITY%TYPE DEFAULT NULL,
      FLG_FUNCTIONALITY_nin IN BOOLEAN := TRUE,
      review_context_in IN TL_TASK.REVIEW_CONTEXT%TYPE DEFAULT NULL,
      REVIEW_CONTEXT_nin IN BOOLEAN := TRUE,
      id_parent_in IN TL_TASK.ID_PARENT%TYPE DEFAULT NULL,
      ID_PARENT_nin IN BOOLEAN := TRUE,
      ehr_access_area_in IN TL_TASK.EHR_ACCESS_AREA%TYPE DEFAULT NULL,
      EHR_ACCESS_AREA_nin IN BOOLEAN := TRUE,
      flg_synch_area_in IN TL_TASK.FLG_SYNCH_AREA%TYPE DEFAULT NULL,
      FLG_SYNCH_AREA_nin IN BOOLEAN := TRUE,
      flg_ea_in IN TL_TASK.FLG_EA%TYPE DEFAULT NULL,
      FLG_EA_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_DEFAULT_BACK_COLOR_n NUMBER(1);
   l_LAYER_n NUMBER(1);
   l_CODE_TL_TASK_n NUMBER(1);
   l_ICON_n NUMBER(1);
   l_RANK_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_ID_SWF_FILE_CREATE_n NUMBER(1);
   l_ID_SWF_FILE_DETAIL_n NUMBER(1);
   l_INTERNAL_NAME_n NUMBER(1);
   l_FLG_FUNCTIONALITY_n NUMBER(1);
   l_REVIEW_CONTEXT_n NUMBER(1);
   l_ID_PARENT_n NUMBER(1);
   l_EHR_ACCESS_AREA_n NUMBER(1);
   l_FLG_SYNCH_AREA_n NUMBER(1);
   l_FLG_EA_n NUMBER(1);
   BEGIN

   l_DEFAULT_BACK_COLOR_n := sys.diutil.bool_to_int(DEFAULT_BACK_COLOR_nin);
   l_LAYER_n := sys.diutil.bool_to_int(LAYER_nin);
   l_CODE_TL_TASK_n := sys.diutil.bool_to_int(CODE_TL_TASK_nin);
   l_ICON_n := sys.diutil.bool_to_int(ICON_nin);
   l_RANK_n := sys.diutil.bool_to_int(RANK_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
   l_ID_SWF_FILE_CREATE_n := sys.diutil.bool_to_int(ID_SWF_FILE_CREATE_nin);
   l_ID_SWF_FILE_DETAIL_n := sys.diutil.bool_to_int(ID_SWF_FILE_DETAIL_nin);
   l_INTERNAL_NAME_n := sys.diutil.bool_to_int(INTERNAL_NAME_nin);
   l_FLG_FUNCTIONALITY_n := sys.diutil.bool_to_int(FLG_FUNCTIONALITY_nin);
   l_REVIEW_CONTEXT_n := sys.diutil.bool_to_int(REVIEW_CONTEXT_nin);
   l_ID_PARENT_n := sys.diutil.bool_to_int(ID_PARENT_nin);
   l_EHR_ACCESS_AREA_n := sys.diutil.bool_to_int(EHR_ACCESS_AREA_nin);
   l_FLG_SYNCH_AREA_n := sys.diutil.bool_to_int(FLG_SYNCH_AREA_nin);
   l_FLG_EA_n := sys.diutil.bool_to_int(FLG_EA_nin);


         UPDATE TL_TASK SET
     DEFAULT_BACK_COLOR = decode (l_DEFAULT_BACK_COLOR_n,0,default_back_color_in, NVL (default_back_color_in, DEFAULT_BACK_COLOR)),
     LAYER = decode (l_LAYER_n,0,layer_in, NVL (layer_in, LAYER)),
     CODE_TL_TASK = decode (l_CODE_TL_TASK_n,0,code_tl_task_in, NVL (code_tl_task_in, CODE_TL_TASK)),
     ICON = decode (l_ICON_n,0,icon_in, NVL (icon_in, ICON)),
     RANK = decode (l_RANK_n,0,rank_in, NVL (rank_in, RANK)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION)),
     ID_SWF_FILE_CREATE = decode (l_ID_SWF_FILE_CREATE_n,0,id_swf_file_create_in, NVL (id_swf_file_create_in, ID_SWF_FILE_CREATE)),
     ID_SWF_FILE_DETAIL = decode (l_ID_SWF_FILE_DETAIL_n,0,id_swf_file_detail_in, NVL (id_swf_file_detail_in, ID_SWF_FILE_DETAIL)),
     INTERNAL_NAME = decode (l_INTERNAL_NAME_n,0,internal_name_in, NVL (internal_name_in, INTERNAL_NAME)),
     FLG_FUNCTIONALITY = decode (l_FLG_FUNCTIONALITY_n,0,flg_functionality_in, NVL (flg_functionality_in, FLG_FUNCTIONALITY)),
     REVIEW_CONTEXT = decode (l_REVIEW_CONTEXT_n,0,review_context_in, NVL (review_context_in, REVIEW_CONTEXT)),
     ID_PARENT = decode (l_ID_PARENT_n,0,id_parent_in, NVL (id_parent_in, ID_PARENT)),
     EHR_ACCESS_AREA = decode (l_EHR_ACCESS_AREA_n,0,ehr_access_area_in, NVL (ehr_access_area_in, EHR_ACCESS_AREA)),
     FLG_SYNCH_AREA = decode (l_FLG_SYNCH_AREA_n,0,flg_synch_area_in, NVL (flg_synch_area_in, FLG_SYNCH_AREA)),
     FLG_EA = decode (l_FLG_EA_n,0,flg_ea_in, NVL (flg_ea_in, FLG_EA))
          WHERE
             ID_TL_TASK = id_tl_task_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'TL_TASK');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           IF l_name = 'TLT_EHRAA_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'EHR_ACCESS_AREA'
               , value_in => ehr_access_area_in);
           END IF;
           IF l_name = 'TLT_PRT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PARENT'
               , value_in => id_parent_in);
           END IF;
           IF l_name = 'TLTT_APPF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SWF_FILE_CREATE'
               , value_in => id_swf_file_create_in);
           END IF;
           IF l_name = 'TLTT_APPFL_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SWF_FILE_DETAIL'
               , value_in => id_swf_file_detail_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_tl_task_in IN TL_TASK.ID_TL_TASK%TYPE,
      default_back_color_in IN TL_TASK.DEFAULT_BACK_COLOR%TYPE DEFAULT NULL,
      DEFAULT_BACK_COLOR_nin IN BOOLEAN := TRUE,
      layer_in IN TL_TASK.LAYER%TYPE DEFAULT NULL,
      LAYER_nin IN BOOLEAN := TRUE,
      code_tl_task_in IN TL_TASK.CODE_TL_TASK%TYPE DEFAULT NULL,
      CODE_TL_TASK_nin IN BOOLEAN := TRUE,
      icon_in IN TL_TASK.ICON%TYPE DEFAULT NULL,
      ICON_nin IN BOOLEAN := TRUE,
      rank_in IN TL_TASK.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
      create_user_in IN TL_TASK.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN TL_TASK.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN TL_TASK.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN TL_TASK.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN TL_TASK.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN TL_TASK.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_swf_file_create_in IN TL_TASK.ID_SWF_FILE_CREATE%TYPE DEFAULT NULL,
      ID_SWF_FILE_CREATE_nin IN BOOLEAN := TRUE,
      id_swf_file_detail_in IN TL_TASK.ID_SWF_FILE_DETAIL%TYPE DEFAULT NULL,
      ID_SWF_FILE_DETAIL_nin IN BOOLEAN := TRUE,
      internal_name_in IN TL_TASK.INTERNAL_NAME%TYPE DEFAULT NULL,
      INTERNAL_NAME_nin IN BOOLEAN := TRUE,
      flg_functionality_in IN TL_TASK.FLG_FUNCTIONALITY%TYPE DEFAULT NULL,
      FLG_FUNCTIONALITY_nin IN BOOLEAN := TRUE,
      review_context_in IN TL_TASK.REVIEW_CONTEXT%TYPE DEFAULT NULL,
      REVIEW_CONTEXT_nin IN BOOLEAN := TRUE,
      id_parent_in IN TL_TASK.ID_PARENT%TYPE DEFAULT NULL,
      ID_PARENT_nin IN BOOLEAN := TRUE,
      ehr_access_area_in IN TL_TASK.EHR_ACCESS_AREA%TYPE DEFAULT NULL,
      EHR_ACCESS_AREA_nin IN BOOLEAN := TRUE,
      flg_synch_area_in IN TL_TASK.FLG_SYNCH_AREA%TYPE DEFAULT NULL,
      FLG_SYNCH_AREA_nin IN BOOLEAN := TRUE,
      flg_ea_in IN TL_TASK.FLG_EA%TYPE DEFAULT NULL,
      FLG_EA_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_tl_task_in => id_tl_task_in,
      default_back_color_in => default_back_color_in,
      DEFAULT_BACK_COLOR_nin => DEFAULT_BACK_COLOR_nin,
      layer_in => layer_in,
      LAYER_nin => LAYER_nin,
      code_tl_task_in => code_tl_task_in,
      CODE_TL_TASK_nin => CODE_TL_TASK_nin,
      icon_in => icon_in,
      ICON_nin => ICON_nin,
      rank_in => rank_in,
      RANK_nin => RANK_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      id_swf_file_create_in => id_swf_file_create_in,
      ID_SWF_FILE_CREATE_nin => ID_SWF_FILE_CREATE_nin,
      id_swf_file_detail_in => id_swf_file_detail_in,
      ID_SWF_FILE_DETAIL_nin => ID_SWF_FILE_DETAIL_nin,
      internal_name_in => internal_name_in,
      INTERNAL_NAME_nin => INTERNAL_NAME_nin,
      flg_functionality_in => flg_functionality_in,
      FLG_FUNCTIONALITY_nin => FLG_FUNCTIONALITY_nin,
      review_context_in => review_context_in,
      REVIEW_CONTEXT_nin => REVIEW_CONTEXT_nin,
      id_parent_in => id_parent_in,
      ID_PARENT_nin => ID_PARENT_nin,
      ehr_access_area_in => ehr_access_area_in,
      EHR_ACCESS_AREA_nin => EHR_ACCESS_AREA_nin,
      flg_synch_area_in => flg_synch_area_in,
      FLG_SYNCH_AREA_nin => FLG_SYNCH_AREA_nin,
      flg_ea_in => flg_ea_in,
      FLG_EA_nin => FLG_EA_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      default_back_color_in IN TL_TASK.DEFAULT_BACK_COLOR%TYPE DEFAULT NULL,
      DEFAULT_BACK_COLOR_nin IN BOOLEAN := TRUE,
      layer_in IN TL_TASK.LAYER%TYPE DEFAULT NULL,
      LAYER_nin IN BOOLEAN := TRUE,
      code_tl_task_in IN TL_TASK.CODE_TL_TASK%TYPE DEFAULT NULL,
      CODE_TL_TASK_nin IN BOOLEAN := TRUE,
      icon_in IN TL_TASK.ICON%TYPE DEFAULT NULL,
      ICON_nin IN BOOLEAN := TRUE,
      rank_in IN TL_TASK.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
      create_user_in IN TL_TASK.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN TL_TASK.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN TL_TASK.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN TL_TASK.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN TL_TASK.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN TL_TASK.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_swf_file_create_in IN TL_TASK.ID_SWF_FILE_CREATE%TYPE DEFAULT NULL,
      ID_SWF_FILE_CREATE_nin IN BOOLEAN := TRUE,
      id_swf_file_detail_in IN TL_TASK.ID_SWF_FILE_DETAIL%TYPE DEFAULT NULL,
      ID_SWF_FILE_DETAIL_nin IN BOOLEAN := TRUE,
      internal_name_in IN TL_TASK.INTERNAL_NAME%TYPE DEFAULT NULL,
      INTERNAL_NAME_nin IN BOOLEAN := TRUE,
      flg_functionality_in IN TL_TASK.FLG_FUNCTIONALITY%TYPE DEFAULT NULL,
      FLG_FUNCTIONALITY_nin IN BOOLEAN := TRUE,
      review_context_in IN TL_TASK.REVIEW_CONTEXT%TYPE DEFAULT NULL,
      REVIEW_CONTEXT_nin IN BOOLEAN := TRUE,
      id_parent_in IN TL_TASK.ID_PARENT%TYPE DEFAULT NULL,
      ID_PARENT_nin IN BOOLEAN := TRUE,
      ehr_access_area_in IN TL_TASK.EHR_ACCESS_AREA%TYPE DEFAULT NULL,
      EHR_ACCESS_AREA_nin IN BOOLEAN := TRUE,
      flg_synch_area_in IN TL_TASK.FLG_SYNCH_AREA%TYPE DEFAULT NULL,
      FLG_SYNCH_AREA_nin IN BOOLEAN := TRUE,
      flg_ea_in IN TL_TASK.FLG_EA%TYPE DEFAULT NULL,
      FLG_EA_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_DEFAULT_BACK_COLOR_n NUMBER(1);
   l_LAYER_n NUMBER(1);
   l_CODE_TL_TASK_n NUMBER(1);
   l_ICON_n NUMBER(1);
   l_RANK_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_ID_SWF_FILE_CREATE_n NUMBER(1);
   l_ID_SWF_FILE_DETAIL_n NUMBER(1);
   l_INTERNAL_NAME_n NUMBER(1);
   l_FLG_FUNCTIONALITY_n NUMBER(1);
   l_REVIEW_CONTEXT_n NUMBER(1);
   l_ID_PARENT_n NUMBER(1);
   l_EHR_ACCESS_AREA_n NUMBER(1);
   l_FLG_SYNCH_AREA_n NUMBER(1);
   l_FLG_EA_n NUMBER(1);
      id_tl_task_in TL_TASK.ID_TL_TASK%TYPE;
   BEGIN



      l_DEFAULT_BACK_COLOR_n := sys.diutil.bool_to_int(DEFAULT_BACK_COLOR_nin);
      l_LAYER_n := sys.diutil.bool_to_int(LAYER_nin);
      l_CODE_TL_TASK_n := sys.diutil.bool_to_int(CODE_TL_TASK_nin);
      l_ICON_n := sys.diutil.bool_to_int(ICON_nin);
      l_RANK_n := sys.diutil.bool_to_int(RANK_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
      l_ID_SWF_FILE_CREATE_n := sys.diutil.bool_to_int(ID_SWF_FILE_CREATE_nin);
      l_ID_SWF_FILE_DETAIL_n := sys.diutil.bool_to_int(ID_SWF_FILE_DETAIL_nin);
      l_INTERNAL_NAME_n := sys.diutil.bool_to_int(INTERNAL_NAME_nin);
      l_FLG_FUNCTIONALITY_n := sys.diutil.bool_to_int(FLG_FUNCTIONALITY_nin);
      l_REVIEW_CONTEXT_n := sys.diutil.bool_to_int(REVIEW_CONTEXT_nin);
      l_ID_PARENT_n := sys.diutil.bool_to_int(ID_PARENT_nin);
      l_EHR_ACCESS_AREA_n := sys.diutil.bool_to_int(EHR_ACCESS_AREA_nin);
      l_FLG_SYNCH_AREA_n := sys.diutil.bool_to_int(FLG_SYNCH_AREA_nin);
      l_FLG_EA_n := sys.diutil.bool_to_int(FLG_EA_nin);



l_sql := 'UPDATE TL_TASK SET '
     || ' DEFAULT_BACK_COLOR = decode (' || l_DEFAULT_BACK_COLOR_n || ',0,:default_back_color_in, NVL (:default_back_color_in, DEFAULT_BACK_COLOR)) '|| ','
     || ' LAYER = decode (' || l_LAYER_n || ',0,:layer_in, NVL (:layer_in, LAYER)) '|| ','
     || ' CODE_TL_TASK = decode (' || l_CODE_TL_TASK_n || ',0,:code_tl_task_in, NVL (:code_tl_task_in, CODE_TL_TASK)) '|| ','
     || ' ICON = decode (' || l_ICON_n || ',0,:icon_in, NVL (:icon_in, ICON)) '|| ','
     || ' RANK = decode (' || l_RANK_n || ',0,:rank_in, NVL (:rank_in, RANK)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '|| ','
     || ' ID_SWF_FILE_CREATE = decode (' || l_ID_SWF_FILE_CREATE_n || ',0,:id_swf_file_create_in, NVL (:id_swf_file_create_in, ID_SWF_FILE_CREATE)) '|| ','
     || ' ID_SWF_FILE_DETAIL = decode (' || l_ID_SWF_FILE_DETAIL_n || ',0,:id_swf_file_detail_in, NVL (:id_swf_file_detail_in, ID_SWF_FILE_DETAIL)) '|| ','
     || ' INTERNAL_NAME = decode (' || l_INTERNAL_NAME_n || ',0,:internal_name_in, NVL (:internal_name_in, INTERNAL_NAME)) '|| ','
     || ' FLG_FUNCTIONALITY = decode (' || l_FLG_FUNCTIONALITY_n || ',0,:flg_functionality_in, NVL (:flg_functionality_in, FLG_FUNCTIONALITY)) '|| ','
     || ' REVIEW_CONTEXT = decode (' || l_REVIEW_CONTEXT_n || ',0,:review_context_in, NVL (:review_context_in, REVIEW_CONTEXT)) '|| ','
     || ' ID_PARENT = decode (' || l_ID_PARENT_n || ',0,:id_parent_in, NVL (:id_parent_in, ID_PARENT)) '|| ','
     || ' EHR_ACCESS_AREA = decode (' || l_EHR_ACCESS_AREA_n || ',0,:ehr_access_area_in, NVL (:ehr_access_area_in, EHR_ACCESS_AREA)) '|| ','
     || ' FLG_SYNCH_AREA = decode (' || l_FLG_SYNCH_AREA_n || ',0,:flg_synch_area_in, NVL (:flg_synch_area_in, FLG_SYNCH_AREA)) '|| ','
     || ' FLG_EA = decode (' || l_FLG_EA_n || ',0,:flg_ea_in, NVL (:flg_ea_in, FLG_EA)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     default_back_color_in,
     layer_in,
     code_tl_task_in,
     icon_in,
     rank_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
     id_swf_file_create_in,
     id_swf_file_detail_in,
     internal_name_in,
     flg_functionality_in,
     review_context_in,
     id_parent_in,
     ehr_access_area_in,
     flg_synch_area_in,
     flg_ea_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'TL_TASK');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           IF l_name = 'TLT_EHRAA_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'EHR_ACCESS_AREA'
               , value_in => ehr_access_area_in);
           END IF;
           IF l_name = 'TLT_PRT_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PARENT'
               , value_in => id_parent_in);
           END IF;
           IF l_name = 'TLTT_APPF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SWF_FILE_CREATE'
               , value_in => id_swf_file_create_in);
           END IF;
           IF l_name = 'TLTT_APPFL_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_SWF_FILE_DETAIL'
               , value_in => id_swf_file_detail_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      default_back_color_in IN TL_TASK.DEFAULT_BACK_COLOR%TYPE DEFAULT NULL,
      DEFAULT_BACK_COLOR_nin IN BOOLEAN := TRUE,
      layer_in IN TL_TASK.LAYER%TYPE DEFAULT NULL,
      LAYER_nin IN BOOLEAN := TRUE,
      code_tl_task_in IN TL_TASK.CODE_TL_TASK%TYPE DEFAULT NULL,
      CODE_TL_TASK_nin IN BOOLEAN := TRUE,
      icon_in IN TL_TASK.ICON%TYPE DEFAULT NULL,
      ICON_nin IN BOOLEAN := TRUE,
      rank_in IN TL_TASK.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
      create_user_in IN TL_TASK.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN TL_TASK.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN TL_TASK.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN TL_TASK.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN TL_TASK.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN TL_TASK.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_swf_file_create_in IN TL_TASK.ID_SWF_FILE_CREATE%TYPE DEFAULT NULL,
      ID_SWF_FILE_CREATE_nin IN BOOLEAN := TRUE,
      id_swf_file_detail_in IN TL_TASK.ID_SWF_FILE_DETAIL%TYPE DEFAULT NULL,
      ID_SWF_FILE_DETAIL_nin IN BOOLEAN := TRUE,
      internal_name_in IN TL_TASK.INTERNAL_NAME%TYPE DEFAULT NULL,
      INTERNAL_NAME_nin IN BOOLEAN := TRUE,
      flg_functionality_in IN TL_TASK.FLG_FUNCTIONALITY%TYPE DEFAULT NULL,
      FLG_FUNCTIONALITY_nin IN BOOLEAN := TRUE,
      review_context_in IN TL_TASK.REVIEW_CONTEXT%TYPE DEFAULT NULL,
      REVIEW_CONTEXT_nin IN BOOLEAN := TRUE,
      id_parent_in IN TL_TASK.ID_PARENT%TYPE DEFAULT NULL,
      ID_PARENT_nin IN BOOLEAN := TRUE,
      ehr_access_area_in IN TL_TASK.EHR_ACCESS_AREA%TYPE DEFAULT NULL,
      EHR_ACCESS_AREA_nin IN BOOLEAN := TRUE,
      flg_synch_area_in IN TL_TASK.FLG_SYNCH_AREA%TYPE DEFAULT NULL,
      FLG_SYNCH_AREA_nin IN BOOLEAN := TRUE,
      flg_ea_in IN TL_TASK.FLG_EA%TYPE DEFAULT NULL,
      FLG_EA_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      default_back_color_in => default_back_color_in,
      DEFAULT_BACK_COLOR_nin => DEFAULT_BACK_COLOR_nin,
      layer_in => layer_in,
      LAYER_nin => LAYER_nin,
      code_tl_task_in => code_tl_task_in,
      CODE_TL_TASK_nin => CODE_TL_TASK_nin,
      icon_in => icon_in,
      ICON_nin => ICON_nin,
      rank_in => rank_in,
      RANK_nin => RANK_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      id_swf_file_create_in => id_swf_file_create_in,
      ID_SWF_FILE_CREATE_nin => ID_SWF_FILE_CREATE_nin,
      id_swf_file_detail_in => id_swf_file_detail_in,
      ID_SWF_FILE_DETAIL_nin => ID_SWF_FILE_DETAIL_nin,
      internal_name_in => internal_name_in,
      INTERNAL_NAME_nin => INTERNAL_NAME_nin,
      flg_functionality_in => flg_functionality_in,
      FLG_FUNCTIONALITY_nin => FLG_FUNCTIONALITY_nin,
      review_context_in => review_context_in,
      REVIEW_CONTEXT_nin => REVIEW_CONTEXT_nin,
      id_parent_in => id_parent_in,
      ID_PARENT_nin => ID_PARENT_nin,
      ehr_access_area_in => ehr_access_area_in,
      EHR_ACCESS_AREA_nin => EHR_ACCESS_AREA_nin,
      flg_synch_area_in => flg_synch_area_in,
      FLG_SYNCH_AREA_nin => FLG_SYNCH_AREA_nin,
      flg_ea_in => flg_ea_in,
      FLG_EA_nin => FLG_EA_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN TL_TASK%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_tl_task_in => rec_in.ID_TL_TASK,
         default_back_color_in => rec_in.DEFAULT_BACK_COLOR,
         layer_in => rec_in.LAYER,
         code_tl_task_in => rec_in.CODE_TL_TASK,
         icon_in => rec_in.ICON,
         rank_in => rec_in.RANK,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         id_swf_file_create_in => rec_in.ID_SWF_FILE_CREATE,
         id_swf_file_detail_in => rec_in.ID_SWF_FILE_DETAIL,
         internal_name_in => rec_in.INTERNAL_NAME,
         flg_functionality_in => rec_in.FLG_FUNCTIONALITY,
         review_context_in => rec_in.REVIEW_CONTEXT,
         id_parent_in => rec_in.ID_PARENT,
         ehr_access_area_in => rec_in.EHR_ACCESS_AREA,
         flg_synch_area_in => rec_in.FLG_SYNCH_AREA,
         flg_ea_in => rec_in.FLG_EA

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN TL_TASK%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_tl_task_in => rec_in.ID_TL_TASK,
         default_back_color_in => rec_in.DEFAULT_BACK_COLOR,
         layer_in => rec_in.LAYER,
         code_tl_task_in => rec_in.CODE_TL_TASK,
         icon_in => rec_in.ICON,
         rank_in => rec_in.RANK,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         id_swf_file_create_in => rec_in.ID_SWF_FILE_CREATE,
         id_swf_file_detail_in => rec_in.ID_SWF_FILE_DETAIL,
         internal_name_in => rec_in.INTERNAL_NAME,
         flg_functionality_in => rec_in.FLG_FUNCTIONALITY,
         review_context_in => rec_in.REVIEW_CONTEXT,
         id_parent_in => rec_in.ID_PARENT,
         ehr_access_area_in => rec_in.EHR_ACCESS_AREA,
         flg_synch_area_in => rec_in.FLG_SYNCH_AREA,
         flg_ea_in => rec_in.FLG_EA

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_tl_task_in IN TL_TASK.ID_TL_TASK%TYPE,
      default_back_color_in IN TL_TASK.DEFAULT_BACK_COLOR%TYPE DEFAULT NULL,
      layer_in IN TL_TASK.LAYER%TYPE DEFAULT NULL,
      code_tl_task_in IN TL_TASK.CODE_TL_TASK%TYPE DEFAULT NULL,
      icon_in IN TL_TASK.ICON%TYPE DEFAULT NULL,
      rank_in IN TL_TASK.RANK%TYPE DEFAULT NULL,
      create_user_in IN TL_TASK.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN TL_TASK.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN TL_TASK.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN TL_TASK.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN TL_TASK.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN TL_TASK.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_swf_file_create_in IN TL_TASK.ID_SWF_FILE_CREATE%TYPE DEFAULT NULL,
      id_swf_file_detail_in IN TL_TASK.ID_SWF_FILE_DETAIL%TYPE DEFAULT NULL,
      internal_name_in IN TL_TASK.INTERNAL_NAME%TYPE DEFAULT NULL,
      flg_functionality_in IN TL_TASK.FLG_FUNCTIONALITY%TYPE DEFAULT NULL,
      review_context_in IN TL_TASK.REVIEW_CONTEXT%TYPE DEFAULT NULL,
      id_parent_in IN TL_TASK.ID_PARENT%TYPE DEFAULT NULL,
      ehr_access_area_in IN TL_TASK.EHR_ACCESS_AREA%TYPE DEFAULT NULL,
      flg_synch_area_in IN TL_TASK.FLG_SYNCH_AREA%TYPE DEFAULT NULL,
      flg_ea_in IN TL_TASK.FLG_EA%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_tl_task_in => id_tl_task_in,
         default_back_color_in => default_back_color_in,
         layer_in => layer_in,
         code_tl_task_in => code_tl_task_in,
         icon_in => icon_in,
         rank_in => rank_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_swf_file_create_in => id_swf_file_create_in,
         id_swf_file_detail_in => id_swf_file_detail_in,
         internal_name_in => internal_name_in,
         flg_functionality_in => flg_functionality_in,
         review_context_in => review_context_in,
         id_parent_in => id_parent_in,
         ehr_access_area_in => ehr_access_area_in,
         flg_synch_area_in => flg_synch_area_in,
         flg_ea_in => flg_ea_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_tl_task_in => id_tl_task_in,
            default_back_color_in => default_back_color_in,
            layer_in => layer_in,
            code_tl_task_in => code_tl_task_in,
            icon_in => icon_in,
            rank_in => rank_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            id_swf_file_create_in => id_swf_file_create_in,
            id_swf_file_detail_in => id_swf_file_detail_in,
            internal_name_in => internal_name_in,
            flg_functionality_in => flg_functionality_in,
            review_context_in => review_context_in,
            id_parent_in => id_parent_in,
            ehr_access_area_in => ehr_access_area_in,
            flg_synch_area_in => flg_synch_area_in,
            flg_ea_in => flg_ea_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_tl_task_in IN TL_TASK.ID_TL_TASK%TYPE,
      default_back_color_in IN TL_TASK.DEFAULT_BACK_COLOR%TYPE DEFAULT NULL,
      layer_in IN TL_TASK.LAYER%TYPE DEFAULT NULL,
      code_tl_task_in IN TL_TASK.CODE_TL_TASK%TYPE DEFAULT NULL,
      icon_in IN TL_TASK.ICON%TYPE DEFAULT NULL,
      rank_in IN TL_TASK.RANK%TYPE DEFAULT NULL,
      create_user_in IN TL_TASK.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN TL_TASK.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN TL_TASK.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN TL_TASK.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN TL_TASK.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN TL_TASK.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_swf_file_create_in IN TL_TASK.ID_SWF_FILE_CREATE%TYPE DEFAULT NULL,
      id_swf_file_detail_in IN TL_TASK.ID_SWF_FILE_DETAIL%TYPE DEFAULT NULL,
      internal_name_in IN TL_TASK.INTERNAL_NAME%TYPE DEFAULT NULL,
      flg_functionality_in IN TL_TASK.FLG_FUNCTIONALITY%TYPE DEFAULT NULL,
      review_context_in IN TL_TASK.REVIEW_CONTEXT%TYPE DEFAULT NULL,
      id_parent_in IN TL_TASK.ID_PARENT%TYPE DEFAULT NULL,
      ehr_access_area_in IN TL_TASK.EHR_ACCESS_AREA%TYPE DEFAULT NULL,
      flg_synch_area_in IN TL_TASK.FLG_SYNCH_AREA%TYPE DEFAULT NULL,
      flg_ea_in IN TL_TASK.FLG_EA%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_tl_task_in,
      default_back_color_in,
      layer_in,
      code_tl_task_in,
      icon_in,
      rank_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
      id_swf_file_create_in,
      id_swf_file_detail_in,
      internal_name_in,
      flg_functionality_in,
      review_context_in,
      id_parent_in,
      ehr_access_area_in,
      flg_synch_area_in,
      flg_ea_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN TL_TASK_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_TL_TASK ID_TL_TASK_cc;
      l_DEFAULT_BACK_COLOR DEFAULT_BACK_COLOR_cc;
      l_LAYER LAYER_cc;
      l_CODE_TL_TASK CODE_TL_TASK_cc;
      l_ICON ICON_cc;
      l_RANK RANK_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
      l_ID_SWF_FILE_CREATE ID_SWF_FILE_CREATE_cc;
      l_ID_SWF_FILE_DETAIL ID_SWF_FILE_DETAIL_cc;
      l_INTERNAL_NAME INTERNAL_NAME_cc;
      l_FLG_FUNCTIONALITY FLG_FUNCTIONALITY_cc;
      l_REVIEW_CONTEXT REVIEW_CONTEXT_cc;
      l_ID_PARENT ID_PARENT_cc;
      l_EHR_ACCESS_AREA EHR_ACCESS_AREA_cc;
      l_FLG_SYNCH_AREA FLG_SYNCH_AREA_cc;
      l_FLG_EA FLG_EA_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_TL_TASK(i) := col_in(i).ID_TL_TASK;
         l_DEFAULT_BACK_COLOR(i) := col_in(i).DEFAULT_BACK_COLOR;
         l_LAYER(i) := col_in(i).LAYER;
         l_CODE_TL_TASK(i) := col_in(i).CODE_TL_TASK;
         l_ICON(i) := col_in(i).ICON;
         l_RANK(i) := col_in(i).RANK;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
         l_ID_SWF_FILE_CREATE(i) := col_in(i).ID_SWF_FILE_CREATE;
         l_ID_SWF_FILE_DETAIL(i) := col_in(i).ID_SWF_FILE_DETAIL;
         l_INTERNAL_NAME(i) := col_in(i).INTERNAL_NAME;
         l_FLG_FUNCTIONALITY(i) := col_in(i).FLG_FUNCTIONALITY;
         l_REVIEW_CONTEXT(i) := col_in(i).REVIEW_CONTEXT;
         l_ID_PARENT(i) := col_in(i).ID_PARENT;
         l_EHR_ACCESS_AREA(i) := col_in(i).EHR_ACCESS_AREA;
         l_FLG_SYNCH_AREA(i) := col_in(i).FLG_SYNCH_AREA;
         l_FLG_EA(i) := col_in(i).FLG_EA;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE TL_TASK SET
               DEFAULT_BACK_COLOR = NVL (l_DEFAULT_BACK_COLOR(i), DEFAULT_BACK_COLOR),
               LAYER = NVL (l_LAYER(i), LAYER),
               CODE_TL_TASK = NVL (l_CODE_TL_TASK(i), CODE_TL_TASK),
               ICON = NVL (l_ICON(i), ICON),
               RANK = NVL (l_RANK(i), RANK),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
               ID_SWF_FILE_CREATE = NVL (l_ID_SWF_FILE_CREATE(i), ID_SWF_FILE_CREATE),
               ID_SWF_FILE_DETAIL = NVL (l_ID_SWF_FILE_DETAIL(i), ID_SWF_FILE_DETAIL),
               INTERNAL_NAME = NVL (l_INTERNAL_NAME(i), INTERNAL_NAME),
               FLG_FUNCTIONALITY = NVL (l_FLG_FUNCTIONALITY(i), FLG_FUNCTIONALITY),
               REVIEW_CONTEXT = NVL (l_REVIEW_CONTEXT(i), REVIEW_CONTEXT),
               ID_PARENT = NVL (l_ID_PARENT(i), ID_PARENT),
               EHR_ACCESS_AREA = NVL (l_EHR_ACCESS_AREA(i), EHR_ACCESS_AREA),
               FLG_SYNCH_AREA = NVL (l_FLG_SYNCH_AREA(i), FLG_SYNCH_AREA),
               FLG_EA = NVL (l_FLG_EA(i), FLG_EA)
             WHERE
                ID_TL_TASK = l_ID_TL_TASK(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE TL_TASK SET
               DEFAULT_BACK_COLOR = l_DEFAULT_BACK_COLOR(i),
               LAYER = l_LAYER(i),
               CODE_TL_TASK = l_CODE_TL_TASK(i),
               ICON = l_ICON(i),
               RANK = l_RANK(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
               ID_SWF_FILE_CREATE = l_ID_SWF_FILE_CREATE(i),
               ID_SWF_FILE_DETAIL = l_ID_SWF_FILE_DETAIL(i),
               INTERNAL_NAME = l_INTERNAL_NAME(i),
               FLG_FUNCTIONALITY = l_FLG_FUNCTIONALITY(i),
               REVIEW_CONTEXT = l_REVIEW_CONTEXT(i),
               ID_PARENT = l_ID_PARENT(i),
               EHR_ACCESS_AREA = l_EHR_ACCESS_AREA(i),
               FLG_SYNCH_AREA = l_FLG_SYNCH_AREA(i),
               FLG_EA = l_FLG_EA(i)
             WHERE
                ID_TL_TASK = l_ID_TL_TASK(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN TL_TASK_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE TL_TASK
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE TL_TASK
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE TL_TASK set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE TL_TASK set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_tl_task_in IN TL_TASK.ID_TL_TASK%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM TL_TASK
       WHERE
          ID_TL_TASK = id_tl_task_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_tl_task_in IN TL_TASK.ID_TL_TASK%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_tl_task_in => id_tl_task_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_TL_TASK
   PROCEDURE del_ID_TL_TASK (
      id_tl_task_in IN TL_TASK.ID_TL_TASK%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM TL_TASK
       WHERE ID_TL_TASK = id_tl_task_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_TL_TASK;






   -- Delete all rows for primary key column ID_TL_TASK
   PROCEDURE del_ID_TL_TASK (
      id_tl_task_in IN TL_TASK.ID_TL_TASK%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_TL_TASK (
      id_tl_task_in => id_tl_task_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_TL_TASK;















   PROCEDURE del_TLT_EHRAA_FK (
      ehr_access_area_in IN TL_TASK.EHR_ACCESS_AREA%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM TL_TASK
       WHERE
          EHR_ACCESS_AREA = del_TLT_EHRAA_FK.ehr_access_area_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_TLT_EHRAA_FK;



PROCEDURE del_TLT_EHRAA_FK (
      ehr_access_area_in IN TL_TASK.EHR_ACCESS_AREA%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_TLT_EHRAA_FK (
      ehr_access_area_in => ehr_access_area_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_TLT_EHRAA_FK;





   PROCEDURE del_TLT_PRT_FK (
      id_parent_in IN TL_TASK.ID_PARENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM TL_TASK
       WHERE
          ID_PARENT = del_TLT_PRT_FK.id_parent_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_TLT_PRT_FK;



PROCEDURE del_TLT_PRT_FK (
      id_parent_in IN TL_TASK.ID_PARENT%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_TLT_PRT_FK (
      id_parent_in => id_parent_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_TLT_PRT_FK;





   PROCEDURE del_TLTT_APPF_FK (
      id_swf_file_create_in IN TL_TASK.ID_SWF_FILE_CREATE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM TL_TASK
       WHERE
          ID_SWF_FILE_CREATE = del_TLTT_APPF_FK.id_swf_file_create_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_TLTT_APPF_FK;



PROCEDURE del_TLTT_APPF_FK (
      id_swf_file_create_in IN TL_TASK.ID_SWF_FILE_CREATE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_TLTT_APPF_FK (
      id_swf_file_create_in => id_swf_file_create_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_TLTT_APPF_FK;





   PROCEDURE del_TLTT_APPFL_FK (
      id_swf_file_detail_in IN TL_TASK.ID_SWF_FILE_DETAIL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM TL_TASK
       WHERE
          ID_SWF_FILE_DETAIL = del_TLTT_APPFL_FK.id_swf_file_detail_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_TLTT_APPFL_FK;



PROCEDURE del_TLTT_APPFL_FK (
      id_swf_file_detail_in IN TL_TASK.ID_SWF_FILE_DETAIL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_TLTT_APPFL_FK (
      id_swf_file_detail_in => id_swf_file_detail_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_TLTT_APPFL_FK;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM TL_TASK';
      ELSE
         RETURN
            'DELETE FROM TL_TASK WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'TL_TASK');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'TL_TASK');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      tl_task_inout IN OUT TL_TASK%ROWTYPE
   )
   IS
   BEGIN
      tl_task_inout.ID_TL_TASK := NULL;
      tl_task_inout.DEFAULT_BACK_COLOR := NULL;
      tl_task_inout.LAYER := NULL;
      tl_task_inout.CODE_TL_TASK := NULL;
      tl_task_inout.ICON := NULL;
      tl_task_inout.RANK := NULL;
      tl_task_inout.CREATE_USER := NULL;
      tl_task_inout.CREATE_TIME := NULL;
      tl_task_inout.CREATE_INSTITUTION := NULL;
      tl_task_inout.UPDATE_USER := NULL;
      tl_task_inout.UPDATE_TIME := NULL;
      tl_task_inout.UPDATE_INSTITUTION := NULL;
      tl_task_inout.ID_SWF_FILE_CREATE := NULL;
      tl_task_inout.ID_SWF_FILE_DETAIL := NULL;
      tl_task_inout.INTERNAL_NAME := NULL;
      tl_task_inout.FLG_FUNCTIONALITY := 'TP';
      tl_task_inout.REVIEW_CONTEXT := NULL;
      tl_task_inout.ID_PARENT := NULL;
      tl_task_inout.EHR_ACCESS_AREA := NULL;
      tl_task_inout.FLG_SYNCH_AREA := 'N';
      tl_task_inout.FLG_EA := 'Y';
   END initrec;

   FUNCTION initrec RETURN TL_TASK%ROWTYPE
   IS
      l_tl_task TL_TASK%ROWTYPE;
   BEGIN
      l_tl_task.FLG_FUNCTIONALITY := 'TP';
      l_tl_task.FLG_SYNCH_AREA := 'N';
      l_tl_task.FLG_EA := 'Y';
      RETURN l_tl_task;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN TL_TASK_tc
   IS
        data TL_TASK_tc;
   BEGIN
        select * bulk collect into data from TL_TASK where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN TL_TASK_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data TL_TASK_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_TL_TASK;
/
