/*-- Last Change Revision: $Rev: 2027968 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:43:49 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_bmng_bed_ea
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Julho 29, 2009 15:54:8
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_bmng_action_in           IN bmng_bed_ea.id_bmng_action%TYPE,
        id_bed_in                   IN bmng_bed_ea.id_bed%TYPE DEFAULT NULL,
        dt_begin_in                 IN bmng_bed_ea.dt_begin%TYPE DEFAULT NULL,
        dt_end_in                   IN bmng_bed_ea.dt_end%TYPE DEFAULT NULL,
        id_bmng_reason_type_in      IN bmng_bed_ea.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_reason_in           IN bmng_bed_ea.id_bmng_reason%TYPE DEFAULT NULL,
        id_episode_in               IN bmng_bed_ea.id_episode%TYPE DEFAULT NULL,
        id_patient_in               IN bmng_bed_ea.id_patient%TYPE DEFAULT NULL,
        id_room_in                  IN bmng_bed_ea.id_room%TYPE DEFAULT NULL,
        id_admission_type_in        IN bmng_bed_ea.id_admission_type%TYPE DEFAULT NULL,
        id_room_type_in             IN bmng_bed_ea.id_room_type%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_in   IN bmng_bed_ea.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        id_bed_type_in              IN bmng_bed_ea.id_bed_type%TYPE DEFAULT NULL,
        dt_discharge_schedule_in    IN bmng_bed_ea.dt_discharge_schedule%TYPE DEFAULT NULL,
        flg_allocation_nch_in       IN bmng_bed_ea.flg_allocation_nch%TYPE DEFAULT NULL,
        id_nch_level_in             IN bmng_bed_ea.id_nch_level%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_in IN bmng_bed_ea.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_status_in           IN bmng_bed_ea.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_in  IN bmng_bed_ea.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        has_notes_in                IN bmng_bed_ea.has_notes%TYPE DEFAULT 'N',
        create_user_in              IN bmng_bed_ea.create_user%TYPE DEFAULT NULL,
        create_time_in              IN bmng_bed_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN bmng_bed_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN bmng_bed_ea.update_user%TYPE DEFAULT NULL,
        update_time_in              IN bmng_bed_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN bmng_bed_ea.update_institution%TYPE DEFAULT NULL,
        flg_bed_type_in             IN bmng_bed_ea.flg_bed_type%TYPE DEFAULT NULL,
        id_department_in            IN bmng_bed_ea.id_department%TYPE DEFAULT NULL,
        dt_dg_last_update_in        IN bmng_bed_ea.dt_dg_last_update%TYPE DEFAULT current_timestamp,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO bmng_bed_ea
            (id_bmng_action,
             id_bed,
             dt_begin,
             dt_end,
             id_bmng_reason_type,
             id_bmng_reason,
             id_episode,
             id_patient,
             id_room,
             id_admission_type,
             id_room_type,
             id_bmng_allocation_bed,
             id_bed_type,
             dt_discharge_schedule,
             flg_allocation_nch,
             id_nch_level,
             flg_bed_ocupacity_status,
             flg_bed_status,
             flg_bed_cleaning_status,
             has_notes,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             flg_bed_type,
             id_department,
             dt_dg_last_update)
        VALUES
            (id_bmng_action_in,
             id_bed_in,
             dt_begin_in,
             dt_end_in,
             id_bmng_reason_type_in,
             id_bmng_reason_in,
             id_episode_in,
             id_patient_in,
             id_room_in,
             id_admission_type_in,
             id_room_type_in,
             id_bmng_allocation_bed_in,
             id_bed_type_in,
             dt_discharge_schedule_in,
             flg_allocation_nch_in,
             id_nch_level_in,
             flg_bed_ocupacity_status_in,
             flg_bed_status_in,
             flg_bed_cleaning_status_in,
             has_notes_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             flg_bed_type_in,
             id_department_in,
             dt_dg_last_update_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'BMNG_BED_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    IF l_name = 'BBE_ATY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ADMISSION_TYPE',
                                                        value_in           => id_admission_type_in);
                    END IF;
                    IF l_name = 'BBE_BAB_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_ALLOCATION_BED',
                                                        value_in           => id_bmng_allocation_bed_in);
                    END IF;
                    IF l_name = 'BBE_BAN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_ACTION',
                                                        value_in           => id_bmng_action_in);
                    END IF;
                    IF l_name = 'BBE_BED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BED',
                                                        value_in           => id_bed_in);
                    END IF;
                    IF l_name = 'BBE_BRN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_REASON',
                                                        value_in           => id_bmng_reason_in);
                    END IF;
                    IF l_name = 'BBE_BRT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_REASON_TYPE',
                                                        value_in           => id_bmng_reason_type_in);
                    END IF;
                    IF l_name = 'BBE_BTY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BED_TYPE',
                                                        value_in           => id_bed_type_in);
                    END IF;
                    IF l_name = 'BBE_DEP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEPARTMENT',
                                                        value_in           => id_department_in);
                    END IF;
                    IF l_name = 'BBE_EPI_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'BBE_NCHL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_NCH_LEVEL',
                                                        value_in           => id_nch_level_in);
                    END IF;
                    IF l_name = 'BBE_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'BBE_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    IF l_name = 'BBE_RTY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM_TYPE',
                                                        value_in           => id_room_type_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_bmng_action_in           IN bmng_bed_ea.id_bmng_action%TYPE,
        id_bed_in                   IN bmng_bed_ea.id_bed%TYPE DEFAULT NULL,
        dt_begin_in                 IN bmng_bed_ea.dt_begin%TYPE DEFAULT NULL,
        dt_end_in                   IN bmng_bed_ea.dt_end%TYPE DEFAULT NULL,
        id_bmng_reason_type_in      IN bmng_bed_ea.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_reason_in           IN bmng_bed_ea.id_bmng_reason%TYPE DEFAULT NULL,
        id_episode_in               IN bmng_bed_ea.id_episode%TYPE DEFAULT NULL,
        id_patient_in               IN bmng_bed_ea.id_patient%TYPE DEFAULT NULL,
        id_room_in                  IN bmng_bed_ea.id_room%TYPE DEFAULT NULL,
        id_admission_type_in        IN bmng_bed_ea.id_admission_type%TYPE DEFAULT NULL,
        id_room_type_in             IN bmng_bed_ea.id_room_type%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_in   IN bmng_bed_ea.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        id_bed_type_in              IN bmng_bed_ea.id_bed_type%TYPE DEFAULT NULL,
        dt_discharge_schedule_in    IN bmng_bed_ea.dt_discharge_schedule%TYPE DEFAULT NULL,
        flg_allocation_nch_in       IN bmng_bed_ea.flg_allocation_nch%TYPE DEFAULT NULL,
        id_nch_level_in             IN bmng_bed_ea.id_nch_level%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_in IN bmng_bed_ea.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_status_in           IN bmng_bed_ea.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_in  IN bmng_bed_ea.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        has_notes_in                IN bmng_bed_ea.has_notes%TYPE DEFAULT 'N',
        create_user_in              IN bmng_bed_ea.create_user%TYPE DEFAULT NULL,
        create_time_in              IN bmng_bed_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN bmng_bed_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN bmng_bed_ea.update_user%TYPE DEFAULT NULL,
        update_time_in              IN bmng_bed_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN bmng_bed_ea.update_institution%TYPE DEFAULT NULL,
        flg_bed_type_in             IN bmng_bed_ea.flg_bed_type%TYPE DEFAULT NULL,
        id_department_in            IN bmng_bed_ea.id_department%TYPE DEFAULT NULL,
        dt_dg_last_update_in        IN bmng_bed_ea.dt_dg_last_update%TYPE DEFAULT current_timestamp,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_bmng_action_in           => id_bmng_action_in,
            id_bed_in                   => id_bed_in,
            dt_begin_in                 => dt_begin_in,
            dt_end_in                   => dt_end_in,
            id_bmng_reason_type_in      => id_bmng_reason_type_in,
            id_bmng_reason_in           => id_bmng_reason_in,
            id_episode_in               => id_episode_in,
            id_patient_in               => id_patient_in,
            id_room_in                  => id_room_in,
            id_admission_type_in        => id_admission_type_in,
            id_room_type_in             => id_room_type_in,
            id_bmng_allocation_bed_in   => id_bmng_allocation_bed_in,
            id_bed_type_in              => id_bed_type_in,
            dt_discharge_schedule_in    => dt_discharge_schedule_in,
            flg_allocation_nch_in       => flg_allocation_nch_in,
            id_nch_level_in             => id_nch_level_in,
            flg_bed_ocupacity_status_in => flg_bed_ocupacity_status_in,
            flg_bed_status_in           => flg_bed_status_in,
            flg_bed_cleaning_status_in  => flg_bed_cleaning_status_in,
            has_notes_in                => has_notes_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            flg_bed_type_in             => flg_bed_type_in,
            id_department_in            => id_department_in,
            dt_dg_last_update_in        => dt_dg_last_update_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN bmng_bed_ea%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec bmng_bed_ea%ROWTYPE := rec_in;
    BEGIN
        ins(id_bmng_action_in           => l_rec.id_bmng_action,
            id_bed_in                   => l_rec.id_bed,
            dt_begin_in                 => l_rec.dt_begin,
            dt_end_in                   => l_rec.dt_end,
            id_bmng_reason_type_in      => l_rec.id_bmng_reason_type,
            id_bmng_reason_in           => l_rec.id_bmng_reason,
            id_episode_in               => l_rec.id_episode,
            id_patient_in               => l_rec.id_patient,
            id_room_in                  => l_rec.id_room,
            id_admission_type_in        => l_rec.id_admission_type,
            id_room_type_in             => l_rec.id_room_type,
            id_bmng_allocation_bed_in   => l_rec.id_bmng_allocation_bed,
            id_bed_type_in              => l_rec.id_bed_type,
            dt_discharge_schedule_in    => l_rec.dt_discharge_schedule,
            flg_allocation_nch_in       => l_rec.flg_allocation_nch,
            id_nch_level_in             => l_rec.id_nch_level,
            flg_bed_ocupacity_status_in => l_rec.flg_bed_ocupacity_status,
            flg_bed_status_in           => l_rec.flg_bed_status,
            flg_bed_cleaning_status_in  => l_rec.flg_bed_cleaning_status,
            has_notes_in                => l_rec.has_notes,
            create_user_in              => l_rec.create_user,
            create_time_in              => l_rec.create_time,
            create_institution_in       => l_rec.create_institution,
            update_user_in              => l_rec.update_user,
            update_time_in              => l_rec.update_time,
            update_institution_in       => l_rec.update_institution,
            flg_bed_type_in             => l_rec.flg_bed_type,
            id_department_in            => l_rec.id_department,
            dt_dg_last_update_in        => l_rec.dt_dg_last_update,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN bmng_bed_ea%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN bmng_bed_ea_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO bmng_bed_ea
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_BMNG_ACTION _' || indx,
                                                        value_in           => rows_in(indx).id_bmng_action,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_BED _' || indx,
                                                        value_in           => rows_in(indx).id_bed,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_BEGIN _' || indx,
                                                        value_in           => rows_in(indx).dt_begin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_END _' || indx,
                                                        value_in           => rows_in(indx).dt_end,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_BMNG_REASON_TYPE _' || indx,
                                                        value_in           => rows_in(indx).id_bmng_reason_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_BMNG_REASON _' || indx,
                                                        value_in           => rows_in(indx).id_bmng_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ROOM _' || indx,
                                                        value_in           => rows_in(indx).id_room,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ADMISSION_TYPE _' || indx,
                                                        value_in           => rows_in(indx).id_admission_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ROOM_TYPE _' || indx,
                                                        value_in           => rows_in(indx).id_room_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_BMNG_ALLOCATION_BED _' || indx,
                                                        value_in           => rows_in(indx).id_bmng_allocation_bed,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_BED_TYPE _' || indx,
                                                        value_in           => rows_in(indx).id_bed_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_DISCHARGE_SCHEDULE _' || indx,
                                                        value_in           => rows_in(indx).dt_discharge_schedule,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_ALLOCATION_NCH _' || indx,
                                                        value_in           => rows_in(indx).flg_allocation_nch,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_NCH_LEVEL _' || indx,
                                                        value_in           => rows_in(indx).id_nch_level,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_BED_OCUPACITY_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_bed_ocupacity_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_BED_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_bed_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_BED_CLEANING_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_bed_cleaning_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'HAS_NOTES _' || indx,
                                                        value_in           => rows_in(indx).has_notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_BED_TYPE _' || indx,
                                                        value_in           => rows_in(indx).flg_bed_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DEPARTMENT _' || indx,
                                                        value_in           => rows_in(indx).id_department,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_DG_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(indx).dt_dg_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'BMNG_BED_EA',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN bmng_bed_ea_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_bmng_action_in            IN bmng_bed_ea.id_bmng_action%TYPE,
        id_bed_in                    IN bmng_bed_ea.id_bed%TYPE DEFAULT NULL,
        id_bed_nin                   IN BOOLEAN := TRUE,
        dt_begin_in                  IN bmng_bed_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin                 IN BOOLEAN := TRUE,
        dt_end_in                    IN bmng_bed_ea.dt_end%TYPE DEFAULT NULL,
        dt_end_nin                   IN BOOLEAN := TRUE,
        id_bmng_reason_type_in       IN bmng_bed_ea.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_reason_type_nin      IN BOOLEAN := TRUE,
        id_bmng_reason_in            IN bmng_bed_ea.id_bmng_reason%TYPE DEFAULT NULL,
        id_bmng_reason_nin           IN BOOLEAN := TRUE,
        id_episode_in                IN bmng_bed_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin               IN BOOLEAN := TRUE,
        id_patient_in                IN bmng_bed_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin               IN BOOLEAN := TRUE,
        id_room_in                   IN bmng_bed_ea.id_room%TYPE DEFAULT NULL,
        id_room_nin                  IN BOOLEAN := TRUE,
        id_admission_type_in         IN bmng_bed_ea.id_admission_type%TYPE DEFAULT NULL,
        id_admission_type_nin        IN BOOLEAN := TRUE,
        id_room_type_in              IN bmng_bed_ea.id_room_type%TYPE DEFAULT NULL,
        id_room_type_nin             IN BOOLEAN := TRUE,
        id_bmng_allocation_bed_in    IN bmng_bed_ea.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_nin   IN BOOLEAN := TRUE,
        id_bed_type_in               IN bmng_bed_ea.id_bed_type%TYPE DEFAULT NULL,
        id_bed_type_nin              IN BOOLEAN := TRUE,
        dt_discharge_schedule_in     IN bmng_bed_ea.dt_discharge_schedule%TYPE DEFAULT NULL,
        dt_discharge_schedule_nin    IN BOOLEAN := TRUE,
        flg_allocation_nch_in        IN bmng_bed_ea.flg_allocation_nch%TYPE DEFAULT NULL,
        flg_allocation_nch_nin       IN BOOLEAN := TRUE,
        id_nch_level_in              IN bmng_bed_ea.id_nch_level%TYPE DEFAULT NULL,
        id_nch_level_nin             IN BOOLEAN := TRUE,
        flg_bed_ocupacity_status_in  IN bmng_bed_ea.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_nin IN BOOLEAN := TRUE,
        flg_bed_status_in            IN bmng_bed_ea.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_status_nin           IN BOOLEAN := TRUE,
        flg_bed_cleaning_status_in   IN bmng_bed_ea.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_nin  IN BOOLEAN := TRUE,
        has_notes_in                 IN bmng_bed_ea.has_notes%TYPE DEFAULT NULL,
        has_notes_nin                IN BOOLEAN := TRUE,
        create_user_in               IN bmng_bed_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN bmng_bed_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN bmng_bed_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN bmng_bed_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN bmng_bed_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN bmng_bed_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        flg_bed_type_in              IN bmng_bed_ea.flg_bed_type%TYPE DEFAULT NULL,
        flg_bed_type_nin             IN BOOLEAN := TRUE,
        id_department_in             IN bmng_bed_ea.id_department%TYPE DEFAULT NULL,
        id_department_nin            IN BOOLEAN := TRUE,
        dt_dg_last_update_in         IN bmng_bed_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin        IN BOOLEAN := TRUE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     IN OUT table_varchar
    ) IS
        l_rows_out                   table_varchar;
        l_id_bed_n                   NUMBER(1);
        l_dt_begin_n                 NUMBER(1);
        l_dt_end_n                   NUMBER(1);
        l_id_bmng_reason_type_n      NUMBER(1);
        l_id_bmng_reason_n           NUMBER(1);
        l_id_episode_n               NUMBER(1);
        l_id_patient_n               NUMBER(1);
        l_id_room_n                  NUMBER(1);
        l_id_admission_type_n        NUMBER(1);
        l_id_room_type_n             NUMBER(1);
        l_id_bmng_allocation_bed_n   NUMBER(1);
        l_id_bed_type_n              NUMBER(1);
        l_dt_discharge_schedule_n    NUMBER(1);
        l_flg_allocation_nch_n       NUMBER(1);
        l_id_nch_level_n             NUMBER(1);
        l_flg_bed_ocupacity_status_n NUMBER(1);
        l_flg_bed_status_n           NUMBER(1);
        l_flg_bed_cleaning_status_n  NUMBER(1);
        l_has_notes_n                NUMBER(1);
        l_create_user_n              NUMBER(1);
        l_create_time_n              NUMBER(1);
        l_create_institution_n       NUMBER(1);
        l_update_user_n              NUMBER(1);
        l_update_time_n              NUMBER(1);
        l_update_institution_n       NUMBER(1);
        l_flg_bed_type_n             NUMBER(1);
        l_id_department_n            NUMBER(1);
        l_dt_dg_last_update_n        NUMBER(1);
    BEGIN
    
        l_id_bed_n                   := sys.diutil.bool_to_int(id_bed_nin);
        l_dt_begin_n                 := sys.diutil.bool_to_int(dt_begin_nin);
        l_dt_end_n                   := sys.diutil.bool_to_int(dt_end_nin);
        l_id_bmng_reason_type_n      := sys.diutil.bool_to_int(id_bmng_reason_type_nin);
        l_id_bmng_reason_n           := sys.diutil.bool_to_int(id_bmng_reason_nin);
        l_id_episode_n               := sys.diutil.bool_to_int(id_episode_nin);
        l_id_patient_n               := sys.diutil.bool_to_int(id_patient_nin);
        l_id_room_n                  := sys.diutil.bool_to_int(id_room_nin);
        l_id_admission_type_n        := sys.diutil.bool_to_int(id_admission_type_nin);
        l_id_room_type_n             := sys.diutil.bool_to_int(id_room_type_nin);
        l_id_bmng_allocation_bed_n   := sys.diutil.bool_to_int(id_bmng_allocation_bed_nin);
        l_id_bed_type_n              := sys.diutil.bool_to_int(id_bed_type_nin);
        l_dt_discharge_schedule_n    := sys.diutil.bool_to_int(dt_discharge_schedule_nin);
        l_flg_allocation_nch_n       := sys.diutil.bool_to_int(flg_allocation_nch_nin);
        l_id_nch_level_n             := sys.diutil.bool_to_int(id_nch_level_nin);
        l_flg_bed_ocupacity_status_n := sys.diutil.bool_to_int(flg_bed_ocupacity_status_nin);
        l_flg_bed_status_n           := sys.diutil.bool_to_int(flg_bed_status_nin);
        l_flg_bed_cleaning_status_n  := sys.diutil.bool_to_int(flg_bed_cleaning_status_nin);
        l_has_notes_n                := sys.diutil.bool_to_int(has_notes_nin);
        l_create_user_n              := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n              := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n       := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n              := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n              := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n       := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_bed_type_n             := sys.diutil.bool_to_int(flg_bed_type_nin);
        l_id_department_n            := sys.diutil.bool_to_int(id_department_nin);
        l_dt_dg_last_update_n        := sys.diutil.bool_to_int(dt_dg_last_update_nin);
    
        UPDATE bmng_bed_ea
           SET id_bed                   = decode(l_id_bed_n, 0, id_bed_in, nvl(id_bed_in, id_bed)),
               dt_begin                 = decode(l_dt_begin_n, 0, dt_begin_in, nvl(dt_begin_in, dt_begin)),
               dt_end                   = decode(l_dt_end_n, 0, dt_end_in, nvl(dt_end_in, dt_end)),
               id_bmng_reason_type      = decode(l_id_bmng_reason_type_n,
                                                 0,
                                                 id_bmng_reason_type_in,
                                                 nvl(id_bmng_reason_type_in, id_bmng_reason_type)),
               id_bmng_reason           = decode(l_id_bmng_reason_n,
                                                 0,
                                                 id_bmng_reason_in,
                                                 nvl(id_bmng_reason_in, id_bmng_reason)),
               id_episode               = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_patient               = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_room                  = decode(l_id_room_n, 0, id_room_in, nvl(id_room_in, id_room)),
               id_admission_type        = decode(l_id_admission_type_n,
                                                 0,
                                                 id_admission_type_in,
                                                 nvl(id_admission_type_in, id_admission_type)),
               id_room_type             = decode(l_id_room_type_n,
                                                 0,
                                                 id_room_type_in,
                                                 nvl(id_room_type_in, id_room_type)),
               id_bmng_allocation_bed   = decode(l_id_bmng_allocation_bed_n,
                                                 0,
                                                 id_bmng_allocation_bed_in,
                                                 nvl(id_bmng_allocation_bed_in, id_bmng_allocation_bed)),
               id_bed_type              = decode(l_id_bed_type_n, 0, id_bed_type_in, nvl(id_bed_type_in, id_bed_type)),
               dt_discharge_schedule    = decode(l_dt_discharge_schedule_n,
                                                 0,
                                                 dt_discharge_schedule_in,
                                                 nvl(dt_discharge_schedule_in, dt_discharge_schedule)),
               flg_allocation_nch       = decode(l_flg_allocation_nch_n,
                                                 0,
                                                 flg_allocation_nch_in,
                                                 nvl(flg_allocation_nch_in, flg_allocation_nch)),
               id_nch_level             = decode(l_id_nch_level_n,
                                                 0,
                                                 id_nch_level_in,
                                                 nvl(id_nch_level_in, id_nch_level)),
               flg_bed_ocupacity_status = decode(l_flg_bed_ocupacity_status_n,
                                                 0,
                                                 flg_bed_ocupacity_status_in,
                                                 nvl(flg_bed_ocupacity_status_in, flg_bed_ocupacity_status)),
               flg_bed_status           = decode(l_flg_bed_status_n,
                                                 0,
                                                 flg_bed_status_in,
                                                 nvl(flg_bed_status_in, flg_bed_status)),
               flg_bed_cleaning_status  = decode(l_flg_bed_cleaning_status_n,
                                                 0,
                                                 flg_bed_cleaning_status_in,
                                                 nvl(flg_bed_cleaning_status_in, flg_bed_cleaning_status)),
               has_notes                = decode(l_has_notes_n, 0, has_notes_in, nvl(has_notes_in, has_notes)),
               create_user              = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time              = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution       = decode(l_create_institution_n,
                                                 0,
                                                 create_institution_in,
                                                 nvl(create_institution_in, create_institution)),
               update_user              = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time              = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution       = decode(l_update_institution_n,
                                                 0,
                                                 update_institution_in,
                                                 nvl(update_institution_in, update_institution)),
               flg_bed_type             = decode(l_flg_bed_type_n,
                                                 0,
                                                 flg_bed_type_in,
                                                 nvl(flg_bed_type_in, flg_bed_type)),
               id_department            = decode(l_id_department_n,
                                                 0,
                                                 id_department_in,
                                                 nvl(id_department_in, id_department)),
               dt_dg_last_update        = nvl(dt_dg_last_update_in, current_timestamp)
         WHERE id_bmng_action = id_bmng_action_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'BMNG_BED_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    IF l_name = 'BBE_ATY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ADMISSION_TYPE',
                                                        value_in           => id_admission_type_in);
                    END IF;
                    IF l_name = 'BBE_BAB_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_ALLOCATION_BED',
                                                        value_in           => id_bmng_allocation_bed_in);
                    END IF;
                    IF l_name = 'BBE_BAN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_ACTION',
                                                        value_in           => id_bmng_action_in);
                    END IF;
                    IF l_name = 'BBE_BED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BED',
                                                        value_in           => id_bed_in);
                    END IF;
                    IF l_name = 'BBE_BRN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_REASON',
                                                        value_in           => id_bmng_reason_in);
                    END IF;
                    IF l_name = 'BBE_BRT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_REASON_TYPE',
                                                        value_in           => id_bmng_reason_type_in);
                    END IF;
                    IF l_name = 'BBE_BTY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BED_TYPE',
                                                        value_in           => id_bed_type_in);
                    END IF;
                    IF l_name = 'BBE_DEP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEPARTMENT',
                                                        value_in           => id_department_in);
                    END IF;
                    IF l_name = 'BBE_EPI_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'BBE_NCHL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_NCH_LEVEL',
                                                        value_in           => id_nch_level_in);
                    END IF;
                    IF l_name = 'BBE_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'BBE_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    IF l_name = 'BBE_RTY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM_TYPE',
                                                        value_in           => id_room_type_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_bmng_action_in            IN bmng_bed_ea.id_bmng_action%TYPE,
        id_bed_in                    IN bmng_bed_ea.id_bed%TYPE DEFAULT NULL,
        id_bed_nin                   IN BOOLEAN := TRUE,
        dt_begin_in                  IN bmng_bed_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin                 IN BOOLEAN := TRUE,
        dt_end_in                    IN bmng_bed_ea.dt_end%TYPE DEFAULT NULL,
        dt_end_nin                   IN BOOLEAN := TRUE,
        id_bmng_reason_type_in       IN bmng_bed_ea.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_reason_type_nin      IN BOOLEAN := TRUE,
        id_bmng_reason_in            IN bmng_bed_ea.id_bmng_reason%TYPE DEFAULT NULL,
        id_bmng_reason_nin           IN BOOLEAN := TRUE,
        id_episode_in                IN bmng_bed_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin               IN BOOLEAN := TRUE,
        id_patient_in                IN bmng_bed_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin               IN BOOLEAN := TRUE,
        id_room_in                   IN bmng_bed_ea.id_room%TYPE DEFAULT NULL,
        id_room_nin                  IN BOOLEAN := TRUE,
        id_admission_type_in         IN bmng_bed_ea.id_admission_type%TYPE DEFAULT NULL,
        id_admission_type_nin        IN BOOLEAN := TRUE,
        id_room_type_in              IN bmng_bed_ea.id_room_type%TYPE DEFAULT NULL,
        id_room_type_nin             IN BOOLEAN := TRUE,
        id_bmng_allocation_bed_in    IN bmng_bed_ea.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_nin   IN BOOLEAN := TRUE,
        id_bed_type_in               IN bmng_bed_ea.id_bed_type%TYPE DEFAULT NULL,
        id_bed_type_nin              IN BOOLEAN := TRUE,
        dt_discharge_schedule_in     IN bmng_bed_ea.dt_discharge_schedule%TYPE DEFAULT NULL,
        dt_discharge_schedule_nin    IN BOOLEAN := TRUE,
        flg_allocation_nch_in        IN bmng_bed_ea.flg_allocation_nch%TYPE DEFAULT NULL,
        flg_allocation_nch_nin       IN BOOLEAN := TRUE,
        id_nch_level_in              IN bmng_bed_ea.id_nch_level%TYPE DEFAULT NULL,
        id_nch_level_nin             IN BOOLEAN := TRUE,
        flg_bed_ocupacity_status_in  IN bmng_bed_ea.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_nin IN BOOLEAN := TRUE,
        flg_bed_status_in            IN bmng_bed_ea.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_status_nin           IN BOOLEAN := TRUE,
        flg_bed_cleaning_status_in   IN bmng_bed_ea.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_nin  IN BOOLEAN := TRUE,
        has_notes_in                 IN bmng_bed_ea.has_notes%TYPE DEFAULT NULL,
        has_notes_nin                IN BOOLEAN := TRUE,
        create_user_in               IN bmng_bed_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN bmng_bed_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN bmng_bed_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN bmng_bed_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN bmng_bed_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN bmng_bed_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        flg_bed_type_in              IN bmng_bed_ea.flg_bed_type%TYPE DEFAULT NULL,
        flg_bed_type_nin             IN BOOLEAN := TRUE,
        id_department_in             IN bmng_bed_ea.id_department%TYPE DEFAULT NULL,
        id_department_nin            IN BOOLEAN := TRUE,
        dt_dg_last_update_in         IN bmng_bed_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin        IN BOOLEAN := TRUE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_bmng_action_in            => id_bmng_action_in,
            id_bed_in                    => id_bed_in,
            id_bed_nin                   => id_bed_nin,
            dt_begin_in                  => dt_begin_in,
            dt_begin_nin                 => dt_begin_nin,
            dt_end_in                    => dt_end_in,
            dt_end_nin                   => dt_end_nin,
            id_bmng_reason_type_in       => id_bmng_reason_type_in,
            id_bmng_reason_type_nin      => id_bmng_reason_type_nin,
            id_bmng_reason_in            => id_bmng_reason_in,
            id_bmng_reason_nin           => id_bmng_reason_nin,
            id_episode_in                => id_episode_in,
            id_episode_nin               => id_episode_nin,
            id_patient_in                => id_patient_in,
            id_patient_nin               => id_patient_nin,
            id_room_in                   => id_room_in,
            id_room_nin                  => id_room_nin,
            id_admission_type_in         => id_admission_type_in,
            id_admission_type_nin        => id_admission_type_nin,
            id_room_type_in              => id_room_type_in,
            id_room_type_nin             => id_room_type_nin,
            id_bmng_allocation_bed_in    => id_bmng_allocation_bed_in,
            id_bmng_allocation_bed_nin   => id_bmng_allocation_bed_nin,
            id_bed_type_in               => id_bed_type_in,
            id_bed_type_nin              => id_bed_type_nin,
            dt_discharge_schedule_in     => dt_discharge_schedule_in,
            dt_discharge_schedule_nin    => dt_discharge_schedule_nin,
            flg_allocation_nch_in        => flg_allocation_nch_in,
            flg_allocation_nch_nin       => flg_allocation_nch_nin,
            id_nch_level_in              => id_nch_level_in,
            id_nch_level_nin             => id_nch_level_nin,
            flg_bed_ocupacity_status_in  => flg_bed_ocupacity_status_in,
            flg_bed_ocupacity_status_nin => flg_bed_ocupacity_status_nin,
            flg_bed_status_in            => flg_bed_status_in,
            flg_bed_status_nin           => flg_bed_status_nin,
            flg_bed_cleaning_status_in   => flg_bed_cleaning_status_in,
            flg_bed_cleaning_status_nin  => flg_bed_cleaning_status_nin,
            has_notes_in                 => has_notes_in,
            has_notes_nin                => has_notes_nin,
            create_user_in               => create_user_in,
            create_user_nin              => create_user_nin,
            create_time_in               => create_time_in,
            create_time_nin              => create_time_nin,
            create_institution_in        => create_institution_in,
            create_institution_nin       => create_institution_nin,
            update_user_in               => update_user_in,
            update_user_nin              => update_user_nin,
            update_time_in               => update_time_in,
            update_time_nin              => update_time_nin,
            update_institution_in        => update_institution_in,
            update_institution_nin       => update_institution_nin,
            flg_bed_type_in              => flg_bed_type_in,
            flg_bed_type_nin             => flg_bed_type_nin,
            id_department_in             => id_department_in,
            id_department_nin            => id_department_nin,
            dt_dg_last_update_in         => dt_dg_last_update_in,
            dt_dg_last_update_nin        => dt_dg_last_update_nin,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_bed_in                    IN bmng_bed_ea.id_bed%TYPE DEFAULT NULL,
        id_bed_nin                   IN BOOLEAN := TRUE,
        dt_begin_in                  IN bmng_bed_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin                 IN BOOLEAN := TRUE,
        dt_end_in                    IN bmng_bed_ea.dt_end%TYPE DEFAULT NULL,
        dt_end_nin                   IN BOOLEAN := TRUE,
        id_bmng_reason_type_in       IN bmng_bed_ea.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_reason_type_nin      IN BOOLEAN := TRUE,
        id_bmng_reason_in            IN bmng_bed_ea.id_bmng_reason%TYPE DEFAULT NULL,
        id_bmng_reason_nin           IN BOOLEAN := TRUE,
        id_episode_in                IN bmng_bed_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin               IN BOOLEAN := TRUE,
        id_patient_in                IN bmng_bed_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin               IN BOOLEAN := TRUE,
        id_room_in                   IN bmng_bed_ea.id_room%TYPE DEFAULT NULL,
        id_room_nin                  IN BOOLEAN := TRUE,
        id_admission_type_in         IN bmng_bed_ea.id_admission_type%TYPE DEFAULT NULL,
        id_admission_type_nin        IN BOOLEAN := TRUE,
        id_room_type_in              IN bmng_bed_ea.id_room_type%TYPE DEFAULT NULL,
        id_room_type_nin             IN BOOLEAN := TRUE,
        id_bmng_allocation_bed_in    IN bmng_bed_ea.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_nin   IN BOOLEAN := TRUE,
        id_bed_type_in               IN bmng_bed_ea.id_bed_type%TYPE DEFAULT NULL,
        id_bed_type_nin              IN BOOLEAN := TRUE,
        dt_discharge_schedule_in     IN bmng_bed_ea.dt_discharge_schedule%TYPE DEFAULT NULL,
        dt_discharge_schedule_nin    IN BOOLEAN := TRUE,
        flg_allocation_nch_in        IN bmng_bed_ea.flg_allocation_nch%TYPE DEFAULT NULL,
        flg_allocation_nch_nin       IN BOOLEAN := TRUE,
        id_nch_level_in              IN bmng_bed_ea.id_nch_level%TYPE DEFAULT NULL,
        id_nch_level_nin             IN BOOLEAN := TRUE,
        flg_bed_ocupacity_status_in  IN bmng_bed_ea.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_nin IN BOOLEAN := TRUE,
        flg_bed_status_in            IN bmng_bed_ea.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_status_nin           IN BOOLEAN := TRUE,
        flg_bed_cleaning_status_in   IN bmng_bed_ea.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_nin  IN BOOLEAN := TRUE,
        has_notes_in                 IN bmng_bed_ea.has_notes%TYPE DEFAULT NULL,
        has_notes_nin                IN BOOLEAN := TRUE,
        create_user_in               IN bmng_bed_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN bmng_bed_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN bmng_bed_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN bmng_bed_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN bmng_bed_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN bmng_bed_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        flg_bed_type_in              IN bmng_bed_ea.flg_bed_type%TYPE DEFAULT NULL,
        flg_bed_type_nin             IN BOOLEAN := TRUE,
        id_department_in             IN bmng_bed_ea.id_department%TYPE DEFAULT NULL,
        id_department_nin            IN BOOLEAN := TRUE,
        dt_dg_last_update_in         IN bmng_bed_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin        IN BOOLEAN := TRUE,
        where_in                     VARCHAR2 DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     IN OUT table_varchar
    ) IS
        l_sql                        VARCHAR2(32767);
        l_rows_out                   table_varchar;
        l_id_bed_n                   NUMBER(1);
        l_dt_begin_n                 NUMBER(1);
        l_dt_end_n                   NUMBER(1);
        l_id_bmng_reason_type_n      NUMBER(1);
        l_id_bmng_reason_n           NUMBER(1);
        l_id_episode_n               NUMBER(1);
        l_id_patient_n               NUMBER(1);
        l_id_room_n                  NUMBER(1);
        l_id_admission_type_n        NUMBER(1);
        l_id_room_type_n             NUMBER(1);
        l_id_bmng_allocation_bed_n   NUMBER(1);
        l_id_bed_type_n              NUMBER(1);
        l_dt_discharge_schedule_n    NUMBER(1);
        l_flg_allocation_nch_n       NUMBER(1);
        l_id_nch_level_n             NUMBER(1);
        l_flg_bed_ocupacity_status_n NUMBER(1);
        l_flg_bed_status_n           NUMBER(1);
        l_flg_bed_cleaning_status_n  NUMBER(1);
        l_has_notes_n                NUMBER(1);
        l_create_user_n              NUMBER(1);
        l_create_time_n              NUMBER(1);
        l_create_institution_n       NUMBER(1);
        l_update_user_n              NUMBER(1);
        l_update_time_n              NUMBER(1);
        l_update_institution_n       NUMBER(1);
        l_flg_bed_type_n             NUMBER(1);
        l_id_department_n            NUMBER(1);
        l_dt_dg_last_update_n        NUMBER(1);
        id_bmng_action_in            bmng_bed_ea.id_bmng_action%TYPE;
    BEGIN
    
        l_id_bed_n                   := sys.diutil.bool_to_int(id_bed_nin);
        l_dt_begin_n                 := sys.diutil.bool_to_int(dt_begin_nin);
        l_dt_end_n                   := sys.diutil.bool_to_int(dt_end_nin);
        l_id_bmng_reason_type_n      := sys.diutil.bool_to_int(id_bmng_reason_type_nin);
        l_id_bmng_reason_n           := sys.diutil.bool_to_int(id_bmng_reason_nin);
        l_id_episode_n               := sys.diutil.bool_to_int(id_episode_nin);
        l_id_patient_n               := sys.diutil.bool_to_int(id_patient_nin);
        l_id_room_n                  := sys.diutil.bool_to_int(id_room_nin);
        l_id_admission_type_n        := sys.diutil.bool_to_int(id_admission_type_nin);
        l_id_room_type_n             := sys.diutil.bool_to_int(id_room_type_nin);
        l_id_bmng_allocation_bed_n   := sys.diutil.bool_to_int(id_bmng_allocation_bed_nin);
        l_id_bed_type_n              := sys.diutil.bool_to_int(id_bed_type_nin);
        l_dt_discharge_schedule_n    := sys.diutil.bool_to_int(dt_discharge_schedule_nin);
        l_flg_allocation_nch_n       := sys.diutil.bool_to_int(flg_allocation_nch_nin);
        l_id_nch_level_n             := sys.diutil.bool_to_int(id_nch_level_nin);
        l_flg_bed_ocupacity_status_n := sys.diutil.bool_to_int(flg_bed_ocupacity_status_nin);
        l_flg_bed_status_n           := sys.diutil.bool_to_int(flg_bed_status_nin);
        l_flg_bed_cleaning_status_n  := sys.diutil.bool_to_int(flg_bed_cleaning_status_nin);
        l_has_notes_n                := sys.diutil.bool_to_int(has_notes_nin);
        l_create_user_n              := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n              := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n       := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n              := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n              := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n       := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_bed_type_n             := sys.diutil.bool_to_int(flg_bed_type_nin);
        l_id_department_n            := sys.diutil.bool_to_int(id_department_nin);
        l_dt_dg_last_update_n        := sys.diutil.bool_to_int(dt_dg_last_update_nin);
    
        l_sql := 'UPDATE BMNG_BED_EA SET ' || ' ID_BED = decode (' || l_id_bed_n ||
                 ',0,:id_bed_in, NVL (:id_bed_in, ID_BED)) ' || ',' || ' DT_BEGIN = decode (' || l_dt_begin_n ||
                 ',0,:dt_begin_in, NVL (:dt_begin_in, DT_BEGIN)) ' || ',' || ' DT_END = decode (' || l_dt_end_n ||
                 ',0,:dt_end_in, NVL (:dt_end_in, DT_END)) ' || ',' || ' ID_BMNG_REASON_TYPE = decode (' ||
                 l_id_bmng_reason_type_n ||
                 ',0,:id_bmng_reason_type_in, NVL (:id_bmng_reason_type_in, ID_BMNG_REASON_TYPE)) ' || ',' ||
                 ' ID_BMNG_REASON = decode (' || l_id_bmng_reason_n ||
                 ',0,:id_bmng_reason_in, NVL (:id_bmng_reason_in, ID_BMNG_REASON)) ' || ',' || ' ID_EPISODE = decode (' ||
                 l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' ID_PATIENT = decode (' || l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' ID_ROOM = decode (' || l_id_room_n || ',0,:id_room_in, NVL (:id_room_in, ID_ROOM)) ' || ',' ||
                 ' ID_ADMISSION_TYPE = decode (' || l_id_admission_type_n ||
                 ',0,:id_admission_type_in, NVL (:id_admission_type_in, ID_ADMISSION_TYPE)) ' || ',' ||
                 ' ID_ROOM_TYPE = decode (' || l_id_room_type_n ||
                 ',0,:id_room_type_in, NVL (:id_room_type_in, ID_ROOM_TYPE)) ' || ',' ||
                 ' ID_BMNG_ALLOCATION_BED = decode (' || l_id_bmng_allocation_bed_n ||
                 ',0,:id_bmng_allocation_bed_in, NVL (:id_bmng_allocation_bed_in, ID_BMNG_ALLOCATION_BED)) ' || ',' ||
                 ' ID_BED_TYPE = decode (' || l_id_bed_type_n ||
                 ',0,:id_bed_type_in, NVL (:id_bed_type_in, ID_BED_TYPE)) ' || ',' ||
                 ' DT_DISCHARGE_SCHEDULE = decode (' || l_dt_discharge_schedule_n ||
                 ',0,:dt_discharge_schedule_in, NVL (:dt_discharge_schedule_in, DT_DISCHARGE_SCHEDULE)) ' || ',' ||
                 ' FLG_ALLOCATION_NCH = decode (' || l_flg_allocation_nch_n ||
                 ',0,:flg_allocation_nch_in, NVL (:flg_allocation_nch_in, FLG_ALLOCATION_NCH)) ' || ',' ||
                 ' ID_NCH_LEVEL = decode (' || l_id_nch_level_n ||
                 ',0,:id_nch_level_in, NVL (:id_nch_level_in, ID_NCH_LEVEL)) ' || ',' ||
                 ' FLG_BED_OCUPACITY_STATUS = decode (' || l_flg_bed_ocupacity_status_n ||
                 ',0,:flg_bed_ocupacity_status_in, NVL (:flg_bed_ocupacity_status_in, FLG_BED_OCUPACITY_STATUS)) ' || ',' ||
                 ' FLG_BED_STATUS = decode (' || l_flg_bed_status_n ||
                 ',0,:flg_bed_status_in, NVL (:flg_bed_status_in, FLG_BED_STATUS)) ' || ',' ||
                 ' FLG_BED_CLEANING_STATUS = decode (' || l_flg_bed_cleaning_status_n ||
                 ',0,:flg_bed_cleaning_status_in, NVL (:flg_bed_cleaning_status_in, FLG_BED_CLEANING_STATUS)) ' || ',' ||
                 ' HAS_NOTES = decode (' || l_has_notes_n || ',0,:has_notes_in, NVL (:has_notes_in, HAS_NOTES)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' FLG_BED_TYPE = decode (' || l_flg_bed_type_n ||
                 ',0,:flg_bed_type_in, NVL (:flg_bed_type_in, FLG_BED_TYPE)) ' || ',' || ' ID_DEPARTMENT = decode (' ||
                 l_id_department_n || ',0,:id_department_in, NVL (:id_department_in, ID_DEPARTMENT)) ' || ',' ||
                 ' DT_DG_LAST_UPDATE = nvl(:dt_dg_last_update_in,current_timestamp) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_bed_in, dt_begin_in, dt_end_in, id_bmng_reason_type_in, id_bmng_reason_in, id_episode_in, id_patient_in, id_room_in, id_admission_type_in, id_room_type_in, id_bmng_allocation_bed_in, id_bed_type_in, dt_discharge_schedule_in, flg_allocation_nch_in, id_nch_level_in, flg_bed_ocupacity_status_in, flg_bed_status_in, flg_bed_cleaning_status_in, has_notes_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_bed_type_in, id_department_in, dt_dg_last_update_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'BMNG_BED_EA');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    IF l_name = 'BBE_ATY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ADMISSION_TYPE',
                                                        value_in           => id_admission_type_in);
                    END IF;
                    IF l_name = 'BBE_BAB_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_ALLOCATION_BED',
                                                        value_in           => id_bmng_allocation_bed_in);
                    END IF;
                    IF l_name = 'BBE_BAN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_ACTION',
                                                        value_in           => id_bmng_action_in);
                    END IF;
                    IF l_name = 'BBE_BED_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BED',
                                                        value_in           => id_bed_in);
                    END IF;
                    IF l_name = 'BBE_BRN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_REASON',
                                                        value_in           => id_bmng_reason_in);
                    END IF;
                    IF l_name = 'BBE_BRT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BMNG_REASON_TYPE',
                                                        value_in           => id_bmng_reason_type_in);
                    END IF;
                    IF l_name = 'BBE_BTY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BED_TYPE',
                                                        value_in           => id_bed_type_in);
                    END IF;
                    IF l_name = 'BBE_DEP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DEPARTMENT',
                                                        value_in           => id_department_in);
                    END IF;
                    IF l_name = 'BBE_EPI_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'BBE_NCHL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_NCH_LEVEL',
                                                        value_in           => id_nch_level_in);
                    END IF;
                    IF l_name = 'BBE_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'BBE_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    IF l_name = 'BBE_RTY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM_TYPE',
                                                        value_in           => id_room_type_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_bed_in                    IN bmng_bed_ea.id_bed%TYPE DEFAULT NULL,
        id_bed_nin                   IN BOOLEAN := TRUE,
        dt_begin_in                  IN bmng_bed_ea.dt_begin%TYPE DEFAULT NULL,
        dt_begin_nin                 IN BOOLEAN := TRUE,
        dt_end_in                    IN bmng_bed_ea.dt_end%TYPE DEFAULT NULL,
        dt_end_nin                   IN BOOLEAN := TRUE,
        id_bmng_reason_type_in       IN bmng_bed_ea.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_reason_type_nin      IN BOOLEAN := TRUE,
        id_bmng_reason_in            IN bmng_bed_ea.id_bmng_reason%TYPE DEFAULT NULL,
        id_bmng_reason_nin           IN BOOLEAN := TRUE,
        id_episode_in                IN bmng_bed_ea.id_episode%TYPE DEFAULT NULL,
        id_episode_nin               IN BOOLEAN := TRUE,
        id_patient_in                IN bmng_bed_ea.id_patient%TYPE DEFAULT NULL,
        id_patient_nin               IN BOOLEAN := TRUE,
        id_room_in                   IN bmng_bed_ea.id_room%TYPE DEFAULT NULL,
        id_room_nin                  IN BOOLEAN := TRUE,
        id_admission_type_in         IN bmng_bed_ea.id_admission_type%TYPE DEFAULT NULL,
        id_admission_type_nin        IN BOOLEAN := TRUE,
        id_room_type_in              IN bmng_bed_ea.id_room_type%TYPE DEFAULT NULL,
        id_room_type_nin             IN BOOLEAN := TRUE,
        id_bmng_allocation_bed_in    IN bmng_bed_ea.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_nin   IN BOOLEAN := TRUE,
        id_bed_type_in               IN bmng_bed_ea.id_bed_type%TYPE DEFAULT NULL,
        id_bed_type_nin              IN BOOLEAN := TRUE,
        dt_discharge_schedule_in     IN bmng_bed_ea.dt_discharge_schedule%TYPE DEFAULT NULL,
        dt_discharge_schedule_nin    IN BOOLEAN := TRUE,
        flg_allocation_nch_in        IN bmng_bed_ea.flg_allocation_nch%TYPE DEFAULT NULL,
        flg_allocation_nch_nin       IN BOOLEAN := TRUE,
        id_nch_level_in              IN bmng_bed_ea.id_nch_level%TYPE DEFAULT NULL,
        id_nch_level_nin             IN BOOLEAN := TRUE,
        flg_bed_ocupacity_status_in  IN bmng_bed_ea.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_nin IN BOOLEAN := TRUE,
        flg_bed_status_in            IN bmng_bed_ea.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_status_nin           IN BOOLEAN := TRUE,
        flg_bed_cleaning_status_in   IN bmng_bed_ea.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_nin  IN BOOLEAN := TRUE,
        has_notes_in                 IN bmng_bed_ea.has_notes%TYPE DEFAULT NULL,
        has_notes_nin                IN BOOLEAN := TRUE,
        create_user_in               IN bmng_bed_ea.create_user%TYPE DEFAULT NULL,
        create_user_nin              IN BOOLEAN := TRUE,
        create_time_in               IN bmng_bed_ea.create_time%TYPE DEFAULT NULL,
        create_time_nin              IN BOOLEAN := TRUE,
        create_institution_in        IN bmng_bed_ea.create_institution%TYPE DEFAULT NULL,
        create_institution_nin       IN BOOLEAN := TRUE,
        update_user_in               IN bmng_bed_ea.update_user%TYPE DEFAULT NULL,
        update_user_nin              IN BOOLEAN := TRUE,
        update_time_in               IN bmng_bed_ea.update_time%TYPE DEFAULT NULL,
        update_time_nin              IN BOOLEAN := TRUE,
        update_institution_in        IN bmng_bed_ea.update_institution%TYPE DEFAULT NULL,
        update_institution_nin       IN BOOLEAN := TRUE,
        flg_bed_type_in              IN bmng_bed_ea.flg_bed_type%TYPE DEFAULT NULL,
        flg_bed_type_nin             IN BOOLEAN := TRUE,
        id_department_in             IN bmng_bed_ea.id_department%TYPE DEFAULT NULL,
        id_department_nin            IN BOOLEAN := TRUE,
        dt_dg_last_update_in         IN bmng_bed_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        dt_dg_last_update_nin        IN BOOLEAN := TRUE,
        where_in                     VARCHAR2 DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_bed_in                    => id_bed_in,
            id_bed_nin                   => id_bed_nin,
            dt_begin_in                  => dt_begin_in,
            dt_begin_nin                 => dt_begin_nin,
            dt_end_in                    => dt_end_in,
            dt_end_nin                   => dt_end_nin,
            id_bmng_reason_type_in       => id_bmng_reason_type_in,
            id_bmng_reason_type_nin      => id_bmng_reason_type_nin,
            id_bmng_reason_in            => id_bmng_reason_in,
            id_bmng_reason_nin           => id_bmng_reason_nin,
            id_episode_in                => id_episode_in,
            id_episode_nin               => id_episode_nin,
            id_patient_in                => id_patient_in,
            id_patient_nin               => id_patient_nin,
            id_room_in                   => id_room_in,
            id_room_nin                  => id_room_nin,
            id_admission_type_in         => id_admission_type_in,
            id_admission_type_nin        => id_admission_type_nin,
            id_room_type_in              => id_room_type_in,
            id_room_type_nin             => id_room_type_nin,
            id_bmng_allocation_bed_in    => id_bmng_allocation_bed_in,
            id_bmng_allocation_bed_nin   => id_bmng_allocation_bed_nin,
            id_bed_type_in               => id_bed_type_in,
            id_bed_type_nin              => id_bed_type_nin,
            dt_discharge_schedule_in     => dt_discharge_schedule_in,
            dt_discharge_schedule_nin    => dt_discharge_schedule_nin,
            flg_allocation_nch_in        => flg_allocation_nch_in,
            flg_allocation_nch_nin       => flg_allocation_nch_nin,
            id_nch_level_in              => id_nch_level_in,
            id_nch_level_nin             => id_nch_level_nin,
            flg_bed_ocupacity_status_in  => flg_bed_ocupacity_status_in,
            flg_bed_ocupacity_status_nin => flg_bed_ocupacity_status_nin,
            flg_bed_status_in            => flg_bed_status_in,
            flg_bed_status_nin           => flg_bed_status_nin,
            flg_bed_cleaning_status_in   => flg_bed_cleaning_status_in,
            flg_bed_cleaning_status_nin  => flg_bed_cleaning_status_nin,
            has_notes_in                 => has_notes_in,
            has_notes_nin                => has_notes_nin,
            create_user_in               => create_user_in,
            create_user_nin              => create_user_nin,
            create_time_in               => create_time_in,
            create_time_nin              => create_time_nin,
            create_institution_in        => create_institution_in,
            create_institution_nin       => create_institution_nin,
            update_user_in               => update_user_in,
            update_user_nin              => update_user_nin,
            update_time_in               => update_time_in,
            update_time_nin              => update_time_nin,
            update_institution_in        => update_institution_in,
            update_institution_nin       => update_institution_nin,
            flg_bed_type_in              => flg_bed_type_in,
            flg_bed_type_nin             => flg_bed_type_nin,
            id_department_in             => id_department_in,
            id_department_nin            => id_department_nin,
            dt_dg_last_update_in         => dt_dg_last_update_in,
            dt_dg_last_update_nin        => dt_dg_last_update_nin,
            where_in                     => where_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN bmng_bed_ea%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_bmng_action_in           => rec_in.id_bmng_action,
            id_bed_in                   => rec_in.id_bed,
            dt_begin_in                 => rec_in.dt_begin,
            dt_end_in                   => rec_in.dt_end,
            id_bmng_reason_type_in      => rec_in.id_bmng_reason_type,
            id_bmng_reason_in           => rec_in.id_bmng_reason,
            id_episode_in               => rec_in.id_episode,
            id_patient_in               => rec_in.id_patient,
            id_room_in                  => rec_in.id_room,
            id_admission_type_in        => rec_in.id_admission_type,
            id_room_type_in             => rec_in.id_room_type,
            id_bmng_allocation_bed_in   => rec_in.id_bmng_allocation_bed,
            id_bed_type_in              => rec_in.id_bed_type,
            dt_discharge_schedule_in    => rec_in.dt_discharge_schedule,
            flg_allocation_nch_in       => rec_in.flg_allocation_nch,
            id_nch_level_in             => rec_in.id_nch_level,
            flg_bed_ocupacity_status_in => rec_in.flg_bed_ocupacity_status,
            flg_bed_status_in           => rec_in.flg_bed_status,
            flg_bed_cleaning_status_in  => rec_in.flg_bed_cleaning_status,
            has_notes_in                => rec_in.has_notes,
            create_user_in              => rec_in.create_user,
            create_time_in              => rec_in.create_time,
            create_institution_in       => rec_in.create_institution,
            update_user_in              => rec_in.update_user,
            update_time_in              => rec_in.update_time,
            update_institution_in       => rec_in.update_institution,
            flg_bed_type_in             => rec_in.flg_bed_type,
            id_department_in            => rec_in.id_department,
            dt_dg_last_update_in        => rec_in.dt_dg_last_update
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN bmng_bed_ea%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_bmng_action_in           => rec_in.id_bmng_action,
            id_bed_in                   => rec_in.id_bed,
            dt_begin_in                 => rec_in.dt_begin,
            dt_end_in                   => rec_in.dt_end,
            id_bmng_reason_type_in      => rec_in.id_bmng_reason_type,
            id_bmng_reason_in           => rec_in.id_bmng_reason,
            id_episode_in               => rec_in.id_episode,
            id_patient_in               => rec_in.id_patient,
            id_room_in                  => rec_in.id_room,
            id_admission_type_in        => rec_in.id_admission_type,
            id_room_type_in             => rec_in.id_room_type,
            id_bmng_allocation_bed_in   => rec_in.id_bmng_allocation_bed,
            id_bed_type_in              => rec_in.id_bed_type,
            dt_discharge_schedule_in    => rec_in.dt_discharge_schedule,
            flg_allocation_nch_in       => rec_in.flg_allocation_nch,
            id_nch_level_in             => rec_in.id_nch_level,
            flg_bed_ocupacity_status_in => rec_in.flg_bed_ocupacity_status,
            flg_bed_status_in           => rec_in.flg_bed_status,
            flg_bed_cleaning_status_in  => rec_in.flg_bed_cleaning_status,
            has_notes_in                => rec_in.has_notes,
            create_user_in              => rec_in.create_user,
            create_time_in              => rec_in.create_time,
            create_institution_in       => rec_in.create_institution,
            update_user_in              => rec_in.update_user,
            update_time_in              => rec_in.update_time,
            update_institution_in       => rec_in.update_institution,
            flg_bed_type_in             => rec_in.flg_bed_type,
            id_department_in            => rec_in.id_department,
            dt_dg_last_update_in        => rec_in.dt_dg_last_update
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_bmng_action_in           IN bmng_bed_ea.id_bmng_action%TYPE,
        id_bed_in                   IN bmng_bed_ea.id_bed%TYPE DEFAULT NULL,
        dt_begin_in                 IN bmng_bed_ea.dt_begin%TYPE DEFAULT NULL,
        dt_end_in                   IN bmng_bed_ea.dt_end%TYPE DEFAULT NULL,
        id_bmng_reason_type_in      IN bmng_bed_ea.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_reason_in           IN bmng_bed_ea.id_bmng_reason%TYPE DEFAULT NULL,
        id_episode_in               IN bmng_bed_ea.id_episode%TYPE DEFAULT NULL,
        id_patient_in               IN bmng_bed_ea.id_patient%TYPE DEFAULT NULL,
        id_room_in                  IN bmng_bed_ea.id_room%TYPE DEFAULT NULL,
        id_admission_type_in        IN bmng_bed_ea.id_admission_type%TYPE DEFAULT NULL,
        id_room_type_in             IN bmng_bed_ea.id_room_type%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_in   IN bmng_bed_ea.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        id_bed_type_in              IN bmng_bed_ea.id_bed_type%TYPE DEFAULT NULL,
        dt_discharge_schedule_in    IN bmng_bed_ea.dt_discharge_schedule%TYPE DEFAULT NULL,
        flg_allocation_nch_in       IN bmng_bed_ea.flg_allocation_nch%TYPE DEFAULT NULL,
        id_nch_level_in             IN bmng_bed_ea.id_nch_level%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_in IN bmng_bed_ea.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_status_in           IN bmng_bed_ea.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_in  IN bmng_bed_ea.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        has_notes_in                IN bmng_bed_ea.has_notes%TYPE DEFAULT NULL,
        create_user_in              IN bmng_bed_ea.create_user%TYPE DEFAULT NULL,
        create_time_in              IN bmng_bed_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN bmng_bed_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN bmng_bed_ea.update_user%TYPE DEFAULT NULL,
        update_time_in              IN bmng_bed_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN bmng_bed_ea.update_institution%TYPE DEFAULT NULL,
        flg_bed_type_in             IN bmng_bed_ea.flg_bed_type%TYPE DEFAULT NULL,
        id_department_in            IN bmng_bed_ea.id_department%TYPE DEFAULT NULL,
        dt_dg_last_update_in        IN bmng_bed_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    OUT table_varchar
    ) IS
    BEGIN
        upd(id_bmng_action_in           => id_bmng_action_in,
            id_bed_in                   => id_bed_in,
            dt_begin_in                 => dt_begin_in,
            dt_end_in                   => dt_end_in,
            id_bmng_reason_type_in      => id_bmng_reason_type_in,
            id_bmng_reason_in           => id_bmng_reason_in,
            id_episode_in               => id_episode_in,
            id_patient_in               => id_patient_in,
            id_room_in                  => id_room_in,
            id_admission_type_in        => id_admission_type_in,
            id_room_type_in             => id_room_type_in,
            id_bmng_allocation_bed_in   => id_bmng_allocation_bed_in,
            id_bed_type_in              => id_bed_type_in,
            dt_discharge_schedule_in    => dt_discharge_schedule_in,
            flg_allocation_nch_in       => flg_allocation_nch_in,
            id_nch_level_in             => id_nch_level_in,
            flg_bed_ocupacity_status_in => flg_bed_ocupacity_status_in,
            flg_bed_status_in           => flg_bed_status_in,
            flg_bed_cleaning_status_in  => flg_bed_cleaning_status_in,
            has_notes_in                => has_notes_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            flg_bed_type_in             => flg_bed_type_in,
            id_department_in            => id_department_in,
            dt_dg_last_update_in        => dt_dg_last_update_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_bmng_action_in           => id_bmng_action_in,
                id_bed_in                   => id_bed_in,
                dt_begin_in                 => dt_begin_in,
                dt_end_in                   => dt_end_in,
                id_bmng_reason_type_in      => id_bmng_reason_type_in,
                id_bmng_reason_in           => id_bmng_reason_in,
                id_episode_in               => id_episode_in,
                id_patient_in               => id_patient_in,
                id_room_in                  => id_room_in,
                id_admission_type_in        => id_admission_type_in,
                id_room_type_in             => id_room_type_in,
                id_bmng_allocation_bed_in   => id_bmng_allocation_bed_in,
                id_bed_type_in              => id_bed_type_in,
                dt_discharge_schedule_in    => dt_discharge_schedule_in,
                flg_allocation_nch_in       => flg_allocation_nch_in,
                id_nch_level_in             => id_nch_level_in,
                flg_bed_ocupacity_status_in => flg_bed_ocupacity_status_in,
                flg_bed_status_in           => flg_bed_status_in,
                flg_bed_cleaning_status_in  => flg_bed_cleaning_status_in,
                has_notes_in                => has_notes_in,
                create_user_in              => create_user_in,
                create_time_in              => create_time_in,
                create_institution_in       => create_institution_in,
                update_user_in              => update_user_in,
                update_time_in              => update_time_in,
                update_institution_in       => update_institution_in,
                flg_bed_type_in             => flg_bed_type_in,
                id_department_in            => id_department_in,
                dt_dg_last_update_in        => dt_dg_last_update_in,
                handle_error_in             => handle_error_in,
                rows_out                    => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_bmng_action_in           IN bmng_bed_ea.id_bmng_action%TYPE,
        id_bed_in                   IN bmng_bed_ea.id_bed%TYPE DEFAULT NULL,
        dt_begin_in                 IN bmng_bed_ea.dt_begin%TYPE DEFAULT NULL,
        dt_end_in                   IN bmng_bed_ea.dt_end%TYPE DEFAULT NULL,
        id_bmng_reason_type_in      IN bmng_bed_ea.id_bmng_reason_type%TYPE DEFAULT NULL,
        id_bmng_reason_in           IN bmng_bed_ea.id_bmng_reason%TYPE DEFAULT NULL,
        id_episode_in               IN bmng_bed_ea.id_episode%TYPE DEFAULT NULL,
        id_patient_in               IN bmng_bed_ea.id_patient%TYPE DEFAULT NULL,
        id_room_in                  IN bmng_bed_ea.id_room%TYPE DEFAULT NULL,
        id_admission_type_in        IN bmng_bed_ea.id_admission_type%TYPE DEFAULT NULL,
        id_room_type_in             IN bmng_bed_ea.id_room_type%TYPE DEFAULT NULL,
        id_bmng_allocation_bed_in   IN bmng_bed_ea.id_bmng_allocation_bed%TYPE DEFAULT NULL,
        id_bed_type_in              IN bmng_bed_ea.id_bed_type%TYPE DEFAULT NULL,
        dt_discharge_schedule_in    IN bmng_bed_ea.dt_discharge_schedule%TYPE DEFAULT NULL,
        flg_allocation_nch_in       IN bmng_bed_ea.flg_allocation_nch%TYPE DEFAULT NULL,
        id_nch_level_in             IN bmng_bed_ea.id_nch_level%TYPE DEFAULT NULL,
        flg_bed_ocupacity_status_in IN bmng_bed_ea.flg_bed_ocupacity_status%TYPE DEFAULT NULL,
        flg_bed_status_in           IN bmng_bed_ea.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_cleaning_status_in  IN bmng_bed_ea.flg_bed_cleaning_status%TYPE DEFAULT NULL,
        has_notes_in                IN bmng_bed_ea.has_notes%TYPE DEFAULT NULL,
        create_user_in              IN bmng_bed_ea.create_user%TYPE DEFAULT NULL,
        create_time_in              IN bmng_bed_ea.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN bmng_bed_ea.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN bmng_bed_ea.update_user%TYPE DEFAULT NULL,
        update_time_in              IN bmng_bed_ea.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN bmng_bed_ea.update_institution%TYPE DEFAULT NULL,
        flg_bed_type_in             IN bmng_bed_ea.flg_bed_type%TYPE DEFAULT NULL,
        id_department_in            IN bmng_bed_ea.id_department%TYPE DEFAULT NULL,
        dt_dg_last_update_in        IN bmng_bed_ea.dt_dg_last_update%TYPE DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_bmng_action_in,
                id_bed_in,
                dt_begin_in,
                dt_end_in,
                id_bmng_reason_type_in,
                id_bmng_reason_in,
                id_episode_in,
                id_patient_in,
                id_room_in,
                id_admission_type_in,
                id_room_type_in,
                id_bmng_allocation_bed_in,
                id_bed_type_in,
                dt_discharge_schedule_in,
                flg_allocation_nch_in,
                id_nch_level_in,
                flg_bed_ocupacity_status_in,
                flg_bed_status_in,
                flg_bed_cleaning_status_in,
                has_notes_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                flg_bed_type_in,
                id_department_in,
                dt_dg_last_update_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN bmng_bed_ea_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_bmng_action           id_bmng_action_cc;
        l_id_bed                   id_bed_cc;
        l_dt_begin                 dt_begin_cc;
        l_dt_end                   dt_end_cc;
        l_id_bmng_reason_type      id_bmng_reason_type_cc;
        l_id_bmng_reason           id_bmng_reason_cc;
        l_id_episode               id_episode_cc;
        l_id_patient               id_patient_cc;
        l_id_room                  id_room_cc;
        l_id_admission_type        id_admission_type_cc;
        l_id_room_type             id_room_type_cc;
        l_id_bmng_allocation_bed   id_bmng_allocation_bed_cc;
        l_id_bed_type              id_bed_type_cc;
        l_dt_discharge_schedule    dt_discharge_schedule_cc;
        l_flg_allocation_nch       flg_allocation_nch_cc;
        l_id_nch_level             id_nch_level_cc;
        l_flg_bed_ocupacity_status flg_bed_ocupacity_status_cc;
        l_flg_bed_status           flg_bed_status_cc;
        l_flg_bed_cleaning_status  flg_bed_cleaning_status_cc;
        l_has_notes                has_notes_cc;
        l_create_user              create_user_cc;
        l_create_time              create_time_cc;
        l_create_institution       create_institution_cc;
        l_update_user              update_user_cc;
        l_update_time              update_time_cc;
        l_update_institution       update_institution_cc;
        l_flg_bed_type             flg_bed_type_cc;
        l_id_department            id_department_cc;
        l_dt_dg_last_update        dt_dg_last_update_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_bmng_action(i) := col_in(i).id_bmng_action;
            l_id_bed(i) := col_in(i).id_bed;
            l_dt_begin(i) := col_in(i).dt_begin;
            l_dt_end(i) := col_in(i).dt_end;
            l_id_bmng_reason_type(i) := col_in(i).id_bmng_reason_type;
            l_id_bmng_reason(i) := col_in(i).id_bmng_reason;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_room(i) := col_in(i).id_room;
            l_id_admission_type(i) := col_in(i).id_admission_type;
            l_id_room_type(i) := col_in(i).id_room_type;
            l_id_bmng_allocation_bed(i) := col_in(i).id_bmng_allocation_bed;
            l_id_bed_type(i) := col_in(i).id_bed_type;
            l_dt_discharge_schedule(i) := col_in(i).dt_discharge_schedule;
            l_flg_allocation_nch(i) := col_in(i).flg_allocation_nch;
            l_id_nch_level(i) := col_in(i).id_nch_level;
            l_flg_bed_ocupacity_status(i) := col_in(i).flg_bed_ocupacity_status;
            l_flg_bed_status(i) := col_in(i).flg_bed_status;
            l_flg_bed_cleaning_status(i) := col_in(i).flg_bed_cleaning_status;
            l_has_notes(i) := col_in(i).has_notes;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_flg_bed_type(i) := col_in(i).flg_bed_type;
            l_id_department(i) := col_in(i).id_department;
            l_dt_dg_last_update(i) := col_in(i).dt_dg_last_update;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE bmng_bed_ea
                   SET id_bed                   = nvl(l_id_bed(i), id_bed),
                       dt_begin                 = nvl(l_dt_begin(i), dt_begin),
                       dt_end                   = nvl(l_dt_end(i), dt_end),
                       id_bmng_reason_type      = nvl(l_id_bmng_reason_type(i), id_bmng_reason_type),
                       id_bmng_reason           = nvl(l_id_bmng_reason(i), id_bmng_reason),
                       id_episode               = nvl(l_id_episode(i), id_episode),
                       id_patient               = nvl(l_id_patient(i), id_patient),
                       id_room                  = nvl(l_id_room(i), id_room),
                       id_admission_type        = nvl(l_id_admission_type(i), id_admission_type),
                       id_room_type             = nvl(l_id_room_type(i), id_room_type),
                       id_bmng_allocation_bed   = nvl(l_id_bmng_allocation_bed(i), id_bmng_allocation_bed),
                       id_bed_type              = nvl(l_id_bed_type(i), id_bed_type),
                       dt_discharge_schedule    = nvl(l_dt_discharge_schedule(i), dt_discharge_schedule),
                       flg_allocation_nch       = nvl(l_flg_allocation_nch(i), flg_allocation_nch),
                       id_nch_level             = nvl(l_id_nch_level(i), id_nch_level),
                       flg_bed_ocupacity_status = nvl(l_flg_bed_ocupacity_status(i), flg_bed_ocupacity_status),
                       flg_bed_status           = nvl(l_flg_bed_status(i), flg_bed_status),
                       flg_bed_cleaning_status  = nvl(l_flg_bed_cleaning_status(i), flg_bed_cleaning_status),
                       has_notes                = nvl(l_has_notes(i), has_notes),
                       create_user              = nvl(l_create_user(i), create_user),
                       create_time              = nvl(l_create_time(i), create_time),
                       create_institution       = nvl(l_create_institution(i), create_institution),
                       update_user              = nvl(l_update_user(i), update_user),
                       update_time              = nvl(l_update_time(i), update_time),
                       update_institution       = nvl(l_update_institution(i), update_institution),
                       flg_bed_type             = nvl(l_flg_bed_type(i), flg_bed_type),
                       id_department            = nvl(l_id_department(i), id_department),
                       dt_dg_last_update        = nvl(l_dt_dg_last_update(i), current_timestamp)
                 WHERE id_bmng_action = l_id_bmng_action(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE bmng_bed_ea
                   SET id_bed                   = l_id_bed(i),
                       dt_begin                 = l_dt_begin(i),
                       dt_end                   = l_dt_end(i),
                       id_bmng_reason_type      = l_id_bmng_reason_type(i),
                       id_bmng_reason           = l_id_bmng_reason(i),
                       id_episode               = l_id_episode(i),
                       id_patient               = l_id_patient(i),
                       id_room                  = l_id_room(i),
                       id_admission_type        = l_id_admission_type(i),
                       id_room_type             = l_id_room_type(i),
                       id_bmng_allocation_bed   = l_id_bmng_allocation_bed(i),
                       id_bed_type              = l_id_bed_type(i),
                       dt_discharge_schedule    = l_dt_discharge_schedule(i),
                       flg_allocation_nch       = l_flg_allocation_nch(i),
                       id_nch_level             = l_id_nch_level(i),
                       flg_bed_ocupacity_status = l_flg_bed_ocupacity_status(i),
                       flg_bed_status           = l_flg_bed_status(i),
                       flg_bed_cleaning_status  = l_flg_bed_cleaning_status(i),
                       has_notes                = l_has_notes(i),
                       create_user              = l_create_user(i),
                       create_time              = l_create_time(i),
                       create_institution       = l_create_institution(i),
                       update_user              = l_update_user(i),
                       update_time              = l_update_time(i),
                       update_institution       = l_update_institution(i),
                       flg_bed_type             = l_flg_bed_type(i),
                       id_department            = l_id_department(i),
                       dt_dg_last_update        = nvl(l_dt_dg_last_update(i), current_timestamp)
                 WHERE id_bmng_action = l_id_bmng_action(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN bmng_bed_ea_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE BMNG_BED_EA
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE BMNG_BED_EA
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE BMNG_BED_EA set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE BMNG_BED_EA set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_bmng_action_in IN bmng_bed_ea.id_bmng_action%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_bed_ea
         WHERE id_bmng_action = id_bmng_action_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_bmng_action_in IN bmng_bed_ea.id_bmng_action%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_bmng_action_in => id_bmng_action_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_BMNG_ACTION
    PROCEDURE del_id_bmng_action
    (
        id_bmng_action_in IN bmng_bed_ea.id_bmng_action%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_bed_ea
         WHERE id_bmng_action = id_bmng_action_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_bmng_action;

    -- Delete all rows for primary key column ID_BMNG_ACTION
    PROCEDURE del_id_bmng_action
    (
        id_bmng_action_in IN bmng_bed_ea.id_bmng_action%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_bmng_action(id_bmng_action_in => id_bmng_action_in,
                           handle_error_in   => handle_error_in,
                           rows_out          => rows_out);
    END del_id_bmng_action;

    PROCEDURE del_bbe_aty_fk
    (
        id_admission_type_in IN bmng_bed_ea.id_admission_type%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_bed_ea
         WHERE id_admission_type = del_bbe_aty_fk.id_admission_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bbe_aty_fk;

    PROCEDURE del_bbe_aty_fk
    (
        id_admission_type_in IN bmng_bed_ea.id_admission_type%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bbe_aty_fk(id_admission_type_in => id_admission_type_in,
                       handle_error_in      => handle_error_in,
                       rows_out             => rows_out);
    END del_bbe_aty_fk;

    PROCEDURE del_bbe_bab_fk
    (
        id_bmng_allocation_bed_in IN bmng_bed_ea.id_bmng_allocation_bed%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_bed_ea
         WHERE id_bmng_allocation_bed = del_bbe_bab_fk.id_bmng_allocation_bed_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bbe_bab_fk;

    PROCEDURE del_bbe_bab_fk
    (
        id_bmng_allocation_bed_in IN bmng_bed_ea.id_bmng_allocation_bed%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bbe_bab_fk(id_bmng_allocation_bed_in => id_bmng_allocation_bed_in,
                       handle_error_in           => handle_error_in,
                       rows_out                  => rows_out);
    END del_bbe_bab_fk;

    PROCEDURE del_bbe_ban_fk
    (
        id_bmng_action_in IN bmng_bed_ea.id_bmng_action%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_bed_ea
         WHERE id_bmng_action = del_bbe_ban_fk.id_bmng_action_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bbe_ban_fk;

    PROCEDURE del_bbe_ban_fk
    (
        id_bmng_action_in IN bmng_bed_ea.id_bmng_action%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bbe_ban_fk(id_bmng_action_in => id_bmng_action_in,
                       handle_error_in   => handle_error_in,
                       rows_out          => rows_out);
    END del_bbe_ban_fk;

    PROCEDURE del_bbe_bed_fk
    (
        id_bed_in       IN bmng_bed_ea.id_bed%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_bed_ea
         WHERE id_bed = del_bbe_bed_fk.id_bed_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bbe_bed_fk;

    PROCEDURE del_bbe_bed_fk
    (
        id_bed_in       IN bmng_bed_ea.id_bed%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bbe_bed_fk(id_bed_in => id_bed_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_bbe_bed_fk;

    PROCEDURE del_bbe_brn_fk
    (
        id_bmng_reason_in IN bmng_bed_ea.id_bmng_reason%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_bed_ea
         WHERE id_bmng_reason = del_bbe_brn_fk.id_bmng_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bbe_brn_fk;

    PROCEDURE del_bbe_brn_fk
    (
        id_bmng_reason_in IN bmng_bed_ea.id_bmng_reason%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bbe_brn_fk(id_bmng_reason_in => id_bmng_reason_in,
                       handle_error_in   => handle_error_in,
                       rows_out          => rows_out);
    END del_bbe_brn_fk;

    PROCEDURE del_bbe_brt_fk
    (
        id_bmng_reason_type_in IN bmng_bed_ea.id_bmng_reason_type%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_bed_ea
         WHERE id_bmng_reason_type = del_bbe_brt_fk.id_bmng_reason_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bbe_brt_fk;

    PROCEDURE del_bbe_brt_fk
    (
        id_bmng_reason_type_in IN bmng_bed_ea.id_bmng_reason_type%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bbe_brt_fk(id_bmng_reason_type_in => id_bmng_reason_type_in,
                       handle_error_in        => handle_error_in,
                       rows_out               => rows_out);
    END del_bbe_brt_fk;

    PROCEDURE del_bbe_bty_fk
    (
        id_bed_type_in  IN bmng_bed_ea.id_bed_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_bed_ea
         WHERE id_bed_type = del_bbe_bty_fk.id_bed_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bbe_bty_fk;

    PROCEDURE del_bbe_bty_fk
    (
        id_bed_type_in  IN bmng_bed_ea.id_bed_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bbe_bty_fk(id_bed_type_in => id_bed_type_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_bbe_bty_fk;

    PROCEDURE del_bbe_dep_fk
    (
        id_department_in IN bmng_bed_ea.id_department%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_bed_ea
         WHERE id_department = del_bbe_dep_fk.id_department_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bbe_dep_fk;

    PROCEDURE del_bbe_dep_fk
    (
        id_department_in IN bmng_bed_ea.id_department%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bbe_dep_fk(id_department_in => id_department_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_bbe_dep_fk;

    PROCEDURE del_bbe_epi_fk
    (
        id_episode_in   IN bmng_bed_ea.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_bed_ea
         WHERE id_episode = del_bbe_epi_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bbe_epi_fk;

    PROCEDURE del_bbe_epi_fk
    (
        id_episode_in   IN bmng_bed_ea.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bbe_epi_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_bbe_epi_fk;

    PROCEDURE del_bbe_nchl_fk
    (
        id_nch_level_in IN bmng_bed_ea.id_nch_level%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_bed_ea
         WHERE id_nch_level = del_bbe_nchl_fk.id_nch_level_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bbe_nchl_fk;

    PROCEDURE del_bbe_nchl_fk
    (
        id_nch_level_in IN bmng_bed_ea.id_nch_level%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bbe_nchl_fk(id_nch_level_in => id_nch_level_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_bbe_nchl_fk;

    PROCEDURE del_bbe_pat_fk
    (
        id_patient_in   IN bmng_bed_ea.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_bed_ea
         WHERE id_patient = del_bbe_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bbe_pat_fk;

    PROCEDURE del_bbe_pat_fk
    (
        id_patient_in   IN bmng_bed_ea.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bbe_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_bbe_pat_fk;

    PROCEDURE del_bbe_room_fk
    (
        id_room_in      IN bmng_bed_ea.id_room%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_bed_ea
         WHERE id_room = del_bbe_room_fk.id_room_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bbe_room_fk;

    PROCEDURE del_bbe_room_fk
    (
        id_room_in      IN bmng_bed_ea.id_room%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bbe_room_fk(id_room_in => id_room_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_bbe_room_fk;

    PROCEDURE del_bbe_rty_fk
    (
        id_room_type_in IN bmng_bed_ea.id_room_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bmng_bed_ea
         WHERE id_room_type = del_bbe_rty_fk.id_room_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bbe_rty_fk;

    PROCEDURE del_bbe_rty_fk
    (
        id_room_type_in IN bmng_bed_ea.id_room_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bbe_rty_fk(id_room_type_in => id_room_type_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_bbe_rty_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM BMNG_BED_EA';
        ELSE
            RETURN 'DELETE FROM BMNG_BED_EA WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BMNG_BED_EA');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BMNG_BED_EA');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(bmng_bed_ea_inout IN OUT bmng_bed_ea%ROWTYPE) IS
    BEGIN
        bmng_bed_ea_inout.id_bmng_action           := NULL;
        bmng_bed_ea_inout.id_bed                   := NULL;
        bmng_bed_ea_inout.dt_begin                 := NULL;
        bmng_bed_ea_inout.dt_end                   := NULL;
        bmng_bed_ea_inout.id_bmng_reason_type      := NULL;
        bmng_bed_ea_inout.id_bmng_reason           := NULL;
        bmng_bed_ea_inout.id_episode               := NULL;
        bmng_bed_ea_inout.id_patient               := NULL;
        bmng_bed_ea_inout.id_room                  := NULL;
        bmng_bed_ea_inout.id_admission_type        := NULL;
        bmng_bed_ea_inout.id_room_type             := NULL;
        bmng_bed_ea_inout.id_bmng_allocation_bed   := NULL;
        bmng_bed_ea_inout.id_bed_type              := NULL;
        bmng_bed_ea_inout.dt_discharge_schedule    := NULL;
        bmng_bed_ea_inout.flg_allocation_nch       := NULL;
        bmng_bed_ea_inout.id_nch_level             := NULL;
        bmng_bed_ea_inout.flg_bed_ocupacity_status := NULL;
        bmng_bed_ea_inout.flg_bed_status           := NULL;
        bmng_bed_ea_inout.flg_bed_cleaning_status  := NULL;
        bmng_bed_ea_inout.has_notes                := 'N';
        bmng_bed_ea_inout.create_user              := NULL;
        bmng_bed_ea_inout.create_time              := NULL;
        bmng_bed_ea_inout.create_institution       := NULL;
        bmng_bed_ea_inout.update_user              := NULL;
        bmng_bed_ea_inout.update_time              := NULL;
        bmng_bed_ea_inout.update_institution       := NULL;
        bmng_bed_ea_inout.flg_bed_type             := NULL;
        bmng_bed_ea_inout.id_department            := NULL;
        bmng_bed_ea_inout.dt_dg_last_update        := current_timestamp;
    END initrec;

    FUNCTION initrec RETURN bmng_bed_ea%ROWTYPE IS
        l_bmng_bed_ea bmng_bed_ea%ROWTYPE;
    BEGIN
        l_bmng_bed_ea.flg_allocation_nch       := NULL;
        l_bmng_bed_ea.flg_bed_ocupacity_status := NULL;
        l_bmng_bed_ea.flg_bed_status           := NULL;
        l_bmng_bed_ea.flg_bed_cleaning_status  := NULL;
        l_bmng_bed_ea.has_notes                := 'N';
        l_bmng_bed_ea.flg_bed_type             := NULL;
        l_bmng_bed_ea.dt_dg_last_update        := current_timestamp;
        RETURN l_bmng_bed_ea;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN bmng_bed_ea_tc IS
        data bmng_bed_ea_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM bmng_bed_ea
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN bmng_bed_ea_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data bmng_bed_ea_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_bmng_bed_ea;
/
