/*-- Last Change Revision: $Rev: 2027945 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:43:45 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_bed
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Agosto 19, 2010 16:44:6
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_bed_in                    IN bed.id_bed%TYPE,
        code_bed_in                  IN bed.code_bed%TYPE DEFAULT NULL,
        id_room_in                   IN bed.id_room%TYPE DEFAULT NULL,
        flg_type_in                  IN bed.flg_type%TYPE DEFAULT 'T',
        flg_status_in                IN bed.flg_status%TYPE DEFAULT 'O',
        desc_bed_in                  IN bed.desc_bed%TYPE DEFAULT NULL,
        notes_in                     IN bed.notes%TYPE DEFAULT NULL,
        rank_in                      IN bed.rank%TYPE DEFAULT NULL,
        flg_available_in             IN bed.flg_available%TYPE DEFAULT 'Y',
        create_user_in               IN bed.create_user%TYPE DEFAULT NULL,
        create_time_in               IN bed.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN bed.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN bed.update_user%TYPE DEFAULT NULL,
        update_time_in               IN bed.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN bed.update_institution%TYPE DEFAULT NULL,
        id_bed_type_in               IN bed.id_bed_type%TYPE DEFAULT NULL,
        dt_creation_in               IN bed.dt_creation%TYPE DEFAULT current_timestamp,
        flg_schedulable_in           IN bed.flg_schedulable%TYPE DEFAULT 'Y',
        flg_bed_status_in            IN bed.flg_bed_status%TYPE DEFAULT NULL,
        flg_parameterization_type_in IN bed.flg_parameterization_type%TYPE DEFAULT 'C',
        id_professional_in           IN bed.id_professional%TYPE DEFAULT NULL,
        dt_last_update_in            IN bed.dt_last_update%TYPE DEFAULT NULL,
        flg_selected_specialties_in  IN bed.flg_selected_specialties%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO bed
            (id_bed,
             code_bed,
             id_room,
             flg_type,
             flg_status,
             desc_bed,
             notes,
             rank,
             flg_available,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_bed_type,
             dt_creation,
             flg_schedulable,
             flg_bed_status,
             flg_parameterization_type,
             id_professional,
             dt_last_update,
             flg_selected_specialties)
        VALUES
            (id_bed_in,
             code_bed_in,
             id_room_in,
             flg_type_in,
             flg_status_in,
             desc_bed_in,
             notes_in,
             rank_in,
             flg_available_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_bed_type_in,
             dt_creation_in,
             flg_schedulable_in,
             flg_bed_status_in,
             flg_parameterization_type_in,
             id_professional_in,
             dt_last_update_in,
             flg_selected_specialties_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'BED');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BED');
                    IF l_name = 'BED_BTY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BED_TYPE',
                                                        value_in           => id_bed_type_in);
                    END IF;
                    IF l_name = 'BED_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_bed_in                    IN bed.id_bed%TYPE,
        code_bed_in                  IN bed.code_bed%TYPE DEFAULT NULL,
        id_room_in                   IN bed.id_room%TYPE DEFAULT NULL,
        flg_type_in                  IN bed.flg_type%TYPE DEFAULT 'T',
        flg_status_in                IN bed.flg_status%TYPE DEFAULT 'O',
        desc_bed_in                  IN bed.desc_bed%TYPE DEFAULT NULL,
        notes_in                     IN bed.notes%TYPE DEFAULT NULL,
        rank_in                      IN bed.rank%TYPE DEFAULT NULL,
        flg_available_in             IN bed.flg_available%TYPE DEFAULT 'Y',
        create_user_in               IN bed.create_user%TYPE DEFAULT NULL,
        create_time_in               IN bed.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN bed.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN bed.update_user%TYPE DEFAULT NULL,
        update_time_in               IN bed.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN bed.update_institution%TYPE DEFAULT NULL,
        id_bed_type_in               IN bed.id_bed_type%TYPE DEFAULT NULL,
        dt_creation_in               IN bed.dt_creation%TYPE DEFAULT current_timestamp,
        flg_schedulable_in           IN bed.flg_schedulable%TYPE DEFAULT 'Y',
        flg_bed_status_in            IN bed.flg_bed_status%TYPE DEFAULT NULL,
        flg_parameterization_type_in IN bed.flg_parameterization_type%TYPE DEFAULT 'C',
        id_professional_in           IN bed.id_professional%TYPE DEFAULT NULL,
        dt_last_update_in            IN bed.dt_last_update%TYPE DEFAULT NULL,
        flg_selected_specialties_in  IN bed.flg_selected_specialties%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_bed_in                    => id_bed_in,
            code_bed_in                  => code_bed_in,
            id_room_in                   => id_room_in,
            flg_type_in                  => flg_type_in,
            flg_status_in                => flg_status_in,
            desc_bed_in                  => desc_bed_in,
            notes_in                     => notes_in,
            rank_in                      => rank_in,
            flg_available_in             => flg_available_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_bed_type_in               => id_bed_type_in,
            dt_creation_in               => dt_creation_in,
            flg_schedulable_in           => flg_schedulable_in,
            flg_bed_status_in            => flg_bed_status_in,
            flg_parameterization_type_in => flg_parameterization_type_in,
            id_professional_in           => id_professional_in,
            dt_last_update_in            => dt_last_update_in,
            flg_selected_specialties_in  => flg_selected_specialties_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN bed%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec bed%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_bed := next_key(sequence_in);
        END IF;
        ins(id_bed_in                    => l_rec.id_bed,
            code_bed_in                  => l_rec.code_bed,
            id_room_in                   => l_rec.id_room,
            flg_type_in                  => l_rec.flg_type,
            flg_status_in                => l_rec.flg_status,
            desc_bed_in                  => l_rec.desc_bed,
            notes_in                     => l_rec.notes,
            rank_in                      => l_rec.rank,
            flg_available_in             => l_rec.flg_available,
            create_user_in               => l_rec.create_user,
            create_time_in               => l_rec.create_time,
            create_institution_in        => l_rec.create_institution,
            update_user_in               => l_rec.update_user,
            update_time_in               => l_rec.update_time,
            update_institution_in        => l_rec.update_institution,
            id_bed_type_in               => l_rec.id_bed_type,
            dt_creation_in               => l_rec.dt_creation,
            flg_schedulable_in           => l_rec.flg_schedulable,
            flg_bed_status_in            => l_rec.flg_bed_status,
            flg_parameterization_type_in => l_rec.flg_parameterization_type,
            id_professional_in           => l_rec.id_professional,
            dt_last_update_in            => l_rec.dt_last_update,
            flg_selected_specialties_in  => l_rec.flg_selected_specialties,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN bed%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN bed.id_bed%TYPE
    
     IS
        retval bed.id_bed%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_bed.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_BED'));
    END next_key;

    PROCEDURE ins
    (
        code_bed_in                  IN bed.code_bed%TYPE DEFAULT NULL,
        id_room_in                   IN bed.id_room%TYPE DEFAULT NULL,
        flg_type_in                  IN bed.flg_type%TYPE DEFAULT 'T',
        flg_status_in                IN bed.flg_status%TYPE DEFAULT 'O',
        desc_bed_in                  IN bed.desc_bed%TYPE DEFAULT NULL,
        notes_in                     IN bed.notes%TYPE DEFAULT NULL,
        rank_in                      IN bed.rank%TYPE DEFAULT NULL,
        flg_available_in             IN bed.flg_available%TYPE DEFAULT 'Y',
        create_user_in               IN bed.create_user%TYPE DEFAULT NULL,
        create_time_in               IN bed.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN bed.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN bed.update_user%TYPE DEFAULT NULL,
        update_time_in               IN bed.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN bed.update_institution%TYPE DEFAULT NULL,
        id_bed_type_in               IN bed.id_bed_type%TYPE DEFAULT NULL,
        dt_creation_in               IN bed.dt_creation%TYPE DEFAULT current_timestamp,
        flg_schedulable_in           IN bed.flg_schedulable%TYPE DEFAULT 'Y',
        flg_bed_status_in            IN bed.flg_bed_status%TYPE DEFAULT NULL,
        flg_parameterization_type_in IN bed.flg_parameterization_type%TYPE DEFAULT 'C',
        id_professional_in           IN bed.id_professional%TYPE DEFAULT NULL,
        dt_last_update_in            IN bed.dt_last_update%TYPE DEFAULT NULL,
        flg_selected_specialties_in  IN bed.flg_selected_specialties%TYPE DEFAULT NULL,
        id_bed_out                   IN OUT bed.id_bed%TYPE,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
        l_pky bed.id_bed%TYPE := next_key;
    BEGIN
        ins(id_bed_in                    => l_pky,
            code_bed_in                  => code_bed_in,
            id_room_in                   => id_room_in,
            flg_type_in                  => flg_type_in,
            flg_status_in                => flg_status_in,
            desc_bed_in                  => desc_bed_in,
            notes_in                     => notes_in,
            rank_in                      => rank_in,
            flg_available_in             => flg_available_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_bed_type_in               => id_bed_type_in,
            dt_creation_in               => dt_creation_in,
            flg_schedulable_in           => flg_schedulable_in,
            flg_bed_status_in            => flg_bed_status_in,
            flg_parameterization_type_in => flg_parameterization_type_in,
            id_professional_in           => id_professional_in,
            dt_last_update_in            => dt_last_update_in,
            flg_selected_specialties_in  => flg_selected_specialties_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        id_bed_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        code_bed_in                  IN bed.code_bed%TYPE DEFAULT NULL,
        id_room_in                   IN bed.id_room%TYPE DEFAULT NULL,
        flg_type_in                  IN bed.flg_type%TYPE DEFAULT 'T',
        flg_status_in                IN bed.flg_status%TYPE DEFAULT 'O',
        desc_bed_in                  IN bed.desc_bed%TYPE DEFAULT NULL,
        notes_in                     IN bed.notes%TYPE DEFAULT NULL,
        rank_in                      IN bed.rank%TYPE DEFAULT NULL,
        flg_available_in             IN bed.flg_available%TYPE DEFAULT 'Y',
        create_user_in               IN bed.create_user%TYPE DEFAULT NULL,
        create_time_in               IN bed.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN bed.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN bed.update_user%TYPE DEFAULT NULL,
        update_time_in               IN bed.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN bed.update_institution%TYPE DEFAULT NULL,
        id_bed_type_in               IN bed.id_bed_type%TYPE DEFAULT NULL,
        dt_creation_in               IN bed.dt_creation%TYPE DEFAULT current_timestamp,
        flg_schedulable_in           IN bed.flg_schedulable%TYPE DEFAULT 'Y',
        flg_bed_status_in            IN bed.flg_bed_status%TYPE DEFAULT NULL,
        flg_parameterization_type_in IN bed.flg_parameterization_type%TYPE DEFAULT 'C',
        id_professional_in           IN bed.id_professional%TYPE DEFAULT NULL,
        dt_last_update_in            IN bed.dt_last_update%TYPE DEFAULT NULL,
        flg_selected_specialties_in  IN bed.flg_selected_specialties%TYPE DEFAULT NULL,
        id_bed_out                   IN OUT bed.id_bed%TYPE,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(code_bed_in                  => code_bed_in,
            id_room_in                   => id_room_in,
            flg_type_in                  => flg_type_in,
            flg_status_in                => flg_status_in,
            desc_bed_in                  => desc_bed_in,
            notes_in                     => notes_in,
            rank_in                      => rank_in,
            flg_available_in             => flg_available_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_bed_type_in               => id_bed_type_in,
            dt_creation_in               => dt_creation_in,
            flg_schedulable_in           => flg_schedulable_in,
            flg_bed_status_in            => flg_bed_status_in,
            flg_parameterization_type_in => flg_parameterization_type_in,
            id_professional_in           => id_professional_in,
            dt_last_update_in            => dt_last_update_in,
            flg_selected_specialties_in  => flg_selected_specialties_in,
            id_bed_out                   => id_bed_out,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    FUNCTION ins
    (
        code_bed_in                  IN bed.code_bed%TYPE DEFAULT NULL,
        id_room_in                   IN bed.id_room%TYPE DEFAULT NULL,
        flg_type_in                  IN bed.flg_type%TYPE DEFAULT 'T',
        flg_status_in                IN bed.flg_status%TYPE DEFAULT 'O',
        desc_bed_in                  IN bed.desc_bed%TYPE DEFAULT NULL,
        notes_in                     IN bed.notes%TYPE DEFAULT NULL,
        rank_in                      IN bed.rank%TYPE DEFAULT NULL,
        flg_available_in             IN bed.flg_available%TYPE DEFAULT 'Y',
        create_user_in               IN bed.create_user%TYPE DEFAULT NULL,
        create_time_in               IN bed.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN bed.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN bed.update_user%TYPE DEFAULT NULL,
        update_time_in               IN bed.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN bed.update_institution%TYPE DEFAULT NULL,
        id_bed_type_in               IN bed.id_bed_type%TYPE DEFAULT NULL,
        dt_creation_in               IN bed.dt_creation%TYPE DEFAULT current_timestamp,
        flg_schedulable_in           IN bed.flg_schedulable%TYPE DEFAULT 'Y',
        flg_bed_status_in            IN bed.flg_bed_status%TYPE DEFAULT NULL,
        flg_parameterization_type_in IN bed.flg_parameterization_type%TYPE DEFAULT 'C',
        id_professional_in           IN bed.id_professional%TYPE DEFAULT NULL,
        dt_last_update_in            IN bed.dt_last_update%TYPE DEFAULT NULL,
        flg_selected_specialties_in  IN bed.flg_selected_specialties%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) RETURN bed.id_bed%TYPE IS
        l_pky bed.id_bed%TYPE := next_key;
    BEGIN
        ins(id_bed_in                    => l_pky,
            code_bed_in                  => code_bed_in,
            id_room_in                   => id_room_in,
            flg_type_in                  => flg_type_in,
            flg_status_in                => flg_status_in,
            desc_bed_in                  => desc_bed_in,
            notes_in                     => notes_in,
            rank_in                      => rank_in,
            flg_available_in             => flg_available_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_bed_type_in               => id_bed_type_in,
            dt_creation_in               => dt_creation_in,
            flg_schedulable_in           => flg_schedulable_in,
            flg_bed_status_in            => flg_bed_status_in,
            flg_parameterization_type_in => flg_parameterization_type_in,
            id_professional_in           => id_professional_in,
            dt_last_update_in            => dt_last_update_in,
            flg_selected_specialties_in  => flg_selected_specialties_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        code_bed_in                  IN bed.code_bed%TYPE DEFAULT NULL,
        id_room_in                   IN bed.id_room%TYPE DEFAULT NULL,
        flg_type_in                  IN bed.flg_type%TYPE DEFAULT 'T',
        flg_status_in                IN bed.flg_status%TYPE DEFAULT 'O',
        desc_bed_in                  IN bed.desc_bed%TYPE DEFAULT NULL,
        notes_in                     IN bed.notes%TYPE DEFAULT NULL,
        rank_in                      IN bed.rank%TYPE DEFAULT NULL,
        flg_available_in             IN bed.flg_available%TYPE DEFAULT 'Y',
        create_user_in               IN bed.create_user%TYPE DEFAULT NULL,
        create_time_in               IN bed.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN bed.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN bed.update_user%TYPE DEFAULT NULL,
        update_time_in               IN bed.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN bed.update_institution%TYPE DEFAULT NULL,
        id_bed_type_in               IN bed.id_bed_type%TYPE DEFAULT NULL,
        dt_creation_in               IN bed.dt_creation%TYPE DEFAULT current_timestamp,
        flg_schedulable_in           IN bed.flg_schedulable%TYPE DEFAULT 'Y',
        flg_bed_status_in            IN bed.flg_bed_status%TYPE DEFAULT NULL,
        flg_parameterization_type_in IN bed.flg_parameterization_type%TYPE DEFAULT 'C',
        id_professional_in           IN bed.id_professional%TYPE DEFAULT NULL,
        dt_last_update_in            IN bed.dt_last_update%TYPE DEFAULT NULL,
        flg_selected_specialties_in  IN bed.flg_selected_specialties%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) RETURN bed.id_bed%TYPE IS
        l_pky    bed.id_bed%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_bed_in                    => l_pky,
            code_bed_in                  => code_bed_in,
            id_room_in                   => id_room_in,
            flg_type_in                  => flg_type_in,
            flg_status_in                => flg_status_in,
            desc_bed_in                  => desc_bed_in,
            notes_in                     => notes_in,
            rank_in                      => rank_in,
            flg_available_in             => flg_available_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_bed_type_in               => id_bed_type_in,
            dt_creation_in               => dt_creation_in,
            flg_schedulable_in           => flg_schedulable_in,
            flg_bed_status_in            => flg_bed_status_in,
            flg_parameterization_type_in => flg_parameterization_type_in,
            id_professional_in           => id_professional_in,
            dt_last_update_in            => dt_last_update_in,
            flg_selected_specialties_in  => flg_selected_specialties_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        code_bed_in                  IN bed.code_bed%TYPE DEFAULT NULL,
        id_room_in                   IN bed.id_room%TYPE DEFAULT NULL,
        flg_type_in                  IN bed.flg_type%TYPE DEFAULT 'T',
        flg_status_in                IN bed.flg_status%TYPE DEFAULT 'O',
        desc_bed_in                  IN bed.desc_bed%TYPE DEFAULT NULL,
        notes_in                     IN bed.notes%TYPE DEFAULT NULL,
        rank_in                      IN bed.rank%TYPE DEFAULT NULL,
        flg_available_in             IN bed.flg_available%TYPE DEFAULT 'Y',
        create_user_in               IN bed.create_user%TYPE DEFAULT NULL,
        create_time_in               IN bed.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN bed.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN bed.update_user%TYPE DEFAULT NULL,
        update_time_in               IN bed.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN bed.update_institution%TYPE DEFAULT NULL,
        id_bed_type_in               IN bed.id_bed_type%TYPE DEFAULT NULL,
        dt_creation_in               IN bed.dt_creation%TYPE DEFAULT current_timestamp,
        flg_schedulable_in           IN bed.flg_schedulable%TYPE DEFAULT 'Y',
        flg_bed_status_in            IN bed.flg_bed_status%TYPE DEFAULT NULL,
        flg_parameterization_type_in IN bed.flg_parameterization_type%TYPE DEFAULT 'C',
        id_professional_in           IN bed.id_professional%TYPE DEFAULT NULL,
        dt_last_update_in            IN bed.dt_last_update%TYPE DEFAULT NULL,
        flg_selected_specialties_in  IN bed.flg_selected_specialties%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
        l_pky bed.id_bed%TYPE := next_key;
    BEGIN
        ins(id_bed_in                    => l_pky,
            code_bed_in                  => code_bed_in,
            id_room_in                   => id_room_in,
            flg_type_in                  => flg_type_in,
            flg_status_in                => flg_status_in,
            desc_bed_in                  => desc_bed_in,
            notes_in                     => notes_in,
            rank_in                      => rank_in,
            flg_available_in             => flg_available_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_bed_type_in               => id_bed_type_in,
            dt_creation_in               => dt_creation_in,
            flg_schedulable_in           => flg_schedulable_in,
            flg_bed_status_in            => flg_bed_status_in,
            flg_parameterization_type_in => flg_parameterization_type_in,
            id_professional_in           => id_professional_in,
            dt_last_update_in            => dt_last_update_in,
            flg_selected_specialties_in  => flg_selected_specialties_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        code_bed_in                  IN bed.code_bed%TYPE DEFAULT NULL,
        id_room_in                   IN bed.id_room%TYPE DEFAULT NULL,
        flg_type_in                  IN bed.flg_type%TYPE DEFAULT 'T',
        flg_status_in                IN bed.flg_status%TYPE DEFAULT 'O',
        desc_bed_in                  IN bed.desc_bed%TYPE DEFAULT NULL,
        notes_in                     IN bed.notes%TYPE DEFAULT NULL,
        rank_in                      IN bed.rank%TYPE DEFAULT NULL,
        flg_available_in             IN bed.flg_available%TYPE DEFAULT 'Y',
        create_user_in               IN bed.create_user%TYPE DEFAULT NULL,
        create_time_in               IN bed.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN bed.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN bed.update_user%TYPE DEFAULT NULL,
        update_time_in               IN bed.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN bed.update_institution%TYPE DEFAULT NULL,
        id_bed_type_in               IN bed.id_bed_type%TYPE DEFAULT NULL,
        dt_creation_in               IN bed.dt_creation%TYPE DEFAULT current_timestamp,
        flg_schedulable_in           IN bed.flg_schedulable%TYPE DEFAULT 'Y',
        flg_bed_status_in            IN bed.flg_bed_status%TYPE DEFAULT NULL,
        flg_parameterization_type_in IN bed.flg_parameterization_type%TYPE DEFAULT 'C',
        id_professional_in           IN bed.id_professional%TYPE DEFAULT NULL,
        dt_last_update_in            IN bed.dt_last_update%TYPE DEFAULT NULL,
        flg_selected_specialties_in  IN bed.flg_selected_specialties%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        l_pky    bed.id_bed%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_bed_in                    => l_pky,
            code_bed_in                  => code_bed_in,
            id_room_in                   => id_room_in,
            flg_type_in                  => flg_type_in,
            flg_status_in                => flg_status_in,
            desc_bed_in                  => desc_bed_in,
            notes_in                     => notes_in,
            rank_in                      => rank_in,
            flg_available_in             => flg_available_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_bed_type_in               => id_bed_type_in,
            dt_creation_in               => dt_creation_in,
            flg_schedulable_in           => flg_schedulable_in,
            flg_bed_status_in            => flg_bed_status_in,
            flg_parameterization_type_in => flg_parameterization_type_in,
            id_professional_in           => id_professional_in,
            dt_last_update_in            => dt_last_update_in,
            flg_selected_specialties_in  => flg_selected_specialties_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN bed_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO bed
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_BED _' || indx,
                                                        value_in           => rows_in(indx).id_bed,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CODE_BED _' || indx,
                                                        value_in           => rows_in(indx).code_bed,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ROOM _' || indx,
                                                        value_in           => rows_in(indx).id_room,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TYPE _' || indx,
                                                        value_in           => rows_in(indx).flg_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DESC_BED _' || indx,
                                                        value_in           => rows_in(indx).desc_bed,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(indx).notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'RANK _' || indx,
                                                        value_in           => rows_in(indx).rank,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_AVAILABLE _' || indx,
                                                        value_in           => rows_in(indx).flg_available,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_BED_TYPE _' || indx,
                                                        value_in           => rows_in(indx).id_bed_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CREATION _' || indx,
                                                        value_in           => rows_in(indx).dt_creation,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_SCHEDULABLE _' || indx,
                                                        value_in           => rows_in(indx).flg_schedulable,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_BED_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_bed_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_PARAMETERIZATION_TYPE _' || indx,
                                                        value_in           => rows_in(indx).flg_parameterization_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(indx).id_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_LAST_UPDATE _' || indx,
                                                        value_in           => rows_in(indx).dt_last_update,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_SELECTED_SPECIALTIES _' || indx,
                                                        value_in           => rows_in(indx).flg_selected_specialties,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'BED',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN bed_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_bed_in                     IN bed.id_bed%TYPE,
        code_bed_in                   IN bed.code_bed%TYPE DEFAULT NULL,
        code_bed_nin                  IN BOOLEAN := TRUE,
        id_room_in                    IN bed.id_room%TYPE DEFAULT NULL,
        id_room_nin                   IN BOOLEAN := TRUE,
        flg_type_in                   IN bed.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                  IN BOOLEAN := TRUE,
        flg_status_in                 IN bed.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        desc_bed_in                   IN bed.desc_bed%TYPE DEFAULT NULL,
        desc_bed_nin                  IN BOOLEAN := TRUE,
        notes_in                      IN bed.notes%TYPE DEFAULT NULL,
        notes_nin                     IN BOOLEAN := TRUE,
        rank_in                       IN bed.rank%TYPE DEFAULT NULL,
        rank_nin                      IN BOOLEAN := TRUE,
        flg_available_in              IN bed.flg_available%TYPE DEFAULT NULL,
        flg_available_nin             IN BOOLEAN := TRUE,
        create_user_in                IN bed.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN bed.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN bed.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN bed.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN bed.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN bed.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        id_bed_type_in                IN bed.id_bed_type%TYPE DEFAULT NULL,
        id_bed_type_nin               IN BOOLEAN := TRUE,
        dt_creation_in                IN bed.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin               IN BOOLEAN := TRUE,
        flg_schedulable_in            IN bed.flg_schedulable%TYPE DEFAULT NULL,
        flg_schedulable_nin           IN BOOLEAN := TRUE,
        flg_bed_status_in             IN bed.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_status_nin            IN BOOLEAN := TRUE,
        flg_parameterization_type_in  IN bed.flg_parameterization_type%TYPE DEFAULT NULL,
        flg_parameterization_type_nin IN BOOLEAN := TRUE,
        id_professional_in            IN bed.id_professional%TYPE DEFAULT NULL,
        id_professional_nin           IN BOOLEAN := TRUE,
        dt_last_update_in             IN bed.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin            IN BOOLEAN := TRUE,
        flg_selected_specialties_in   IN bed.flg_selected_specialties%TYPE DEFAULT NULL,
        flg_selected_specialties_nin  IN BOOLEAN := TRUE,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      IN OUT table_varchar
    ) IS
        l_rows_out                    table_varchar;
        l_code_bed_n                  NUMBER(1);
        l_id_room_n                   NUMBER(1);
        l_flg_type_n                  NUMBER(1);
        l_flg_status_n                NUMBER(1);
        l_desc_bed_n                  NUMBER(1);
        l_notes_n                     NUMBER(1);
        l_rank_n                      NUMBER(1);
        l_flg_available_n             NUMBER(1);
        l_create_user_n               NUMBER(1);
        l_create_time_n               NUMBER(1);
        l_create_institution_n        NUMBER(1);
        l_update_user_n               NUMBER(1);
        l_update_time_n               NUMBER(1);
        l_update_institution_n        NUMBER(1);
        l_id_bed_type_n               NUMBER(1);
        l_dt_creation_n               NUMBER(1);
        l_flg_schedulable_n           NUMBER(1);
        l_flg_bed_status_n            NUMBER(1);
        l_flg_parameterization_type_n NUMBER(1);
        l_id_professional_n           NUMBER(1);
        l_dt_last_update_n            NUMBER(1);
        l_flg_selected_specialties_n  NUMBER(1);
    BEGIN
    
        l_code_bed_n                  := sys.diutil.bool_to_int(code_bed_nin);
        l_id_room_n                   := sys.diutil.bool_to_int(id_room_nin);
        l_flg_type_n                  := sys.diutil.bool_to_int(flg_type_nin);
        l_flg_status_n                := sys.diutil.bool_to_int(flg_status_nin);
        l_desc_bed_n                  := sys.diutil.bool_to_int(desc_bed_nin);
        l_notes_n                     := sys.diutil.bool_to_int(notes_nin);
        l_rank_n                      := sys.diutil.bool_to_int(rank_nin);
        l_flg_available_n             := sys.diutil.bool_to_int(flg_available_nin);
        l_create_user_n               := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n               := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n        := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n               := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n               := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n        := sys.diutil.bool_to_int(update_institution_nin);
        l_id_bed_type_n               := sys.diutil.bool_to_int(id_bed_type_nin);
        l_dt_creation_n               := sys.diutil.bool_to_int(dt_creation_nin);
        l_flg_schedulable_n           := sys.diutil.bool_to_int(flg_schedulable_nin);
        l_flg_bed_status_n            := sys.diutil.bool_to_int(flg_bed_status_nin);
        l_flg_parameterization_type_n := sys.diutil.bool_to_int(flg_parameterization_type_nin);
        l_id_professional_n           := sys.diutil.bool_to_int(id_professional_nin);
        l_dt_last_update_n            := sys.diutil.bool_to_int(dt_last_update_nin);
        l_flg_selected_specialties_n  := sys.diutil.bool_to_int(flg_selected_specialties_nin);
    
        UPDATE bed
           SET code_bed                  = decode(l_code_bed_n, 0, code_bed_in, nvl(code_bed_in, code_bed)),
               id_room                   = decode(l_id_room_n, 0, id_room_in, nvl(id_room_in, id_room)),
               flg_type                  = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               flg_status                = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               desc_bed                  = decode(l_desc_bed_n, 0, desc_bed_in, nvl(desc_bed_in, desc_bed)),
               notes                     = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               rank                      = decode(l_rank_n, 0, rank_in, nvl(rank_in, rank)),
               flg_available             = decode(l_flg_available_n,
                                                  0,
                                                  flg_available_in,
                                                  nvl(flg_available_in, flg_available)),
               create_user               = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time               = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution        = decode(l_create_institution_n,
                                                  0,
                                                  create_institution_in,
                                                  nvl(create_institution_in, create_institution)),
               update_user               = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time               = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution        = decode(l_update_institution_n,
                                                  0,
                                                  update_institution_in,
                                                  nvl(update_institution_in, update_institution)),
               id_bed_type               = decode(l_id_bed_type_n, 0, id_bed_type_in, nvl(id_bed_type_in, id_bed_type)),
               dt_creation               = decode(l_dt_creation_n, 0, dt_creation_in, nvl(dt_creation_in, dt_creation)),
               flg_schedulable           = decode(l_flg_schedulable_n,
                                                  0,
                                                  flg_schedulable_in,
                                                  nvl(flg_schedulable_in, flg_schedulable)),
               flg_bed_status            = decode(l_flg_bed_status_n,
                                                  0,
                                                  flg_bed_status_in,
                                                  nvl(flg_bed_status_in, flg_bed_status)),
               flg_parameterization_type = decode(l_flg_parameterization_type_n,
                                                  0,
                                                  flg_parameterization_type_in,
                                                  nvl(flg_parameterization_type_in, flg_parameterization_type)),
               id_professional           = decode(l_id_professional_n,
                                                  0,
                                                  id_professional_in,
                                                  nvl(id_professional_in, id_professional)),
               dt_last_update            = decode(l_dt_last_update_n,
                                                  0,
                                                  dt_last_update_in,
                                                  nvl(dt_last_update_in, dt_last_update)),
               flg_selected_specialties  = decode(l_flg_selected_specialties_n,
                                                  0,
                                                  flg_selected_specialties_in,
                                                  nvl(flg_selected_specialties_in, flg_selected_specialties))
         WHERE id_bed = id_bed_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'BED');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BED');
                    IF l_name = 'BED_BTY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BED_TYPE',
                                                        value_in           => id_bed_type_in);
                    END IF;
                    IF l_name = 'BED_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_bed_in                     IN bed.id_bed%TYPE,
        code_bed_in                   IN bed.code_bed%TYPE DEFAULT NULL,
        code_bed_nin                  IN BOOLEAN := TRUE,
        id_room_in                    IN bed.id_room%TYPE DEFAULT NULL,
        id_room_nin                   IN BOOLEAN := TRUE,
        flg_type_in                   IN bed.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                  IN BOOLEAN := TRUE,
        flg_status_in                 IN bed.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        desc_bed_in                   IN bed.desc_bed%TYPE DEFAULT NULL,
        desc_bed_nin                  IN BOOLEAN := TRUE,
        notes_in                      IN bed.notes%TYPE DEFAULT NULL,
        notes_nin                     IN BOOLEAN := TRUE,
        rank_in                       IN bed.rank%TYPE DEFAULT NULL,
        rank_nin                      IN BOOLEAN := TRUE,
        flg_available_in              IN bed.flg_available%TYPE DEFAULT NULL,
        flg_available_nin             IN BOOLEAN := TRUE,
        create_user_in                IN bed.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN bed.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN bed.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN bed.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN bed.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN bed.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        id_bed_type_in                IN bed.id_bed_type%TYPE DEFAULT NULL,
        id_bed_type_nin               IN BOOLEAN := TRUE,
        dt_creation_in                IN bed.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin               IN BOOLEAN := TRUE,
        flg_schedulable_in            IN bed.flg_schedulable%TYPE DEFAULT NULL,
        flg_schedulable_nin           IN BOOLEAN := TRUE,
        flg_bed_status_in             IN bed.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_status_nin            IN BOOLEAN := TRUE,
        flg_parameterization_type_in  IN bed.flg_parameterization_type%TYPE DEFAULT NULL,
        flg_parameterization_type_nin IN BOOLEAN := TRUE,
        id_professional_in            IN bed.id_professional%TYPE DEFAULT NULL,
        id_professional_nin           IN BOOLEAN := TRUE,
        dt_last_update_in             IN bed.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin            IN BOOLEAN := TRUE,
        flg_selected_specialties_in   IN bed.flg_selected_specialties%TYPE DEFAULT NULL,
        flg_selected_specialties_nin  IN BOOLEAN := TRUE,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_bed_in                     => id_bed_in,
            code_bed_in                   => code_bed_in,
            code_bed_nin                  => code_bed_nin,
            id_room_in                    => id_room_in,
            id_room_nin                   => id_room_nin,
            flg_type_in                   => flg_type_in,
            flg_type_nin                  => flg_type_nin,
            flg_status_in                 => flg_status_in,
            flg_status_nin                => flg_status_nin,
            desc_bed_in                   => desc_bed_in,
            desc_bed_nin                  => desc_bed_nin,
            notes_in                      => notes_in,
            notes_nin                     => notes_nin,
            rank_in                       => rank_in,
            rank_nin                      => rank_nin,
            flg_available_in              => flg_available_in,
            flg_available_nin             => flg_available_nin,
            create_user_in                => create_user_in,
            create_user_nin               => create_user_nin,
            create_time_in                => create_time_in,
            create_time_nin               => create_time_nin,
            create_institution_in         => create_institution_in,
            create_institution_nin        => create_institution_nin,
            update_user_in                => update_user_in,
            update_user_nin               => update_user_nin,
            update_time_in                => update_time_in,
            update_time_nin               => update_time_nin,
            update_institution_in         => update_institution_in,
            update_institution_nin        => update_institution_nin,
            id_bed_type_in                => id_bed_type_in,
            id_bed_type_nin               => id_bed_type_nin,
            dt_creation_in                => dt_creation_in,
            dt_creation_nin               => dt_creation_nin,
            flg_schedulable_in            => flg_schedulable_in,
            flg_schedulable_nin           => flg_schedulable_nin,
            flg_bed_status_in             => flg_bed_status_in,
            flg_bed_status_nin            => flg_bed_status_nin,
            flg_parameterization_type_in  => flg_parameterization_type_in,
            flg_parameterization_type_nin => flg_parameterization_type_nin,
            id_professional_in            => id_professional_in,
            id_professional_nin           => id_professional_nin,
            dt_last_update_in             => dt_last_update_in,
            dt_last_update_nin            => dt_last_update_nin,
            flg_selected_specialties_in   => flg_selected_specialties_in,
            flg_selected_specialties_nin  => flg_selected_specialties_nin,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END upd;

    PROCEDURE upd
    (
        code_bed_in                   IN bed.code_bed%TYPE DEFAULT NULL,
        code_bed_nin                  IN BOOLEAN := TRUE,
        id_room_in                    IN bed.id_room%TYPE DEFAULT NULL,
        id_room_nin                   IN BOOLEAN := TRUE,
        flg_type_in                   IN bed.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                  IN BOOLEAN := TRUE,
        flg_status_in                 IN bed.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        desc_bed_in                   IN bed.desc_bed%TYPE DEFAULT NULL,
        desc_bed_nin                  IN BOOLEAN := TRUE,
        notes_in                      IN bed.notes%TYPE DEFAULT NULL,
        notes_nin                     IN BOOLEAN := TRUE,
        rank_in                       IN bed.rank%TYPE DEFAULT NULL,
        rank_nin                      IN BOOLEAN := TRUE,
        flg_available_in              IN bed.flg_available%TYPE DEFAULT NULL,
        flg_available_nin             IN BOOLEAN := TRUE,
        create_user_in                IN bed.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN bed.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN bed.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN bed.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN bed.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN bed.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        id_bed_type_in                IN bed.id_bed_type%TYPE DEFAULT NULL,
        id_bed_type_nin               IN BOOLEAN := TRUE,
        dt_creation_in                IN bed.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin               IN BOOLEAN := TRUE,
        flg_schedulable_in            IN bed.flg_schedulable%TYPE DEFAULT NULL,
        flg_schedulable_nin           IN BOOLEAN := TRUE,
        flg_bed_status_in             IN bed.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_status_nin            IN BOOLEAN := TRUE,
        flg_parameterization_type_in  IN bed.flg_parameterization_type%TYPE DEFAULT NULL,
        flg_parameterization_type_nin IN BOOLEAN := TRUE,
        id_professional_in            IN bed.id_professional%TYPE DEFAULT NULL,
        id_professional_nin           IN BOOLEAN := TRUE,
        dt_last_update_in             IN bed.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin            IN BOOLEAN := TRUE,
        flg_selected_specialties_in   IN bed.flg_selected_specialties%TYPE DEFAULT NULL,
        flg_selected_specialties_nin  IN BOOLEAN := TRUE,
        where_in                      VARCHAR2 DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE,
        rows_out                      IN OUT table_varchar
    ) IS
        l_sql                         VARCHAR2(32767);
        l_rows_out                    table_varchar;
        l_code_bed_n                  NUMBER(1);
        l_id_room_n                   NUMBER(1);
        l_flg_type_n                  NUMBER(1);
        l_flg_status_n                NUMBER(1);
        l_desc_bed_n                  NUMBER(1);
        l_notes_n                     NUMBER(1);
        l_rank_n                      NUMBER(1);
        l_flg_available_n             NUMBER(1);
        l_create_user_n               NUMBER(1);
        l_create_time_n               NUMBER(1);
        l_create_institution_n        NUMBER(1);
        l_update_user_n               NUMBER(1);
        l_update_time_n               NUMBER(1);
        l_update_institution_n        NUMBER(1);
        l_id_bed_type_n               NUMBER(1);
        l_dt_creation_n               NUMBER(1);
        l_flg_schedulable_n           NUMBER(1);
        l_flg_bed_status_n            NUMBER(1);
        l_flg_parameterization_type_n NUMBER(1);
        l_id_professional_n           NUMBER(1);
        l_dt_last_update_n            NUMBER(1);
        l_flg_selected_specialties_n  NUMBER(1);
        id_bed_in                     bed.id_bed%TYPE;
    BEGIN
    
        l_code_bed_n                  := sys.diutil.bool_to_int(code_bed_nin);
        l_id_room_n                   := sys.diutil.bool_to_int(id_room_nin);
        l_flg_type_n                  := sys.diutil.bool_to_int(flg_type_nin);
        l_flg_status_n                := sys.diutil.bool_to_int(flg_status_nin);
        l_desc_bed_n                  := sys.diutil.bool_to_int(desc_bed_nin);
        l_notes_n                     := sys.diutil.bool_to_int(notes_nin);
        l_rank_n                      := sys.diutil.bool_to_int(rank_nin);
        l_flg_available_n             := sys.diutil.bool_to_int(flg_available_nin);
        l_create_user_n               := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n               := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n        := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n               := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n               := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n        := sys.diutil.bool_to_int(update_institution_nin);
        l_id_bed_type_n               := sys.diutil.bool_to_int(id_bed_type_nin);
        l_dt_creation_n               := sys.diutil.bool_to_int(dt_creation_nin);
        l_flg_schedulable_n           := sys.diutil.bool_to_int(flg_schedulable_nin);
        l_flg_bed_status_n            := sys.diutil.bool_to_int(flg_bed_status_nin);
        l_flg_parameterization_type_n := sys.diutil.bool_to_int(flg_parameterization_type_nin);
        l_id_professional_n           := sys.diutil.bool_to_int(id_professional_nin);
        l_dt_last_update_n            := sys.diutil.bool_to_int(dt_last_update_nin);
        l_flg_selected_specialties_n  := sys.diutil.bool_to_int(flg_selected_specialties_nin);
    
        l_sql := 'UPDATE BED SET ' || ' CODE_BED = decode (' || l_code_bed_n ||
                 ',0,:code_bed_in, NVL (:code_bed_in, CODE_BED)) ' || ',' || ' ID_ROOM = decode (' || l_id_room_n ||
                 ',0,:id_room_in, NVL (:id_room_in, ID_ROOM)) ' || ',' || ' FLG_TYPE = decode (' || l_flg_type_n ||
                 ',0,:flg_type_in, NVL (:flg_type_in, FLG_TYPE)) ' || ',' || ' FLG_STATUS = decode (' || l_flg_status_n ||
                 ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' || ' DESC_BED = decode (' ||
                 l_desc_bed_n || ',0,:desc_bed_in, NVL (:desc_bed_in, DESC_BED)) ' || ',' || ' NOTES = decode (' ||
                 l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' || ' RANK = decode (' || l_rank_n ||
                 ',0,:rank_in, NVL (:rank_in, RANK)) ' || ',' || ' FLG_AVAILABLE = decode (' || l_flg_available_n ||
                 ',0,:flg_available_in, NVL (:flg_available_in, FLG_AVAILABLE)) ' || ',' || ' CREATE_USER = decode (' ||
                 l_create_user_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' ||
                 ' CREATE_TIME = decode (' || l_create_time_n ||
                 ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' || ' CREATE_INSTITUTION = decode (' ||
                 l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' ID_BED_TYPE = decode (' || l_id_bed_type_n ||
                 ',0,:id_bed_type_in, NVL (:id_bed_type_in, ID_BED_TYPE)) ' || ',' || ' DT_CREATION = decode (' ||
                 l_dt_creation_n || ',0,:dt_creation_in, NVL (:dt_creation_in, DT_CREATION)) ' || ',' ||
                 ' FLG_SCHEDULABLE = decode (' || l_flg_schedulable_n ||
                 ',0,:flg_schedulable_in, NVL (:flg_schedulable_in, FLG_SCHEDULABLE)) ' || ',' ||
                 ' FLG_BED_STATUS = decode (' || l_flg_bed_status_n ||
                 ',0,:flg_bed_status_in, NVL (:flg_bed_status_in, FLG_BED_STATUS)) ' || ',' ||
                 ' FLG_PARAMETERIZATION_TYPE = decode (' || l_flg_parameterization_type_n ||
                 ',0,:flg_parameterization_type_in, NVL (:flg_parameterization_type_in, FLG_PARAMETERIZATION_TYPE)) ' || ',' ||
                 ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                 ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) ' || ',' ||
                 ' DT_LAST_UPDATE = decode (' || l_dt_last_update_n ||
                 ',0,:dt_last_update_in, NVL (:dt_last_update_in, DT_LAST_UPDATE)) ' || ',' ||
                 ' FLG_SELECTED_SPECIALTIES = decode (' || l_flg_selected_specialties_n ||
                 ',0,:flg_selected_specialties_in, NVL (:flg_selected_specialties_in, FLG_SELECTED_SPECIALTIES)) ' ||
                 ' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN code_bed_in, id_room_in, flg_type_in, flg_status_in, desc_bed_in, notes_in, rank_in, flg_available_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_bed_type_in, dt_creation_in, flg_schedulable_in, flg_bed_status_in, flg_parameterization_type_in, id_professional_in, dt_last_update_in, flg_selected_specialties_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'BED');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BED');
                    IF l_name = 'BED_BTY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_BED_TYPE',
                                                        value_in           => id_bed_type_in);
                    END IF;
                    IF l_name = 'BED_ROOM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM',
                                                        value_in           => id_room_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        code_bed_in                   IN bed.code_bed%TYPE DEFAULT NULL,
        code_bed_nin                  IN BOOLEAN := TRUE,
        id_room_in                    IN bed.id_room%TYPE DEFAULT NULL,
        id_room_nin                   IN BOOLEAN := TRUE,
        flg_type_in                   IN bed.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                  IN BOOLEAN := TRUE,
        flg_status_in                 IN bed.flg_status%TYPE DEFAULT NULL,
        flg_status_nin                IN BOOLEAN := TRUE,
        desc_bed_in                   IN bed.desc_bed%TYPE DEFAULT NULL,
        desc_bed_nin                  IN BOOLEAN := TRUE,
        notes_in                      IN bed.notes%TYPE DEFAULT NULL,
        notes_nin                     IN BOOLEAN := TRUE,
        rank_in                       IN bed.rank%TYPE DEFAULT NULL,
        rank_nin                      IN BOOLEAN := TRUE,
        flg_available_in              IN bed.flg_available%TYPE DEFAULT NULL,
        flg_available_nin             IN BOOLEAN := TRUE,
        create_user_in                IN bed.create_user%TYPE DEFAULT NULL,
        create_user_nin               IN BOOLEAN := TRUE,
        create_time_in                IN bed.create_time%TYPE DEFAULT NULL,
        create_time_nin               IN BOOLEAN := TRUE,
        create_institution_in         IN bed.create_institution%TYPE DEFAULT NULL,
        create_institution_nin        IN BOOLEAN := TRUE,
        update_user_in                IN bed.update_user%TYPE DEFAULT NULL,
        update_user_nin               IN BOOLEAN := TRUE,
        update_time_in                IN bed.update_time%TYPE DEFAULT NULL,
        update_time_nin               IN BOOLEAN := TRUE,
        update_institution_in         IN bed.update_institution%TYPE DEFAULT NULL,
        update_institution_nin        IN BOOLEAN := TRUE,
        id_bed_type_in                IN bed.id_bed_type%TYPE DEFAULT NULL,
        id_bed_type_nin               IN BOOLEAN := TRUE,
        dt_creation_in                IN bed.dt_creation%TYPE DEFAULT NULL,
        dt_creation_nin               IN BOOLEAN := TRUE,
        flg_schedulable_in            IN bed.flg_schedulable%TYPE DEFAULT NULL,
        flg_schedulable_nin           IN BOOLEAN := TRUE,
        flg_bed_status_in             IN bed.flg_bed_status%TYPE DEFAULT NULL,
        flg_bed_status_nin            IN BOOLEAN := TRUE,
        flg_parameterization_type_in  IN bed.flg_parameterization_type%TYPE DEFAULT NULL,
        flg_parameterization_type_nin IN BOOLEAN := TRUE,
        id_professional_in            IN bed.id_professional%TYPE DEFAULT NULL,
        id_professional_nin           IN BOOLEAN := TRUE,
        dt_last_update_in             IN bed.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin            IN BOOLEAN := TRUE,
        flg_selected_specialties_in   IN bed.flg_selected_specialties%TYPE DEFAULT NULL,
        flg_selected_specialties_nin  IN BOOLEAN := TRUE,
        where_in                      VARCHAR2 DEFAULT NULL,
        handle_error_in               IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(code_bed_in                   => code_bed_in,
            code_bed_nin                  => code_bed_nin,
            id_room_in                    => id_room_in,
            id_room_nin                   => id_room_nin,
            flg_type_in                   => flg_type_in,
            flg_type_nin                  => flg_type_nin,
            flg_status_in                 => flg_status_in,
            flg_status_nin                => flg_status_nin,
            desc_bed_in                   => desc_bed_in,
            desc_bed_nin                  => desc_bed_nin,
            notes_in                      => notes_in,
            notes_nin                     => notes_nin,
            rank_in                       => rank_in,
            rank_nin                      => rank_nin,
            flg_available_in              => flg_available_in,
            flg_available_nin             => flg_available_nin,
            create_user_in                => create_user_in,
            create_user_nin               => create_user_nin,
            create_time_in                => create_time_in,
            create_time_nin               => create_time_nin,
            create_institution_in         => create_institution_in,
            create_institution_nin        => create_institution_nin,
            update_user_in                => update_user_in,
            update_user_nin               => update_user_nin,
            update_time_in                => update_time_in,
            update_time_nin               => update_time_nin,
            update_institution_in         => update_institution_in,
            update_institution_nin        => update_institution_nin,
            id_bed_type_in                => id_bed_type_in,
            id_bed_type_nin               => id_bed_type_nin,
            dt_creation_in                => dt_creation_in,
            dt_creation_nin               => dt_creation_nin,
            flg_schedulable_in            => flg_schedulable_in,
            flg_schedulable_nin           => flg_schedulable_nin,
            flg_bed_status_in             => flg_bed_status_in,
            flg_bed_status_nin            => flg_bed_status_nin,
            flg_parameterization_type_in  => flg_parameterization_type_in,
            flg_parameterization_type_nin => flg_parameterization_type_nin,
            id_professional_in            => id_professional_in,
            id_professional_nin           => id_professional_nin,
            dt_last_update_in             => dt_last_update_in,
            dt_last_update_nin            => dt_last_update_nin,
            flg_selected_specialties_in   => flg_selected_specialties_in,
            flg_selected_specialties_nin  => flg_selected_specialties_nin,
            where_in                      => where_in,
            handle_error_in               => handle_error_in,
            rows_out                      => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN bed%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_bed_in                    => rec_in.id_bed,
            code_bed_in                  => rec_in.code_bed,
            id_room_in                   => rec_in.id_room,
            flg_type_in                  => rec_in.flg_type,
            flg_status_in                => rec_in.flg_status,
            desc_bed_in                  => rec_in.desc_bed,
            notes_in                     => rec_in.notes,
            rank_in                      => rec_in.rank,
            flg_available_in             => rec_in.flg_available,
            create_user_in               => rec_in.create_user,
            create_time_in               => rec_in.create_time,
            create_institution_in        => rec_in.create_institution,
            update_user_in               => rec_in.update_user,
            update_time_in               => rec_in.update_time,
            update_institution_in        => rec_in.update_institution,
            id_bed_type_in               => rec_in.id_bed_type,
            dt_creation_in               => rec_in.dt_creation,
            flg_schedulable_in           => rec_in.flg_schedulable,
            flg_bed_status_in            => rec_in.flg_bed_status,
            flg_parameterization_type_in => rec_in.flg_parameterization_type,
            id_professional_in           => rec_in.id_professional,
            dt_last_update_in            => rec_in.dt_last_update,
            flg_selected_specialties_in  => rec_in.flg_selected_specialties
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN bed%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_bed_in                    => rec_in.id_bed,
            code_bed_in                  => rec_in.code_bed,
            id_room_in                   => rec_in.id_room,
            flg_type_in                  => rec_in.flg_type,
            flg_status_in                => rec_in.flg_status,
            desc_bed_in                  => rec_in.desc_bed,
            notes_in                     => rec_in.notes,
            rank_in                      => rec_in.rank,
            flg_available_in             => rec_in.flg_available,
            create_user_in               => rec_in.create_user,
            create_time_in               => rec_in.create_time,
            create_institution_in        => rec_in.create_institution,
            update_user_in               => rec_in.update_user,
            update_time_in               => rec_in.update_time,
            update_institution_in        => rec_in.update_institution,
            id_bed_type_in               => rec_in.id_bed_type,
            dt_creation_in               => rec_in.dt_creation,
            flg_schedulable_in           => rec_in.flg_schedulable,
            flg_bed_status_in            => rec_in.flg_bed_status,
            flg_parameterization_type_in => rec_in.flg_parameterization_type,
            id_professional_in           => rec_in.id_professional,
            dt_last_update_in            => rec_in.dt_last_update,
            flg_selected_specialties_in  => rec_in.flg_selected_specialties
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_bed_in                    IN bed.id_bed%TYPE,
        code_bed_in                  IN bed.code_bed%TYPE DEFAULT NULL,
        id_room_in                   IN bed.id_room%TYPE DEFAULT NULL,
        flg_type_in                  IN bed.flg_type%TYPE DEFAULT NULL,
        flg_status_in                IN bed.flg_status%TYPE DEFAULT NULL,
        desc_bed_in                  IN bed.desc_bed%TYPE DEFAULT NULL,
        notes_in                     IN bed.notes%TYPE DEFAULT NULL,
        rank_in                      IN bed.rank%TYPE DEFAULT NULL,
        flg_available_in             IN bed.flg_available%TYPE DEFAULT NULL,
        create_user_in               IN bed.create_user%TYPE DEFAULT NULL,
        create_time_in               IN bed.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN bed.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN bed.update_user%TYPE DEFAULT NULL,
        update_time_in               IN bed.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN bed.update_institution%TYPE DEFAULT NULL,
        id_bed_type_in               IN bed.id_bed_type%TYPE DEFAULT NULL,
        dt_creation_in               IN bed.dt_creation%TYPE DEFAULT NULL,
        flg_schedulable_in           IN bed.flg_schedulable%TYPE DEFAULT NULL,
        flg_bed_status_in            IN bed.flg_bed_status%TYPE DEFAULT NULL,
        flg_parameterization_type_in IN bed.flg_parameterization_type%TYPE DEFAULT NULL,
        id_professional_in           IN bed.id_professional%TYPE DEFAULT NULL,
        dt_last_update_in            IN bed.dt_last_update%TYPE DEFAULT NULL,
        flg_selected_specialties_in  IN bed.flg_selected_specialties%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE,
        rows_out                     OUT table_varchar
    ) IS
    BEGIN
        upd(id_bed_in                    => id_bed_in,
            code_bed_in                  => code_bed_in,
            id_room_in                   => id_room_in,
            flg_type_in                  => flg_type_in,
            flg_status_in                => flg_status_in,
            desc_bed_in                  => desc_bed_in,
            notes_in                     => notes_in,
            rank_in                      => rank_in,
            flg_available_in             => flg_available_in,
            create_user_in               => create_user_in,
            create_time_in               => create_time_in,
            create_institution_in        => create_institution_in,
            update_user_in               => update_user_in,
            update_time_in               => update_time_in,
            update_institution_in        => update_institution_in,
            id_bed_type_in               => id_bed_type_in,
            dt_creation_in               => dt_creation_in,
            flg_schedulable_in           => flg_schedulable_in,
            flg_bed_status_in            => flg_bed_status_in,
            flg_parameterization_type_in => flg_parameterization_type_in,
            id_professional_in           => id_professional_in,
            dt_last_update_in            => dt_last_update_in,
            flg_selected_specialties_in  => flg_selected_specialties_in,
            handle_error_in              => handle_error_in,
            rows_out                     => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_bed_in                    => id_bed_in,
                code_bed_in                  => code_bed_in,
                id_room_in                   => id_room_in,
                flg_type_in                  => flg_type_in,
                flg_status_in                => flg_status_in,
                desc_bed_in                  => desc_bed_in,
                notes_in                     => notes_in,
                rank_in                      => rank_in,
                flg_available_in             => flg_available_in,
                create_user_in               => create_user_in,
                create_time_in               => create_time_in,
                create_institution_in        => create_institution_in,
                update_user_in               => update_user_in,
                update_time_in               => update_time_in,
                update_institution_in        => update_institution_in,
                id_bed_type_in               => id_bed_type_in,
                dt_creation_in               => dt_creation_in,
                flg_schedulable_in           => flg_schedulable_in,
                flg_bed_status_in            => flg_bed_status_in,
                flg_parameterization_type_in => flg_parameterization_type_in,
                id_professional_in           => id_professional_in,
                dt_last_update_in            => dt_last_update_in,
                flg_selected_specialties_in  => flg_selected_specialties_in,
                handle_error_in              => handle_error_in,
                rows_out                     => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_bed_in                    IN bed.id_bed%TYPE,
        code_bed_in                  IN bed.code_bed%TYPE DEFAULT NULL,
        id_room_in                   IN bed.id_room%TYPE DEFAULT NULL,
        flg_type_in                  IN bed.flg_type%TYPE DEFAULT NULL,
        flg_status_in                IN bed.flg_status%TYPE DEFAULT NULL,
        desc_bed_in                  IN bed.desc_bed%TYPE DEFAULT NULL,
        notes_in                     IN bed.notes%TYPE DEFAULT NULL,
        rank_in                      IN bed.rank%TYPE DEFAULT NULL,
        flg_available_in             IN bed.flg_available%TYPE DEFAULT NULL,
        create_user_in               IN bed.create_user%TYPE DEFAULT NULL,
        create_time_in               IN bed.create_time%TYPE DEFAULT NULL,
        create_institution_in        IN bed.create_institution%TYPE DEFAULT NULL,
        update_user_in               IN bed.update_user%TYPE DEFAULT NULL,
        update_time_in               IN bed.update_time%TYPE DEFAULT NULL,
        update_institution_in        IN bed.update_institution%TYPE DEFAULT NULL,
        id_bed_type_in               IN bed.id_bed_type%TYPE DEFAULT NULL,
        dt_creation_in               IN bed.dt_creation%TYPE DEFAULT NULL,
        flg_schedulable_in           IN bed.flg_schedulable%TYPE DEFAULT NULL,
        flg_bed_status_in            IN bed.flg_bed_status%TYPE DEFAULT NULL,
        flg_parameterization_type_in IN bed.flg_parameterization_type%TYPE DEFAULT NULL,
        id_professional_in           IN bed.id_professional%TYPE DEFAULT NULL,
        dt_last_update_in            IN bed.dt_last_update%TYPE DEFAULT NULL,
        flg_selected_specialties_in  IN bed.flg_selected_specialties%TYPE DEFAULT NULL,
        handle_error_in              IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_bed_in,
                code_bed_in,
                id_room_in,
                flg_type_in,
                flg_status_in,
                desc_bed_in,
                notes_in,
                rank_in,
                flg_available_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_bed_type_in,
                dt_creation_in,
                flg_schedulable_in,
                flg_bed_status_in,
                flg_parameterization_type_in,
                id_professional_in,
                dt_last_update_in,
                flg_selected_specialties_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN bed_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_bed                    id_bed_cc;
        l_code_bed                  code_bed_cc;
        l_id_room                   id_room_cc;
        l_flg_type                  flg_type_cc;
        l_flg_status                flg_status_cc;
        l_desc_bed                  desc_bed_cc;
        l_notes                     notes_cc;
        l_rank                      rank_cc;
        l_flg_available             flg_available_cc;
        l_create_user               create_user_cc;
        l_create_time               create_time_cc;
        l_create_institution        create_institution_cc;
        l_update_user               update_user_cc;
        l_update_time               update_time_cc;
        l_update_institution        update_institution_cc;
        l_id_bed_type               id_bed_type_cc;
        l_dt_creation               dt_creation_cc;
        l_flg_schedulable           flg_schedulable_cc;
        l_flg_bed_status            flg_bed_status_cc;
        l_flg_parameterization_type flg_parameterization_type_cc;
        l_id_professional           id_professional_cc;
        l_dt_last_update            dt_last_update_cc;
        l_flg_selected_specialties  flg_selected_specialties_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_bed(i) := col_in(i).id_bed;
            l_code_bed(i) := col_in(i).code_bed;
            l_id_room(i) := col_in(i).id_room;
            l_flg_type(i) := col_in(i).flg_type;
            l_flg_status(i) := col_in(i).flg_status;
            l_desc_bed(i) := col_in(i).desc_bed;
            l_notes(i) := col_in(i).notes;
            l_rank(i) := col_in(i).rank;
            l_flg_available(i) := col_in(i).flg_available;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_bed_type(i) := col_in(i).id_bed_type;
            l_dt_creation(i) := col_in(i).dt_creation;
            l_flg_schedulable(i) := col_in(i).flg_schedulable;
            l_flg_bed_status(i) := col_in(i).flg_bed_status;
            l_flg_parameterization_type(i) := col_in(i).flg_parameterization_type;
            l_id_professional(i) := col_in(i).id_professional;
            l_dt_last_update(i) := col_in(i).dt_last_update;
            l_flg_selected_specialties(i) := col_in(i).flg_selected_specialties;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE bed
                   SET code_bed                  = nvl(l_code_bed(i), code_bed),
                       id_room                   = nvl(l_id_room(i), id_room),
                       flg_type                  = nvl(l_flg_type(i), flg_type),
                       flg_status                = nvl(l_flg_status(i), flg_status),
                       desc_bed                  = nvl(l_desc_bed(i), desc_bed),
                       notes                     = nvl(l_notes(i), notes),
                       rank                      = nvl(l_rank(i), rank),
                       flg_available             = nvl(l_flg_available(i), flg_available),
                       create_user               = nvl(l_create_user(i), create_user),
                       create_time               = nvl(l_create_time(i), create_time),
                       create_institution        = nvl(l_create_institution(i), create_institution),
                       update_user               = nvl(l_update_user(i), update_user),
                       update_time               = nvl(l_update_time(i), update_time),
                       update_institution        = nvl(l_update_institution(i), update_institution),
                       id_bed_type               = nvl(l_id_bed_type(i), id_bed_type),
                       dt_creation               = nvl(l_dt_creation(i), dt_creation),
                       flg_schedulable           = nvl(l_flg_schedulable(i), flg_schedulable),
                       flg_bed_status            = nvl(l_flg_bed_status(i), flg_bed_status),
                       flg_parameterization_type = nvl(l_flg_parameterization_type(i), flg_parameterization_type),
                       id_professional           = nvl(l_id_professional(i), id_professional),
                       dt_last_update            = nvl(l_dt_last_update(i), dt_last_update),
                       flg_selected_specialties  = nvl(l_flg_selected_specialties(i), flg_selected_specialties)
                 WHERE id_bed = l_id_bed(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE bed
                   SET code_bed                  = l_code_bed(i),
                       id_room                   = l_id_room(i),
                       flg_type                  = l_flg_type(i),
                       flg_status                = l_flg_status(i),
                       desc_bed                  = l_desc_bed(i),
                       notes                     = l_notes(i),
                       rank                      = l_rank(i),
                       flg_available             = l_flg_available(i),
                       create_user               = l_create_user(i),
                       create_time               = l_create_time(i),
                       create_institution        = l_create_institution(i),
                       update_user               = l_update_user(i),
                       update_time               = l_update_time(i),
                       update_institution        = l_update_institution(i),
                       id_bed_type               = l_id_bed_type(i),
                       dt_creation               = l_dt_creation(i),
                       flg_schedulable           = l_flg_schedulable(i),
                       flg_bed_status            = l_flg_bed_status(i),
                       flg_parameterization_type = l_flg_parameterization_type(i),
                       id_professional           = l_id_professional(i),
                       dt_last_update            = l_dt_last_update(i),
                       flg_selected_specialties  = l_flg_selected_specialties(i)
                 WHERE id_bed = l_id_bed(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN bed_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE BED
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE BED
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE BED set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE BED set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in, 1) ||
                          ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_bed_in       IN bed.id_bed%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bed
         WHERE id_bed = id_bed_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_bed_in       IN bed.id_bed%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_bed_in => id_bed_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_BED
    PROCEDURE del_id_bed
    (
        id_bed_in       IN bed.id_bed%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bed
         WHERE id_bed = id_bed_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_bed;

    -- Delete all rows for primary key column ID_BED
    PROCEDURE del_id_bed
    (
        id_bed_in       IN bed.id_bed%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_bed(id_bed_in => id_bed_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_id_bed;

    PROCEDURE del_bed_bty_fk
    (
        id_bed_type_in  IN bed.id_bed_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bed
         WHERE id_bed_type = del_bed_bty_fk.id_bed_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bed_bty_fk;

    PROCEDURE del_bed_bty_fk
    (
        id_bed_type_in  IN bed.id_bed_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bed_bty_fk(id_bed_type_in => id_bed_type_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_bed_bty_fk;

    PROCEDURE del_bed_room_fk
    (
        id_room_in      IN bed.id_room%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM bed
         WHERE id_room = del_bed_room_fk.id_room_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_bed_room_fk;

    PROCEDURE del_bed_room_fk
    (
        id_room_in      IN bed.id_room%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_bed_room_fk(id_room_in => id_room_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_bed_room_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM BED';
        ELSE
            RETURN 'DELETE FROM BED WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'BED');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'BED');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(bed_inout IN OUT bed%ROWTYPE) IS
    BEGIN
        bed_inout.id_bed                    := NULL;
        bed_inout.code_bed                  := NULL;
        bed_inout.id_room                   := NULL;
        bed_inout.flg_type                  := 'T';
        bed_inout.flg_status                := 'O';
        bed_inout.desc_bed                  := NULL;
        bed_inout.notes                     := NULL;
        bed_inout.rank                      := NULL;
        bed_inout.flg_available             := 'Y';
        bed_inout.create_user               := NULL;
        bed_inout.create_time               := NULL;
        bed_inout.create_institution        := NULL;
        bed_inout.update_user               := NULL;
        bed_inout.update_time               := NULL;
        bed_inout.update_institution        := NULL;
        bed_inout.id_bed_type               := NULL;
        bed_inout.dt_creation               := current_timestamp;
        bed_inout.flg_schedulable           := 'Y';
        bed_inout.flg_bed_status            := NULL;
        bed_inout.flg_parameterization_type := 'C';
        bed_inout.id_professional           := NULL;
        bed_inout.dt_last_update            := NULL;
        bed_inout.flg_selected_specialties  := NULL;
    END initrec;

    FUNCTION initrec RETURN bed%ROWTYPE IS
        l_bed bed%ROWTYPE;
    BEGIN
        l_bed.flg_type                  := 'T';
        l_bed.flg_status                := 'O';
        l_bed.flg_available             := 'Y';
        l_bed.dt_creation               := current_timestamp;
        l_bed.flg_schedulable           := 'Y';
        l_bed.flg_parameterization_type := 'C';
        RETURN l_bed;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN bed_tc IS
        data bed_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM bed
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN bed_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data bed_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_bed;
/
