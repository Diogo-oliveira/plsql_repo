/*-- Last Change Revision: $Rev: 2028265 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:45 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_movement
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Agosto 30, 2010 10:55:30
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_movement_in        IN movement.id_movement%TYPE,
        id_episode_in         IN movement.id_episode%TYPE DEFAULT NULL,
        id_prof_request_in    IN movement.id_prof_request%TYPE DEFAULT NULL,
        id_prof_move_in       IN movement.id_prof_move%TYPE DEFAULT NULL,
        id_prof_receive_in    IN movement.id_prof_receive%TYPE DEFAULT NULL,
        flg_status_in         IN movement.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in     IN movement.id_prof_cancel%TYPE DEFAULT NULL,
        id_necessity_in       IN movement.id_necessity%TYPE DEFAULT NULL,
        id_room_from_in       IN movement.id_room_from%TYPE DEFAULT NULL,
        id_room_to_in         IN movement.id_room_to%TYPE DEFAULT NULL,
        notes_cancel_in       IN movement.notes_cancel%TYPE DEFAULT NULL,
        id_episode_write_in   IN movement.id_episode_write%TYPE DEFAULT NULL,
        dt_req_tstz_in        IN movement.dt_req_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in      IN movement.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in        IN movement.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in     IN movement.dt_cancel_tstz%TYPE DEFAULT NULL,
        create_user_in        IN movement.create_user%TYPE DEFAULT NULL,
        create_time_in        IN movement.create_time%TYPE DEFAULT NULL,
        create_institution_in IN movement.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN movement.update_user%TYPE DEFAULT NULL,
        update_time_in        IN movement.update_time%TYPE DEFAULT NULL,
        update_institution_in IN movement.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in    IN movement.flg_status_prev%TYPE DEFAULT NULL,
        flg_mov_type_in       IN movement.flg_mov_type%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO movement
            (id_movement,
             id_episode,
             id_prof_request,
             id_prof_move,
             id_prof_receive,
             flg_status,
             id_prof_cancel,
             id_necessity,
             id_room_from,
             id_room_to,
             notes_cancel,
             id_episode_write,
             dt_req_tstz,
             dt_begin_tstz,
             dt_end_tstz,
             dt_cancel_tstz,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             flg_status_prev,
             flg_mov_type)
        VALUES
            (id_movement_in,
             id_episode_in,
             id_prof_request_in,
             id_prof_move_in,
             id_prof_receive_in,
             flg_status_in,
             id_prof_cancel_in,
             id_necessity_in,
             id_room_from_in,
             id_room_to_in,
             notes_cancel_in,
             id_episode_write_in,
             dt_req_tstz_in,
             dt_begin_tstz_in,
             dt_end_tstz_in,
             dt_cancel_tstz_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             flg_status_prev_in,
             flg_mov_type_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'MOVEMENT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    IF l_name = 'MOV_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'MOV_EPIS_WRITE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_WRITE',
                                                        value_in           => id_episode_write_in);
                    END IF;
                    IF l_name = 'MOV_PROF_CANCEL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'MOV_PROF_MOVE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_MOVE',
                                                        value_in           => id_prof_move_in);
                    END IF;
                    IF l_name = 'MOV_PROF_RECEIVE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_RECEIVE',
                                                        value_in           => id_prof_receive_in);
                    END IF;
                    IF l_name = 'MOV_PROF_REQUEST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_REQUEST',
                                                        value_in           => id_prof_request_in);
                    END IF;
                    IF l_name = 'MOV_ROOM_FROM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM_FROM',
                                                        value_in           => id_room_from_in);
                    END IF;
                    IF l_name = 'MOV_ROOM_TO_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM_TO',
                                                        value_in           => id_room_to_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_movement_in        IN movement.id_movement%TYPE,
        id_episode_in         IN movement.id_episode%TYPE DEFAULT NULL,
        id_prof_request_in    IN movement.id_prof_request%TYPE DEFAULT NULL,
        id_prof_move_in       IN movement.id_prof_move%TYPE DEFAULT NULL,
        id_prof_receive_in    IN movement.id_prof_receive%TYPE DEFAULT NULL,
        flg_status_in         IN movement.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in     IN movement.id_prof_cancel%TYPE DEFAULT NULL,
        id_necessity_in       IN movement.id_necessity%TYPE DEFAULT NULL,
        id_room_from_in       IN movement.id_room_from%TYPE DEFAULT NULL,
        id_room_to_in         IN movement.id_room_to%TYPE DEFAULT NULL,
        notes_cancel_in       IN movement.notes_cancel%TYPE DEFAULT NULL,
        id_episode_write_in   IN movement.id_episode_write%TYPE DEFAULT NULL,
        dt_req_tstz_in        IN movement.dt_req_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in      IN movement.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in        IN movement.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in     IN movement.dt_cancel_tstz%TYPE DEFAULT NULL,
        create_user_in        IN movement.create_user%TYPE DEFAULT NULL,
        create_time_in        IN movement.create_time%TYPE DEFAULT NULL,
        create_institution_in IN movement.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN movement.update_user%TYPE DEFAULT NULL,
        update_time_in        IN movement.update_time%TYPE DEFAULT NULL,
        update_institution_in IN movement.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in    IN movement.flg_status_prev%TYPE DEFAULT NULL,
        flg_mov_type_in       IN movement.flg_mov_type%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_movement_in        => id_movement_in,
            id_episode_in         => id_episode_in,
            id_prof_request_in    => id_prof_request_in,
            id_prof_move_in       => id_prof_move_in,
            id_prof_receive_in    => id_prof_receive_in,
            flg_status_in         => flg_status_in,
            id_prof_cancel_in     => id_prof_cancel_in,
            id_necessity_in       => id_necessity_in,
            id_room_from_in       => id_room_from_in,
            id_room_to_in         => id_room_to_in,
            notes_cancel_in       => notes_cancel_in,
            id_episode_write_in   => id_episode_write_in,
            dt_req_tstz_in        => dt_req_tstz_in,
            dt_begin_tstz_in      => dt_begin_tstz_in,
            dt_end_tstz_in        => dt_end_tstz_in,
            dt_cancel_tstz_in     => dt_cancel_tstz_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_status_prev_in    => flg_status_prev_in,
            flg_mov_type_in       => flg_mov_type_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN movement%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec movement%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_movement := next_key(sequence_in);
        END IF;
        ins(id_movement_in        => l_rec.id_movement,
            id_episode_in         => l_rec.id_episode,
            id_prof_request_in    => l_rec.id_prof_request,
            id_prof_move_in       => l_rec.id_prof_move,
            id_prof_receive_in    => l_rec.id_prof_receive,
            flg_status_in         => l_rec.flg_status,
            id_prof_cancel_in     => l_rec.id_prof_cancel,
            id_necessity_in       => l_rec.id_necessity,
            id_room_from_in       => l_rec.id_room_from,
            id_room_to_in         => l_rec.id_room_to,
            notes_cancel_in       => l_rec.notes_cancel,
            id_episode_write_in   => l_rec.id_episode_write,
            dt_req_tstz_in        => l_rec.dt_req_tstz,
            dt_begin_tstz_in      => l_rec.dt_begin_tstz,
            dt_end_tstz_in        => l_rec.dt_end_tstz,
            dt_cancel_tstz_in     => l_rec.dt_cancel_tstz,
            create_user_in        => l_rec.create_user,
            create_time_in        => l_rec.create_time,
            create_institution_in => l_rec.create_institution,
            update_user_in        => l_rec.update_user,
            update_time_in        => l_rec.update_time,
            update_institution_in => l_rec.update_institution,
            flg_status_prev_in    => l_rec.flg_status_prev,
            flg_mov_type_in       => l_rec.flg_mov_type,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN movement%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN movement.id_movement%TYPE
    
     IS
        retval movement.id_movement%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_movement.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_MOVEMENT'));
    END next_key;

    PROCEDURE ins
    (
        id_episode_in         IN movement.id_episode%TYPE DEFAULT NULL,
        id_prof_request_in    IN movement.id_prof_request%TYPE DEFAULT NULL,
        id_prof_move_in       IN movement.id_prof_move%TYPE DEFAULT NULL,
        id_prof_receive_in    IN movement.id_prof_receive%TYPE DEFAULT NULL,
        flg_status_in         IN movement.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in     IN movement.id_prof_cancel%TYPE DEFAULT NULL,
        id_necessity_in       IN movement.id_necessity%TYPE DEFAULT NULL,
        id_room_from_in       IN movement.id_room_from%TYPE DEFAULT NULL,
        id_room_to_in         IN movement.id_room_to%TYPE DEFAULT NULL,
        notes_cancel_in       IN movement.notes_cancel%TYPE DEFAULT NULL,
        id_episode_write_in   IN movement.id_episode_write%TYPE DEFAULT NULL,
        dt_req_tstz_in        IN movement.dt_req_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in      IN movement.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in        IN movement.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in     IN movement.dt_cancel_tstz%TYPE DEFAULT NULL,
        create_user_in        IN movement.create_user%TYPE DEFAULT NULL,
        create_time_in        IN movement.create_time%TYPE DEFAULT NULL,
        create_institution_in IN movement.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN movement.update_user%TYPE DEFAULT NULL,
        update_time_in        IN movement.update_time%TYPE DEFAULT NULL,
        update_institution_in IN movement.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in    IN movement.flg_status_prev%TYPE DEFAULT NULL,
        flg_mov_type_in       IN movement.flg_mov_type%TYPE DEFAULT NULL,
        id_movement_out       IN OUT movement.id_movement%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
        l_pky movement.id_movement%TYPE := next_key;
    BEGIN
        ins(id_movement_in        => l_pky,
            id_episode_in         => id_episode_in,
            id_prof_request_in    => id_prof_request_in,
            id_prof_move_in       => id_prof_move_in,
            id_prof_receive_in    => id_prof_receive_in,
            flg_status_in         => flg_status_in,
            id_prof_cancel_in     => id_prof_cancel_in,
            id_necessity_in       => id_necessity_in,
            id_room_from_in       => id_room_from_in,
            id_room_to_in         => id_room_to_in,
            notes_cancel_in       => notes_cancel_in,
            id_episode_write_in   => id_episode_write_in,
            dt_req_tstz_in        => dt_req_tstz_in,
            dt_begin_tstz_in      => dt_begin_tstz_in,
            dt_end_tstz_in        => dt_end_tstz_in,
            dt_cancel_tstz_in     => dt_cancel_tstz_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_status_prev_in    => flg_status_prev_in,
            flg_mov_type_in       => flg_mov_type_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        id_movement_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_episode_in         IN movement.id_episode%TYPE DEFAULT NULL,
        id_prof_request_in    IN movement.id_prof_request%TYPE DEFAULT NULL,
        id_prof_move_in       IN movement.id_prof_move%TYPE DEFAULT NULL,
        id_prof_receive_in    IN movement.id_prof_receive%TYPE DEFAULT NULL,
        flg_status_in         IN movement.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in     IN movement.id_prof_cancel%TYPE DEFAULT NULL,
        id_necessity_in       IN movement.id_necessity%TYPE DEFAULT NULL,
        id_room_from_in       IN movement.id_room_from%TYPE DEFAULT NULL,
        id_room_to_in         IN movement.id_room_to%TYPE DEFAULT NULL,
        notes_cancel_in       IN movement.notes_cancel%TYPE DEFAULT NULL,
        id_episode_write_in   IN movement.id_episode_write%TYPE DEFAULT NULL,
        dt_req_tstz_in        IN movement.dt_req_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in      IN movement.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in        IN movement.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in     IN movement.dt_cancel_tstz%TYPE DEFAULT NULL,
        create_user_in        IN movement.create_user%TYPE DEFAULT NULL,
        create_time_in        IN movement.create_time%TYPE DEFAULT NULL,
        create_institution_in IN movement.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN movement.update_user%TYPE DEFAULT NULL,
        update_time_in        IN movement.update_time%TYPE DEFAULT NULL,
        update_institution_in IN movement.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in    IN movement.flg_status_prev%TYPE DEFAULT NULL,
        flg_mov_type_in       IN movement.flg_mov_type%TYPE DEFAULT NULL,
        id_movement_out       IN OUT movement.id_movement%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in         => id_episode_in,
            id_prof_request_in    => id_prof_request_in,
            id_prof_move_in       => id_prof_move_in,
            id_prof_receive_in    => id_prof_receive_in,
            flg_status_in         => flg_status_in,
            id_prof_cancel_in     => id_prof_cancel_in,
            id_necessity_in       => id_necessity_in,
            id_room_from_in       => id_room_from_in,
            id_room_to_in         => id_room_to_in,
            notes_cancel_in       => notes_cancel_in,
            id_episode_write_in   => id_episode_write_in,
            dt_req_tstz_in        => dt_req_tstz_in,
            dt_begin_tstz_in      => dt_begin_tstz_in,
            dt_end_tstz_in        => dt_end_tstz_in,
            dt_cancel_tstz_in     => dt_cancel_tstz_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_status_prev_in    => flg_status_prev_in,
            flg_mov_type_in       => flg_mov_type_in,
            id_movement_out       => id_movement_out,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    FUNCTION ins
    (
        id_episode_in         IN movement.id_episode%TYPE DEFAULT NULL,
        id_prof_request_in    IN movement.id_prof_request%TYPE DEFAULT NULL,
        id_prof_move_in       IN movement.id_prof_move%TYPE DEFAULT NULL,
        id_prof_receive_in    IN movement.id_prof_receive%TYPE DEFAULT NULL,
        flg_status_in         IN movement.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in     IN movement.id_prof_cancel%TYPE DEFAULT NULL,
        id_necessity_in       IN movement.id_necessity%TYPE DEFAULT NULL,
        id_room_from_in       IN movement.id_room_from%TYPE DEFAULT NULL,
        id_room_to_in         IN movement.id_room_to%TYPE DEFAULT NULL,
        notes_cancel_in       IN movement.notes_cancel%TYPE DEFAULT NULL,
        id_episode_write_in   IN movement.id_episode_write%TYPE DEFAULT NULL,
        dt_req_tstz_in        IN movement.dt_req_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in      IN movement.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in        IN movement.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in     IN movement.dt_cancel_tstz%TYPE DEFAULT NULL,
        create_user_in        IN movement.create_user%TYPE DEFAULT NULL,
        create_time_in        IN movement.create_time%TYPE DEFAULT NULL,
        create_institution_in IN movement.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN movement.update_user%TYPE DEFAULT NULL,
        update_time_in        IN movement.update_time%TYPE DEFAULT NULL,
        update_institution_in IN movement.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in    IN movement.flg_status_prev%TYPE DEFAULT NULL,
        flg_mov_type_in       IN movement.flg_mov_type%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) RETURN movement.id_movement%TYPE IS
        l_pky movement.id_movement%TYPE := next_key;
    BEGIN
        ins(id_movement_in        => l_pky,
            id_episode_in         => id_episode_in,
            id_prof_request_in    => id_prof_request_in,
            id_prof_move_in       => id_prof_move_in,
            id_prof_receive_in    => id_prof_receive_in,
            flg_status_in         => flg_status_in,
            id_prof_cancel_in     => id_prof_cancel_in,
            id_necessity_in       => id_necessity_in,
            id_room_from_in       => id_room_from_in,
            id_room_to_in         => id_room_to_in,
            notes_cancel_in       => notes_cancel_in,
            id_episode_write_in   => id_episode_write_in,
            dt_req_tstz_in        => dt_req_tstz_in,
            dt_begin_tstz_in      => dt_begin_tstz_in,
            dt_end_tstz_in        => dt_end_tstz_in,
            dt_cancel_tstz_in     => dt_cancel_tstz_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_status_prev_in    => flg_status_prev_in,
            flg_mov_type_in       => flg_mov_type_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_episode_in         IN movement.id_episode%TYPE DEFAULT NULL,
        id_prof_request_in    IN movement.id_prof_request%TYPE DEFAULT NULL,
        id_prof_move_in       IN movement.id_prof_move%TYPE DEFAULT NULL,
        id_prof_receive_in    IN movement.id_prof_receive%TYPE DEFAULT NULL,
        flg_status_in         IN movement.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in     IN movement.id_prof_cancel%TYPE DEFAULT NULL,
        id_necessity_in       IN movement.id_necessity%TYPE DEFAULT NULL,
        id_room_from_in       IN movement.id_room_from%TYPE DEFAULT NULL,
        id_room_to_in         IN movement.id_room_to%TYPE DEFAULT NULL,
        notes_cancel_in       IN movement.notes_cancel%TYPE DEFAULT NULL,
        id_episode_write_in   IN movement.id_episode_write%TYPE DEFAULT NULL,
        dt_req_tstz_in        IN movement.dt_req_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in      IN movement.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in        IN movement.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in     IN movement.dt_cancel_tstz%TYPE DEFAULT NULL,
        create_user_in        IN movement.create_user%TYPE DEFAULT NULL,
        create_time_in        IN movement.create_time%TYPE DEFAULT NULL,
        create_institution_in IN movement.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN movement.update_user%TYPE DEFAULT NULL,
        update_time_in        IN movement.update_time%TYPE DEFAULT NULL,
        update_institution_in IN movement.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in    IN movement.flg_status_prev%TYPE DEFAULT NULL,
        flg_mov_type_in       IN movement.flg_mov_type%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) RETURN movement.id_movement%TYPE IS
        l_pky    movement.id_movement%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_movement_in        => l_pky,
            id_episode_in         => id_episode_in,
            id_prof_request_in    => id_prof_request_in,
            id_prof_move_in       => id_prof_move_in,
            id_prof_receive_in    => id_prof_receive_in,
            flg_status_in         => flg_status_in,
            id_prof_cancel_in     => id_prof_cancel_in,
            id_necessity_in       => id_necessity_in,
            id_room_from_in       => id_room_from_in,
            id_room_to_in         => id_room_to_in,
            notes_cancel_in       => notes_cancel_in,
            id_episode_write_in   => id_episode_write_in,
            dt_req_tstz_in        => dt_req_tstz_in,
            dt_begin_tstz_in      => dt_begin_tstz_in,
            dt_end_tstz_in        => dt_end_tstz_in,
            dt_cancel_tstz_in     => dt_cancel_tstz_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_status_prev_in    => flg_status_prev_in,
            flg_mov_type_in       => flg_mov_type_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_episode_in         IN movement.id_episode%TYPE DEFAULT NULL,
        id_prof_request_in    IN movement.id_prof_request%TYPE DEFAULT NULL,
        id_prof_move_in       IN movement.id_prof_move%TYPE DEFAULT NULL,
        id_prof_receive_in    IN movement.id_prof_receive%TYPE DEFAULT NULL,
        flg_status_in         IN movement.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in     IN movement.id_prof_cancel%TYPE DEFAULT NULL,
        id_necessity_in       IN movement.id_necessity%TYPE DEFAULT NULL,
        id_room_from_in       IN movement.id_room_from%TYPE DEFAULT NULL,
        id_room_to_in         IN movement.id_room_to%TYPE DEFAULT NULL,
        notes_cancel_in       IN movement.notes_cancel%TYPE DEFAULT NULL,
        id_episode_write_in   IN movement.id_episode_write%TYPE DEFAULT NULL,
        dt_req_tstz_in        IN movement.dt_req_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in      IN movement.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in        IN movement.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in     IN movement.dt_cancel_tstz%TYPE DEFAULT NULL,
        create_user_in        IN movement.create_user%TYPE DEFAULT NULL,
        create_time_in        IN movement.create_time%TYPE DEFAULT NULL,
        create_institution_in IN movement.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN movement.update_user%TYPE DEFAULT NULL,
        update_time_in        IN movement.update_time%TYPE DEFAULT NULL,
        update_institution_in IN movement.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in    IN movement.flg_status_prev%TYPE DEFAULT NULL,
        flg_mov_type_in       IN movement.flg_mov_type%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
        l_pky movement.id_movement%TYPE := next_key;
    BEGIN
        ins(id_movement_in        => l_pky,
            id_episode_in         => id_episode_in,
            id_prof_request_in    => id_prof_request_in,
            id_prof_move_in       => id_prof_move_in,
            id_prof_receive_in    => id_prof_receive_in,
            flg_status_in         => flg_status_in,
            id_prof_cancel_in     => id_prof_cancel_in,
            id_necessity_in       => id_necessity_in,
            id_room_from_in       => id_room_from_in,
            id_room_to_in         => id_room_to_in,
            notes_cancel_in       => notes_cancel_in,
            id_episode_write_in   => id_episode_write_in,
            dt_req_tstz_in        => dt_req_tstz_in,
            dt_begin_tstz_in      => dt_begin_tstz_in,
            dt_end_tstz_in        => dt_end_tstz_in,
            dt_cancel_tstz_in     => dt_cancel_tstz_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_status_prev_in    => flg_status_prev_in,
            flg_mov_type_in       => flg_mov_type_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_episode_in         IN movement.id_episode%TYPE DEFAULT NULL,
        id_prof_request_in    IN movement.id_prof_request%TYPE DEFAULT NULL,
        id_prof_move_in       IN movement.id_prof_move%TYPE DEFAULT NULL,
        id_prof_receive_in    IN movement.id_prof_receive%TYPE DEFAULT NULL,
        flg_status_in         IN movement.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in     IN movement.id_prof_cancel%TYPE DEFAULT NULL,
        id_necessity_in       IN movement.id_necessity%TYPE DEFAULT NULL,
        id_room_from_in       IN movement.id_room_from%TYPE DEFAULT NULL,
        id_room_to_in         IN movement.id_room_to%TYPE DEFAULT NULL,
        notes_cancel_in       IN movement.notes_cancel%TYPE DEFAULT NULL,
        id_episode_write_in   IN movement.id_episode_write%TYPE DEFAULT NULL,
        dt_req_tstz_in        IN movement.dt_req_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in      IN movement.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in        IN movement.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in     IN movement.dt_cancel_tstz%TYPE DEFAULT NULL,
        create_user_in        IN movement.create_user%TYPE DEFAULT NULL,
        create_time_in        IN movement.create_time%TYPE DEFAULT NULL,
        create_institution_in IN movement.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN movement.update_user%TYPE DEFAULT NULL,
        update_time_in        IN movement.update_time%TYPE DEFAULT NULL,
        update_institution_in IN movement.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in    IN movement.flg_status_prev%TYPE DEFAULT NULL,
        flg_mov_type_in       IN movement.flg_mov_type%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        l_pky    movement.id_movement%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_movement_in        => l_pky,
            id_episode_in         => id_episode_in,
            id_prof_request_in    => id_prof_request_in,
            id_prof_move_in       => id_prof_move_in,
            id_prof_receive_in    => id_prof_receive_in,
            flg_status_in         => flg_status_in,
            id_prof_cancel_in     => id_prof_cancel_in,
            id_necessity_in       => id_necessity_in,
            id_room_from_in       => id_room_from_in,
            id_room_to_in         => id_room_to_in,
            notes_cancel_in       => notes_cancel_in,
            id_episode_write_in   => id_episode_write_in,
            dt_req_tstz_in        => dt_req_tstz_in,
            dt_begin_tstz_in      => dt_begin_tstz_in,
            dt_end_tstz_in        => dt_end_tstz_in,
            dt_cancel_tstz_in     => dt_cancel_tstz_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_status_prev_in    => flg_status_prev_in,
            flg_mov_type_in       => flg_mov_type_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN movement_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO movement
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_MOVEMENT _' || indx,
                                                        value_in           => rows_in(indx).id_movement,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_REQUEST _' || indx,
                                                        value_in           => rows_in(indx).id_prof_request,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_MOVE _' || indx,
                                                        value_in           => rows_in(indx).id_prof_move,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_RECEIVE _' || indx,
                                                        value_in           => rows_in(indx).id_prof_receive,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).id_prof_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_NECESSITY _' || indx,
                                                        value_in           => rows_in(indx).id_necessity,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ROOM_FROM _' || indx,
                                                        value_in           => rows_in(indx).id_room_from,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ROOM_TO _' || indx,
                                                        value_in           => rows_in(indx).id_room_to,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).notes_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE_WRITE _' || indx,
                                                        value_in           => rows_in(indx).id_episode_write,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_REQ_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_req_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_BEGIN_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_begin_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_END_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_end_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CANCEL_TSTZ _' || indx,
                                                        value_in           => rows_in(indx).dt_cancel_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS_PREV _' || indx,
                                                        value_in           => rows_in(indx).flg_status_prev,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_MOV_TYPE _' || indx,
                                                        value_in           => rows_in(indx).flg_mov_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'MOVEMENT',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN movement_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_movement_in         IN movement.id_movement%TYPE,
        id_episode_in          IN movement.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_prof_request_in     IN movement.id_prof_request%TYPE DEFAULT NULL,
        id_prof_request_nin    IN BOOLEAN := TRUE,
        id_prof_move_in        IN movement.id_prof_move%TYPE DEFAULT NULL,
        id_prof_move_nin       IN BOOLEAN := TRUE,
        id_prof_receive_in     IN movement.id_prof_receive%TYPE DEFAULT NULL,
        id_prof_receive_nin    IN BOOLEAN := TRUE,
        flg_status_in          IN movement.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        id_prof_cancel_in      IN movement.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin     IN BOOLEAN := TRUE,
        id_necessity_in        IN movement.id_necessity%TYPE DEFAULT NULL,
        id_necessity_nin       IN BOOLEAN := TRUE,
        id_room_from_in        IN movement.id_room_from%TYPE DEFAULT NULL,
        id_room_from_nin       IN BOOLEAN := TRUE,
        id_room_to_in          IN movement.id_room_to%TYPE DEFAULT NULL,
        id_room_to_nin         IN BOOLEAN := TRUE,
        notes_cancel_in        IN movement.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin       IN BOOLEAN := TRUE,
        id_episode_write_in    IN movement.id_episode_write%TYPE DEFAULT NULL,
        id_episode_write_nin   IN BOOLEAN := TRUE,
        dt_req_tstz_in         IN movement.dt_req_tstz%TYPE DEFAULT NULL,
        dt_req_tstz_nin        IN BOOLEAN := TRUE,
        dt_begin_tstz_in       IN movement.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin      IN BOOLEAN := TRUE,
        dt_end_tstz_in         IN movement.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin        IN BOOLEAN := TRUE,
        dt_cancel_tstz_in      IN movement.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin     IN BOOLEAN := TRUE,
        create_user_in         IN movement.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN movement.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN movement.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN movement.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN movement.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN movement.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        flg_status_prev_in     IN movement.flg_status_prev%TYPE DEFAULT NULL,
        flg_status_prev_nin    IN BOOLEAN := TRUE,
        flg_mov_type_in        IN movement.flg_mov_type%TYPE DEFAULT NULL,
        flg_mov_type_nin       IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_rows_out             table_varchar;
        l_id_episode_n         NUMBER(1);
        l_id_prof_request_n    NUMBER(1);
        l_id_prof_move_n       NUMBER(1);
        l_id_prof_receive_n    NUMBER(1);
        l_flg_status_n         NUMBER(1);
        l_id_prof_cancel_n     NUMBER(1);
        l_id_necessity_n       NUMBER(1);
        l_id_room_from_n       NUMBER(1);
        l_id_room_to_n         NUMBER(1);
        l_notes_cancel_n       NUMBER(1);
        l_id_episode_write_n   NUMBER(1);
        l_dt_req_tstz_n        NUMBER(1);
        l_dt_begin_tstz_n      NUMBER(1);
        l_dt_end_tstz_n        NUMBER(1);
        l_dt_cancel_tstz_n     NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
        l_flg_status_prev_n    NUMBER(1);
        l_flg_mov_type_n       NUMBER(1);
    BEGIN
    
        l_id_episode_n         := sys.diutil.bool_to_int(id_episode_nin);
        l_id_prof_request_n    := sys.diutil.bool_to_int(id_prof_request_nin);
        l_id_prof_move_n       := sys.diutil.bool_to_int(id_prof_move_nin);
        l_id_prof_receive_n    := sys.diutil.bool_to_int(id_prof_receive_nin);
        l_flg_status_n         := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_cancel_n     := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_id_necessity_n       := sys.diutil.bool_to_int(id_necessity_nin);
        l_id_room_from_n       := sys.diutil.bool_to_int(id_room_from_nin);
        l_id_room_to_n         := sys.diutil.bool_to_int(id_room_to_nin);
        l_notes_cancel_n       := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_episode_write_n   := sys.diutil.bool_to_int(id_episode_write_nin);
        l_dt_req_tstz_n        := sys.diutil.bool_to_int(dt_req_tstz_nin);
        l_dt_begin_tstz_n      := sys.diutil.bool_to_int(dt_begin_tstz_nin);
        l_dt_end_tstz_n        := sys.diutil.bool_to_int(dt_end_tstz_nin);
        l_dt_cancel_tstz_n     := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_status_prev_n    := sys.diutil.bool_to_int(flg_status_prev_nin);
        l_flg_mov_type_n       := sys.diutil.bool_to_int(flg_mov_type_nin);
    
        UPDATE movement
           SET id_episode         = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_prof_request    = decode(l_id_prof_request_n,
                                           0,
                                           id_prof_request_in,
                                           nvl(id_prof_request_in, id_prof_request)),
               id_prof_move       = decode(l_id_prof_move_n, 0, id_prof_move_in, nvl(id_prof_move_in, id_prof_move)),
               id_prof_receive    = decode(l_id_prof_receive_n,
                                           0,
                                           id_prof_receive_in,
                                           nvl(id_prof_receive_in, id_prof_receive)),
               flg_status         = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_prof_cancel     = decode(l_id_prof_cancel_n,
                                           0,
                                           id_prof_cancel_in,
                                           nvl(id_prof_cancel_in, id_prof_cancel)),
               id_necessity       = decode(l_id_necessity_n, 0, id_necessity_in, nvl(id_necessity_in, id_necessity)),
               id_room_from       = decode(l_id_room_from_n, 0, id_room_from_in, nvl(id_room_from_in, id_room_from)),
               id_room_to         = decode(l_id_room_to_n, 0, id_room_to_in, nvl(id_room_to_in, id_room_to)),
               notes_cancel       = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               id_episode_write   = decode(l_id_episode_write_n,
                                           0,
                                           id_episode_write_in,
                                           nvl(id_episode_write_in, id_episode_write)),
               dt_req_tstz        = decode(l_dt_req_tstz_n, 0, dt_req_tstz_in, nvl(dt_req_tstz_in, dt_req_tstz)),
               dt_begin_tstz      = decode(l_dt_begin_tstz_n, 0, dt_begin_tstz_in, nvl(dt_begin_tstz_in, dt_begin_tstz)),
               dt_end_tstz        = decode(l_dt_end_tstz_n, 0, dt_end_tstz_in, nvl(dt_end_tstz_in, dt_end_tstz)),
               dt_cancel_tstz     = decode(l_dt_cancel_tstz_n,
                                           0,
                                           dt_cancel_tstz_in,
                                           nvl(dt_cancel_tstz_in, dt_cancel_tstz)),
               create_user        = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time        = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution = decode(l_create_institution_n,
                                           0,
                                           create_institution_in,
                                           nvl(create_institution_in, create_institution)),
               update_user        = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time        = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution = decode(l_update_institution_n,
                                           0,
                                           update_institution_in,
                                           nvl(update_institution_in, update_institution)),
               flg_status_prev    = decode(l_flg_status_prev_n,
                                           0,
                                           flg_status_prev_in,
                                           nvl(flg_status_prev_in, flg_status_prev)),
               flg_mov_type       = decode(l_flg_mov_type_n, 0, flg_mov_type_in, nvl(flg_mov_type_in, flg_mov_type))
         WHERE id_movement = id_movement_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'MOVEMENT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    IF l_name = 'MOV_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'MOV_EPIS_WRITE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_WRITE',
                                                        value_in           => id_episode_write_in);
                    END IF;
                    IF l_name = 'MOV_PROF_CANCEL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'MOV_PROF_MOVE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_MOVE',
                                                        value_in           => id_prof_move_in);
                    END IF;
                    IF l_name = 'MOV_PROF_RECEIVE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_RECEIVE',
                                                        value_in           => id_prof_receive_in);
                    END IF;
                    IF l_name = 'MOV_PROF_REQUEST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_REQUEST',
                                                        value_in           => id_prof_request_in);
                    END IF;
                    IF l_name = 'MOV_ROOM_FROM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM_FROM',
                                                        value_in           => id_room_from_in);
                    END IF;
                    IF l_name = 'MOV_ROOM_TO_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM_TO',
                                                        value_in           => id_room_to_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_movement_in         IN movement.id_movement%TYPE,
        id_episode_in          IN movement.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_prof_request_in     IN movement.id_prof_request%TYPE DEFAULT NULL,
        id_prof_request_nin    IN BOOLEAN := TRUE,
        id_prof_move_in        IN movement.id_prof_move%TYPE DEFAULT NULL,
        id_prof_move_nin       IN BOOLEAN := TRUE,
        id_prof_receive_in     IN movement.id_prof_receive%TYPE DEFAULT NULL,
        id_prof_receive_nin    IN BOOLEAN := TRUE,
        flg_status_in          IN movement.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        id_prof_cancel_in      IN movement.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin     IN BOOLEAN := TRUE,
        id_necessity_in        IN movement.id_necessity%TYPE DEFAULT NULL,
        id_necessity_nin       IN BOOLEAN := TRUE,
        id_room_from_in        IN movement.id_room_from%TYPE DEFAULT NULL,
        id_room_from_nin       IN BOOLEAN := TRUE,
        id_room_to_in          IN movement.id_room_to%TYPE DEFAULT NULL,
        id_room_to_nin         IN BOOLEAN := TRUE,
        notes_cancel_in        IN movement.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin       IN BOOLEAN := TRUE,
        id_episode_write_in    IN movement.id_episode_write%TYPE DEFAULT NULL,
        id_episode_write_nin   IN BOOLEAN := TRUE,
        dt_req_tstz_in         IN movement.dt_req_tstz%TYPE DEFAULT NULL,
        dt_req_tstz_nin        IN BOOLEAN := TRUE,
        dt_begin_tstz_in       IN movement.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin      IN BOOLEAN := TRUE,
        dt_end_tstz_in         IN movement.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin        IN BOOLEAN := TRUE,
        dt_cancel_tstz_in      IN movement.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin     IN BOOLEAN := TRUE,
        create_user_in         IN movement.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN movement.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN movement.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN movement.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN movement.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN movement.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        flg_status_prev_in     IN movement.flg_status_prev%TYPE DEFAULT NULL,
        flg_status_prev_nin    IN BOOLEAN := TRUE,
        flg_mov_type_in        IN movement.flg_mov_type%TYPE DEFAULT NULL,
        flg_mov_type_nin       IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_movement_in         => id_movement_in,
            id_episode_in          => id_episode_in,
            id_episode_nin         => id_episode_nin,
            id_prof_request_in     => id_prof_request_in,
            id_prof_request_nin    => id_prof_request_nin,
            id_prof_move_in        => id_prof_move_in,
            id_prof_move_nin       => id_prof_move_nin,
            id_prof_receive_in     => id_prof_receive_in,
            id_prof_receive_nin    => id_prof_receive_nin,
            flg_status_in          => flg_status_in,
            flg_status_nin         => flg_status_nin,
            id_prof_cancel_in      => id_prof_cancel_in,
            id_prof_cancel_nin     => id_prof_cancel_nin,
            id_necessity_in        => id_necessity_in,
            id_necessity_nin       => id_necessity_nin,
            id_room_from_in        => id_room_from_in,
            id_room_from_nin       => id_room_from_nin,
            id_room_to_in          => id_room_to_in,
            id_room_to_nin         => id_room_to_nin,
            notes_cancel_in        => notes_cancel_in,
            notes_cancel_nin       => notes_cancel_nin,
            id_episode_write_in    => id_episode_write_in,
            id_episode_write_nin   => id_episode_write_nin,
            dt_req_tstz_in         => dt_req_tstz_in,
            dt_req_tstz_nin        => dt_req_tstz_nin,
            dt_begin_tstz_in       => dt_begin_tstz_in,
            dt_begin_tstz_nin      => dt_begin_tstz_nin,
            dt_end_tstz_in         => dt_end_tstz_in,
            dt_end_tstz_nin        => dt_end_tstz_nin,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_cancel_tstz_nin     => dt_cancel_tstz_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            flg_status_prev_in     => flg_status_prev_in,
            flg_status_prev_nin    => flg_status_prev_nin,
            flg_mov_type_in        => flg_mov_type_in,
            flg_mov_type_nin       => flg_mov_type_nin,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_episode_in          IN movement.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_prof_request_in     IN movement.id_prof_request%TYPE DEFAULT NULL,
        id_prof_request_nin    IN BOOLEAN := TRUE,
        id_prof_move_in        IN movement.id_prof_move%TYPE DEFAULT NULL,
        id_prof_move_nin       IN BOOLEAN := TRUE,
        id_prof_receive_in     IN movement.id_prof_receive%TYPE DEFAULT NULL,
        id_prof_receive_nin    IN BOOLEAN := TRUE,
        flg_status_in          IN movement.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        id_prof_cancel_in      IN movement.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin     IN BOOLEAN := TRUE,
        id_necessity_in        IN movement.id_necessity%TYPE DEFAULT NULL,
        id_necessity_nin       IN BOOLEAN := TRUE,
        id_room_from_in        IN movement.id_room_from%TYPE DEFAULT NULL,
        id_room_from_nin       IN BOOLEAN := TRUE,
        id_room_to_in          IN movement.id_room_to%TYPE DEFAULT NULL,
        id_room_to_nin         IN BOOLEAN := TRUE,
        notes_cancel_in        IN movement.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin       IN BOOLEAN := TRUE,
        id_episode_write_in    IN movement.id_episode_write%TYPE DEFAULT NULL,
        id_episode_write_nin   IN BOOLEAN := TRUE,
        dt_req_tstz_in         IN movement.dt_req_tstz%TYPE DEFAULT NULL,
        dt_req_tstz_nin        IN BOOLEAN := TRUE,
        dt_begin_tstz_in       IN movement.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin      IN BOOLEAN := TRUE,
        dt_end_tstz_in         IN movement.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin        IN BOOLEAN := TRUE,
        dt_cancel_tstz_in      IN movement.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin     IN BOOLEAN := TRUE,
        create_user_in         IN movement.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN movement.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN movement.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN movement.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN movement.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN movement.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        flg_status_prev_in     IN movement.flg_status_prev%TYPE DEFAULT NULL,
        flg_status_prev_nin    IN BOOLEAN := TRUE,
        flg_mov_type_in        IN movement.flg_mov_type%TYPE DEFAULT NULL,
        flg_mov_type_nin       IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_sql                  VARCHAR2(32767);
        l_rows_out             table_varchar;
        l_id_episode_n         NUMBER(1);
        l_id_prof_request_n    NUMBER(1);
        l_id_prof_move_n       NUMBER(1);
        l_id_prof_receive_n    NUMBER(1);
        l_flg_status_n         NUMBER(1);
        l_id_prof_cancel_n     NUMBER(1);
        l_id_necessity_n       NUMBER(1);
        l_id_room_from_n       NUMBER(1);
        l_id_room_to_n         NUMBER(1);
        l_notes_cancel_n       NUMBER(1);
        l_id_episode_write_n   NUMBER(1);
        l_dt_req_tstz_n        NUMBER(1);
        l_dt_begin_tstz_n      NUMBER(1);
        l_dt_end_tstz_n        NUMBER(1);
        l_dt_cancel_tstz_n     NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
        l_flg_status_prev_n    NUMBER(1);
        l_flg_mov_type_n       NUMBER(1);
        id_movement_in         movement.id_movement%TYPE;
    BEGIN
    
        l_id_episode_n         := sys.diutil.bool_to_int(id_episode_nin);
        l_id_prof_request_n    := sys.diutil.bool_to_int(id_prof_request_nin);
        l_id_prof_move_n       := sys.diutil.bool_to_int(id_prof_move_nin);
        l_id_prof_receive_n    := sys.diutil.bool_to_int(id_prof_receive_nin);
        l_flg_status_n         := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_cancel_n     := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_id_necessity_n       := sys.diutil.bool_to_int(id_necessity_nin);
        l_id_room_from_n       := sys.diutil.bool_to_int(id_room_from_nin);
        l_id_room_to_n         := sys.diutil.bool_to_int(id_room_to_nin);
        l_notes_cancel_n       := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_episode_write_n   := sys.diutil.bool_to_int(id_episode_write_nin);
        l_dt_req_tstz_n        := sys.diutil.bool_to_int(dt_req_tstz_nin);
        l_dt_begin_tstz_n      := sys.diutil.bool_to_int(dt_begin_tstz_nin);
        l_dt_end_tstz_n        := sys.diutil.bool_to_int(dt_end_tstz_nin);
        l_dt_cancel_tstz_n     := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_status_prev_n    := sys.diutil.bool_to_int(flg_status_prev_nin);
        l_flg_mov_type_n       := sys.diutil.bool_to_int(flg_mov_type_nin);
    
        l_sql := 'UPDATE MOVEMENT SET ' || ' ID_EPISODE = decode (' || l_id_episode_n ||
                 ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' || ' ID_PROF_REQUEST = decode (' ||
                 l_id_prof_request_n || ',0,:id_prof_request_in, NVL (:id_prof_request_in, ID_PROF_REQUEST)) ' || ',' ||
                 ' ID_PROF_MOVE = decode (' || l_id_prof_move_n ||
                 ',0,:id_prof_move_in, NVL (:id_prof_move_in, ID_PROF_MOVE)) ' || ',' || ' ID_PROF_RECEIVE = decode (' ||
                 l_id_prof_receive_n || ',0,:id_prof_receive_in, NVL (:id_prof_receive_in, ID_PROF_RECEIVE)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                 ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) ' || ',' ||
                 ' ID_NECESSITY = decode (' || l_id_necessity_n ||
                 ',0,:id_necessity_in, NVL (:id_necessity_in, ID_NECESSITY)) ' || ',' || ' ID_ROOM_FROM = decode (' ||
                 l_id_room_from_n || ',0,:id_room_from_in, NVL (:id_room_from_in, ID_ROOM_FROM)) ' || ',' ||
                 ' ID_ROOM_TO = decode (' || l_id_room_to_n || ',0,:id_room_to_in, NVL (:id_room_to_in, ID_ROOM_TO)) ' || ',' ||
                 ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                 ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) ' || ',' || ' ID_EPISODE_WRITE = decode (' ||
                 l_id_episode_write_n || ',0,:id_episode_write_in, NVL (:id_episode_write_in, ID_EPISODE_WRITE)) ' || ',' ||
                 ' DT_REQ_TSTZ = decode (' || l_dt_req_tstz_n ||
                 ',0,:dt_req_tstz_in, NVL (:dt_req_tstz_in, DT_REQ_TSTZ)) ' || ',' || ' DT_BEGIN_TSTZ = decode (' ||
                 l_dt_begin_tstz_n || ',0,:dt_begin_tstz_in, NVL (:dt_begin_tstz_in, DT_BEGIN_TSTZ)) ' || ',' ||
                 ' DT_END_TSTZ = decode (' || l_dt_end_tstz_n ||
                 ',0,:dt_end_tstz_in, NVL (:dt_end_tstz_in, DT_END_TSTZ)) ' || ',' || ' DT_CANCEL_TSTZ = decode (' ||
                 l_dt_cancel_tstz_n || ',0,:dt_cancel_tstz_in, NVL (:dt_cancel_tstz_in, DT_CANCEL_TSTZ)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' FLG_STATUS_PREV = decode (' || l_flg_status_prev_n ||
                 ',0,:flg_status_prev_in, NVL (:flg_status_prev_in, FLG_STATUS_PREV)) ' || ',' ||
                 ' FLG_MOV_TYPE = decode (' || l_flg_mov_type_n ||
                 ',0,:flg_mov_type_in, NVL (:flg_mov_type_in, FLG_MOV_TYPE)) ' || ' where ' || nvl(where_in, '(1=1)') ||
                 ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_episode_in, id_prof_request_in, id_prof_move_in, id_prof_receive_in, flg_status_in, id_prof_cancel_in, id_necessity_in, id_room_from_in, id_room_to_in, notes_cancel_in, id_episode_write_in, dt_req_tstz_in, dt_begin_tstz_in, dt_end_tstz_in, dt_cancel_tstz_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_status_prev_in, flg_mov_type_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'MOVEMENT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    IF l_name = 'MOV_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'MOV_EPIS_WRITE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_WRITE',
                                                        value_in           => id_episode_write_in);
                    END IF;
                    IF l_name = 'MOV_PROF_CANCEL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'MOV_PROF_MOVE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_MOVE',
                                                        value_in           => id_prof_move_in);
                    END IF;
                    IF l_name = 'MOV_PROF_RECEIVE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_RECEIVE',
                                                        value_in           => id_prof_receive_in);
                    END IF;
                    IF l_name = 'MOV_PROF_REQUEST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_REQUEST',
                                                        value_in           => id_prof_request_in);
                    END IF;
                    IF l_name = 'MOV_ROOM_FROM_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM_FROM',
                                                        value_in           => id_room_from_in);
                    END IF;
                    IF l_name = 'MOV_ROOM_TO_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ROOM_TO',
                                                        value_in           => id_room_to_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_episode_in          IN movement.id_episode%TYPE DEFAULT NULL,
        id_episode_nin         IN BOOLEAN := TRUE,
        id_prof_request_in     IN movement.id_prof_request%TYPE DEFAULT NULL,
        id_prof_request_nin    IN BOOLEAN := TRUE,
        id_prof_move_in        IN movement.id_prof_move%TYPE DEFAULT NULL,
        id_prof_move_nin       IN BOOLEAN := TRUE,
        id_prof_receive_in     IN movement.id_prof_receive%TYPE DEFAULT NULL,
        id_prof_receive_nin    IN BOOLEAN := TRUE,
        flg_status_in          IN movement.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        id_prof_cancel_in      IN movement.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin     IN BOOLEAN := TRUE,
        id_necessity_in        IN movement.id_necessity%TYPE DEFAULT NULL,
        id_necessity_nin       IN BOOLEAN := TRUE,
        id_room_from_in        IN movement.id_room_from%TYPE DEFAULT NULL,
        id_room_from_nin       IN BOOLEAN := TRUE,
        id_room_to_in          IN movement.id_room_to%TYPE DEFAULT NULL,
        id_room_to_nin         IN BOOLEAN := TRUE,
        notes_cancel_in        IN movement.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin       IN BOOLEAN := TRUE,
        id_episode_write_in    IN movement.id_episode_write%TYPE DEFAULT NULL,
        id_episode_write_nin   IN BOOLEAN := TRUE,
        dt_req_tstz_in         IN movement.dt_req_tstz%TYPE DEFAULT NULL,
        dt_req_tstz_nin        IN BOOLEAN := TRUE,
        dt_begin_tstz_in       IN movement.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_nin      IN BOOLEAN := TRUE,
        dt_end_tstz_in         IN movement.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin        IN BOOLEAN := TRUE,
        dt_cancel_tstz_in      IN movement.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin     IN BOOLEAN := TRUE,
        create_user_in         IN movement.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN movement.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN movement.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN movement.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN movement.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN movement.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        flg_status_prev_in     IN movement.flg_status_prev%TYPE DEFAULT NULL,
        flg_status_prev_nin    IN BOOLEAN := TRUE,
        flg_mov_type_in        IN movement.flg_mov_type%TYPE DEFAULT NULL,
        flg_mov_type_nin       IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in          => id_episode_in,
            id_episode_nin         => id_episode_nin,
            id_prof_request_in     => id_prof_request_in,
            id_prof_request_nin    => id_prof_request_nin,
            id_prof_move_in        => id_prof_move_in,
            id_prof_move_nin       => id_prof_move_nin,
            id_prof_receive_in     => id_prof_receive_in,
            id_prof_receive_nin    => id_prof_receive_nin,
            flg_status_in          => flg_status_in,
            flg_status_nin         => flg_status_nin,
            id_prof_cancel_in      => id_prof_cancel_in,
            id_prof_cancel_nin     => id_prof_cancel_nin,
            id_necessity_in        => id_necessity_in,
            id_necessity_nin       => id_necessity_nin,
            id_room_from_in        => id_room_from_in,
            id_room_from_nin       => id_room_from_nin,
            id_room_to_in          => id_room_to_in,
            id_room_to_nin         => id_room_to_nin,
            notes_cancel_in        => notes_cancel_in,
            notes_cancel_nin       => notes_cancel_nin,
            id_episode_write_in    => id_episode_write_in,
            id_episode_write_nin   => id_episode_write_nin,
            dt_req_tstz_in         => dt_req_tstz_in,
            dt_req_tstz_nin        => dt_req_tstz_nin,
            dt_begin_tstz_in       => dt_begin_tstz_in,
            dt_begin_tstz_nin      => dt_begin_tstz_nin,
            dt_end_tstz_in         => dt_end_tstz_in,
            dt_end_tstz_nin        => dt_end_tstz_nin,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_cancel_tstz_nin     => dt_cancel_tstz_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            flg_status_prev_in     => flg_status_prev_in,
            flg_status_prev_nin    => flg_status_prev_nin,
            flg_mov_type_in        => flg_mov_type_in,
            flg_mov_type_nin       => flg_mov_type_nin,
            where_in               => where_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN movement%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_movement_in        => rec_in.id_movement,
            id_episode_in         => rec_in.id_episode,
            id_prof_request_in    => rec_in.id_prof_request,
            id_prof_move_in       => rec_in.id_prof_move,
            id_prof_receive_in    => rec_in.id_prof_receive,
            flg_status_in         => rec_in.flg_status,
            id_prof_cancel_in     => rec_in.id_prof_cancel,
            id_necessity_in       => rec_in.id_necessity,
            id_room_from_in       => rec_in.id_room_from,
            id_room_to_in         => rec_in.id_room_to,
            notes_cancel_in       => rec_in.notes_cancel,
            id_episode_write_in   => rec_in.id_episode_write,
            dt_req_tstz_in        => rec_in.dt_req_tstz,
            dt_begin_tstz_in      => rec_in.dt_begin_tstz,
            dt_end_tstz_in        => rec_in.dt_end_tstz,
            dt_cancel_tstz_in     => rec_in.dt_cancel_tstz,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            flg_status_prev_in    => rec_in.flg_status_prev,
            flg_mov_type_in       => rec_in.flg_mov_type
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN movement%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_movement_in        => rec_in.id_movement,
            id_episode_in         => rec_in.id_episode,
            id_prof_request_in    => rec_in.id_prof_request,
            id_prof_move_in       => rec_in.id_prof_move,
            id_prof_receive_in    => rec_in.id_prof_receive,
            flg_status_in         => rec_in.flg_status,
            id_prof_cancel_in     => rec_in.id_prof_cancel,
            id_necessity_in       => rec_in.id_necessity,
            id_room_from_in       => rec_in.id_room_from,
            id_room_to_in         => rec_in.id_room_to,
            notes_cancel_in       => rec_in.notes_cancel,
            id_episode_write_in   => rec_in.id_episode_write,
            dt_req_tstz_in        => rec_in.dt_req_tstz,
            dt_begin_tstz_in      => rec_in.dt_begin_tstz,
            dt_end_tstz_in        => rec_in.dt_end_tstz,
            dt_cancel_tstz_in     => rec_in.dt_cancel_tstz,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            flg_status_prev_in    => rec_in.flg_status_prev,
            flg_mov_type_in       => rec_in.flg_mov_type
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_movement_in        IN movement.id_movement%TYPE,
        id_episode_in         IN movement.id_episode%TYPE DEFAULT NULL,
        id_prof_request_in    IN movement.id_prof_request%TYPE DEFAULT NULL,
        id_prof_move_in       IN movement.id_prof_move%TYPE DEFAULT NULL,
        id_prof_receive_in    IN movement.id_prof_receive%TYPE DEFAULT NULL,
        flg_status_in         IN movement.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in     IN movement.id_prof_cancel%TYPE DEFAULT NULL,
        id_necessity_in       IN movement.id_necessity%TYPE DEFAULT NULL,
        id_room_from_in       IN movement.id_room_from%TYPE DEFAULT NULL,
        id_room_to_in         IN movement.id_room_to%TYPE DEFAULT NULL,
        notes_cancel_in       IN movement.notes_cancel%TYPE DEFAULT NULL,
        id_episode_write_in   IN movement.id_episode_write%TYPE DEFAULT NULL,
        dt_req_tstz_in        IN movement.dt_req_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in      IN movement.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in        IN movement.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in     IN movement.dt_cancel_tstz%TYPE DEFAULT NULL,
        create_user_in        IN movement.create_user%TYPE DEFAULT NULL,
        create_time_in        IN movement.create_time%TYPE DEFAULT NULL,
        create_institution_in IN movement.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN movement.update_user%TYPE DEFAULT NULL,
        update_time_in        IN movement.update_time%TYPE DEFAULT NULL,
        update_institution_in IN movement.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in    IN movement.flg_status_prev%TYPE DEFAULT NULL,
        flg_mov_type_in       IN movement.flg_mov_type%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        upd(id_movement_in        => id_movement_in,
            id_episode_in         => id_episode_in,
            id_prof_request_in    => id_prof_request_in,
            id_prof_move_in       => id_prof_move_in,
            id_prof_receive_in    => id_prof_receive_in,
            flg_status_in         => flg_status_in,
            id_prof_cancel_in     => id_prof_cancel_in,
            id_necessity_in       => id_necessity_in,
            id_room_from_in       => id_room_from_in,
            id_room_to_in         => id_room_to_in,
            notes_cancel_in       => notes_cancel_in,
            id_episode_write_in   => id_episode_write_in,
            dt_req_tstz_in        => dt_req_tstz_in,
            dt_begin_tstz_in      => dt_begin_tstz_in,
            dt_end_tstz_in        => dt_end_tstz_in,
            dt_cancel_tstz_in     => dt_cancel_tstz_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            flg_status_prev_in    => flg_status_prev_in,
            flg_mov_type_in       => flg_mov_type_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_movement_in        => id_movement_in,
                id_episode_in         => id_episode_in,
                id_prof_request_in    => id_prof_request_in,
                id_prof_move_in       => id_prof_move_in,
                id_prof_receive_in    => id_prof_receive_in,
                flg_status_in         => flg_status_in,
                id_prof_cancel_in     => id_prof_cancel_in,
                id_necessity_in       => id_necessity_in,
                id_room_from_in       => id_room_from_in,
                id_room_to_in         => id_room_to_in,
                notes_cancel_in       => notes_cancel_in,
                id_episode_write_in   => id_episode_write_in,
                dt_req_tstz_in        => dt_req_tstz_in,
                dt_begin_tstz_in      => dt_begin_tstz_in,
                dt_end_tstz_in        => dt_end_tstz_in,
                dt_cancel_tstz_in     => dt_cancel_tstz_in,
                create_user_in        => create_user_in,
                create_time_in        => create_time_in,
                create_institution_in => create_institution_in,
                update_user_in        => update_user_in,
                update_time_in        => update_time_in,
                update_institution_in => update_institution_in,
                flg_status_prev_in    => flg_status_prev_in,
                flg_mov_type_in       => flg_mov_type_in,
                handle_error_in       => handle_error_in,
                rows_out              => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_movement_in        IN movement.id_movement%TYPE,
        id_episode_in         IN movement.id_episode%TYPE DEFAULT NULL,
        id_prof_request_in    IN movement.id_prof_request%TYPE DEFAULT NULL,
        id_prof_move_in       IN movement.id_prof_move%TYPE DEFAULT NULL,
        id_prof_receive_in    IN movement.id_prof_receive%TYPE DEFAULT NULL,
        flg_status_in         IN movement.flg_status%TYPE DEFAULT NULL,
        id_prof_cancel_in     IN movement.id_prof_cancel%TYPE DEFAULT NULL,
        id_necessity_in       IN movement.id_necessity%TYPE DEFAULT NULL,
        id_room_from_in       IN movement.id_room_from%TYPE DEFAULT NULL,
        id_room_to_in         IN movement.id_room_to%TYPE DEFAULT NULL,
        notes_cancel_in       IN movement.notes_cancel%TYPE DEFAULT NULL,
        id_episode_write_in   IN movement.id_episode_write%TYPE DEFAULT NULL,
        dt_req_tstz_in        IN movement.dt_req_tstz%TYPE DEFAULT NULL,
        dt_begin_tstz_in      IN movement.dt_begin_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in        IN movement.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in     IN movement.dt_cancel_tstz%TYPE DEFAULT NULL,
        create_user_in        IN movement.create_user%TYPE DEFAULT NULL,
        create_time_in        IN movement.create_time%TYPE DEFAULT NULL,
        create_institution_in IN movement.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN movement.update_user%TYPE DEFAULT NULL,
        update_time_in        IN movement.update_time%TYPE DEFAULT NULL,
        update_institution_in IN movement.update_institution%TYPE DEFAULT NULL,
        flg_status_prev_in    IN movement.flg_status_prev%TYPE DEFAULT NULL,
        flg_mov_type_in       IN movement.flg_mov_type%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_movement_in,
                id_episode_in,
                id_prof_request_in,
                id_prof_move_in,
                id_prof_receive_in,
                flg_status_in,
                id_prof_cancel_in,
                id_necessity_in,
                id_room_from_in,
                id_room_to_in,
                notes_cancel_in,
                id_episode_write_in,
                dt_req_tstz_in,
                dt_begin_tstz_in,
                dt_end_tstz_in,
                dt_cancel_tstz_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                flg_status_prev_in,
                flg_mov_type_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN movement_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_movement        id_movement_cc;
        l_id_episode         id_episode_cc;
        l_id_prof_request    id_prof_request_cc;
        l_id_prof_move       id_prof_move_cc;
        l_id_prof_receive    id_prof_receive_cc;
        l_flg_status         flg_status_cc;
        l_id_prof_cancel     id_prof_cancel_cc;
        l_id_necessity       id_necessity_cc;
        l_id_room_from       id_room_from_cc;
        l_id_room_to         id_room_to_cc;
        l_notes_cancel       notes_cancel_cc;
        l_id_episode_write   id_episode_write_cc;
        l_dt_req_tstz        dt_req_tstz_cc;
        l_dt_begin_tstz      dt_begin_tstz_cc;
        l_dt_end_tstz        dt_end_tstz_cc;
        l_dt_cancel_tstz     dt_cancel_tstz_cc;
        l_create_user        create_user_cc;
        l_create_time        create_time_cc;
        l_create_institution create_institution_cc;
        l_update_user        update_user_cc;
        l_update_time        update_time_cc;
        l_update_institution update_institution_cc;
        l_flg_status_prev    flg_status_prev_cc;
        l_flg_mov_type       flg_mov_type_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_movement(i) := col_in(i).id_movement;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_prof_request(i) := col_in(i).id_prof_request;
            l_id_prof_move(i) := col_in(i).id_prof_move;
            l_id_prof_receive(i) := col_in(i).id_prof_receive;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_id_necessity(i) := col_in(i).id_necessity;
            l_id_room_from(i) := col_in(i).id_room_from;
            l_id_room_to(i) := col_in(i).id_room_to;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_id_episode_write(i) := col_in(i).id_episode_write;
            l_dt_req_tstz(i) := col_in(i).dt_req_tstz;
            l_dt_begin_tstz(i) := col_in(i).dt_begin_tstz;
            l_dt_end_tstz(i) := col_in(i).dt_end_tstz;
            l_dt_cancel_tstz(i) := col_in(i).dt_cancel_tstz;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_flg_status_prev(i) := col_in(i).flg_status_prev;
            l_flg_mov_type(i) := col_in(i).flg_mov_type;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE movement
                   SET id_episode         = nvl(l_id_episode(i), id_episode),
                       id_prof_request    = nvl(l_id_prof_request(i), id_prof_request),
                       id_prof_move       = nvl(l_id_prof_move(i), id_prof_move),
                       id_prof_receive    = nvl(l_id_prof_receive(i), id_prof_receive),
                       flg_status         = nvl(l_flg_status(i), flg_status),
                       id_prof_cancel     = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       id_necessity       = nvl(l_id_necessity(i), id_necessity),
                       id_room_from       = nvl(l_id_room_from(i), id_room_from),
                       id_room_to         = nvl(l_id_room_to(i), id_room_to),
                       notes_cancel       = nvl(l_notes_cancel(i), notes_cancel),
                       id_episode_write   = nvl(l_id_episode_write(i), id_episode_write),
                       dt_req_tstz        = nvl(l_dt_req_tstz(i), dt_req_tstz),
                       dt_begin_tstz      = nvl(l_dt_begin_tstz(i), dt_begin_tstz),
                       dt_end_tstz        = nvl(l_dt_end_tstz(i), dt_end_tstz),
                       dt_cancel_tstz     = nvl(l_dt_cancel_tstz(i), dt_cancel_tstz),
                       create_user        = nvl(l_create_user(i), create_user),
                       create_time        = nvl(l_create_time(i), create_time),
                       create_institution = nvl(l_create_institution(i), create_institution),
                       update_user        = nvl(l_update_user(i), update_user),
                       update_time        = nvl(l_update_time(i), update_time),
                       update_institution = nvl(l_update_institution(i), update_institution),
                       flg_status_prev    = nvl(l_flg_status_prev(i), flg_status_prev),
                       flg_mov_type       = nvl(l_flg_mov_type(i), flg_mov_type)
                 WHERE id_movement = l_id_movement(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE movement
                   SET id_episode         = l_id_episode(i),
                       id_prof_request    = l_id_prof_request(i),
                       id_prof_move       = l_id_prof_move(i),
                       id_prof_receive    = l_id_prof_receive(i),
                       flg_status         = l_flg_status(i),
                       id_prof_cancel     = l_id_prof_cancel(i),
                       id_necessity       = l_id_necessity(i),
                       id_room_from       = l_id_room_from(i),
                       id_room_to         = l_id_room_to(i),
                       notes_cancel       = l_notes_cancel(i),
                       id_episode_write   = l_id_episode_write(i),
                       dt_req_tstz        = l_dt_req_tstz(i),
                       dt_begin_tstz      = l_dt_begin_tstz(i),
                       dt_end_tstz        = l_dt_end_tstz(i),
                       dt_cancel_tstz     = l_dt_cancel_tstz(i),
                       create_user        = l_create_user(i),
                       create_time        = l_create_time(i),
                       create_institution = l_create_institution(i),
                       update_user        = l_update_user(i),
                       update_time        = l_update_time(i),
                       update_institution = l_update_institution(i),
                       flg_status_prev    = l_flg_status_prev(i),
                       flg_mov_type       = l_flg_mov_type(i)
                 WHERE id_movement = l_id_movement(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN movement_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE MOVEMENT
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE MOVEMENT
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE MOVEMENT set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE MOVEMENT set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_movement_in  IN movement.id_movement%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM movement
         WHERE id_movement = id_movement_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_movement_in  IN movement.id_movement%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_movement_in => id_movement_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_MOVEMENT
    PROCEDURE del_id_movement
    (
        id_movement_in  IN movement.id_movement%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM movement
         WHERE id_movement = id_movement_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_movement;

    -- Delete all rows for primary key column ID_MOVEMENT
    PROCEDURE del_id_movement
    (
        id_movement_in  IN movement.id_movement%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_movement(id_movement_in => id_movement_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_id_movement;

    PROCEDURE del_mov_epis_fk
    (
        id_episode_in   IN movement.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM movement
         WHERE id_episode = del_mov_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mov_epis_fk;

    PROCEDURE del_mov_epis_fk
    (
        id_episode_in   IN movement.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mov_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_mov_epis_fk;

    PROCEDURE del_mov_epis_write_fk
    (
        id_episode_write_in IN movement.id_episode_write%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM movement
         WHERE id_episode_write = del_mov_epis_write_fk.id_episode_write_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mov_epis_write_fk;

    PROCEDURE del_mov_epis_write_fk
    (
        id_episode_write_in IN movement.id_episode_write%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mov_epis_write_fk(id_episode_write_in => id_episode_write_in,
                              handle_error_in     => handle_error_in,
                              rows_out            => rows_out);
    END del_mov_epis_write_fk;

    PROCEDURE del_mov_prof_cancel_fk
    (
        id_prof_cancel_in IN movement.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM movement
         WHERE id_prof_cancel = del_mov_prof_cancel_fk.id_prof_cancel_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mov_prof_cancel_fk;

    PROCEDURE del_mov_prof_cancel_fk
    (
        id_prof_cancel_in IN movement.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mov_prof_cancel_fk(id_prof_cancel_in => id_prof_cancel_in,
                               handle_error_in   => handle_error_in,
                               rows_out          => rows_out);
    END del_mov_prof_cancel_fk;

    PROCEDURE del_mov_prof_move_fk
    (
        id_prof_move_in IN movement.id_prof_move%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM movement
         WHERE id_prof_move = del_mov_prof_move_fk.id_prof_move_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mov_prof_move_fk;

    PROCEDURE del_mov_prof_move_fk
    (
        id_prof_move_in IN movement.id_prof_move%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mov_prof_move_fk(id_prof_move_in => id_prof_move_in,
                             handle_error_in => handle_error_in,
                             rows_out        => rows_out);
    END del_mov_prof_move_fk;

    PROCEDURE del_mov_prof_receive_fk
    (
        id_prof_receive_in IN movement.id_prof_receive%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM movement
         WHERE id_prof_receive = del_mov_prof_receive_fk.id_prof_receive_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mov_prof_receive_fk;

    PROCEDURE del_mov_prof_receive_fk
    (
        id_prof_receive_in IN movement.id_prof_receive%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mov_prof_receive_fk(id_prof_receive_in => id_prof_receive_in,
                                handle_error_in    => handle_error_in,
                                rows_out           => rows_out);
    END del_mov_prof_receive_fk;

    PROCEDURE del_mov_prof_request_fk
    (
        id_prof_request_in IN movement.id_prof_request%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM movement
         WHERE id_prof_request = del_mov_prof_request_fk.id_prof_request_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mov_prof_request_fk;

    PROCEDURE del_mov_prof_request_fk
    (
        id_prof_request_in IN movement.id_prof_request%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mov_prof_request_fk(id_prof_request_in => id_prof_request_in,
                                handle_error_in    => handle_error_in,
                                rows_out           => rows_out);
    END del_mov_prof_request_fk;

    PROCEDURE del_mov_room_from_fk
    (
        id_room_from_in IN movement.id_room_from%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM movement
         WHERE id_room_from = del_mov_room_from_fk.id_room_from_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mov_room_from_fk;

    PROCEDURE del_mov_room_from_fk
    (
        id_room_from_in IN movement.id_room_from%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mov_room_from_fk(id_room_from_in => id_room_from_in,
                             handle_error_in => handle_error_in,
                             rows_out        => rows_out);
    END del_mov_room_from_fk;

    PROCEDURE del_mov_room_to_fk
    (
        id_room_to_in   IN movement.id_room_to%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM movement
         WHERE id_room_to = del_mov_room_to_fk.id_room_to_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mov_room_to_fk;

    PROCEDURE del_mov_room_to_fk
    (
        id_room_to_in   IN movement.id_room_to%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mov_room_to_fk(id_room_to_in => id_room_to_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_mov_room_to_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM MOVEMENT';
        ELSE
            RETURN 'DELETE FROM MOVEMENT WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MOVEMENT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MOVEMENT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(movement_inout IN OUT movement%ROWTYPE) IS
    BEGIN
        movement_inout.id_movement        := NULL;
        movement_inout.id_episode         := NULL;
        movement_inout.id_prof_request    := NULL;
        movement_inout.id_prof_move       := NULL;
        movement_inout.id_prof_receive    := NULL;
        movement_inout.flg_status         := NULL;
        movement_inout.id_prof_cancel     := NULL;
        movement_inout.id_necessity       := NULL;
        movement_inout.id_room_from       := NULL;
        movement_inout.id_room_to         := NULL;
        movement_inout.notes_cancel       := NULL;
        movement_inout.id_episode_write   := NULL;
        movement_inout.dt_req_tstz        := NULL;
        movement_inout.dt_begin_tstz      := NULL;
        movement_inout.dt_end_tstz        := NULL;
        movement_inout.dt_cancel_tstz     := NULL;
        movement_inout.create_user        := NULL;
        movement_inout.create_time        := NULL;
        movement_inout.create_institution := NULL;
        movement_inout.update_user        := NULL;
        movement_inout.update_time        := NULL;
        movement_inout.update_institution := NULL;
        movement_inout.flg_status_prev    := NULL;
        movement_inout.flg_mov_type       := NULL;
    END initrec;

    FUNCTION initrec RETURN movement%ROWTYPE IS
        l_movement movement%ROWTYPE;
    BEGIN
        RETURN l_movement;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN movement_tc IS
        data movement_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM movement
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN movement_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data movement_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_movement;
/
