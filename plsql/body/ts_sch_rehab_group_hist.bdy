/*-- Last Change Revision: $Rev: 1856163 $*/
/*-- Last Change by: $Author: diogo.oliveira $*/
/*-- Date of last change: $Date: 2018-07-24 10:24:14 +0100 (ter, 24 jul 2018) $*/
CREATE OR REPLACE PACKAGE BODY TS_SCH_REHAB_GROUP_HIST
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: January 7, 2013 12:10:56
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    PROCEDURE ins
    (
        id_schedule_in        IN sch_rehab_group_hist.id_schedule%TYPE DEFAULT NULL,
        id_rehab_group_in     IN sch_rehab_group_hist.id_rehab_group%TYPE DEFAULT NULL,
        create_user_in        IN sch_rehab_group_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sch_rehab_group_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sch_rehab_group_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sch_rehab_group_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sch_rehab_group_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sch_rehab_group_hist.update_institution%TYPE DEFAULT NULL,
        dt_update_in          IN sch_rehab_group_hist.dt_update%TYPE DEFAULT current_timestamp,
        id_prof_update_in     IN sch_rehab_group_hist.id_prof_update%TYPE DEFAULT NULL,
        id_rehab_sch_need_in  IN sch_rehab_group_hist.id_rehab_sch_need%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO sch_rehab_group_hist
            (id_schedule,
             id_rehab_group,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             dt_update,
             id_prof_update,
             id_rehab_sch_need)
        VALUES
            (id_schedule_in,
             id_rehab_group_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             dt_update_in,
             id_prof_update_in,
             id_rehab_sch_need_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_schedule_in        IN sch_rehab_group_hist.id_schedule%TYPE DEFAULT NULL,
        id_rehab_group_in     IN sch_rehab_group_hist.id_rehab_group%TYPE DEFAULT NULL,
        create_user_in        IN sch_rehab_group_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sch_rehab_group_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sch_rehab_group_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sch_rehab_group_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sch_rehab_group_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sch_rehab_group_hist.update_institution%TYPE DEFAULT NULL,
        dt_update_in          IN sch_rehab_group_hist.dt_update%TYPE DEFAULT current_timestamp,
        id_prof_update_in     IN sch_rehab_group_hist.id_prof_update%TYPE DEFAULT NULL,
        id_rehab_sch_need_in  IN sch_rehab_group_hist.id_rehab_sch_need%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_schedule_in        => id_schedule_in,
            id_rehab_group_in     => id_rehab_group_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            dt_update_in          => dt_update_in,
            id_prof_update_in     => id_prof_update_in,
            id_rehab_sch_need_in  => id_rehab_sch_need_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN sch_rehab_group_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec sch_rehab_group_hist%ROWTYPE := rec_in;
    BEGIN
    
        ins(id_schedule_in        => l_rec.id_schedule,
            id_rehab_group_in     => l_rec.id_rehab_group,
            create_user_in        => l_rec.create_user,
            create_time_in        => l_rec.create_time,
            create_institution_in => l_rec.create_institution,
            update_user_in        => l_rec.update_user,
            update_time_in        => l_rec.update_time,
            update_institution_in => l_rec.update_institution,
            dt_update_in          => l_rec.dt_update,
            id_prof_update_in     => l_rec.id_prof_update,
            id_rehab_sch_need_in  => l_rec.id_rehab_sch_need,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN sch_rehab_group_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN sch_rehab_group_hist_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO sch_rehab_group_hist
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN sch_rehab_group_hist_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_schedule_in         IN sch_rehab_group_hist.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin        IN BOOLEAN := TRUE,
        id_rehab_group_in      IN sch_rehab_group_hist.id_rehab_group%TYPE DEFAULT NULL,
        id_rehab_group_nin     IN BOOLEAN := TRUE,
        create_user_in         IN sch_rehab_group_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN sch_rehab_group_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN sch_rehab_group_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN sch_rehab_group_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN sch_rehab_group_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN sch_rehab_group_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        dt_update_in           IN sch_rehab_group_hist.dt_update%TYPE DEFAULT NULL,
        dt_update_nin          IN BOOLEAN := TRUE,
        id_prof_update_in      IN sch_rehab_group_hist.id_prof_update%TYPE DEFAULT NULL,
        id_prof_update_nin     IN BOOLEAN := TRUE,
        id_rehab_sch_need_in   IN sch_rehab_group_hist.id_rehab_sch_need%TYPE DEFAULT NULL,
        id_rehab_sch_need_nin  IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_rows_out             table_varchar;
        l_id_schedule_n        NUMBER(1) := sys.diutil.bool_to_int(id_schedule_nin);
        l_id_rehab_group_n     NUMBER(1) := sys.diutil.bool_to_int(id_rehab_group_nin);
        l_create_user_n        NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_dt_update_n          NUMBER(1) := sys.diutil.bool_to_int(dt_update_nin);
        l_id_prof_update_n     NUMBER(1) := sys.diutil.bool_to_int(id_prof_update_nin);
        l_id_rehab_sch_need_n  NUMBER(1) := sys.diutil.bool_to_int(id_rehab_sch_need_nin);
    BEGIN
    
        UPDATE sch_rehab_group_hist
           SET id_schedule        = decode(l_id_schedule_n, 0, id_schedule_in, nvl(id_schedule_in, id_schedule)),
               id_rehab_group     = decode(l_id_rehab_group_n,
                                           0,
                                           id_rehab_group_in,
                                           nvl(id_rehab_group_in, id_rehab_group)),
               create_user        = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time        = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution = decode(l_create_institution_n,
                                           0,
                                           create_institution_in,
                                           nvl(create_institution_in, create_institution)),
               update_user        = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time        = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution = decode(l_update_institution_n,
                                           0,
                                           update_institution_in,
                                           nvl(update_institution_in, update_institution)),
               dt_update          = decode(l_dt_update_n, 0, dt_update_in, nvl(dt_update_in, dt_update)),
               id_prof_update     = decode(l_id_prof_update_n,
                                           0,
                                           id_prof_update_in,
                                           nvl(id_prof_update_in, id_prof_update)),
               id_rehab_sch_need  = decode(l_id_rehab_sch_need_n,
                                           0,
                                           id_rehab_sch_need_in,
                                           nvl(id_rehab_sch_need_in, id_rehab_sch_need))
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_schedule_in         IN sch_rehab_group_hist.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin        IN BOOLEAN := TRUE,
        id_rehab_group_in      IN sch_rehab_group_hist.id_rehab_group%TYPE DEFAULT NULL,
        id_rehab_group_nin     IN BOOLEAN := TRUE,
        create_user_in         IN sch_rehab_group_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN sch_rehab_group_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN sch_rehab_group_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN sch_rehab_group_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN sch_rehab_group_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN sch_rehab_group_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        dt_update_in           IN sch_rehab_group_hist.dt_update%TYPE DEFAULT NULL,
        dt_update_nin          IN BOOLEAN := TRUE,
        id_prof_update_in      IN sch_rehab_group_hist.id_prof_update%TYPE DEFAULT NULL,
        id_prof_update_nin     IN BOOLEAN := TRUE,
        id_rehab_sch_need_in   IN sch_rehab_group_hist.id_rehab_sch_need%TYPE DEFAULT NULL,
        id_rehab_sch_need_nin  IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_schedule_in         => id_schedule_in,
            id_schedule_nin        => id_schedule_nin,
            id_rehab_group_in      => id_rehab_group_in,
            id_rehab_group_nin     => id_rehab_group_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            dt_update_in           => dt_update_in,
            dt_update_nin          => dt_update_nin,
            id_prof_update_in      => id_prof_update_in,
            id_prof_update_nin     => id_prof_update_nin,
            id_rehab_sch_need_in   => id_rehab_sch_need_in,
            id_rehab_sch_need_nin  => id_rehab_sch_need_nin,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_schedule_in         IN sch_rehab_group_hist.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin        IN BOOLEAN := TRUE,
        id_rehab_group_in      IN sch_rehab_group_hist.id_rehab_group%TYPE DEFAULT NULL,
        id_rehab_group_nin     IN BOOLEAN := TRUE,
        create_user_in         IN sch_rehab_group_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN sch_rehab_group_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN sch_rehab_group_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN sch_rehab_group_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN sch_rehab_group_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN sch_rehab_group_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        dt_update_in           IN sch_rehab_group_hist.dt_update%TYPE DEFAULT NULL,
        dt_update_nin          IN BOOLEAN := TRUE,
        id_prof_update_in      IN sch_rehab_group_hist.id_prof_update%TYPE DEFAULT NULL,
        id_prof_update_nin     IN BOOLEAN := TRUE,
        id_rehab_sch_need_in   IN sch_rehab_group_hist.id_rehab_sch_need%TYPE DEFAULT NULL,
        id_rehab_sch_need_nin  IN BOOLEAN := TRUE,
        where_in               IN VARCHAR2,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_sql                  VARCHAR2(32767);
        l_rows_out             table_varchar;
        l_id_schedule_n        NUMBER(1) := sys.diutil.bool_to_int(id_schedule_nin);
        l_id_rehab_group_n     NUMBER(1) := sys.diutil.bool_to_int(id_rehab_group_nin);
        l_create_user_n        NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_dt_update_n          NUMBER(1) := sys.diutil.bool_to_int(dt_update_nin);
        l_id_prof_update_n     NUMBER(1) := sys.diutil.bool_to_int(id_prof_update_nin);
        l_id_rehab_sch_need_n  NUMBER(1) := sys.diutil.bool_to_int(id_rehab_sch_need_nin);
    BEGIN
        l_id_schedule_n        := sys.diutil.bool_to_int(id_schedule_nin);
        l_id_rehab_group_n     := sys.diutil.bool_to_int(id_rehab_group_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_dt_update_n          := sys.diutil.bool_to_int(dt_update_nin);
        l_id_prof_update_n     := sys.diutil.bool_to_int(id_prof_update_nin);
        l_id_rehab_sch_need_n  := sys.diutil.bool_to_int(id_rehab_sch_need_nin);
        l_sql                  := 'UPDATE sch_rehab_group_hist SET' || ' ID_SCHEDULE = decode (' || l_id_schedule_n ||
                                  ',0,:ID_SCHEDULE_in, NVL (:ID_SCHEDULE_in, ID_SCHEDULE)) ' || ',' ||
                                  ' ID_REHAB_GROUP = decode (' || l_id_rehab_group_n ||
                                  ',0,:ID_REHAB_GROUP_in, NVL (:ID_REHAB_GROUP_in, ID_REHAB_GROUP)) ' || ',' ||
                                  ' CREATE_USER = decode (' || l_create_user_n ||
                                  ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                  ' CREATE_TIME = decode (' || l_create_time_n ||
                                  ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                  ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                  ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                  ' UPDATE_USER = decode (' || l_update_user_n ||
                                  ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                  ' UPDATE_TIME = decode (' || l_update_time_n ||
                                  ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                  ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                  ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                  ' DT_UPDATE = decode (' || l_dt_update_n ||
                                  ',0,:DT_UPDATE_in, NVL (:DT_UPDATE_in, DT_UPDATE)) ' || ',' ||
                                  ' ID_PROF_UPDATE = decode (' || l_id_prof_update_n ||
                                  ',0,:ID_PROF_UPDATE_in, NVL (:ID_PROF_UPDATE_in, ID_PROF_UPDATE)) ' || ',' ||
                                  ' ID_REHAB_SCH_NEED = decode (' || l_id_rehab_sch_need_n ||
                                  ',0,:ID_REHAB_SCH_NEED_in, NVL (:ID_REHAB_SCH_NEED_in, ID_REHAB_SCH_NEED)) ' ||
                                  ' where ' || nvl(where_in, '(1=1)') ||
                                  ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_schedule_in, id_rehab_group_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, dt_update_in, id_prof_update_in, id_rehab_sch_need_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_schedule_in         IN sch_rehab_group_hist.id_schedule%TYPE DEFAULT NULL,
        id_schedule_nin        IN BOOLEAN := TRUE,
        id_rehab_group_in      IN sch_rehab_group_hist.id_rehab_group%TYPE DEFAULT NULL,
        id_rehab_group_nin     IN BOOLEAN := TRUE,
        create_user_in         IN sch_rehab_group_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN sch_rehab_group_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN sch_rehab_group_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN sch_rehab_group_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN sch_rehab_group_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN sch_rehab_group_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        dt_update_in           IN sch_rehab_group_hist.dt_update%TYPE DEFAULT NULL,
        dt_update_nin          IN BOOLEAN := TRUE,
        id_prof_update_in      IN sch_rehab_group_hist.id_prof_update%TYPE DEFAULT NULL,
        id_prof_update_nin     IN BOOLEAN := TRUE,
        id_rehab_sch_need_in   IN sch_rehab_group_hist.id_rehab_sch_need%TYPE DEFAULT NULL,
        id_rehab_sch_need_nin  IN BOOLEAN := TRUE,
        where_in               IN VARCHAR2,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_schedule_in         => id_schedule_in,
            id_schedule_nin        => id_schedule_nin,
            id_rehab_group_in      => id_rehab_group_in,
            id_rehab_group_nin     => id_rehab_group_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            dt_update_in           => dt_update_in,
            dt_update_nin          => dt_update_nin,
            id_prof_update_in      => id_prof_update_in,
            id_prof_update_nin     => id_prof_update_nin,
            id_rehab_sch_need_in   => id_rehab_sch_need_in,
            id_rehab_sch_need_nin  => id_rehab_sch_need_nin,
            where_in               => where_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_schedule_in        IN sch_rehab_group_hist.id_schedule%TYPE DEFAULT NULL,
        id_rehab_group_in     IN sch_rehab_group_hist.id_rehab_group%TYPE DEFAULT NULL,
        create_user_in        IN sch_rehab_group_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sch_rehab_group_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sch_rehab_group_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sch_rehab_group_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sch_rehab_group_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sch_rehab_group_hist.update_institution%TYPE DEFAULT NULL,
        dt_update_in          IN sch_rehab_group_hist.dt_update%TYPE DEFAULT NULL,
        id_prof_update_in     IN sch_rehab_group_hist.id_prof_update%TYPE DEFAULT NULL,
        id_rehab_sch_need_in  IN sch_rehab_group_hist.id_rehab_sch_need%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_schedule_in        => id_schedule_in,
            id_rehab_group_in     => id_rehab_group_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            dt_update_in          => dt_update_in,
            id_prof_update_in     => id_prof_update_in,
            id_rehab_sch_need_in  => id_rehab_sch_need_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_schedule_in        => id_schedule_in,
                id_rehab_group_in     => id_rehab_group_in,
                create_user_in        => create_user_in,
                create_time_in        => create_time_in,
                create_institution_in => create_institution_in,
                update_user_in        => update_user_in,
                update_time_in        => update_time_in,
                update_institution_in => update_institution_in,
                dt_update_in          => dt_update_in,
                id_prof_update_in     => id_prof_update_in,
                id_rehab_sch_need_in  => id_rehab_sch_need_in,
                handle_error_in       => handle_error_in,
                rows_out              => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_schedule_in        IN sch_rehab_group_hist.id_schedule%TYPE DEFAULT NULL,
        id_rehab_group_in     IN sch_rehab_group_hist.id_rehab_group%TYPE DEFAULT NULL,
        create_user_in        IN sch_rehab_group_hist.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sch_rehab_group_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sch_rehab_group_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sch_rehab_group_hist.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sch_rehab_group_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sch_rehab_group_hist.update_institution%TYPE DEFAULT NULL,
        dt_update_in          IN sch_rehab_group_hist.dt_update%TYPE DEFAULT NULL,
        id_prof_update_in     IN sch_rehab_group_hist.id_prof_update%TYPE DEFAULT NULL,
        id_rehab_sch_need_in  IN sch_rehab_group_hist.id_rehab_sch_need%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_schedule_in,
                id_rehab_group_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                dt_update_in,
                id_prof_update_in,
                id_rehab_sch_need_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN sch_rehab_group_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_schedule_in        => rec_in.id_schedule,
            id_rehab_group_in     => rec_in.id_rehab_group,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            dt_update_in          => rec_in.dt_update,
            id_prof_update_in     => rec_in.id_prof_update,
            id_rehab_sch_need_in  => rec_in.id_rehab_sch_need,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN sch_rehab_group_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_schedule_in        => rec_in.id_schedule,
            id_rehab_group_in     => rec_in.id_rehab_group,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            dt_update_in          => rec_in.dt_update,
            id_prof_update_in     => rec_in.id_prof_update,
            id_rehab_sch_need_in  => rec_in.id_rehab_sch_need,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN sch_rehab_group_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_schedule        id_schedule_cc;
        l_id_rehab_group     id_rehab_group_cc;
        l_create_user        create_user_cc;
        l_create_time        create_time_cc;
        l_create_institution create_institution_cc;
        l_update_user        update_user_cc;
        l_update_time        update_time_cc;
        l_update_institution update_institution_cc;
        l_dt_update          dt_update_cc;
        l_id_prof_update     id_prof_update_cc;
        l_id_rehab_sch_need  id_rehab_sch_need_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_schedule(i) := col_in(i).id_schedule;
            l_id_rehab_group(i) := col_in(i).id_rehab_group;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_dt_update(i) := col_in(i).dt_update;
            l_id_prof_update(i) := col_in(i).id_prof_update;
            l_id_rehab_sch_need(i) := col_in(i).id_rehab_sch_need;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE sch_rehab_group_hist
                   SET id_schedule        = nvl(l_id_schedule(i), id_schedule),
                       id_rehab_group     = nvl(l_id_rehab_group(i), id_rehab_group),
                       create_user        = nvl(l_create_user(i), create_user),
                       create_time        = nvl(l_create_time(i), create_time),
                       create_institution = nvl(l_create_institution(i), create_institution),
                       update_user        = nvl(l_update_user(i), update_user),
                       update_time        = nvl(l_update_time(i), update_time),
                       update_institution = nvl(l_update_institution(i), update_institution),
                       dt_update          = nvl(l_dt_update(i), dt_update),
                       id_prof_update     = nvl(l_id_prof_update(i), id_prof_update),
                       id_rehab_sch_need  = nvl(l_id_rehab_sch_need(i), id_rehab_sch_need)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE sch_rehab_group_hist
                   SET id_schedule        = l_id_schedule(i),
                       id_rehab_group     = l_id_rehab_group(i),
                       create_user        = l_create_user(i),
                       create_time        = l_create_time(i),
                       create_institution = l_create_institution(i),
                       update_user        = l_update_user(i),
                       update_time        = l_update_time(i),
                       update_institution = l_update_institution(i),
                       dt_update          = l_dt_update(i),
                       id_prof_update     = l_id_prof_update(i),
                       id_rehab_sch_need  = l_id_rehab_sch_need(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN sch_rehab_group_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE sch_rehab_group_hist
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE sch_rehab_group_hist
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE sch_rehab_group_hist
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sch_rehab_group_hist
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del(handle_error_in IN BOOLEAN := TRUE) IS
        rows_out table_varchar;
    BEGIN
        del(handle_error_in => handle_error_in, rows_out => rows_out);
    END del;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM sch_rehab_group_hist';
        ELSE
            RETURN 'DELETE FROM sch_rehab_group_hist WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(sch_rehab_group_hist_inout IN OUT sch_rehab_group_hist%ROWTYPE) IS
    BEGIN
        sch_rehab_group_hist_inout.id_schedule        := NULL;
        sch_rehab_group_hist_inout.id_rehab_group     := NULL;
        sch_rehab_group_hist_inout.create_user        := NULL;
        sch_rehab_group_hist_inout.create_time        := NULL;
        sch_rehab_group_hist_inout.create_institution := NULL;
        sch_rehab_group_hist_inout.update_user        := NULL;
        sch_rehab_group_hist_inout.update_time        := NULL;
        sch_rehab_group_hist_inout.update_institution := NULL;
        sch_rehab_group_hist_inout.dt_update          := NULL;
        sch_rehab_group_hist_inout.id_prof_update     := NULL;
        sch_rehab_group_hist_inout.id_rehab_sch_need  := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN sch_rehab_group_hist%ROWTYPE IS
        l_sch_rehab_group_hist sch_rehab_group_hist%ROWTYPE;
    BEGIN
        RETURN l_sch_rehab_group_hist;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN sch_rehab_group_hist_tc IS
        data sch_rehab_group_hist_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM sch_rehab_group_hist
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN sch_rehab_group_hist_tc IS
        data sch_rehab_group_hist_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_sch_rehab_group_hist;
/
