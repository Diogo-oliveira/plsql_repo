/*-- Last Change Revision: $Rev: 482111 $*/
/*-- Last Change by: $Author: gustavo.serrano $*/
/*-- Date of last change: $Date: 2010-04-21 14:29:24 +0100 (qua, 21 abr 2010) $*/

CREATE OR REPLACE PACKAGE BODY ts_sr_pos_schedule
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Abril 15, 2010 15:17:7
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_sr_pos_schedule_in IN sr_pos_schedule.id_sr_pos_schedule%TYPE,
        id_sr_pos_status_in   IN sr_pos_schedule.id_sr_pos_status%TYPE DEFAULT NULL,
        id_schedule_sr_in     IN sr_pos_schedule.id_schedule_sr%TYPE DEFAULT NULL,
        flg_status_in         IN sr_pos_schedule.flg_status%TYPE DEFAULT NULL,
        id_prof_reg_in        IN sr_pos_schedule.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in             IN sr_pos_schedule.dt_reg%TYPE DEFAULT NULL,
        create_user_in        IN sr_pos_schedule.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sr_pos_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sr_pos_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sr_pos_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sr_pos_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sr_pos_schedule.update_institution%TYPE DEFAULT NULL,
        dt_pos_suggested_in   IN sr_pos_schedule.dt_pos_suggested%TYPE DEFAULT NULL,
        req_notes_in          IN sr_pos_schedule.req_notes%TYPE DEFAULT NULL,
        id_prof_req_in        IN sr_pos_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in             IN sr_pos_schedule.dt_req%TYPE DEFAULT NULL,
        dt_valid_in           IN sr_pos_schedule.dt_valid%TYPE DEFAULT NULL,
        valid_days_in         IN sr_pos_schedule.valid_days%TYPE DEFAULT NULL,
        decision_notes_in     IN sr_pos_schedule.decision_notes%TYPE DEFAULT NULL,
        id_prof_decision_in   IN sr_pos_schedule.id_prof_decision%TYPE DEFAULT NULL,
        dt_decision_in        IN sr_pos_schedule.dt_decision%TYPE DEFAULT NULL,
        id_pos_consult_req_in IN sr_pos_schedule.id_pos_consult_req%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO sr_pos_schedule
            (id_sr_pos_schedule,
             id_sr_pos_status,
             id_schedule_sr,
             flg_status,
             id_prof_reg,
             dt_reg,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             dt_pos_suggested,
             req_notes,
             id_prof_req,
             dt_req,
             dt_valid,
             valid_days,
             decision_notes,
             id_prof_decision,
             dt_decision,
             id_pos_consult_req)
        VALUES
            (id_sr_pos_schedule_in,
             id_sr_pos_status_in,
             id_schedule_sr_in,
             flg_status_in,
             id_prof_reg_in,
             dt_reg_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             dt_pos_suggested_in,
             req_notes_in,
             id_prof_req_in,
             dt_req_in,
             dt_valid_in,
             valid_days_in,
             decision_notes_in,
             id_prof_decision_in,
             dt_decision_in,
             id_pos_consult_req_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'SR_POS_SCHEDULE');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    IF l_name = 'SPSC_CREQ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_POS_CONSULT_REQ',
                                                        value_in           => id_pos_consult_req_in);
                    END IF;
                    IF l_name = 'SPSC_DPRF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_DECISION',
                                                        value_in           => id_prof_decision_in);
                    END IF;
                    IF l_name = 'SPSC_RGPRF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_REG',
                                                        value_in           => id_prof_reg_in);
                    END IF;
                    IF l_name = 'SPSC_RQPRF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_REQ',
                                                        value_in           => id_prof_req_in);
                    END IF;
                    IF l_name = 'SPSC_SCHR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE_SR',
                                                        value_in           => id_schedule_sr_in);
                    END IF;
                    IF l_name = 'SPSC_SPST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SR_POS_STATUS',
                                                        value_in           => id_sr_pos_status_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_sr_pos_schedule_in IN sr_pos_schedule.id_sr_pos_schedule%TYPE,
        id_sr_pos_status_in   IN sr_pos_schedule.id_sr_pos_status%TYPE DEFAULT NULL,
        id_schedule_sr_in     IN sr_pos_schedule.id_schedule_sr%TYPE DEFAULT NULL,
        flg_status_in         IN sr_pos_schedule.flg_status%TYPE DEFAULT NULL,
        id_prof_reg_in        IN sr_pos_schedule.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in             IN sr_pos_schedule.dt_reg%TYPE DEFAULT NULL,
        create_user_in        IN sr_pos_schedule.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sr_pos_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sr_pos_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sr_pos_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sr_pos_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sr_pos_schedule.update_institution%TYPE DEFAULT NULL,
        dt_pos_suggested_in   IN sr_pos_schedule.dt_pos_suggested%TYPE DEFAULT NULL,
        req_notes_in          IN sr_pos_schedule.req_notes%TYPE DEFAULT NULL,
        id_prof_req_in        IN sr_pos_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in             IN sr_pos_schedule.dt_req%TYPE DEFAULT NULL,
        dt_valid_in           IN sr_pos_schedule.dt_valid%TYPE DEFAULT NULL,
        valid_days_in         IN sr_pos_schedule.valid_days%TYPE DEFAULT NULL,
        decision_notes_in     IN sr_pos_schedule.decision_notes%TYPE DEFAULT NULL,
        id_prof_decision_in   IN sr_pos_schedule.id_prof_decision%TYPE DEFAULT NULL,
        dt_decision_in        IN sr_pos_schedule.dt_decision%TYPE DEFAULT NULL,
        id_pos_consult_req_in IN sr_pos_schedule.id_pos_consult_req%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_sr_pos_schedule_in => id_sr_pos_schedule_in,
            id_sr_pos_status_in   => id_sr_pos_status_in,
            id_schedule_sr_in     => id_schedule_sr_in,
            flg_status_in         => flg_status_in,
            id_prof_reg_in        => id_prof_reg_in,
            dt_reg_in             => dt_reg_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            dt_pos_suggested_in   => dt_pos_suggested_in,
            req_notes_in          => req_notes_in,
            id_prof_req_in        => id_prof_req_in,
            dt_req_in             => dt_req_in,
            dt_valid_in           => dt_valid_in,
            valid_days_in         => valid_days_in,
            decision_notes_in     => decision_notes_in,
            id_prof_decision_in   => id_prof_decision_in,
            dt_decision_in        => dt_decision_in,
            id_pos_consult_req_in => id_pos_consult_req_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN sr_pos_schedule%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec sr_pos_schedule%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_sr_pos_schedule := next_key(sequence_in);
        END IF;
        ins(id_sr_pos_schedule_in => l_rec.id_sr_pos_schedule,
            id_sr_pos_status_in   => l_rec.id_sr_pos_status,
            id_schedule_sr_in     => l_rec.id_schedule_sr,
            flg_status_in         => l_rec.flg_status,
            id_prof_reg_in        => l_rec.id_prof_reg,
            dt_reg_in             => l_rec.dt_reg,
            create_user_in        => l_rec.create_user,
            create_time_in        => l_rec.create_time,
            create_institution_in => l_rec.create_institution,
            update_user_in        => l_rec.update_user,
            update_time_in        => l_rec.update_time,
            update_institution_in => l_rec.update_institution,
            dt_pos_suggested_in   => l_rec.dt_pos_suggested,
            req_notes_in          => l_rec.req_notes,
            id_prof_req_in        => l_rec.id_prof_req,
            dt_req_in             => l_rec.dt_req,
            dt_valid_in           => l_rec.dt_valid,
            valid_days_in         => l_rec.valid_days,
            decision_notes_in     => l_rec.decision_notes,
            id_prof_decision_in   => l_rec.id_prof_decision,
            dt_decision_in        => l_rec.dt_decision,
            id_pos_consult_req_in => l_rec.id_pos_consult_req,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN sr_pos_schedule%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN sr_pos_schedule.id_sr_pos_schedule%TYPE
    
     IS
        retval sr_pos_schedule.id_sr_pos_schedule%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_sr_pos_schedule.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_SR_POS_SCHEDULE'));
    END next_key;

    PROCEDURE ins
    (
        id_sr_pos_status_in    IN sr_pos_schedule.id_sr_pos_status%TYPE DEFAULT NULL,
        id_schedule_sr_in      IN sr_pos_schedule.id_schedule_sr%TYPE DEFAULT NULL,
        flg_status_in          IN sr_pos_schedule.flg_status%TYPE DEFAULT NULL,
        id_prof_reg_in         IN sr_pos_schedule.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in              IN sr_pos_schedule.dt_reg%TYPE DEFAULT NULL,
        create_user_in         IN sr_pos_schedule.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sr_pos_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sr_pos_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sr_pos_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sr_pos_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sr_pos_schedule.update_institution%TYPE DEFAULT NULL,
        dt_pos_suggested_in    IN sr_pos_schedule.dt_pos_suggested%TYPE DEFAULT NULL,
        req_notes_in           IN sr_pos_schedule.req_notes%TYPE DEFAULT NULL,
        id_prof_req_in         IN sr_pos_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in              IN sr_pos_schedule.dt_req%TYPE DEFAULT NULL,
        dt_valid_in            IN sr_pos_schedule.dt_valid%TYPE DEFAULT NULL,
        valid_days_in          IN sr_pos_schedule.valid_days%TYPE DEFAULT NULL,
        decision_notes_in      IN sr_pos_schedule.decision_notes%TYPE DEFAULT NULL,
        id_prof_decision_in    IN sr_pos_schedule.id_prof_decision%TYPE DEFAULT NULL,
        dt_decision_in         IN sr_pos_schedule.dt_decision%TYPE DEFAULT NULL,
        id_pos_consult_req_in  IN sr_pos_schedule.id_pos_consult_req%TYPE DEFAULT NULL,
        id_sr_pos_schedule_out IN OUT sr_pos_schedule.id_sr_pos_schedule%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky sr_pos_schedule.id_sr_pos_schedule%TYPE := next_key;
    BEGIN
        ins(id_sr_pos_schedule_in => l_pky,
            id_sr_pos_status_in   => id_sr_pos_status_in,
            id_schedule_sr_in     => id_schedule_sr_in,
            flg_status_in         => flg_status_in,
            id_prof_reg_in        => id_prof_reg_in,
            dt_reg_in             => dt_reg_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            dt_pos_suggested_in   => dt_pos_suggested_in,
            req_notes_in          => req_notes_in,
            id_prof_req_in        => id_prof_req_in,
            dt_req_in             => dt_req_in,
            dt_valid_in           => dt_valid_in,
            valid_days_in         => valid_days_in,
            decision_notes_in     => decision_notes_in,
            id_prof_decision_in   => id_prof_decision_in,
            dt_decision_in        => dt_decision_in,
            id_pos_consult_req_in => id_pos_consult_req_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        id_sr_pos_schedule_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_sr_pos_status_in    IN sr_pos_schedule.id_sr_pos_status%TYPE DEFAULT NULL,
        id_schedule_sr_in      IN sr_pos_schedule.id_schedule_sr%TYPE DEFAULT NULL,
        flg_status_in          IN sr_pos_schedule.flg_status%TYPE DEFAULT NULL,
        id_prof_reg_in         IN sr_pos_schedule.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in              IN sr_pos_schedule.dt_reg%TYPE DEFAULT NULL,
        create_user_in         IN sr_pos_schedule.create_user%TYPE DEFAULT NULL,
        create_time_in         IN sr_pos_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN sr_pos_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN sr_pos_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in         IN sr_pos_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN sr_pos_schedule.update_institution%TYPE DEFAULT NULL,
        dt_pos_suggested_in    IN sr_pos_schedule.dt_pos_suggested%TYPE DEFAULT NULL,
        req_notes_in           IN sr_pos_schedule.req_notes%TYPE DEFAULT NULL,
        id_prof_req_in         IN sr_pos_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in              IN sr_pos_schedule.dt_req%TYPE DEFAULT NULL,
        dt_valid_in            IN sr_pos_schedule.dt_valid%TYPE DEFAULT NULL,
        valid_days_in          IN sr_pos_schedule.valid_days%TYPE DEFAULT NULL,
        decision_notes_in      IN sr_pos_schedule.decision_notes%TYPE DEFAULT NULL,
        id_prof_decision_in    IN sr_pos_schedule.id_prof_decision%TYPE DEFAULT NULL,
        dt_decision_in         IN sr_pos_schedule.dt_decision%TYPE DEFAULT NULL,
        id_pos_consult_req_in  IN sr_pos_schedule.id_pos_consult_req%TYPE DEFAULT NULL,
        id_sr_pos_schedule_out IN OUT sr_pos_schedule.id_sr_pos_schedule%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_sr_pos_status_in    => id_sr_pos_status_in,
            id_schedule_sr_in      => id_schedule_sr_in,
            flg_status_in          => flg_status_in,
            id_prof_reg_in         => id_prof_reg_in,
            dt_reg_in              => dt_reg_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            dt_pos_suggested_in    => dt_pos_suggested_in,
            req_notes_in           => req_notes_in,
            id_prof_req_in         => id_prof_req_in,
            dt_req_in              => dt_req_in,
            dt_valid_in            => dt_valid_in,
            valid_days_in          => valid_days_in,
            decision_notes_in      => decision_notes_in,
            id_prof_decision_in    => id_prof_decision_in,
            dt_decision_in         => dt_decision_in,
            id_pos_consult_req_in  => id_pos_consult_req_in,
            id_sr_pos_schedule_out => id_sr_pos_schedule_out,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    FUNCTION ins
    (
        id_sr_pos_status_in   IN sr_pos_schedule.id_sr_pos_status%TYPE DEFAULT NULL,
        id_schedule_sr_in     IN sr_pos_schedule.id_schedule_sr%TYPE DEFAULT NULL,
        flg_status_in         IN sr_pos_schedule.flg_status%TYPE DEFAULT NULL,
        id_prof_reg_in        IN sr_pos_schedule.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in             IN sr_pos_schedule.dt_reg%TYPE DEFAULT NULL,
        create_user_in        IN sr_pos_schedule.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sr_pos_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sr_pos_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sr_pos_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sr_pos_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sr_pos_schedule.update_institution%TYPE DEFAULT NULL,
        dt_pos_suggested_in   IN sr_pos_schedule.dt_pos_suggested%TYPE DEFAULT NULL,
        req_notes_in          IN sr_pos_schedule.req_notes%TYPE DEFAULT NULL,
        id_prof_req_in        IN sr_pos_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in             IN sr_pos_schedule.dt_req%TYPE DEFAULT NULL,
        dt_valid_in           IN sr_pos_schedule.dt_valid%TYPE DEFAULT NULL,
        valid_days_in         IN sr_pos_schedule.valid_days%TYPE DEFAULT NULL,
        decision_notes_in     IN sr_pos_schedule.decision_notes%TYPE DEFAULT NULL,
        id_prof_decision_in   IN sr_pos_schedule.id_prof_decision%TYPE DEFAULT NULL,
        dt_decision_in        IN sr_pos_schedule.dt_decision%TYPE DEFAULT NULL,
        id_pos_consult_req_in IN sr_pos_schedule.id_pos_consult_req%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) RETURN sr_pos_schedule.id_sr_pos_schedule%TYPE IS
        l_pky sr_pos_schedule.id_sr_pos_schedule%TYPE := next_key;
    BEGIN
        ins(id_sr_pos_schedule_in => l_pky,
            id_sr_pos_status_in   => id_sr_pos_status_in,
            id_schedule_sr_in     => id_schedule_sr_in,
            flg_status_in         => flg_status_in,
            id_prof_reg_in        => id_prof_reg_in,
            dt_reg_in             => dt_reg_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            dt_pos_suggested_in   => dt_pos_suggested_in,
            req_notes_in          => req_notes_in,
            id_prof_req_in        => id_prof_req_in,
            dt_req_in             => dt_req_in,
            dt_valid_in           => dt_valid_in,
            valid_days_in         => valid_days_in,
            decision_notes_in     => decision_notes_in,
            id_prof_decision_in   => id_prof_decision_in,
            dt_decision_in        => dt_decision_in,
            id_pos_consult_req_in => id_pos_consult_req_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_sr_pos_status_in   IN sr_pos_schedule.id_sr_pos_status%TYPE DEFAULT NULL,
        id_schedule_sr_in     IN sr_pos_schedule.id_schedule_sr%TYPE DEFAULT NULL,
        flg_status_in         IN sr_pos_schedule.flg_status%TYPE DEFAULT NULL,
        id_prof_reg_in        IN sr_pos_schedule.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in             IN sr_pos_schedule.dt_reg%TYPE DEFAULT NULL,
        create_user_in        IN sr_pos_schedule.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sr_pos_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sr_pos_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sr_pos_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sr_pos_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sr_pos_schedule.update_institution%TYPE DEFAULT NULL,
        dt_pos_suggested_in   IN sr_pos_schedule.dt_pos_suggested%TYPE DEFAULT NULL,
        req_notes_in          IN sr_pos_schedule.req_notes%TYPE DEFAULT NULL,
        id_prof_req_in        IN sr_pos_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in             IN sr_pos_schedule.dt_req%TYPE DEFAULT NULL,
        dt_valid_in           IN sr_pos_schedule.dt_valid%TYPE DEFAULT NULL,
        valid_days_in         IN sr_pos_schedule.valid_days%TYPE DEFAULT NULL,
        decision_notes_in     IN sr_pos_schedule.decision_notes%TYPE DEFAULT NULL,
        id_prof_decision_in   IN sr_pos_schedule.id_prof_decision%TYPE DEFAULT NULL,
        dt_decision_in        IN sr_pos_schedule.dt_decision%TYPE DEFAULT NULL,
        id_pos_consult_req_in IN sr_pos_schedule.id_pos_consult_req%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) RETURN sr_pos_schedule.id_sr_pos_schedule%TYPE IS
        l_pky    sr_pos_schedule.id_sr_pos_schedule%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_sr_pos_schedule_in => l_pky,
            id_sr_pos_status_in   => id_sr_pos_status_in,
            id_schedule_sr_in     => id_schedule_sr_in,
            flg_status_in         => flg_status_in,
            id_prof_reg_in        => id_prof_reg_in,
            dt_reg_in             => dt_reg_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            dt_pos_suggested_in   => dt_pos_suggested_in,
            req_notes_in          => req_notes_in,
            id_prof_req_in        => id_prof_req_in,
            dt_req_in             => dt_req_in,
            dt_valid_in           => dt_valid_in,
            valid_days_in         => valid_days_in,
            decision_notes_in     => decision_notes_in,
            id_prof_decision_in   => id_prof_decision_in,
            dt_decision_in        => dt_decision_in,
            id_pos_consult_req_in => id_pos_consult_req_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_sr_pos_status_in   IN sr_pos_schedule.id_sr_pos_status%TYPE DEFAULT NULL,
        id_schedule_sr_in     IN sr_pos_schedule.id_schedule_sr%TYPE DEFAULT NULL,
        flg_status_in         IN sr_pos_schedule.flg_status%TYPE DEFAULT NULL,
        id_prof_reg_in        IN sr_pos_schedule.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in             IN sr_pos_schedule.dt_reg%TYPE DEFAULT NULL,
        create_user_in        IN sr_pos_schedule.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sr_pos_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sr_pos_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sr_pos_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sr_pos_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sr_pos_schedule.update_institution%TYPE DEFAULT NULL,
        dt_pos_suggested_in   IN sr_pos_schedule.dt_pos_suggested%TYPE DEFAULT NULL,
        req_notes_in          IN sr_pos_schedule.req_notes%TYPE DEFAULT NULL,
        id_prof_req_in        IN sr_pos_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in             IN sr_pos_schedule.dt_req%TYPE DEFAULT NULL,
        dt_valid_in           IN sr_pos_schedule.dt_valid%TYPE DEFAULT NULL,
        valid_days_in         IN sr_pos_schedule.valid_days%TYPE DEFAULT NULL,
        decision_notes_in     IN sr_pos_schedule.decision_notes%TYPE DEFAULT NULL,
        id_prof_decision_in   IN sr_pos_schedule.id_prof_decision%TYPE DEFAULT NULL,
        dt_decision_in        IN sr_pos_schedule.dt_decision%TYPE DEFAULT NULL,
        id_pos_consult_req_in IN sr_pos_schedule.id_pos_consult_req%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
        l_pky sr_pos_schedule.id_sr_pos_schedule%TYPE := next_key;
    BEGIN
        ins(id_sr_pos_schedule_in => l_pky,
            id_sr_pos_status_in   => id_sr_pos_status_in,
            id_schedule_sr_in     => id_schedule_sr_in,
            flg_status_in         => flg_status_in,
            id_prof_reg_in        => id_prof_reg_in,
            dt_reg_in             => dt_reg_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            dt_pos_suggested_in   => dt_pos_suggested_in,
            req_notes_in          => req_notes_in,
            id_prof_req_in        => id_prof_req_in,
            dt_req_in             => dt_req_in,
            dt_valid_in           => dt_valid_in,
            valid_days_in         => valid_days_in,
            decision_notes_in     => decision_notes_in,
            id_prof_decision_in   => id_prof_decision_in,
            dt_decision_in        => dt_decision_in,
            id_pos_consult_req_in => id_pos_consult_req_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_sr_pos_status_in   IN sr_pos_schedule.id_sr_pos_status%TYPE DEFAULT NULL,
        id_schedule_sr_in     IN sr_pos_schedule.id_schedule_sr%TYPE DEFAULT NULL,
        flg_status_in         IN sr_pos_schedule.flg_status%TYPE DEFAULT NULL,
        id_prof_reg_in        IN sr_pos_schedule.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in             IN sr_pos_schedule.dt_reg%TYPE DEFAULT NULL,
        create_user_in        IN sr_pos_schedule.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sr_pos_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sr_pos_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sr_pos_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sr_pos_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sr_pos_schedule.update_institution%TYPE DEFAULT NULL,
        dt_pos_suggested_in   IN sr_pos_schedule.dt_pos_suggested%TYPE DEFAULT NULL,
        req_notes_in          IN sr_pos_schedule.req_notes%TYPE DEFAULT NULL,
        id_prof_req_in        IN sr_pos_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in             IN sr_pos_schedule.dt_req%TYPE DEFAULT NULL,
        dt_valid_in           IN sr_pos_schedule.dt_valid%TYPE DEFAULT NULL,
        valid_days_in         IN sr_pos_schedule.valid_days%TYPE DEFAULT NULL,
        decision_notes_in     IN sr_pos_schedule.decision_notes%TYPE DEFAULT NULL,
        id_prof_decision_in   IN sr_pos_schedule.id_prof_decision%TYPE DEFAULT NULL,
        dt_decision_in        IN sr_pos_schedule.dt_decision%TYPE DEFAULT NULL,
        id_pos_consult_req_in IN sr_pos_schedule.id_pos_consult_req%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        l_pky    sr_pos_schedule.id_sr_pos_schedule%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_sr_pos_schedule_in => l_pky,
            id_sr_pos_status_in   => id_sr_pos_status_in,
            id_schedule_sr_in     => id_schedule_sr_in,
            flg_status_in         => flg_status_in,
            id_prof_reg_in        => id_prof_reg_in,
            dt_reg_in             => dt_reg_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            dt_pos_suggested_in   => dt_pos_suggested_in,
            req_notes_in          => req_notes_in,
            id_prof_req_in        => id_prof_req_in,
            dt_req_in             => dt_req_in,
            dt_valid_in           => dt_valid_in,
            valid_days_in         => valid_days_in,
            decision_notes_in     => decision_notes_in,
            id_prof_decision_in   => id_prof_decision_in,
            dt_decision_in        => dt_decision_in,
            id_pos_consult_req_in => id_pos_consult_req_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN sr_pos_schedule_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO sr_pos_schedule
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SR_POS_SCHEDULE _' || indx,
                                                        value_in           => rows_in(indx).id_sr_pos_schedule,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SR_POS_STATUS _' || indx,
                                                        value_in           => rows_in(indx).id_sr_pos_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SCHEDULE_SR _' || indx,
                                                        value_in           => rows_in(indx).id_schedule_sr,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_REG _' || indx,
                                                        value_in           => rows_in(indx).id_prof_reg,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_REG _' || indx,
                                                        value_in           => rows_in(indx).dt_reg,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_POS_SUGGESTED _' || indx,
                                                        value_in           => rows_in(indx).dt_pos_suggested,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'REQ_NOTES _' || indx,
                                                        value_in           => rows_in(indx).req_notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_REQ _' || indx,
                                                        value_in           => rows_in(indx).id_prof_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_REQ _' || indx,
                                                        value_in           => rows_in(indx).dt_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_VALID _' || indx,
                                                        value_in           => rows_in(indx).dt_valid,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'VALID_DAYS _' || indx,
                                                        value_in           => rows_in(indx).valid_days,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DECISION_NOTES _' || indx,
                                                        value_in           => rows_in(indx).decision_notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_DECISION _' || indx,
                                                        value_in           => rows_in(indx).id_prof_decision,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_DECISION _' || indx,
                                                        value_in           => rows_in(indx).dt_decision,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_POS_CONSULT_REQ _' || indx,
                                                        value_in           => rows_in(indx).id_pos_consult_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'SR_POS_SCHEDULE',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN sr_pos_schedule_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_sr_pos_schedule_in  IN sr_pos_schedule.id_sr_pos_schedule%TYPE,
        id_sr_pos_status_in    IN sr_pos_schedule.id_sr_pos_status%TYPE DEFAULT NULL,
        id_sr_pos_status_nin   IN BOOLEAN := TRUE,
        id_schedule_sr_in      IN sr_pos_schedule.id_schedule_sr%TYPE DEFAULT NULL,
        id_schedule_sr_nin     IN BOOLEAN := TRUE,
        flg_status_in          IN sr_pos_schedule.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        id_prof_reg_in         IN sr_pos_schedule.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_reg_nin        IN BOOLEAN := TRUE,
        dt_reg_in              IN sr_pos_schedule.dt_reg%TYPE DEFAULT NULL,
        dt_reg_nin             IN BOOLEAN := TRUE,
        create_user_in         IN sr_pos_schedule.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN sr_pos_schedule.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN sr_pos_schedule.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN sr_pos_schedule.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN sr_pos_schedule.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN sr_pos_schedule.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        dt_pos_suggested_in    IN sr_pos_schedule.dt_pos_suggested%TYPE DEFAULT NULL,
        dt_pos_suggested_nin   IN BOOLEAN := TRUE,
        req_notes_in           IN sr_pos_schedule.req_notes%TYPE DEFAULT NULL,
        req_notes_nin          IN BOOLEAN := TRUE,
        id_prof_req_in         IN sr_pos_schedule.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin        IN BOOLEAN := TRUE,
        dt_req_in              IN sr_pos_schedule.dt_req%TYPE DEFAULT NULL,
        dt_req_nin             IN BOOLEAN := TRUE,
        dt_valid_in            IN sr_pos_schedule.dt_valid%TYPE DEFAULT NULL,
        dt_valid_nin           IN BOOLEAN := TRUE,
        valid_days_in          IN sr_pos_schedule.valid_days%TYPE DEFAULT NULL,
        valid_days_nin         IN BOOLEAN := TRUE,
        decision_notes_in      IN sr_pos_schedule.decision_notes%TYPE DEFAULT NULL,
        decision_notes_nin     IN BOOLEAN := TRUE,
        id_prof_decision_in    IN sr_pos_schedule.id_prof_decision%TYPE DEFAULT NULL,
        id_prof_decision_nin   IN BOOLEAN := TRUE,
        dt_decision_in         IN sr_pos_schedule.dt_decision%TYPE DEFAULT NULL,
        dt_decision_nin        IN BOOLEAN := TRUE,
        id_pos_consult_req_in  IN sr_pos_schedule.id_pos_consult_req%TYPE DEFAULT NULL,
        id_pos_consult_req_nin IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_rows_out             table_varchar;
        l_id_sr_pos_status_n   NUMBER(1);
        l_id_schedule_sr_n     NUMBER(1);
        l_flg_status_n         NUMBER(1);
        l_id_prof_reg_n        NUMBER(1);
        l_dt_reg_n             NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
        l_dt_pos_suggested_n   NUMBER(1);
        l_req_notes_n          NUMBER(1);
        l_id_prof_req_n        NUMBER(1);
        l_dt_req_n             NUMBER(1);
        l_dt_valid_n           NUMBER(1);
        l_valid_days_n         NUMBER(1);
        l_decision_notes_n     NUMBER(1);
        l_id_prof_decision_n   NUMBER(1);
        l_dt_decision_n        NUMBER(1);
        l_id_pos_consult_req_n NUMBER(1);
    BEGIN
    
        l_id_sr_pos_status_n   := sys.diutil.bool_to_int(id_sr_pos_status_nin);
        l_id_schedule_sr_n     := sys.diutil.bool_to_int(id_schedule_sr_nin);
        l_flg_status_n         := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_reg_n        := sys.diutil.bool_to_int(id_prof_reg_nin);
        l_dt_reg_n             := sys.diutil.bool_to_int(dt_reg_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_dt_pos_suggested_n   := sys.diutil.bool_to_int(dt_pos_suggested_nin);
        l_req_notes_n          := sys.diutil.bool_to_int(req_notes_nin);
        l_id_prof_req_n        := sys.diutil.bool_to_int(id_prof_req_nin);
        l_dt_req_n             := sys.diutil.bool_to_int(dt_req_nin);
        l_dt_valid_n           := sys.diutil.bool_to_int(dt_valid_nin);
        l_valid_days_n         := sys.diutil.bool_to_int(valid_days_nin);
        l_decision_notes_n     := sys.diutil.bool_to_int(decision_notes_nin);
        l_id_prof_decision_n   := sys.diutil.bool_to_int(id_prof_decision_nin);
        l_dt_decision_n        := sys.diutil.bool_to_int(dt_decision_nin);
        l_id_pos_consult_req_n := sys.diutil.bool_to_int(id_pos_consult_req_nin);
    
        UPDATE sr_pos_schedule
           SET id_sr_pos_status   = decode(l_id_sr_pos_status_n,
                                           0,
                                           id_sr_pos_status_in,
                                           nvl(id_sr_pos_status_in, id_sr_pos_status)),
               id_schedule_sr     = decode(l_id_schedule_sr_n,
                                           0,
                                           id_schedule_sr_in,
                                           nvl(id_schedule_sr_in, id_schedule_sr)),
               flg_status         = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_prof_reg        = decode(l_id_prof_reg_n, 0, id_prof_reg_in, nvl(id_prof_reg_in, id_prof_reg)),
               dt_reg             = decode(l_dt_reg_n, 0, dt_reg_in, nvl(dt_reg_in, dt_reg)),
               create_user        = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time        = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution = decode(l_create_institution_n,
                                           0,
                                           create_institution_in,
                                           nvl(create_institution_in, create_institution)),
               update_user        = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time        = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution = decode(l_update_institution_n,
                                           0,
                                           update_institution_in,
                                           nvl(update_institution_in, update_institution)),
               dt_pos_suggested   = decode(l_dt_pos_suggested_n,
                                           0,
                                           dt_pos_suggested_in,
                                           nvl(dt_pos_suggested_in, dt_pos_suggested)),
               req_notes          = decode(l_req_notes_n, 0, req_notes_in, nvl(req_notes_in, req_notes)),
               id_prof_req        = decode(l_id_prof_req_n, 0, id_prof_req_in, nvl(id_prof_req_in, id_prof_req)),
               dt_req             = decode(l_dt_req_n, 0, dt_req_in, nvl(dt_req_in, dt_req)),
               dt_valid           = decode(l_dt_valid_n, 0, dt_valid_in, nvl(dt_valid_in, dt_valid)),
               valid_days         = decode(l_valid_days_n, 0, valid_days_in, nvl(valid_days_in, valid_days)),
               decision_notes     = decode(l_decision_notes_n,
                                           0,
                                           decision_notes_in,
                                           nvl(decision_notes_in, decision_notes)),
               id_prof_decision   = decode(l_id_prof_decision_n,
                                           0,
                                           id_prof_decision_in,
                                           nvl(id_prof_decision_in, id_prof_decision)),
               dt_decision        = decode(l_dt_decision_n, 0, dt_decision_in, nvl(dt_decision_in, dt_decision)),
               id_pos_consult_req = decode(l_id_pos_consult_req_n,
                                           0,
                                           id_pos_consult_req_in,
                                           nvl(id_pos_consult_req_in, id_pos_consult_req))
         WHERE id_sr_pos_schedule = id_sr_pos_schedule_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'SR_POS_SCHEDULE');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    IF l_name = 'SPSC_CREQ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_POS_CONSULT_REQ',
                                                        value_in           => id_pos_consult_req_in);
                    END IF;
                    IF l_name = 'SPSC_DPRF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_DECISION',
                                                        value_in           => id_prof_decision_in);
                    END IF;
                    IF l_name = 'SPSC_RGPRF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_REG',
                                                        value_in           => id_prof_reg_in);
                    END IF;
                    IF l_name = 'SPSC_RQPRF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_REQ',
                                                        value_in           => id_prof_req_in);
                    END IF;
                    IF l_name = 'SPSC_SCHR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE_SR',
                                                        value_in           => id_schedule_sr_in);
                    END IF;
                    IF l_name = 'SPSC_SPST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SR_POS_STATUS',
                                                        value_in           => id_sr_pos_status_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_sr_pos_schedule_in  IN sr_pos_schedule.id_sr_pos_schedule%TYPE,
        id_sr_pos_status_in    IN sr_pos_schedule.id_sr_pos_status%TYPE DEFAULT NULL,
        id_sr_pos_status_nin   IN BOOLEAN := TRUE,
        id_schedule_sr_in      IN sr_pos_schedule.id_schedule_sr%TYPE DEFAULT NULL,
        id_schedule_sr_nin     IN BOOLEAN := TRUE,
        flg_status_in          IN sr_pos_schedule.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        id_prof_reg_in         IN sr_pos_schedule.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_reg_nin        IN BOOLEAN := TRUE,
        dt_reg_in              IN sr_pos_schedule.dt_reg%TYPE DEFAULT NULL,
        dt_reg_nin             IN BOOLEAN := TRUE,
        create_user_in         IN sr_pos_schedule.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN sr_pos_schedule.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN sr_pos_schedule.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN sr_pos_schedule.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN sr_pos_schedule.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN sr_pos_schedule.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        dt_pos_suggested_in    IN sr_pos_schedule.dt_pos_suggested%TYPE DEFAULT NULL,
        dt_pos_suggested_nin   IN BOOLEAN := TRUE,
        req_notes_in           IN sr_pos_schedule.req_notes%TYPE DEFAULT NULL,
        req_notes_nin          IN BOOLEAN := TRUE,
        id_prof_req_in         IN sr_pos_schedule.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin        IN BOOLEAN := TRUE,
        dt_req_in              IN sr_pos_schedule.dt_req%TYPE DEFAULT NULL,
        dt_req_nin             IN BOOLEAN := TRUE,
        dt_valid_in            IN sr_pos_schedule.dt_valid%TYPE DEFAULT NULL,
        dt_valid_nin           IN BOOLEAN := TRUE,
        valid_days_in          IN sr_pos_schedule.valid_days%TYPE DEFAULT NULL,
        valid_days_nin         IN BOOLEAN := TRUE,
        decision_notes_in      IN sr_pos_schedule.decision_notes%TYPE DEFAULT NULL,
        decision_notes_nin     IN BOOLEAN := TRUE,
        id_prof_decision_in    IN sr_pos_schedule.id_prof_decision%TYPE DEFAULT NULL,
        id_prof_decision_nin   IN BOOLEAN := TRUE,
        dt_decision_in         IN sr_pos_schedule.dt_decision%TYPE DEFAULT NULL,
        dt_decision_nin        IN BOOLEAN := TRUE,
        id_pos_consult_req_in  IN sr_pos_schedule.id_pos_consult_req%TYPE DEFAULT NULL,
        id_pos_consult_req_nin IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_sr_pos_schedule_in  => id_sr_pos_schedule_in,
            id_sr_pos_status_in    => id_sr_pos_status_in,
            id_sr_pos_status_nin   => id_sr_pos_status_nin,
            id_schedule_sr_in      => id_schedule_sr_in,
            id_schedule_sr_nin     => id_schedule_sr_nin,
            flg_status_in          => flg_status_in,
            flg_status_nin         => flg_status_nin,
            id_prof_reg_in         => id_prof_reg_in,
            id_prof_reg_nin        => id_prof_reg_nin,
            dt_reg_in              => dt_reg_in,
            dt_reg_nin             => dt_reg_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            dt_pos_suggested_in    => dt_pos_suggested_in,
            dt_pos_suggested_nin   => dt_pos_suggested_nin,
            req_notes_in           => req_notes_in,
            req_notes_nin          => req_notes_nin,
            id_prof_req_in         => id_prof_req_in,
            id_prof_req_nin        => id_prof_req_nin,
            dt_req_in              => dt_req_in,
            dt_req_nin             => dt_req_nin,
            dt_valid_in            => dt_valid_in,
            dt_valid_nin           => dt_valid_nin,
            valid_days_in          => valid_days_in,
            valid_days_nin         => valid_days_nin,
            decision_notes_in      => decision_notes_in,
            decision_notes_nin     => decision_notes_nin,
            id_prof_decision_in    => id_prof_decision_in,
            id_prof_decision_nin   => id_prof_decision_nin,
            dt_decision_in         => dt_decision_in,
            dt_decision_nin        => dt_decision_nin,
            id_pos_consult_req_in  => id_pos_consult_req_in,
            id_pos_consult_req_nin => id_pos_consult_req_nin,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_sr_pos_status_in    IN sr_pos_schedule.id_sr_pos_status%TYPE DEFAULT NULL,
        id_sr_pos_status_nin   IN BOOLEAN := TRUE,
        id_schedule_sr_in      IN sr_pos_schedule.id_schedule_sr%TYPE DEFAULT NULL,
        id_schedule_sr_nin     IN BOOLEAN := TRUE,
        flg_status_in          IN sr_pos_schedule.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        id_prof_reg_in         IN sr_pos_schedule.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_reg_nin        IN BOOLEAN := TRUE,
        dt_reg_in              IN sr_pos_schedule.dt_reg%TYPE DEFAULT NULL,
        dt_reg_nin             IN BOOLEAN := TRUE,
        create_user_in         IN sr_pos_schedule.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN sr_pos_schedule.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN sr_pos_schedule.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN sr_pos_schedule.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN sr_pos_schedule.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN sr_pos_schedule.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        dt_pos_suggested_in    IN sr_pos_schedule.dt_pos_suggested%TYPE DEFAULT NULL,
        dt_pos_suggested_nin   IN BOOLEAN := TRUE,
        req_notes_in           IN sr_pos_schedule.req_notes%TYPE DEFAULT NULL,
        req_notes_nin          IN BOOLEAN := TRUE,
        id_prof_req_in         IN sr_pos_schedule.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin        IN BOOLEAN := TRUE,
        dt_req_in              IN sr_pos_schedule.dt_req%TYPE DEFAULT NULL,
        dt_req_nin             IN BOOLEAN := TRUE,
        dt_valid_in            IN sr_pos_schedule.dt_valid%TYPE DEFAULT NULL,
        dt_valid_nin           IN BOOLEAN := TRUE,
        valid_days_in          IN sr_pos_schedule.valid_days%TYPE DEFAULT NULL,
        valid_days_nin         IN BOOLEAN := TRUE,
        decision_notes_in      IN sr_pos_schedule.decision_notes%TYPE DEFAULT NULL,
        decision_notes_nin     IN BOOLEAN := TRUE,
        id_prof_decision_in    IN sr_pos_schedule.id_prof_decision%TYPE DEFAULT NULL,
        id_prof_decision_nin   IN BOOLEAN := TRUE,
        dt_decision_in         IN sr_pos_schedule.dt_decision%TYPE DEFAULT NULL,
        dt_decision_nin        IN BOOLEAN := TRUE,
        id_pos_consult_req_in  IN sr_pos_schedule.id_pos_consult_req%TYPE DEFAULT NULL,
        id_pos_consult_req_nin IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
        l_sql                  VARCHAR2(32767);
        l_rows_out             table_varchar;
        l_id_sr_pos_status_n   NUMBER(1);
        l_id_schedule_sr_n     NUMBER(1);
        l_flg_status_n         NUMBER(1);
        l_id_prof_reg_n        NUMBER(1);
        l_dt_reg_n             NUMBER(1);
        l_create_user_n        NUMBER(1);
        l_create_time_n        NUMBER(1);
        l_create_institution_n NUMBER(1);
        l_update_user_n        NUMBER(1);
        l_update_time_n        NUMBER(1);
        l_update_institution_n NUMBER(1);
        l_dt_pos_suggested_n   NUMBER(1);
        l_req_notes_n          NUMBER(1);
        l_id_prof_req_n        NUMBER(1);
        l_dt_req_n             NUMBER(1);
        l_dt_valid_n           NUMBER(1);
        l_valid_days_n         NUMBER(1);
        l_decision_notes_n     NUMBER(1);
        l_id_prof_decision_n   NUMBER(1);
        l_dt_decision_n        NUMBER(1);
        l_id_pos_consult_req_n NUMBER(1);
        id_sr_pos_schedule_in  sr_pos_schedule.id_sr_pos_schedule%TYPE;
    BEGIN
    
        l_id_sr_pos_status_n   := sys.diutil.bool_to_int(id_sr_pos_status_nin);
        l_id_schedule_sr_n     := sys.diutil.bool_to_int(id_schedule_sr_nin);
        l_flg_status_n         := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_reg_n        := sys.diutil.bool_to_int(id_prof_reg_nin);
        l_dt_reg_n             := sys.diutil.bool_to_int(dt_reg_nin);
        l_create_user_n        := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n        := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n        := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n        := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n := sys.diutil.bool_to_int(update_institution_nin);
        l_dt_pos_suggested_n   := sys.diutil.bool_to_int(dt_pos_suggested_nin);
        l_req_notes_n          := sys.diutil.bool_to_int(req_notes_nin);
        l_id_prof_req_n        := sys.diutil.bool_to_int(id_prof_req_nin);
        l_dt_req_n             := sys.diutil.bool_to_int(dt_req_nin);
        l_dt_valid_n           := sys.diutil.bool_to_int(dt_valid_nin);
        l_valid_days_n         := sys.diutil.bool_to_int(valid_days_nin);
        l_decision_notes_n     := sys.diutil.bool_to_int(decision_notes_nin);
        l_id_prof_decision_n   := sys.diutil.bool_to_int(id_prof_decision_nin);
        l_dt_decision_n        := sys.diutil.bool_to_int(dt_decision_nin);
        l_id_pos_consult_req_n := sys.diutil.bool_to_int(id_pos_consult_req_nin);
    
        l_sql := 'UPDATE SR_POS_SCHEDULE SET ' || ' ID_SR_POS_STATUS = decode (' || l_id_sr_pos_status_n ||
                 ',0,:id_sr_pos_status_in, NVL (:id_sr_pos_status_in, ID_SR_POS_STATUS)) ' || ',' ||
                 ' ID_SCHEDULE_SR = decode (' || l_id_schedule_sr_n ||
                 ',0,:id_schedule_sr_in, NVL (:id_schedule_sr_in, ID_SCHEDULE_SR)) ' || ',' || ' FLG_STATUS = decode (' ||
                 l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' ID_PROF_REG = decode (' || l_id_prof_reg_n ||
                 ',0,:id_prof_reg_in, NVL (:id_prof_reg_in, ID_PROF_REG)) ' || ',' || ' DT_REG = decode (' ||
                 l_dt_reg_n || ',0,:dt_reg_in, NVL (:dt_reg_in, DT_REG)) ' || ',' || ' CREATE_USER = decode (' ||
                 l_create_user_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' ||
                 ' CREATE_TIME = decode (' || l_create_time_n ||
                 ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' || ' CREATE_INSTITUTION = decode (' ||
                 l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' DT_POS_SUGGESTED = decode (' || l_dt_pos_suggested_n ||
                 ',0,:dt_pos_suggested_in, NVL (:dt_pos_suggested_in, DT_POS_SUGGESTED)) ' || ',' ||
                 ' REQ_NOTES = decode (' || l_req_notes_n || ',0,:req_notes_in, NVL (:req_notes_in, REQ_NOTES)) ' || ',' ||
                 ' ID_PROF_REQ = decode (' || l_id_prof_req_n ||
                 ',0,:id_prof_req_in, NVL (:id_prof_req_in, ID_PROF_REQ)) ' || ',' || ' DT_REQ = decode (' ||
                 l_dt_req_n || ',0,:dt_req_in, NVL (:dt_req_in, DT_REQ)) ' || ',' || ' DT_VALID = decode (' ||
                 l_dt_valid_n || ',0,:dt_valid_in, NVL (:dt_valid_in, DT_VALID)) ' || ',' || ' VALID_DAYS = decode (' ||
                 l_valid_days_n || ',0,:valid_days_in, NVL (:valid_days_in, VALID_DAYS)) ' || ',' ||
                 ' DECISION_NOTES = decode (' || l_decision_notes_n ||
                 ',0,:decision_notes_in, NVL (:decision_notes_in, DECISION_NOTES)) ' || ',' ||
                 ' ID_PROF_DECISION = decode (' || l_id_prof_decision_n ||
                 ',0,:id_prof_decision_in, NVL (:id_prof_decision_in, ID_PROF_DECISION)) ' || ',' ||
                 ' DT_DECISION = decode (' || l_dt_decision_n ||
                 ',0,:dt_decision_in, NVL (:dt_decision_in, DT_DECISION)) ' || ',' || ' ID_POS_CONSULT_REQ = decode (' ||
                 l_id_pos_consult_req_n ||
                 ',0,:id_pos_consult_req_in, NVL (:id_pos_consult_req_in, ID_POS_CONSULT_REQ)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_sr_pos_status_in, id_schedule_sr_in, flg_status_in, id_prof_reg_in, dt_reg_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, dt_pos_suggested_in, req_notes_in, id_prof_req_in, dt_req_in, dt_valid_in, valid_days_in, decision_notes_in, id_prof_decision_in, dt_decision_in, id_pos_consult_req_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'SR_POS_SCHEDULE');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    IF l_name = 'SPSC_CREQ_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_POS_CONSULT_REQ',
                                                        value_in           => id_pos_consult_req_in);
                    END IF;
                    IF l_name = 'SPSC_DPRF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_DECISION',
                                                        value_in           => id_prof_decision_in);
                    END IF;
                    IF l_name = 'SPSC_RGPRF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_REG',
                                                        value_in           => id_prof_reg_in);
                    END IF;
                    IF l_name = 'SPSC_RQPRF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_REQ',
                                                        value_in           => id_prof_req_in);
                    END IF;
                    IF l_name = 'SPSC_SCHR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SCHEDULE_SR',
                                                        value_in           => id_schedule_sr_in);
                    END IF;
                    IF l_name = 'SPSC_SPST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SR_POS_STATUS',
                                                        value_in           => id_sr_pos_status_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_sr_pos_status_in    IN sr_pos_schedule.id_sr_pos_status%TYPE DEFAULT NULL,
        id_sr_pos_status_nin   IN BOOLEAN := TRUE,
        id_schedule_sr_in      IN sr_pos_schedule.id_schedule_sr%TYPE DEFAULT NULL,
        id_schedule_sr_nin     IN BOOLEAN := TRUE,
        flg_status_in          IN sr_pos_schedule.flg_status%TYPE DEFAULT NULL,
        flg_status_nin         IN BOOLEAN := TRUE,
        id_prof_reg_in         IN sr_pos_schedule.id_prof_reg%TYPE DEFAULT NULL,
        id_prof_reg_nin        IN BOOLEAN := TRUE,
        dt_reg_in              IN sr_pos_schedule.dt_reg%TYPE DEFAULT NULL,
        dt_reg_nin             IN BOOLEAN := TRUE,
        create_user_in         IN sr_pos_schedule.create_user%TYPE DEFAULT NULL,
        create_user_nin        IN BOOLEAN := TRUE,
        create_time_in         IN sr_pos_schedule.create_time%TYPE DEFAULT NULL,
        create_time_nin        IN BOOLEAN := TRUE,
        create_institution_in  IN sr_pos_schedule.create_institution%TYPE DEFAULT NULL,
        create_institution_nin IN BOOLEAN := TRUE,
        update_user_in         IN sr_pos_schedule.update_user%TYPE DEFAULT NULL,
        update_user_nin        IN BOOLEAN := TRUE,
        update_time_in         IN sr_pos_schedule.update_time%TYPE DEFAULT NULL,
        update_time_nin        IN BOOLEAN := TRUE,
        update_institution_in  IN sr_pos_schedule.update_institution%TYPE DEFAULT NULL,
        update_institution_nin IN BOOLEAN := TRUE,
        dt_pos_suggested_in    IN sr_pos_schedule.dt_pos_suggested%TYPE DEFAULT NULL,
        dt_pos_suggested_nin   IN BOOLEAN := TRUE,
        req_notes_in           IN sr_pos_schedule.req_notes%TYPE DEFAULT NULL,
        req_notes_nin          IN BOOLEAN := TRUE,
        id_prof_req_in         IN sr_pos_schedule.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin        IN BOOLEAN := TRUE,
        dt_req_in              IN sr_pos_schedule.dt_req%TYPE DEFAULT NULL,
        dt_req_nin             IN BOOLEAN := TRUE,
        dt_valid_in            IN sr_pos_schedule.dt_valid%TYPE DEFAULT NULL,
        dt_valid_nin           IN BOOLEAN := TRUE,
        valid_days_in          IN sr_pos_schedule.valid_days%TYPE DEFAULT NULL,
        valid_days_nin         IN BOOLEAN := TRUE,
        decision_notes_in      IN sr_pos_schedule.decision_notes%TYPE DEFAULT NULL,
        decision_notes_nin     IN BOOLEAN := TRUE,
        id_prof_decision_in    IN sr_pos_schedule.id_prof_decision%TYPE DEFAULT NULL,
        id_prof_decision_nin   IN BOOLEAN := TRUE,
        dt_decision_in         IN sr_pos_schedule.dt_decision%TYPE DEFAULT NULL,
        dt_decision_nin        IN BOOLEAN := TRUE,
        id_pos_consult_req_in  IN sr_pos_schedule.id_pos_consult_req%TYPE DEFAULT NULL,
        id_pos_consult_req_nin IN BOOLEAN := TRUE,
        where_in               VARCHAR2 DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_sr_pos_status_in    => id_sr_pos_status_in,
            id_sr_pos_status_nin   => id_sr_pos_status_nin,
            id_schedule_sr_in      => id_schedule_sr_in,
            id_schedule_sr_nin     => id_schedule_sr_nin,
            flg_status_in          => flg_status_in,
            flg_status_nin         => flg_status_nin,
            id_prof_reg_in         => id_prof_reg_in,
            id_prof_reg_nin        => id_prof_reg_nin,
            dt_reg_in              => dt_reg_in,
            dt_reg_nin             => dt_reg_nin,
            create_user_in         => create_user_in,
            create_user_nin        => create_user_nin,
            create_time_in         => create_time_in,
            create_time_nin        => create_time_nin,
            create_institution_in  => create_institution_in,
            create_institution_nin => create_institution_nin,
            update_user_in         => update_user_in,
            update_user_nin        => update_user_nin,
            update_time_in         => update_time_in,
            update_time_nin        => update_time_nin,
            update_institution_in  => update_institution_in,
            update_institution_nin => update_institution_nin,
            dt_pos_suggested_in    => dt_pos_suggested_in,
            dt_pos_suggested_nin   => dt_pos_suggested_nin,
            req_notes_in           => req_notes_in,
            req_notes_nin          => req_notes_nin,
            id_prof_req_in         => id_prof_req_in,
            id_prof_req_nin        => id_prof_req_nin,
            dt_req_in              => dt_req_in,
            dt_req_nin             => dt_req_nin,
            dt_valid_in            => dt_valid_in,
            dt_valid_nin           => dt_valid_nin,
            valid_days_in          => valid_days_in,
            valid_days_nin         => valid_days_nin,
            decision_notes_in      => decision_notes_in,
            decision_notes_nin     => decision_notes_nin,
            id_prof_decision_in    => id_prof_decision_in,
            id_prof_decision_nin   => id_prof_decision_nin,
            dt_decision_in         => dt_decision_in,
            dt_decision_nin        => dt_decision_nin,
            id_pos_consult_req_in  => id_pos_consult_req_in,
            id_pos_consult_req_nin => id_pos_consult_req_nin,
            where_in               => where_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN sr_pos_schedule%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_sr_pos_schedule_in => rec_in.id_sr_pos_schedule,
            id_sr_pos_status_in   => rec_in.id_sr_pos_status,
            id_schedule_sr_in     => rec_in.id_schedule_sr,
            flg_status_in         => rec_in.flg_status,
            id_prof_reg_in        => rec_in.id_prof_reg,
            dt_reg_in             => rec_in.dt_reg,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            dt_pos_suggested_in   => rec_in.dt_pos_suggested,
            req_notes_in          => rec_in.req_notes,
            id_prof_req_in        => rec_in.id_prof_req,
            dt_req_in             => rec_in.dt_req,
            dt_valid_in           => rec_in.dt_valid,
            valid_days_in         => rec_in.valid_days,
            decision_notes_in     => rec_in.decision_notes,
            id_prof_decision_in   => rec_in.id_prof_decision,
            dt_decision_in        => rec_in.dt_decision,
            id_pos_consult_req_in => rec_in.id_pos_consult_req
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN sr_pos_schedule%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_sr_pos_schedule_in => rec_in.id_sr_pos_schedule,
            id_sr_pos_status_in   => rec_in.id_sr_pos_status,
            id_schedule_sr_in     => rec_in.id_schedule_sr,
            flg_status_in         => rec_in.flg_status,
            id_prof_reg_in        => rec_in.id_prof_reg,
            dt_reg_in             => rec_in.dt_reg,
            create_user_in        => rec_in.create_user,
            create_time_in        => rec_in.create_time,
            create_institution_in => rec_in.create_institution,
            update_user_in        => rec_in.update_user,
            update_time_in        => rec_in.update_time,
            update_institution_in => rec_in.update_institution,
            dt_pos_suggested_in   => rec_in.dt_pos_suggested,
            req_notes_in          => rec_in.req_notes,
            id_prof_req_in        => rec_in.id_prof_req,
            dt_req_in             => rec_in.dt_req,
            dt_valid_in           => rec_in.dt_valid,
            valid_days_in         => rec_in.valid_days,
            decision_notes_in     => rec_in.decision_notes,
            id_prof_decision_in   => rec_in.id_prof_decision,
            dt_decision_in        => rec_in.dt_decision,
            id_pos_consult_req_in => rec_in.id_pos_consult_req
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_sr_pos_schedule_in IN sr_pos_schedule.id_sr_pos_schedule%TYPE,
        id_sr_pos_status_in   IN sr_pos_schedule.id_sr_pos_status%TYPE DEFAULT NULL,
        id_schedule_sr_in     IN sr_pos_schedule.id_schedule_sr%TYPE DEFAULT NULL,
        flg_status_in         IN sr_pos_schedule.flg_status%TYPE DEFAULT NULL,
        id_prof_reg_in        IN sr_pos_schedule.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in             IN sr_pos_schedule.dt_reg%TYPE DEFAULT NULL,
        create_user_in        IN sr_pos_schedule.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sr_pos_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sr_pos_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sr_pos_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sr_pos_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sr_pos_schedule.update_institution%TYPE DEFAULT NULL,
        dt_pos_suggested_in   IN sr_pos_schedule.dt_pos_suggested%TYPE DEFAULT NULL,
        req_notes_in          IN sr_pos_schedule.req_notes%TYPE DEFAULT NULL,
        id_prof_req_in        IN sr_pos_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in             IN sr_pos_schedule.dt_req%TYPE DEFAULT NULL,
        dt_valid_in           IN sr_pos_schedule.dt_valid%TYPE DEFAULT NULL,
        valid_days_in         IN sr_pos_schedule.valid_days%TYPE DEFAULT NULL,
        decision_notes_in     IN sr_pos_schedule.decision_notes%TYPE DEFAULT NULL,
        id_prof_decision_in   IN sr_pos_schedule.id_prof_decision%TYPE DEFAULT NULL,
        dt_decision_in        IN sr_pos_schedule.dt_decision%TYPE DEFAULT NULL,
        id_pos_consult_req_in IN sr_pos_schedule.id_pos_consult_req%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        upd(id_sr_pos_schedule_in => id_sr_pos_schedule_in,
            id_sr_pos_status_in   => id_sr_pos_status_in,
            id_schedule_sr_in     => id_schedule_sr_in,
            flg_status_in         => flg_status_in,
            id_prof_reg_in        => id_prof_reg_in,
            dt_reg_in             => dt_reg_in,
            create_user_in        => create_user_in,
            create_time_in        => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in        => update_user_in,
            update_time_in        => update_time_in,
            update_institution_in => update_institution_in,
            dt_pos_suggested_in   => dt_pos_suggested_in,
            req_notes_in          => req_notes_in,
            id_prof_req_in        => id_prof_req_in,
            dt_req_in             => dt_req_in,
            dt_valid_in           => dt_valid_in,
            valid_days_in         => valid_days_in,
            decision_notes_in     => decision_notes_in,
            id_prof_decision_in   => id_prof_decision_in,
            dt_decision_in        => dt_decision_in,
            id_pos_consult_req_in => id_pos_consult_req_in,
            handle_error_in       => handle_error_in,
            rows_out              => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_sr_pos_schedule_in => id_sr_pos_schedule_in,
                id_sr_pos_status_in   => id_sr_pos_status_in,
                id_schedule_sr_in     => id_schedule_sr_in,
                flg_status_in         => flg_status_in,
                id_prof_reg_in        => id_prof_reg_in,
                dt_reg_in             => dt_reg_in,
                create_user_in        => create_user_in,
                create_time_in        => create_time_in,
                create_institution_in => create_institution_in,
                update_user_in        => update_user_in,
                update_time_in        => update_time_in,
                update_institution_in => update_institution_in,
                dt_pos_suggested_in   => dt_pos_suggested_in,
                req_notes_in          => req_notes_in,
                id_prof_req_in        => id_prof_req_in,
                dt_req_in             => dt_req_in,
                dt_valid_in           => dt_valid_in,
                valid_days_in         => valid_days_in,
                decision_notes_in     => decision_notes_in,
                id_prof_decision_in   => id_prof_decision_in,
                dt_decision_in        => dt_decision_in,
                id_pos_consult_req_in => id_pos_consult_req_in,
                handle_error_in       => handle_error_in,
                rows_out              => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_sr_pos_schedule_in IN sr_pos_schedule.id_sr_pos_schedule%TYPE,
        id_sr_pos_status_in   IN sr_pos_schedule.id_sr_pos_status%TYPE DEFAULT NULL,
        id_schedule_sr_in     IN sr_pos_schedule.id_schedule_sr%TYPE DEFAULT NULL,
        flg_status_in         IN sr_pos_schedule.flg_status%TYPE DEFAULT NULL,
        id_prof_reg_in        IN sr_pos_schedule.id_prof_reg%TYPE DEFAULT NULL,
        dt_reg_in             IN sr_pos_schedule.dt_reg%TYPE DEFAULT NULL,
        create_user_in        IN sr_pos_schedule.create_user%TYPE DEFAULT NULL,
        create_time_in        IN sr_pos_schedule.create_time%TYPE DEFAULT NULL,
        create_institution_in IN sr_pos_schedule.create_institution%TYPE DEFAULT NULL,
        update_user_in        IN sr_pos_schedule.update_user%TYPE DEFAULT NULL,
        update_time_in        IN sr_pos_schedule.update_time%TYPE DEFAULT NULL,
        update_institution_in IN sr_pos_schedule.update_institution%TYPE DEFAULT NULL,
        dt_pos_suggested_in   IN sr_pos_schedule.dt_pos_suggested%TYPE DEFAULT NULL,
        req_notes_in          IN sr_pos_schedule.req_notes%TYPE DEFAULT NULL,
        id_prof_req_in        IN sr_pos_schedule.id_prof_req%TYPE DEFAULT NULL,
        dt_req_in             IN sr_pos_schedule.dt_req%TYPE DEFAULT NULL,
        dt_valid_in           IN sr_pos_schedule.dt_valid%TYPE DEFAULT NULL,
        valid_days_in         IN sr_pos_schedule.valid_days%TYPE DEFAULT NULL,
        decision_notes_in     IN sr_pos_schedule.decision_notes%TYPE DEFAULT NULL,
        id_prof_decision_in   IN sr_pos_schedule.id_prof_decision%TYPE DEFAULT NULL,
        dt_decision_in        IN sr_pos_schedule.dt_decision%TYPE DEFAULT NULL,
        id_pos_consult_req_in IN sr_pos_schedule.id_pos_consult_req%TYPE DEFAULT NULL,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_sr_pos_schedule_in,
                id_sr_pos_status_in,
                id_schedule_sr_in,
                flg_status_in,
                id_prof_reg_in,
                dt_reg_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                dt_pos_suggested_in,
                req_notes_in,
                id_prof_req_in,
                dt_req_in,
                dt_valid_in,
                valid_days_in,
                decision_notes_in,
                id_prof_decision_in,
                dt_decision_in,
                id_pos_consult_req_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN sr_pos_schedule_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_sr_pos_schedule id_sr_pos_schedule_cc;
        l_id_sr_pos_status   id_sr_pos_status_cc;
        l_id_schedule_sr     id_schedule_sr_cc;
        l_flg_status         flg_status_cc;
        l_id_prof_reg        id_prof_reg_cc;
        l_dt_reg             dt_reg_cc;
        l_create_user        create_user_cc;
        l_create_time        create_time_cc;
        l_create_institution create_institution_cc;
        l_update_user        update_user_cc;
        l_update_time        update_time_cc;
        l_update_institution update_institution_cc;
        l_dt_pos_suggested   dt_pos_suggested_cc;
        l_req_notes          req_notes_cc;
        l_id_prof_req        id_prof_req_cc;
        l_dt_req             dt_req_cc;
        l_dt_valid           dt_valid_cc;
        l_valid_days         valid_days_cc;
        l_decision_notes     decision_notes_cc;
        l_id_prof_decision   id_prof_decision_cc;
        l_dt_decision        dt_decision_cc;
        l_id_pos_consult_req id_pos_consult_req_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_sr_pos_schedule(i) := col_in(i).id_sr_pos_schedule;
            l_id_sr_pos_status(i) := col_in(i).id_sr_pos_status;
            l_id_schedule_sr(i) := col_in(i).id_schedule_sr;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_prof_reg(i) := col_in(i).id_prof_reg;
            l_dt_reg(i) := col_in(i).dt_reg;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_dt_pos_suggested(i) := col_in(i).dt_pos_suggested;
            l_req_notes(i) := col_in(i).req_notes;
            l_id_prof_req(i) := col_in(i).id_prof_req;
            l_dt_req(i) := col_in(i).dt_req;
            l_dt_valid(i) := col_in(i).dt_valid;
            l_valid_days(i) := col_in(i).valid_days;
            l_decision_notes(i) := col_in(i).decision_notes;
            l_id_prof_decision(i) := col_in(i).id_prof_decision;
            l_dt_decision(i) := col_in(i).dt_decision;
            l_id_pos_consult_req(i) := col_in(i).id_pos_consult_req;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE sr_pos_schedule
                   SET id_sr_pos_status   = nvl(l_id_sr_pos_status(i), id_sr_pos_status),
                       id_schedule_sr     = nvl(l_id_schedule_sr(i), id_schedule_sr),
                       flg_status         = nvl(l_flg_status(i), flg_status),
                       id_prof_reg        = nvl(l_id_prof_reg(i), id_prof_reg),
                       dt_reg             = nvl(l_dt_reg(i), dt_reg),
                       create_user        = nvl(l_create_user(i), create_user),
                       create_time        = nvl(l_create_time(i), create_time),
                       create_institution = nvl(l_create_institution(i), create_institution),
                       update_user        = nvl(l_update_user(i), update_user),
                       update_time        = nvl(l_update_time(i), update_time),
                       update_institution = nvl(l_update_institution(i), update_institution),
                       dt_pos_suggested   = nvl(l_dt_pos_suggested(i), dt_pos_suggested),
                       req_notes          = nvl(l_req_notes(i), req_notes),
                       id_prof_req        = nvl(l_id_prof_req(i), id_prof_req),
                       dt_req             = nvl(l_dt_req(i), dt_req),
                       dt_valid           = nvl(l_dt_valid(i), dt_valid),
                       valid_days         = nvl(l_valid_days(i), valid_days),
                       decision_notes     = nvl(l_decision_notes(i), decision_notes),
                       id_prof_decision   = nvl(l_id_prof_decision(i), id_prof_decision),
                       dt_decision        = nvl(l_dt_decision(i), dt_decision),
                       id_pos_consult_req = nvl(l_id_pos_consult_req(i), id_pos_consult_req)
                 WHERE id_sr_pos_schedule = l_id_sr_pos_schedule(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE sr_pos_schedule
                   SET id_sr_pos_status   = l_id_sr_pos_status(i),
                       id_schedule_sr     = l_id_schedule_sr(i),
                       flg_status         = l_flg_status(i),
                       id_prof_reg        = l_id_prof_reg(i),
                       dt_reg             = l_dt_reg(i),
                       create_user        = l_create_user(i),
                       create_time        = l_create_time(i),
                       create_institution = l_create_institution(i),
                       update_user        = l_update_user(i),
                       update_time        = l_update_time(i),
                       update_institution = l_update_institution(i),
                       dt_pos_suggested   = l_dt_pos_suggested(i),
                       req_notes          = l_req_notes(i),
                       id_prof_req        = l_id_prof_req(i),
                       dt_req             = l_dt_req(i),
                       dt_valid           = l_dt_valid(i),
                       valid_days         = l_valid_days(i),
                       decision_notes     = l_decision_notes(i),
                       id_prof_decision   = l_id_prof_decision(i),
                       dt_decision        = l_dt_decision(i),
                       id_pos_consult_req = l_id_pos_consult_req(i)
                 WHERE id_sr_pos_schedule = l_id_sr_pos_schedule(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN sr_pos_schedule_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE SR_POS_SCHEDULE
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE SR_POS_SCHEDULE
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE SR_POS_SCHEDULE set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE SR_POS_SCHEDULE set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_sr_pos_schedule_in IN sr_pos_schedule.id_sr_pos_schedule%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_pos_schedule
         WHERE id_sr_pos_schedule = id_sr_pos_schedule_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_sr_pos_schedule_in IN sr_pos_schedule.id_sr_pos_schedule%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_sr_pos_schedule_in => id_sr_pos_schedule_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_SR_POS_SCHEDULE
    PROCEDURE del_id_sr_pos_schedule
    (
        id_sr_pos_schedule_in IN sr_pos_schedule.id_sr_pos_schedule%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_pos_schedule
         WHERE id_sr_pos_schedule = id_sr_pos_schedule_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_sr_pos_schedule;

    -- Delete all rows for primary key column ID_SR_POS_SCHEDULE
    PROCEDURE del_id_sr_pos_schedule
    (
        id_sr_pos_schedule_in IN sr_pos_schedule.id_sr_pos_schedule%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_sr_pos_schedule(id_sr_pos_schedule_in => id_sr_pos_schedule_in,
                               handle_error_in       => handle_error_in,
                               rows_out              => rows_out);
    END del_id_sr_pos_schedule;

    PROCEDURE del_spsc_creq_fk
    (
        id_pos_consult_req_in IN sr_pos_schedule.id_pos_consult_req%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_pos_schedule
         WHERE id_pos_consult_req = del_spsc_creq_fk.id_pos_consult_req_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_spsc_creq_fk;

    PROCEDURE del_spsc_creq_fk
    (
        id_pos_consult_req_in IN sr_pos_schedule.id_pos_consult_req%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_spsc_creq_fk(id_pos_consult_req_in => id_pos_consult_req_in,
                         handle_error_in       => handle_error_in,
                         rows_out              => rows_out);
    END del_spsc_creq_fk;

    PROCEDURE del_spsc_dprf_fk
    (
        id_prof_decision_in IN sr_pos_schedule.id_prof_decision%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_pos_schedule
         WHERE id_prof_decision = del_spsc_dprf_fk.id_prof_decision_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_spsc_dprf_fk;

    PROCEDURE del_spsc_dprf_fk
    (
        id_prof_decision_in IN sr_pos_schedule.id_prof_decision%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_spsc_dprf_fk(id_prof_decision_in => id_prof_decision_in,
                         handle_error_in     => handle_error_in,
                         rows_out            => rows_out);
    END del_spsc_dprf_fk;

    PROCEDURE del_spsc_rgprf_fk
    (
        id_prof_reg_in  IN sr_pos_schedule.id_prof_reg%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_pos_schedule
         WHERE id_prof_reg = del_spsc_rgprf_fk.id_prof_reg_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_spsc_rgprf_fk;

    PROCEDURE del_spsc_rgprf_fk
    (
        id_prof_reg_in  IN sr_pos_schedule.id_prof_reg%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_spsc_rgprf_fk(id_prof_reg_in => id_prof_reg_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_spsc_rgprf_fk;

    PROCEDURE del_spsc_rqprf_fk
    (
        id_prof_req_in  IN sr_pos_schedule.id_prof_req%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_pos_schedule
         WHERE id_prof_req = del_spsc_rqprf_fk.id_prof_req_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_spsc_rqprf_fk;

    PROCEDURE del_spsc_rqprf_fk
    (
        id_prof_req_in  IN sr_pos_schedule.id_prof_req%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_spsc_rqprf_fk(id_prof_req_in => id_prof_req_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_spsc_rqprf_fk;

    PROCEDURE del_spsc_schr_fk
    (
        id_schedule_sr_in IN sr_pos_schedule.id_schedule_sr%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_pos_schedule
         WHERE id_schedule_sr = del_spsc_schr_fk.id_schedule_sr_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_spsc_schr_fk;

    PROCEDURE del_spsc_schr_fk
    (
        id_schedule_sr_in IN sr_pos_schedule.id_schedule_sr%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_spsc_schr_fk(id_schedule_sr_in => id_schedule_sr_in,
                         handle_error_in   => handle_error_in,
                         rows_out          => rows_out);
    END del_spsc_schr_fk;

    PROCEDURE del_spsc_spst_fk
    (
        id_sr_pos_status_in IN sr_pos_schedule.id_sr_pos_status%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM sr_pos_schedule
         WHERE id_sr_pos_status = del_spsc_spst_fk.id_sr_pos_status_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_spsc_spst_fk;

    PROCEDURE del_spsc_spst_fk
    (
        id_sr_pos_status_in IN sr_pos_schedule.id_sr_pos_status%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_spsc_spst_fk(id_sr_pos_status_in => id_sr_pos_status_in,
                         handle_error_in     => handle_error_in,
                         rows_out            => rows_out);
    END del_spsc_spst_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM SR_POS_SCHEDULE';
        ELSE
            RETURN 'DELETE FROM SR_POS_SCHEDULE WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'SR_POS_SCHEDULE');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'SR_POS_SCHEDULE');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(sr_pos_schedule_inout IN OUT sr_pos_schedule%ROWTYPE) IS
    BEGIN
        sr_pos_schedule_inout.id_sr_pos_schedule := NULL;
        sr_pos_schedule_inout.id_sr_pos_status   := NULL;
        sr_pos_schedule_inout.id_schedule_sr     := NULL;
        sr_pos_schedule_inout.flg_status         := NULL;
        sr_pos_schedule_inout.id_prof_reg        := NULL;
        sr_pos_schedule_inout.dt_reg             := NULL;
        sr_pos_schedule_inout.create_user        := NULL;
        sr_pos_schedule_inout.create_time        := NULL;
        sr_pos_schedule_inout.create_institution := NULL;
        sr_pos_schedule_inout.update_user        := NULL;
        sr_pos_schedule_inout.update_time        := NULL;
        sr_pos_schedule_inout.update_institution := NULL;
        sr_pos_schedule_inout.dt_pos_suggested   := NULL;
        sr_pos_schedule_inout.req_notes          := NULL;
        sr_pos_schedule_inout.id_prof_req        := NULL;
        sr_pos_schedule_inout.dt_req             := NULL;
        sr_pos_schedule_inout.dt_valid           := NULL;
        sr_pos_schedule_inout.valid_days         := NULL;
        sr_pos_schedule_inout.decision_notes     := NULL;
        sr_pos_schedule_inout.id_prof_decision   := NULL;
        sr_pos_schedule_inout.dt_decision        := NULL;
        sr_pos_schedule_inout.id_pos_consult_req := NULL;
    END initrec;

    FUNCTION initrec RETURN sr_pos_schedule%ROWTYPE IS
        l_sr_pos_schedule sr_pos_schedule%ROWTYPE;
    BEGIN
        RETURN l_sr_pos_schedule;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN sr_pos_schedule_tc IS
        data sr_pos_schedule_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM sr_pos_schedule
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN sr_pos_schedule_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data sr_pos_schedule_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_sr_pos_schedule;
/
