/*-- Last Change Revision: $Rev: 1877368 $*/
/*-- Last Change by: $Author: adriano.ferreira $*/
/*-- Date of last change: $Date: 2018-11-12 15:39:19 +0000 (seg, 12 nov 2018) $*/
CREATE OR REPLACE PACKAGE BODY ts_epis_prob_group_hist
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2017-12-21 09:54:24
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN epis_prob_group_hist.id_epis_prob_group_hist%TYPE IS
        retval epis_prob_group_hist.id_epis_prob_group_hist%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_epis_prob_group_hist.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        dt_epis_prob_group_hist_in IN epis_prob_group_hist.dt_epis_prob_group_hist%TYPE DEFAULT NULL,
        id_epis_prob_group_in      IN epis_prob_group_hist.id_epis_prob_group%TYPE DEFAULT NULL,
        id_episode_in              IN epis_prob_group_hist.id_episode%TYPE DEFAULT NULL,
        prob_group_in              IN epis_prob_group_hist.prob_group%TYPE DEFAULT NULL,
        create_user_in             IN epis_prob_group_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN epis_prob_group_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN epis_prob_group_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN epis_prob_group_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN epis_prob_group_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN epis_prob_group_hist.update_institution%TYPE DEFAULT NULL,
        id_professional_in         IN epis_prob_group_hist.id_professional%TYPE DEFAULT NULL,
        dt_epis_prob_group_tstz_in IN epis_prob_group_hist.dt_epis_prob_group_tstz%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky epis_prob_group_hist.id_epis_prob_group_hist%TYPE := next_key;
    BEGIN
        ins(id_epis_prob_group_hist_in => l_pky,
            dt_epis_prob_group_hist_in => dt_epis_prob_group_hist_in,
            id_epis_prob_group_in      => id_epis_prob_group_in,
            id_episode_in              => id_episode_in,
            prob_group_in              => prob_group_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_professional_in         => id_professional_in,
            dt_epis_prob_group_tstz_in => dt_epis_prob_group_tstz_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        dt_epis_prob_group_hist_in IN epis_prob_group_hist.dt_epis_prob_group_hist%TYPE DEFAULT NULL,
        id_epis_prob_group_in      IN epis_prob_group_hist.id_epis_prob_group%TYPE DEFAULT NULL,
        id_episode_in              IN epis_prob_group_hist.id_episode%TYPE DEFAULT NULL,
        prob_group_in              IN epis_prob_group_hist.prob_group%TYPE DEFAULT NULL,
        create_user_in             IN epis_prob_group_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN epis_prob_group_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN epis_prob_group_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN epis_prob_group_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN epis_prob_group_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN epis_prob_group_hist.update_institution%TYPE DEFAULT NULL,
        id_professional_in         IN epis_prob_group_hist.id_professional%TYPE DEFAULT NULL,
        dt_epis_prob_group_tstz_in IN epis_prob_group_hist.dt_epis_prob_group_tstz%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(dt_epis_prob_group_hist_in => dt_epis_prob_group_hist_in,
            id_epis_prob_group_in      => id_epis_prob_group_in,
            id_episode_in              => id_episode_in,
            prob_group_in              => prob_group_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_professional_in         => id_professional_in,
            dt_epis_prob_group_tstz_in => dt_epis_prob_group_tstz_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        dt_epis_prob_group_hist_in  IN epis_prob_group_hist.dt_epis_prob_group_hist%TYPE DEFAULT NULL,
        id_epis_prob_group_in       IN epis_prob_group_hist.id_epis_prob_group%TYPE DEFAULT NULL,
        id_episode_in               IN epis_prob_group_hist.id_episode%TYPE DEFAULT NULL,
        prob_group_in               IN epis_prob_group_hist.prob_group%TYPE DEFAULT NULL,
        create_user_in              IN epis_prob_group_hist.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_prob_group_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_prob_group_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_prob_group_hist.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_prob_group_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_prob_group_hist.update_institution%TYPE DEFAULT NULL,
        id_professional_in          IN epis_prob_group_hist.id_professional%TYPE DEFAULT NULL,
        dt_epis_prob_group_tstz_in  IN epis_prob_group_hist.dt_epis_prob_group_tstz%TYPE DEFAULT NULL,
        id_epis_prob_group_hist_out IN OUT epis_prob_group_hist.id_epis_prob_group_hist%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky epis_prob_group_hist.id_epis_prob_group_hist%TYPE := next_key;
    BEGIN
        ins(id_epis_prob_group_hist_in => l_pky,
            dt_epis_prob_group_hist_in => dt_epis_prob_group_hist_in,
            id_epis_prob_group_in      => id_epis_prob_group_in,
            id_episode_in              => id_episode_in,
            prob_group_in              => prob_group_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_professional_in         => id_professional_in,
            dt_epis_prob_group_tstz_in => dt_epis_prob_group_tstz_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        id_epis_prob_group_hist_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        dt_epis_prob_group_hist_in  IN epis_prob_group_hist.dt_epis_prob_group_hist%TYPE DEFAULT NULL,
        id_epis_prob_group_in       IN epis_prob_group_hist.id_epis_prob_group%TYPE DEFAULT NULL,
        id_episode_in               IN epis_prob_group_hist.id_episode%TYPE DEFAULT NULL,
        prob_group_in               IN epis_prob_group_hist.prob_group%TYPE DEFAULT NULL,
        create_user_in              IN epis_prob_group_hist.create_user%TYPE DEFAULT NULL,
        create_time_in              IN epis_prob_group_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in       IN epis_prob_group_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in              IN epis_prob_group_hist.update_user%TYPE DEFAULT NULL,
        update_time_in              IN epis_prob_group_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in       IN epis_prob_group_hist.update_institution%TYPE DEFAULT NULL,
        id_professional_in          IN epis_prob_group_hist.id_professional%TYPE DEFAULT NULL,
        dt_epis_prob_group_tstz_in  IN epis_prob_group_hist.dt_epis_prob_group_tstz%TYPE DEFAULT NULL,
        id_epis_prob_group_hist_out IN OUT epis_prob_group_hist.id_epis_prob_group_hist%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(dt_epis_prob_group_hist_in  => dt_epis_prob_group_hist_in,
            id_epis_prob_group_in       => id_epis_prob_group_in,
            id_episode_in               => id_episode_in,
            prob_group_in               => prob_group_in,
            create_user_in              => create_user_in,
            create_time_in              => create_time_in,
            create_institution_in       => create_institution_in,
            update_user_in              => update_user_in,
            update_time_in              => update_time_in,
            update_institution_in       => update_institution_in,
            id_professional_in          => id_professional_in,
            dt_epis_prob_group_tstz_in  => dt_epis_prob_group_tstz_in,
            id_epis_prob_group_hist_out => id_epis_prob_group_hist_out,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        dt_epis_prob_group_hist_in IN epis_prob_group_hist.dt_epis_prob_group_hist%TYPE DEFAULT NULL,
        id_epis_prob_group_in      IN epis_prob_group_hist.id_epis_prob_group%TYPE DEFAULT NULL,
        id_episode_in              IN epis_prob_group_hist.id_episode%TYPE DEFAULT NULL,
        prob_group_in              IN epis_prob_group_hist.prob_group%TYPE DEFAULT NULL,
        create_user_in             IN epis_prob_group_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN epis_prob_group_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN epis_prob_group_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN epis_prob_group_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN epis_prob_group_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN epis_prob_group_hist.update_institution%TYPE DEFAULT NULL,
        id_professional_in         IN epis_prob_group_hist.id_professional%TYPE DEFAULT NULL,
        dt_epis_prob_group_tstz_in IN epis_prob_group_hist.dt_epis_prob_group_tstz%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN epis_prob_group_hist.id_epis_prob_group_hist%TYPE IS
        l_pky epis_prob_group_hist.id_epis_prob_group_hist%TYPE := next_key;
    BEGIN
        ins(id_epis_prob_group_hist_in => l_pky,
            dt_epis_prob_group_hist_in => dt_epis_prob_group_hist_in,
            id_epis_prob_group_in      => id_epis_prob_group_in,
            id_episode_in              => id_episode_in,
            prob_group_in              => prob_group_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_professional_in         => id_professional_in,
            dt_epis_prob_group_tstz_in => dt_epis_prob_group_tstz_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        dt_epis_prob_group_hist_in IN epis_prob_group_hist.dt_epis_prob_group_hist%TYPE DEFAULT NULL,
        id_epis_prob_group_in      IN epis_prob_group_hist.id_epis_prob_group%TYPE DEFAULT NULL,
        id_episode_in              IN epis_prob_group_hist.id_episode%TYPE DEFAULT NULL,
        prob_group_in              IN epis_prob_group_hist.prob_group%TYPE DEFAULT NULL,
        create_user_in             IN epis_prob_group_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN epis_prob_group_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN epis_prob_group_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN epis_prob_group_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN epis_prob_group_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN epis_prob_group_hist.update_institution%TYPE DEFAULT NULL,
        id_professional_in         IN epis_prob_group_hist.id_professional%TYPE DEFAULT NULL,
        dt_epis_prob_group_tstz_in IN epis_prob_group_hist.dt_epis_prob_group_tstz%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN epis_prob_group_hist.id_epis_prob_group_hist%TYPE IS
        l_pky    epis_prob_group_hist.id_epis_prob_group_hist%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_epis_prob_group_hist_in => l_pky,
            dt_epis_prob_group_hist_in => dt_epis_prob_group_hist_in,
            id_epis_prob_group_in      => id_epis_prob_group_in,
            id_episode_in              => id_episode_in,
            prob_group_in              => prob_group_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_professional_in         => id_professional_in,
            dt_epis_prob_group_tstz_in => dt_epis_prob_group_tstz_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_epis_prob_group_hist_in IN epis_prob_group_hist.id_epis_prob_group_hist%TYPE,
        dt_epis_prob_group_hist_in IN epis_prob_group_hist.dt_epis_prob_group_hist%TYPE DEFAULT NULL,
        id_epis_prob_group_in      IN epis_prob_group_hist.id_epis_prob_group%TYPE DEFAULT NULL,
        id_episode_in              IN epis_prob_group_hist.id_episode%TYPE DEFAULT NULL,
        prob_group_in              IN epis_prob_group_hist.prob_group%TYPE DEFAULT NULL,
        create_user_in             IN epis_prob_group_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN epis_prob_group_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN epis_prob_group_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN epis_prob_group_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN epis_prob_group_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN epis_prob_group_hist.update_institution%TYPE DEFAULT NULL,
        id_professional_in         IN epis_prob_group_hist.id_professional%TYPE DEFAULT NULL,
        dt_epis_prob_group_tstz_in IN epis_prob_group_hist.dt_epis_prob_group_tstz%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO epis_prob_group_hist
            (id_epis_prob_group_hist,
             dt_epis_prob_group_hist,
             id_epis_prob_group,
             id_episode,
             prob_group,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             id_professional,
             dt_epis_prob_group_tstz)
        VALUES
            (id_epis_prob_group_hist_in,
             dt_epis_prob_group_hist_in,
             id_epis_prob_group_in,
             id_episode_in,
             prob_group_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             id_professional_in,
             dt_epis_prob_group_tstz_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_epis_prob_group_hist_in IN epis_prob_group_hist.id_epis_prob_group_hist%TYPE,
        dt_epis_prob_group_hist_in IN epis_prob_group_hist.dt_epis_prob_group_hist%TYPE DEFAULT NULL,
        id_epis_prob_group_in      IN epis_prob_group_hist.id_epis_prob_group%TYPE DEFAULT NULL,
        id_episode_in              IN epis_prob_group_hist.id_episode%TYPE DEFAULT NULL,
        prob_group_in              IN epis_prob_group_hist.prob_group%TYPE DEFAULT NULL,
        create_user_in             IN epis_prob_group_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN epis_prob_group_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN epis_prob_group_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN epis_prob_group_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN epis_prob_group_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN epis_prob_group_hist.update_institution%TYPE DEFAULT NULL,
        id_professional_in         IN epis_prob_group_hist.id_professional%TYPE DEFAULT NULL,
        dt_epis_prob_group_tstz_in IN epis_prob_group_hist.dt_epis_prob_group_tstz%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_epis_prob_group_hist_in => id_epis_prob_group_hist_in,
            dt_epis_prob_group_hist_in => dt_epis_prob_group_hist_in,
            id_epis_prob_group_in      => id_epis_prob_group_in,
            id_episode_in              => id_episode_in,
            prob_group_in              => prob_group_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_professional_in         => id_professional_in,
            dt_epis_prob_group_tstz_in => dt_epis_prob_group_tstz_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_prob_group_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec epis_prob_group_hist%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_epis_prob_group_hist := next_key(sequence_in);
        END IF;
    
        ins(id_epis_prob_group_hist_in => l_rec.id_epis_prob_group_hist,
            dt_epis_prob_group_hist_in => l_rec.dt_epis_prob_group_hist,
            id_epis_prob_group_in      => l_rec.id_epis_prob_group,
            id_episode_in              => l_rec.id_episode,
            prob_group_in              => l_rec.prob_group,
            create_user_in             => l_rec.create_user,
            create_time_in             => l_rec.create_time,
            create_institution_in      => l_rec.create_institution,
            update_user_in             => l_rec.update_user,
            update_time_in             => l_rec.update_time,
            update_institution_in      => l_rec.update_institution,
            id_professional_in         => l_rec.id_professional,
            dt_epis_prob_group_tstz_in => l_rec.dt_epis_prob_group_tstz,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_prob_group_hist%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_prob_group_hist_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO epis_prob_group_hist
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN epis_prob_group_hist_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_prob_group_hist_in  IN epis_prob_group_hist.id_epis_prob_group_hist%TYPE,
        dt_epis_prob_group_hist_in  IN epis_prob_group_hist.dt_epis_prob_group_hist%TYPE DEFAULT NULL,
        dt_epis_prob_group_hist_nin IN BOOLEAN := TRUE,
        id_epis_prob_group_in       IN epis_prob_group_hist.id_epis_prob_group%TYPE DEFAULT NULL,
        id_epis_prob_group_nin      IN BOOLEAN := TRUE,
        id_episode_in               IN epis_prob_group_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin              IN BOOLEAN := TRUE,
        prob_group_in               IN epis_prob_group_hist.prob_group%TYPE DEFAULT NULL,
        prob_group_nin              IN BOOLEAN := TRUE,
        create_user_in              IN epis_prob_group_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN epis_prob_group_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN epis_prob_group_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN epis_prob_group_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN epis_prob_group_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN epis_prob_group_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        id_professional_in          IN epis_prob_group_hist.id_professional%TYPE DEFAULT NULL,
        id_professional_nin         IN BOOLEAN := TRUE,
        dt_epis_prob_group_tstz_in  IN epis_prob_group_hist.dt_epis_prob_group_tstz%TYPE DEFAULT NULL,
        dt_epis_prob_group_tstz_nin IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_rows_out                  table_varchar;
        l_dt_epis_prob_group_hist_n NUMBER(1) := sys.diutil.bool_to_int(dt_epis_prob_group_hist_nin);
        l_id_epis_prob_group_n      NUMBER(1) := sys.diutil.bool_to_int(id_epis_prob_group_nin);
        l_id_episode_n              NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_prob_group_n              NUMBER(1) := sys.diutil.bool_to_int(prob_group_nin);
        l_create_user_n             NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_professional_n         NUMBER(1) := sys.diutil.bool_to_int(id_professional_nin);
        l_dt_epis_prob_group_tstz_n NUMBER(1) := sys.diutil.bool_to_int(dt_epis_prob_group_tstz_nin);
    BEGIN
    
        UPDATE epis_prob_group_hist
           SET dt_epis_prob_group_hist = decode(l_dt_epis_prob_group_hist_n,
                                                0,
                                                dt_epis_prob_group_hist_in,
                                                nvl(dt_epis_prob_group_hist_in, dt_epis_prob_group_hist)),
               id_epis_prob_group      = decode(l_id_epis_prob_group_n,
                                                0,
                                                id_epis_prob_group_in,
                                                nvl(id_epis_prob_group_in, id_epis_prob_group)),
               id_episode              = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               prob_group              = decode(l_prob_group_n, 0, prob_group_in, nvl(prob_group_in, prob_group)),
               create_user             = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time             = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution      = decode(l_create_institution_n,
                                                0,
                                                create_institution_in,
                                                nvl(create_institution_in, create_institution)),
               update_user             = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time             = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution      = decode(l_update_institution_n,
                                                0,
                                                update_institution_in,
                                                nvl(update_institution_in, update_institution)),
               id_professional         = decode(l_id_professional_n,
                                                0,
                                                id_professional_in,
                                                nvl(id_professional_in, id_professional)),
               dt_epis_prob_group_tstz = decode(l_dt_epis_prob_group_tstz_n,
                                                0,
                                                dt_epis_prob_group_tstz_in,
                                                nvl(dt_epis_prob_group_tstz_in, dt_epis_prob_group_tstz))
         WHERE id_epis_prob_group_hist = id_epis_prob_group_hist_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_epis_prob_group_hist_in  IN epis_prob_group_hist.id_epis_prob_group_hist%TYPE,
        dt_epis_prob_group_hist_in  IN epis_prob_group_hist.dt_epis_prob_group_hist%TYPE DEFAULT NULL,
        dt_epis_prob_group_hist_nin IN BOOLEAN := TRUE,
        id_epis_prob_group_in       IN epis_prob_group_hist.id_epis_prob_group%TYPE DEFAULT NULL,
        id_epis_prob_group_nin      IN BOOLEAN := TRUE,
        id_episode_in               IN epis_prob_group_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin              IN BOOLEAN := TRUE,
        prob_group_in               IN epis_prob_group_hist.prob_group%TYPE DEFAULT NULL,
        prob_group_nin              IN BOOLEAN := TRUE,
        create_user_in              IN epis_prob_group_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN epis_prob_group_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN epis_prob_group_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN epis_prob_group_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN epis_prob_group_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN epis_prob_group_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        id_professional_in          IN epis_prob_group_hist.id_professional%TYPE DEFAULT NULL,
        id_professional_nin         IN BOOLEAN := TRUE,
        dt_epis_prob_group_tstz_in  IN epis_prob_group_hist.dt_epis_prob_group_tstz%TYPE DEFAULT NULL,
        dt_epis_prob_group_tstz_nin IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_prob_group_hist_in  => id_epis_prob_group_hist_in,
            dt_epis_prob_group_hist_in  => dt_epis_prob_group_hist_in,
            dt_epis_prob_group_hist_nin => dt_epis_prob_group_hist_nin,
            id_epis_prob_group_in       => id_epis_prob_group_in,
            id_epis_prob_group_nin      => id_epis_prob_group_nin,
            id_episode_in               => id_episode_in,
            id_episode_nin              => id_episode_nin,
            prob_group_in               => prob_group_in,
            prob_group_nin              => prob_group_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            id_professional_in          => id_professional_in,
            id_professional_nin         => id_professional_nin,
            dt_epis_prob_group_tstz_in  => dt_epis_prob_group_tstz_in,
            dt_epis_prob_group_tstz_nin => dt_epis_prob_group_tstz_nin,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        dt_epis_prob_group_hist_in  IN epis_prob_group_hist.dt_epis_prob_group_hist%TYPE DEFAULT NULL,
        dt_epis_prob_group_hist_nin IN BOOLEAN := TRUE,
        id_epis_prob_group_in       IN epis_prob_group_hist.id_epis_prob_group%TYPE DEFAULT NULL,
        id_epis_prob_group_nin      IN BOOLEAN := TRUE,
        id_episode_in               IN epis_prob_group_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin              IN BOOLEAN := TRUE,
        prob_group_in               IN epis_prob_group_hist.prob_group%TYPE DEFAULT NULL,
        prob_group_nin              IN BOOLEAN := TRUE,
        create_user_in              IN epis_prob_group_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN epis_prob_group_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN epis_prob_group_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN epis_prob_group_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN epis_prob_group_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN epis_prob_group_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        id_professional_in          IN epis_prob_group_hist.id_professional%TYPE DEFAULT NULL,
        id_professional_nin         IN BOOLEAN := TRUE,
        dt_epis_prob_group_tstz_in  IN epis_prob_group_hist.dt_epis_prob_group_tstz%TYPE DEFAULT NULL,
        dt_epis_prob_group_tstz_nin IN BOOLEAN := TRUE,
        where_in                    IN VARCHAR2,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_sql                       VARCHAR2(32767);
        l_rows_out                  table_varchar;
        l_dt_epis_prob_group_hist_n NUMBER(1) := sys.diutil.bool_to_int(dt_epis_prob_group_hist_nin);
        l_id_epis_prob_group_n      NUMBER(1) := sys.diutil.bool_to_int(id_epis_prob_group_nin);
        l_id_episode_n              NUMBER(1) := sys.diutil.bool_to_int(id_episode_nin);
        l_prob_group_n              NUMBER(1) := sys.diutil.bool_to_int(prob_group_nin);
        l_create_user_n             NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
        l_id_professional_n         NUMBER(1) := sys.diutil.bool_to_int(id_professional_nin);
        l_dt_epis_prob_group_tstz_n NUMBER(1) := sys.diutil.bool_to_int(dt_epis_prob_group_tstz_nin);
    BEGIN
        l_dt_epis_prob_group_hist_n := sys.diutil.bool_to_int(dt_epis_prob_group_hist_nin);
        l_id_epis_prob_group_n      := sys.diutil.bool_to_int(id_epis_prob_group_nin);
        l_id_episode_n              := sys.diutil.bool_to_int(id_episode_nin);
        l_prob_group_n              := sys.diutil.bool_to_int(prob_group_nin);
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
        l_id_professional_n         := sys.diutil.bool_to_int(id_professional_nin);
        l_dt_epis_prob_group_tstz_n := sys.diutil.bool_to_int(dt_epis_prob_group_tstz_nin);
        l_sql                       := 'UPDATE epis_prob_group_hist SET' || ' DT_EPIS_PROB_GROUP_HIST = decode (' ||
                                       l_dt_epis_prob_group_hist_n ||
                                       ',0,:DT_EPIS_PROB_GROUP_HIST_in, NVL (:DT_EPIS_PROB_GROUP_HIST_in, DT_EPIS_PROB_GROUP_HIST)) ' || ',' ||
                                       ' ID_EPIS_PROB_GROUP = decode (' || l_id_epis_prob_group_n ||
                                       ',0,:ID_EPIS_PROB_GROUP_in, NVL (:ID_EPIS_PROB_GROUP_in, ID_EPIS_PROB_GROUP)) ' || ',' ||
                                       ' ID_EPISODE = decode (' || l_id_episode_n ||
                                       ',0,:ID_EPISODE_in, NVL (:ID_EPISODE_in, ID_EPISODE)) ' || ',' ||
                                       ' PROB_GROUP = decode (' || l_prob_group_n ||
                                       ',0,:PROB_GROUP_in, NVL (:PROB_GROUP_in, PROB_GROUP)) ' || ',' ||
                                       ' CREATE_USER = decode (' || l_create_user_n ||
                                       ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                       ' CREATE_TIME = decode (' || l_create_time_n ||
                                       ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                       ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                       ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                       ' UPDATE_USER = decode (' || l_update_user_n ||
                                       ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                       ' UPDATE_TIME = decode (' || l_update_time_n ||
                                       ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                       ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                       ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' || ',' ||
                                       ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                                       ',0,:ID_PROFESSIONAL_in, NVL (:ID_PROFESSIONAL_in, ID_PROFESSIONAL)) ' || ',' ||
                                       ' DT_EPIS_PROB_GROUP_TSTZ = decode (' || l_dt_epis_prob_group_tstz_n ||
                                       ',0,:DT_EPIS_PROB_GROUP_TSTZ_in, NVL (:DT_EPIS_PROB_GROUP_TSTZ_in, DT_EPIS_PROB_GROUP_TSTZ)) ' ||
                                       ' where ' || nvl(where_in, '(1=1)') ||
                                       ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN dt_epis_prob_group_hist_in, id_epis_prob_group_in, id_episode_in, prob_group_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, id_professional_in, dt_epis_prob_group_tstz_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        dt_epis_prob_group_hist_in  IN epis_prob_group_hist.dt_epis_prob_group_hist%TYPE DEFAULT NULL,
        dt_epis_prob_group_hist_nin IN BOOLEAN := TRUE,
        id_epis_prob_group_in       IN epis_prob_group_hist.id_epis_prob_group%TYPE DEFAULT NULL,
        id_epis_prob_group_nin      IN BOOLEAN := TRUE,
        id_episode_in               IN epis_prob_group_hist.id_episode%TYPE DEFAULT NULL,
        id_episode_nin              IN BOOLEAN := TRUE,
        prob_group_in               IN epis_prob_group_hist.prob_group%TYPE DEFAULT NULL,
        prob_group_nin              IN BOOLEAN := TRUE,
        create_user_in              IN epis_prob_group_hist.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN epis_prob_group_hist.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN epis_prob_group_hist.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN epis_prob_group_hist.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN epis_prob_group_hist.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN epis_prob_group_hist.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        id_professional_in          IN epis_prob_group_hist.id_professional%TYPE DEFAULT NULL,
        id_professional_nin         IN BOOLEAN := TRUE,
        dt_epis_prob_group_tstz_in  IN epis_prob_group_hist.dt_epis_prob_group_tstz%TYPE DEFAULT NULL,
        dt_epis_prob_group_tstz_nin IN BOOLEAN := TRUE,
        where_in                    IN VARCHAR2,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(dt_epis_prob_group_hist_in  => dt_epis_prob_group_hist_in,
            dt_epis_prob_group_hist_nin => dt_epis_prob_group_hist_nin,
            id_epis_prob_group_in       => id_epis_prob_group_in,
            id_epis_prob_group_nin      => id_epis_prob_group_nin,
            id_episode_in               => id_episode_in,
            id_episode_nin              => id_episode_nin,
            prob_group_in               => prob_group_in,
            prob_group_nin              => prob_group_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            id_professional_in          => id_professional_in,
            id_professional_nin         => id_professional_nin,
            dt_epis_prob_group_tstz_in  => dt_epis_prob_group_tstz_in,
            dt_epis_prob_group_tstz_nin => dt_epis_prob_group_tstz_nin,
            where_in                    => where_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_epis_prob_group_hist_in IN epis_prob_group_hist.id_epis_prob_group_hist%TYPE,
        dt_epis_prob_group_hist_in IN epis_prob_group_hist.dt_epis_prob_group_hist%TYPE DEFAULT NULL,
        id_epis_prob_group_in      IN epis_prob_group_hist.id_epis_prob_group%TYPE DEFAULT NULL,
        id_episode_in              IN epis_prob_group_hist.id_episode%TYPE DEFAULT NULL,
        prob_group_in              IN epis_prob_group_hist.prob_group%TYPE DEFAULT NULL,
        create_user_in             IN epis_prob_group_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN epis_prob_group_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN epis_prob_group_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN epis_prob_group_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN epis_prob_group_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN epis_prob_group_hist.update_institution%TYPE DEFAULT NULL,
        id_professional_in         IN epis_prob_group_hist.id_professional%TYPE DEFAULT NULL,
        dt_epis_prob_group_tstz_in IN epis_prob_group_hist.dt_epis_prob_group_tstz%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_prob_group_hist_in => id_epis_prob_group_hist_in,
            dt_epis_prob_group_hist_in => dt_epis_prob_group_hist_in,
            id_epis_prob_group_in      => id_epis_prob_group_in,
            id_episode_in              => id_episode_in,
            prob_group_in              => prob_group_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_professional_in         => id_professional_in,
            dt_epis_prob_group_tstz_in => dt_epis_prob_group_tstz_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_epis_prob_group_hist_in => id_epis_prob_group_hist_in,
                dt_epis_prob_group_hist_in => dt_epis_prob_group_hist_in,
                id_epis_prob_group_in      => id_epis_prob_group_in,
                id_episode_in              => id_episode_in,
                prob_group_in              => prob_group_in,
                create_user_in             => create_user_in,
                create_time_in             => create_time_in,
                create_institution_in      => create_institution_in,
                update_user_in             => update_user_in,
                update_time_in             => update_time_in,
                update_institution_in      => update_institution_in,
                id_professional_in         => id_professional_in,
                dt_epis_prob_group_tstz_in => dt_epis_prob_group_tstz_in,
                handle_error_in            => handle_error_in,
                rows_out                   => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_epis_prob_group_hist_in IN epis_prob_group_hist.id_epis_prob_group_hist%TYPE,
        dt_epis_prob_group_hist_in IN epis_prob_group_hist.dt_epis_prob_group_hist%TYPE DEFAULT NULL,
        id_epis_prob_group_in      IN epis_prob_group_hist.id_epis_prob_group%TYPE DEFAULT NULL,
        id_episode_in              IN epis_prob_group_hist.id_episode%TYPE DEFAULT NULL,
        prob_group_in              IN epis_prob_group_hist.prob_group%TYPE DEFAULT NULL,
        create_user_in             IN epis_prob_group_hist.create_user%TYPE DEFAULT NULL,
        create_time_in             IN epis_prob_group_hist.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN epis_prob_group_hist.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN epis_prob_group_hist.update_user%TYPE DEFAULT NULL,
        update_time_in             IN epis_prob_group_hist.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN epis_prob_group_hist.update_institution%TYPE DEFAULT NULL,
        id_professional_in         IN epis_prob_group_hist.id_professional%TYPE DEFAULT NULL,
        dt_epis_prob_group_tstz_in IN epis_prob_group_hist.dt_epis_prob_group_tstz%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_epis_prob_group_hist_in,
                dt_epis_prob_group_hist_in,
                id_epis_prob_group_in,
                id_episode_in,
                prob_group_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                id_professional_in,
                dt_epis_prob_group_tstz_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_prob_group_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_prob_group_hist_in => rec_in.id_epis_prob_group_hist,
            dt_epis_prob_group_hist_in => rec_in.dt_epis_prob_group_hist,
            id_epis_prob_group_in      => rec_in.id_epis_prob_group,
            id_episode_in              => rec_in.id_episode,
            prob_group_in              => rec_in.prob_group,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution,
            id_professional_in         => rec_in.id_professional,
            dt_epis_prob_group_tstz_in => rec_in.dt_epis_prob_group_tstz,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN epis_prob_group_hist%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_prob_group_hist_in => rec_in.id_epis_prob_group_hist,
            dt_epis_prob_group_hist_in => rec_in.dt_epis_prob_group_hist,
            id_epis_prob_group_in      => rec_in.id_epis_prob_group,
            id_episode_in              => rec_in.id_episode,
            prob_group_in              => rec_in.prob_group,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution,
            id_professional_in         => rec_in.id_professional,
            dt_epis_prob_group_tstz_in => rec_in.dt_epis_prob_group_tstz,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_prob_group_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_epis_prob_group_hist id_epis_prob_group_hist_cc;
        l_dt_epis_prob_group_hist dt_epis_prob_group_hist_cc;
        l_id_epis_prob_group      id_epis_prob_group_cc;
        l_id_episode              id_episode_cc;
        l_prob_group              prob_group_cc;
        l_create_user             create_user_cc;
        l_create_time             create_time_cc;
        l_create_institution      create_institution_cc;
        l_update_user             update_user_cc;
        l_update_time             update_time_cc;
        l_update_institution      update_institution_cc;
        l_id_professional         id_professional_cc;
        l_dt_epis_prob_group_tstz dt_epis_prob_group_tstz_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_epis_prob_group_hist(i) := col_in(i).id_epis_prob_group_hist;
            l_dt_epis_prob_group_hist(i) := col_in(i).dt_epis_prob_group_hist;
            l_id_epis_prob_group(i) := col_in(i).id_epis_prob_group;
            l_id_episode(i) := col_in(i).id_episode;
            l_prob_group(i) := col_in(i).prob_group;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_id_professional(i) := col_in(i).id_professional;
            l_dt_epis_prob_group_tstz(i) := col_in(i).dt_epis_prob_group_tstz;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_prob_group_hist
                   SET dt_epis_prob_group_hist = nvl(l_dt_epis_prob_group_hist(i), dt_epis_prob_group_hist),
                       id_epis_prob_group      = nvl(l_id_epis_prob_group(i), id_epis_prob_group),
                       id_episode              = nvl(l_id_episode(i), id_episode),
                       prob_group              = nvl(l_prob_group(i), prob_group),
                       create_user             = nvl(l_create_user(i), create_user),
                       create_time             = nvl(l_create_time(i), create_time),
                       create_institution      = nvl(l_create_institution(i), create_institution),
                       update_user             = nvl(l_update_user(i), update_user),
                       update_time             = nvl(l_update_time(i), update_time),
                       update_institution      = nvl(l_update_institution(i), update_institution),
                       id_professional         = nvl(l_id_professional(i), id_professional),
                       dt_epis_prob_group_tstz = nvl(l_dt_epis_prob_group_tstz(i), dt_epis_prob_group_tstz)
                 WHERE id_epis_prob_group_hist = l_id_epis_prob_group_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_prob_group_hist
                   SET dt_epis_prob_group_hist = l_dt_epis_prob_group_hist(i),
                       id_epis_prob_group      = l_id_epis_prob_group(i),
                       id_episode              = l_id_episode(i),
                       prob_group              = l_prob_group(i),
                       create_user             = l_create_user(i),
                       create_time             = l_create_time(i),
                       create_institution      = l_create_institution(i),
                       update_user             = l_update_user(i),
                       update_time             = l_update_time(i),
                       update_institution      = l_update_institution(i),
                       id_professional         = l_id_professional(i),
                       dt_epis_prob_group_tstz = l_dt_epis_prob_group_tstz(i)
                 WHERE id_epis_prob_group_hist = l_id_epis_prob_group_hist(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN epis_prob_group_hist_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE epis_prob_group_hist
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE epis_prob_group_hist
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE epis_prob_group_hist
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_prob_group_hist_in IN epis_prob_group_hist.id_epis_prob_group_hist%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_prob_group_hist
         WHERE id_epis_prob_group_hist = id_epis_prob_group_hist_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_epis_prob_group_hist_in IN epis_prob_group_hist.id_epis_prob_group_hist%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_epis_prob_group_hist_in => id_epis_prob_group_hist_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END del;

    -- Delete all rows for this EPBGH_EPBG_FK foreign key value
    PROCEDURE del_epbgh_epbg_fk
    (
        id_epis_prob_group_in IN epis_prob_group_hist.id_epis_prob_group%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_prob_group_hist
         WHERE id_epis_prob_group = id_epis_prob_group_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epbgh_epbg_fk;

    -- Delete all rows for this EPBGH_EPIS_FK foreign key value
    PROCEDURE del_epbgh_epis_fk
    (
        id_episode_in   IN epis_prob_group_hist.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_prob_group_hist
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epbgh_epis_fk;

    -- Delete all rows for this EPBGH_PROF_FK foreign key value
    PROCEDURE del_epbgh_prof_fk
    (
        id_professional_in IN epis_prob_group_hist.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_prob_group_hist
         WHERE id_professional = id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_epbgh_prof_fk;

    -- Delete all rows for this EPBGH_EPBG_FK foreign key value
    PROCEDURE del_epbgh_epbg_fk
    (
        id_epis_prob_group_in IN epis_prob_group_hist.id_epis_prob_group%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epbgh_epbg_fk(id_epis_prob_group_in => id_epis_prob_group_in,
                          handle_error_in       => handle_error_in,
                          rows_out              => rows_out);
    END del_epbgh_epbg_fk;

    -- Delete all rows for this EPBGH_EPIS_FK foreign key value
    PROCEDURE del_epbgh_epis_fk
    (
        id_episode_in   IN epis_prob_group_hist.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epbgh_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_epbgh_epis_fk;

    -- Delete all rows for this EPBGH_PROF_FK foreign key value
    PROCEDURE del_epbgh_prof_fk
    (
        id_professional_in IN epis_prob_group_hist.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epbgh_prof_fk(id_professional_in => id_professional_in,
                          handle_error_in    => handle_error_in,
                          rows_out           => rows_out);
    END del_epbgh_prof_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM epis_prob_group_hist';
        ELSE
            RETURN 'DELETE FROM epis_prob_group_hist WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(epis_prob_group_hist_inout IN OUT epis_prob_group_hist%ROWTYPE) IS
    BEGIN
        epis_prob_group_hist_inout.id_epis_prob_group_hist := NULL;
        epis_prob_group_hist_inout.dt_epis_prob_group_hist := NULL;
        epis_prob_group_hist_inout.id_epis_prob_group      := NULL;
        epis_prob_group_hist_inout.id_episode              := NULL;
        epis_prob_group_hist_inout.prob_group              := NULL;
        epis_prob_group_hist_inout.create_user             := NULL;
        epis_prob_group_hist_inout.create_time             := NULL;
        epis_prob_group_hist_inout.create_institution      := NULL;
        epis_prob_group_hist_inout.update_user             := NULL;
        epis_prob_group_hist_inout.update_time             := NULL;
        epis_prob_group_hist_inout.update_institution      := NULL;
        epis_prob_group_hist_inout.id_professional         := NULL;
        epis_prob_group_hist_inout.dt_epis_prob_group_tstz := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN epis_prob_group_hist%ROWTYPE IS
        l_epis_prob_group_hist epis_prob_group_hist%ROWTYPE;
    BEGIN
        RETURN l_epis_prob_group_hist;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_prob_group_hist_tc IS
        data epis_prob_group_hist_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM epis_prob_group_hist
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_prob_group_hist_tc IS
        data epis_prob_group_hist_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_epis_prob_group_hist;
/
