/*-- Last Change Revision: $Rev: 2028089 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:09 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_epis_hidrics
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Agosto 19, 2016 15:9:26
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_epis_hidrics_in     IN epis_hidrics.id_epis_hidrics%TYPE,
        id_hidrics_type_in     IN epis_hidrics.id_hidrics_type%TYPE DEFAULT NULL,
        id_professional_in     IN epis_hidrics.id_professional%TYPE DEFAULT NULL,
        id_episode_in          IN epis_hidrics.id_episode%TYPE DEFAULT NULL,
        id_hidrics_interval_in IN epis_hidrics.id_hidrics_interval%TYPE DEFAULT NULL,
        flg_status_in          IN epis_hidrics.flg_status%TYPE DEFAULT NULL,
        notes_in               IN epis_hidrics.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_hidrics.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_hidrics.notes_cancel%TYPE DEFAULT NULL,
        id_prof_inter_in       IN epis_hidrics.id_prof_inter%TYPE DEFAULT NULL,
        notes_inter_in         IN epis_hidrics.notes_inter%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_hidrics.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_initial_tstz_in     IN epis_hidrics.dt_initial_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in         IN epis_hidrics.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN epis_hidrics.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_inter_tstz_in       IN epis_hidrics.dt_inter_tstz%TYPE DEFAULT NULL,
        create_user_in         IN epis_hidrics.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_hidrics.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_hidrics.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_hidrics.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_hidrics.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_hidrics.update_institution%TYPE DEFAULT NULL,
        flg_restricted_in      IN epis_hidrics.flg_restricted%TYPE DEFAULT NULL,
        max_intake_in          IN epis_hidrics.max_intake%TYPE DEFAULT NULL,
        min_output_in          IN epis_hidrics.min_output%TYPE DEFAULT NULL,
        dt_next_balance_in     IN epis_hidrics.dt_next_balance%TYPE DEFAULT NULL,
        id_patient_in          IN epis_hidrics.id_patient%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_hidrics.id_cancel_reason%TYPE DEFAULT NULL,
        id_prof_last_change_in IN epis_hidrics.id_prof_last_change%TYPE DEFAULT NULL,
        dt_epis_hidrics_in     IN epis_hidrics.dt_epis_hidrics%TYPE DEFAULT NULL,
        flg_action_in          IN epis_hidrics.flg_action%TYPE DEFAULT NULL,
        interval_minutes_in    IN epis_hidrics.interval_minutes%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO epis_hidrics
            (id_epis_hidrics,
             id_hidrics_type,
             id_professional,
             id_episode,
             id_hidrics_interval,
             flg_status,
             notes,
             id_prof_cancel,
             notes_cancel,
             id_prof_inter,
             notes_inter,
             dt_creation_tstz,
             dt_initial_tstz,
             dt_end_tstz,
             dt_cancel_tstz,
             dt_inter_tstz,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             flg_restricted,
             max_intake,
             min_output,
             dt_next_balance,
             id_patient,
             id_cancel_reason,
             id_prof_last_change,
             dt_epis_hidrics,
             flg_action,
             interval_minutes)
        VALUES
            (id_epis_hidrics_in,
             id_hidrics_type_in,
             id_professional_in,
             id_episode_in,
             id_hidrics_interval_in,
             flg_status_in,
             notes_in,
             id_prof_cancel_in,
             notes_cancel_in,
             id_prof_inter_in,
             notes_inter_in,
             dt_creation_tstz_in,
             dt_initial_tstz_in,
             dt_end_tstz_in,
             dt_cancel_tstz_in,
             dt_inter_tstz_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             flg_restricted_in,
             max_intake_in,
             min_output_in,
             dt_next_balance_in,
             id_patient_in,
             id_cancel_reason_in,
             id_prof_last_change_in,
             dt_epis_hidrics_in,
             flg_action_in,
             interval_minutes_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_HIDRICS');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    IF l_name = 'EHID_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'EHID_HIDIN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS_INTERVAL',
                                                        value_in           => id_hidrics_interval_in);
                    END IF;
                    IF l_name = 'EHID_HIDT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS_TYPE',
                                                        value_in           => id_hidrics_type_in);
                    END IF;
                    IF l_name = 'EHID_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'EHID_PROF_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'EHID_PROF_FK3'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_INTER',
                                                        value_in           => id_prof_inter_in);
                    END IF;
                    IF l_name = 'EPIS_HID_CR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'EPIS_HID_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'EPIS_HID_PLC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_LAST_CHANGE',
                                                        value_in           => id_prof_last_change_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_epis_hidrics_in     IN epis_hidrics.id_epis_hidrics%TYPE,
        id_hidrics_type_in     IN epis_hidrics.id_hidrics_type%TYPE DEFAULT NULL,
        id_professional_in     IN epis_hidrics.id_professional%TYPE DEFAULT NULL,
        id_episode_in          IN epis_hidrics.id_episode%TYPE DEFAULT NULL,
        id_hidrics_interval_in IN epis_hidrics.id_hidrics_interval%TYPE DEFAULT NULL,
        flg_status_in          IN epis_hidrics.flg_status%TYPE DEFAULT NULL,
        notes_in               IN epis_hidrics.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_hidrics.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_hidrics.notes_cancel%TYPE DEFAULT NULL,
        id_prof_inter_in       IN epis_hidrics.id_prof_inter%TYPE DEFAULT NULL,
        notes_inter_in         IN epis_hidrics.notes_inter%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_hidrics.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_initial_tstz_in     IN epis_hidrics.dt_initial_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in         IN epis_hidrics.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN epis_hidrics.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_inter_tstz_in       IN epis_hidrics.dt_inter_tstz%TYPE DEFAULT NULL,
        create_user_in         IN epis_hidrics.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_hidrics.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_hidrics.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_hidrics.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_hidrics.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_hidrics.update_institution%TYPE DEFAULT NULL,
        flg_restricted_in      IN epis_hidrics.flg_restricted%TYPE DEFAULT NULL,
        max_intake_in          IN epis_hidrics.max_intake%TYPE DEFAULT NULL,
        min_output_in          IN epis_hidrics.min_output%TYPE DEFAULT NULL,
        dt_next_balance_in     IN epis_hidrics.dt_next_balance%TYPE DEFAULT NULL,
        id_patient_in          IN epis_hidrics.id_patient%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_hidrics.id_cancel_reason%TYPE DEFAULT NULL,
        id_prof_last_change_in IN epis_hidrics.id_prof_last_change%TYPE DEFAULT NULL,
        dt_epis_hidrics_in     IN epis_hidrics.dt_epis_hidrics%TYPE DEFAULT NULL,
        flg_action_in          IN epis_hidrics.flg_action%TYPE DEFAULT NULL,
        interval_minutes_in    IN epis_hidrics.interval_minutes%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_epis_hidrics_in     => id_epis_hidrics_in,
            id_hidrics_type_in     => id_hidrics_type_in,
            id_professional_in     => id_professional_in,
            id_episode_in          => id_episode_in,
            id_hidrics_interval_in => id_hidrics_interval_in,
            flg_status_in          => flg_status_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_prof_inter_in       => id_prof_inter_in,
            notes_inter_in         => notes_inter_in,
            dt_creation_tstz_in    => dt_creation_tstz_in,
            dt_initial_tstz_in     => dt_initial_tstz_in,
            dt_end_tstz_in         => dt_end_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_inter_tstz_in       => dt_inter_tstz_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_restricted_in      => flg_restricted_in,
            max_intake_in          => max_intake_in,
            min_output_in          => min_output_in,
            dt_next_balance_in     => dt_next_balance_in,
            id_patient_in          => id_patient_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_prof_last_change_in => id_prof_last_change_in,
            dt_epis_hidrics_in     => dt_epis_hidrics_in,
            flg_action_in          => flg_action_in,
            interval_minutes_in    => interval_minutes_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_hidrics%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec epis_hidrics%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_epis_hidrics := next_key(sequence_in);
        END IF;
        ins(id_epis_hidrics_in     => l_rec.id_epis_hidrics,
            id_hidrics_type_in     => l_rec.id_hidrics_type,
            id_professional_in     => l_rec.id_professional,
            id_episode_in          => l_rec.id_episode,
            id_hidrics_interval_in => l_rec.id_hidrics_interval,
            flg_status_in          => l_rec.flg_status,
            notes_in               => l_rec.notes,
            id_prof_cancel_in      => l_rec.id_prof_cancel,
            notes_cancel_in        => l_rec.notes_cancel,
            id_prof_inter_in       => l_rec.id_prof_inter,
            notes_inter_in         => l_rec.notes_inter,
            dt_creation_tstz_in    => l_rec.dt_creation_tstz,
            dt_initial_tstz_in     => l_rec.dt_initial_tstz,
            dt_end_tstz_in         => l_rec.dt_end_tstz,
            dt_cancel_tstz_in      => l_rec.dt_cancel_tstz,
            dt_inter_tstz_in       => l_rec.dt_inter_tstz,
            create_user_in         => l_rec.create_user,
            create_time_in         => l_rec.create_time,
            create_institution_in  => l_rec.create_institution,
            update_user_in         => l_rec.update_user,
            update_time_in         => l_rec.update_time,
            update_institution_in  => l_rec.update_institution,
            flg_restricted_in      => l_rec.flg_restricted,
            max_intake_in          => l_rec.max_intake,
            min_output_in          => l_rec.min_output,
            dt_next_balance_in     => l_rec.dt_next_balance,
            id_patient_in          => l_rec.id_patient,
            id_cancel_reason_in    => l_rec.id_cancel_reason,
            id_prof_last_change_in => l_rec.id_prof_last_change,
            dt_epis_hidrics_in     => l_rec.dt_epis_hidrics,
            flg_action_in          => l_rec.flg_action,
            interval_minutes_in    => l_rec.interval_minutes,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN epis_hidrics%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN epis_hidrics.id_epis_hidrics%TYPE
    
     IS
        retval epis_hidrics.id_epis_hidrics%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_epis_hidrics.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_EPIS_HIDRICS'));
    END next_key;

    PROCEDURE ins
    (
        id_hidrics_type_in     IN epis_hidrics.id_hidrics_type%TYPE DEFAULT NULL,
        id_professional_in     IN epis_hidrics.id_professional%TYPE DEFAULT NULL,
        id_episode_in          IN epis_hidrics.id_episode%TYPE DEFAULT NULL,
        id_hidrics_interval_in IN epis_hidrics.id_hidrics_interval%TYPE DEFAULT NULL,
        flg_status_in          IN epis_hidrics.flg_status%TYPE DEFAULT NULL,
        notes_in               IN epis_hidrics.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_hidrics.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_hidrics.notes_cancel%TYPE DEFAULT NULL,
        id_prof_inter_in       IN epis_hidrics.id_prof_inter%TYPE DEFAULT NULL,
        notes_inter_in         IN epis_hidrics.notes_inter%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_hidrics.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_initial_tstz_in     IN epis_hidrics.dt_initial_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in         IN epis_hidrics.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN epis_hidrics.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_inter_tstz_in       IN epis_hidrics.dt_inter_tstz%TYPE DEFAULT NULL,
        create_user_in         IN epis_hidrics.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_hidrics.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_hidrics.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_hidrics.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_hidrics.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_hidrics.update_institution%TYPE DEFAULT NULL,
        flg_restricted_in      IN epis_hidrics.flg_restricted%TYPE DEFAULT NULL,
        max_intake_in          IN epis_hidrics.max_intake%TYPE DEFAULT NULL,
        min_output_in          IN epis_hidrics.min_output%TYPE DEFAULT NULL,
        dt_next_balance_in     IN epis_hidrics.dt_next_balance%TYPE DEFAULT NULL,
        id_patient_in          IN epis_hidrics.id_patient%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_hidrics.id_cancel_reason%TYPE DEFAULT NULL,
        id_prof_last_change_in IN epis_hidrics.id_prof_last_change%TYPE DEFAULT NULL,
        dt_epis_hidrics_in     IN epis_hidrics.dt_epis_hidrics%TYPE DEFAULT NULL,
        flg_action_in          IN epis_hidrics.flg_action%TYPE DEFAULT NULL,
        interval_minutes_in    IN epis_hidrics.interval_minutes%TYPE DEFAULT NULL,
        id_epis_hidrics_out    IN OUT epis_hidrics.id_epis_hidrics%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky epis_hidrics.id_epis_hidrics%TYPE := next_key;
    BEGIN
        ins(id_epis_hidrics_in     => l_pky,
            id_hidrics_type_in     => id_hidrics_type_in,
            id_professional_in     => id_professional_in,
            id_episode_in          => id_episode_in,
            id_hidrics_interval_in => id_hidrics_interval_in,
            flg_status_in          => flg_status_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_prof_inter_in       => id_prof_inter_in,
            notes_inter_in         => notes_inter_in,
            dt_creation_tstz_in    => dt_creation_tstz_in,
            dt_initial_tstz_in     => dt_initial_tstz_in,
            dt_end_tstz_in         => dt_end_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_inter_tstz_in       => dt_inter_tstz_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_restricted_in      => flg_restricted_in,
            max_intake_in          => max_intake_in,
            min_output_in          => min_output_in,
            dt_next_balance_in     => dt_next_balance_in,
            id_patient_in          => id_patient_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_prof_last_change_in => id_prof_last_change_in,
            dt_epis_hidrics_in     => dt_epis_hidrics_in,
            flg_action_in          => flg_action_in,
            interval_minutes_in    => interval_minutes_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        id_epis_hidrics_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_hidrics_type_in     IN epis_hidrics.id_hidrics_type%TYPE DEFAULT NULL,
        id_professional_in     IN epis_hidrics.id_professional%TYPE DEFAULT NULL,
        id_episode_in          IN epis_hidrics.id_episode%TYPE DEFAULT NULL,
        id_hidrics_interval_in IN epis_hidrics.id_hidrics_interval%TYPE DEFAULT NULL,
        flg_status_in          IN epis_hidrics.flg_status%TYPE DEFAULT NULL,
        notes_in               IN epis_hidrics.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_hidrics.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_hidrics.notes_cancel%TYPE DEFAULT NULL,
        id_prof_inter_in       IN epis_hidrics.id_prof_inter%TYPE DEFAULT NULL,
        notes_inter_in         IN epis_hidrics.notes_inter%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_hidrics.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_initial_tstz_in     IN epis_hidrics.dt_initial_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in         IN epis_hidrics.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN epis_hidrics.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_inter_tstz_in       IN epis_hidrics.dt_inter_tstz%TYPE DEFAULT NULL,
        create_user_in         IN epis_hidrics.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_hidrics.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_hidrics.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_hidrics.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_hidrics.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_hidrics.update_institution%TYPE DEFAULT NULL,
        flg_restricted_in      IN epis_hidrics.flg_restricted%TYPE DEFAULT NULL,
        max_intake_in          IN epis_hidrics.max_intake%TYPE DEFAULT NULL,
        min_output_in          IN epis_hidrics.min_output%TYPE DEFAULT NULL,
        dt_next_balance_in     IN epis_hidrics.dt_next_balance%TYPE DEFAULT NULL,
        id_patient_in          IN epis_hidrics.id_patient%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_hidrics.id_cancel_reason%TYPE DEFAULT NULL,
        id_prof_last_change_in IN epis_hidrics.id_prof_last_change%TYPE DEFAULT NULL,
        dt_epis_hidrics_in     IN epis_hidrics.dt_epis_hidrics%TYPE DEFAULT NULL,
        flg_action_in          IN epis_hidrics.flg_action%TYPE DEFAULT NULL,
        interval_minutes_in    IN epis_hidrics.interval_minutes%TYPE DEFAULT NULL,
        id_epis_hidrics_out    IN OUT epis_hidrics.id_epis_hidrics%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_hidrics_type_in     => id_hidrics_type_in,
            id_professional_in     => id_professional_in,
            id_episode_in          => id_episode_in,
            id_hidrics_interval_in => id_hidrics_interval_in,
            flg_status_in          => flg_status_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_prof_inter_in       => id_prof_inter_in,
            notes_inter_in         => notes_inter_in,
            dt_creation_tstz_in    => dt_creation_tstz_in,
            dt_initial_tstz_in     => dt_initial_tstz_in,
            dt_end_tstz_in         => dt_end_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_inter_tstz_in       => dt_inter_tstz_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_restricted_in      => flg_restricted_in,
            max_intake_in          => max_intake_in,
            min_output_in          => min_output_in,
            dt_next_balance_in     => dt_next_balance_in,
            id_patient_in          => id_patient_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_prof_last_change_in => id_prof_last_change_in,
            dt_epis_hidrics_in     => dt_epis_hidrics_in,
            flg_action_in          => flg_action_in,
            interval_minutes_in    => interval_minutes_in,
            id_epis_hidrics_out    => id_epis_hidrics_out,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    FUNCTION ins
    (
        id_hidrics_type_in     IN epis_hidrics.id_hidrics_type%TYPE DEFAULT NULL,
        id_professional_in     IN epis_hidrics.id_professional%TYPE DEFAULT NULL,
        id_episode_in          IN epis_hidrics.id_episode%TYPE DEFAULT NULL,
        id_hidrics_interval_in IN epis_hidrics.id_hidrics_interval%TYPE DEFAULT NULL,
        flg_status_in          IN epis_hidrics.flg_status%TYPE DEFAULT NULL,
        notes_in               IN epis_hidrics.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_hidrics.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_hidrics.notes_cancel%TYPE DEFAULT NULL,
        id_prof_inter_in       IN epis_hidrics.id_prof_inter%TYPE DEFAULT NULL,
        notes_inter_in         IN epis_hidrics.notes_inter%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_hidrics.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_initial_tstz_in     IN epis_hidrics.dt_initial_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in         IN epis_hidrics.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN epis_hidrics.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_inter_tstz_in       IN epis_hidrics.dt_inter_tstz%TYPE DEFAULT NULL,
        create_user_in         IN epis_hidrics.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_hidrics.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_hidrics.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_hidrics.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_hidrics.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_hidrics.update_institution%TYPE DEFAULT NULL,
        flg_restricted_in      IN epis_hidrics.flg_restricted%TYPE DEFAULT NULL,
        max_intake_in          IN epis_hidrics.max_intake%TYPE DEFAULT NULL,
        min_output_in          IN epis_hidrics.min_output%TYPE DEFAULT NULL,
        dt_next_balance_in     IN epis_hidrics.dt_next_balance%TYPE DEFAULT NULL,
        id_patient_in          IN epis_hidrics.id_patient%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_hidrics.id_cancel_reason%TYPE DEFAULT NULL,
        id_prof_last_change_in IN epis_hidrics.id_prof_last_change%TYPE DEFAULT NULL,
        dt_epis_hidrics_in     IN epis_hidrics.dt_epis_hidrics%TYPE DEFAULT NULL,
        flg_action_in          IN epis_hidrics.flg_action%TYPE DEFAULT NULL,
        interval_minutes_in    IN epis_hidrics.interval_minutes%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) RETURN epis_hidrics.id_epis_hidrics%TYPE IS
        l_pky epis_hidrics.id_epis_hidrics%TYPE := next_key;
    BEGIN
        ins(id_epis_hidrics_in     => l_pky,
            id_hidrics_type_in     => id_hidrics_type_in,
            id_professional_in     => id_professional_in,
            id_episode_in          => id_episode_in,
            id_hidrics_interval_in => id_hidrics_interval_in,
            flg_status_in          => flg_status_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_prof_inter_in       => id_prof_inter_in,
            notes_inter_in         => notes_inter_in,
            dt_creation_tstz_in    => dt_creation_tstz_in,
            dt_initial_tstz_in     => dt_initial_tstz_in,
            dt_end_tstz_in         => dt_end_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_inter_tstz_in       => dt_inter_tstz_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_restricted_in      => flg_restricted_in,
            max_intake_in          => max_intake_in,
            min_output_in          => min_output_in,
            dt_next_balance_in     => dt_next_balance_in,
            id_patient_in          => id_patient_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_prof_last_change_in => id_prof_last_change_in,
            dt_epis_hidrics_in     => dt_epis_hidrics_in,
            flg_action_in          => flg_action_in,
            interval_minutes_in    => interval_minutes_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_hidrics_type_in     IN epis_hidrics.id_hidrics_type%TYPE DEFAULT NULL,
        id_professional_in     IN epis_hidrics.id_professional%TYPE DEFAULT NULL,
        id_episode_in          IN epis_hidrics.id_episode%TYPE DEFAULT NULL,
        id_hidrics_interval_in IN epis_hidrics.id_hidrics_interval%TYPE DEFAULT NULL,
        flg_status_in          IN epis_hidrics.flg_status%TYPE DEFAULT NULL,
        notes_in               IN epis_hidrics.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_hidrics.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_hidrics.notes_cancel%TYPE DEFAULT NULL,
        id_prof_inter_in       IN epis_hidrics.id_prof_inter%TYPE DEFAULT NULL,
        notes_inter_in         IN epis_hidrics.notes_inter%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_hidrics.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_initial_tstz_in     IN epis_hidrics.dt_initial_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in         IN epis_hidrics.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN epis_hidrics.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_inter_tstz_in       IN epis_hidrics.dt_inter_tstz%TYPE DEFAULT NULL,
        create_user_in         IN epis_hidrics.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_hidrics.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_hidrics.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_hidrics.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_hidrics.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_hidrics.update_institution%TYPE DEFAULT NULL,
        flg_restricted_in      IN epis_hidrics.flg_restricted%TYPE DEFAULT NULL,
        max_intake_in          IN epis_hidrics.max_intake%TYPE DEFAULT NULL,
        min_output_in          IN epis_hidrics.min_output%TYPE DEFAULT NULL,
        dt_next_balance_in     IN epis_hidrics.dt_next_balance%TYPE DEFAULT NULL,
        id_patient_in          IN epis_hidrics.id_patient%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_hidrics.id_cancel_reason%TYPE DEFAULT NULL,
        id_prof_last_change_in IN epis_hidrics.id_prof_last_change%TYPE DEFAULT NULL,
        dt_epis_hidrics_in     IN epis_hidrics.dt_epis_hidrics%TYPE DEFAULT NULL,
        flg_action_in          IN epis_hidrics.flg_action%TYPE DEFAULT NULL,
        interval_minutes_in    IN epis_hidrics.interval_minutes%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) RETURN epis_hidrics.id_epis_hidrics%TYPE IS
        l_pky    epis_hidrics.id_epis_hidrics%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_epis_hidrics_in     => l_pky,
            id_hidrics_type_in     => id_hidrics_type_in,
            id_professional_in     => id_professional_in,
            id_episode_in          => id_episode_in,
            id_hidrics_interval_in => id_hidrics_interval_in,
            flg_status_in          => flg_status_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_prof_inter_in       => id_prof_inter_in,
            notes_inter_in         => notes_inter_in,
            dt_creation_tstz_in    => dt_creation_tstz_in,
            dt_initial_tstz_in     => dt_initial_tstz_in,
            dt_end_tstz_in         => dt_end_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_inter_tstz_in       => dt_inter_tstz_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_restricted_in      => flg_restricted_in,
            max_intake_in          => max_intake_in,
            min_output_in          => min_output_in,
            dt_next_balance_in     => dt_next_balance_in,
            id_patient_in          => id_patient_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_prof_last_change_in => id_prof_last_change_in,
            dt_epis_hidrics_in     => dt_epis_hidrics_in,
            flg_action_in          => flg_action_in,
            interval_minutes_in    => interval_minutes_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_hidrics_type_in     IN epis_hidrics.id_hidrics_type%TYPE DEFAULT NULL,
        id_professional_in     IN epis_hidrics.id_professional%TYPE DEFAULT NULL,
        id_episode_in          IN epis_hidrics.id_episode%TYPE DEFAULT NULL,
        id_hidrics_interval_in IN epis_hidrics.id_hidrics_interval%TYPE DEFAULT NULL,
        flg_status_in          IN epis_hidrics.flg_status%TYPE DEFAULT NULL,
        notes_in               IN epis_hidrics.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_hidrics.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_hidrics.notes_cancel%TYPE DEFAULT NULL,
        id_prof_inter_in       IN epis_hidrics.id_prof_inter%TYPE DEFAULT NULL,
        notes_inter_in         IN epis_hidrics.notes_inter%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_hidrics.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_initial_tstz_in     IN epis_hidrics.dt_initial_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in         IN epis_hidrics.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN epis_hidrics.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_inter_tstz_in       IN epis_hidrics.dt_inter_tstz%TYPE DEFAULT NULL,
        create_user_in         IN epis_hidrics.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_hidrics.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_hidrics.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_hidrics.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_hidrics.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_hidrics.update_institution%TYPE DEFAULT NULL,
        flg_restricted_in      IN epis_hidrics.flg_restricted%TYPE DEFAULT NULL,
        max_intake_in          IN epis_hidrics.max_intake%TYPE DEFAULT NULL,
        min_output_in          IN epis_hidrics.min_output%TYPE DEFAULT NULL,
        dt_next_balance_in     IN epis_hidrics.dt_next_balance%TYPE DEFAULT NULL,
        id_patient_in          IN epis_hidrics.id_patient%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_hidrics.id_cancel_reason%TYPE DEFAULT NULL,
        id_prof_last_change_in IN epis_hidrics.id_prof_last_change%TYPE DEFAULT NULL,
        dt_epis_hidrics_in     IN epis_hidrics.dt_epis_hidrics%TYPE DEFAULT NULL,
        flg_action_in          IN epis_hidrics.flg_action%TYPE DEFAULT NULL,
        interval_minutes_in    IN epis_hidrics.interval_minutes%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky epis_hidrics.id_epis_hidrics%TYPE := next_key;
    BEGIN
        ins(id_epis_hidrics_in     => l_pky,
            id_hidrics_type_in     => id_hidrics_type_in,
            id_professional_in     => id_professional_in,
            id_episode_in          => id_episode_in,
            id_hidrics_interval_in => id_hidrics_interval_in,
            flg_status_in          => flg_status_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_prof_inter_in       => id_prof_inter_in,
            notes_inter_in         => notes_inter_in,
            dt_creation_tstz_in    => dt_creation_tstz_in,
            dt_initial_tstz_in     => dt_initial_tstz_in,
            dt_end_tstz_in         => dt_end_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_inter_tstz_in       => dt_inter_tstz_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_restricted_in      => flg_restricted_in,
            max_intake_in          => max_intake_in,
            min_output_in          => min_output_in,
            dt_next_balance_in     => dt_next_balance_in,
            id_patient_in          => id_patient_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_prof_last_change_in => id_prof_last_change_in,
            dt_epis_hidrics_in     => dt_epis_hidrics_in,
            flg_action_in          => flg_action_in,
            interval_minutes_in    => interval_minutes_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_hidrics_type_in     IN epis_hidrics.id_hidrics_type%TYPE DEFAULT NULL,
        id_professional_in     IN epis_hidrics.id_professional%TYPE DEFAULT NULL,
        id_episode_in          IN epis_hidrics.id_episode%TYPE DEFAULT NULL,
        id_hidrics_interval_in IN epis_hidrics.id_hidrics_interval%TYPE DEFAULT NULL,
        flg_status_in          IN epis_hidrics.flg_status%TYPE DEFAULT NULL,
        notes_in               IN epis_hidrics.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_hidrics.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_hidrics.notes_cancel%TYPE DEFAULT NULL,
        id_prof_inter_in       IN epis_hidrics.id_prof_inter%TYPE DEFAULT NULL,
        notes_inter_in         IN epis_hidrics.notes_inter%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_hidrics.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_initial_tstz_in     IN epis_hidrics.dt_initial_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in         IN epis_hidrics.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN epis_hidrics.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_inter_tstz_in       IN epis_hidrics.dt_inter_tstz%TYPE DEFAULT NULL,
        create_user_in         IN epis_hidrics.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_hidrics.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_hidrics.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_hidrics.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_hidrics.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_hidrics.update_institution%TYPE DEFAULT NULL,
        flg_restricted_in      IN epis_hidrics.flg_restricted%TYPE DEFAULT NULL,
        max_intake_in          IN epis_hidrics.max_intake%TYPE DEFAULT NULL,
        min_output_in          IN epis_hidrics.min_output%TYPE DEFAULT NULL,
        dt_next_balance_in     IN epis_hidrics.dt_next_balance%TYPE DEFAULT NULL,
        id_patient_in          IN epis_hidrics.id_patient%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_hidrics.id_cancel_reason%TYPE DEFAULT NULL,
        id_prof_last_change_in IN epis_hidrics.id_prof_last_change%TYPE DEFAULT NULL,
        dt_epis_hidrics_in     IN epis_hidrics.dt_epis_hidrics%TYPE DEFAULT NULL,
        flg_action_in          IN epis_hidrics.flg_action%TYPE DEFAULT NULL,
        interval_minutes_in    IN epis_hidrics.interval_minutes%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        l_pky    epis_hidrics.id_epis_hidrics%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_epis_hidrics_in     => l_pky,
            id_hidrics_type_in     => id_hidrics_type_in,
            id_professional_in     => id_professional_in,
            id_episode_in          => id_episode_in,
            id_hidrics_interval_in => id_hidrics_interval_in,
            flg_status_in          => flg_status_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_prof_inter_in       => id_prof_inter_in,
            notes_inter_in         => notes_inter_in,
            dt_creation_tstz_in    => dt_creation_tstz_in,
            dt_initial_tstz_in     => dt_initial_tstz_in,
            dt_end_tstz_in         => dt_end_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_inter_tstz_in       => dt_inter_tstz_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_restricted_in      => flg_restricted_in,
            max_intake_in          => max_intake_in,
            min_output_in          => min_output_in,
            dt_next_balance_in     => dt_next_balance_in,
            id_patient_in          => id_patient_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_prof_last_change_in => id_prof_last_change_in,
            dt_epis_hidrics_in     => dt_epis_hidrics_in,
            flg_action_in          => flg_action_in,
            interval_minutes_in    => interval_minutes_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN epis_hidrics_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO epis_hidrics
                    (id_epis_hidrics,
                     id_hidrics_type,
                     id_professional,
                     id_episode,
                     id_hidrics_interval,
                     flg_status,
                     notes,
                     id_prof_cancel,
                     notes_cancel,
                     id_prof_inter,
                     notes_inter,
                     dt_creation_tstz,
                     dt_initial_tstz,
                     dt_end_tstz,
                     dt_cancel_tstz,
                     dt_inter_tstz,
                     create_user,
                     create_time,
                     create_institution,
                     update_user,
                     update_time,
                     update_institution,
                     flg_restricted,
                     max_intake,
                     min_output,
                     dt_next_balance,
                     id_patient,
                     id_cancel_reason,
                     id_prof_last_change,
                     dt_epis_hidrics,
                     flg_action,
                     interval_minutes)
                VALUES
                    (rows_in(indx).id_epis_hidrics,
                     rows_in(indx).id_hidrics_type,
                     rows_in(indx).id_professional,
                     rows_in(indx).id_episode,
                     rows_in(indx).id_hidrics_interval,
                     rows_in(indx).flg_status,
                     rows_in(indx).notes,
                     rows_in(indx).id_prof_cancel,
                     rows_in(indx).notes_cancel,
                     rows_in(indx).id_prof_inter,
                     rows_in(indx).notes_inter,
                     rows_in(indx).dt_creation_tstz,
                     rows_in(indx).dt_initial_tstz,
                     rows_in(indx).dt_end_tstz,
                     rows_in(indx).dt_cancel_tstz,
                     rows_in(indx).dt_inter_tstz,
                     rows_in(indx).create_user,
                     rows_in(indx).create_time,
                     rows_in(indx).create_institution,
                     rows_in(indx).update_user,
                     rows_in(indx).update_time,
                     rows_in(indx).update_institution,
                     rows_in(indx).flg_restricted,
                     rows_in(indx).max_intake,
                     rows_in(indx).min_output,
                     rows_in(indx).dt_next_balance,
                     rows_in(indx).id_patient,
                     rows_in(indx).id_cancel_reason,
                     rows_in(indx).id_prof_last_change,
                     rows_in(indx).dt_epis_hidrics,
                     rows_in(indx).flg_action,
                     rows_in(indx).interval_minutes)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_HIDRICS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_epis_hidrics,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_HIDRICS_TYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_hidrics_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_HIDRICS_INTERVAL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_hidrics_interval,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_CANCEL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CANCEL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .notes_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_INTER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_inter,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_INTER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .notes_inter,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CREATION_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_creation_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_INITIAL_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_initial_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_END_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_end_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_CANCEL_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_cancel_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_INTER_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_inter_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_RESTRICTED _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_restricted,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MAX_INTAKE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .max_intake,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'MIN_OUTPUT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .min_output,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_NEXT_BALANCE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_next_balance,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_REASON _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_cancel_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_LAST_CHANGE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_last_change,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_EPIS_HIDRICS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_epis_hidrics,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_ACTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_action,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'INTERVAL_MINUTES _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .interval_minutes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'EPIS_HIDRICS',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN epis_hidrics_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_epis_hidrics_in      IN epis_hidrics.id_epis_hidrics%TYPE,
        id_hidrics_type_in      IN epis_hidrics.id_hidrics_type%TYPE DEFAULT NULL,
        id_hidrics_type_nin     IN BOOLEAN := TRUE,
        id_professional_in      IN epis_hidrics.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        id_episode_in           IN epis_hidrics.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        id_hidrics_interval_in  IN epis_hidrics.id_hidrics_interval%TYPE DEFAULT NULL,
        id_hidrics_interval_nin IN BOOLEAN := TRUE,
        flg_status_in           IN epis_hidrics.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        notes_in                IN epis_hidrics.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN epis_hidrics.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        notes_cancel_in         IN epis_hidrics.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_prof_inter_in        IN epis_hidrics.id_prof_inter%TYPE DEFAULT NULL,
        id_prof_inter_nin       IN BOOLEAN := TRUE,
        notes_inter_in          IN epis_hidrics.notes_inter%TYPE DEFAULT NULL,
        notes_inter_nin         IN BOOLEAN := TRUE,
        dt_creation_tstz_in     IN epis_hidrics.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_creation_tstz_nin    IN BOOLEAN := TRUE,
        dt_initial_tstz_in      IN epis_hidrics.dt_initial_tstz%TYPE DEFAULT NULL,
        dt_initial_tstz_nin     IN BOOLEAN := TRUE,
        dt_end_tstz_in          IN epis_hidrics.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin         IN BOOLEAN := TRUE,
        dt_cancel_tstz_in       IN epis_hidrics.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin      IN BOOLEAN := TRUE,
        dt_inter_tstz_in        IN epis_hidrics.dt_inter_tstz%TYPE DEFAULT NULL,
        dt_inter_tstz_nin       IN BOOLEAN := TRUE,
        create_user_in          IN epis_hidrics.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_hidrics.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_hidrics.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_hidrics.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_hidrics.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_hidrics.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        flg_restricted_in       IN epis_hidrics.flg_restricted%TYPE DEFAULT NULL,
        flg_restricted_nin      IN BOOLEAN := TRUE,
        max_intake_in           IN epis_hidrics.max_intake%TYPE DEFAULT NULL,
        max_intake_nin          IN BOOLEAN := TRUE,
        min_output_in           IN epis_hidrics.min_output%TYPE DEFAULT NULL,
        min_output_nin          IN BOOLEAN := TRUE,
        dt_next_balance_in      IN epis_hidrics.dt_next_balance%TYPE DEFAULT NULL,
        dt_next_balance_nin     IN BOOLEAN := TRUE,
        id_patient_in           IN epis_hidrics.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN epis_hidrics.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        id_prof_last_change_in  IN epis_hidrics.id_prof_last_change%TYPE DEFAULT NULL,
        id_prof_last_change_nin IN BOOLEAN := TRUE,
        dt_epis_hidrics_in      IN epis_hidrics.dt_epis_hidrics%TYPE DEFAULT NULL,
        dt_epis_hidrics_nin     IN BOOLEAN := TRUE,
        flg_action_in           IN epis_hidrics.flg_action%TYPE DEFAULT NULL,
        flg_action_nin          IN BOOLEAN := TRUE,
        interval_minutes_in     IN epis_hidrics.interval_minutes%TYPE DEFAULT NULL,
        interval_minutes_nin    IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_id_hidrics_type_n     NUMBER(1);
        l_id_professional_n     NUMBER(1);
        l_id_episode_n          NUMBER(1);
        l_id_hidrics_interval_n NUMBER(1);
        l_flg_status_n          NUMBER(1);
        l_notes_n               NUMBER(1);
        l_id_prof_cancel_n      NUMBER(1);
        l_notes_cancel_n        NUMBER(1);
        l_id_prof_inter_n       NUMBER(1);
        l_notes_inter_n         NUMBER(1);
        l_dt_creation_tstz_n    NUMBER(1);
        l_dt_initial_tstz_n     NUMBER(1);
        l_dt_end_tstz_n         NUMBER(1);
        l_dt_cancel_tstz_n      NUMBER(1);
        l_dt_inter_tstz_n       NUMBER(1);
        l_create_user_n         NUMBER(1);
        l_create_time_n         NUMBER(1);
        l_create_institution_n  NUMBER(1);
        l_update_user_n         NUMBER(1);
        l_update_time_n         NUMBER(1);
        l_update_institution_n  NUMBER(1);
        l_flg_restricted_n      NUMBER(1);
        l_max_intake_n          NUMBER(1);
        l_min_output_n          NUMBER(1);
        l_dt_next_balance_n     NUMBER(1);
        l_id_patient_n          NUMBER(1);
        l_id_cancel_reason_n    NUMBER(1);
        l_id_prof_last_change_n NUMBER(1);
        l_dt_epis_hidrics_n     NUMBER(1);
        l_flg_action_n          NUMBER(1);
        l_interval_minutes_n    NUMBER(1);
    BEGIN
    
        l_id_hidrics_type_n     := sys.diutil.bool_to_int(id_hidrics_type_nin);
        l_id_professional_n     := sys.diutil.bool_to_int(id_professional_nin);
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
        l_id_hidrics_interval_n := sys.diutil.bool_to_int(id_hidrics_interval_nin);
        l_flg_status_n          := sys.diutil.bool_to_int(flg_status_nin);
        l_notes_n               := sys.diutil.bool_to_int(notes_nin);
        l_id_prof_cancel_n      := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n        := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_prof_inter_n       := sys.diutil.bool_to_int(id_prof_inter_nin);
        l_notes_inter_n         := sys.diutil.bool_to_int(notes_inter_nin);
        l_dt_creation_tstz_n    := sys.diutil.bool_to_int(dt_creation_tstz_nin);
        l_dt_initial_tstz_n     := sys.diutil.bool_to_int(dt_initial_tstz_nin);
        l_dt_end_tstz_n         := sys.diutil.bool_to_int(dt_end_tstz_nin);
        l_dt_cancel_tstz_n      := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_dt_inter_tstz_n       := sys.diutil.bool_to_int(dt_inter_tstz_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_restricted_n      := sys.diutil.bool_to_int(flg_restricted_nin);
        l_max_intake_n          := sys.diutil.bool_to_int(max_intake_nin);
        l_min_output_n          := sys.diutil.bool_to_int(min_output_nin);
        l_dt_next_balance_n     := sys.diutil.bool_to_int(dt_next_balance_nin);
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
        l_id_cancel_reason_n    := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_id_prof_last_change_n := sys.diutil.bool_to_int(id_prof_last_change_nin);
        l_dt_epis_hidrics_n     := sys.diutil.bool_to_int(dt_epis_hidrics_nin);
        l_flg_action_n          := sys.diutil.bool_to_int(flg_action_nin);
        l_interval_minutes_n    := sys.diutil.bool_to_int(interval_minutes_nin);
    
        UPDATE epis_hidrics
           SET id_hidrics_type     = decode(l_id_hidrics_type_n,
                                            0,
                                            id_hidrics_type_in,
                                            nvl(id_hidrics_type_in, id_hidrics_type)),
               id_professional     = decode(l_id_professional_n,
                                            0,
                                            id_professional_in,
                                            nvl(id_professional_in, id_professional)),
               id_episode          = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_hidrics_interval = decode(l_id_hidrics_interval_n,
                                            0,
                                            id_hidrics_interval_in,
                                            nvl(id_hidrics_interval_in, id_hidrics_interval)),
               flg_status          = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               notes               = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               id_prof_cancel      = decode(l_id_prof_cancel_n,
                                            0,
                                            id_prof_cancel_in,
                                            nvl(id_prof_cancel_in, id_prof_cancel)),
               notes_cancel        = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               id_prof_inter       = decode(l_id_prof_inter_n, 0, id_prof_inter_in, nvl(id_prof_inter_in, id_prof_inter)),
               notes_inter         = decode(l_notes_inter_n, 0, notes_inter_in, nvl(notes_inter_in, notes_inter)),
               dt_creation_tstz    = decode(l_dt_creation_tstz_n,
                                            0,
                                            dt_creation_tstz_in,
                                            nvl(dt_creation_tstz_in, dt_creation_tstz)),
               dt_initial_tstz     = decode(l_dt_initial_tstz_n,
                                            0,
                                            dt_initial_tstz_in,
                                            nvl(dt_initial_tstz_in, dt_initial_tstz)),
               dt_end_tstz         = decode(l_dt_end_tstz_n, 0, dt_end_tstz_in, nvl(dt_end_tstz_in, dt_end_tstz)),
               dt_cancel_tstz      = decode(l_dt_cancel_tstz_n,
                                            0,
                                            dt_cancel_tstz_in,
                                            nvl(dt_cancel_tstz_in, dt_cancel_tstz)),
               dt_inter_tstz       = decode(l_dt_inter_tstz_n, 0, dt_inter_tstz_in, nvl(dt_inter_tstz_in, dt_inter_tstz)),
               create_user         = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time         = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution  = decode(l_create_institution_n,
                                            0,
                                            create_institution_in,
                                            nvl(create_institution_in, create_institution)),
               update_user         = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time         = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution  = decode(l_update_institution_n,
                                            0,
                                            update_institution_in,
                                            nvl(update_institution_in, update_institution)),
               flg_restricted      = decode(l_flg_restricted_n,
                                            0,
                                            flg_restricted_in,
                                            nvl(flg_restricted_in, flg_restricted)),
               max_intake          = decode(l_max_intake_n, 0, max_intake_in, nvl(max_intake_in, max_intake)),
               min_output          = decode(l_min_output_n, 0, min_output_in, nvl(min_output_in, min_output)),
               dt_next_balance     = decode(l_dt_next_balance_n,
                                            0,
                                            dt_next_balance_in,
                                            nvl(dt_next_balance_in, dt_next_balance)),
               id_patient          = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_cancel_reason    = decode(l_id_cancel_reason_n,
                                            0,
                                            id_cancel_reason_in,
                                            nvl(id_cancel_reason_in, id_cancel_reason)),
               id_prof_last_change = decode(l_id_prof_last_change_n,
                                            0,
                                            id_prof_last_change_in,
                                            nvl(id_prof_last_change_in, id_prof_last_change)),
               dt_epis_hidrics     = decode(l_dt_epis_hidrics_n,
                                            0,
                                            dt_epis_hidrics_in,
                                            nvl(dt_epis_hidrics_in, dt_epis_hidrics)),
               flg_action          = decode(l_flg_action_n, 0, flg_action_in, nvl(flg_action_in, flg_action)),
               interval_minutes    = decode(l_interval_minutes_n,
                                            0,
                                            interval_minutes_in,
                                            nvl(interval_minutes_in, interval_minutes))
         WHERE id_epis_hidrics = id_epis_hidrics_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_HIDRICS');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    IF l_name = 'EHID_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'EHID_HIDIN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS_INTERVAL',
                                                        value_in           => id_hidrics_interval_in);
                    END IF;
                    IF l_name = 'EHID_HIDT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS_TYPE',
                                                        value_in           => id_hidrics_type_in);
                    END IF;
                    IF l_name = 'EHID_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'EHID_PROF_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'EHID_PROF_FK3'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_INTER',
                                                        value_in           => id_prof_inter_in);
                    END IF;
                    IF l_name = 'EPIS_HID_CR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'EPIS_HID_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'EPIS_HID_PLC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_LAST_CHANGE',
                                                        value_in           => id_prof_last_change_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_epis_hidrics_in      IN epis_hidrics.id_epis_hidrics%TYPE,
        id_hidrics_type_in      IN epis_hidrics.id_hidrics_type%TYPE DEFAULT NULL,
        id_hidrics_type_nin     IN BOOLEAN := TRUE,
        id_professional_in      IN epis_hidrics.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        id_episode_in           IN epis_hidrics.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        id_hidrics_interval_in  IN epis_hidrics.id_hidrics_interval%TYPE DEFAULT NULL,
        id_hidrics_interval_nin IN BOOLEAN := TRUE,
        flg_status_in           IN epis_hidrics.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        notes_in                IN epis_hidrics.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN epis_hidrics.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        notes_cancel_in         IN epis_hidrics.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_prof_inter_in        IN epis_hidrics.id_prof_inter%TYPE DEFAULT NULL,
        id_prof_inter_nin       IN BOOLEAN := TRUE,
        notes_inter_in          IN epis_hidrics.notes_inter%TYPE DEFAULT NULL,
        notes_inter_nin         IN BOOLEAN := TRUE,
        dt_creation_tstz_in     IN epis_hidrics.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_creation_tstz_nin    IN BOOLEAN := TRUE,
        dt_initial_tstz_in      IN epis_hidrics.dt_initial_tstz%TYPE DEFAULT NULL,
        dt_initial_tstz_nin     IN BOOLEAN := TRUE,
        dt_end_tstz_in          IN epis_hidrics.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin         IN BOOLEAN := TRUE,
        dt_cancel_tstz_in       IN epis_hidrics.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin      IN BOOLEAN := TRUE,
        dt_inter_tstz_in        IN epis_hidrics.dt_inter_tstz%TYPE DEFAULT NULL,
        dt_inter_tstz_nin       IN BOOLEAN := TRUE,
        create_user_in          IN epis_hidrics.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_hidrics.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_hidrics.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_hidrics.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_hidrics.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_hidrics.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        flg_restricted_in       IN epis_hidrics.flg_restricted%TYPE DEFAULT NULL,
        flg_restricted_nin      IN BOOLEAN := TRUE,
        max_intake_in           IN epis_hidrics.max_intake%TYPE DEFAULT NULL,
        max_intake_nin          IN BOOLEAN := TRUE,
        min_output_in           IN epis_hidrics.min_output%TYPE DEFAULT NULL,
        min_output_nin          IN BOOLEAN := TRUE,
        dt_next_balance_in      IN epis_hidrics.dt_next_balance%TYPE DEFAULT NULL,
        dt_next_balance_nin     IN BOOLEAN := TRUE,
        id_patient_in           IN epis_hidrics.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN epis_hidrics.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        id_prof_last_change_in  IN epis_hidrics.id_prof_last_change%TYPE DEFAULT NULL,
        id_prof_last_change_nin IN BOOLEAN := TRUE,
        dt_epis_hidrics_in      IN epis_hidrics.dt_epis_hidrics%TYPE DEFAULT NULL,
        dt_epis_hidrics_nin     IN BOOLEAN := TRUE,
        flg_action_in           IN epis_hidrics.flg_action%TYPE DEFAULT NULL,
        flg_action_nin          IN BOOLEAN := TRUE,
        interval_minutes_in     IN epis_hidrics.interval_minutes%TYPE DEFAULT NULL,
        interval_minutes_nin    IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_hidrics_in      => id_epis_hidrics_in,
            id_hidrics_type_in      => id_hidrics_type_in,
            id_hidrics_type_nin     => id_hidrics_type_nin,
            id_professional_in      => id_professional_in,
            id_professional_nin     => id_professional_nin,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            id_hidrics_interval_in  => id_hidrics_interval_in,
            id_hidrics_interval_nin => id_hidrics_interval_nin,
            flg_status_in           => flg_status_in,
            flg_status_nin          => flg_status_nin,
            notes_in                => notes_in,
            notes_nin               => notes_nin,
            id_prof_cancel_in       => id_prof_cancel_in,
            id_prof_cancel_nin      => id_prof_cancel_nin,
            notes_cancel_in         => notes_cancel_in,
            notes_cancel_nin        => notes_cancel_nin,
            id_prof_inter_in        => id_prof_inter_in,
            id_prof_inter_nin       => id_prof_inter_nin,
            notes_inter_in          => notes_inter_in,
            notes_inter_nin         => notes_inter_nin,
            dt_creation_tstz_in     => dt_creation_tstz_in,
            dt_creation_tstz_nin    => dt_creation_tstz_nin,
            dt_initial_tstz_in      => dt_initial_tstz_in,
            dt_initial_tstz_nin     => dt_initial_tstz_nin,
            dt_end_tstz_in          => dt_end_tstz_in,
            dt_end_tstz_nin         => dt_end_tstz_nin,
            dt_cancel_tstz_in       => dt_cancel_tstz_in,
            dt_cancel_tstz_nin      => dt_cancel_tstz_nin,
            dt_inter_tstz_in        => dt_inter_tstz_in,
            dt_inter_tstz_nin       => dt_inter_tstz_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            flg_restricted_in       => flg_restricted_in,
            flg_restricted_nin      => flg_restricted_nin,
            max_intake_in           => max_intake_in,
            max_intake_nin          => max_intake_nin,
            min_output_in           => min_output_in,
            min_output_nin          => min_output_nin,
            dt_next_balance_in      => dt_next_balance_in,
            dt_next_balance_nin     => dt_next_balance_nin,
            id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            id_cancel_reason_in     => id_cancel_reason_in,
            id_cancel_reason_nin    => id_cancel_reason_nin,
            id_prof_last_change_in  => id_prof_last_change_in,
            id_prof_last_change_nin => id_prof_last_change_nin,
            dt_epis_hidrics_in      => dt_epis_hidrics_in,
            dt_epis_hidrics_nin     => dt_epis_hidrics_nin,
            flg_action_in           => flg_action_in,
            flg_action_nin          => flg_action_nin,
            interval_minutes_in     => interval_minutes_in,
            interval_minutes_nin    => interval_minutes_nin,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_hidrics_type_in      IN epis_hidrics.id_hidrics_type%TYPE DEFAULT NULL,
        id_hidrics_type_nin     IN BOOLEAN := TRUE,
        id_professional_in      IN epis_hidrics.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        id_episode_in           IN epis_hidrics.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        id_hidrics_interval_in  IN epis_hidrics.id_hidrics_interval%TYPE DEFAULT NULL,
        id_hidrics_interval_nin IN BOOLEAN := TRUE,
        flg_status_in           IN epis_hidrics.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        notes_in                IN epis_hidrics.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN epis_hidrics.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        notes_cancel_in         IN epis_hidrics.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_prof_inter_in        IN epis_hidrics.id_prof_inter%TYPE DEFAULT NULL,
        id_prof_inter_nin       IN BOOLEAN := TRUE,
        notes_inter_in          IN epis_hidrics.notes_inter%TYPE DEFAULT NULL,
        notes_inter_nin         IN BOOLEAN := TRUE,
        dt_creation_tstz_in     IN epis_hidrics.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_creation_tstz_nin    IN BOOLEAN := TRUE,
        dt_initial_tstz_in      IN epis_hidrics.dt_initial_tstz%TYPE DEFAULT NULL,
        dt_initial_tstz_nin     IN BOOLEAN := TRUE,
        dt_end_tstz_in          IN epis_hidrics.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin         IN BOOLEAN := TRUE,
        dt_cancel_tstz_in       IN epis_hidrics.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin      IN BOOLEAN := TRUE,
        dt_inter_tstz_in        IN epis_hidrics.dt_inter_tstz%TYPE DEFAULT NULL,
        dt_inter_tstz_nin       IN BOOLEAN := TRUE,
        create_user_in          IN epis_hidrics.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_hidrics.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_hidrics.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_hidrics.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_hidrics.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_hidrics.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        flg_restricted_in       IN epis_hidrics.flg_restricted%TYPE DEFAULT NULL,
        flg_restricted_nin      IN BOOLEAN := TRUE,
        max_intake_in           IN epis_hidrics.max_intake%TYPE DEFAULT NULL,
        max_intake_nin          IN BOOLEAN := TRUE,
        min_output_in           IN epis_hidrics.min_output%TYPE DEFAULT NULL,
        min_output_nin          IN BOOLEAN := TRUE,
        dt_next_balance_in      IN epis_hidrics.dt_next_balance%TYPE DEFAULT NULL,
        dt_next_balance_nin     IN BOOLEAN := TRUE,
        id_patient_in           IN epis_hidrics.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN epis_hidrics.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        id_prof_last_change_in  IN epis_hidrics.id_prof_last_change%TYPE DEFAULT NULL,
        id_prof_last_change_nin IN BOOLEAN := TRUE,
        dt_epis_hidrics_in      IN epis_hidrics.dt_epis_hidrics%TYPE DEFAULT NULL,
        dt_epis_hidrics_nin     IN BOOLEAN := TRUE,
        flg_action_in           IN epis_hidrics.flg_action%TYPE DEFAULT NULL,
        flg_action_nin          IN BOOLEAN := TRUE,
        interval_minutes_in     IN epis_hidrics.interval_minutes%TYPE DEFAULT NULL,
        interval_minutes_nin    IN BOOLEAN := TRUE,
        where_in                VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                   VARCHAR2(32767);
        l_rows_out              table_varchar;
        l_id_hidrics_type_n     NUMBER(1);
        l_id_professional_n     NUMBER(1);
        l_id_episode_n          NUMBER(1);
        l_id_hidrics_interval_n NUMBER(1);
        l_flg_status_n          NUMBER(1);
        l_notes_n               NUMBER(1);
        l_id_prof_cancel_n      NUMBER(1);
        l_notes_cancel_n        NUMBER(1);
        l_id_prof_inter_n       NUMBER(1);
        l_notes_inter_n         NUMBER(1);
        l_dt_creation_tstz_n    NUMBER(1);
        l_dt_initial_tstz_n     NUMBER(1);
        l_dt_end_tstz_n         NUMBER(1);
        l_dt_cancel_tstz_n      NUMBER(1);
        l_dt_inter_tstz_n       NUMBER(1);
        l_create_user_n         NUMBER(1);
        l_create_time_n         NUMBER(1);
        l_create_institution_n  NUMBER(1);
        l_update_user_n         NUMBER(1);
        l_update_time_n         NUMBER(1);
        l_update_institution_n  NUMBER(1);
        l_flg_restricted_n      NUMBER(1);
        l_max_intake_n          NUMBER(1);
        l_min_output_n          NUMBER(1);
        l_dt_next_balance_n     NUMBER(1);
        l_id_patient_n          NUMBER(1);
        l_id_cancel_reason_n    NUMBER(1);
        l_id_prof_last_change_n NUMBER(1);
        l_dt_epis_hidrics_n     NUMBER(1);
        l_flg_action_n          NUMBER(1);
        l_interval_minutes_n    NUMBER(1);
        id_epis_hidrics_in      epis_hidrics.id_epis_hidrics%TYPE;
    BEGIN
    
        l_id_hidrics_type_n     := sys.diutil.bool_to_int(id_hidrics_type_nin);
        l_id_professional_n     := sys.diutil.bool_to_int(id_professional_nin);
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
        l_id_hidrics_interval_n := sys.diutil.bool_to_int(id_hidrics_interval_nin);
        l_flg_status_n          := sys.diutil.bool_to_int(flg_status_nin);
        l_notes_n               := sys.diutil.bool_to_int(notes_nin);
        l_id_prof_cancel_n      := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_notes_cancel_n        := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_prof_inter_n       := sys.diutil.bool_to_int(id_prof_inter_nin);
        l_notes_inter_n         := sys.diutil.bool_to_int(notes_inter_nin);
        l_dt_creation_tstz_n    := sys.diutil.bool_to_int(dt_creation_tstz_nin);
        l_dt_initial_tstz_n     := sys.diutil.bool_to_int(dt_initial_tstz_nin);
        l_dt_end_tstz_n         := sys.diutil.bool_to_int(dt_end_tstz_nin);
        l_dt_cancel_tstz_n      := sys.diutil.bool_to_int(dt_cancel_tstz_nin);
        l_dt_inter_tstz_n       := sys.diutil.bool_to_int(dt_inter_tstz_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_restricted_n      := sys.diutil.bool_to_int(flg_restricted_nin);
        l_max_intake_n          := sys.diutil.bool_to_int(max_intake_nin);
        l_min_output_n          := sys.diutil.bool_to_int(min_output_nin);
        l_dt_next_balance_n     := sys.diutil.bool_to_int(dt_next_balance_nin);
        l_id_patient_n          := sys.diutil.bool_to_int(id_patient_nin);
        l_id_cancel_reason_n    := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_id_prof_last_change_n := sys.diutil.bool_to_int(id_prof_last_change_nin);
        l_dt_epis_hidrics_n     := sys.diutil.bool_to_int(dt_epis_hidrics_nin);
        l_flg_action_n          := sys.diutil.bool_to_int(flg_action_nin);
        l_interval_minutes_n    := sys.diutil.bool_to_int(interval_minutes_nin);
    
        l_sql := 'UPDATE EPIS_HIDRICS SET ' || ' ID_HIDRICS_TYPE = decode (' || l_id_hidrics_type_n ||
                 ',0,:id_hidrics_type_in, NVL (:id_hidrics_type_in, ID_HIDRICS_TYPE)) ' || ',' ||
                 ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                 ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) ' || ',' ||
                 ' ID_EPISODE = decode (' || l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' ID_HIDRICS_INTERVAL = decode (' || l_id_hidrics_interval_n ||
                 ',0,:id_hidrics_interval_in, NVL (:id_hidrics_interval_in, ID_HIDRICS_INTERVAL)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' NOTES = decode (' || l_notes_n || ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' ||
                 ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                 ',0,:id_prof_cancel_in, NVL (:id_prof_cancel_in, ID_PROF_CANCEL)) ' || ',' ||
                 ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                 ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) ' || ',' || ' ID_PROF_INTER = decode (' ||
                 l_id_prof_inter_n || ',0,:id_prof_inter_in, NVL (:id_prof_inter_in, ID_PROF_INTER)) ' || ',' ||
                 ' NOTES_INTER = decode (' || l_notes_inter_n ||
                 ',0,:notes_inter_in, NVL (:notes_inter_in, NOTES_INTER)) ' || ',' || ' DT_CREATION_TSTZ = decode (' ||
                 l_dt_creation_tstz_n || ',0,:dt_creation_tstz_in, NVL (:dt_creation_tstz_in, DT_CREATION_TSTZ)) ' || ',' ||
                 ' DT_INITIAL_TSTZ = decode (' || l_dt_initial_tstz_n ||
                 ',0,:dt_initial_tstz_in, NVL (:dt_initial_tstz_in, DT_INITIAL_TSTZ)) ' || ',' ||
                 ' DT_END_TSTZ = decode (' || l_dt_end_tstz_n ||
                 ',0,:dt_end_tstz_in, NVL (:dt_end_tstz_in, DT_END_TSTZ)) ' || ',' || ' DT_CANCEL_TSTZ = decode (' ||
                 l_dt_cancel_tstz_n || ',0,:dt_cancel_tstz_in, NVL (:dt_cancel_tstz_in, DT_CANCEL_TSTZ)) ' || ',' ||
                 ' DT_INTER_TSTZ = decode (' || l_dt_inter_tstz_n ||
                 ',0,:dt_inter_tstz_in, NVL (:dt_inter_tstz_in, DT_INTER_TSTZ)) ' || ',' || ' CREATE_USER = decode (' ||
                 l_create_user_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' ||
                 ' CREATE_TIME = decode (' || l_create_time_n ||
                 ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' || ' CREATE_INSTITUTION = decode (' ||
                 l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' FLG_RESTRICTED = decode (' || l_flg_restricted_n ||
                 ',0,:flg_restricted_in, NVL (:flg_restricted_in, FLG_RESTRICTED)) ' || ',' || ' MAX_INTAKE = decode (' ||
                 l_max_intake_n || ',0,:max_intake_in, NVL (:max_intake_in, MAX_INTAKE)) ' || ',' ||
                 ' MIN_OUTPUT = decode (' || l_min_output_n || ',0,:min_output_in, NVL (:min_output_in, MIN_OUTPUT)) ' || ',' ||
                 ' DT_NEXT_BALANCE = decode (' || l_dt_next_balance_n ||
                 ',0,:dt_next_balance_in, NVL (:dt_next_balance_in, DT_NEXT_BALANCE)) ' || ',' ||
                 ' ID_PATIENT = decode (' || l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                 ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) ' || ',' ||
                 ' ID_PROF_LAST_CHANGE = decode (' || l_id_prof_last_change_n ||
                 ',0,:id_prof_last_change_in, NVL (:id_prof_last_change_in, ID_PROF_LAST_CHANGE)) ' || ',' ||
                 ' DT_EPIS_HIDRICS = decode (' || l_dt_epis_hidrics_n ||
                 ',0,:dt_epis_hidrics_in, NVL (:dt_epis_hidrics_in, DT_EPIS_HIDRICS)) ' || ',' ||
                 ' FLG_ACTION = decode (' || l_flg_action_n || ',0,:flg_action_in, NVL (:flg_action_in, FLG_ACTION)) ' || ',' ||
                 ' INTERVAL_MINUTES = decode (' || l_interval_minutes_n ||
                 ',0,:interval_minutes_in, NVL (:interval_minutes_in, INTERVAL_MINUTES)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_hidrics_type_in, id_professional_in, id_episode_in, id_hidrics_interval_in, flg_status_in, notes_in, id_prof_cancel_in, notes_cancel_in, id_prof_inter_in, notes_inter_in, dt_creation_tstz_in, dt_initial_tstz_in, dt_end_tstz_in, dt_cancel_tstz_in, dt_inter_tstz_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_restricted_in, max_intake_in, min_output_in, dt_next_balance_in, id_patient_in, id_cancel_reason_in, id_prof_last_change_in, dt_epis_hidrics_in, flg_action_in, interval_minutes_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'EPIS_HIDRICS');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    IF l_name = 'EHID_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'EHID_HIDIN_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS_INTERVAL',
                                                        value_in           => id_hidrics_interval_in);
                    END IF;
                    IF l_name = 'EHID_HIDT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HIDRICS_TYPE',
                                                        value_in           => id_hidrics_type_in);
                    END IF;
                    IF l_name = 'EHID_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'EHID_PROF_FK2'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_CANCEL',
                                                        value_in           => id_prof_cancel_in);
                    END IF;
                    IF l_name = 'EHID_PROF_FK3'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_INTER',
                                                        value_in           => id_prof_inter_in);
                    END IF;
                    IF l_name = 'EPIS_HID_CR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'EPIS_HID_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'EPIS_HID_PLC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_LAST_CHANGE',
                                                        value_in           => id_prof_last_change_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_hidrics_type_in      IN epis_hidrics.id_hidrics_type%TYPE DEFAULT NULL,
        id_hidrics_type_nin     IN BOOLEAN := TRUE,
        id_professional_in      IN epis_hidrics.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        id_episode_in           IN epis_hidrics.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        id_hidrics_interval_in  IN epis_hidrics.id_hidrics_interval%TYPE DEFAULT NULL,
        id_hidrics_interval_nin IN BOOLEAN := TRUE,
        flg_status_in           IN epis_hidrics.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        notes_in                IN epis_hidrics.notes%TYPE DEFAULT NULL,
        notes_nin               IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN epis_hidrics.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        notes_cancel_in         IN epis_hidrics.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_prof_inter_in        IN epis_hidrics.id_prof_inter%TYPE DEFAULT NULL,
        id_prof_inter_nin       IN BOOLEAN := TRUE,
        notes_inter_in          IN epis_hidrics.notes_inter%TYPE DEFAULT NULL,
        notes_inter_nin         IN BOOLEAN := TRUE,
        dt_creation_tstz_in     IN epis_hidrics.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_creation_tstz_nin    IN BOOLEAN := TRUE,
        dt_initial_tstz_in      IN epis_hidrics.dt_initial_tstz%TYPE DEFAULT NULL,
        dt_initial_tstz_nin     IN BOOLEAN := TRUE,
        dt_end_tstz_in          IN epis_hidrics.dt_end_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_nin         IN BOOLEAN := TRUE,
        dt_cancel_tstz_in       IN epis_hidrics.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_nin      IN BOOLEAN := TRUE,
        dt_inter_tstz_in        IN epis_hidrics.dt_inter_tstz%TYPE DEFAULT NULL,
        dt_inter_tstz_nin       IN BOOLEAN := TRUE,
        create_user_in          IN epis_hidrics.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN epis_hidrics.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN epis_hidrics.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN epis_hidrics.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN epis_hidrics.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN epis_hidrics.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        flg_restricted_in       IN epis_hidrics.flg_restricted%TYPE DEFAULT NULL,
        flg_restricted_nin      IN BOOLEAN := TRUE,
        max_intake_in           IN epis_hidrics.max_intake%TYPE DEFAULT NULL,
        max_intake_nin          IN BOOLEAN := TRUE,
        min_output_in           IN epis_hidrics.min_output%TYPE DEFAULT NULL,
        min_output_nin          IN BOOLEAN := TRUE,
        dt_next_balance_in      IN epis_hidrics.dt_next_balance%TYPE DEFAULT NULL,
        dt_next_balance_nin     IN BOOLEAN := TRUE,
        id_patient_in           IN epis_hidrics.id_patient%TYPE DEFAULT NULL,
        id_patient_nin          IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN epis_hidrics.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        id_prof_last_change_in  IN epis_hidrics.id_prof_last_change%TYPE DEFAULT NULL,
        id_prof_last_change_nin IN BOOLEAN := TRUE,
        dt_epis_hidrics_in      IN epis_hidrics.dt_epis_hidrics%TYPE DEFAULT NULL,
        dt_epis_hidrics_nin     IN BOOLEAN := TRUE,
        flg_action_in           IN epis_hidrics.flg_action%TYPE DEFAULT NULL,
        flg_action_nin          IN BOOLEAN := TRUE,
        interval_minutes_in     IN epis_hidrics.interval_minutes%TYPE DEFAULT NULL,
        interval_minutes_nin    IN BOOLEAN := TRUE,
        where_in                VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_hidrics_type_in      => id_hidrics_type_in,
            id_hidrics_type_nin     => id_hidrics_type_nin,
            id_professional_in      => id_professional_in,
            id_professional_nin     => id_professional_nin,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            id_hidrics_interval_in  => id_hidrics_interval_in,
            id_hidrics_interval_nin => id_hidrics_interval_nin,
            flg_status_in           => flg_status_in,
            flg_status_nin          => flg_status_nin,
            notes_in                => notes_in,
            notes_nin               => notes_nin,
            id_prof_cancel_in       => id_prof_cancel_in,
            id_prof_cancel_nin      => id_prof_cancel_nin,
            notes_cancel_in         => notes_cancel_in,
            notes_cancel_nin        => notes_cancel_nin,
            id_prof_inter_in        => id_prof_inter_in,
            id_prof_inter_nin       => id_prof_inter_nin,
            notes_inter_in          => notes_inter_in,
            notes_inter_nin         => notes_inter_nin,
            dt_creation_tstz_in     => dt_creation_tstz_in,
            dt_creation_tstz_nin    => dt_creation_tstz_nin,
            dt_initial_tstz_in      => dt_initial_tstz_in,
            dt_initial_tstz_nin     => dt_initial_tstz_nin,
            dt_end_tstz_in          => dt_end_tstz_in,
            dt_end_tstz_nin         => dt_end_tstz_nin,
            dt_cancel_tstz_in       => dt_cancel_tstz_in,
            dt_cancel_tstz_nin      => dt_cancel_tstz_nin,
            dt_inter_tstz_in        => dt_inter_tstz_in,
            dt_inter_tstz_nin       => dt_inter_tstz_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            flg_restricted_in       => flg_restricted_in,
            flg_restricted_nin      => flg_restricted_nin,
            max_intake_in           => max_intake_in,
            max_intake_nin          => max_intake_nin,
            min_output_in           => min_output_in,
            min_output_nin          => min_output_nin,
            dt_next_balance_in      => dt_next_balance_in,
            dt_next_balance_nin     => dt_next_balance_nin,
            id_patient_in           => id_patient_in,
            id_patient_nin          => id_patient_nin,
            id_cancel_reason_in     => id_cancel_reason_in,
            id_cancel_reason_nin    => id_cancel_reason_nin,
            id_prof_last_change_in  => id_prof_last_change_in,
            id_prof_last_change_nin => id_prof_last_change_nin,
            dt_epis_hidrics_in      => dt_epis_hidrics_in,
            dt_epis_hidrics_nin     => dt_epis_hidrics_nin,
            flg_action_in           => flg_action_in,
            flg_action_nin          => flg_action_nin,
            interval_minutes_in     => interval_minutes_in,
            interval_minutes_nin    => interval_minutes_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN epis_hidrics%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_hidrics_in     => rec_in.id_epis_hidrics,
            id_hidrics_type_in     => rec_in.id_hidrics_type,
            id_professional_in     => rec_in.id_professional,
            id_episode_in          => rec_in.id_episode,
            id_hidrics_interval_in => rec_in.id_hidrics_interval,
            flg_status_in          => rec_in.flg_status,
            notes_in               => rec_in.notes,
            id_prof_cancel_in      => rec_in.id_prof_cancel,
            notes_cancel_in        => rec_in.notes_cancel,
            id_prof_inter_in       => rec_in.id_prof_inter,
            notes_inter_in         => rec_in.notes_inter,
            dt_creation_tstz_in    => rec_in.dt_creation_tstz,
            dt_initial_tstz_in     => rec_in.dt_initial_tstz,
            dt_end_tstz_in         => rec_in.dt_end_tstz,
            dt_cancel_tstz_in      => rec_in.dt_cancel_tstz,
            dt_inter_tstz_in       => rec_in.dt_inter_tstz,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            flg_restricted_in      => rec_in.flg_restricted,
            max_intake_in          => rec_in.max_intake,
            min_output_in          => rec_in.min_output,
            dt_next_balance_in     => rec_in.dt_next_balance,
            id_patient_in          => rec_in.id_patient,
            id_cancel_reason_in    => rec_in.id_cancel_reason,
            id_prof_last_change_in => rec_in.id_prof_last_change,
            dt_epis_hidrics_in     => rec_in.dt_epis_hidrics,
            flg_action_in          => rec_in.flg_action,
            interval_minutes_in    => rec_in.interval_minutes
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN epis_hidrics%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_epis_hidrics_in     => rec_in.id_epis_hidrics,
            id_hidrics_type_in     => rec_in.id_hidrics_type,
            id_professional_in     => rec_in.id_professional,
            id_episode_in          => rec_in.id_episode,
            id_hidrics_interval_in => rec_in.id_hidrics_interval,
            flg_status_in          => rec_in.flg_status,
            notes_in               => rec_in.notes,
            id_prof_cancel_in      => rec_in.id_prof_cancel,
            notes_cancel_in        => rec_in.notes_cancel,
            id_prof_inter_in       => rec_in.id_prof_inter,
            notes_inter_in         => rec_in.notes_inter,
            dt_creation_tstz_in    => rec_in.dt_creation_tstz,
            dt_initial_tstz_in     => rec_in.dt_initial_tstz,
            dt_end_tstz_in         => rec_in.dt_end_tstz,
            dt_cancel_tstz_in      => rec_in.dt_cancel_tstz,
            dt_inter_tstz_in       => rec_in.dt_inter_tstz,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            flg_restricted_in      => rec_in.flg_restricted,
            max_intake_in          => rec_in.max_intake,
            min_output_in          => rec_in.min_output,
            dt_next_balance_in     => rec_in.dt_next_balance,
            id_patient_in          => rec_in.id_patient,
            id_cancel_reason_in    => rec_in.id_cancel_reason,
            id_prof_last_change_in => rec_in.id_prof_last_change,
            dt_epis_hidrics_in     => rec_in.dt_epis_hidrics,
            flg_action_in          => rec_in.flg_action,
            interval_minutes_in    => rec_in.interval_minutes
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_epis_hidrics_in     IN epis_hidrics.id_epis_hidrics%TYPE,
        id_hidrics_type_in     IN epis_hidrics.id_hidrics_type%TYPE DEFAULT NULL,
        id_professional_in     IN epis_hidrics.id_professional%TYPE DEFAULT NULL,
        id_episode_in          IN epis_hidrics.id_episode%TYPE DEFAULT NULL,
        id_hidrics_interval_in IN epis_hidrics.id_hidrics_interval%TYPE DEFAULT NULL,
        flg_status_in          IN epis_hidrics.flg_status%TYPE DEFAULT NULL,
        notes_in               IN epis_hidrics.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_hidrics.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_hidrics.notes_cancel%TYPE DEFAULT NULL,
        id_prof_inter_in       IN epis_hidrics.id_prof_inter%TYPE DEFAULT NULL,
        notes_inter_in         IN epis_hidrics.notes_inter%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_hidrics.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_initial_tstz_in     IN epis_hidrics.dt_initial_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in         IN epis_hidrics.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN epis_hidrics.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_inter_tstz_in       IN epis_hidrics.dt_inter_tstz%TYPE DEFAULT NULL,
        create_user_in         IN epis_hidrics.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_hidrics.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_hidrics.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_hidrics.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_hidrics.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_hidrics.update_institution%TYPE DEFAULT NULL,
        flg_restricted_in      IN epis_hidrics.flg_restricted%TYPE DEFAULT NULL,
        max_intake_in          IN epis_hidrics.max_intake%TYPE DEFAULT NULL,
        min_output_in          IN epis_hidrics.min_output%TYPE DEFAULT NULL,
        dt_next_balance_in     IN epis_hidrics.dt_next_balance%TYPE DEFAULT NULL,
        id_patient_in          IN epis_hidrics.id_patient%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_hidrics.id_cancel_reason%TYPE DEFAULT NULL,
        id_prof_last_change_in IN epis_hidrics.id_prof_last_change%TYPE DEFAULT NULL,
        dt_epis_hidrics_in     IN epis_hidrics.dt_epis_hidrics%TYPE DEFAULT NULL,
        flg_action_in          IN epis_hidrics.flg_action%TYPE DEFAULT NULL,
        interval_minutes_in    IN epis_hidrics.interval_minutes%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        upd(id_epis_hidrics_in     => id_epis_hidrics_in,
            id_hidrics_type_in     => id_hidrics_type_in,
            id_professional_in     => id_professional_in,
            id_episode_in          => id_episode_in,
            id_hidrics_interval_in => id_hidrics_interval_in,
            flg_status_in          => flg_status_in,
            notes_in               => notes_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            notes_cancel_in        => notes_cancel_in,
            id_prof_inter_in       => id_prof_inter_in,
            notes_inter_in         => notes_inter_in,
            dt_creation_tstz_in    => dt_creation_tstz_in,
            dt_initial_tstz_in     => dt_initial_tstz_in,
            dt_end_tstz_in         => dt_end_tstz_in,
            dt_cancel_tstz_in      => dt_cancel_tstz_in,
            dt_inter_tstz_in       => dt_inter_tstz_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            flg_restricted_in      => flg_restricted_in,
            max_intake_in          => max_intake_in,
            min_output_in          => min_output_in,
            dt_next_balance_in     => dt_next_balance_in,
            id_patient_in          => id_patient_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            id_prof_last_change_in => id_prof_last_change_in,
            dt_epis_hidrics_in     => dt_epis_hidrics_in,
            flg_action_in          => flg_action_in,
            interval_minutes_in    => interval_minutes_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_epis_hidrics_in     => id_epis_hidrics_in,
                id_hidrics_type_in     => id_hidrics_type_in,
                id_professional_in     => id_professional_in,
                id_episode_in          => id_episode_in,
                id_hidrics_interval_in => id_hidrics_interval_in,
                flg_status_in          => flg_status_in,
                notes_in               => notes_in,
                id_prof_cancel_in      => id_prof_cancel_in,
                notes_cancel_in        => notes_cancel_in,
                id_prof_inter_in       => id_prof_inter_in,
                notes_inter_in         => notes_inter_in,
                dt_creation_tstz_in    => dt_creation_tstz_in,
                dt_initial_tstz_in     => dt_initial_tstz_in,
                dt_end_tstz_in         => dt_end_tstz_in,
                dt_cancel_tstz_in      => dt_cancel_tstz_in,
                dt_inter_tstz_in       => dt_inter_tstz_in,
                create_user_in         => create_user_in,
                create_time_in         => create_time_in,
                create_institution_in  => create_institution_in,
                update_user_in         => update_user_in,
                update_time_in         => update_time_in,
                update_institution_in  => update_institution_in,
                flg_restricted_in      => flg_restricted_in,
                max_intake_in          => max_intake_in,
                min_output_in          => min_output_in,
                dt_next_balance_in     => dt_next_balance_in,
                id_patient_in          => id_patient_in,
                id_cancel_reason_in    => id_cancel_reason_in,
                id_prof_last_change_in => id_prof_last_change_in,
                dt_epis_hidrics_in     => dt_epis_hidrics_in,
                flg_action_in          => flg_action_in,
                interval_minutes_in    => interval_minutes_in,
                handle_error_in        => handle_error_in,
                rows_out               => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_epis_hidrics_in     IN epis_hidrics.id_epis_hidrics%TYPE,
        id_hidrics_type_in     IN epis_hidrics.id_hidrics_type%TYPE DEFAULT NULL,
        id_professional_in     IN epis_hidrics.id_professional%TYPE DEFAULT NULL,
        id_episode_in          IN epis_hidrics.id_episode%TYPE DEFAULT NULL,
        id_hidrics_interval_in IN epis_hidrics.id_hidrics_interval%TYPE DEFAULT NULL,
        flg_status_in          IN epis_hidrics.flg_status%TYPE DEFAULT NULL,
        notes_in               IN epis_hidrics.notes%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN epis_hidrics.id_prof_cancel%TYPE DEFAULT NULL,
        notes_cancel_in        IN epis_hidrics.notes_cancel%TYPE DEFAULT NULL,
        id_prof_inter_in       IN epis_hidrics.id_prof_inter%TYPE DEFAULT NULL,
        notes_inter_in         IN epis_hidrics.notes_inter%TYPE DEFAULT NULL,
        dt_creation_tstz_in    IN epis_hidrics.dt_creation_tstz%TYPE DEFAULT NULL,
        dt_initial_tstz_in     IN epis_hidrics.dt_initial_tstz%TYPE DEFAULT NULL,
        dt_end_tstz_in         IN epis_hidrics.dt_end_tstz%TYPE DEFAULT NULL,
        dt_cancel_tstz_in      IN epis_hidrics.dt_cancel_tstz%TYPE DEFAULT NULL,
        dt_inter_tstz_in       IN epis_hidrics.dt_inter_tstz%TYPE DEFAULT NULL,
        create_user_in         IN epis_hidrics.create_user%TYPE DEFAULT NULL,
        create_time_in         IN epis_hidrics.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN epis_hidrics.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN epis_hidrics.update_user%TYPE DEFAULT NULL,
        update_time_in         IN epis_hidrics.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN epis_hidrics.update_institution%TYPE DEFAULT NULL,
        flg_restricted_in      IN epis_hidrics.flg_restricted%TYPE DEFAULT NULL,
        max_intake_in          IN epis_hidrics.max_intake%TYPE DEFAULT NULL,
        min_output_in          IN epis_hidrics.min_output%TYPE DEFAULT NULL,
        dt_next_balance_in     IN epis_hidrics.dt_next_balance%TYPE DEFAULT NULL,
        id_patient_in          IN epis_hidrics.id_patient%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN epis_hidrics.id_cancel_reason%TYPE DEFAULT NULL,
        id_prof_last_change_in IN epis_hidrics.id_prof_last_change%TYPE DEFAULT NULL,
        dt_epis_hidrics_in     IN epis_hidrics.dt_epis_hidrics%TYPE DEFAULT NULL,
        flg_action_in          IN epis_hidrics.flg_action%TYPE DEFAULT NULL,
        interval_minutes_in    IN epis_hidrics.interval_minutes%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_epis_hidrics_in,
                id_hidrics_type_in,
                id_professional_in,
                id_episode_in,
                id_hidrics_interval_in,
                flg_status_in,
                notes_in,
                id_prof_cancel_in,
                notes_cancel_in,
                id_prof_inter_in,
                notes_inter_in,
                dt_creation_tstz_in,
                dt_initial_tstz_in,
                dt_end_tstz_in,
                dt_cancel_tstz_in,
                dt_inter_tstz_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                flg_restricted_in,
                max_intake_in,
                min_output_in,
                dt_next_balance_in,
                id_patient_in,
                id_cancel_reason_in,
                id_prof_last_change_in,
                dt_epis_hidrics_in,
                flg_action_in,
                interval_minutes_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN epis_hidrics_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_epis_hidrics     id_epis_hidrics_cc;
        l_id_hidrics_type     id_hidrics_type_cc;
        l_id_professional     id_professional_cc;
        l_id_episode          id_episode_cc;
        l_id_hidrics_interval id_hidrics_interval_cc;
        l_flg_status          flg_status_cc;
        l_notes               notes_cc;
        l_id_prof_cancel      id_prof_cancel_cc;
        l_notes_cancel        notes_cancel_cc;
        l_id_prof_inter       id_prof_inter_cc;
        l_notes_inter         notes_inter_cc;
        l_dt_creation_tstz    dt_creation_tstz_cc;
        l_dt_initial_tstz     dt_initial_tstz_cc;
        l_dt_end_tstz         dt_end_tstz_cc;
        l_dt_cancel_tstz      dt_cancel_tstz_cc;
        l_dt_inter_tstz       dt_inter_tstz_cc;
        l_create_user         create_user_cc;
        l_create_time         create_time_cc;
        l_create_institution  create_institution_cc;
        l_update_user         update_user_cc;
        l_update_time         update_time_cc;
        l_update_institution  update_institution_cc;
        l_flg_restricted      flg_restricted_cc;
        l_max_intake          max_intake_cc;
        l_min_output          min_output_cc;
        l_dt_next_balance     dt_next_balance_cc;
        l_id_patient          id_patient_cc;
        l_id_cancel_reason    id_cancel_reason_cc;
        l_id_prof_last_change id_prof_last_change_cc;
        l_dt_epis_hidrics     dt_epis_hidrics_cc;
        l_flg_action          flg_action_cc;
        l_interval_minutes    interval_minutes_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_epis_hidrics(i) := col_in(i).id_epis_hidrics;
            l_id_hidrics_type(i) := col_in(i).id_hidrics_type;
            l_id_professional(i) := col_in(i).id_professional;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_hidrics_interval(i) := col_in(i).id_hidrics_interval;
            l_flg_status(i) := col_in(i).flg_status;
            l_notes(i) := col_in(i).notes;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_id_prof_inter(i) := col_in(i).id_prof_inter;
            l_notes_inter(i) := col_in(i).notes_inter;
            l_dt_creation_tstz(i) := col_in(i).dt_creation_tstz;
            l_dt_initial_tstz(i) := col_in(i).dt_initial_tstz;
            l_dt_end_tstz(i) := col_in(i).dt_end_tstz;
            l_dt_cancel_tstz(i) := col_in(i).dt_cancel_tstz;
            l_dt_inter_tstz(i) := col_in(i).dt_inter_tstz;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_flg_restricted(i) := col_in(i).flg_restricted;
            l_max_intake(i) := col_in(i).max_intake;
            l_min_output(i) := col_in(i).min_output;
            l_dt_next_balance(i) := col_in(i).dt_next_balance;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_id_prof_last_change(i) := col_in(i).id_prof_last_change;
            l_dt_epis_hidrics(i) := col_in(i).dt_epis_hidrics;
            l_flg_action(i) := col_in(i).flg_action;
            l_interval_minutes(i) := col_in(i).interval_minutes;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_hidrics
                   SET id_hidrics_type     = nvl(l_id_hidrics_type(i), id_hidrics_type),
                       id_professional     = nvl(l_id_professional(i), id_professional),
                       id_episode          = nvl(l_id_episode(i), id_episode),
                       id_hidrics_interval = nvl(l_id_hidrics_interval(i), id_hidrics_interval),
                       flg_status          = nvl(l_flg_status(i), flg_status),
                       notes               = nvl(l_notes(i), notes),
                       id_prof_cancel      = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       notes_cancel        = nvl(l_notes_cancel(i), notes_cancel),
                       id_prof_inter       = nvl(l_id_prof_inter(i), id_prof_inter),
                       notes_inter         = nvl(l_notes_inter(i), notes_inter),
                       dt_creation_tstz    = nvl(l_dt_creation_tstz(i), dt_creation_tstz),
                       dt_initial_tstz     = nvl(l_dt_initial_tstz(i), dt_initial_tstz),
                       dt_end_tstz         = nvl(l_dt_end_tstz(i), dt_end_tstz),
                       dt_cancel_tstz      = nvl(l_dt_cancel_tstz(i), dt_cancel_tstz),
                       dt_inter_tstz       = nvl(l_dt_inter_tstz(i), dt_inter_tstz),
                       create_user         = nvl(l_create_user(i), create_user),
                       create_time         = nvl(l_create_time(i), create_time),
                       create_institution  = nvl(l_create_institution(i), create_institution),
                       update_user         = nvl(l_update_user(i), update_user),
                       update_time         = nvl(l_update_time(i), update_time),
                       update_institution  = nvl(l_update_institution(i), update_institution),
                       flg_restricted      = nvl(l_flg_restricted(i), flg_restricted),
                       max_intake          = nvl(l_max_intake(i), max_intake),
                       min_output          = nvl(l_min_output(i), min_output),
                       dt_next_balance     = nvl(l_dt_next_balance(i), dt_next_balance),
                       id_patient          = nvl(l_id_patient(i), id_patient),
                       id_cancel_reason    = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       id_prof_last_change = nvl(l_id_prof_last_change(i), id_prof_last_change),
                       dt_epis_hidrics     = nvl(l_dt_epis_hidrics(i), dt_epis_hidrics),
                       flg_action          = nvl(l_flg_action(i), flg_action),
                       interval_minutes    = nvl(l_interval_minutes(i), interval_minutes)
                 WHERE id_epis_hidrics = l_id_epis_hidrics(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE epis_hidrics
                   SET id_hidrics_type     = l_id_hidrics_type(i),
                       id_professional     = l_id_professional(i),
                       id_episode          = l_id_episode(i),
                       id_hidrics_interval = l_id_hidrics_interval(i),
                       flg_status          = l_flg_status(i),
                       notes               = l_notes(i),
                       id_prof_cancel      = l_id_prof_cancel(i),
                       notes_cancel        = l_notes_cancel(i),
                       id_prof_inter       = l_id_prof_inter(i),
                       notes_inter         = l_notes_inter(i),
                       dt_creation_tstz    = l_dt_creation_tstz(i),
                       dt_initial_tstz     = l_dt_initial_tstz(i),
                       dt_end_tstz         = l_dt_end_tstz(i),
                       dt_cancel_tstz      = l_dt_cancel_tstz(i),
                       dt_inter_tstz       = l_dt_inter_tstz(i),
                       create_user         = l_create_user(i),
                       create_time         = l_create_time(i),
                       create_institution  = l_create_institution(i),
                       update_user         = l_update_user(i),
                       update_time         = l_update_time(i),
                       update_institution  = l_update_institution(i),
                       flg_restricted      = l_flg_restricted(i),
                       max_intake          = l_max_intake(i),
                       min_output          = l_min_output(i),
                       dt_next_balance     = l_dt_next_balance(i),
                       id_patient          = l_id_patient(i),
                       id_cancel_reason    = l_id_cancel_reason(i),
                       id_prof_last_change = l_id_prof_last_change(i),
                       dt_epis_hidrics     = l_dt_epis_hidrics(i),
                       flg_action          = l_flg_action(i),
                       interval_minutes    = l_interval_minutes(i)
                 WHERE id_epis_hidrics = l_id_epis_hidrics(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN epis_hidrics_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE EPIS_HIDRICS
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE EPIS_HIDRICS
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE EPIS_HIDRICS set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE EPIS_HIDRICS set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_epis_hidrics_in IN epis_hidrics.id_epis_hidrics%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hidrics
         WHERE id_epis_hidrics = id_epis_hidrics_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_epis_hidrics_in IN epis_hidrics.id_epis_hidrics%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_epis_hidrics_in => id_epis_hidrics_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_EPIS_HIDRICS
    PROCEDURE del_id_epis_hidrics
    (
        id_epis_hidrics_in IN epis_hidrics.id_epis_hidrics%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hidrics
         WHERE id_epis_hidrics = id_epis_hidrics_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_epis_hidrics;

    -- Delete all rows for primary key column ID_EPIS_HIDRICS
    PROCEDURE del_id_epis_hidrics
    (
        id_epis_hidrics_in IN epis_hidrics.id_epis_hidrics%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_epis_hidrics(id_epis_hidrics_in => id_epis_hidrics_in,
                            handle_error_in    => handle_error_in,
                            rows_out           => rows_out);
    END del_id_epis_hidrics;

    PROCEDURE del_ehid_epis_fk
    (
        id_episode_in   IN epis_hidrics.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hidrics
         WHERE id_episode = del_ehid_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ehid_epis_fk;

    PROCEDURE del_ehid_epis_fk
    (
        id_episode_in   IN epis_hidrics.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ehid_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ehid_epis_fk;

    PROCEDURE del_ehid_hidin_fk
    (
        id_hidrics_interval_in IN epis_hidrics.id_hidrics_interval%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hidrics
         WHERE id_hidrics_interval = del_ehid_hidin_fk.id_hidrics_interval_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ehid_hidin_fk;

    PROCEDURE del_ehid_hidin_fk
    (
        id_hidrics_interval_in IN epis_hidrics.id_hidrics_interval%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ehid_hidin_fk(id_hidrics_interval_in => id_hidrics_interval_in,
                          handle_error_in        => handle_error_in,
                          rows_out               => rows_out);
    END del_ehid_hidin_fk;

    PROCEDURE del_ehid_hidt_fk
    (
        id_hidrics_type_in IN epis_hidrics.id_hidrics_type%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hidrics
         WHERE id_hidrics_type = del_ehid_hidt_fk.id_hidrics_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ehid_hidt_fk;

    PROCEDURE del_ehid_hidt_fk
    (
        id_hidrics_type_in IN epis_hidrics.id_hidrics_type%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ehid_hidt_fk(id_hidrics_type_in => id_hidrics_type_in,
                         handle_error_in    => handle_error_in,
                         rows_out           => rows_out);
    END del_ehid_hidt_fk;

    PROCEDURE del_ehid_prof_fk
    (
        id_professional_in IN epis_hidrics.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hidrics
         WHERE id_professional = del_ehid_prof_fk.id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ehid_prof_fk;

    PROCEDURE del_ehid_prof_fk
    (
        id_professional_in IN epis_hidrics.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ehid_prof_fk(id_professional_in => id_professional_in,
                         handle_error_in    => handle_error_in,
                         rows_out           => rows_out);
    END del_ehid_prof_fk;

    PROCEDURE del_ehid_prof_fk2
    (
        id_prof_cancel_in IN epis_hidrics.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hidrics
         WHERE id_prof_cancel = del_ehid_prof_fk2.id_prof_cancel_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ehid_prof_fk2;

    PROCEDURE del_ehid_prof_fk2
    (
        id_prof_cancel_in IN epis_hidrics.id_prof_cancel%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ehid_prof_fk2(id_prof_cancel_in => id_prof_cancel_in,
                          handle_error_in   => handle_error_in,
                          rows_out          => rows_out);
    END del_ehid_prof_fk2;

    PROCEDURE del_ehid_prof_fk3
    (
        id_prof_inter_in IN epis_hidrics.id_prof_inter%TYPE,
        handle_error_in  IN BOOLEAN := TRUE,
        rows_out         OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hidrics
         WHERE id_prof_inter = del_ehid_prof_fk3.id_prof_inter_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ehid_prof_fk3;

    PROCEDURE del_ehid_prof_fk3
    (
        id_prof_inter_in IN epis_hidrics.id_prof_inter%TYPE,
        handle_error_in  IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ehid_prof_fk3(id_prof_inter_in => id_prof_inter_in,
                          handle_error_in  => handle_error_in,
                          rows_out         => rows_out);
    END del_ehid_prof_fk3;

    PROCEDURE del_epis_hid_cr_fk
    (
        id_cancel_reason_in IN epis_hidrics.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hidrics
         WHERE id_cancel_reason = del_epis_hid_cr_fk.id_cancel_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_epis_hid_cr_fk;

    PROCEDURE del_epis_hid_cr_fk
    (
        id_cancel_reason_in IN epis_hidrics.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epis_hid_cr_fk(id_cancel_reason_in => id_cancel_reason_in,
                           handle_error_in     => handle_error_in,
                           rows_out            => rows_out);
    END del_epis_hid_cr_fk;

    PROCEDURE del_epis_hid_pat_fk
    (
        id_patient_in   IN epis_hidrics.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hidrics
         WHERE id_patient = del_epis_hid_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_epis_hid_pat_fk;

    PROCEDURE del_epis_hid_pat_fk
    (
        id_patient_in   IN epis_hidrics.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epis_hid_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_epis_hid_pat_fk;

    PROCEDURE del_epis_hid_plc_fk
    (
        id_prof_last_change_in IN epis_hidrics.id_prof_last_change%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM epis_hidrics
         WHERE id_prof_last_change = del_epis_hid_plc_fk.id_prof_last_change_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_epis_hid_plc_fk;

    PROCEDURE del_epis_hid_plc_fk
    (
        id_prof_last_change_in IN epis_hidrics.id_prof_last_change%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_epis_hid_plc_fk(id_prof_last_change_in => id_prof_last_change_in,
                            handle_error_in        => handle_error_in,
                            rows_out               => rows_out);
    END del_epis_hid_plc_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM EPIS_HIDRICS';
        ELSE
            RETURN 'DELETE FROM EPIS_HIDRICS WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'EPIS_HIDRICS');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'EPIS_HIDRICS');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(epis_hidrics_inout IN OUT epis_hidrics%ROWTYPE) IS
    BEGIN
        epis_hidrics_inout.id_epis_hidrics     := NULL;
        epis_hidrics_inout.id_hidrics_type     := NULL;
        epis_hidrics_inout.id_professional     := NULL;
        epis_hidrics_inout.id_episode          := NULL;
        epis_hidrics_inout.id_hidrics_interval := NULL;
        epis_hidrics_inout.flg_status          := NULL;
        epis_hidrics_inout.notes               := NULL;
        epis_hidrics_inout.id_prof_cancel      := NULL;
        epis_hidrics_inout.notes_cancel        := NULL;
        epis_hidrics_inout.id_prof_inter       := NULL;
        epis_hidrics_inout.notes_inter         := NULL;
        epis_hidrics_inout.dt_creation_tstz    := NULL;
        epis_hidrics_inout.dt_initial_tstz     := NULL;
        epis_hidrics_inout.dt_end_tstz         := NULL;
        epis_hidrics_inout.dt_cancel_tstz      := NULL;
        epis_hidrics_inout.dt_inter_tstz       := NULL;
        epis_hidrics_inout.create_user         := NULL;
        epis_hidrics_inout.create_time         := NULL;
        epis_hidrics_inout.create_institution  := NULL;
        epis_hidrics_inout.update_user         := NULL;
        epis_hidrics_inout.update_time         := NULL;
        epis_hidrics_inout.update_institution  := NULL;
        epis_hidrics_inout.flg_restricted      := NULL;
        epis_hidrics_inout.max_intake          := NULL;
        epis_hidrics_inout.min_output          := NULL;
        epis_hidrics_inout.dt_next_balance     := NULL;
        epis_hidrics_inout.id_patient          := NULL;
        epis_hidrics_inout.id_cancel_reason    := NULL;
        epis_hidrics_inout.id_prof_last_change := NULL;
        epis_hidrics_inout.dt_epis_hidrics     := NULL;
        epis_hidrics_inout.flg_action          := NULL;
        epis_hidrics_inout.interval_minutes    := NULL;
    END initrec;

    FUNCTION initrec RETURN epis_hidrics%ROWTYPE IS
        l_epis_hidrics epis_hidrics%ROWTYPE;
    BEGIN
        RETURN l_epis_hidrics;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_hidrics_tc IS
        data epis_hidrics_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM epis_hidrics
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_hidrics_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data epis_hidrics_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_epis_hidrics;
/
