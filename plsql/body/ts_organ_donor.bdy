/*-- Last Change Revision: $Rev: 2028281 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:50 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY ts_organ_donor
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Junho 10, 2010 16:3:53
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_organ_donor_in          IN organ_donor.id_organ_donor%TYPE,
        id_patient_in              IN organ_donor.id_patient%TYPE DEFAULT NULL,
        id_episode_in              IN organ_donor.id_episode%TYPE DEFAULT NULL,
        id_sl_able_don_organs_in   IN organ_donor.id_sl_able_don_organs%TYPE DEFAULT NULL,
        reason_not_able_don_org_in IN organ_donor.reason_not_able_don_org%TYPE DEFAULT NULL,
        id_sl_able_don_tissues_in  IN organ_donor.id_sl_able_don_tissues%TYPE DEFAULT NULL,
        reason_not_able_don_tis_in IN organ_donor.reason_not_able_don_tis%TYPE DEFAULT NULL,
        id_sl_will_consulted_in    IN organ_donor.id_sl_will_consulted%TYPE DEFAULT NULL,
        id_sl_will_result_in       IN organ_donor.id_sl_will_result%TYPE DEFAULT NULL,
        reason_will_not_cons_in    IN organ_donor.reason_will_not_cons%TYPE DEFAULT NULL,
        id_sl_other_declaration_in IN organ_donor.id_sl_other_declaration%TYPE DEFAULT NULL,
        other_declaration_notes_in IN organ_donor.other_declaration_notes%TYPE DEFAULT NULL,
        id_sl_don_authorized_in    IN organ_donor.id_sl_don_authorized%TYPE DEFAULT NULL,
        responsible_name_in        IN organ_donor.responsible_name%TYPE DEFAULT NULL,
        id_family_relationship_in  IN organ_donor.id_family_relationship%TYPE DEFAULT NULL,
        reason_not_authorized_in   IN organ_donor.reason_not_authorized%TYPE DEFAULT NULL,
        id_sl_donation_approved_in IN organ_donor.id_sl_donation_approved%TYPE DEFAULT NULL,
        id_sl_object_research_in   IN organ_donor.id_sl_object_research%TYPE DEFAULT NULL,
        reason_not_approved_in     IN organ_donor.reason_not_approved%TYPE DEFAULT NULL,
        id_sl_family_letter_in     IN organ_donor.id_sl_family_letter%TYPE DEFAULT NULL,
        family_name_in             IN organ_donor.family_name%TYPE DEFAULT NULL,
        family_address_in          IN organ_donor.family_address%TYPE DEFAULT NULL,
        id_sl_justice_consent_in   IN organ_donor.id_sl_justice_consent%TYPE DEFAULT NULL,
        id_sl_donor_center_in      IN organ_donor.id_sl_donor_center%TYPE DEFAULT NULL,
        reason_donor_center_in     IN organ_donor.reason_donor_center%TYPE DEFAULT NULL,
        id_prof_organ_donor_in     IN organ_donor.id_prof_organ_donor%TYPE DEFAULT NULL,
        dt_organ_donor_in          IN organ_donor.dt_organ_donor%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN organ_donor.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in            IN organ_donor.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in              IN organ_donor.flg_status%TYPE DEFAULT NULL,
        create_user_in             IN organ_donor.create_user%TYPE DEFAULT NULL,
        create_time_in             IN organ_donor.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN organ_donor.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN organ_donor.update_user%TYPE DEFAULT NULL,
        update_time_in             IN organ_donor.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN organ_donor.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT TABLE_VARCHAR
    ) IS
    BEGIN
    
        INSERT INTO organ_donor
            (id_organ_donor,
             id_patient,
             id_episode,
             id_sl_able_don_organs,
             reason_not_able_don_org,
             id_sl_able_don_tissues,
             reason_not_able_don_tis,
             id_sl_will_consulted,
             id_sl_will_result,
             reason_will_not_cons,
             id_sl_other_declaration,
             other_declaration_notes,
             id_sl_don_authorized,
             responsible_name,
             id_family_relationship,
             reason_not_authorized,
             id_sl_donation_approved,
             id_sl_object_research,
             reason_not_approved,
             id_sl_family_letter,
             family_name,
             family_address,
             id_sl_justice_consent,
             id_sl_donor_center,
             reason_donor_center,
             id_prof_organ_donor,
             dt_organ_donor,
             id_cancel_reason,
             notes_cancel,
             flg_status,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_organ_donor_in,
             id_patient_in,
             id_episode_in,
             id_sl_able_don_organs_in,
             reason_not_able_don_org_in,
             id_sl_able_don_tissues_in,
             reason_not_able_don_tis_in,
             id_sl_will_consulted_in,
             id_sl_will_result_in,
             reason_will_not_cons_in,
             id_sl_other_declaration_in,
             other_declaration_notes_in,
             id_sl_don_authorized_in,
             responsible_name_in,
             id_family_relationship_in,
             reason_not_authorized_in,
             id_sl_donation_approved_in,
             id_sl_object_research_in,
             reason_not_approved_in,
             id_sl_family_letter_in,
             family_name_in,
             family_address_in,
             id_sl_justice_consent_in,
             id_sl_donor_center_in,
             reason_donor_center_in,
             id_prof_organ_donor_in,
             dt_organ_donor_in,
             id_cancel_reason_in,
             notes_cancel_in,
             flg_status_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'OD_E_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "OD_E_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'ORGAN_DONOR',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSIF l_name = 'OD_P_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "OD_P_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'ORGAN_DONOR',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ORGAN_DONOR');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    IF l_name = 'OD_CR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'OD_E_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'OD_FR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FAMILY_RELATIONSHIP',
                                                        value_in           => id_family_relationship_in);
                    END IF;
                    IF l_name = 'OD_P_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'OD_P_OD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_ORGAN_DONOR',
                                                        value_in           => id_prof_organ_donor_in);
                    END IF;
                    IF l_name = 'OD_SLADO_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_ABLE_DON_ORGANS',
                                                        value_in           => id_sl_able_don_organs_in);
                    END IF;
                    IF l_name = 'OD_SLADT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_ABLE_DON_TISSUES',
                                                        value_in           => id_sl_able_don_tissues_in);
                    END IF;
                    IF l_name = 'OD_SLDAP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_DON_AUTHORIZED',
                                                        value_in           => id_sl_don_authorized_in);
                    END IF;
                    IF l_name = 'OD_SLDAU_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_OTHER_DECLARATION',
                                                        value_in           => id_sl_other_declaration_in);
                    END IF;
                    IF l_name = 'OD_SLDC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_JUSTICE_CONSENT',
                                                        value_in           => id_sl_justice_consent_in);
                    END IF;
                    IF l_name = 'OD_SLFL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_OBJECT_RESEARCH',
                                                        value_in           => id_sl_object_research_in);
                    END IF;
                    IF l_name = 'OD_SLJC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_FAMILY_LETTER',
                                                        value_in           => id_sl_family_letter_in);
                    END IF;
                    IF l_name = 'OD_SLOD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_WILL_RESULT',
                                                        value_in           => id_sl_will_result_in);
                    END IF;
                    IF l_name = 'OD_SLOR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_DONATION_APPROVED',
                                                        value_in           => id_sl_donation_approved_in);
                    END IF;
                    IF l_name = 'OD_SLWC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_WILL_CONSULTED',
                                                        value_in           => id_sl_will_consulted_in);
                    END IF;
                    IF l_name = 'OD_SLWR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_DONOR_CENTER',
                                                        value_in           => id_sl_donor_center_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_organ_donor_in          IN organ_donor.id_organ_donor%TYPE,
        id_patient_in              IN organ_donor.id_patient%TYPE DEFAULT NULL,
        id_episode_in              IN organ_donor.id_episode%TYPE DEFAULT NULL,
        id_sl_able_don_organs_in   IN organ_donor.id_sl_able_don_organs%TYPE DEFAULT NULL,
        reason_not_able_don_org_in IN organ_donor.reason_not_able_don_org%TYPE DEFAULT NULL,
        id_sl_able_don_tissues_in  IN organ_donor.id_sl_able_don_tissues%TYPE DEFAULT NULL,
        reason_not_able_don_tis_in IN organ_donor.reason_not_able_don_tis%TYPE DEFAULT NULL,
        id_sl_will_consulted_in    IN organ_donor.id_sl_will_consulted%TYPE DEFAULT NULL,
        id_sl_will_result_in       IN organ_donor.id_sl_will_result%TYPE DEFAULT NULL,
        reason_will_not_cons_in    IN organ_donor.reason_will_not_cons%TYPE DEFAULT NULL,
        id_sl_other_declaration_in IN organ_donor.id_sl_other_declaration%TYPE DEFAULT NULL,
        other_declaration_notes_in IN organ_donor.other_declaration_notes%TYPE DEFAULT NULL,
        id_sl_don_authorized_in    IN organ_donor.id_sl_don_authorized%TYPE DEFAULT NULL,
        responsible_name_in        IN organ_donor.responsible_name%TYPE DEFAULT NULL,
        id_family_relationship_in  IN organ_donor.id_family_relationship%TYPE DEFAULT NULL,
        reason_not_authorized_in   IN organ_donor.reason_not_authorized%TYPE DEFAULT NULL,
        id_sl_donation_approved_in IN organ_donor.id_sl_donation_approved%TYPE DEFAULT NULL,
        id_sl_object_research_in   IN organ_donor.id_sl_object_research%TYPE DEFAULT NULL,
        reason_not_approved_in     IN organ_donor.reason_not_approved%TYPE DEFAULT NULL,
        id_sl_family_letter_in     IN organ_donor.id_sl_family_letter%TYPE DEFAULT NULL,
        family_name_in             IN organ_donor.family_name%TYPE DEFAULT NULL,
        family_address_in          IN organ_donor.family_address%TYPE DEFAULT NULL,
        id_sl_justice_consent_in   IN organ_donor.id_sl_justice_consent%TYPE DEFAULT NULL,
        id_sl_donor_center_in      IN organ_donor.id_sl_donor_center%TYPE DEFAULT NULL,
        reason_donor_center_in     IN organ_donor.reason_donor_center%TYPE DEFAULT NULL,
        id_prof_organ_donor_in     IN organ_donor.id_prof_organ_donor%TYPE DEFAULT NULL,
        dt_organ_donor_in          IN organ_donor.dt_organ_donor%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN organ_donor.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in            IN organ_donor.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in              IN organ_donor.flg_status%TYPE DEFAULT NULL,
        create_user_in             IN organ_donor.create_user%TYPE DEFAULT NULL,
        create_time_in             IN organ_donor.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN organ_donor.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN organ_donor.update_user%TYPE DEFAULT NULL,
        update_time_in             IN organ_donor.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN organ_donor.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
    
        ins(id_organ_donor_in          => id_organ_donor_in,
            id_patient_in              => id_patient_in,
            id_episode_in              => id_episode_in,
            id_sl_able_don_organs_in   => id_sl_able_don_organs_in,
            reason_not_able_don_org_in => reason_not_able_don_org_in,
            id_sl_able_don_tissues_in  => id_sl_able_don_tissues_in,
            reason_not_able_don_tis_in => reason_not_able_don_tis_in,
            id_sl_will_consulted_in    => id_sl_will_consulted_in,
            id_sl_will_result_in       => id_sl_will_result_in,
            reason_will_not_cons_in    => reason_will_not_cons_in,
            id_sl_other_declaration_in => id_sl_other_declaration_in,
            other_declaration_notes_in => other_declaration_notes_in,
            id_sl_don_authorized_in    => id_sl_don_authorized_in,
            responsible_name_in        => responsible_name_in,
            id_family_relationship_in  => id_family_relationship_in,
            reason_not_authorized_in   => reason_not_authorized_in,
            id_sl_donation_approved_in => id_sl_donation_approved_in,
            id_sl_object_research_in   => id_sl_object_research_in,
            reason_not_approved_in     => reason_not_approved_in,
            id_sl_family_letter_in     => id_sl_family_letter_in,
            family_name_in             => family_name_in,
            family_address_in          => family_address_in,
            id_sl_justice_consent_in   => id_sl_justice_consent_in,
            id_sl_donor_center_in      => id_sl_donor_center_in,
            reason_donor_center_in     => reason_donor_center_in,
            id_prof_organ_donor_in     => id_prof_organ_donor_in,
            dt_organ_donor_in          => dt_organ_donor_in,
            id_cancel_reason_in        => id_cancel_reason_in,
            notes_cancel_in            => notes_cancel_in,
            flg_status_in              => flg_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    /*
    START Special logic for handling LOB columns....
    */

    PROCEDURE n_ins_clobs_in_chunks
    (
        id_organ_donor_in          IN organ_donor.id_organ_donor%TYPE,
        id_patient_in              IN organ_donor.id_patient%TYPE DEFAULT NULL,
        id_episode_in              IN organ_donor.id_episode%TYPE DEFAULT NULL,
        id_sl_able_don_organs_in   IN organ_donor.id_sl_able_don_organs%TYPE DEFAULT NULL,
        reason_not_able_don_org_in IN organ_donor.reason_not_able_don_org%TYPE DEFAULT NULL,
        id_sl_able_don_tissues_in  IN organ_donor.id_sl_able_don_tissues%TYPE DEFAULT NULL,
        reason_not_able_don_tis_in IN organ_donor.reason_not_able_don_tis%TYPE DEFAULT NULL,
        id_sl_will_consulted_in    IN organ_donor.id_sl_will_consulted%TYPE DEFAULT NULL,
        id_sl_will_result_in       IN organ_donor.id_sl_will_result%TYPE DEFAULT NULL,
        reason_will_not_cons_in    IN organ_donor.reason_will_not_cons%TYPE DEFAULT NULL,
        id_sl_other_declaration_in IN organ_donor.id_sl_other_declaration%TYPE DEFAULT NULL,
        other_declaration_notes_in IN organ_donor.other_declaration_notes%TYPE DEFAULT NULL,
        id_sl_don_authorized_in    IN organ_donor.id_sl_don_authorized%TYPE DEFAULT NULL,
        responsible_name_in        IN organ_donor.responsible_name%TYPE DEFAULT NULL,
        id_family_relationship_in  IN organ_donor.id_family_relationship%TYPE DEFAULT NULL,
        reason_not_authorized_in   IN organ_donor.reason_not_authorized%TYPE DEFAULT NULL,
        id_sl_donation_approved_in IN organ_donor.id_sl_donation_approved%TYPE DEFAULT NULL,
        id_sl_object_research_in   IN organ_donor.id_sl_object_research%TYPE DEFAULT NULL,
        reason_not_approved_in     IN organ_donor.reason_not_approved%TYPE DEFAULT NULL,
        id_sl_family_letter_in     IN organ_donor.id_sl_family_letter%TYPE DEFAULT NULL,
        family_name_in             IN organ_donor.family_name%TYPE DEFAULT NULL,
        family_address_in          IN organ_donor.family_address%TYPE DEFAULT NULL,
        id_sl_justice_consent_in   IN organ_donor.id_sl_justice_consent%TYPE DEFAULT NULL,
        id_sl_donor_center_in      IN organ_donor.id_sl_donor_center%TYPE DEFAULT NULL,
        reason_donor_center_in     IN organ_donor.reason_donor_center%TYPE DEFAULT NULL,
        id_prof_organ_donor_in     IN organ_donor.id_prof_organ_donor%TYPE DEFAULT NULL,
        dt_organ_donor_in          IN organ_donor.dt_organ_donor%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN organ_donor.id_cancel_reason%TYPE DEFAULT NULL,
        flg_status_in              IN organ_donor.flg_status%TYPE DEFAULT NULL,
        create_user_in             IN organ_donor.create_user%TYPE DEFAULT NULL,
        create_time_in             IN organ_donor.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN organ_donor.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN organ_donor.update_user%TYPE DEFAULT NULL,
        update_time_in             IN organ_donor.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN organ_donor.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        clob_columns_in            IN varchar2_t,
        clob_pieces_in             IN varchar2_t
    ) IS
        l_notes_cancel CLOB;
        i              PLS_INTEGER;
        current_column VARCHAR2(30) := '';
    BEGIN
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.FIRST .. clob_columns_in.LAST
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'notes_cancel_in' THEN
                            IF l_notes_cancel IS NULL
                            THEN
                                dbms_lob.createtemporary(l_notes_cancel, TRUE, dbms_lob.CALL);
                            END IF;
                    END CASE; END IF;
            
                CASE current_column
                    WHEN 'notes_cancel_in' THEN
                        dbms_lob.writeappend(l_notes_cancel, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE; END IF;
        END LOOP;
    
        ins(id_organ_donor_in          => id_organ_donor_in,
            id_patient_in              => id_patient_in,
            id_episode_in              => id_episode_in,
            id_sl_able_don_organs_in   => id_sl_able_don_organs_in,
            reason_not_able_don_org_in => reason_not_able_don_org_in,
            id_sl_able_don_tissues_in  => id_sl_able_don_tissues_in,
            reason_not_able_don_tis_in => reason_not_able_don_tis_in,
            id_sl_will_consulted_in    => id_sl_will_consulted_in,
            id_sl_will_result_in       => id_sl_will_result_in,
            reason_will_not_cons_in    => reason_will_not_cons_in,
            id_sl_other_declaration_in => id_sl_other_declaration_in,
            other_declaration_notes_in => other_declaration_notes_in,
            id_sl_don_authorized_in    => id_sl_don_authorized_in,
            responsible_name_in        => responsible_name_in,
            id_family_relationship_in  => id_family_relationship_in,
            reason_not_authorized_in   => reason_not_authorized_in,
            id_sl_donation_approved_in => id_sl_donation_approved_in,
            id_sl_object_research_in   => id_sl_object_research_in,
            reason_not_approved_in     => reason_not_approved_in,
            id_sl_family_letter_in     => id_sl_family_letter_in,
            family_name_in             => family_name_in,
            family_address_in          => family_address_in,
            id_sl_justice_consent_in   => id_sl_justice_consent_in,
            id_sl_donor_center_in      => id_sl_donor_center_in,
            reason_donor_center_in     => reason_donor_center_in,
            id_prof_organ_donor_in     => id_prof_organ_donor_in,
            dt_organ_donor_in          => dt_organ_donor_in,
            id_cancel_reason_in        => id_cancel_reason_in,
            notes_cancel_in            => l_notes_cancel,
            flg_status_in              => flg_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in);
    
    END n_ins_clobs_in_chunks;

    PROCEDURE n_upd_clobs_in_chunks
    (
        id_organ_donor_in          IN organ_donor.id_organ_donor%TYPE,
        id_patient_in              IN organ_donor.id_patient%TYPE DEFAULT NULL,
        id_episode_in              IN organ_donor.id_episode%TYPE DEFAULT NULL,
        id_sl_able_don_organs_in   IN organ_donor.id_sl_able_don_organs%TYPE DEFAULT NULL,
        reason_not_able_don_org_in IN organ_donor.reason_not_able_don_org%TYPE DEFAULT NULL,
        id_sl_able_don_tissues_in  IN organ_donor.id_sl_able_don_tissues%TYPE DEFAULT NULL,
        reason_not_able_don_tis_in IN organ_donor.reason_not_able_don_tis%TYPE DEFAULT NULL,
        id_sl_will_consulted_in    IN organ_donor.id_sl_will_consulted%TYPE DEFAULT NULL,
        id_sl_will_result_in       IN organ_donor.id_sl_will_result%TYPE DEFAULT NULL,
        reason_will_not_cons_in    IN organ_donor.reason_will_not_cons%TYPE DEFAULT NULL,
        id_sl_other_declaration_in IN organ_donor.id_sl_other_declaration%TYPE DEFAULT NULL,
        other_declaration_notes_in IN organ_donor.other_declaration_notes%TYPE DEFAULT NULL,
        id_sl_don_authorized_in    IN organ_donor.id_sl_don_authorized%TYPE DEFAULT NULL,
        responsible_name_in        IN organ_donor.responsible_name%TYPE DEFAULT NULL,
        id_family_relationship_in  IN organ_donor.id_family_relationship%TYPE DEFAULT NULL,
        reason_not_authorized_in   IN organ_donor.reason_not_authorized%TYPE DEFAULT NULL,
        id_sl_donation_approved_in IN organ_donor.id_sl_donation_approved%TYPE DEFAULT NULL,
        id_sl_object_research_in   IN organ_donor.id_sl_object_research%TYPE DEFAULT NULL,
        reason_not_approved_in     IN organ_donor.reason_not_approved%TYPE DEFAULT NULL,
        id_sl_family_letter_in     IN organ_donor.id_sl_family_letter%TYPE DEFAULT NULL,
        family_name_in             IN organ_donor.family_name%TYPE DEFAULT NULL,
        family_address_in          IN organ_donor.family_address%TYPE DEFAULT NULL,
        id_sl_justice_consent_in   IN organ_donor.id_sl_justice_consent%TYPE DEFAULT NULL,
        id_sl_donor_center_in      IN organ_donor.id_sl_donor_center%TYPE DEFAULT NULL,
        reason_donor_center_in     IN organ_donor.reason_donor_center%TYPE DEFAULT NULL,
        id_prof_organ_donor_in     IN organ_donor.id_prof_organ_donor%TYPE DEFAULT NULL,
        dt_organ_donor_in          IN organ_donor.dt_organ_donor%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN organ_donor.id_cancel_reason%TYPE DEFAULT NULL,
        flg_status_in              IN organ_donor.flg_status%TYPE DEFAULT NULL,
        create_user_in             IN organ_donor.create_user%TYPE DEFAULT NULL,
        create_time_in             IN organ_donor.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN organ_donor.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN organ_donor.update_user%TYPE DEFAULT NULL,
        update_time_in             IN organ_donor.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN organ_donor.update_institution%TYPE DEFAULT NULL,
        ignore_if_null_in          IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE,
        clob_columns_in            IN varchar2_t,
        clob_pieces_in             IN varchar2_t
    ) IS
        l_notes_cancel CLOB;
        i              PLS_INTEGER;
        current_column VARCHAR2(30) := '';
        l_rows         PLS_INTEGER;
    BEGIN
    
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.FIRST .. clob_columns_in.LAST
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'notes_cancel_in' THEN
                            IF l_notes_cancel IS NULL
                            THEN
                                dbms_lob.createtemporary(l_notes_cancel, TRUE, dbms_lob.CALL);
                            END IF;
                    END CASE; END IF;
            
                CASE current_column
                    WHEN 'notes_cancel_in' THEN
                        dbms_lob.writeappend(l_notes_cancel, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE; END IF;
        END LOOP;
    
        upd(id_organ_donor_in          => id_organ_donor_in,
            id_patient_in              => id_patient_in,
            id_episode_in              => id_episode_in,
            id_sl_able_don_organs_in   => id_sl_able_don_organs_in,
            reason_not_able_don_org_in => reason_not_able_don_org_in,
            id_sl_able_don_tissues_in  => id_sl_able_don_tissues_in,
            reason_not_able_don_tis_in => reason_not_able_don_tis_in,
            id_sl_will_consulted_in    => id_sl_will_consulted_in,
            id_sl_will_result_in       => id_sl_will_result_in,
            reason_will_not_cons_in    => reason_will_not_cons_in,
            id_sl_other_declaration_in => id_sl_other_declaration_in,
            other_declaration_notes_in => other_declaration_notes_in,
            id_sl_don_authorized_in    => id_sl_don_authorized_in,
            responsible_name_in        => responsible_name_in,
            id_family_relationship_in  => id_family_relationship_in,
            reason_not_authorized_in   => reason_not_authorized_in,
            id_sl_donation_approved_in => id_sl_donation_approved_in,
            id_sl_object_research_in   => id_sl_object_research_in,
            reason_not_approved_in     => reason_not_approved_in,
            id_sl_family_letter_in     => id_sl_family_letter_in,
            family_name_in             => family_name_in,
            family_address_in          => family_address_in,
            id_sl_justice_consent_in   => id_sl_justice_consent_in,
            id_sl_donor_center_in      => id_sl_donor_center_in,
            reason_donor_center_in     => reason_donor_center_in,
            id_prof_organ_donor_in     => id_prof_organ_donor_in,
            dt_organ_donor_in          => dt_organ_donor_in,
            id_cancel_reason_in        => id_cancel_reason_in,
            notes_cancel_in            => l_notes_cancel,
            flg_status_in              => flg_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in);
    END n_upd_clobs_in_chunks;

    PROCEDURE n_upd_ins_clobs_in_chunks
    (
        id_organ_donor_in          IN organ_donor.id_organ_donor%TYPE,
        id_patient_in              IN organ_donor.id_patient%TYPE DEFAULT NULL,
        id_episode_in              IN organ_donor.id_episode%TYPE DEFAULT NULL,
        id_sl_able_don_organs_in   IN organ_donor.id_sl_able_don_organs%TYPE DEFAULT NULL,
        reason_not_able_don_org_in IN organ_donor.reason_not_able_don_org%TYPE DEFAULT NULL,
        id_sl_able_don_tissues_in  IN organ_donor.id_sl_able_don_tissues%TYPE DEFAULT NULL,
        reason_not_able_don_tis_in IN organ_donor.reason_not_able_don_tis%TYPE DEFAULT NULL,
        id_sl_will_consulted_in    IN organ_donor.id_sl_will_consulted%TYPE DEFAULT NULL,
        id_sl_will_result_in       IN organ_donor.id_sl_will_result%TYPE DEFAULT NULL,
        reason_will_not_cons_in    IN organ_donor.reason_will_not_cons%TYPE DEFAULT NULL,
        id_sl_other_declaration_in IN organ_donor.id_sl_other_declaration%TYPE DEFAULT NULL,
        other_declaration_notes_in IN organ_donor.other_declaration_notes%TYPE DEFAULT NULL,
        id_sl_don_authorized_in    IN organ_donor.id_sl_don_authorized%TYPE DEFAULT NULL,
        responsible_name_in        IN organ_donor.responsible_name%TYPE DEFAULT NULL,
        id_family_relationship_in  IN organ_donor.id_family_relationship%TYPE DEFAULT NULL,
        reason_not_authorized_in   IN organ_donor.reason_not_authorized%TYPE DEFAULT NULL,
        id_sl_donation_approved_in IN organ_donor.id_sl_donation_approved%TYPE DEFAULT NULL,
        id_sl_object_research_in   IN organ_donor.id_sl_object_research%TYPE DEFAULT NULL,
        reason_not_approved_in     IN organ_donor.reason_not_approved%TYPE DEFAULT NULL,
        id_sl_family_letter_in     IN organ_donor.id_sl_family_letter%TYPE DEFAULT NULL,
        family_name_in             IN organ_donor.family_name%TYPE DEFAULT NULL,
        family_address_in          IN organ_donor.family_address%TYPE DEFAULT NULL,
        id_sl_justice_consent_in   IN organ_donor.id_sl_justice_consent%TYPE DEFAULT NULL,
        id_sl_donor_center_in      IN organ_donor.id_sl_donor_center%TYPE DEFAULT NULL,
        reason_donor_center_in     IN organ_donor.reason_donor_center%TYPE DEFAULT NULL,
        id_prof_organ_donor_in     IN organ_donor.id_prof_organ_donor%TYPE DEFAULT NULL,
        dt_organ_donor_in          IN organ_donor.dt_organ_donor%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN organ_donor.id_cancel_reason%TYPE DEFAULT NULL,
        flg_status_in              IN organ_donor.flg_status%TYPE DEFAULT NULL,
        create_user_in             IN organ_donor.create_user%TYPE DEFAULT NULL,
        create_time_in             IN organ_donor.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN organ_donor.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN organ_donor.update_user%TYPE DEFAULT NULL,
        update_time_in             IN organ_donor.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN organ_donor.update_institution%TYPE DEFAULT NULL,
        ignore_if_null_in          IN BOOLEAN DEFAULT TRUE,
        handle_error_in            IN BOOLEAN DEFAULT TRUE,
        clob_columns_in            IN varchar2_t,
        clob_pieces_in             IN varchar2_t
    ) IS
    BEGIN
        n_upd_clobs_in_chunks(id_organ_donor_in          => id_organ_donor_in,
                              id_patient_in              => id_patient_in,
                              id_episode_in              => id_episode_in,
                              id_sl_able_don_organs_in   => id_sl_able_don_organs_in,
                              reason_not_able_don_org_in => reason_not_able_don_org_in,
                              id_sl_able_don_tissues_in  => id_sl_able_don_tissues_in,
                              reason_not_able_don_tis_in => reason_not_able_don_tis_in,
                              id_sl_will_consulted_in    => id_sl_will_consulted_in,
                              id_sl_will_result_in       => id_sl_will_result_in,
                              reason_will_not_cons_in    => reason_will_not_cons_in,
                              id_sl_other_declaration_in => id_sl_other_declaration_in,
                              other_declaration_notes_in => other_declaration_notes_in,
                              id_sl_don_authorized_in    => id_sl_don_authorized_in,
                              responsible_name_in        => responsible_name_in,
                              id_family_relationship_in  => id_family_relationship_in,
                              reason_not_authorized_in   => reason_not_authorized_in,
                              id_sl_donation_approved_in => id_sl_donation_approved_in,
                              id_sl_object_research_in   => id_sl_object_research_in,
                              reason_not_approved_in     => reason_not_approved_in,
                              id_sl_family_letter_in     => id_sl_family_letter_in,
                              family_name_in             => family_name_in,
                              family_address_in          => family_address_in,
                              id_sl_justice_consent_in   => id_sl_justice_consent_in,
                              id_sl_donor_center_in      => id_sl_donor_center_in,
                              reason_donor_center_in     => reason_donor_center_in,
                              id_prof_organ_donor_in     => id_prof_organ_donor_in,
                              dt_organ_donor_in          => dt_organ_donor_in,
                              id_cancel_reason_in        => id_cancel_reason_in,
                              flg_status_in              => flg_status_in,
                              create_user_in             => create_user_in,
                              create_time_in             => create_time_in,
                              create_institution_in      => create_institution_in,
                              update_user_in             => update_user_in,
                              update_time_in             => update_time_in,
                              update_institution_in      => update_institution_in,
                              clob_columns_in            => clob_columns_in,
                              clob_pieces_in             => clob_pieces_in,
                              ignore_if_null_in          => ignore_if_null_in,
                              handle_error_in            => handle_error_in);
    
        IF SQL%ROWCOUNT = 0
        THEN
            n_ins_clobs_in_chunks(id_organ_donor_in          => id_organ_donor_in,
                                  id_patient_in              => id_patient_in,
                                  id_episode_in              => id_episode_in,
                                  id_sl_able_don_organs_in   => id_sl_able_don_organs_in,
                                  reason_not_able_don_org_in => reason_not_able_don_org_in,
                                  id_sl_able_don_tissues_in  => id_sl_able_don_tissues_in,
                                  reason_not_able_don_tis_in => reason_not_able_don_tis_in,
                                  id_sl_will_consulted_in    => id_sl_will_consulted_in,
                                  id_sl_will_result_in       => id_sl_will_result_in,
                                  reason_will_not_cons_in    => reason_will_not_cons_in,
                                  id_sl_other_declaration_in => id_sl_other_declaration_in,
                                  other_declaration_notes_in => other_declaration_notes_in,
                                  id_sl_don_authorized_in    => id_sl_don_authorized_in,
                                  responsible_name_in        => responsible_name_in,
                                  id_family_relationship_in  => id_family_relationship_in,
                                  reason_not_authorized_in   => reason_not_authorized_in,
                                  id_sl_donation_approved_in => id_sl_donation_approved_in,
                                  id_sl_object_research_in   => id_sl_object_research_in,
                                  reason_not_approved_in     => reason_not_approved_in,
                                  id_sl_family_letter_in     => id_sl_family_letter_in,
                                  family_name_in             => family_name_in,
                                  family_address_in          => family_address_in,
                                  id_sl_justice_consent_in   => id_sl_justice_consent_in,
                                  id_sl_donor_center_in      => id_sl_donor_center_in,
                                  reason_donor_center_in     => reason_donor_center_in,
                                  id_prof_organ_donor_in     => id_prof_organ_donor_in,
                                  dt_organ_donor_in          => dt_organ_donor_in,
                                  id_cancel_reason_in        => id_cancel_reason_in,
                                  flg_status_in              => flg_status_in,
                                  create_user_in             => create_user_in,
                                  create_time_in             => create_time_in,
                                  create_institution_in      => create_institution_in,
                                  update_user_in             => update_user_in,
                                  update_time_in             => update_time_in,
                                  update_institution_in      => update_institution_in,
                                  clob_columns_in            => clob_columns_in,
                                  clob_pieces_in             => clob_pieces_in,
                                  handle_error_in            => handle_error_in);
        END IF;
    END n_upd_ins_clobs_in_chunks;

    /*
    END Special logic for handling LOB columns.
    */

    PROCEDURE ins
    (
        rec_in          IN organ_donor%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT TABLE_VARCHAR
    ) IS
        l_rec organ_donor%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_organ_donor := next_key(sequence_in);
        END IF;
        ins(id_organ_donor_in          => l_rec.id_organ_donor,
            id_patient_in              => l_rec.id_patient,
            id_episode_in              => l_rec.id_episode,
            id_sl_able_don_organs_in   => l_rec.id_sl_able_don_organs,
            reason_not_able_don_org_in => l_rec.reason_not_able_don_org,
            id_sl_able_don_tissues_in  => l_rec.id_sl_able_don_tissues,
            reason_not_able_don_tis_in => l_rec.reason_not_able_don_tis,
            id_sl_will_consulted_in    => l_rec.id_sl_will_consulted,
            id_sl_will_result_in       => l_rec.id_sl_will_result,
            reason_will_not_cons_in    => l_rec.reason_will_not_cons,
            id_sl_other_declaration_in => l_rec.id_sl_other_declaration,
            other_declaration_notes_in => l_rec.other_declaration_notes,
            id_sl_don_authorized_in    => l_rec.id_sl_don_authorized,
            responsible_name_in        => l_rec.responsible_name,
            id_family_relationship_in  => l_rec.id_family_relationship,
            reason_not_authorized_in   => l_rec.reason_not_authorized,
            id_sl_donation_approved_in => l_rec.id_sl_donation_approved,
            id_sl_object_research_in   => l_rec.id_sl_object_research,
            reason_not_approved_in     => l_rec.reason_not_approved,
            id_sl_family_letter_in     => l_rec.id_sl_family_letter,
            family_name_in             => l_rec.family_name,
            family_address_in          => l_rec.family_address,
            id_sl_justice_consent_in   => l_rec.id_sl_justice_consent,
            id_sl_donor_center_in      => l_rec.id_sl_donor_center,
            reason_donor_center_in     => l_rec.reason_donor_center,
            id_prof_organ_donor_in     => l_rec.id_prof_organ_donor,
            dt_organ_donor_in          => l_rec.dt_organ_donor,
            id_cancel_reason_in        => l_rec.id_cancel_reason,
            notes_cancel_in            => l_rec.notes_cancel,
            flg_status_in              => l_rec.flg_status,
            create_user_in             => l_rec.create_user,
            create_time_in             => l_rec.create_time,
            create_institution_in      => l_rec.create_institution,
            update_user_in             => l_rec.update_user,
            update_time_in             => l_rec.update_time,
            update_institution_in      => l_rec.update_institution,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN organ_donor%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN organ_donor.id_organ_donor%TYPE
    
     IS
        retval organ_donor.id_organ_donor%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_organ_donor.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_ORGAN_DONOR'));
    END next_key;

    PROCEDURE ins
    (
        id_patient_in              IN organ_donor.id_patient%TYPE DEFAULT NULL,
        id_episode_in              IN organ_donor.id_episode%TYPE DEFAULT NULL,
        id_sl_able_don_organs_in   IN organ_donor.id_sl_able_don_organs%TYPE DEFAULT NULL,
        reason_not_able_don_org_in IN organ_donor.reason_not_able_don_org%TYPE DEFAULT NULL,
        id_sl_able_don_tissues_in  IN organ_donor.id_sl_able_don_tissues%TYPE DEFAULT NULL,
        reason_not_able_don_tis_in IN organ_donor.reason_not_able_don_tis%TYPE DEFAULT NULL,
        id_sl_will_consulted_in    IN organ_donor.id_sl_will_consulted%TYPE DEFAULT NULL,
        id_sl_will_result_in       IN organ_donor.id_sl_will_result%TYPE DEFAULT NULL,
        reason_will_not_cons_in    IN organ_donor.reason_will_not_cons%TYPE DEFAULT NULL,
        id_sl_other_declaration_in IN organ_donor.id_sl_other_declaration%TYPE DEFAULT NULL,
        other_declaration_notes_in IN organ_donor.other_declaration_notes%TYPE DEFAULT NULL,
        id_sl_don_authorized_in    IN organ_donor.id_sl_don_authorized%TYPE DEFAULT NULL,
        responsible_name_in        IN organ_donor.responsible_name%TYPE DEFAULT NULL,
        id_family_relationship_in  IN organ_donor.id_family_relationship%TYPE DEFAULT NULL,
        reason_not_authorized_in   IN organ_donor.reason_not_authorized%TYPE DEFAULT NULL,
        id_sl_donation_approved_in IN organ_donor.id_sl_donation_approved%TYPE DEFAULT NULL,
        id_sl_object_research_in   IN organ_donor.id_sl_object_research%TYPE DEFAULT NULL,
        reason_not_approved_in     IN organ_donor.reason_not_approved%TYPE DEFAULT NULL,
        id_sl_family_letter_in     IN organ_donor.id_sl_family_letter%TYPE DEFAULT NULL,
        family_name_in             IN organ_donor.family_name%TYPE DEFAULT NULL,
        family_address_in          IN organ_donor.family_address%TYPE DEFAULT NULL,
        id_sl_justice_consent_in   IN organ_donor.id_sl_justice_consent%TYPE DEFAULT NULL,
        id_sl_donor_center_in      IN organ_donor.id_sl_donor_center%TYPE DEFAULT NULL,
        reason_donor_center_in     IN organ_donor.reason_donor_center%TYPE DEFAULT NULL,
        id_prof_organ_donor_in     IN organ_donor.id_prof_organ_donor%TYPE DEFAULT NULL,
        dt_organ_donor_in          IN organ_donor.dt_organ_donor%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN organ_donor.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in            IN organ_donor.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in              IN organ_donor.flg_status%TYPE DEFAULT NULL,
        create_user_in             IN organ_donor.create_user%TYPE DEFAULT NULL,
        create_time_in             IN organ_donor.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN organ_donor.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN organ_donor.update_user%TYPE DEFAULT NULL,
        update_time_in             IN organ_donor.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN organ_donor.update_institution%TYPE DEFAULT NULL,
        id_organ_donor_out         IN OUT organ_donor.id_organ_donor%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT TABLE_VARCHAR
    ) IS
        l_pky organ_donor.id_organ_donor%TYPE := next_key;
    BEGIN
        ins(id_organ_donor_in          => l_pky,
            id_patient_in              => id_patient_in,
            id_episode_in              => id_episode_in,
            id_sl_able_don_organs_in   => id_sl_able_don_organs_in,
            reason_not_able_don_org_in => reason_not_able_don_org_in,
            id_sl_able_don_tissues_in  => id_sl_able_don_tissues_in,
            reason_not_able_don_tis_in => reason_not_able_don_tis_in,
            id_sl_will_consulted_in    => id_sl_will_consulted_in,
            id_sl_will_result_in       => id_sl_will_result_in,
            reason_will_not_cons_in    => reason_will_not_cons_in,
            id_sl_other_declaration_in => id_sl_other_declaration_in,
            other_declaration_notes_in => other_declaration_notes_in,
            id_sl_don_authorized_in    => id_sl_don_authorized_in,
            responsible_name_in        => responsible_name_in,
            id_family_relationship_in  => id_family_relationship_in,
            reason_not_authorized_in   => reason_not_authorized_in,
            id_sl_donation_approved_in => id_sl_donation_approved_in,
            id_sl_object_research_in   => id_sl_object_research_in,
            reason_not_approved_in     => reason_not_approved_in,
            id_sl_family_letter_in     => id_sl_family_letter_in,
            family_name_in             => family_name_in,
            family_address_in          => family_address_in,
            id_sl_justice_consent_in   => id_sl_justice_consent_in,
            id_sl_donor_center_in      => id_sl_donor_center_in,
            reason_donor_center_in     => reason_donor_center_in,
            id_prof_organ_donor_in     => id_prof_organ_donor_in,
            dt_organ_donor_in          => dt_organ_donor_in,
            id_cancel_reason_in        => id_cancel_reason_in,
            notes_cancel_in            => notes_cancel_in,
            flg_status_in              => flg_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        id_organ_donor_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_patient_in              IN organ_donor.id_patient%TYPE DEFAULT NULL,
        id_episode_in              IN organ_donor.id_episode%TYPE DEFAULT NULL,
        id_sl_able_don_organs_in   IN organ_donor.id_sl_able_don_organs%TYPE DEFAULT NULL,
        reason_not_able_don_org_in IN organ_donor.reason_not_able_don_org%TYPE DEFAULT NULL,
        id_sl_able_don_tissues_in  IN organ_donor.id_sl_able_don_tissues%TYPE DEFAULT NULL,
        reason_not_able_don_tis_in IN organ_donor.reason_not_able_don_tis%TYPE DEFAULT NULL,
        id_sl_will_consulted_in    IN organ_donor.id_sl_will_consulted%TYPE DEFAULT NULL,
        id_sl_will_result_in       IN organ_donor.id_sl_will_result%TYPE DEFAULT NULL,
        reason_will_not_cons_in    IN organ_donor.reason_will_not_cons%TYPE DEFAULT NULL,
        id_sl_other_declaration_in IN organ_donor.id_sl_other_declaration%TYPE DEFAULT NULL,
        other_declaration_notes_in IN organ_donor.other_declaration_notes%TYPE DEFAULT NULL,
        id_sl_don_authorized_in    IN organ_donor.id_sl_don_authorized%TYPE DEFAULT NULL,
        responsible_name_in        IN organ_donor.responsible_name%TYPE DEFAULT NULL,
        id_family_relationship_in  IN organ_donor.id_family_relationship%TYPE DEFAULT NULL,
        reason_not_authorized_in   IN organ_donor.reason_not_authorized%TYPE DEFAULT NULL,
        id_sl_donation_approved_in IN organ_donor.id_sl_donation_approved%TYPE DEFAULT NULL,
        id_sl_object_research_in   IN organ_donor.id_sl_object_research%TYPE DEFAULT NULL,
        reason_not_approved_in     IN organ_donor.reason_not_approved%TYPE DEFAULT NULL,
        id_sl_family_letter_in     IN organ_donor.id_sl_family_letter%TYPE DEFAULT NULL,
        family_name_in             IN organ_donor.family_name%TYPE DEFAULT NULL,
        family_address_in          IN organ_donor.family_address%TYPE DEFAULT NULL,
        id_sl_justice_consent_in   IN organ_donor.id_sl_justice_consent%TYPE DEFAULT NULL,
        id_sl_donor_center_in      IN organ_donor.id_sl_donor_center%TYPE DEFAULT NULL,
        reason_donor_center_in     IN organ_donor.reason_donor_center%TYPE DEFAULT NULL,
        id_prof_organ_donor_in     IN organ_donor.id_prof_organ_donor%TYPE DEFAULT NULL,
        dt_organ_donor_in          IN organ_donor.dt_organ_donor%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN organ_donor.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in            IN organ_donor.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in              IN organ_donor.flg_status%TYPE DEFAULT NULL,
        create_user_in             IN organ_donor.create_user%TYPE DEFAULT NULL,
        create_time_in             IN organ_donor.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN organ_donor.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN organ_donor.update_user%TYPE DEFAULT NULL,
        update_time_in             IN organ_donor.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN organ_donor.update_institution%TYPE DEFAULT NULL,
        id_organ_donor_out         IN OUT organ_donor.id_organ_donor%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        ins(id_patient_in              => id_patient_in,
            id_episode_in              => id_episode_in,
            id_sl_able_don_organs_in   => id_sl_able_don_organs_in,
            reason_not_able_don_org_in => reason_not_able_don_org_in,
            id_sl_able_don_tissues_in  => id_sl_able_don_tissues_in,
            reason_not_able_don_tis_in => reason_not_able_don_tis_in,
            id_sl_will_consulted_in    => id_sl_will_consulted_in,
            id_sl_will_result_in       => id_sl_will_result_in,
            reason_will_not_cons_in    => reason_will_not_cons_in,
            id_sl_other_declaration_in => id_sl_other_declaration_in,
            other_declaration_notes_in => other_declaration_notes_in,
            id_sl_don_authorized_in    => id_sl_don_authorized_in,
            responsible_name_in        => responsible_name_in,
            id_family_relationship_in  => id_family_relationship_in,
            reason_not_authorized_in   => reason_not_authorized_in,
            id_sl_donation_approved_in => id_sl_donation_approved_in,
            id_sl_object_research_in   => id_sl_object_research_in,
            reason_not_approved_in     => reason_not_approved_in,
            id_sl_family_letter_in     => id_sl_family_letter_in,
            family_name_in             => family_name_in,
            family_address_in          => family_address_in,
            id_sl_justice_consent_in   => id_sl_justice_consent_in,
            id_sl_donor_center_in      => id_sl_donor_center_in,
            reason_donor_center_in     => reason_donor_center_in,
            id_prof_organ_donor_in     => id_prof_organ_donor_in,
            dt_organ_donor_in          => dt_organ_donor_in,
            id_cancel_reason_in        => id_cancel_reason_in,
            notes_cancel_in            => notes_cancel_in,
            flg_status_in              => flg_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            id_organ_donor_out         => id_organ_donor_out,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    FUNCTION ins
    (
        id_patient_in              IN organ_donor.id_patient%TYPE DEFAULT NULL,
        id_episode_in              IN organ_donor.id_episode%TYPE DEFAULT NULL,
        id_sl_able_don_organs_in   IN organ_donor.id_sl_able_don_organs%TYPE DEFAULT NULL,
        reason_not_able_don_org_in IN organ_donor.reason_not_able_don_org%TYPE DEFAULT NULL,
        id_sl_able_don_tissues_in  IN organ_donor.id_sl_able_don_tissues%TYPE DEFAULT NULL,
        reason_not_able_don_tis_in IN organ_donor.reason_not_able_don_tis%TYPE DEFAULT NULL,
        id_sl_will_consulted_in    IN organ_donor.id_sl_will_consulted%TYPE DEFAULT NULL,
        id_sl_will_result_in       IN organ_donor.id_sl_will_result%TYPE DEFAULT NULL,
        reason_will_not_cons_in    IN organ_donor.reason_will_not_cons%TYPE DEFAULT NULL,
        id_sl_other_declaration_in IN organ_donor.id_sl_other_declaration%TYPE DEFAULT NULL,
        other_declaration_notes_in IN organ_donor.other_declaration_notes%TYPE DEFAULT NULL,
        id_sl_don_authorized_in    IN organ_donor.id_sl_don_authorized%TYPE DEFAULT NULL,
        responsible_name_in        IN organ_donor.responsible_name%TYPE DEFAULT NULL,
        id_family_relationship_in  IN organ_donor.id_family_relationship%TYPE DEFAULT NULL,
        reason_not_authorized_in   IN organ_donor.reason_not_authorized%TYPE DEFAULT NULL,
        id_sl_donation_approved_in IN organ_donor.id_sl_donation_approved%TYPE DEFAULT NULL,
        id_sl_object_research_in   IN organ_donor.id_sl_object_research%TYPE DEFAULT NULL,
        reason_not_approved_in     IN organ_donor.reason_not_approved%TYPE DEFAULT NULL,
        id_sl_family_letter_in     IN organ_donor.id_sl_family_letter%TYPE DEFAULT NULL,
        family_name_in             IN organ_donor.family_name%TYPE DEFAULT NULL,
        family_address_in          IN organ_donor.family_address%TYPE DEFAULT NULL,
        id_sl_justice_consent_in   IN organ_donor.id_sl_justice_consent%TYPE DEFAULT NULL,
        id_sl_donor_center_in      IN organ_donor.id_sl_donor_center%TYPE DEFAULT NULL,
        reason_donor_center_in     IN organ_donor.reason_donor_center%TYPE DEFAULT NULL,
        id_prof_organ_donor_in     IN organ_donor.id_prof_organ_donor%TYPE DEFAULT NULL,
        dt_organ_donor_in          IN organ_donor.dt_organ_donor%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN organ_donor.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in            IN organ_donor.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in              IN organ_donor.flg_status%TYPE DEFAULT NULL,
        create_user_in             IN organ_donor.create_user%TYPE DEFAULT NULL,
        create_time_in             IN organ_donor.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN organ_donor.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN organ_donor.update_user%TYPE DEFAULT NULL,
        update_time_in             IN organ_donor.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN organ_donor.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT TABLE_VARCHAR
    ) RETURN organ_donor.id_organ_donor%TYPE IS
        l_pky organ_donor.id_organ_donor%TYPE := next_key;
    BEGIN
        ins(id_organ_donor_in          => l_pky,
            id_patient_in              => id_patient_in,
            id_episode_in              => id_episode_in,
            id_sl_able_don_organs_in   => id_sl_able_don_organs_in,
            reason_not_able_don_org_in => reason_not_able_don_org_in,
            id_sl_able_don_tissues_in  => id_sl_able_don_tissues_in,
            reason_not_able_don_tis_in => reason_not_able_don_tis_in,
            id_sl_will_consulted_in    => id_sl_will_consulted_in,
            id_sl_will_result_in       => id_sl_will_result_in,
            reason_will_not_cons_in    => reason_will_not_cons_in,
            id_sl_other_declaration_in => id_sl_other_declaration_in,
            other_declaration_notes_in => other_declaration_notes_in,
            id_sl_don_authorized_in    => id_sl_don_authorized_in,
            responsible_name_in        => responsible_name_in,
            id_family_relationship_in  => id_family_relationship_in,
            reason_not_authorized_in   => reason_not_authorized_in,
            id_sl_donation_approved_in => id_sl_donation_approved_in,
            id_sl_object_research_in   => id_sl_object_research_in,
            reason_not_approved_in     => reason_not_approved_in,
            id_sl_family_letter_in     => id_sl_family_letter_in,
            family_name_in             => family_name_in,
            family_address_in          => family_address_in,
            id_sl_justice_consent_in   => id_sl_justice_consent_in,
            id_sl_donor_center_in      => id_sl_donor_center_in,
            reason_donor_center_in     => reason_donor_center_in,
            id_prof_organ_donor_in     => id_prof_organ_donor_in,
            dt_organ_donor_in          => dt_organ_donor_in,
            id_cancel_reason_in        => id_cancel_reason_in,
            notes_cancel_in            => notes_cancel_in,
            flg_status_in              => flg_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_patient_in              IN organ_donor.id_patient%TYPE DEFAULT NULL,
        id_episode_in              IN organ_donor.id_episode%TYPE DEFAULT NULL,
        id_sl_able_don_organs_in   IN organ_donor.id_sl_able_don_organs%TYPE DEFAULT NULL,
        reason_not_able_don_org_in IN organ_donor.reason_not_able_don_org%TYPE DEFAULT NULL,
        id_sl_able_don_tissues_in  IN organ_donor.id_sl_able_don_tissues%TYPE DEFAULT NULL,
        reason_not_able_don_tis_in IN organ_donor.reason_not_able_don_tis%TYPE DEFAULT NULL,
        id_sl_will_consulted_in    IN organ_donor.id_sl_will_consulted%TYPE DEFAULT NULL,
        id_sl_will_result_in       IN organ_donor.id_sl_will_result%TYPE DEFAULT NULL,
        reason_will_not_cons_in    IN organ_donor.reason_will_not_cons%TYPE DEFAULT NULL,
        id_sl_other_declaration_in IN organ_donor.id_sl_other_declaration%TYPE DEFAULT NULL,
        other_declaration_notes_in IN organ_donor.other_declaration_notes%TYPE DEFAULT NULL,
        id_sl_don_authorized_in    IN organ_donor.id_sl_don_authorized%TYPE DEFAULT NULL,
        responsible_name_in        IN organ_donor.responsible_name%TYPE DEFAULT NULL,
        id_family_relationship_in  IN organ_donor.id_family_relationship%TYPE DEFAULT NULL,
        reason_not_authorized_in   IN organ_donor.reason_not_authorized%TYPE DEFAULT NULL,
        id_sl_donation_approved_in IN organ_donor.id_sl_donation_approved%TYPE DEFAULT NULL,
        id_sl_object_research_in   IN organ_donor.id_sl_object_research%TYPE DEFAULT NULL,
        reason_not_approved_in     IN organ_donor.reason_not_approved%TYPE DEFAULT NULL,
        id_sl_family_letter_in     IN organ_donor.id_sl_family_letter%TYPE DEFAULT NULL,
        family_name_in             IN organ_donor.family_name%TYPE DEFAULT NULL,
        family_address_in          IN organ_donor.family_address%TYPE DEFAULT NULL,
        id_sl_justice_consent_in   IN organ_donor.id_sl_justice_consent%TYPE DEFAULT NULL,
        id_sl_donor_center_in      IN organ_donor.id_sl_donor_center%TYPE DEFAULT NULL,
        reason_donor_center_in     IN organ_donor.reason_donor_center%TYPE DEFAULT NULL,
        id_prof_organ_donor_in     IN organ_donor.id_prof_organ_donor%TYPE DEFAULT NULL,
        dt_organ_donor_in          IN organ_donor.dt_organ_donor%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN organ_donor.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in            IN organ_donor.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in              IN organ_donor.flg_status%TYPE DEFAULT NULL,
        create_user_in             IN organ_donor.create_user%TYPE DEFAULT NULL,
        create_time_in             IN organ_donor.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN organ_donor.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN organ_donor.update_user%TYPE DEFAULT NULL,
        update_time_in             IN organ_donor.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN organ_donor.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) RETURN organ_donor.id_organ_donor%TYPE IS
        l_pky    organ_donor.id_organ_donor%TYPE := next_key;
        rows_out TABLE_VARCHAR;
    BEGIN
        ins(id_organ_donor_in          => l_pky,
            id_patient_in              => id_patient_in,
            id_episode_in              => id_episode_in,
            id_sl_able_don_organs_in   => id_sl_able_don_organs_in,
            reason_not_able_don_org_in => reason_not_able_don_org_in,
            id_sl_able_don_tissues_in  => id_sl_able_don_tissues_in,
            reason_not_able_don_tis_in => reason_not_able_don_tis_in,
            id_sl_will_consulted_in    => id_sl_will_consulted_in,
            id_sl_will_result_in       => id_sl_will_result_in,
            reason_will_not_cons_in    => reason_will_not_cons_in,
            id_sl_other_declaration_in => id_sl_other_declaration_in,
            other_declaration_notes_in => other_declaration_notes_in,
            id_sl_don_authorized_in    => id_sl_don_authorized_in,
            responsible_name_in        => responsible_name_in,
            id_family_relationship_in  => id_family_relationship_in,
            reason_not_authorized_in   => reason_not_authorized_in,
            id_sl_donation_approved_in => id_sl_donation_approved_in,
            id_sl_object_research_in   => id_sl_object_research_in,
            reason_not_approved_in     => reason_not_approved_in,
            id_sl_family_letter_in     => id_sl_family_letter_in,
            family_name_in             => family_name_in,
            family_address_in          => family_address_in,
            id_sl_justice_consent_in   => id_sl_justice_consent_in,
            id_sl_donor_center_in      => id_sl_donor_center_in,
            reason_donor_center_in     => reason_donor_center_in,
            id_prof_organ_donor_in     => id_prof_organ_donor_in,
            dt_organ_donor_in          => dt_organ_donor_in,
            id_cancel_reason_in        => id_cancel_reason_in,
            notes_cancel_in            => notes_cancel_in,
            flg_status_in              => flg_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_patient_in              IN organ_donor.id_patient%TYPE DEFAULT NULL,
        id_episode_in              IN organ_donor.id_episode%TYPE DEFAULT NULL,
        id_sl_able_don_organs_in   IN organ_donor.id_sl_able_don_organs%TYPE DEFAULT NULL,
        reason_not_able_don_org_in IN organ_donor.reason_not_able_don_org%TYPE DEFAULT NULL,
        id_sl_able_don_tissues_in  IN organ_donor.id_sl_able_don_tissues%TYPE DEFAULT NULL,
        reason_not_able_don_tis_in IN organ_donor.reason_not_able_don_tis%TYPE DEFAULT NULL,
        id_sl_will_consulted_in    IN organ_donor.id_sl_will_consulted%TYPE DEFAULT NULL,
        id_sl_will_result_in       IN organ_donor.id_sl_will_result%TYPE DEFAULT NULL,
        reason_will_not_cons_in    IN organ_donor.reason_will_not_cons%TYPE DEFAULT NULL,
        id_sl_other_declaration_in IN organ_donor.id_sl_other_declaration%TYPE DEFAULT NULL,
        other_declaration_notes_in IN organ_donor.other_declaration_notes%TYPE DEFAULT NULL,
        id_sl_don_authorized_in    IN organ_donor.id_sl_don_authorized%TYPE DEFAULT NULL,
        responsible_name_in        IN organ_donor.responsible_name%TYPE DEFAULT NULL,
        id_family_relationship_in  IN organ_donor.id_family_relationship%TYPE DEFAULT NULL,
        reason_not_authorized_in   IN organ_donor.reason_not_authorized%TYPE DEFAULT NULL,
        id_sl_donation_approved_in IN organ_donor.id_sl_donation_approved%TYPE DEFAULT NULL,
        id_sl_object_research_in   IN organ_donor.id_sl_object_research%TYPE DEFAULT NULL,
        reason_not_approved_in     IN organ_donor.reason_not_approved%TYPE DEFAULT NULL,
        id_sl_family_letter_in     IN organ_donor.id_sl_family_letter%TYPE DEFAULT NULL,
        family_name_in             IN organ_donor.family_name%TYPE DEFAULT NULL,
        family_address_in          IN organ_donor.family_address%TYPE DEFAULT NULL,
        id_sl_justice_consent_in   IN organ_donor.id_sl_justice_consent%TYPE DEFAULT NULL,
        id_sl_donor_center_in      IN organ_donor.id_sl_donor_center%TYPE DEFAULT NULL,
        reason_donor_center_in     IN organ_donor.reason_donor_center%TYPE DEFAULT NULL,
        id_prof_organ_donor_in     IN organ_donor.id_prof_organ_donor%TYPE DEFAULT NULL,
        dt_organ_donor_in          IN organ_donor.dt_organ_donor%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN organ_donor.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in            IN organ_donor.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in              IN organ_donor.flg_status%TYPE DEFAULT NULL,
        create_user_in             IN organ_donor.create_user%TYPE DEFAULT NULL,
        create_time_in             IN organ_donor.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN organ_donor.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN organ_donor.update_user%TYPE DEFAULT NULL,
        update_time_in             IN organ_donor.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN organ_donor.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT TABLE_VARCHAR
    ) IS
        l_pky organ_donor.id_organ_donor%TYPE := next_key;
    BEGIN
        ins(id_organ_donor_in          => l_pky,
            id_patient_in              => id_patient_in,
            id_episode_in              => id_episode_in,
            id_sl_able_don_organs_in   => id_sl_able_don_organs_in,
            reason_not_able_don_org_in => reason_not_able_don_org_in,
            id_sl_able_don_tissues_in  => id_sl_able_don_tissues_in,
            reason_not_able_don_tis_in => reason_not_able_don_tis_in,
            id_sl_will_consulted_in    => id_sl_will_consulted_in,
            id_sl_will_result_in       => id_sl_will_result_in,
            reason_will_not_cons_in    => reason_will_not_cons_in,
            id_sl_other_declaration_in => id_sl_other_declaration_in,
            other_declaration_notes_in => other_declaration_notes_in,
            id_sl_don_authorized_in    => id_sl_don_authorized_in,
            responsible_name_in        => responsible_name_in,
            id_family_relationship_in  => id_family_relationship_in,
            reason_not_authorized_in   => reason_not_authorized_in,
            id_sl_donation_approved_in => id_sl_donation_approved_in,
            id_sl_object_research_in   => id_sl_object_research_in,
            reason_not_approved_in     => reason_not_approved_in,
            id_sl_family_letter_in     => id_sl_family_letter_in,
            family_name_in             => family_name_in,
            family_address_in          => family_address_in,
            id_sl_justice_consent_in   => id_sl_justice_consent_in,
            id_sl_donor_center_in      => id_sl_donor_center_in,
            reason_donor_center_in     => reason_donor_center_in,
            id_prof_organ_donor_in     => id_prof_organ_donor_in,
            dt_organ_donor_in          => dt_organ_donor_in,
            id_cancel_reason_in        => id_cancel_reason_in,
            notes_cancel_in            => notes_cancel_in,
            flg_status_in              => flg_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_patient_in              IN organ_donor.id_patient%TYPE DEFAULT NULL,
        id_episode_in              IN organ_donor.id_episode%TYPE DEFAULT NULL,
        id_sl_able_don_organs_in   IN organ_donor.id_sl_able_don_organs%TYPE DEFAULT NULL,
        reason_not_able_don_org_in IN organ_donor.reason_not_able_don_org%TYPE DEFAULT NULL,
        id_sl_able_don_tissues_in  IN organ_donor.id_sl_able_don_tissues%TYPE DEFAULT NULL,
        reason_not_able_don_tis_in IN organ_donor.reason_not_able_don_tis%TYPE DEFAULT NULL,
        id_sl_will_consulted_in    IN organ_donor.id_sl_will_consulted%TYPE DEFAULT NULL,
        id_sl_will_result_in       IN organ_donor.id_sl_will_result%TYPE DEFAULT NULL,
        reason_will_not_cons_in    IN organ_donor.reason_will_not_cons%TYPE DEFAULT NULL,
        id_sl_other_declaration_in IN organ_donor.id_sl_other_declaration%TYPE DEFAULT NULL,
        other_declaration_notes_in IN organ_donor.other_declaration_notes%TYPE DEFAULT NULL,
        id_sl_don_authorized_in    IN organ_donor.id_sl_don_authorized%TYPE DEFAULT NULL,
        responsible_name_in        IN organ_donor.responsible_name%TYPE DEFAULT NULL,
        id_family_relationship_in  IN organ_donor.id_family_relationship%TYPE DEFAULT NULL,
        reason_not_authorized_in   IN organ_donor.reason_not_authorized%TYPE DEFAULT NULL,
        id_sl_donation_approved_in IN organ_donor.id_sl_donation_approved%TYPE DEFAULT NULL,
        id_sl_object_research_in   IN organ_donor.id_sl_object_research%TYPE DEFAULT NULL,
        reason_not_approved_in     IN organ_donor.reason_not_approved%TYPE DEFAULT NULL,
        id_sl_family_letter_in     IN organ_donor.id_sl_family_letter%TYPE DEFAULT NULL,
        family_name_in             IN organ_donor.family_name%TYPE DEFAULT NULL,
        family_address_in          IN organ_donor.family_address%TYPE DEFAULT NULL,
        id_sl_justice_consent_in   IN organ_donor.id_sl_justice_consent%TYPE DEFAULT NULL,
        id_sl_donor_center_in      IN organ_donor.id_sl_donor_center%TYPE DEFAULT NULL,
        reason_donor_center_in     IN organ_donor.reason_donor_center%TYPE DEFAULT NULL,
        id_prof_organ_donor_in     IN organ_donor.id_prof_organ_donor%TYPE DEFAULT NULL,
        dt_organ_donor_in          IN organ_donor.dt_organ_donor%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN organ_donor.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in            IN organ_donor.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in              IN organ_donor.flg_status%TYPE DEFAULT NULL,
        create_user_in             IN organ_donor.create_user%TYPE DEFAULT NULL,
        create_time_in             IN organ_donor.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN organ_donor.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN organ_donor.update_user%TYPE DEFAULT NULL,
        update_time_in             IN organ_donor.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN organ_donor.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        l_pky    organ_donor.id_organ_donor%TYPE := next_key;
        rows_out TABLE_VARCHAR;
    BEGIN
        ins(id_organ_donor_in          => l_pky,
            id_patient_in              => id_patient_in,
            id_episode_in              => id_episode_in,
            id_sl_able_don_organs_in   => id_sl_able_don_organs_in,
            reason_not_able_don_org_in => reason_not_able_don_org_in,
            id_sl_able_don_tissues_in  => id_sl_able_don_tissues_in,
            reason_not_able_don_tis_in => reason_not_able_don_tis_in,
            id_sl_will_consulted_in    => id_sl_will_consulted_in,
            id_sl_will_result_in       => id_sl_will_result_in,
            reason_will_not_cons_in    => reason_will_not_cons_in,
            id_sl_other_declaration_in => id_sl_other_declaration_in,
            other_declaration_notes_in => other_declaration_notes_in,
            id_sl_don_authorized_in    => id_sl_don_authorized_in,
            responsible_name_in        => responsible_name_in,
            id_family_relationship_in  => id_family_relationship_in,
            reason_not_authorized_in   => reason_not_authorized_in,
            id_sl_donation_approved_in => id_sl_donation_approved_in,
            id_sl_object_research_in   => id_sl_object_research_in,
            reason_not_approved_in     => reason_not_approved_in,
            id_sl_family_letter_in     => id_sl_family_letter_in,
            family_name_in             => family_name_in,
            family_address_in          => family_address_in,
            id_sl_justice_consent_in   => id_sl_justice_consent_in,
            id_sl_donor_center_in      => id_sl_donor_center_in,
            reason_donor_center_in     => reason_donor_center_in,
            id_prof_organ_donor_in     => id_prof_organ_donor_in,
            dt_organ_donor_in          => dt_organ_donor_in,
            id_cancel_reason_in        => id_cancel_reason_in,
            notes_cancel_in            => notes_cancel_in,
            flg_status_in              => flg_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN organ_donor_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT TABLE_VARCHAR
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO organ_donor
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ORGAN_DONOR _' || indx,
                                                        value_in           => rows_in(indx).id_organ_donor,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(indx).id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SL_ABLE_DON_ORGANS _' || indx,
                                                        value_in           => rows_in(indx).id_sl_able_don_organs,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'REASON_NOT_ABLE_DON_ORG _' || indx,
                                                        value_in           => rows_in(indx).reason_not_able_don_org,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SL_ABLE_DON_TISSUES _' || indx,
                                                        value_in           => rows_in(indx).id_sl_able_don_tissues,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'REASON_NOT_ABLE_DON_TIS _' || indx,
                                                        value_in           => rows_in(indx).reason_not_able_don_tis,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SL_WILL_CONSULTED _' || indx,
                                                        value_in           => rows_in(indx).id_sl_will_consulted,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SL_WILL_RESULT _' || indx,
                                                        value_in           => rows_in(indx).id_sl_will_result,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'REASON_WILL_NOT_CONS _' || indx,
                                                        value_in           => rows_in(indx).reason_will_not_cons,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SL_OTHER_DECLARATION _' || indx,
                                                        value_in           => rows_in(indx).id_sl_other_declaration,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OTHER_DECLARATION_NOTES _' || indx,
                                                        value_in           => rows_in(indx).other_declaration_notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SL_DON_AUTHORIZED _' || indx,
                                                        value_in           => rows_in(indx).id_sl_don_authorized,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'RESPONSIBLE_NAME _' || indx,
                                                        value_in           => rows_in(indx).responsible_name,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_FAMILY_RELATIONSHIP _' || indx,
                                                        value_in           => rows_in(indx).id_family_relationship,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'REASON_NOT_AUTHORIZED _' || indx,
                                                        value_in           => rows_in(indx).reason_not_authorized,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SL_DONATION_APPROVED _' || indx,
                                                        value_in           => rows_in(indx).id_sl_donation_approved,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SL_OBJECT_RESEARCH _' || indx,
                                                        value_in           => rows_in(indx).id_sl_object_research,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'REASON_NOT_APPROVED _' || indx,
                                                        value_in           => rows_in(indx).reason_not_approved,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SL_FAMILY_LETTER _' || indx,
                                                        value_in           => rows_in(indx).id_sl_family_letter,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FAMILY_NAME _' || indx,
                                                        value_in           => rows_in(indx).family_name,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FAMILY_ADDRESS _' || indx,
                                                        value_in           => rows_in(indx).family_address,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SL_JUSTICE_CONSENT _' || indx,
                                                        value_in           => rows_in(indx).id_sl_justice_consent,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SL_DONOR_CENTER _' || indx,
                                                        value_in           => rows_in(indx).id_sl_donor_center,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'REASON_DONOR_CENTER _' || indx,
                                                        value_in           => rows_in(indx).reason_donor_center,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_ORGAN_DONOR _' || indx,
                                                        value_in           => rows_in(indx).id_prof_organ_donor,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_ORGAN_DONOR _' || indx,
                                                        value_in           => rows_in(indx).dt_organ_donor,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_REASON _' || indx,
                                                        value_in           => rows_in(indx).id_cancel_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'ORGAN_DONOR',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN organ_donor_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_organ_donor_in           IN organ_donor.id_organ_donor%TYPE,
        id_patient_in               IN organ_donor.id_patient%TYPE DEFAULT NULL,
        id_patient_nin              IN BOOLEAN := TRUE,
        id_episode_in               IN organ_donor.id_episode%TYPE DEFAULT NULL,
        id_episode_nin              IN BOOLEAN := TRUE,
        id_sl_able_don_organs_in    IN organ_donor.id_sl_able_don_organs%TYPE DEFAULT NULL,
        id_sl_able_don_organs_nin   IN BOOLEAN := TRUE,
        reason_not_able_don_org_in  IN organ_donor.reason_not_able_don_org%TYPE DEFAULT NULL,
        reason_not_able_don_org_nin IN BOOLEAN := TRUE,
        id_sl_able_don_tissues_in   IN organ_donor.id_sl_able_don_tissues%TYPE DEFAULT NULL,
        id_sl_able_don_tissues_nin  IN BOOLEAN := TRUE,
        reason_not_able_don_tis_in  IN organ_donor.reason_not_able_don_tis%TYPE DEFAULT NULL,
        reason_not_able_don_tis_nin IN BOOLEAN := TRUE,
        id_sl_will_consulted_in     IN organ_donor.id_sl_will_consulted%TYPE DEFAULT NULL,
        id_sl_will_consulted_nin    IN BOOLEAN := TRUE,
        id_sl_will_result_in        IN organ_donor.id_sl_will_result%TYPE DEFAULT NULL,
        id_sl_will_result_nin       IN BOOLEAN := TRUE,
        reason_will_not_cons_in     IN organ_donor.reason_will_not_cons%TYPE DEFAULT NULL,
        reason_will_not_cons_nin    IN BOOLEAN := TRUE,
        id_sl_other_declaration_in  IN organ_donor.id_sl_other_declaration%TYPE DEFAULT NULL,
        id_sl_other_declaration_nin IN BOOLEAN := TRUE,
        other_declaration_notes_in  IN organ_donor.other_declaration_notes%TYPE DEFAULT NULL,
        other_declaration_notes_nin IN BOOLEAN := TRUE,
        id_sl_don_authorized_in     IN organ_donor.id_sl_don_authorized%TYPE DEFAULT NULL,
        id_sl_don_authorized_nin    IN BOOLEAN := TRUE,
        responsible_name_in         IN organ_donor.responsible_name%TYPE DEFAULT NULL,
        responsible_name_nin        IN BOOLEAN := TRUE,
        id_family_relationship_in   IN organ_donor.id_family_relationship%TYPE DEFAULT NULL,
        id_family_relationship_nin  IN BOOLEAN := TRUE,
        reason_not_authorized_in    IN organ_donor.reason_not_authorized%TYPE DEFAULT NULL,
        reason_not_authorized_nin   IN BOOLEAN := TRUE,
        id_sl_donation_approved_in  IN organ_donor.id_sl_donation_approved%TYPE DEFAULT NULL,
        id_sl_donation_approved_nin IN BOOLEAN := TRUE,
        id_sl_object_research_in    IN organ_donor.id_sl_object_research%TYPE DEFAULT NULL,
        id_sl_object_research_nin   IN BOOLEAN := TRUE,
        reason_not_approved_in      IN organ_donor.reason_not_approved%TYPE DEFAULT NULL,
        reason_not_approved_nin     IN BOOLEAN := TRUE,
        id_sl_family_letter_in      IN organ_donor.id_sl_family_letter%TYPE DEFAULT NULL,
        id_sl_family_letter_nin     IN BOOLEAN := TRUE,
        family_name_in              IN organ_donor.family_name%TYPE DEFAULT NULL,
        family_name_nin             IN BOOLEAN := TRUE,
        family_address_in           IN organ_donor.family_address%TYPE DEFAULT NULL,
        family_address_nin          IN BOOLEAN := TRUE,
        id_sl_justice_consent_in    IN organ_donor.id_sl_justice_consent%TYPE DEFAULT NULL,
        id_sl_justice_consent_nin   IN BOOLEAN := TRUE,
        id_sl_donor_center_in       IN organ_donor.id_sl_donor_center%TYPE DEFAULT NULL,
        id_sl_donor_center_nin      IN BOOLEAN := TRUE,
        reason_donor_center_in      IN organ_donor.reason_donor_center%TYPE DEFAULT NULL,
        reason_donor_center_nin     IN BOOLEAN := TRUE,
        id_prof_organ_donor_in      IN organ_donor.id_prof_organ_donor%TYPE DEFAULT NULL,
        id_prof_organ_donor_nin     IN BOOLEAN := TRUE,
        dt_organ_donor_in           IN organ_donor.dt_organ_donor%TYPE DEFAULT NULL,
        dt_organ_donor_nin          IN BOOLEAN := TRUE,
        id_cancel_reason_in         IN organ_donor.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin        IN BOOLEAN := TRUE,
        notes_cancel_in             IN organ_donor.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin            IN BOOLEAN := TRUE,
        flg_status_in               IN organ_donor.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        create_user_in              IN organ_donor.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN organ_donor.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN organ_donor.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN organ_donor.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN organ_donor.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN organ_donor.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT TABLE_VARCHAR
    ) IS
        l_rows_out                  TABLE_VARCHAR;
        l_id_patient_n              NUMBER(1);
        l_id_episode_n              NUMBER(1);
        l_id_sl_able_don_organs_n   NUMBER(1);
        l_reason_not_able_don_org_n NUMBER(1);
        l_id_sl_able_don_tissues_n  NUMBER(1);
        l_reason_not_able_don_tis_n NUMBER(1);
        l_id_sl_will_consulted_n    NUMBER(1);
        l_id_sl_will_result_n       NUMBER(1);
        l_reason_will_not_cons_n    NUMBER(1);
        l_id_sl_other_declaration_n NUMBER(1);
        l_other_declaration_notes_n NUMBER(1);
        l_id_sl_don_authorized_n    NUMBER(1);
        l_responsible_name_n        NUMBER(1);
        l_id_family_relationship_n  NUMBER(1);
        l_reason_not_authorized_n   NUMBER(1);
        l_id_sl_donation_approved_n NUMBER(1);
        l_id_sl_object_research_n   NUMBER(1);
        l_reason_not_approved_n     NUMBER(1);
        l_id_sl_family_letter_n     NUMBER(1);
        l_family_name_n             NUMBER(1);
        l_family_address_n          NUMBER(1);
        l_id_sl_justice_consent_n   NUMBER(1);
        l_id_sl_donor_center_n      NUMBER(1);
        l_reason_donor_center_n     NUMBER(1);
        l_id_prof_organ_donor_n     NUMBER(1);
        l_dt_organ_donor_n          NUMBER(1);
        l_id_cancel_reason_n        NUMBER(1);
        l_notes_cancel_n            NUMBER(1);
        l_flg_status_n              NUMBER(1);
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_update_institution_n      NUMBER(1);
    BEGIN
    
        l_id_patient_n              := sys.diutil.bool_to_int(id_patient_nin);
        l_id_episode_n              := sys.diutil.bool_to_int(id_episode_nin);
        l_id_sl_able_don_organs_n   := sys.diutil.bool_to_int(id_sl_able_don_organs_nin);
        l_reason_not_able_don_org_n := sys.diutil.bool_to_int(reason_not_able_don_org_nin);
        l_id_sl_able_don_tissues_n  := sys.diutil.bool_to_int(id_sl_able_don_tissues_nin);
        l_reason_not_able_don_tis_n := sys.diutil.bool_to_int(reason_not_able_don_tis_nin);
        l_id_sl_will_consulted_n    := sys.diutil.bool_to_int(id_sl_will_consulted_nin);
        l_id_sl_will_result_n       := sys.diutil.bool_to_int(id_sl_will_result_nin);
        l_reason_will_not_cons_n    := sys.diutil.bool_to_int(reason_will_not_cons_nin);
        l_id_sl_other_declaration_n := sys.diutil.bool_to_int(id_sl_other_declaration_nin);
        l_other_declaration_notes_n := sys.diutil.bool_to_int(other_declaration_notes_nin);
        l_id_sl_don_authorized_n    := sys.diutil.bool_to_int(id_sl_don_authorized_nin);
        l_responsible_name_n        := sys.diutil.bool_to_int(responsible_name_nin);
        l_id_family_relationship_n  := sys.diutil.bool_to_int(id_family_relationship_nin);
        l_reason_not_authorized_n   := sys.diutil.bool_to_int(reason_not_authorized_nin);
        l_id_sl_donation_approved_n := sys.diutil.bool_to_int(id_sl_donation_approved_nin);
        l_id_sl_object_research_n   := sys.diutil.bool_to_int(id_sl_object_research_nin);
        l_reason_not_approved_n     := sys.diutil.bool_to_int(reason_not_approved_nin);
        l_id_sl_family_letter_n     := sys.diutil.bool_to_int(id_sl_family_letter_nin);
        l_family_name_n             := sys.diutil.bool_to_int(family_name_nin);
        l_family_address_n          := sys.diutil.bool_to_int(family_address_nin);
        l_id_sl_justice_consent_n   := sys.diutil.bool_to_int(id_sl_justice_consent_nin);
        l_id_sl_donor_center_n      := sys.diutil.bool_to_int(id_sl_donor_center_nin);
        l_reason_donor_center_n     := sys.diutil.bool_to_int(reason_donor_center_nin);
        l_id_prof_organ_donor_n     := sys.diutil.bool_to_int(id_prof_organ_donor_nin);
        l_dt_organ_donor_n          := sys.diutil.bool_to_int(dt_organ_donor_nin);
        l_id_cancel_reason_n        := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n            := sys.diutil.bool_to_int(notes_cancel_nin);
        l_flg_status_n              := sys.diutil.bool_to_int(flg_status_nin);
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
    
        UPDATE organ_donor
           SET id_patient              = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               id_episode              = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_sl_able_don_organs   = decode(l_id_sl_able_don_organs_n,
                                                0,
                                                id_sl_able_don_organs_in,
                                                nvl(id_sl_able_don_organs_in, id_sl_able_don_organs)),
               reason_not_able_don_org = decode(l_reason_not_able_don_org_n,
                                                0,
                                                reason_not_able_don_org_in,
                                                nvl(reason_not_able_don_org_in, reason_not_able_don_org)),
               id_sl_able_don_tissues  = decode(l_id_sl_able_don_tissues_n,
                                                0,
                                                id_sl_able_don_tissues_in,
                                                nvl(id_sl_able_don_tissues_in, id_sl_able_don_tissues)),
               reason_not_able_don_tis = decode(l_reason_not_able_don_tis_n,
                                                0,
                                                reason_not_able_don_tis_in,
                                                nvl(reason_not_able_don_tis_in, reason_not_able_don_tis)),
               id_sl_will_consulted    = decode(l_id_sl_will_consulted_n,
                                                0,
                                                id_sl_will_consulted_in,
                                                nvl(id_sl_will_consulted_in, id_sl_will_consulted)),
               id_sl_will_result       = decode(l_id_sl_will_result_n,
                                                0,
                                                id_sl_will_result_in,
                                                nvl(id_sl_will_result_in, id_sl_will_result)),
               reason_will_not_cons    = decode(l_reason_will_not_cons_n,
                                                0,
                                                reason_will_not_cons_in,
                                                nvl(reason_will_not_cons_in, reason_will_not_cons)),
               id_sl_other_declaration = decode(l_id_sl_other_declaration_n,
                                                0,
                                                id_sl_other_declaration_in,
                                                nvl(id_sl_other_declaration_in, id_sl_other_declaration)),
               other_declaration_notes = decode(l_other_declaration_notes_n,
                                                0,
                                                other_declaration_notes_in,
                                                nvl(other_declaration_notes_in, other_declaration_notes)),
               id_sl_don_authorized    = decode(l_id_sl_don_authorized_n,
                                                0,
                                                id_sl_don_authorized_in,
                                                nvl(id_sl_don_authorized_in, id_sl_don_authorized)),
               responsible_name        = decode(l_responsible_name_n,
                                                0,
                                                responsible_name_in,
                                                nvl(responsible_name_in, responsible_name)),
               id_family_relationship  = decode(l_id_family_relationship_n,
                                                0,
                                                id_family_relationship_in,
                                                nvl(id_family_relationship_in, id_family_relationship)),
               reason_not_authorized   = decode(l_reason_not_authorized_n,
                                                0,
                                                reason_not_authorized_in,
                                                nvl(reason_not_authorized_in, reason_not_authorized)),
               id_sl_donation_approved = decode(l_id_sl_donation_approved_n,
                                                0,
                                                id_sl_donation_approved_in,
                                                nvl(id_sl_donation_approved_in, id_sl_donation_approved)),
               id_sl_object_research   = decode(l_id_sl_object_research_n,
                                                0,
                                                id_sl_object_research_in,
                                                nvl(id_sl_object_research_in, id_sl_object_research)),
               reason_not_approved     = decode(l_reason_not_approved_n,
                                                0,
                                                reason_not_approved_in,
                                                nvl(reason_not_approved_in, reason_not_approved)),
               id_sl_family_letter     = decode(l_id_sl_family_letter_n,
                                                0,
                                                id_sl_family_letter_in,
                                                nvl(id_sl_family_letter_in, id_sl_family_letter)),
               family_name             = decode(l_family_name_n, 0, family_name_in, nvl(family_name_in, family_name)),
               family_address          = decode(l_family_address_n,
                                                0,
                                                family_address_in,
                                                nvl(family_address_in, family_address)),
               id_sl_justice_consent   = decode(l_id_sl_justice_consent_n,
                                                0,
                                                id_sl_justice_consent_in,
                                                nvl(id_sl_justice_consent_in, id_sl_justice_consent)),
               id_sl_donor_center      = decode(l_id_sl_donor_center_n,
                                                0,
                                                id_sl_donor_center_in,
                                                nvl(id_sl_donor_center_in, id_sl_donor_center)),
               reason_donor_center     = decode(l_reason_donor_center_n,
                                                0,
                                                reason_donor_center_in,
                                                nvl(reason_donor_center_in, reason_donor_center)),
               id_prof_organ_donor     = decode(l_id_prof_organ_donor_n,
                                                0,
                                                id_prof_organ_donor_in,
                                                nvl(id_prof_organ_donor_in, id_prof_organ_donor)),
               dt_organ_donor          = decode(l_dt_organ_donor_n,
                                                0,
                                                dt_organ_donor_in,
                                                nvl(dt_organ_donor_in, dt_organ_donor)),
               id_cancel_reason        = decode(l_id_cancel_reason_n,
                                                0,
                                                id_cancel_reason_in,
                                                nvl(id_cancel_reason_in, id_cancel_reason)),
               notes_cancel            = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               flg_status              = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               create_user             = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time             = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution      = decode(l_create_institution_n,
                                                0,
                                                create_institution_in,
                                                nvl(create_institution_in, create_institution)),
               update_user             = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time             = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution      = decode(l_update_institution_n,
                                                0,
                                                update_institution_in,
                                                nvl(update_institution_in, update_institution))
         WHERE id_organ_donor = id_organ_donor_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := TABLE_VARCHAR();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'OD_E_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "OD_E_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'ORGAN_DONOR',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSIF l_name = 'OD_P_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "OD_P_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'ORGAN_DONOR',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ORGAN_DONOR');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    IF l_name = 'OD_CR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'OD_E_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'OD_FR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FAMILY_RELATIONSHIP',
                                                        value_in           => id_family_relationship_in);
                    END IF;
                    IF l_name = 'OD_P_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'OD_P_OD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_ORGAN_DONOR',
                                                        value_in           => id_prof_organ_donor_in);
                    END IF;
                    IF l_name = 'OD_SLADO_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_ABLE_DON_ORGANS',
                                                        value_in           => id_sl_able_don_organs_in);
                    END IF;
                    IF l_name = 'OD_SLADT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_ABLE_DON_TISSUES',
                                                        value_in           => id_sl_able_don_tissues_in);
                    END IF;
                    IF l_name = 'OD_SLDAP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_DON_AUTHORIZED',
                                                        value_in           => id_sl_don_authorized_in);
                    END IF;
                    IF l_name = 'OD_SLDAU_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_OTHER_DECLARATION',
                                                        value_in           => id_sl_other_declaration_in);
                    END IF;
                    IF l_name = 'OD_SLDC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_JUSTICE_CONSENT',
                                                        value_in           => id_sl_justice_consent_in);
                    END IF;
                    IF l_name = 'OD_SLFL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_OBJECT_RESEARCH',
                                                        value_in           => id_sl_object_research_in);
                    END IF;
                    IF l_name = 'OD_SLJC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_FAMILY_LETTER',
                                                        value_in           => id_sl_family_letter_in);
                    END IF;
                    IF l_name = 'OD_SLOD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_WILL_RESULT',
                                                        value_in           => id_sl_will_result_in);
                    END IF;
                    IF l_name = 'OD_SLOR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_DONATION_APPROVED',
                                                        value_in           => id_sl_donation_approved_in);
                    END IF;
                    IF l_name = 'OD_SLWC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_WILL_CONSULTED',
                                                        value_in           => id_sl_will_consulted_in);
                    END IF;
                    IF l_name = 'OD_SLWR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_DONOR_CENTER',
                                                        value_in           => id_sl_donor_center_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_organ_donor_in           IN organ_donor.id_organ_donor%TYPE,
        id_patient_in               IN organ_donor.id_patient%TYPE DEFAULT NULL,
        id_patient_nin              IN BOOLEAN := TRUE,
        id_episode_in               IN organ_donor.id_episode%TYPE DEFAULT NULL,
        id_episode_nin              IN BOOLEAN := TRUE,
        id_sl_able_don_organs_in    IN organ_donor.id_sl_able_don_organs%TYPE DEFAULT NULL,
        id_sl_able_don_organs_nin   IN BOOLEAN := TRUE,
        reason_not_able_don_org_in  IN organ_donor.reason_not_able_don_org%TYPE DEFAULT NULL,
        reason_not_able_don_org_nin IN BOOLEAN := TRUE,
        id_sl_able_don_tissues_in   IN organ_donor.id_sl_able_don_tissues%TYPE DEFAULT NULL,
        id_sl_able_don_tissues_nin  IN BOOLEAN := TRUE,
        reason_not_able_don_tis_in  IN organ_donor.reason_not_able_don_tis%TYPE DEFAULT NULL,
        reason_not_able_don_tis_nin IN BOOLEAN := TRUE,
        id_sl_will_consulted_in     IN organ_donor.id_sl_will_consulted%TYPE DEFAULT NULL,
        id_sl_will_consulted_nin    IN BOOLEAN := TRUE,
        id_sl_will_result_in        IN organ_donor.id_sl_will_result%TYPE DEFAULT NULL,
        id_sl_will_result_nin       IN BOOLEAN := TRUE,
        reason_will_not_cons_in     IN organ_donor.reason_will_not_cons%TYPE DEFAULT NULL,
        reason_will_not_cons_nin    IN BOOLEAN := TRUE,
        id_sl_other_declaration_in  IN organ_donor.id_sl_other_declaration%TYPE DEFAULT NULL,
        id_sl_other_declaration_nin IN BOOLEAN := TRUE,
        other_declaration_notes_in  IN organ_donor.other_declaration_notes%TYPE DEFAULT NULL,
        other_declaration_notes_nin IN BOOLEAN := TRUE,
        id_sl_don_authorized_in     IN organ_donor.id_sl_don_authorized%TYPE DEFAULT NULL,
        id_sl_don_authorized_nin    IN BOOLEAN := TRUE,
        responsible_name_in         IN organ_donor.responsible_name%TYPE DEFAULT NULL,
        responsible_name_nin        IN BOOLEAN := TRUE,
        id_family_relationship_in   IN organ_donor.id_family_relationship%TYPE DEFAULT NULL,
        id_family_relationship_nin  IN BOOLEAN := TRUE,
        reason_not_authorized_in    IN organ_donor.reason_not_authorized%TYPE DEFAULT NULL,
        reason_not_authorized_nin   IN BOOLEAN := TRUE,
        id_sl_donation_approved_in  IN organ_donor.id_sl_donation_approved%TYPE DEFAULT NULL,
        id_sl_donation_approved_nin IN BOOLEAN := TRUE,
        id_sl_object_research_in    IN organ_donor.id_sl_object_research%TYPE DEFAULT NULL,
        id_sl_object_research_nin   IN BOOLEAN := TRUE,
        reason_not_approved_in      IN organ_donor.reason_not_approved%TYPE DEFAULT NULL,
        reason_not_approved_nin     IN BOOLEAN := TRUE,
        id_sl_family_letter_in      IN organ_donor.id_sl_family_letter%TYPE DEFAULT NULL,
        id_sl_family_letter_nin     IN BOOLEAN := TRUE,
        family_name_in              IN organ_donor.family_name%TYPE DEFAULT NULL,
        family_name_nin             IN BOOLEAN := TRUE,
        family_address_in           IN organ_donor.family_address%TYPE DEFAULT NULL,
        family_address_nin          IN BOOLEAN := TRUE,
        id_sl_justice_consent_in    IN organ_donor.id_sl_justice_consent%TYPE DEFAULT NULL,
        id_sl_justice_consent_nin   IN BOOLEAN := TRUE,
        id_sl_donor_center_in       IN organ_donor.id_sl_donor_center%TYPE DEFAULT NULL,
        id_sl_donor_center_nin      IN BOOLEAN := TRUE,
        reason_donor_center_in      IN organ_donor.reason_donor_center%TYPE DEFAULT NULL,
        reason_donor_center_nin     IN BOOLEAN := TRUE,
        id_prof_organ_donor_in      IN organ_donor.id_prof_organ_donor%TYPE DEFAULT NULL,
        id_prof_organ_donor_nin     IN BOOLEAN := TRUE,
        dt_organ_donor_in           IN organ_donor.dt_organ_donor%TYPE DEFAULT NULL,
        dt_organ_donor_nin          IN BOOLEAN := TRUE,
        id_cancel_reason_in         IN organ_donor.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin        IN BOOLEAN := TRUE,
        notes_cancel_in             IN organ_donor.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin            IN BOOLEAN := TRUE,
        flg_status_in               IN organ_donor.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        create_user_in              IN organ_donor.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN organ_donor.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN organ_donor.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN organ_donor.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN organ_donor.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN organ_donor.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        upd(id_organ_donor_in           => id_organ_donor_in,
            id_patient_in               => id_patient_in,
            id_patient_nin              => id_patient_nin,
            id_episode_in               => id_episode_in,
            id_episode_nin              => id_episode_nin,
            id_sl_able_don_organs_in    => id_sl_able_don_organs_in,
            id_sl_able_don_organs_nin   => id_sl_able_don_organs_nin,
            reason_not_able_don_org_in  => reason_not_able_don_org_in,
            reason_not_able_don_org_nin => reason_not_able_don_org_nin,
            id_sl_able_don_tissues_in   => id_sl_able_don_tissues_in,
            id_sl_able_don_tissues_nin  => id_sl_able_don_tissues_nin,
            reason_not_able_don_tis_in  => reason_not_able_don_tis_in,
            reason_not_able_don_tis_nin => reason_not_able_don_tis_nin,
            id_sl_will_consulted_in     => id_sl_will_consulted_in,
            id_sl_will_consulted_nin    => id_sl_will_consulted_nin,
            id_sl_will_result_in        => id_sl_will_result_in,
            id_sl_will_result_nin       => id_sl_will_result_nin,
            reason_will_not_cons_in     => reason_will_not_cons_in,
            reason_will_not_cons_nin    => reason_will_not_cons_nin,
            id_sl_other_declaration_in  => id_sl_other_declaration_in,
            id_sl_other_declaration_nin => id_sl_other_declaration_nin,
            other_declaration_notes_in  => other_declaration_notes_in,
            other_declaration_notes_nin => other_declaration_notes_nin,
            id_sl_don_authorized_in     => id_sl_don_authorized_in,
            id_sl_don_authorized_nin    => id_sl_don_authorized_nin,
            responsible_name_in         => responsible_name_in,
            responsible_name_nin        => responsible_name_nin,
            id_family_relationship_in   => id_family_relationship_in,
            id_family_relationship_nin  => id_family_relationship_nin,
            reason_not_authorized_in    => reason_not_authorized_in,
            reason_not_authorized_nin   => reason_not_authorized_nin,
            id_sl_donation_approved_in  => id_sl_donation_approved_in,
            id_sl_donation_approved_nin => id_sl_donation_approved_nin,
            id_sl_object_research_in    => id_sl_object_research_in,
            id_sl_object_research_nin   => id_sl_object_research_nin,
            reason_not_approved_in      => reason_not_approved_in,
            reason_not_approved_nin     => reason_not_approved_nin,
            id_sl_family_letter_in      => id_sl_family_letter_in,
            id_sl_family_letter_nin     => id_sl_family_letter_nin,
            family_name_in              => family_name_in,
            family_name_nin             => family_name_nin,
            family_address_in           => family_address_in,
            family_address_nin          => family_address_nin,
            id_sl_justice_consent_in    => id_sl_justice_consent_in,
            id_sl_justice_consent_nin   => id_sl_justice_consent_nin,
            id_sl_donor_center_in       => id_sl_donor_center_in,
            id_sl_donor_center_nin      => id_sl_donor_center_nin,
            reason_donor_center_in      => reason_donor_center_in,
            reason_donor_center_nin     => reason_donor_center_nin,
            id_prof_organ_donor_in      => id_prof_organ_donor_in,
            id_prof_organ_donor_nin     => id_prof_organ_donor_nin,
            dt_organ_donor_in           => dt_organ_donor_in,
            dt_organ_donor_nin          => dt_organ_donor_nin,
            id_cancel_reason_in         => id_cancel_reason_in,
            id_cancel_reason_nin        => id_cancel_reason_nin,
            notes_cancel_in             => notes_cancel_in,
            notes_cancel_nin            => notes_cancel_nin,
            flg_status_in               => flg_status_in,
            flg_status_nin              => flg_status_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_patient_in               IN organ_donor.id_patient%TYPE DEFAULT NULL,
        id_patient_nin              IN BOOLEAN := TRUE,
        id_episode_in               IN organ_donor.id_episode%TYPE DEFAULT NULL,
        id_episode_nin              IN BOOLEAN := TRUE,
        id_sl_able_don_organs_in    IN organ_donor.id_sl_able_don_organs%TYPE DEFAULT NULL,
        id_sl_able_don_organs_nin   IN BOOLEAN := TRUE,
        reason_not_able_don_org_in  IN organ_donor.reason_not_able_don_org%TYPE DEFAULT NULL,
        reason_not_able_don_org_nin IN BOOLEAN := TRUE,
        id_sl_able_don_tissues_in   IN organ_donor.id_sl_able_don_tissues%TYPE DEFAULT NULL,
        id_sl_able_don_tissues_nin  IN BOOLEAN := TRUE,
        reason_not_able_don_tis_in  IN organ_donor.reason_not_able_don_tis%TYPE DEFAULT NULL,
        reason_not_able_don_tis_nin IN BOOLEAN := TRUE,
        id_sl_will_consulted_in     IN organ_donor.id_sl_will_consulted%TYPE DEFAULT NULL,
        id_sl_will_consulted_nin    IN BOOLEAN := TRUE,
        id_sl_will_result_in        IN organ_donor.id_sl_will_result%TYPE DEFAULT NULL,
        id_sl_will_result_nin       IN BOOLEAN := TRUE,
        reason_will_not_cons_in     IN organ_donor.reason_will_not_cons%TYPE DEFAULT NULL,
        reason_will_not_cons_nin    IN BOOLEAN := TRUE,
        id_sl_other_declaration_in  IN organ_donor.id_sl_other_declaration%TYPE DEFAULT NULL,
        id_sl_other_declaration_nin IN BOOLEAN := TRUE,
        other_declaration_notes_in  IN organ_donor.other_declaration_notes%TYPE DEFAULT NULL,
        other_declaration_notes_nin IN BOOLEAN := TRUE,
        id_sl_don_authorized_in     IN organ_donor.id_sl_don_authorized%TYPE DEFAULT NULL,
        id_sl_don_authorized_nin    IN BOOLEAN := TRUE,
        responsible_name_in         IN organ_donor.responsible_name%TYPE DEFAULT NULL,
        responsible_name_nin        IN BOOLEAN := TRUE,
        id_family_relationship_in   IN organ_donor.id_family_relationship%TYPE DEFAULT NULL,
        id_family_relationship_nin  IN BOOLEAN := TRUE,
        reason_not_authorized_in    IN organ_donor.reason_not_authorized%TYPE DEFAULT NULL,
        reason_not_authorized_nin   IN BOOLEAN := TRUE,
        id_sl_donation_approved_in  IN organ_donor.id_sl_donation_approved%TYPE DEFAULT NULL,
        id_sl_donation_approved_nin IN BOOLEAN := TRUE,
        id_sl_object_research_in    IN organ_donor.id_sl_object_research%TYPE DEFAULT NULL,
        id_sl_object_research_nin   IN BOOLEAN := TRUE,
        reason_not_approved_in      IN organ_donor.reason_not_approved%TYPE DEFAULT NULL,
        reason_not_approved_nin     IN BOOLEAN := TRUE,
        id_sl_family_letter_in      IN organ_donor.id_sl_family_letter%TYPE DEFAULT NULL,
        id_sl_family_letter_nin     IN BOOLEAN := TRUE,
        family_name_in              IN organ_donor.family_name%TYPE DEFAULT NULL,
        family_name_nin             IN BOOLEAN := TRUE,
        family_address_in           IN organ_donor.family_address%TYPE DEFAULT NULL,
        family_address_nin          IN BOOLEAN := TRUE,
        id_sl_justice_consent_in    IN organ_donor.id_sl_justice_consent%TYPE DEFAULT NULL,
        id_sl_justice_consent_nin   IN BOOLEAN := TRUE,
        id_sl_donor_center_in       IN organ_donor.id_sl_donor_center%TYPE DEFAULT NULL,
        id_sl_donor_center_nin      IN BOOLEAN := TRUE,
        reason_donor_center_in      IN organ_donor.reason_donor_center%TYPE DEFAULT NULL,
        reason_donor_center_nin     IN BOOLEAN := TRUE,
        id_prof_organ_donor_in      IN organ_donor.id_prof_organ_donor%TYPE DEFAULT NULL,
        id_prof_organ_donor_nin     IN BOOLEAN := TRUE,
        dt_organ_donor_in           IN organ_donor.dt_organ_donor%TYPE DEFAULT NULL,
        dt_organ_donor_nin          IN BOOLEAN := TRUE,
        id_cancel_reason_in         IN organ_donor.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin        IN BOOLEAN := TRUE,
        notes_cancel_in             IN organ_donor.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin            IN BOOLEAN := TRUE,
        flg_status_in               IN organ_donor.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        create_user_in              IN organ_donor.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN organ_donor.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN organ_donor.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN organ_donor.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN organ_donor.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN organ_donor.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        where_in                    VARCHAR2 DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT TABLE_VARCHAR
    ) IS
        l_sql                       VARCHAR2(32767);
        l_rows_out                  TABLE_VARCHAR;
        l_id_patient_n              NUMBER(1);
        l_id_episode_n              NUMBER(1);
        l_id_sl_able_don_organs_n   NUMBER(1);
        l_reason_not_able_don_org_n NUMBER(1);
        l_id_sl_able_don_tissues_n  NUMBER(1);
        l_reason_not_able_don_tis_n NUMBER(1);
        l_id_sl_will_consulted_n    NUMBER(1);
        l_id_sl_will_result_n       NUMBER(1);
        l_reason_will_not_cons_n    NUMBER(1);
        l_id_sl_other_declaration_n NUMBER(1);
        l_other_declaration_notes_n NUMBER(1);
        l_id_sl_don_authorized_n    NUMBER(1);
        l_responsible_name_n        NUMBER(1);
        l_id_family_relationship_n  NUMBER(1);
        l_reason_not_authorized_n   NUMBER(1);
        l_id_sl_donation_approved_n NUMBER(1);
        l_id_sl_object_research_n   NUMBER(1);
        l_reason_not_approved_n     NUMBER(1);
        l_id_sl_family_letter_n     NUMBER(1);
        l_family_name_n             NUMBER(1);
        l_family_address_n          NUMBER(1);
        l_id_sl_justice_consent_n   NUMBER(1);
        l_id_sl_donor_center_n      NUMBER(1);
        l_reason_donor_center_n     NUMBER(1);
        l_id_prof_organ_donor_n     NUMBER(1);
        l_dt_organ_donor_n          NUMBER(1);
        l_id_cancel_reason_n        NUMBER(1);
        l_notes_cancel_n            NUMBER(1);
        l_flg_status_n              NUMBER(1);
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_update_institution_n      NUMBER(1);
        id_organ_donor_in           organ_donor.id_organ_donor%TYPE;
    BEGIN
    
        l_id_patient_n              := sys.diutil.bool_to_int(id_patient_nin);
        l_id_episode_n              := sys.diutil.bool_to_int(id_episode_nin);
        l_id_sl_able_don_organs_n   := sys.diutil.bool_to_int(id_sl_able_don_organs_nin);
        l_reason_not_able_don_org_n := sys.diutil.bool_to_int(reason_not_able_don_org_nin);
        l_id_sl_able_don_tissues_n  := sys.diutil.bool_to_int(id_sl_able_don_tissues_nin);
        l_reason_not_able_don_tis_n := sys.diutil.bool_to_int(reason_not_able_don_tis_nin);
        l_id_sl_will_consulted_n    := sys.diutil.bool_to_int(id_sl_will_consulted_nin);
        l_id_sl_will_result_n       := sys.diutil.bool_to_int(id_sl_will_result_nin);
        l_reason_will_not_cons_n    := sys.diutil.bool_to_int(reason_will_not_cons_nin);
        l_id_sl_other_declaration_n := sys.diutil.bool_to_int(id_sl_other_declaration_nin);
        l_other_declaration_notes_n := sys.diutil.bool_to_int(other_declaration_notes_nin);
        l_id_sl_don_authorized_n    := sys.diutil.bool_to_int(id_sl_don_authorized_nin);
        l_responsible_name_n        := sys.diutil.bool_to_int(responsible_name_nin);
        l_id_family_relationship_n  := sys.diutil.bool_to_int(id_family_relationship_nin);
        l_reason_not_authorized_n   := sys.diutil.bool_to_int(reason_not_authorized_nin);
        l_id_sl_donation_approved_n := sys.diutil.bool_to_int(id_sl_donation_approved_nin);
        l_id_sl_object_research_n   := sys.diutil.bool_to_int(id_sl_object_research_nin);
        l_reason_not_approved_n     := sys.diutil.bool_to_int(reason_not_approved_nin);
        l_id_sl_family_letter_n     := sys.diutil.bool_to_int(id_sl_family_letter_nin);
        l_family_name_n             := sys.diutil.bool_to_int(family_name_nin);
        l_family_address_n          := sys.diutil.bool_to_int(family_address_nin);
        l_id_sl_justice_consent_n   := sys.diutil.bool_to_int(id_sl_justice_consent_nin);
        l_id_sl_donor_center_n      := sys.diutil.bool_to_int(id_sl_donor_center_nin);
        l_reason_donor_center_n     := sys.diutil.bool_to_int(reason_donor_center_nin);
        l_id_prof_organ_donor_n     := sys.diutil.bool_to_int(id_prof_organ_donor_nin);
        l_dt_organ_donor_n          := sys.diutil.bool_to_int(dt_organ_donor_nin);
        l_id_cancel_reason_n        := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n            := sys.diutil.bool_to_int(notes_cancel_nin);
        l_flg_status_n              := sys.diutil.bool_to_int(flg_status_nin);
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
    
        l_sql := 'UPDATE ORGAN_DONOR SET ' || ' ID_PATIENT = decode (' || l_id_patient_n ||
                 ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' || ' ID_EPISODE = decode (' ||
                 l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' ID_SL_ABLE_DON_ORGANS = decode (' || l_id_sl_able_don_organs_n ||
                 ',0,:id_sl_able_don_organs_in, NVL (:id_sl_able_don_organs_in, ID_SL_ABLE_DON_ORGANS)) ' || ',' ||
                 ' REASON_NOT_ABLE_DON_ORG = decode (' || l_reason_not_able_don_org_n ||
                 ',0,:reason_not_able_don_org_in, NVL (:reason_not_able_don_org_in, REASON_NOT_ABLE_DON_ORG)) ' || ',' ||
                 ' ID_SL_ABLE_DON_TISSUES = decode (' || l_id_sl_able_don_tissues_n ||
                 ',0,:id_sl_able_don_tissues_in, NVL (:id_sl_able_don_tissues_in, ID_SL_ABLE_DON_TISSUES)) ' || ',' ||
                 ' REASON_NOT_ABLE_DON_TIS = decode (' || l_reason_not_able_don_tis_n ||
                 ',0,:reason_not_able_don_tis_in, NVL (:reason_not_able_don_tis_in, REASON_NOT_ABLE_DON_TIS)) ' || ',' ||
                 ' ID_SL_WILL_CONSULTED = decode (' || l_id_sl_will_consulted_n ||
                 ',0,:id_sl_will_consulted_in, NVL (:id_sl_will_consulted_in, ID_SL_WILL_CONSULTED)) ' || ',' ||
                 ' ID_SL_WILL_RESULT = decode (' || l_id_sl_will_result_n ||
                 ',0,:id_sl_will_result_in, NVL (:id_sl_will_result_in, ID_SL_WILL_RESULT)) ' || ',' ||
                 ' REASON_WILL_NOT_CONS = decode (' || l_reason_will_not_cons_n ||
                 ',0,:reason_will_not_cons_in, NVL (:reason_will_not_cons_in, REASON_WILL_NOT_CONS)) ' || ',' ||
                 ' ID_SL_OTHER_DECLARATION = decode (' || l_id_sl_other_declaration_n ||
                 ',0,:id_sl_other_declaration_in, NVL (:id_sl_other_declaration_in, ID_SL_OTHER_DECLARATION)) ' || ',' ||
                 ' OTHER_DECLARATION_NOTES = decode (' || l_other_declaration_notes_n ||
                 ',0,:other_declaration_notes_in, NVL (:other_declaration_notes_in, OTHER_DECLARATION_NOTES)) ' || ',' ||
                 ' ID_SL_DON_AUTHORIZED = decode (' || l_id_sl_don_authorized_n ||
                 ',0,:id_sl_don_authorized_in, NVL (:id_sl_don_authorized_in, ID_SL_DON_AUTHORIZED)) ' || ',' ||
                 ' RESPONSIBLE_NAME = decode (' || l_responsible_name_n ||
                 ',0,:responsible_name_in, NVL (:responsible_name_in, RESPONSIBLE_NAME)) ' || ',' ||
                 ' ID_FAMILY_RELATIONSHIP = decode (' || l_id_family_relationship_n ||
                 ',0,:id_family_relationship_in, NVL (:id_family_relationship_in, ID_FAMILY_RELATIONSHIP)) ' || ',' ||
                 ' REASON_NOT_AUTHORIZED = decode (' || l_reason_not_authorized_n ||
                 ',0,:reason_not_authorized_in, NVL (:reason_not_authorized_in, REASON_NOT_AUTHORIZED)) ' || ',' ||
                 ' ID_SL_DONATION_APPROVED = decode (' || l_id_sl_donation_approved_n ||
                 ',0,:id_sl_donation_approved_in, NVL (:id_sl_donation_approved_in, ID_SL_DONATION_APPROVED)) ' || ',' ||
                 ' ID_SL_OBJECT_RESEARCH = decode (' || l_id_sl_object_research_n ||
                 ',0,:id_sl_object_research_in, NVL (:id_sl_object_research_in, ID_SL_OBJECT_RESEARCH)) ' || ',' ||
                 ' REASON_NOT_APPROVED = decode (' || l_reason_not_approved_n ||
                 ',0,:reason_not_approved_in, NVL (:reason_not_approved_in, REASON_NOT_APPROVED)) ' || ',' ||
                 ' ID_SL_FAMILY_LETTER = decode (' || l_id_sl_family_letter_n ||
                 ',0,:id_sl_family_letter_in, NVL (:id_sl_family_letter_in, ID_SL_FAMILY_LETTER)) ' || ',' ||
                 ' FAMILY_NAME = decode (' || l_family_name_n ||
                 ',0,:family_name_in, NVL (:family_name_in, FAMILY_NAME)) ' || ',' || ' FAMILY_ADDRESS = decode (' ||
                 l_family_address_n || ',0,:family_address_in, NVL (:family_address_in, FAMILY_ADDRESS)) ' || ',' ||
                 ' ID_SL_JUSTICE_CONSENT = decode (' || l_id_sl_justice_consent_n ||
                 ',0,:id_sl_justice_consent_in, NVL (:id_sl_justice_consent_in, ID_SL_JUSTICE_CONSENT)) ' || ',' ||
                 ' ID_SL_DONOR_CENTER = decode (' || l_id_sl_donor_center_n ||
                 ',0,:id_sl_donor_center_in, NVL (:id_sl_donor_center_in, ID_SL_DONOR_CENTER)) ' || ',' ||
                 ' REASON_DONOR_CENTER = decode (' || l_reason_donor_center_n ||
                 ',0,:reason_donor_center_in, NVL (:reason_donor_center_in, REASON_DONOR_CENTER)) ' || ',' ||
                 ' ID_PROF_ORGAN_DONOR = decode (' || l_id_prof_organ_donor_n ||
                 ',0,:id_prof_organ_donor_in, NVL (:id_prof_organ_donor_in, ID_PROF_ORGAN_DONOR)) ' || ',' ||
                 ' DT_ORGAN_DONOR = decode (' || l_dt_organ_donor_n ||
                 ',0,:dt_organ_donor_in, NVL (:dt_organ_donor_in, DT_ORGAN_DONOR)) ' || ',' ||
                 ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                 ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) ' || ',' ||
                 ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                 ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) ' || ',' || ' FLG_STATUS = decode (' ||
                 l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_patient_in, id_episode_in, id_sl_able_don_organs_in, reason_not_able_don_org_in, id_sl_able_don_tissues_in, reason_not_able_don_tis_in, id_sl_will_consulted_in, id_sl_will_result_in, reason_will_not_cons_in, id_sl_other_declaration_in, other_declaration_notes_in, id_sl_don_authorized_in, responsible_name_in, id_family_relationship_in, reason_not_authorized_in, id_sl_donation_approved_in, id_sl_object_research_in, reason_not_approved_in, id_sl_family_letter_in, family_name_in, family_address_in, id_sl_justice_consent_in, id_sl_donor_center_in, reason_donor_center_in, id_prof_organ_donor_in, dt_organ_donor_in, id_cancel_reason_in, notes_cancel_in, flg_status_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := TABLE_VARCHAR();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSIF l_name = 'OD_E_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "OD_E_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'ORGAN_DONOR',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSIF l_name = 'OD_P_UK'
                    THEN
                        pk_alert_exceptions.register_error(error_name_in       => 'DUPLICATE-VALUE',
                                                           err_instance_id_out => l_err_instance_id,
                                                           text_in             => 'Violation of unique index "OD_P_UK"');
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'OWNER',
                                                        value_in           => l_owner,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CONSTRAINT_NAME',
                                                        value_in           => l_name,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'TABLE_NAME',
                                                        value_in           => 'ORGAN_DONOR',
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ORGAN_DONOR');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    IF l_name = 'OD_CR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_CANCEL_REASON',
                                                        value_in           => id_cancel_reason_in);
                    END IF;
                    IF l_name = 'OD_E_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'OD_FR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_FAMILY_RELATIONSHIP',
                                                        value_in           => id_family_relationship_in);
                    END IF;
                    IF l_name = 'OD_P_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'OD_P_OD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROF_ORGAN_DONOR',
                                                        value_in           => id_prof_organ_donor_in);
                    END IF;
                    IF l_name = 'OD_SLADO_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_ABLE_DON_ORGANS',
                                                        value_in           => id_sl_able_don_organs_in);
                    END IF;
                    IF l_name = 'OD_SLADT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_ABLE_DON_TISSUES',
                                                        value_in           => id_sl_able_don_tissues_in);
                    END IF;
                    IF l_name = 'OD_SLDAP_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_DON_AUTHORIZED',
                                                        value_in           => id_sl_don_authorized_in);
                    END IF;
                    IF l_name = 'OD_SLDAU_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_OTHER_DECLARATION',
                                                        value_in           => id_sl_other_declaration_in);
                    END IF;
                    IF l_name = 'OD_SLDC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_JUSTICE_CONSENT',
                                                        value_in           => id_sl_justice_consent_in);
                    END IF;
                    IF l_name = 'OD_SLFL_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_OBJECT_RESEARCH',
                                                        value_in           => id_sl_object_research_in);
                    END IF;
                    IF l_name = 'OD_SLJC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_FAMILY_LETTER',
                                                        value_in           => id_sl_family_letter_in);
                    END IF;
                    IF l_name = 'OD_SLOD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_WILL_RESULT',
                                                        value_in           => id_sl_will_result_in);
                    END IF;
                    IF l_name = 'OD_SLOR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_DONATION_APPROVED',
                                                        value_in           => id_sl_donation_approved_in);
                    END IF;
                    IF l_name = 'OD_SLWC_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_WILL_CONSULTED',
                                                        value_in           => id_sl_will_consulted_in);
                    END IF;
                    IF l_name = 'OD_SLWR_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SL_DONOR_CENTER',
                                                        value_in           => id_sl_donor_center_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_patient_in               IN organ_donor.id_patient%TYPE DEFAULT NULL,
        id_patient_nin              IN BOOLEAN := TRUE,
        id_episode_in               IN organ_donor.id_episode%TYPE DEFAULT NULL,
        id_episode_nin              IN BOOLEAN := TRUE,
        id_sl_able_don_organs_in    IN organ_donor.id_sl_able_don_organs%TYPE DEFAULT NULL,
        id_sl_able_don_organs_nin   IN BOOLEAN := TRUE,
        reason_not_able_don_org_in  IN organ_donor.reason_not_able_don_org%TYPE DEFAULT NULL,
        reason_not_able_don_org_nin IN BOOLEAN := TRUE,
        id_sl_able_don_tissues_in   IN organ_donor.id_sl_able_don_tissues%TYPE DEFAULT NULL,
        id_sl_able_don_tissues_nin  IN BOOLEAN := TRUE,
        reason_not_able_don_tis_in  IN organ_donor.reason_not_able_don_tis%TYPE DEFAULT NULL,
        reason_not_able_don_tis_nin IN BOOLEAN := TRUE,
        id_sl_will_consulted_in     IN organ_donor.id_sl_will_consulted%TYPE DEFAULT NULL,
        id_sl_will_consulted_nin    IN BOOLEAN := TRUE,
        id_sl_will_result_in        IN organ_donor.id_sl_will_result%TYPE DEFAULT NULL,
        id_sl_will_result_nin       IN BOOLEAN := TRUE,
        reason_will_not_cons_in     IN organ_donor.reason_will_not_cons%TYPE DEFAULT NULL,
        reason_will_not_cons_nin    IN BOOLEAN := TRUE,
        id_sl_other_declaration_in  IN organ_donor.id_sl_other_declaration%TYPE DEFAULT NULL,
        id_sl_other_declaration_nin IN BOOLEAN := TRUE,
        other_declaration_notes_in  IN organ_donor.other_declaration_notes%TYPE DEFAULT NULL,
        other_declaration_notes_nin IN BOOLEAN := TRUE,
        id_sl_don_authorized_in     IN organ_donor.id_sl_don_authorized%TYPE DEFAULT NULL,
        id_sl_don_authorized_nin    IN BOOLEAN := TRUE,
        responsible_name_in         IN organ_donor.responsible_name%TYPE DEFAULT NULL,
        responsible_name_nin        IN BOOLEAN := TRUE,
        id_family_relationship_in   IN organ_donor.id_family_relationship%TYPE DEFAULT NULL,
        id_family_relationship_nin  IN BOOLEAN := TRUE,
        reason_not_authorized_in    IN organ_donor.reason_not_authorized%TYPE DEFAULT NULL,
        reason_not_authorized_nin   IN BOOLEAN := TRUE,
        id_sl_donation_approved_in  IN organ_donor.id_sl_donation_approved%TYPE DEFAULT NULL,
        id_sl_donation_approved_nin IN BOOLEAN := TRUE,
        id_sl_object_research_in    IN organ_donor.id_sl_object_research%TYPE DEFAULT NULL,
        id_sl_object_research_nin   IN BOOLEAN := TRUE,
        reason_not_approved_in      IN organ_donor.reason_not_approved%TYPE DEFAULT NULL,
        reason_not_approved_nin     IN BOOLEAN := TRUE,
        id_sl_family_letter_in      IN organ_donor.id_sl_family_letter%TYPE DEFAULT NULL,
        id_sl_family_letter_nin     IN BOOLEAN := TRUE,
        family_name_in              IN organ_donor.family_name%TYPE DEFAULT NULL,
        family_name_nin             IN BOOLEAN := TRUE,
        family_address_in           IN organ_donor.family_address%TYPE DEFAULT NULL,
        family_address_nin          IN BOOLEAN := TRUE,
        id_sl_justice_consent_in    IN organ_donor.id_sl_justice_consent%TYPE DEFAULT NULL,
        id_sl_justice_consent_nin   IN BOOLEAN := TRUE,
        id_sl_donor_center_in       IN organ_donor.id_sl_donor_center%TYPE DEFAULT NULL,
        id_sl_donor_center_nin      IN BOOLEAN := TRUE,
        reason_donor_center_in      IN organ_donor.reason_donor_center%TYPE DEFAULT NULL,
        reason_donor_center_nin     IN BOOLEAN := TRUE,
        id_prof_organ_donor_in      IN organ_donor.id_prof_organ_donor%TYPE DEFAULT NULL,
        id_prof_organ_donor_nin     IN BOOLEAN := TRUE,
        dt_organ_donor_in           IN organ_donor.dt_organ_donor%TYPE DEFAULT NULL,
        dt_organ_donor_nin          IN BOOLEAN := TRUE,
        id_cancel_reason_in         IN organ_donor.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin        IN BOOLEAN := TRUE,
        notes_cancel_in             IN organ_donor.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin            IN BOOLEAN := TRUE,
        flg_status_in               IN organ_donor.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        create_user_in              IN organ_donor.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN organ_donor.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN organ_donor.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN organ_donor.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN organ_donor.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN organ_donor.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        where_in                    VARCHAR2 DEFAULT NULL,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        upd(id_patient_in               => id_patient_in,
            id_patient_nin              => id_patient_nin,
            id_episode_in               => id_episode_in,
            id_episode_nin              => id_episode_nin,
            id_sl_able_don_organs_in    => id_sl_able_don_organs_in,
            id_sl_able_don_organs_nin   => id_sl_able_don_organs_nin,
            reason_not_able_don_org_in  => reason_not_able_don_org_in,
            reason_not_able_don_org_nin => reason_not_able_don_org_nin,
            id_sl_able_don_tissues_in   => id_sl_able_don_tissues_in,
            id_sl_able_don_tissues_nin  => id_sl_able_don_tissues_nin,
            reason_not_able_don_tis_in  => reason_not_able_don_tis_in,
            reason_not_able_don_tis_nin => reason_not_able_don_tis_nin,
            id_sl_will_consulted_in     => id_sl_will_consulted_in,
            id_sl_will_consulted_nin    => id_sl_will_consulted_nin,
            id_sl_will_result_in        => id_sl_will_result_in,
            id_sl_will_result_nin       => id_sl_will_result_nin,
            reason_will_not_cons_in     => reason_will_not_cons_in,
            reason_will_not_cons_nin    => reason_will_not_cons_nin,
            id_sl_other_declaration_in  => id_sl_other_declaration_in,
            id_sl_other_declaration_nin => id_sl_other_declaration_nin,
            other_declaration_notes_in  => other_declaration_notes_in,
            other_declaration_notes_nin => other_declaration_notes_nin,
            id_sl_don_authorized_in     => id_sl_don_authorized_in,
            id_sl_don_authorized_nin    => id_sl_don_authorized_nin,
            responsible_name_in         => responsible_name_in,
            responsible_name_nin        => responsible_name_nin,
            id_family_relationship_in   => id_family_relationship_in,
            id_family_relationship_nin  => id_family_relationship_nin,
            reason_not_authorized_in    => reason_not_authorized_in,
            reason_not_authorized_nin   => reason_not_authorized_nin,
            id_sl_donation_approved_in  => id_sl_donation_approved_in,
            id_sl_donation_approved_nin => id_sl_donation_approved_nin,
            id_sl_object_research_in    => id_sl_object_research_in,
            id_sl_object_research_nin   => id_sl_object_research_nin,
            reason_not_approved_in      => reason_not_approved_in,
            reason_not_approved_nin     => reason_not_approved_nin,
            id_sl_family_letter_in      => id_sl_family_letter_in,
            id_sl_family_letter_nin     => id_sl_family_letter_nin,
            family_name_in              => family_name_in,
            family_name_nin             => family_name_nin,
            family_address_in           => family_address_in,
            family_address_nin          => family_address_nin,
            id_sl_justice_consent_in    => id_sl_justice_consent_in,
            id_sl_justice_consent_nin   => id_sl_justice_consent_nin,
            id_sl_donor_center_in       => id_sl_donor_center_in,
            id_sl_donor_center_nin      => id_sl_donor_center_nin,
            reason_donor_center_in      => reason_donor_center_in,
            reason_donor_center_nin     => reason_donor_center_nin,
            id_prof_organ_donor_in      => id_prof_organ_donor_in,
            id_prof_organ_donor_nin     => id_prof_organ_donor_nin,
            dt_organ_donor_in           => dt_organ_donor_in,
            dt_organ_donor_nin          => dt_organ_donor_nin,
            id_cancel_reason_in         => id_cancel_reason_in,
            id_cancel_reason_nin        => id_cancel_reason_nin,
            notes_cancel_in             => notes_cancel_in,
            notes_cancel_nin            => notes_cancel_nin,
            flg_status_in               => flg_status_in,
            flg_status_nin              => flg_status_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            where_in                    => where_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN organ_donor%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT TABLE_VARCHAR
    ) IS
    BEGIN
        upd(id_organ_donor_in          => rec_in.id_organ_donor,
            id_patient_in              => rec_in.id_patient,
            id_episode_in              => rec_in.id_episode,
            id_sl_able_don_organs_in   => rec_in.id_sl_able_don_organs,
            reason_not_able_don_org_in => rec_in.reason_not_able_don_org,
            id_sl_able_don_tissues_in  => rec_in.id_sl_able_don_tissues,
            reason_not_able_don_tis_in => rec_in.reason_not_able_don_tis,
            id_sl_will_consulted_in    => rec_in.id_sl_will_consulted,
            id_sl_will_result_in       => rec_in.id_sl_will_result,
            reason_will_not_cons_in    => rec_in.reason_will_not_cons,
            id_sl_other_declaration_in => rec_in.id_sl_other_declaration,
            other_declaration_notes_in => rec_in.other_declaration_notes,
            id_sl_don_authorized_in    => rec_in.id_sl_don_authorized,
            responsible_name_in        => rec_in.responsible_name,
            id_family_relationship_in  => rec_in.id_family_relationship,
            reason_not_authorized_in   => rec_in.reason_not_authorized,
            id_sl_donation_approved_in => rec_in.id_sl_donation_approved,
            id_sl_object_research_in   => rec_in.id_sl_object_research,
            reason_not_approved_in     => rec_in.reason_not_approved,
            id_sl_family_letter_in     => rec_in.id_sl_family_letter,
            family_name_in             => rec_in.family_name,
            family_address_in          => rec_in.family_address,
            id_sl_justice_consent_in   => rec_in.id_sl_justice_consent,
            id_sl_donor_center_in      => rec_in.id_sl_donor_center,
            reason_donor_center_in     => rec_in.reason_donor_center,
            id_prof_organ_donor_in     => rec_in.id_prof_organ_donor,
            dt_organ_donor_in          => rec_in.dt_organ_donor,
            id_cancel_reason_in        => rec_in.id_cancel_reason,
            notes_cancel_in            => rec_in.notes_cancel,
            flg_status_in              => rec_in.flg_status,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN organ_donor%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        upd(id_organ_donor_in          => rec_in.id_organ_donor,
            id_patient_in              => rec_in.id_patient,
            id_episode_in              => rec_in.id_episode,
            id_sl_able_don_organs_in   => rec_in.id_sl_able_don_organs,
            reason_not_able_don_org_in => rec_in.reason_not_able_don_org,
            id_sl_able_don_tissues_in  => rec_in.id_sl_able_don_tissues,
            reason_not_able_don_tis_in => rec_in.reason_not_able_don_tis,
            id_sl_will_consulted_in    => rec_in.id_sl_will_consulted,
            id_sl_will_result_in       => rec_in.id_sl_will_result,
            reason_will_not_cons_in    => rec_in.reason_will_not_cons,
            id_sl_other_declaration_in => rec_in.id_sl_other_declaration,
            other_declaration_notes_in => rec_in.other_declaration_notes,
            id_sl_don_authorized_in    => rec_in.id_sl_don_authorized,
            responsible_name_in        => rec_in.responsible_name,
            id_family_relationship_in  => rec_in.id_family_relationship,
            reason_not_authorized_in   => rec_in.reason_not_authorized,
            id_sl_donation_approved_in => rec_in.id_sl_donation_approved,
            id_sl_object_research_in   => rec_in.id_sl_object_research,
            reason_not_approved_in     => rec_in.reason_not_approved,
            id_sl_family_letter_in     => rec_in.id_sl_family_letter,
            family_name_in             => rec_in.family_name,
            family_address_in          => rec_in.family_address,
            id_sl_justice_consent_in   => rec_in.id_sl_justice_consent,
            id_sl_donor_center_in      => rec_in.id_sl_donor_center,
            reason_donor_center_in     => rec_in.reason_donor_center,
            id_prof_organ_donor_in     => rec_in.id_prof_organ_donor,
            dt_organ_donor_in          => rec_in.dt_organ_donor,
            id_cancel_reason_in        => rec_in.id_cancel_reason,
            notes_cancel_in            => rec_in.notes_cancel,
            flg_status_in              => rec_in.flg_status,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_organ_donor_in          IN organ_donor.id_organ_donor%TYPE,
        id_patient_in              IN organ_donor.id_patient%TYPE DEFAULT NULL,
        id_episode_in              IN organ_donor.id_episode%TYPE DEFAULT NULL,
        id_sl_able_don_organs_in   IN organ_donor.id_sl_able_don_organs%TYPE DEFAULT NULL,
        reason_not_able_don_org_in IN organ_donor.reason_not_able_don_org%TYPE DEFAULT NULL,
        id_sl_able_don_tissues_in  IN organ_donor.id_sl_able_don_tissues%TYPE DEFAULT NULL,
        reason_not_able_don_tis_in IN organ_donor.reason_not_able_don_tis%TYPE DEFAULT NULL,
        id_sl_will_consulted_in    IN organ_donor.id_sl_will_consulted%TYPE DEFAULT NULL,
        id_sl_will_result_in       IN organ_donor.id_sl_will_result%TYPE DEFAULT NULL,
        reason_will_not_cons_in    IN organ_donor.reason_will_not_cons%TYPE DEFAULT NULL,
        id_sl_other_declaration_in IN organ_donor.id_sl_other_declaration%TYPE DEFAULT NULL,
        other_declaration_notes_in IN organ_donor.other_declaration_notes%TYPE DEFAULT NULL,
        id_sl_don_authorized_in    IN organ_donor.id_sl_don_authorized%TYPE DEFAULT NULL,
        responsible_name_in        IN organ_donor.responsible_name%TYPE DEFAULT NULL,
        id_family_relationship_in  IN organ_donor.id_family_relationship%TYPE DEFAULT NULL,
        reason_not_authorized_in   IN organ_donor.reason_not_authorized%TYPE DEFAULT NULL,
        id_sl_donation_approved_in IN organ_donor.id_sl_donation_approved%TYPE DEFAULT NULL,
        id_sl_object_research_in   IN organ_donor.id_sl_object_research%TYPE DEFAULT NULL,
        reason_not_approved_in     IN organ_donor.reason_not_approved%TYPE DEFAULT NULL,
        id_sl_family_letter_in     IN organ_donor.id_sl_family_letter%TYPE DEFAULT NULL,
        family_name_in             IN organ_donor.family_name%TYPE DEFAULT NULL,
        family_address_in          IN organ_donor.family_address%TYPE DEFAULT NULL,
        id_sl_justice_consent_in   IN organ_donor.id_sl_justice_consent%TYPE DEFAULT NULL,
        id_sl_donor_center_in      IN organ_donor.id_sl_donor_center%TYPE DEFAULT NULL,
        reason_donor_center_in     IN organ_donor.reason_donor_center%TYPE DEFAULT NULL,
        id_prof_organ_donor_in     IN organ_donor.id_prof_organ_donor%TYPE DEFAULT NULL,
        dt_organ_donor_in          IN organ_donor.dt_organ_donor%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN organ_donor.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in            IN organ_donor.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in              IN organ_donor.flg_status%TYPE DEFAULT NULL,
        create_user_in             IN organ_donor.create_user%TYPE DEFAULT NULL,
        create_time_in             IN organ_donor.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN organ_donor.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN organ_donor.update_user%TYPE DEFAULT NULL,
        update_time_in             IN organ_donor.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN organ_donor.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT TABLE_VARCHAR
    ) IS
    BEGIN
        upd(id_organ_donor_in          => id_organ_donor_in,
            id_patient_in              => id_patient_in,
            id_episode_in              => id_episode_in,
            id_sl_able_don_organs_in   => id_sl_able_don_organs_in,
            reason_not_able_don_org_in => reason_not_able_don_org_in,
            id_sl_able_don_tissues_in  => id_sl_able_don_tissues_in,
            reason_not_able_don_tis_in => reason_not_able_don_tis_in,
            id_sl_will_consulted_in    => id_sl_will_consulted_in,
            id_sl_will_result_in       => id_sl_will_result_in,
            reason_will_not_cons_in    => reason_will_not_cons_in,
            id_sl_other_declaration_in => id_sl_other_declaration_in,
            other_declaration_notes_in => other_declaration_notes_in,
            id_sl_don_authorized_in    => id_sl_don_authorized_in,
            responsible_name_in        => responsible_name_in,
            id_family_relationship_in  => id_family_relationship_in,
            reason_not_authorized_in   => reason_not_authorized_in,
            id_sl_donation_approved_in => id_sl_donation_approved_in,
            id_sl_object_research_in   => id_sl_object_research_in,
            reason_not_approved_in     => reason_not_approved_in,
            id_sl_family_letter_in     => id_sl_family_letter_in,
            family_name_in             => family_name_in,
            family_address_in          => family_address_in,
            id_sl_justice_consent_in   => id_sl_justice_consent_in,
            id_sl_donor_center_in      => id_sl_donor_center_in,
            reason_donor_center_in     => reason_donor_center_in,
            id_prof_organ_donor_in     => id_prof_organ_donor_in,
            dt_organ_donor_in          => dt_organ_donor_in,
            id_cancel_reason_in        => id_cancel_reason_in,
            notes_cancel_in            => notes_cancel_in,
            flg_status_in              => flg_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_organ_donor_in          => id_organ_donor_in,
                id_patient_in              => id_patient_in,
                id_episode_in              => id_episode_in,
                id_sl_able_don_organs_in   => id_sl_able_don_organs_in,
                reason_not_able_don_org_in => reason_not_able_don_org_in,
                id_sl_able_don_tissues_in  => id_sl_able_don_tissues_in,
                reason_not_able_don_tis_in => reason_not_able_don_tis_in,
                id_sl_will_consulted_in    => id_sl_will_consulted_in,
                id_sl_will_result_in       => id_sl_will_result_in,
                reason_will_not_cons_in    => reason_will_not_cons_in,
                id_sl_other_declaration_in => id_sl_other_declaration_in,
                other_declaration_notes_in => other_declaration_notes_in,
                id_sl_don_authorized_in    => id_sl_don_authorized_in,
                responsible_name_in        => responsible_name_in,
                id_family_relationship_in  => id_family_relationship_in,
                reason_not_authorized_in   => reason_not_authorized_in,
                id_sl_donation_approved_in => id_sl_donation_approved_in,
                id_sl_object_research_in   => id_sl_object_research_in,
                reason_not_approved_in     => reason_not_approved_in,
                id_sl_family_letter_in     => id_sl_family_letter_in,
                family_name_in             => family_name_in,
                family_address_in          => family_address_in,
                id_sl_justice_consent_in   => id_sl_justice_consent_in,
                id_sl_donor_center_in      => id_sl_donor_center_in,
                reason_donor_center_in     => reason_donor_center_in,
                id_prof_organ_donor_in     => id_prof_organ_donor_in,
                dt_organ_donor_in          => dt_organ_donor_in,
                id_cancel_reason_in        => id_cancel_reason_in,
                notes_cancel_in            => notes_cancel_in,
                flg_status_in              => flg_status_in,
                create_user_in             => create_user_in,
                create_time_in             => create_time_in,
                create_institution_in      => create_institution_in,
                update_user_in             => update_user_in,
                update_time_in             => update_time_in,
                update_institution_in      => update_institution_in,
                handle_error_in            => handle_error_in,
                rows_out                   => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_organ_donor_in          IN organ_donor.id_organ_donor%TYPE,
        id_patient_in              IN organ_donor.id_patient%TYPE DEFAULT NULL,
        id_episode_in              IN organ_donor.id_episode%TYPE DEFAULT NULL,
        id_sl_able_don_organs_in   IN organ_donor.id_sl_able_don_organs%TYPE DEFAULT NULL,
        reason_not_able_don_org_in IN organ_donor.reason_not_able_don_org%TYPE DEFAULT NULL,
        id_sl_able_don_tissues_in  IN organ_donor.id_sl_able_don_tissues%TYPE DEFAULT NULL,
        reason_not_able_don_tis_in IN organ_donor.reason_not_able_don_tis%TYPE DEFAULT NULL,
        id_sl_will_consulted_in    IN organ_donor.id_sl_will_consulted%TYPE DEFAULT NULL,
        id_sl_will_result_in       IN organ_donor.id_sl_will_result%TYPE DEFAULT NULL,
        reason_will_not_cons_in    IN organ_donor.reason_will_not_cons%TYPE DEFAULT NULL,
        id_sl_other_declaration_in IN organ_donor.id_sl_other_declaration%TYPE DEFAULT NULL,
        other_declaration_notes_in IN organ_donor.other_declaration_notes%TYPE DEFAULT NULL,
        id_sl_don_authorized_in    IN organ_donor.id_sl_don_authorized%TYPE DEFAULT NULL,
        responsible_name_in        IN organ_donor.responsible_name%TYPE DEFAULT NULL,
        id_family_relationship_in  IN organ_donor.id_family_relationship%TYPE DEFAULT NULL,
        reason_not_authorized_in   IN organ_donor.reason_not_authorized%TYPE DEFAULT NULL,
        id_sl_donation_approved_in IN organ_donor.id_sl_donation_approved%TYPE DEFAULT NULL,
        id_sl_object_research_in   IN organ_donor.id_sl_object_research%TYPE DEFAULT NULL,
        reason_not_approved_in     IN organ_donor.reason_not_approved%TYPE DEFAULT NULL,
        id_sl_family_letter_in     IN organ_donor.id_sl_family_letter%TYPE DEFAULT NULL,
        family_name_in             IN organ_donor.family_name%TYPE DEFAULT NULL,
        family_address_in          IN organ_donor.family_address%TYPE DEFAULT NULL,
        id_sl_justice_consent_in   IN organ_donor.id_sl_justice_consent%TYPE DEFAULT NULL,
        id_sl_donor_center_in      IN organ_donor.id_sl_donor_center%TYPE DEFAULT NULL,
        reason_donor_center_in     IN organ_donor.reason_donor_center%TYPE DEFAULT NULL,
        id_prof_organ_donor_in     IN organ_donor.id_prof_organ_donor%TYPE DEFAULT NULL,
        dt_organ_donor_in          IN organ_donor.dt_organ_donor%TYPE DEFAULT NULL,
        id_cancel_reason_in        IN organ_donor.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in            IN organ_donor.notes_cancel%TYPE DEFAULT NULL,
        flg_status_in              IN organ_donor.flg_status%TYPE DEFAULT NULL,
        create_user_in             IN organ_donor.create_user%TYPE DEFAULT NULL,
        create_time_in             IN organ_donor.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN organ_donor.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN organ_donor.update_user%TYPE DEFAULT NULL,
        update_time_in             IN organ_donor.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN organ_donor.update_institution%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        upd_ins(id_organ_donor_in,
                id_patient_in,
                id_episode_in,
                id_sl_able_don_organs_in,
                reason_not_able_don_org_in,
                id_sl_able_don_tissues_in,
                reason_not_able_don_tis_in,
                id_sl_will_consulted_in,
                id_sl_will_result_in,
                reason_will_not_cons_in,
                id_sl_other_declaration_in,
                other_declaration_notes_in,
                id_sl_don_authorized_in,
                responsible_name_in,
                id_family_relationship_in,
                reason_not_authorized_in,
                id_sl_donation_approved_in,
                id_sl_object_research_in,
                reason_not_approved_in,
                id_sl_family_letter_in,
                family_name_in,
                family_address_in,
                id_sl_justice_consent_in,
                id_sl_donor_center_in,
                reason_donor_center_in,
                id_prof_organ_donor_in,
                dt_organ_donor_in,
                id_cancel_reason_in,
                notes_cancel_in,
                flg_status_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN organ_donor_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT TABLE_VARCHAR
    ) IS
        l_id_organ_donor          id_organ_donor_cc;
        l_id_patient              id_patient_cc;
        l_id_episode              id_episode_cc;
        l_id_sl_able_don_organs   id_sl_able_don_organs_cc;
        l_reason_not_able_don_org reason_not_able_don_org_cc;
        l_id_sl_able_don_tissues  id_sl_able_don_tissues_cc;
        l_reason_not_able_don_tis reason_not_able_don_tis_cc;
        l_id_sl_will_consulted    id_sl_will_consulted_cc;
        l_id_sl_will_result       id_sl_will_result_cc;
        l_reason_will_not_cons    reason_will_not_cons_cc;
        l_id_sl_other_declaration id_sl_other_declaration_cc;
        l_other_declaration_notes other_declaration_notes_cc;
        l_id_sl_don_authorized    id_sl_don_authorized_cc;
        l_responsible_name        responsible_name_cc;
        l_id_family_relationship  id_family_relationship_cc;
        l_reason_not_authorized   reason_not_authorized_cc;
        l_id_sl_donation_approved id_sl_donation_approved_cc;
        l_id_sl_object_research   id_sl_object_research_cc;
        l_reason_not_approved     reason_not_approved_cc;
        l_id_sl_family_letter     id_sl_family_letter_cc;
        l_family_name             family_name_cc;
        l_family_address          family_address_cc;
        l_id_sl_justice_consent   id_sl_justice_consent_cc;
        l_id_sl_donor_center      id_sl_donor_center_cc;
        l_reason_donor_center     reason_donor_center_cc;
        l_id_prof_organ_donor     id_prof_organ_donor_cc;
        l_dt_organ_donor          dt_organ_donor_cc;
        l_id_cancel_reason        id_cancel_reason_cc;
        l_notes_cancel            notes_cancel_cc;
        l_flg_status              flg_status_cc;
        l_create_user             create_user_cc;
        l_create_time             create_time_cc;
        l_create_institution      create_institution_cc;
        l_update_user             update_user_cc;
        l_update_time             update_time_cc;
        l_update_institution      update_institution_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_organ_donor(i) := col_in(i).id_organ_donor;
            l_id_patient(i) := col_in(i).id_patient;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_sl_able_don_organs(i) := col_in(i).id_sl_able_don_organs;
            l_reason_not_able_don_org(i) := col_in(i).reason_not_able_don_org;
            l_id_sl_able_don_tissues(i) := col_in(i).id_sl_able_don_tissues;
            l_reason_not_able_don_tis(i) := col_in(i).reason_not_able_don_tis;
            l_id_sl_will_consulted(i) := col_in(i).id_sl_will_consulted;
            l_id_sl_will_result(i) := col_in(i).id_sl_will_result;
            l_reason_will_not_cons(i) := col_in(i).reason_will_not_cons;
            l_id_sl_other_declaration(i) := col_in(i).id_sl_other_declaration;
            l_other_declaration_notes(i) := col_in(i).other_declaration_notes;
            l_id_sl_don_authorized(i) := col_in(i).id_sl_don_authorized;
            l_responsible_name(i) := col_in(i).responsible_name;
            l_id_family_relationship(i) := col_in(i).id_family_relationship;
            l_reason_not_authorized(i) := col_in(i).reason_not_authorized;
            l_id_sl_donation_approved(i) := col_in(i).id_sl_donation_approved;
            l_id_sl_object_research(i) := col_in(i).id_sl_object_research;
            l_reason_not_approved(i) := col_in(i).reason_not_approved;
            l_id_sl_family_letter(i) := col_in(i).id_sl_family_letter;
            l_family_name(i) := col_in(i).family_name;
            l_family_address(i) := col_in(i).family_address;
            l_id_sl_justice_consent(i) := col_in(i).id_sl_justice_consent;
            l_id_sl_donor_center(i) := col_in(i).id_sl_donor_center;
            l_reason_donor_center(i) := col_in(i).reason_donor_center;
            l_id_prof_organ_donor(i) := col_in(i).id_prof_organ_donor;
            l_dt_organ_donor(i) := col_in(i).dt_organ_donor;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_flg_status(i) := col_in(i).flg_status;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE organ_donor
                   SET id_patient              = nvl(l_id_patient(i), id_patient),
                       id_episode              = nvl(l_id_episode(i), id_episode),
                       id_sl_able_don_organs   = nvl(l_id_sl_able_don_organs(i), id_sl_able_don_organs),
                       reason_not_able_don_org = nvl(l_reason_not_able_don_org(i), reason_not_able_don_org),
                       id_sl_able_don_tissues  = nvl(l_id_sl_able_don_tissues(i), id_sl_able_don_tissues),
                       reason_not_able_don_tis = nvl(l_reason_not_able_don_tis(i), reason_not_able_don_tis),
                       id_sl_will_consulted    = nvl(l_id_sl_will_consulted(i), id_sl_will_consulted),
                       id_sl_will_result       = nvl(l_id_sl_will_result(i), id_sl_will_result),
                       reason_will_not_cons    = nvl(l_reason_will_not_cons(i), reason_will_not_cons),
                       id_sl_other_declaration = nvl(l_id_sl_other_declaration(i), id_sl_other_declaration),
                       other_declaration_notes = nvl(l_other_declaration_notes(i), other_declaration_notes),
                       id_sl_don_authorized    = nvl(l_id_sl_don_authorized(i), id_sl_don_authorized),
                       responsible_name        = nvl(l_responsible_name(i), responsible_name),
                       id_family_relationship  = nvl(l_id_family_relationship(i), id_family_relationship),
                       reason_not_authorized   = nvl(l_reason_not_authorized(i), reason_not_authorized),
                       id_sl_donation_approved = nvl(l_id_sl_donation_approved(i), id_sl_donation_approved),
                       id_sl_object_research   = nvl(l_id_sl_object_research(i), id_sl_object_research),
                       reason_not_approved     = nvl(l_reason_not_approved(i), reason_not_approved),
                       id_sl_family_letter     = nvl(l_id_sl_family_letter(i), id_sl_family_letter),
                       family_name             = nvl(l_family_name(i), family_name),
                       family_address          = nvl(l_family_address(i), family_address),
                       id_sl_justice_consent   = nvl(l_id_sl_justice_consent(i), id_sl_justice_consent),
                       id_sl_donor_center      = nvl(l_id_sl_donor_center(i), id_sl_donor_center),
                       reason_donor_center     = nvl(l_reason_donor_center(i), reason_donor_center),
                       id_prof_organ_donor     = nvl(l_id_prof_organ_donor(i), id_prof_organ_donor),
                       dt_organ_donor          = nvl(l_dt_organ_donor(i), dt_organ_donor),
                       id_cancel_reason        = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       notes_cancel            = nvl(l_notes_cancel(i), notes_cancel),
                       flg_status              = nvl(l_flg_status(i), flg_status),
                       create_user             = nvl(l_create_user(i), create_user),
                       create_time             = nvl(l_create_time(i), create_time),
                       create_institution      = nvl(l_create_institution(i), create_institution),
                       update_user             = nvl(l_update_user(i), update_user),
                       update_time             = nvl(l_update_time(i), update_time),
                       update_institution      = nvl(l_update_institution(i), update_institution)
                 WHERE id_organ_donor = l_id_organ_donor(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE organ_donor
                   SET id_patient              = l_id_patient(i),
                       id_episode              = l_id_episode(i),
                       id_sl_able_don_organs   = l_id_sl_able_don_organs(i),
                       reason_not_able_don_org = l_reason_not_able_don_org(i),
                       id_sl_able_don_tissues  = l_id_sl_able_don_tissues(i),
                       reason_not_able_don_tis = l_reason_not_able_don_tis(i),
                       id_sl_will_consulted    = l_id_sl_will_consulted(i),
                       id_sl_will_result       = l_id_sl_will_result(i),
                       reason_will_not_cons    = l_reason_will_not_cons(i),
                       id_sl_other_declaration = l_id_sl_other_declaration(i),
                       other_declaration_notes = l_other_declaration_notes(i),
                       id_sl_don_authorized    = l_id_sl_don_authorized(i),
                       responsible_name        = l_responsible_name(i),
                       id_family_relationship  = l_id_family_relationship(i),
                       reason_not_authorized   = l_reason_not_authorized(i),
                       id_sl_donation_approved = l_id_sl_donation_approved(i),
                       id_sl_object_research   = l_id_sl_object_research(i),
                       reason_not_approved     = l_reason_not_approved(i),
                       id_sl_family_letter     = l_id_sl_family_letter(i),
                       family_name             = l_family_name(i),
                       family_address          = l_family_address(i),
                       id_sl_justice_consent   = l_id_sl_justice_consent(i),
                       id_sl_donor_center      = l_id_sl_donor_center(i),
                       reason_donor_center     = l_reason_donor_center(i),
                       id_prof_organ_donor     = l_id_prof_organ_donor(i),
                       dt_organ_donor          = l_dt_organ_donor(i),
                       id_cancel_reason        = l_id_cancel_reason(i),
                       notes_cancel            = l_notes_cancel(i),
                       flg_status              = l_flg_status(i),
                       create_user             = l_create_user(i),
                       create_time             = l_create_time(i),
                       create_institution      = l_create_institution(i),
                       update_user             = l_update_user(i),
                       update_time             = l_update_time(i),
                       update_institution      = l_update_institution(i)
                 WHERE id_organ_donor = l_id_organ_donor(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN organ_donor_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE ORGAN_DONOR
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE ORGAN_DONOR
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT TABLE_VARCHAR
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE ORGAN_DONOR set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE ORGAN_DONOR set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_organ_donor_in IN organ_donor.id_organ_donor%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_organ_donor = id_organ_donor_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_organ_donor_in IN organ_donor.id_organ_donor%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
    
        del(id_organ_donor_in => id_organ_donor_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_ORGAN_DONOR
    PROCEDURE del_id_organ_donor
    (
        id_organ_donor_in IN organ_donor.id_organ_donor%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_organ_donor = id_organ_donor_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_organ_donor;

    -- Delete all rows for primary key column ID_ORGAN_DONOR
    PROCEDURE del_id_organ_donor
    (
        id_organ_donor_in IN organ_donor.id_organ_donor%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        del_id_organ_donor(id_organ_donor_in => id_organ_donor_in,
                           handle_error_in   => handle_error_in,
                           rows_out          => rows_out);
    END del_id_organ_donor;

    -- Delete for unique value of OD_E_UK
    PROCEDURE del_od_e_uk
    (
        id_episode_in   IN organ_donor.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_od_e_uk;
    -- Delete for unique value of OD_P_UK
    PROCEDURE del_od_p_uk
    (
        id_patient_in   IN organ_donor.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_patient = id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_od_p_uk;

    -- Delete for unique value of OD_E_UK
    PROCEDURE del_od_e_uk
    (
        id_episode_in   IN organ_donor.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        del_od_e_uk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_od_e_uk;
    -- Delete for unique value of OD_P_UK
    PROCEDURE del_od_p_uk
    (
        id_patient_in   IN organ_donor.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        del_od_p_uk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_od_p_uk;

    PROCEDURE del_od_cr_fk
    (
        id_cancel_reason_in IN organ_donor.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_cancel_reason = del_od_cr_fk.id_cancel_reason_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_od_cr_fk;

    PROCEDURE del_od_cr_fk
    (
        id_cancel_reason_in IN organ_donor.id_cancel_reason%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        del_od_cr_fk(id_cancel_reason_in => id_cancel_reason_in,
                     handle_error_in     => handle_error_in,
                     rows_out            => rows_out);
    END del_od_cr_fk;

    PROCEDURE del_od_e_fk
    (
        id_episode_in   IN organ_donor.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_episode = del_od_e_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_od_e_fk;

    PROCEDURE del_od_e_fk
    (
        id_episode_in   IN organ_donor.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        del_od_e_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_od_e_fk;

    PROCEDURE del_od_fr_fk
    (
        id_family_relationship_in IN organ_donor.id_family_relationship%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_family_relationship = del_od_fr_fk.id_family_relationship_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_od_fr_fk;

    PROCEDURE del_od_fr_fk
    (
        id_family_relationship_in IN organ_donor.id_family_relationship%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        del_od_fr_fk(id_family_relationship_in => id_family_relationship_in,
                     handle_error_in           => handle_error_in,
                     rows_out                  => rows_out);
    END del_od_fr_fk;

    PROCEDURE del_od_p_fk
    (
        id_patient_in   IN organ_donor.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_patient = del_od_p_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_od_p_fk;

    PROCEDURE del_od_p_fk
    (
        id_patient_in   IN organ_donor.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        del_od_p_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_od_p_fk;

    PROCEDURE del_od_p_od_fk
    (
        id_prof_organ_donor_in IN organ_donor.id_prof_organ_donor%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_prof_organ_donor = del_od_p_od_fk.id_prof_organ_donor_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_od_p_od_fk;

    PROCEDURE del_od_p_od_fk
    (
        id_prof_organ_donor_in IN organ_donor.id_prof_organ_donor%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        del_od_p_od_fk(id_prof_organ_donor_in => id_prof_organ_donor_in,
                       handle_error_in        => handle_error_in,
                       rows_out               => rows_out);
    END del_od_p_od_fk;

    PROCEDURE del_od_slado_fk
    (
        id_sl_able_don_organs_in IN organ_donor.id_sl_able_don_organs%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_sl_able_don_organs = del_od_slado_fk.id_sl_able_don_organs_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_od_slado_fk;

    PROCEDURE del_od_slado_fk
    (
        id_sl_able_don_organs_in IN organ_donor.id_sl_able_don_organs%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        del_od_slado_fk(id_sl_able_don_organs_in => id_sl_able_don_organs_in,
                        handle_error_in          => handle_error_in,
                        rows_out                 => rows_out);
    END del_od_slado_fk;

    PROCEDURE del_od_sladt_fk
    (
        id_sl_able_don_tissues_in IN organ_donor.id_sl_able_don_tissues%TYPE,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_sl_able_don_tissues = del_od_sladt_fk.id_sl_able_don_tissues_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_od_sladt_fk;

    PROCEDURE del_od_sladt_fk
    (
        id_sl_able_don_tissues_in IN organ_donor.id_sl_able_don_tissues%TYPE,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        del_od_sladt_fk(id_sl_able_don_tissues_in => id_sl_able_don_tissues_in,
                        handle_error_in           => handle_error_in,
                        rows_out                  => rows_out);
    END del_od_sladt_fk;

    PROCEDURE del_od_sldap_fk
    (
        id_sl_don_authorized_in IN organ_donor.id_sl_don_authorized%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_sl_don_authorized = del_od_sldap_fk.id_sl_don_authorized_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_od_sldap_fk;

    PROCEDURE del_od_sldap_fk
    (
        id_sl_don_authorized_in IN organ_donor.id_sl_don_authorized%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        del_od_sldap_fk(id_sl_don_authorized_in => id_sl_don_authorized_in,
                        handle_error_in         => handle_error_in,
                        rows_out                => rows_out);
    END del_od_sldap_fk;

    PROCEDURE del_od_sldau_fk
    (
        id_sl_other_declaration_in IN organ_donor.id_sl_other_declaration%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_sl_other_declaration = del_od_sldau_fk.id_sl_other_declaration_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_od_sldau_fk;

    PROCEDURE del_od_sldau_fk
    (
        id_sl_other_declaration_in IN organ_donor.id_sl_other_declaration%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        del_od_sldau_fk(id_sl_other_declaration_in => id_sl_other_declaration_in,
                        handle_error_in            => handle_error_in,
                        rows_out                   => rows_out);
    END del_od_sldau_fk;

    PROCEDURE del_od_sldc_fk
    (
        id_sl_justice_consent_in IN organ_donor.id_sl_justice_consent%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_sl_justice_consent = del_od_sldc_fk.id_sl_justice_consent_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_od_sldc_fk;

    PROCEDURE del_od_sldc_fk
    (
        id_sl_justice_consent_in IN organ_donor.id_sl_justice_consent%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        del_od_sldc_fk(id_sl_justice_consent_in => id_sl_justice_consent_in,
                       handle_error_in          => handle_error_in,
                       rows_out                 => rows_out);
    END del_od_sldc_fk;

    PROCEDURE del_od_slfl_fk
    (
        id_sl_object_research_in IN organ_donor.id_sl_object_research%TYPE,
        handle_error_in          IN BOOLEAN := TRUE,
        rows_out                 OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_sl_object_research = del_od_slfl_fk.id_sl_object_research_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_od_slfl_fk;

    PROCEDURE del_od_slfl_fk
    (
        id_sl_object_research_in IN organ_donor.id_sl_object_research%TYPE,
        handle_error_in          IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        del_od_slfl_fk(id_sl_object_research_in => id_sl_object_research_in,
                       handle_error_in          => handle_error_in,
                       rows_out                 => rows_out);
    END del_od_slfl_fk;

    PROCEDURE del_od_sljc_fk
    (
        id_sl_family_letter_in IN organ_donor.id_sl_family_letter%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_sl_family_letter = del_od_sljc_fk.id_sl_family_letter_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_od_sljc_fk;

    PROCEDURE del_od_sljc_fk
    (
        id_sl_family_letter_in IN organ_donor.id_sl_family_letter%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        del_od_sljc_fk(id_sl_family_letter_in => id_sl_family_letter_in,
                       handle_error_in        => handle_error_in,
                       rows_out               => rows_out);
    END del_od_sljc_fk;

    PROCEDURE del_od_slod_fk
    (
        id_sl_will_result_in IN organ_donor.id_sl_will_result%TYPE,
        handle_error_in      IN BOOLEAN := TRUE,
        rows_out             OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_sl_will_result = del_od_slod_fk.id_sl_will_result_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_od_slod_fk;

    PROCEDURE del_od_slod_fk
    (
        id_sl_will_result_in IN organ_donor.id_sl_will_result%TYPE,
        handle_error_in      IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        del_od_slod_fk(id_sl_will_result_in => id_sl_will_result_in,
                       handle_error_in      => handle_error_in,
                       rows_out             => rows_out);
    END del_od_slod_fk;

    PROCEDURE del_od_slor_fk
    (
        id_sl_donation_approved_in IN organ_donor.id_sl_donation_approved%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_sl_donation_approved = del_od_slor_fk.id_sl_donation_approved_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_od_slor_fk;

    PROCEDURE del_od_slor_fk
    (
        id_sl_donation_approved_in IN organ_donor.id_sl_donation_approved%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        del_od_slor_fk(id_sl_donation_approved_in => id_sl_donation_approved_in,
                       handle_error_in            => handle_error_in,
                       rows_out                   => rows_out);
    END del_od_slor_fk;

    PROCEDURE del_od_slwc_fk
    (
        id_sl_will_consulted_in IN organ_donor.id_sl_will_consulted%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_sl_will_consulted = del_od_slwc_fk.id_sl_will_consulted_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_od_slwc_fk;

    PROCEDURE del_od_slwc_fk
    (
        id_sl_will_consulted_in IN organ_donor.id_sl_will_consulted%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        del_od_slwc_fk(id_sl_will_consulted_in => id_sl_will_consulted_in,
                       handle_error_in         => handle_error_in,
                       rows_out                => rows_out);
    END del_od_slwc_fk;

    PROCEDURE del_od_slwr_fk
    (
        id_sl_donor_center_in IN organ_donor.id_sl_donor_center%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT TABLE_VARCHAR
    ) IS
    BEGIN
        DELETE FROM organ_donor
         WHERE id_sl_donor_center = del_od_slwr_fk.id_sl_donor_center_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_od_slwr_fk;

    PROCEDURE del_od_slwr_fk
    (
        id_sl_donor_center_in IN organ_donor.id_sl_donor_center%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out TABLE_VARCHAR;
    BEGIN
        del_od_slwr_fk(id_sl_donor_center_in => id_sl_donor_center_in,
                       handle_error_in       => handle_error_in,
                       rows_out              => rows_out);
    END del_od_slwr_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM ORGAN_DONOR';
        ELSE
            RETURN 'DELETE FROM ORGAN_DONOR WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT TABLE_VARCHAR
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT TABLE_VARCHAR
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT TABLE_VARCHAR
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT TABLE_VARCHAR
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT TABLE_VARCHAR
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ORGAN_DONOR');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ORGAN_DONOR');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(organ_donor_inout IN OUT organ_donor%ROWTYPE) IS
    BEGIN
        organ_donor_inout.id_organ_donor          := NULL;
        organ_donor_inout.id_patient              := NULL;
        organ_donor_inout.id_episode              := NULL;
        organ_donor_inout.id_sl_able_don_organs   := NULL;
        organ_donor_inout.reason_not_able_don_org := NULL;
        organ_donor_inout.id_sl_able_don_tissues  := NULL;
        organ_donor_inout.reason_not_able_don_tis := NULL;
        organ_donor_inout.id_sl_will_consulted    := NULL;
        organ_donor_inout.id_sl_will_result       := NULL;
        organ_donor_inout.reason_will_not_cons    := NULL;
        organ_donor_inout.id_sl_other_declaration := NULL;
        organ_donor_inout.other_declaration_notes := NULL;
        organ_donor_inout.id_sl_don_authorized    := NULL;
        organ_donor_inout.responsible_name        := NULL;
        organ_donor_inout.id_family_relationship  := NULL;
        organ_donor_inout.reason_not_authorized   := NULL;
        organ_donor_inout.id_sl_donation_approved := NULL;
        organ_donor_inout.id_sl_object_research   := NULL;
        organ_donor_inout.reason_not_approved     := NULL;
        organ_donor_inout.id_sl_family_letter     := NULL;
        organ_donor_inout.family_name             := NULL;
        organ_donor_inout.family_address          := NULL;
        organ_donor_inout.id_sl_justice_consent   := NULL;
        organ_donor_inout.id_sl_donor_center      := NULL;
        organ_donor_inout.reason_donor_center     := NULL;
        organ_donor_inout.id_prof_organ_donor     := NULL;
        organ_donor_inout.dt_organ_donor          := NULL;
        organ_donor_inout.id_cancel_reason        := NULL;
        organ_donor_inout.notes_cancel            := NULL;
        organ_donor_inout.flg_status              := NULL;
        organ_donor_inout.create_user             := NULL;
        organ_donor_inout.create_time             := NULL;
        organ_donor_inout.create_institution      := NULL;
        organ_donor_inout.update_user             := NULL;
        organ_donor_inout.update_time             := NULL;
        organ_donor_inout.update_institution      := NULL;
    END initrec;

    FUNCTION initrec RETURN organ_donor%ROWTYPE IS
        l_organ_donor organ_donor%ROWTYPE;
    BEGIN
        RETURN l_organ_donor;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN TABLE_VARCHAR) RETURN organ_donor_tc IS
        data organ_donor_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM organ_donor
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN TABLE_VARCHAR) RETURN organ_donor_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data organ_donor_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_organ_donor;
/
