/*-- Last Change Revision: $Rev: 2028395 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:45:31 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY TS_STD_PRESC_DIR_FREQDET
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: July 29, 2010 16:52:33
| Created By: ALERT
*/
IS

   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_presc_dir_freqdet_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE
      ,
      id_presc_dir_dosefreq_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      rank_in IN STD_PRESC_DIR_FREQDET.RANK%TYPE DEFAULT NULL,
      edf_m_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_M_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      edf_mp_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_MP_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_wd_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_WD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_md_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_MD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      freqdet_hour_in IN STD_PRESC_DIR_FREQDET.FREQDET_HOUR%TYPE DEFAULT NULL,
      freq_before_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_BEFORE_MEAL_DELAY%TYPE DEFAULT NULL,
      freq_after_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_AFTER_MEAL_DELAY%TYPE DEFAULT NULL,
      create_user_in IN STD_PRESC_DIR_FREQDET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN STD_PRESC_DIR_FREQDET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN STD_PRESC_DIR_FREQDET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN STD_PRESC_DIR_FREQDET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN STD_PRESC_DIR_FREQDET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN STD_PRESC_DIR_FREQDET.UPDATE_INSTITUTION%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO STD_PRESC_DIR_FREQDET (
         ID_PRESC_DIR_FREQDET,
         ID_PRESC_DIR_DOSEFREQ,
         RANK,
         EDF_M_ID_PD_FREQUENCY,
         EDF_MP_ID_PD_FREQUENCY,
         DF_WD_ID_PD_FREQUENCY,
         DF_MD_ID_PD_FREQUENCY,
         FREQDET_HOUR,
         FREQ_BEFORE_MEAL_DELAY,
         FREQ_AFTER_MEAL_DELAY,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION
         )
      VALUES (
         id_presc_dir_freqdet_in,
         id_presc_dir_dosefreq_in,
         rank_in,
         edf_m_id_pd_frequency_in,
         edf_mp_id_pd_frequency_in,
         df_wd_id_pd_frequency_in,
         df_md_id_pd_frequency_in,
         freqdet_hour_in,
         freq_before_meal_delay_in,
         freq_after_meal_delay_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'STD_PRESC_DIR_FREQDET');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'STD_PRESC_DIR_FREQDET');
           IF l_name = 'SPDFD_DOSE_FREQ_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PRESC_DIR_DOSEFREQ'
               , value_in => id_presc_dir_dosefreq_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_presc_dir_freqdet_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE
      ,
      id_presc_dir_dosefreq_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      rank_in IN STD_PRESC_DIR_FREQDET.RANK%TYPE DEFAULT NULL,
      edf_m_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_M_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      edf_mp_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_MP_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_wd_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_WD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_md_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_MD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      freqdet_hour_in IN STD_PRESC_DIR_FREQDET.FREQDET_HOUR%TYPE DEFAULT NULL,
      freq_before_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_BEFORE_MEAL_DELAY%TYPE DEFAULT NULL,
      freq_after_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_AFTER_MEAL_DELAY%TYPE DEFAULT NULL,
      create_user_in IN STD_PRESC_DIR_FREQDET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN STD_PRESC_DIR_FREQDET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN STD_PRESC_DIR_FREQDET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN STD_PRESC_DIR_FREQDET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN STD_PRESC_DIR_FREQDET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN STD_PRESC_DIR_FREQDET.UPDATE_INSTITUTION%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_presc_dir_freqdet_in => id_presc_dir_freqdet_in
      ,
      id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
      rank_in => rank_in,
      edf_m_id_pd_frequency_in => edf_m_id_pd_frequency_in,
      edf_mp_id_pd_frequency_in => edf_mp_id_pd_frequency_in,
      df_wd_id_pd_frequency_in => df_wd_id_pd_frequency_in,
      df_md_id_pd_frequency_in => df_md_id_pd_frequency_in,
      freqdet_hour_in => freqdet_hour_in,
      freq_before_meal_delay_in => freq_before_meal_delay_in,
      freq_after_meal_delay_in => freq_after_meal_delay_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN STD_PRESC_DIR_FREQDET%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec STD_PRESC_DIR_FREQDET%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_PRESC_DIR_FREQDET := next_key (sequence_in);
      END IF;
      ins (
         id_presc_dir_freqdet_in => l_rec.ID_PRESC_DIR_FREQDET
         ,
         id_presc_dir_dosefreq_in => l_rec.ID_PRESC_DIR_DOSEFREQ,
         rank_in => l_rec.RANK,
         edf_m_id_pd_frequency_in => l_rec.EDF_M_ID_PD_FREQUENCY,
         edf_mp_id_pd_frequency_in => l_rec.EDF_MP_ID_PD_FREQUENCY,
         df_wd_id_pd_frequency_in => l_rec.DF_WD_ID_PD_FREQUENCY,
         df_md_id_pd_frequency_in => l_rec.DF_MD_ID_PD_FREQUENCY,
         freqdet_hour_in => l_rec.FREQDET_HOUR,
         freq_before_meal_delay_in => l_rec.FREQ_BEFORE_MEAL_DELAY,
         freq_after_meal_delay_in => l_rec.FREQ_AFTER_MEAL_DELAY,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN STD_PRESC_DIR_FREQDET%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE

   IS
     retval STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_STD_PRESC_DIR_FREQDET.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_STD_PRESC_DIR_FREQDET')
           );
   END next_key;

   PROCEDURE ins (
      id_presc_dir_dosefreq_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      rank_in IN STD_PRESC_DIR_FREQDET.RANK%TYPE DEFAULT NULL,
      edf_m_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_M_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      edf_mp_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_MP_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_wd_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_WD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_md_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_MD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      freqdet_hour_in IN STD_PRESC_DIR_FREQDET.FREQDET_HOUR%TYPE DEFAULT NULL,
      freq_before_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_BEFORE_MEAL_DELAY%TYPE DEFAULT NULL,
      freq_after_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_AFTER_MEAL_DELAY%TYPE DEFAULT NULL,
      create_user_in IN STD_PRESC_DIR_FREQDET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN STD_PRESC_DIR_FREQDET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN STD_PRESC_DIR_FREQDET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN STD_PRESC_DIR_FREQDET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN STD_PRESC_DIR_FREQDET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN STD_PRESC_DIR_FREQDET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_presc_dir_freqdet_out IN OUT STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE := next_key;
   BEGIN
      ins (
         id_presc_dir_freqdet_in => l_pky,
         id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
         rank_in => rank_in,
         edf_m_id_pd_frequency_in => edf_m_id_pd_frequency_in,
         edf_mp_id_pd_frequency_in => edf_mp_id_pd_frequency_in,
         df_wd_id_pd_frequency_in => df_wd_id_pd_frequency_in,
         df_md_id_pd_frequency_in => df_md_id_pd_frequency_in,
         freqdet_hour_in => freqdet_hour_in,
         freq_before_meal_delay_in => freq_before_meal_delay_in,
         freq_after_meal_delay_in => freq_after_meal_delay_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_presc_dir_freqdet_out := l_pky;
   END ins;

   PROCEDURE ins (
      id_presc_dir_dosefreq_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      rank_in IN STD_PRESC_DIR_FREQDET.RANK%TYPE DEFAULT NULL,
      edf_m_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_M_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      edf_mp_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_MP_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_wd_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_WD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_md_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_MD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      freqdet_hour_in IN STD_PRESC_DIR_FREQDET.FREQDET_HOUR%TYPE DEFAULT NULL,
      freq_before_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_BEFORE_MEAL_DELAY%TYPE DEFAULT NULL,
      freq_after_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_AFTER_MEAL_DELAY%TYPE DEFAULT NULL,
      create_user_in IN STD_PRESC_DIR_FREQDET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN STD_PRESC_DIR_FREQDET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN STD_PRESC_DIR_FREQDET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN STD_PRESC_DIR_FREQDET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN STD_PRESC_DIR_FREQDET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN STD_PRESC_DIR_FREQDET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_presc_dir_freqdet_out IN OUT STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
      rank_in => rank_in,
      edf_m_id_pd_frequency_in => edf_m_id_pd_frequency_in,
      edf_mp_id_pd_frequency_in => edf_mp_id_pd_frequency_in,
      df_wd_id_pd_frequency_in => df_wd_id_pd_frequency_in,
      df_md_id_pd_frequency_in => df_md_id_pd_frequency_in,
      freqdet_hour_in => freqdet_hour_in,
      freq_before_meal_delay_in => freq_before_meal_delay_in,
      freq_after_meal_delay_in => freq_after_meal_delay_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      id_presc_dir_freqdet_out => id_presc_dir_freqdet_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      id_presc_dir_dosefreq_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      rank_in IN STD_PRESC_DIR_FREQDET.RANK%TYPE DEFAULT NULL,
      edf_m_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_M_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      edf_mp_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_MP_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_wd_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_WD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_md_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_MD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      freqdet_hour_in IN STD_PRESC_DIR_FREQDET.FREQDET_HOUR%TYPE DEFAULT NULL,
      freq_before_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_BEFORE_MEAL_DELAY%TYPE DEFAULT NULL,
      freq_after_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_AFTER_MEAL_DELAY%TYPE DEFAULT NULL,
      create_user_in IN STD_PRESC_DIR_FREQDET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN STD_PRESC_DIR_FREQDET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN STD_PRESC_DIR_FREQDET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN STD_PRESC_DIR_FREQDET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN STD_PRESC_DIR_FREQDET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN STD_PRESC_DIR_FREQDET.UPDATE_INSTITUTION%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE
   IS
        l_pky STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE := next_key;
   BEGIN
      ins (
         id_presc_dir_freqdet_in => l_pky,
         id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
         rank_in => rank_in,
         edf_m_id_pd_frequency_in => edf_m_id_pd_frequency_in,
         edf_mp_id_pd_frequency_in => edf_mp_id_pd_frequency_in,
         df_wd_id_pd_frequency_in => df_wd_id_pd_frequency_in,
         df_md_id_pd_frequency_in => df_md_id_pd_frequency_in,
         freqdet_hour_in => freqdet_hour_in,
         freq_before_meal_delay_in => freq_before_meal_delay_in,
         freq_after_meal_delay_in => freq_after_meal_delay_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      id_presc_dir_dosefreq_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      rank_in IN STD_PRESC_DIR_FREQDET.RANK%TYPE DEFAULT NULL,
      edf_m_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_M_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      edf_mp_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_MP_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_wd_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_WD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_md_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_MD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      freqdet_hour_in IN STD_PRESC_DIR_FREQDET.FREQDET_HOUR%TYPE DEFAULT NULL,
      freq_before_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_BEFORE_MEAL_DELAY%TYPE DEFAULT NULL,
      freq_after_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_AFTER_MEAL_DELAY%TYPE DEFAULT NULL,
      create_user_in IN STD_PRESC_DIR_FREQDET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN STD_PRESC_DIR_FREQDET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN STD_PRESC_DIR_FREQDET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN STD_PRESC_DIR_FREQDET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN STD_PRESC_DIR_FREQDET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN STD_PRESC_DIR_FREQDET.UPDATE_INSTITUTION%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE
   IS
        l_pky STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_presc_dir_freqdet_in => l_pky,
         id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
         rank_in => rank_in,
         edf_m_id_pd_frequency_in => edf_m_id_pd_frequency_in,
         edf_mp_id_pd_frequency_in => edf_mp_id_pd_frequency_in,
         df_wd_id_pd_frequency_in => df_wd_id_pd_frequency_in,
         df_md_id_pd_frequency_in => df_md_id_pd_frequency_in,
         freqdet_hour_in => freqdet_hour_in,
         freq_before_meal_delay_in => freq_before_meal_delay_in,
         freq_after_meal_delay_in => freq_after_meal_delay_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      id_presc_dir_dosefreq_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      rank_in IN STD_PRESC_DIR_FREQDET.RANK%TYPE DEFAULT NULL,
      edf_m_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_M_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      edf_mp_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_MP_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_wd_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_WD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_md_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_MD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      freqdet_hour_in IN STD_PRESC_DIR_FREQDET.FREQDET_HOUR%TYPE DEFAULT NULL,
      freq_before_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_BEFORE_MEAL_DELAY%TYPE DEFAULT NULL,
      freq_after_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_AFTER_MEAL_DELAY%TYPE DEFAULT NULL,
      create_user_in IN STD_PRESC_DIR_FREQDET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN STD_PRESC_DIR_FREQDET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN STD_PRESC_DIR_FREQDET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN STD_PRESC_DIR_FREQDET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN STD_PRESC_DIR_FREQDET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN STD_PRESC_DIR_FREQDET.UPDATE_INSTITUTION%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE := next_key;
   BEGIN
      ins (
         id_presc_dir_freqdet_in => l_pky,
         id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
         rank_in => rank_in,
         edf_m_id_pd_frequency_in => edf_m_id_pd_frequency_in,
         edf_mp_id_pd_frequency_in => edf_mp_id_pd_frequency_in,
         df_wd_id_pd_frequency_in => df_wd_id_pd_frequency_in,
         df_md_id_pd_frequency_in => df_md_id_pd_frequency_in,
         freqdet_hour_in => freqdet_hour_in,
         freq_before_meal_delay_in => freq_before_meal_delay_in,
         freq_after_meal_delay_in => freq_after_meal_delay_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      id_presc_dir_dosefreq_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      rank_in IN STD_PRESC_DIR_FREQDET.RANK%TYPE DEFAULT NULL,
      edf_m_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_M_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      edf_mp_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_MP_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_wd_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_WD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_md_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_MD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      freqdet_hour_in IN STD_PRESC_DIR_FREQDET.FREQDET_HOUR%TYPE DEFAULT NULL,
      freq_before_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_BEFORE_MEAL_DELAY%TYPE DEFAULT NULL,
      freq_after_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_AFTER_MEAL_DELAY%TYPE DEFAULT NULL,
      create_user_in IN STD_PRESC_DIR_FREQDET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN STD_PRESC_DIR_FREQDET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN STD_PRESC_DIR_FREQDET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN STD_PRESC_DIR_FREQDET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN STD_PRESC_DIR_FREQDET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN STD_PRESC_DIR_FREQDET.UPDATE_INSTITUTION%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_presc_dir_freqdet_in => l_pky,
         id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
         rank_in => rank_in,
         edf_m_id_pd_frequency_in => edf_m_id_pd_frequency_in,
         edf_mp_id_pd_frequency_in => edf_mp_id_pd_frequency_in,
         df_wd_id_pd_frequency_in => df_wd_id_pd_frequency_in,
         df_md_id_pd_frequency_in => df_md_id_pd_frequency_in,
         freqdet_hour_in => freqdet_hour_in,
         freq_before_meal_delay_in => freq_before_meal_delay_in,
         freq_after_meal_delay_in => freq_after_meal_delay_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN STD_PRESC_DIR_FREQDET_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
         FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO STD_PRESC_DIR_FREQDET VALUES rows_in (indx) RETURNING ROWID BULK COLLECT INTO rows_out;
      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_CODE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PRESC_DIR_FREQDET _' || indx
                  ,value_in => rows_in(indx).ID_PRESC_DIR_FREQDET
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PRESC_DIR_DOSEFREQ _' || indx
                  ,value_in => rows_in(indx).ID_PRESC_DIR_DOSEFREQ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'RANK _' || indx
                  ,value_in => rows_in(indx).RANK
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'EDF_M_ID_PD_FREQUENCY _' || indx
                  ,value_in => rows_in(indx).EDF_M_ID_PD_FREQUENCY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'EDF_MP_ID_PD_FREQUENCY _' || indx
                  ,value_in => rows_in(indx).EDF_MP_ID_PD_FREQUENCY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DF_WD_ID_PD_FREQUENCY _' || indx
                  ,value_in => rows_in(indx).DF_WD_ID_PD_FREQUENCY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DF_MD_ID_PD_FREQUENCY _' || indx
                  ,value_in => rows_in(indx).DF_MD_ID_PD_FREQUENCY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FREQDET_HOUR _' || indx
                  ,value_in => rows_in(indx).FREQDET_HOUR
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FREQ_BEFORE_MEAL_DELAY _' || indx
                  ,value_in => rows_in(indx).FREQ_BEFORE_MEAL_DELAY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FREQ_AFTER_MEAL_DELAY _' || indx
                  ,value_in => rows_in(indx).FREQ_AFTER_MEAL_DELAY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(indx).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(indx).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(indx).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(indx).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(indx).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'STD_PRESC_DIR_FREQDET'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN STD_PRESC_DIR_FREQDET_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_presc_dir_freqdet_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE,
      id_presc_dir_dosefreq_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      ID_PRESC_DIR_DOSEFREQ_nin IN BOOLEAN := TRUE,
      rank_in IN STD_PRESC_DIR_FREQDET.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
      edf_m_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_M_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      EDF_M_ID_PD_FREQUENCY_nin IN BOOLEAN := TRUE,
      edf_mp_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_MP_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      EDF_MP_ID_PD_FREQUENCY_nin IN BOOLEAN := TRUE,
      df_wd_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_WD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      DF_WD_ID_PD_FREQUENCY_nin IN BOOLEAN := TRUE,
      df_md_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_MD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      DF_MD_ID_PD_FREQUENCY_nin IN BOOLEAN := TRUE,
      freqdet_hour_in IN STD_PRESC_DIR_FREQDET.FREQDET_HOUR%TYPE DEFAULT NULL,
      FREQDET_HOUR_nin IN BOOLEAN := TRUE,
      freq_before_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_BEFORE_MEAL_DELAY%TYPE DEFAULT NULL,
      FREQ_BEFORE_MEAL_DELAY_nin IN BOOLEAN := TRUE,
      freq_after_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_AFTER_MEAL_DELAY%TYPE DEFAULT NULL,
      FREQ_AFTER_MEAL_DELAY_nin IN BOOLEAN := TRUE,
      create_user_in IN STD_PRESC_DIR_FREQDET.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN STD_PRESC_DIR_FREQDET.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN STD_PRESC_DIR_FREQDET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN STD_PRESC_DIR_FREQDET.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN STD_PRESC_DIR_FREQDET.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN STD_PRESC_DIR_FREQDET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_PRESC_DIR_DOSEFREQ_n NUMBER(1);
   l_RANK_n NUMBER(1);
   l_EDF_M_ID_PD_FREQUENCY_n NUMBER(1);
   l_EDF_MP_ID_PD_FREQUENCY_n NUMBER(1);
   l_DF_WD_ID_PD_FREQUENCY_n NUMBER(1);
   l_DF_MD_ID_PD_FREQUENCY_n NUMBER(1);
   l_FREQDET_HOUR_n NUMBER(1);
   l_FREQ_BEFORE_MEAL_DELAY_n NUMBER(1);
   l_FREQ_AFTER_MEAL_DELAY_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   BEGIN

   l_ID_PRESC_DIR_DOSEFREQ_n := sys.diutil.bool_to_int(ID_PRESC_DIR_DOSEFREQ_nin);
   l_RANK_n := sys.diutil.bool_to_int(RANK_nin);
   l_EDF_M_ID_PD_FREQUENCY_n := sys.diutil.bool_to_int(EDF_M_ID_PD_FREQUENCY_nin);
   l_EDF_MP_ID_PD_FREQUENCY_n := sys.diutil.bool_to_int(EDF_MP_ID_PD_FREQUENCY_nin);
   l_DF_WD_ID_PD_FREQUENCY_n := sys.diutil.bool_to_int(DF_WD_ID_PD_FREQUENCY_nin);
   l_DF_MD_ID_PD_FREQUENCY_n := sys.diutil.bool_to_int(DF_MD_ID_PD_FREQUENCY_nin);
   l_FREQDET_HOUR_n := sys.diutil.bool_to_int(FREQDET_HOUR_nin);
   l_FREQ_BEFORE_MEAL_DELAY_n := sys.diutil.bool_to_int(FREQ_BEFORE_MEAL_DELAY_nin);
   l_FREQ_AFTER_MEAL_DELAY_n := sys.diutil.bool_to_int(FREQ_AFTER_MEAL_DELAY_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);


         UPDATE STD_PRESC_DIR_FREQDET SET
     ID_PRESC_DIR_DOSEFREQ = decode (l_ID_PRESC_DIR_DOSEFREQ_n,0,id_presc_dir_dosefreq_in, NVL (id_presc_dir_dosefreq_in, ID_PRESC_DIR_DOSEFREQ)),
     RANK = decode (l_RANK_n,0,rank_in, NVL (rank_in, RANK)),
     EDF_M_ID_PD_FREQUENCY = decode (l_EDF_M_ID_PD_FREQUENCY_n,0,edf_m_id_pd_frequency_in, NVL (edf_m_id_pd_frequency_in, EDF_M_ID_PD_FREQUENCY)),
     EDF_MP_ID_PD_FREQUENCY = decode (l_EDF_MP_ID_PD_FREQUENCY_n,0,edf_mp_id_pd_frequency_in, NVL (edf_mp_id_pd_frequency_in, EDF_MP_ID_PD_FREQUENCY)),
     DF_WD_ID_PD_FREQUENCY = decode (l_DF_WD_ID_PD_FREQUENCY_n,0,df_wd_id_pd_frequency_in, NVL (df_wd_id_pd_frequency_in, DF_WD_ID_PD_FREQUENCY)),
     DF_MD_ID_PD_FREQUENCY = decode (l_DF_MD_ID_PD_FREQUENCY_n,0,df_md_id_pd_frequency_in, NVL (df_md_id_pd_frequency_in, DF_MD_ID_PD_FREQUENCY)),
     FREQDET_HOUR = decode (l_FREQDET_HOUR_n,0,freqdet_hour_in, NVL (freqdet_hour_in, FREQDET_HOUR)),
     FREQ_BEFORE_MEAL_DELAY = decode (l_FREQ_BEFORE_MEAL_DELAY_n,0,freq_before_meal_delay_in, NVL (freq_before_meal_delay_in, FREQ_BEFORE_MEAL_DELAY)),
     FREQ_AFTER_MEAL_DELAY = decode (l_FREQ_AFTER_MEAL_DELAY_n,0,freq_after_meal_delay_in, NVL (freq_after_meal_delay_in, FREQ_AFTER_MEAL_DELAY)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION))
          WHERE
             ID_PRESC_DIR_FREQDET = id_presc_dir_freqdet_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'STD_PRESC_DIR_FREQDET');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'STD_PRESC_DIR_FREQDET');
           IF l_name = 'SPDFD_DOSE_FREQ_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PRESC_DIR_DOSEFREQ'
               , value_in => id_presc_dir_dosefreq_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_presc_dir_freqdet_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE,
      id_presc_dir_dosefreq_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      ID_PRESC_DIR_DOSEFREQ_nin IN BOOLEAN := TRUE,
      rank_in IN STD_PRESC_DIR_FREQDET.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
      edf_m_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_M_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      EDF_M_ID_PD_FREQUENCY_nin IN BOOLEAN := TRUE,
      edf_mp_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_MP_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      EDF_MP_ID_PD_FREQUENCY_nin IN BOOLEAN := TRUE,
      df_wd_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_WD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      DF_WD_ID_PD_FREQUENCY_nin IN BOOLEAN := TRUE,
      df_md_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_MD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      DF_MD_ID_PD_FREQUENCY_nin IN BOOLEAN := TRUE,
      freqdet_hour_in IN STD_PRESC_DIR_FREQDET.FREQDET_HOUR%TYPE DEFAULT NULL,
      FREQDET_HOUR_nin IN BOOLEAN := TRUE,
      freq_before_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_BEFORE_MEAL_DELAY%TYPE DEFAULT NULL,
      FREQ_BEFORE_MEAL_DELAY_nin IN BOOLEAN := TRUE,
      freq_after_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_AFTER_MEAL_DELAY%TYPE DEFAULT NULL,
      FREQ_AFTER_MEAL_DELAY_nin IN BOOLEAN := TRUE,
      create_user_in IN STD_PRESC_DIR_FREQDET.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN STD_PRESC_DIR_FREQDET.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN STD_PRESC_DIR_FREQDET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN STD_PRESC_DIR_FREQDET.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN STD_PRESC_DIR_FREQDET.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN STD_PRESC_DIR_FREQDET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_presc_dir_freqdet_in => id_presc_dir_freqdet_in,
      id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
      ID_PRESC_DIR_DOSEFREQ_nin => ID_PRESC_DIR_DOSEFREQ_nin,
      rank_in => rank_in,
      RANK_nin => RANK_nin,
      edf_m_id_pd_frequency_in => edf_m_id_pd_frequency_in,
      EDF_M_ID_PD_FREQUENCY_nin => EDF_M_ID_PD_FREQUENCY_nin,
      edf_mp_id_pd_frequency_in => edf_mp_id_pd_frequency_in,
      EDF_MP_ID_PD_FREQUENCY_nin => EDF_MP_ID_PD_FREQUENCY_nin,
      df_wd_id_pd_frequency_in => df_wd_id_pd_frequency_in,
      DF_WD_ID_PD_FREQUENCY_nin => DF_WD_ID_PD_FREQUENCY_nin,
      df_md_id_pd_frequency_in => df_md_id_pd_frequency_in,
      DF_MD_ID_PD_FREQUENCY_nin => DF_MD_ID_PD_FREQUENCY_nin,
      freqdet_hour_in => freqdet_hour_in,
      FREQDET_HOUR_nin => FREQDET_HOUR_nin,
      freq_before_meal_delay_in => freq_before_meal_delay_in,
      FREQ_BEFORE_MEAL_DELAY_nin => FREQ_BEFORE_MEAL_DELAY_nin,
      freq_after_meal_delay_in => freq_after_meal_delay_in,
      FREQ_AFTER_MEAL_DELAY_nin => FREQ_AFTER_MEAL_DELAY_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_presc_dir_dosefreq_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      ID_PRESC_DIR_DOSEFREQ_nin IN BOOLEAN := TRUE,
      rank_in IN STD_PRESC_DIR_FREQDET.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
      edf_m_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_M_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      EDF_M_ID_PD_FREQUENCY_nin IN BOOLEAN := TRUE,
      edf_mp_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_MP_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      EDF_MP_ID_PD_FREQUENCY_nin IN BOOLEAN := TRUE,
      df_wd_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_WD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      DF_WD_ID_PD_FREQUENCY_nin IN BOOLEAN := TRUE,
      df_md_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_MD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      DF_MD_ID_PD_FREQUENCY_nin IN BOOLEAN := TRUE,
      freqdet_hour_in IN STD_PRESC_DIR_FREQDET.FREQDET_HOUR%TYPE DEFAULT NULL,
      FREQDET_HOUR_nin IN BOOLEAN := TRUE,
      freq_before_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_BEFORE_MEAL_DELAY%TYPE DEFAULT NULL,
      FREQ_BEFORE_MEAL_DELAY_nin IN BOOLEAN := TRUE,
      freq_after_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_AFTER_MEAL_DELAY%TYPE DEFAULT NULL,
      FREQ_AFTER_MEAL_DELAY_nin IN BOOLEAN := TRUE,
      create_user_in IN STD_PRESC_DIR_FREQDET.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN STD_PRESC_DIR_FREQDET.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN STD_PRESC_DIR_FREQDET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN STD_PRESC_DIR_FREQDET.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN STD_PRESC_DIR_FREQDET.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN STD_PRESC_DIR_FREQDET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_ID_PRESC_DIR_DOSEFREQ_n NUMBER(1);
   l_RANK_n NUMBER(1);
   l_EDF_M_ID_PD_FREQUENCY_n NUMBER(1);
   l_EDF_MP_ID_PD_FREQUENCY_n NUMBER(1);
   l_DF_WD_ID_PD_FREQUENCY_n NUMBER(1);
   l_DF_MD_ID_PD_FREQUENCY_n NUMBER(1);
   l_FREQDET_HOUR_n NUMBER(1);
   l_FREQ_BEFORE_MEAL_DELAY_n NUMBER(1);
   l_FREQ_AFTER_MEAL_DELAY_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
      id_presc_dir_freqdet_in STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE;
   BEGIN



      l_ID_PRESC_DIR_DOSEFREQ_n := sys.diutil.bool_to_int(ID_PRESC_DIR_DOSEFREQ_nin);
      l_RANK_n := sys.diutil.bool_to_int(RANK_nin);
      l_EDF_M_ID_PD_FREQUENCY_n := sys.diutil.bool_to_int(EDF_M_ID_PD_FREQUENCY_nin);
      l_EDF_MP_ID_PD_FREQUENCY_n := sys.diutil.bool_to_int(EDF_MP_ID_PD_FREQUENCY_nin);
      l_DF_WD_ID_PD_FREQUENCY_n := sys.diutil.bool_to_int(DF_WD_ID_PD_FREQUENCY_nin);
      l_DF_MD_ID_PD_FREQUENCY_n := sys.diutil.bool_to_int(DF_MD_ID_PD_FREQUENCY_nin);
      l_FREQDET_HOUR_n := sys.diutil.bool_to_int(FREQDET_HOUR_nin);
      l_FREQ_BEFORE_MEAL_DELAY_n := sys.diutil.bool_to_int(FREQ_BEFORE_MEAL_DELAY_nin);
      l_FREQ_AFTER_MEAL_DELAY_n := sys.diutil.bool_to_int(FREQ_AFTER_MEAL_DELAY_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);



l_sql := 'UPDATE STD_PRESC_DIR_FREQDET SET '
     || ' ID_PRESC_DIR_DOSEFREQ = decode (' || l_ID_PRESC_DIR_DOSEFREQ_n || ',0,:id_presc_dir_dosefreq_in, NVL (:id_presc_dir_dosefreq_in, ID_PRESC_DIR_DOSEFREQ)) '|| ','
     || ' RANK = decode (' || l_RANK_n || ',0,:rank_in, NVL (:rank_in, RANK)) '|| ','
     || ' EDF_M_ID_PD_FREQUENCY = decode (' || l_EDF_M_ID_PD_FREQUENCY_n || ',0,:edf_m_id_pd_frequency_in, NVL (:edf_m_id_pd_frequency_in, EDF_M_ID_PD_FREQUENCY)) '|| ','
     || ' EDF_MP_ID_PD_FREQUENCY = decode (' || l_EDF_MP_ID_PD_FREQUENCY_n || ',0,:edf_mp_id_pd_frequency_in, NVL (:edf_mp_id_pd_frequency_in, EDF_MP_ID_PD_FREQUENCY)) '|| ','
     || ' DF_WD_ID_PD_FREQUENCY = decode (' || l_DF_WD_ID_PD_FREQUENCY_n || ',0,:df_wd_id_pd_frequency_in, NVL (:df_wd_id_pd_frequency_in, DF_WD_ID_PD_FREQUENCY)) '|| ','
     || ' DF_MD_ID_PD_FREQUENCY = decode (' || l_DF_MD_ID_PD_FREQUENCY_n || ',0,:df_md_id_pd_frequency_in, NVL (:df_md_id_pd_frequency_in, DF_MD_ID_PD_FREQUENCY)) '|| ','
     || ' FREQDET_HOUR = decode (' || l_FREQDET_HOUR_n || ',0,:freqdet_hour_in, NVL (:freqdet_hour_in, FREQDET_HOUR)) '|| ','
     || ' FREQ_BEFORE_MEAL_DELAY = decode (' || l_FREQ_BEFORE_MEAL_DELAY_n || ',0,:freq_before_meal_delay_in, NVL (:freq_before_meal_delay_in, FREQ_BEFORE_MEAL_DELAY)) '|| ','
     || ' FREQ_AFTER_MEAL_DELAY = decode (' || l_FREQ_AFTER_MEAL_DELAY_n || ',0,:freq_after_meal_delay_in, NVL (:freq_after_meal_delay_in, FREQ_AFTER_MEAL_DELAY)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_presc_dir_dosefreq_in,
     rank_in,
     edf_m_id_pd_frequency_in,
     edf_mp_id_pd_frequency_in,
     df_wd_id_pd_frequency_in,
     df_md_id_pd_frequency_in,
     freqdet_hour_in,
     freq_before_meal_delay_in,
     freq_after_meal_delay_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'STD_PRESC_DIR_FREQDET');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'STD_PRESC_DIR_FREQDET');
           IF l_name = 'SPDFD_DOSE_FREQ_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PRESC_DIR_DOSEFREQ'
               , value_in => id_presc_dir_dosefreq_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_presc_dir_dosefreq_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      ID_PRESC_DIR_DOSEFREQ_nin IN BOOLEAN := TRUE,
      rank_in IN STD_PRESC_DIR_FREQDET.RANK%TYPE DEFAULT NULL,
      RANK_nin IN BOOLEAN := TRUE,
      edf_m_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_M_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      EDF_M_ID_PD_FREQUENCY_nin IN BOOLEAN := TRUE,
      edf_mp_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_MP_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      EDF_MP_ID_PD_FREQUENCY_nin IN BOOLEAN := TRUE,
      df_wd_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_WD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      DF_WD_ID_PD_FREQUENCY_nin IN BOOLEAN := TRUE,
      df_md_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_MD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      DF_MD_ID_PD_FREQUENCY_nin IN BOOLEAN := TRUE,
      freqdet_hour_in IN STD_PRESC_DIR_FREQDET.FREQDET_HOUR%TYPE DEFAULT NULL,
      FREQDET_HOUR_nin IN BOOLEAN := TRUE,
      freq_before_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_BEFORE_MEAL_DELAY%TYPE DEFAULT NULL,
      FREQ_BEFORE_MEAL_DELAY_nin IN BOOLEAN := TRUE,
      freq_after_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_AFTER_MEAL_DELAY%TYPE DEFAULT NULL,
      FREQ_AFTER_MEAL_DELAY_nin IN BOOLEAN := TRUE,
      create_user_in IN STD_PRESC_DIR_FREQDET.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN STD_PRESC_DIR_FREQDET.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN STD_PRESC_DIR_FREQDET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN STD_PRESC_DIR_FREQDET.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN STD_PRESC_DIR_FREQDET.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN STD_PRESC_DIR_FREQDET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
    where_in varchar2 DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
      ID_PRESC_DIR_DOSEFREQ_nin => ID_PRESC_DIR_DOSEFREQ_nin,
      rank_in => rank_in,
      RANK_nin => RANK_nin,
      edf_m_id_pd_frequency_in => edf_m_id_pd_frequency_in,
      EDF_M_ID_PD_FREQUENCY_nin => EDF_M_ID_PD_FREQUENCY_nin,
      edf_mp_id_pd_frequency_in => edf_mp_id_pd_frequency_in,
      EDF_MP_ID_PD_FREQUENCY_nin => EDF_MP_ID_PD_FREQUENCY_nin,
      df_wd_id_pd_frequency_in => df_wd_id_pd_frequency_in,
      DF_WD_ID_PD_FREQUENCY_nin => DF_WD_ID_PD_FREQUENCY_nin,
      df_md_id_pd_frequency_in => df_md_id_pd_frequency_in,
      DF_MD_ID_PD_FREQUENCY_nin => DF_MD_ID_PD_FREQUENCY_nin,
      freqdet_hour_in => freqdet_hour_in,
      FREQDET_HOUR_nin => FREQDET_HOUR_nin,
      freq_before_meal_delay_in => freq_before_meal_delay_in,
      FREQ_BEFORE_MEAL_DELAY_nin => FREQ_BEFORE_MEAL_DELAY_nin,
      freq_after_meal_delay_in => freq_after_meal_delay_in,
      FREQ_AFTER_MEAL_DELAY_nin => FREQ_AFTER_MEAL_DELAY_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN STD_PRESC_DIR_FREQDET%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_presc_dir_freqdet_in => rec_in.ID_PRESC_DIR_FREQDET,
         id_presc_dir_dosefreq_in => rec_in.ID_PRESC_DIR_DOSEFREQ,
         rank_in => rec_in.RANK,
         edf_m_id_pd_frequency_in => rec_in.EDF_M_ID_PD_FREQUENCY,
         edf_mp_id_pd_frequency_in => rec_in.EDF_MP_ID_PD_FREQUENCY,
         df_wd_id_pd_frequency_in => rec_in.DF_WD_ID_PD_FREQUENCY,
         df_md_id_pd_frequency_in => rec_in.DF_MD_ID_PD_FREQUENCY,
         freqdet_hour_in => rec_in.FREQDET_HOUR,
         freq_before_meal_delay_in => rec_in.FREQ_BEFORE_MEAL_DELAY,
         freq_after_meal_delay_in => rec_in.FREQ_AFTER_MEAL_DELAY,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN STD_PRESC_DIR_FREQDET%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_presc_dir_freqdet_in => rec_in.ID_PRESC_DIR_FREQDET,
         id_presc_dir_dosefreq_in => rec_in.ID_PRESC_DIR_DOSEFREQ,
         rank_in => rec_in.RANK,
         edf_m_id_pd_frequency_in => rec_in.EDF_M_ID_PD_FREQUENCY,
         edf_mp_id_pd_frequency_in => rec_in.EDF_MP_ID_PD_FREQUENCY,
         df_wd_id_pd_frequency_in => rec_in.DF_WD_ID_PD_FREQUENCY,
         df_md_id_pd_frequency_in => rec_in.DF_MD_ID_PD_FREQUENCY,
         freqdet_hour_in => rec_in.FREQDET_HOUR,
         freq_before_meal_delay_in => rec_in.FREQ_BEFORE_MEAL_DELAY,
         freq_after_meal_delay_in => rec_in.FREQ_AFTER_MEAL_DELAY,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_presc_dir_freqdet_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE,
      id_presc_dir_dosefreq_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      rank_in IN STD_PRESC_DIR_FREQDET.RANK%TYPE DEFAULT NULL,
      edf_m_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_M_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      edf_mp_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_MP_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_wd_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_WD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_md_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_MD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      freqdet_hour_in IN STD_PRESC_DIR_FREQDET.FREQDET_HOUR%TYPE DEFAULT NULL,
      freq_before_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_BEFORE_MEAL_DELAY%TYPE DEFAULT NULL,
      freq_after_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_AFTER_MEAL_DELAY%TYPE DEFAULT NULL,
      create_user_in IN STD_PRESC_DIR_FREQDET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN STD_PRESC_DIR_FREQDET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN STD_PRESC_DIR_FREQDET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN STD_PRESC_DIR_FREQDET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN STD_PRESC_DIR_FREQDET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN STD_PRESC_DIR_FREQDET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_presc_dir_freqdet_in => id_presc_dir_freqdet_in,
         id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
         rank_in => rank_in,
         edf_m_id_pd_frequency_in => edf_m_id_pd_frequency_in,
         edf_mp_id_pd_frequency_in => edf_mp_id_pd_frequency_in,
         df_wd_id_pd_frequency_in => df_wd_id_pd_frequency_in,
         df_md_id_pd_frequency_in => df_md_id_pd_frequency_in,
         freqdet_hour_in => freqdet_hour_in,
         freq_before_meal_delay_in => freq_before_meal_delay_in,
         freq_after_meal_delay_in => freq_after_meal_delay_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_presc_dir_freqdet_in => id_presc_dir_freqdet_in,
            id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in,
            rank_in => rank_in,
            edf_m_id_pd_frequency_in => edf_m_id_pd_frequency_in,
            edf_mp_id_pd_frequency_in => edf_mp_id_pd_frequency_in,
            df_wd_id_pd_frequency_in => df_wd_id_pd_frequency_in,
            df_md_id_pd_frequency_in => df_md_id_pd_frequency_in,
            freqdet_hour_in => freqdet_hour_in,
            freq_before_meal_delay_in => freq_before_meal_delay_in,
            freq_after_meal_delay_in => freq_after_meal_delay_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_presc_dir_freqdet_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE,
      id_presc_dir_dosefreq_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_DOSEFREQ%TYPE DEFAULT NULL,
      rank_in IN STD_PRESC_DIR_FREQDET.RANK%TYPE DEFAULT NULL,
      edf_m_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_M_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      edf_mp_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.EDF_MP_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_wd_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_WD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      df_md_id_pd_frequency_in IN STD_PRESC_DIR_FREQDET.DF_MD_ID_PD_FREQUENCY%TYPE DEFAULT NULL,
      freqdet_hour_in IN STD_PRESC_DIR_FREQDET.FREQDET_HOUR%TYPE DEFAULT NULL,
      freq_before_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_BEFORE_MEAL_DELAY%TYPE DEFAULT NULL,
      freq_after_meal_delay_in IN STD_PRESC_DIR_FREQDET.FREQ_AFTER_MEAL_DELAY%TYPE DEFAULT NULL,
      create_user_in IN STD_PRESC_DIR_FREQDET.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN STD_PRESC_DIR_FREQDET.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN STD_PRESC_DIR_FREQDET.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN STD_PRESC_DIR_FREQDET.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN STD_PRESC_DIR_FREQDET.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN STD_PRESC_DIR_FREQDET.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_presc_dir_freqdet_in,
      id_presc_dir_dosefreq_in,
      rank_in,
      edf_m_id_pd_frequency_in,
      edf_mp_id_pd_frequency_in,
      df_wd_id_pd_frequency_in,
      df_md_id_pd_frequency_in,
      freqdet_hour_in,
      freq_before_meal_delay_in,
      freq_after_meal_delay_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN STD_PRESC_DIR_FREQDET_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_PRESC_DIR_FREQDET ID_PRESC_DIR_FREQDET_cc;
      l_ID_PRESC_DIR_DOSEFREQ ID_PRESC_DIR_DOSEFREQ_cc;
      l_RANK RANK_cc;
      l_EDF_M_ID_PD_FREQUENCY EDF_M_ID_PD_FREQUENCY_cc;
      l_EDF_MP_ID_PD_FREQUENCY EDF_MP_ID_PD_FREQUENCY_cc;
      l_DF_WD_ID_PD_FREQUENCY DF_WD_ID_PD_FREQUENCY_cc;
      l_DF_MD_ID_PD_FREQUENCY DF_MD_ID_PD_FREQUENCY_cc;
      l_FREQDET_HOUR FREQDET_HOUR_cc;
      l_FREQ_BEFORE_MEAL_DELAY FREQ_BEFORE_MEAL_DELAY_cc;
      l_FREQ_AFTER_MEAL_DELAY FREQ_AFTER_MEAL_DELAY_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_PRESC_DIR_FREQDET(i) := col_in(i).ID_PRESC_DIR_FREQDET;
         l_ID_PRESC_DIR_DOSEFREQ(i) := col_in(i).ID_PRESC_DIR_DOSEFREQ;
         l_RANK(i) := col_in(i).RANK;
         l_EDF_M_ID_PD_FREQUENCY(i) := col_in(i).EDF_M_ID_PD_FREQUENCY;
         l_EDF_MP_ID_PD_FREQUENCY(i) := col_in(i).EDF_MP_ID_PD_FREQUENCY;
         l_DF_WD_ID_PD_FREQUENCY(i) := col_in(i).DF_WD_ID_PD_FREQUENCY;
         l_DF_MD_ID_PD_FREQUENCY(i) := col_in(i).DF_MD_ID_PD_FREQUENCY;
         l_FREQDET_HOUR(i) := col_in(i).FREQDET_HOUR;
         l_FREQ_BEFORE_MEAL_DELAY(i) := col_in(i).FREQ_BEFORE_MEAL_DELAY;
         l_FREQ_AFTER_MEAL_DELAY(i) := col_in(i).FREQ_AFTER_MEAL_DELAY;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE STD_PRESC_DIR_FREQDET SET
               ID_PRESC_DIR_DOSEFREQ = NVL (l_ID_PRESC_DIR_DOSEFREQ(i), ID_PRESC_DIR_DOSEFREQ),
               RANK = NVL (l_RANK(i), RANK),
               EDF_M_ID_PD_FREQUENCY = NVL (l_EDF_M_ID_PD_FREQUENCY(i), EDF_M_ID_PD_FREQUENCY),
               EDF_MP_ID_PD_FREQUENCY = NVL (l_EDF_MP_ID_PD_FREQUENCY(i), EDF_MP_ID_PD_FREQUENCY),
               DF_WD_ID_PD_FREQUENCY = NVL (l_DF_WD_ID_PD_FREQUENCY(i), DF_WD_ID_PD_FREQUENCY),
               DF_MD_ID_PD_FREQUENCY = NVL (l_DF_MD_ID_PD_FREQUENCY(i), DF_MD_ID_PD_FREQUENCY),
               FREQDET_HOUR = NVL (l_FREQDET_HOUR(i), FREQDET_HOUR),
               FREQ_BEFORE_MEAL_DELAY = NVL (l_FREQ_BEFORE_MEAL_DELAY(i), FREQ_BEFORE_MEAL_DELAY),
               FREQ_AFTER_MEAL_DELAY = NVL (l_FREQ_AFTER_MEAL_DELAY(i), FREQ_AFTER_MEAL_DELAY),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION)
             WHERE
                ID_PRESC_DIR_FREQDET = l_ID_PRESC_DIR_FREQDET(i)
         ;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE STD_PRESC_DIR_FREQDET SET
               ID_PRESC_DIR_DOSEFREQ = l_ID_PRESC_DIR_DOSEFREQ(i),
               RANK = l_RANK(i),
               EDF_M_ID_PD_FREQUENCY = l_EDF_M_ID_PD_FREQUENCY(i),
               EDF_MP_ID_PD_FREQUENCY = l_EDF_MP_ID_PD_FREQUENCY(i),
               DF_WD_ID_PD_FREQUENCY = l_DF_WD_ID_PD_FREQUENCY(i),
               DF_MD_ID_PD_FREQUENCY = l_DF_MD_ID_PD_FREQUENCY(i),
               FREQDET_HOUR = l_FREQDET_HOUR(i),
               FREQ_BEFORE_MEAL_DELAY = l_FREQ_BEFORE_MEAL_DELAY(i),
               FREQ_AFTER_MEAL_DELAY = l_FREQ_AFTER_MEAL_DELAY(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i)
             WHERE
                ID_PRESC_DIR_FREQDET = l_ID_PRESC_DIR_FREQDET(i)
         ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN STD_PRESC_DIR_FREQDET_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE STD_PRESC_DIR_FREQDET
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE STD_PRESC_DIR_FREQDET
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE STD_PRESC_DIR_FREQDET set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'STD_PRESC_DIR_FREQDET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE STD_PRESC_DIR_FREQDET set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'STD_PRESC_DIR_FREQDET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_presc_dir_freqdet_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM STD_PRESC_DIR_FREQDET
       WHERE
          ID_PRESC_DIR_FREQDET = id_presc_dir_freqdet_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'STD_PRESC_DIR_FREQDET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_presc_dir_freqdet_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_presc_dir_freqdet_in => id_presc_dir_freqdet_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_PRESC_DIR_FREQDET
   PROCEDURE del_ID_PRESC_DIR_FREQDET (
      id_presc_dir_freqdet_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM STD_PRESC_DIR_FREQDET
       WHERE ID_PRESC_DIR_FREQDET = id_presc_dir_freqdet_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'STD_PRESC_DIR_FREQDET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_PRESC_DIR_FREQDET;






   -- Delete all rows for primary key column ID_PRESC_DIR_FREQDET
   PROCEDURE del_ID_PRESC_DIR_FREQDET (
      id_presc_dir_freqdet_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_FREQDET%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_PRESC_DIR_FREQDET (
      id_presc_dir_freqdet_in => id_presc_dir_freqdet_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_PRESC_DIR_FREQDET;















   PROCEDURE del_SPDFD_DOSE_FREQ_FK (
      id_presc_dir_dosefreq_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_DOSEFREQ%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM STD_PRESC_DIR_FREQDET
       WHERE
          ID_PRESC_DIR_DOSEFREQ = del_SPDFD_DOSE_FREQ_FK.id_presc_dir_dosefreq_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'STD_PRESC_DIR_FREQDET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_SPDFD_DOSE_FREQ_FK;



PROCEDURE del_SPDFD_DOSE_FREQ_FK (
      id_presc_dir_dosefreq_in IN STD_PRESC_DIR_FREQDET.ID_PRESC_DIR_DOSEFREQ%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_SPDFD_DOSE_FREQ_FK (
      id_presc_dir_dosefreq_in => id_presc_dir_dosefreq_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_SPDFD_DOSE_FREQ_FK;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM STD_PRESC_DIR_FREQDET';
      ELSE
         RETURN
            'DELETE FROM STD_PRESC_DIR_FREQDET WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'STD_PRESC_DIR_FREQDET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'STD_PRESC_DIR_FREQDET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'STD_PRESC_DIR_FREQDET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'STD_PRESC_DIR_FREQDET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'STD_PRESC_DIR_FREQDET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'STD_PRESC_DIR_FREQDET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'STD_PRESC_DIR_FREQDET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'STD_PRESC_DIR_FREQDET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'STD_PRESC_DIR_FREQDET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'STD_PRESC_DIR_FREQDET');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'STD_PRESC_DIR_FREQDET');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      std_presc_dir_freqdet_inout IN OUT STD_PRESC_DIR_FREQDET%ROWTYPE
   )
   IS
   BEGIN
      std_presc_dir_freqdet_inout.ID_PRESC_DIR_FREQDET := NULL;
      std_presc_dir_freqdet_inout.ID_PRESC_DIR_DOSEFREQ := NULL;
      std_presc_dir_freqdet_inout.RANK := NULL;
      std_presc_dir_freqdet_inout.EDF_M_ID_PD_FREQUENCY := NULL;
      std_presc_dir_freqdet_inout.EDF_MP_ID_PD_FREQUENCY := NULL;
      std_presc_dir_freqdet_inout.DF_WD_ID_PD_FREQUENCY := NULL;
      std_presc_dir_freqdet_inout.DF_MD_ID_PD_FREQUENCY := NULL;
      std_presc_dir_freqdet_inout.FREQDET_HOUR := NULL;
      std_presc_dir_freqdet_inout.FREQ_BEFORE_MEAL_DELAY := NULL;
      std_presc_dir_freqdet_inout.FREQ_AFTER_MEAL_DELAY := NULL;
      std_presc_dir_freqdet_inout.CREATE_USER := NULL;
      std_presc_dir_freqdet_inout.CREATE_TIME := NULL;
      std_presc_dir_freqdet_inout.CREATE_INSTITUTION := NULL;
      std_presc_dir_freqdet_inout.UPDATE_USER := NULL;
      std_presc_dir_freqdet_inout.UPDATE_TIME := NULL;
      std_presc_dir_freqdet_inout.UPDATE_INSTITUTION := NULL;
   END initrec;

   FUNCTION initrec RETURN STD_PRESC_DIR_FREQDET%ROWTYPE
   IS
      l_std_presc_dir_freqdet STD_PRESC_DIR_FREQDET%ROWTYPE;
   BEGIN
      RETURN l_std_presc_dir_freqdet;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN STD_PRESC_DIR_FREQDET_tc
   IS
        data STD_PRESC_DIR_FREQDET_tc;
   BEGIN
        select * bulk collect into data from STD_PRESC_DIR_FREQDET where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001)*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN STD_PRESC_DIR_FREQDET_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data STD_PRESC_DIR_FREQDET_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_STD_PRESC_DIR_FREQDET;
/
