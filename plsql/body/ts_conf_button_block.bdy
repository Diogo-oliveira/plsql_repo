/*-- Last Change Revision: $Rev: 1666929 $*/
/*-- Last Change by: $Author: nuno.alves $*/
/*-- Date of last change: $Date: 2014-12-01 14:43:05 +0000 (seg, 01 dez 2014) $*/
CREATE OR REPLACE PACKAGE BODY ts_conf_button_block
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Novembro 13, 2014 15:51:28
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_conf_button_block_in   IN conf_button_block.id_conf_button_block%TYPE,
        code_conf_button_block_in IN conf_button_block.code_conf_button_block%TYPE DEFAULT NULL,
        icon_in                   IN conf_button_block.icon%TYPE DEFAULT NULL,
        id_parent_in              IN conf_button_block.id_parent%TYPE DEFAULT NULL,
        flg_available_in          IN conf_button_block.flg_available%TYPE DEFAULT NULL,
        rank_in                   IN conf_button_block.rank%TYPE DEFAULT NULL,
        action_in                 IN conf_button_block.action%TYPE DEFAULT NULL,
        id_swf_file_in            IN conf_button_block.id_swf_file%TYPE DEFAULT NULL,
        id_sys_shortcut_in        IN conf_button_block.id_sys_shortcut%TYPE DEFAULT NULL,
        id_doc_area_in            IN conf_button_block.id_doc_area%TYPE DEFAULT NULL,
        flg_action_in             IN conf_button_block.flg_action%TYPE DEFAULT NULL,
        create_user_in            IN conf_button_block.create_user%TYPE DEFAULT NULL,
        create_time_in            IN conf_button_block.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN conf_button_block.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN conf_button_block.update_user%TYPE DEFAULT NULL,
        update_time_in            IN conf_button_block.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN conf_button_block.update_institution%TYPE DEFAULT NULL,
        domain_in                 IN conf_button_block.domain%TYPE DEFAULT NULL,
        id_pn_data_block_in       IN conf_button_block.id_pn_data_block%TYPE DEFAULT NULL,
        id_task_type_in           IN conf_button_block.id_task_type%TYPE DEFAULT NULL,
        id_type_in                IN conf_button_block.id_type%TYPE DEFAULT NULL,
        internal_task_type_in     IN conf_button_block.internal_task_type%TYPE DEFAULT NULL,
        id_pn_group_in            IN conf_button_block.id_pn_group%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO conf_button_block
            (id_conf_button_block,
             code_conf_button_block,
             icon,
             id_parent,
             flg_available,
             rank,
             action,
             id_swf_file,
             id_sys_shortcut,
             id_doc_area,
             flg_action,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             domain,
             id_pn_data_block,
             id_task_type,
             id_type,
             internal_task_type,
             id_pn_group)
        VALUES
            (id_conf_button_block_in,
             code_conf_button_block_in,
             icon_in,
             id_parent_in,
             flg_available_in,
             rank_in,
             action_in,
             id_swf_file_in,
             id_sys_shortcut_in,
             id_doc_area_in,
             flg_action_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             domain_in,
             id_pn_data_block_in,
             id_task_type_in,
             id_type_in,
             internal_task_type_in,
             id_pn_group_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'CONF_BUTTON_BLOCK');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    IF l_name = 'CBB_APPF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SWF_FILE',
                                                        value_in           => id_swf_file_in);
                    END IF;
                    IF l_name = 'CBB_CBB_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PARENT',
                                                        value_in           => id_parent_in);
                    END IF;
                    IF l_name = 'CBB_DOA_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DOC_AREA',
                                                        value_in           => id_doc_area_in);
                    END IF;
                    IF l_name = 'CBB_PNDB_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PN_DATA_BLOCK',
                                                        value_in           => id_pn_data_block_in);
                    END IF;
                    IF l_name = 'CBB_PNG_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PN_GROUP',
                                                        value_in           => id_pn_group_in);
                    END IF;
                    IF l_name = 'CBB_PNTT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TASK_TYPE',
                                                        value_in           => id_task_type_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_conf_button_block_in   IN conf_button_block.id_conf_button_block%TYPE,
        code_conf_button_block_in IN conf_button_block.code_conf_button_block%TYPE DEFAULT NULL,
        icon_in                   IN conf_button_block.icon%TYPE DEFAULT NULL,
        id_parent_in              IN conf_button_block.id_parent%TYPE DEFAULT NULL,
        flg_available_in          IN conf_button_block.flg_available%TYPE DEFAULT NULL,
        rank_in                   IN conf_button_block.rank%TYPE DEFAULT NULL,
        action_in                 IN conf_button_block.action%TYPE DEFAULT NULL,
        id_swf_file_in            IN conf_button_block.id_swf_file%TYPE DEFAULT NULL,
        id_sys_shortcut_in        IN conf_button_block.id_sys_shortcut%TYPE DEFAULT NULL,
        id_doc_area_in            IN conf_button_block.id_doc_area%TYPE DEFAULT NULL,
        flg_action_in             IN conf_button_block.flg_action%TYPE DEFAULT NULL,
        create_user_in            IN conf_button_block.create_user%TYPE DEFAULT NULL,
        create_time_in            IN conf_button_block.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN conf_button_block.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN conf_button_block.update_user%TYPE DEFAULT NULL,
        update_time_in            IN conf_button_block.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN conf_button_block.update_institution%TYPE DEFAULT NULL,
        domain_in                 IN conf_button_block.domain%TYPE DEFAULT NULL,
        id_pn_data_block_in       IN conf_button_block.id_pn_data_block%TYPE DEFAULT NULL,
        id_task_type_in           IN conf_button_block.id_task_type%TYPE DEFAULT NULL,
        id_type_in                IN conf_button_block.id_type%TYPE DEFAULT NULL,
        internal_task_type_in     IN conf_button_block.internal_task_type%TYPE DEFAULT NULL,
        id_pn_group_in            IN conf_button_block.id_pn_group%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_conf_button_block_in   => id_conf_button_block_in,
            code_conf_button_block_in => code_conf_button_block_in,
            icon_in                   => icon_in,
            id_parent_in              => id_parent_in,
            flg_available_in          => flg_available_in,
            rank_in                   => rank_in,
            action_in                 => action_in,
            id_swf_file_in            => id_swf_file_in,
            id_sys_shortcut_in        => id_sys_shortcut_in,
            id_doc_area_in            => id_doc_area_in,
            flg_action_in             => flg_action_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            domain_in                 => domain_in,
            id_pn_data_block_in       => id_pn_data_block_in,
            id_task_type_in           => id_task_type_in,
            id_type_in                => id_type_in,
            internal_task_type_in     => internal_task_type_in,
            id_pn_group_in            => id_pn_group_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN conf_button_block%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec conf_button_block%ROWTYPE := rec_in;
    BEGIN
        ins(id_conf_button_block_in   => l_rec.id_conf_button_block,
            code_conf_button_block_in => l_rec.code_conf_button_block,
            icon_in                   => l_rec.icon,
            id_parent_in              => l_rec.id_parent,
            flg_available_in          => l_rec.flg_available,
            rank_in                   => l_rec.rank,
            action_in                 => l_rec.action,
            id_swf_file_in            => l_rec.id_swf_file,
            id_sys_shortcut_in        => l_rec.id_sys_shortcut,
            id_doc_area_in            => l_rec.id_doc_area,
            flg_action_in             => l_rec.flg_action,
            create_user_in            => l_rec.create_user,
            create_time_in            => l_rec.create_time,
            create_institution_in     => l_rec.create_institution,
            update_user_in            => l_rec.update_user,
            update_time_in            => l_rec.update_time,
            update_institution_in     => l_rec.update_institution,
            domain_in                 => l_rec.domain,
            id_pn_data_block_in       => l_rec.id_pn_data_block,
            id_task_type_in           => l_rec.id_task_type,
            id_type_in                => l_rec.id_type,
            internal_task_type_in     => l_rec.internal_task_type,
            id_pn_group_in            => l_rec.id_pn_group,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN conf_button_block%ROWTYPE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in => rec_in, sequence_in => sequence_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END ins;

    PROCEDURE ins
    (
        rows_in         IN conf_button_block_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO conf_button_block
                    (id_conf_button_block,
                     code_conf_button_block,
                     icon,
                     id_parent,
                     flg_available,
                     rank,
                     action,
                     id_swf_file,
                     id_sys_shortcut,
                     id_doc_area,
                     flg_action,
                     create_user,
                     create_time,
                     create_institution,
                     update_user,
                     update_time,
                     update_institution,
                     domain,
                     id_pn_data_block,
                     id_task_type,
                     id_type,
                     internal_task_type,
                     id_pn_group)
                VALUES
                    (rows_in(indx).id_conf_button_block,
                     rows_in(indx).code_conf_button_block,
                     rows_in(indx).icon,
                     rows_in(indx).id_parent,
                     rows_in(indx).flg_available,
                     rows_in(indx).rank,
                     rows_in(indx).action,
                     rows_in(indx).id_swf_file,
                     rows_in(indx).id_sys_shortcut,
                     rows_in(indx).id_doc_area,
                     rows_in(indx).flg_action,
                     rows_in(indx).create_user,
                     rows_in(indx).create_time,
                     rows_in(indx).create_institution,
                     rows_in(indx).update_user,
                     rows_in(indx).update_time,
                     rows_in(indx).update_institution,
                     rows_in(indx).domain,
                     rows_in(indx).id_pn_data_block,
                     rows_in(indx).id_task_type,
                     rows_in(indx).id_type,
                     rows_in(indx).internal_task_type,
                     rows_in(indx).id_pn_group)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CONF_BUTTON_BLOCK _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_conf_button_block,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CODE_CONF_BUTTON_BLOCK _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .code_conf_button_block,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ICON _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index).icon,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PARENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_parent,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_AVAILABLE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_available,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'RANK _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index).rank,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ACTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .action,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SWF_FILE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_swf_file,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SYS_SHORTCUT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_sys_shortcut,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_DOC_AREA _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_doc_area,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_ACTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_action,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DOMAIN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .domain,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PN_DATA_BLOCK _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_pn_data_block,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TASK_TYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_task_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_TYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'INTERNAL_TASK_TYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .internal_task_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PN_GROUP _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_pn_group,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'CONF_BUTTON_BLOCK',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN conf_button_block_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_conf_button_block_in    IN conf_button_block.id_conf_button_block%TYPE,
        code_conf_button_block_in  IN conf_button_block.code_conf_button_block%TYPE DEFAULT NULL,
        code_conf_button_block_nin IN BOOLEAN := TRUE,
        icon_in                    IN conf_button_block.icon%TYPE DEFAULT NULL,
        icon_nin                   IN BOOLEAN := TRUE,
        id_parent_in               IN conf_button_block.id_parent%TYPE DEFAULT NULL,
        id_parent_nin              IN BOOLEAN := TRUE,
        flg_available_in           IN conf_button_block.flg_available%TYPE DEFAULT NULL,
        flg_available_nin          IN BOOLEAN := TRUE,
        rank_in                    IN conf_button_block.rank%TYPE DEFAULT NULL,
        rank_nin                   IN BOOLEAN := TRUE,
        action_in                  IN conf_button_block.action%TYPE DEFAULT NULL,
        action_nin                 IN BOOLEAN := TRUE,
        id_swf_file_in             IN conf_button_block.id_swf_file%TYPE DEFAULT NULL,
        id_swf_file_nin            IN BOOLEAN := TRUE,
        id_sys_shortcut_in         IN conf_button_block.id_sys_shortcut%TYPE DEFAULT NULL,
        id_sys_shortcut_nin        IN BOOLEAN := TRUE,
        id_doc_area_in             IN conf_button_block.id_doc_area%TYPE DEFAULT NULL,
        id_doc_area_nin            IN BOOLEAN := TRUE,
        flg_action_in              IN conf_button_block.flg_action%TYPE DEFAULT NULL,
        flg_action_nin             IN BOOLEAN := TRUE,
        create_user_in             IN conf_button_block.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN conf_button_block.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN conf_button_block.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN conf_button_block.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN conf_button_block.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN conf_button_block.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        domain_in                  IN conf_button_block.domain%TYPE DEFAULT NULL,
        domain_nin                 IN BOOLEAN := TRUE,
        id_pn_data_block_in        IN conf_button_block.id_pn_data_block%TYPE DEFAULT NULL,
        id_pn_data_block_nin       IN BOOLEAN := TRUE,
        id_task_type_in            IN conf_button_block.id_task_type%TYPE DEFAULT NULL,
        id_task_type_nin           IN BOOLEAN := TRUE,
        id_type_in                 IN conf_button_block.id_type%TYPE DEFAULT NULL,
        id_type_nin                IN BOOLEAN := TRUE,
        internal_task_type_in      IN conf_button_block.internal_task_type%TYPE DEFAULT NULL,
        internal_task_type_nin     IN BOOLEAN := TRUE,
        id_pn_group_in             IN conf_button_block.id_pn_group%TYPE DEFAULT NULL,
        id_pn_group_nin            IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_rows_out                 table_varchar;
        l_code_conf_button_block_n NUMBER(1);
        l_icon_n                   NUMBER(1);
        l_id_parent_n              NUMBER(1);
        l_flg_available_n          NUMBER(1);
        l_rank_n                   NUMBER(1);
        l_action_n                 NUMBER(1);
        l_id_swf_file_n            NUMBER(1);
        l_id_sys_shortcut_n        NUMBER(1);
        l_id_doc_area_n            NUMBER(1);
        l_flg_action_n             NUMBER(1);
        l_create_user_n            NUMBER(1);
        l_create_time_n            NUMBER(1);
        l_create_institution_n     NUMBER(1);
        l_update_user_n            NUMBER(1);
        l_update_time_n            NUMBER(1);
        l_update_institution_n     NUMBER(1);
        l_domain_n                 NUMBER(1);
        l_id_pn_data_block_n       NUMBER(1);
        l_id_task_type_n           NUMBER(1);
        l_id_type_n                NUMBER(1);
        l_internal_task_type_n     NUMBER(1);
        l_id_pn_group_n            NUMBER(1);
    BEGIN
    
        l_code_conf_button_block_n := sys.diutil.bool_to_int(code_conf_button_block_nin);
        l_icon_n                   := sys.diutil.bool_to_int(icon_nin);
        l_id_parent_n              := sys.diutil.bool_to_int(id_parent_nin);
        l_flg_available_n          := sys.diutil.bool_to_int(flg_available_nin);
        l_rank_n                   := sys.diutil.bool_to_int(rank_nin);
        l_action_n                 := sys.diutil.bool_to_int(action_nin);
        l_id_swf_file_n            := sys.diutil.bool_to_int(id_swf_file_nin);
        l_id_sys_shortcut_n        := sys.diutil.bool_to_int(id_sys_shortcut_nin);
        l_id_doc_area_n            := sys.diutil.bool_to_int(id_doc_area_nin);
        l_flg_action_n             := sys.diutil.bool_to_int(flg_action_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
        l_domain_n                 := sys.diutil.bool_to_int(domain_nin);
        l_id_pn_data_block_n       := sys.diutil.bool_to_int(id_pn_data_block_nin);
        l_id_task_type_n           := sys.diutil.bool_to_int(id_task_type_nin);
        l_id_type_n                := sys.diutil.bool_to_int(id_type_nin);
        l_internal_task_type_n     := sys.diutil.bool_to_int(internal_task_type_nin);
        l_id_pn_group_n            := sys.diutil.bool_to_int(id_pn_group_nin);
    
        UPDATE conf_button_block
           SET code_conf_button_block = decode(l_code_conf_button_block_n,
                                               0,
                                               code_conf_button_block_in,
                                               nvl(code_conf_button_block_in, code_conf_button_block)),
               icon                   = decode(l_icon_n, 0, icon_in, nvl(icon_in, icon)),
               id_parent              = decode(l_id_parent_n, 0, id_parent_in, nvl(id_parent_in, id_parent)),
               flg_available          = decode(l_flg_available_n,
                                               0,
                                               flg_available_in,
                                               nvl(flg_available_in, flg_available)),
               rank                   = decode(l_rank_n, 0, rank_in, nvl(rank_in, rank)),
               action                 = decode(l_action_n, 0, action_in, nvl(action_in, action)),
               id_swf_file            = decode(l_id_swf_file_n, 0, id_swf_file_in, nvl(id_swf_file_in, id_swf_file)),
               id_sys_shortcut        = decode(l_id_sys_shortcut_n,
                                               0,
                                               id_sys_shortcut_in,
                                               nvl(id_sys_shortcut_in, id_sys_shortcut)),
               id_doc_area            = decode(l_id_doc_area_n, 0, id_doc_area_in, nvl(id_doc_area_in, id_doc_area)),
               flg_action             = decode(l_flg_action_n, 0, flg_action_in, nvl(flg_action_in, flg_action)),
               create_user            = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time            = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution     = decode(l_create_institution_n,
                                               0,
                                               create_institution_in,
                                               nvl(create_institution_in, create_institution)),
               update_user            = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time            = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution     = decode(l_update_institution_n,
                                               0,
                                               update_institution_in,
                                               nvl(update_institution_in, update_institution)),
               domain                 = decode(l_domain_n, 0, domain_in, nvl(domain_in, domain)),
               id_pn_data_block       = decode(l_id_pn_data_block_n,
                                               0,
                                               id_pn_data_block_in,
                                               nvl(id_pn_data_block_in, id_pn_data_block)),
               id_task_type           = decode(l_id_task_type_n, 0, id_task_type_in, nvl(id_task_type_in, id_task_type)),
               id_type                = decode(l_id_type_n, 0, id_type_in, nvl(id_type_in, id_type)),
               internal_task_type     = decode(l_internal_task_type_n,
                                               0,
                                               internal_task_type_in,
                                               nvl(internal_task_type_in, internal_task_type)),
               id_pn_group            = decode(l_id_pn_group_n, 0, id_pn_group_in, nvl(id_pn_group_in, id_pn_group))
         WHERE id_conf_button_block = id_conf_button_block_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'CONF_BUTTON_BLOCK');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    IF l_name = 'CBB_APPF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SWF_FILE',
                                                        value_in           => id_swf_file_in);
                    END IF;
                    IF l_name = 'CBB_CBB_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PARENT',
                                                        value_in           => id_parent_in);
                    END IF;
                    IF l_name = 'CBB_DOA_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DOC_AREA',
                                                        value_in           => id_doc_area_in);
                    END IF;
                    IF l_name = 'CBB_PNDB_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PN_DATA_BLOCK',
                                                        value_in           => id_pn_data_block_in);
                    END IF;
                    IF l_name = 'CBB_PNG_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PN_GROUP',
                                                        value_in           => id_pn_group_in);
                    END IF;
                    IF l_name = 'CBB_PNTT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TASK_TYPE',
                                                        value_in           => id_task_type_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_conf_button_block_in    IN conf_button_block.id_conf_button_block%TYPE,
        code_conf_button_block_in  IN conf_button_block.code_conf_button_block%TYPE DEFAULT NULL,
        code_conf_button_block_nin IN BOOLEAN := TRUE,
        icon_in                    IN conf_button_block.icon%TYPE DEFAULT NULL,
        icon_nin                   IN BOOLEAN := TRUE,
        id_parent_in               IN conf_button_block.id_parent%TYPE DEFAULT NULL,
        id_parent_nin              IN BOOLEAN := TRUE,
        flg_available_in           IN conf_button_block.flg_available%TYPE DEFAULT NULL,
        flg_available_nin          IN BOOLEAN := TRUE,
        rank_in                    IN conf_button_block.rank%TYPE DEFAULT NULL,
        rank_nin                   IN BOOLEAN := TRUE,
        action_in                  IN conf_button_block.action%TYPE DEFAULT NULL,
        action_nin                 IN BOOLEAN := TRUE,
        id_swf_file_in             IN conf_button_block.id_swf_file%TYPE DEFAULT NULL,
        id_swf_file_nin            IN BOOLEAN := TRUE,
        id_sys_shortcut_in         IN conf_button_block.id_sys_shortcut%TYPE DEFAULT NULL,
        id_sys_shortcut_nin        IN BOOLEAN := TRUE,
        id_doc_area_in             IN conf_button_block.id_doc_area%TYPE DEFAULT NULL,
        id_doc_area_nin            IN BOOLEAN := TRUE,
        flg_action_in              IN conf_button_block.flg_action%TYPE DEFAULT NULL,
        flg_action_nin             IN BOOLEAN := TRUE,
        create_user_in             IN conf_button_block.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN conf_button_block.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN conf_button_block.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN conf_button_block.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN conf_button_block.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN conf_button_block.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        domain_in                  IN conf_button_block.domain%TYPE DEFAULT NULL,
        domain_nin                 IN BOOLEAN := TRUE,
        id_pn_data_block_in        IN conf_button_block.id_pn_data_block%TYPE DEFAULT NULL,
        id_pn_data_block_nin       IN BOOLEAN := TRUE,
        id_task_type_in            IN conf_button_block.id_task_type%TYPE DEFAULT NULL,
        id_task_type_nin           IN BOOLEAN := TRUE,
        id_type_in                 IN conf_button_block.id_type%TYPE DEFAULT NULL,
        id_type_nin                IN BOOLEAN := TRUE,
        internal_task_type_in      IN conf_button_block.internal_task_type%TYPE DEFAULT NULL,
        internal_task_type_nin     IN BOOLEAN := TRUE,
        id_pn_group_in             IN conf_button_block.id_pn_group%TYPE DEFAULT NULL,
        id_pn_group_nin            IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_conf_button_block_in    => id_conf_button_block_in,
            code_conf_button_block_in  => code_conf_button_block_in,
            code_conf_button_block_nin => code_conf_button_block_nin,
            icon_in                    => icon_in,
            icon_nin                   => icon_nin,
            id_parent_in               => id_parent_in,
            id_parent_nin              => id_parent_nin,
            flg_available_in           => flg_available_in,
            flg_available_nin          => flg_available_nin,
            rank_in                    => rank_in,
            rank_nin                   => rank_nin,
            action_in                  => action_in,
            action_nin                 => action_nin,
            id_swf_file_in             => id_swf_file_in,
            id_swf_file_nin            => id_swf_file_nin,
            id_sys_shortcut_in         => id_sys_shortcut_in,
            id_sys_shortcut_nin        => id_sys_shortcut_nin,
            id_doc_area_in             => id_doc_area_in,
            id_doc_area_nin            => id_doc_area_nin,
            flg_action_in              => flg_action_in,
            flg_action_nin             => flg_action_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            domain_in                  => domain_in,
            domain_nin                 => domain_nin,
            id_pn_data_block_in        => id_pn_data_block_in,
            id_pn_data_block_nin       => id_pn_data_block_nin,
            id_task_type_in            => id_task_type_in,
            id_task_type_nin           => id_task_type_nin,
            id_type_in                 => id_type_in,
            id_type_nin                => id_type_nin,
            internal_task_type_in      => internal_task_type_in,
            internal_task_type_nin     => internal_task_type_nin,
            id_pn_group_in             => id_pn_group_in,
            id_pn_group_nin            => id_pn_group_nin,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    PROCEDURE upd
    (
        code_conf_button_block_in  IN conf_button_block.code_conf_button_block%TYPE DEFAULT NULL,
        code_conf_button_block_nin IN BOOLEAN := TRUE,
        icon_in                    IN conf_button_block.icon%TYPE DEFAULT NULL,
        icon_nin                   IN BOOLEAN := TRUE,
        id_parent_in               IN conf_button_block.id_parent%TYPE DEFAULT NULL,
        id_parent_nin              IN BOOLEAN := TRUE,
        flg_available_in           IN conf_button_block.flg_available%TYPE DEFAULT NULL,
        flg_available_nin          IN BOOLEAN := TRUE,
        rank_in                    IN conf_button_block.rank%TYPE DEFAULT NULL,
        rank_nin                   IN BOOLEAN := TRUE,
        action_in                  IN conf_button_block.action%TYPE DEFAULT NULL,
        action_nin                 IN BOOLEAN := TRUE,
        id_swf_file_in             IN conf_button_block.id_swf_file%TYPE DEFAULT NULL,
        id_swf_file_nin            IN BOOLEAN := TRUE,
        id_sys_shortcut_in         IN conf_button_block.id_sys_shortcut%TYPE DEFAULT NULL,
        id_sys_shortcut_nin        IN BOOLEAN := TRUE,
        id_doc_area_in             IN conf_button_block.id_doc_area%TYPE DEFAULT NULL,
        id_doc_area_nin            IN BOOLEAN := TRUE,
        flg_action_in              IN conf_button_block.flg_action%TYPE DEFAULT NULL,
        flg_action_nin             IN BOOLEAN := TRUE,
        create_user_in             IN conf_button_block.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN conf_button_block.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN conf_button_block.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN conf_button_block.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN conf_button_block.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN conf_button_block.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        domain_in                  IN conf_button_block.domain%TYPE DEFAULT NULL,
        domain_nin                 IN BOOLEAN := TRUE,
        id_pn_data_block_in        IN conf_button_block.id_pn_data_block%TYPE DEFAULT NULL,
        id_pn_data_block_nin       IN BOOLEAN := TRUE,
        id_task_type_in            IN conf_button_block.id_task_type%TYPE DEFAULT NULL,
        id_task_type_nin           IN BOOLEAN := TRUE,
        id_type_in                 IN conf_button_block.id_type%TYPE DEFAULT NULL,
        id_type_nin                IN BOOLEAN := TRUE,
        internal_task_type_in      IN conf_button_block.internal_task_type%TYPE DEFAULT NULL,
        internal_task_type_nin     IN BOOLEAN := TRUE,
        id_pn_group_in             IN conf_button_block.id_pn_group%TYPE DEFAULT NULL,
        id_pn_group_nin            IN BOOLEAN := TRUE,
        where_in                   VARCHAR2,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   IN OUT table_varchar
    ) IS
        l_sql                      VARCHAR2(32767);
        l_rows_out                 table_varchar;
        l_code_conf_button_block_n NUMBER(1);
        l_icon_n                   NUMBER(1);
        l_id_parent_n              NUMBER(1);
        l_flg_available_n          NUMBER(1);
        l_rank_n                   NUMBER(1);
        l_action_n                 NUMBER(1);
        l_id_swf_file_n            NUMBER(1);
        l_id_sys_shortcut_n        NUMBER(1);
        l_id_doc_area_n            NUMBER(1);
        l_flg_action_n             NUMBER(1);
        l_create_user_n            NUMBER(1);
        l_create_time_n            NUMBER(1);
        l_create_institution_n     NUMBER(1);
        l_update_user_n            NUMBER(1);
        l_update_time_n            NUMBER(1);
        l_update_institution_n     NUMBER(1);
        l_domain_n                 NUMBER(1);
        l_id_pn_data_block_n       NUMBER(1);
        l_id_task_type_n           NUMBER(1);
        l_id_type_n                NUMBER(1);
        l_internal_task_type_n     NUMBER(1);
        l_id_pn_group_n            NUMBER(1);
        id_conf_button_block_in    conf_button_block.id_conf_button_block%TYPE;
    BEGIN
    
        l_code_conf_button_block_n := sys.diutil.bool_to_int(code_conf_button_block_nin);
        l_icon_n                   := sys.diutil.bool_to_int(icon_nin);
        l_id_parent_n              := sys.diutil.bool_to_int(id_parent_nin);
        l_flg_available_n          := sys.diutil.bool_to_int(flg_available_nin);
        l_rank_n                   := sys.diutil.bool_to_int(rank_nin);
        l_action_n                 := sys.diutil.bool_to_int(action_nin);
        l_id_swf_file_n            := sys.diutil.bool_to_int(id_swf_file_nin);
        l_id_sys_shortcut_n        := sys.diutil.bool_to_int(id_sys_shortcut_nin);
        l_id_doc_area_n            := sys.diutil.bool_to_int(id_doc_area_nin);
        l_flg_action_n             := sys.diutil.bool_to_int(flg_action_nin);
        l_create_user_n            := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n            := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n     := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n            := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n            := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n     := sys.diutil.bool_to_int(update_institution_nin);
        l_domain_n                 := sys.diutil.bool_to_int(domain_nin);
        l_id_pn_data_block_n       := sys.diutil.bool_to_int(id_pn_data_block_nin);
        l_id_task_type_n           := sys.diutil.bool_to_int(id_task_type_nin);
        l_id_type_n                := sys.diutil.bool_to_int(id_type_nin);
        l_internal_task_type_n     := sys.diutil.bool_to_int(internal_task_type_nin);
        l_id_pn_group_n            := sys.diutil.bool_to_int(id_pn_group_nin);
    
        l_sql := 'UPDATE CONF_BUTTON_BLOCK SET ' || ' CODE_CONF_BUTTON_BLOCK = decode (' || l_code_conf_button_block_n ||
                 ',0,:code_conf_button_block_in, NVL (:code_conf_button_block_in, CODE_CONF_BUTTON_BLOCK)) ' || ',' ||
                 ' ICON = decode (' || l_icon_n || ',0,:icon_in, NVL (:icon_in, ICON)) ' || ',' ||
                 ' ID_PARENT = decode (' || l_id_parent_n || ',0,:id_parent_in, NVL (:id_parent_in, ID_PARENT)) ' || ',' ||
                 ' FLG_AVAILABLE = decode (' || l_flg_available_n ||
                 ',0,:flg_available_in, NVL (:flg_available_in, FLG_AVAILABLE)) ' || ',' || ' RANK = decode (' ||
                 l_rank_n || ',0,:rank_in, NVL (:rank_in, RANK)) ' || ',' || ' ACTION = decode (' || l_action_n ||
                 ',0,:action_in, NVL (:action_in, ACTION)) ' || ',' || ' ID_SWF_FILE = decode (' || l_id_swf_file_n ||
                 ',0,:id_swf_file_in, NVL (:id_swf_file_in, ID_SWF_FILE)) ' || ',' || ' ID_SYS_SHORTCUT = decode (' ||
                 l_id_sys_shortcut_n || ',0,:id_sys_shortcut_in, NVL (:id_sys_shortcut_in, ID_SYS_SHORTCUT)) ' || ',' ||
                 ' ID_DOC_AREA = decode (' || l_id_doc_area_n ||
                 ',0,:id_doc_area_in, NVL (:id_doc_area_in, ID_DOC_AREA)) ' || ',' || ' FLG_ACTION = decode (' ||
                 l_flg_action_n || ',0,:flg_action_in, NVL (:flg_action_in, FLG_ACTION)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' DOMAIN = decode (' || l_domain_n || ',0,:domain_in, NVL (:domain_in, DOMAIN)) ' || ',' ||
                 ' ID_PN_DATA_BLOCK = decode (' || l_id_pn_data_block_n ||
                 ',0,:id_pn_data_block_in, NVL (:id_pn_data_block_in, ID_PN_DATA_BLOCK)) ' || ',' ||
                 ' ID_TASK_TYPE = decode (' || l_id_task_type_n ||
                 ',0,:id_task_type_in, NVL (:id_task_type_in, ID_TASK_TYPE)) ' || ',' || ' ID_TYPE = decode (' ||
                 l_id_type_n || ',0,:id_type_in, NVL (:id_type_in, ID_TYPE)) ' || ',' ||
                 ' INTERNAL_TASK_TYPE = decode (' || l_internal_task_type_n ||
                 ',0,:internal_task_type_in, NVL (:internal_task_type_in, INTERNAL_TASK_TYPE)) ' || ',' ||
                 ' ID_PN_GROUP = decode (' || l_id_pn_group_n ||
                 ',0,:id_pn_group_in, NVL (:id_pn_group_in, ID_PN_GROUP)) ' || ' where ' || nvl(where_in, '(1=1)') ||
                 ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN code_conf_button_block_in, icon_in, id_parent_in, flg_available_in, rank_in, action_in, id_swf_file_in, id_sys_shortcut_in, id_doc_area_in, flg_action_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, domain_in, id_pn_data_block_in, id_task_type_in, id_type_in, internal_task_type_in, id_pn_group_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'CONF_BUTTON_BLOCK');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    IF l_name = 'CBB_APPF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SWF_FILE',
                                                        value_in           => id_swf_file_in);
                    END IF;
                    IF l_name = 'CBB_CBB_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PARENT',
                                                        value_in           => id_parent_in);
                    END IF;
                    IF l_name = 'CBB_DOA_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_DOC_AREA',
                                                        value_in           => id_doc_area_in);
                    END IF;
                    IF l_name = 'CBB_PNDB_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PN_DATA_BLOCK',
                                                        value_in           => id_pn_data_block_in);
                    END IF;
                    IF l_name = 'CBB_PNG_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PN_GROUP',
                                                        value_in           => id_pn_group_in);
                    END IF;
                    IF l_name = 'CBB_PNTT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_TASK_TYPE',
                                                        value_in           => id_task_type_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        code_conf_button_block_in  IN conf_button_block.code_conf_button_block%TYPE DEFAULT NULL,
        code_conf_button_block_nin IN BOOLEAN := TRUE,
        icon_in                    IN conf_button_block.icon%TYPE DEFAULT NULL,
        icon_nin                   IN BOOLEAN := TRUE,
        id_parent_in               IN conf_button_block.id_parent%TYPE DEFAULT NULL,
        id_parent_nin              IN BOOLEAN := TRUE,
        flg_available_in           IN conf_button_block.flg_available%TYPE DEFAULT NULL,
        flg_available_nin          IN BOOLEAN := TRUE,
        rank_in                    IN conf_button_block.rank%TYPE DEFAULT NULL,
        rank_nin                   IN BOOLEAN := TRUE,
        action_in                  IN conf_button_block.action%TYPE DEFAULT NULL,
        action_nin                 IN BOOLEAN := TRUE,
        id_swf_file_in             IN conf_button_block.id_swf_file%TYPE DEFAULT NULL,
        id_swf_file_nin            IN BOOLEAN := TRUE,
        id_sys_shortcut_in         IN conf_button_block.id_sys_shortcut%TYPE DEFAULT NULL,
        id_sys_shortcut_nin        IN BOOLEAN := TRUE,
        id_doc_area_in             IN conf_button_block.id_doc_area%TYPE DEFAULT NULL,
        id_doc_area_nin            IN BOOLEAN := TRUE,
        flg_action_in              IN conf_button_block.flg_action%TYPE DEFAULT NULL,
        flg_action_nin             IN BOOLEAN := TRUE,
        create_user_in             IN conf_button_block.create_user%TYPE DEFAULT NULL,
        create_user_nin            IN BOOLEAN := TRUE,
        create_time_in             IN conf_button_block.create_time%TYPE DEFAULT NULL,
        create_time_nin            IN BOOLEAN := TRUE,
        create_institution_in      IN conf_button_block.create_institution%TYPE DEFAULT NULL,
        create_institution_nin     IN BOOLEAN := TRUE,
        update_user_in             IN conf_button_block.update_user%TYPE DEFAULT NULL,
        update_user_nin            IN BOOLEAN := TRUE,
        update_time_in             IN conf_button_block.update_time%TYPE DEFAULT NULL,
        update_time_nin            IN BOOLEAN := TRUE,
        update_institution_in      IN conf_button_block.update_institution%TYPE DEFAULT NULL,
        update_institution_nin     IN BOOLEAN := TRUE,
        domain_in                  IN conf_button_block.domain%TYPE DEFAULT NULL,
        domain_nin                 IN BOOLEAN := TRUE,
        id_pn_data_block_in        IN conf_button_block.id_pn_data_block%TYPE DEFAULT NULL,
        id_pn_data_block_nin       IN BOOLEAN := TRUE,
        id_task_type_in            IN conf_button_block.id_task_type%TYPE DEFAULT NULL,
        id_task_type_nin           IN BOOLEAN := TRUE,
        id_type_in                 IN conf_button_block.id_type%TYPE DEFAULT NULL,
        id_type_nin                IN BOOLEAN := TRUE,
        internal_task_type_in      IN conf_button_block.internal_task_type%TYPE DEFAULT NULL,
        internal_task_type_nin     IN BOOLEAN := TRUE,
        id_pn_group_in             IN conf_button_block.id_pn_group%TYPE DEFAULT NULL,
        id_pn_group_nin            IN BOOLEAN := TRUE,
        where_in                   VARCHAR2,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(code_conf_button_block_in  => code_conf_button_block_in,
            code_conf_button_block_nin => code_conf_button_block_nin,
            icon_in                    => icon_in,
            icon_nin                   => icon_nin,
            id_parent_in               => id_parent_in,
            id_parent_nin              => id_parent_nin,
            flg_available_in           => flg_available_in,
            flg_available_nin          => flg_available_nin,
            rank_in                    => rank_in,
            rank_nin                   => rank_nin,
            action_in                  => action_in,
            action_nin                 => action_nin,
            id_swf_file_in             => id_swf_file_in,
            id_swf_file_nin            => id_swf_file_nin,
            id_sys_shortcut_in         => id_sys_shortcut_in,
            id_sys_shortcut_nin        => id_sys_shortcut_nin,
            id_doc_area_in             => id_doc_area_in,
            id_doc_area_nin            => id_doc_area_nin,
            flg_action_in              => flg_action_in,
            flg_action_nin             => flg_action_nin,
            create_user_in             => create_user_in,
            create_user_nin            => create_user_nin,
            create_time_in             => create_time_in,
            create_time_nin            => create_time_nin,
            create_institution_in      => create_institution_in,
            create_institution_nin     => create_institution_nin,
            update_user_in             => update_user_in,
            update_user_nin            => update_user_nin,
            update_time_in             => update_time_in,
            update_time_nin            => update_time_nin,
            update_institution_in      => update_institution_in,
            update_institution_nin     => update_institution_nin,
            domain_in                  => domain_in,
            domain_nin                 => domain_nin,
            id_pn_data_block_in        => id_pn_data_block_in,
            id_pn_data_block_nin       => id_pn_data_block_nin,
            id_task_type_in            => id_task_type_in,
            id_task_type_nin           => id_task_type_nin,
            id_type_in                 => id_type_in,
            id_type_nin                => id_type_nin,
            internal_task_type_in      => internal_task_type_in,
            internal_task_type_nin     => internal_task_type_nin,
            id_pn_group_in             => id_pn_group_in,
            id_pn_group_nin            => id_pn_group_nin,
            where_in                   => where_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN conf_button_block%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_conf_button_block_in   => rec_in.id_conf_button_block,
            code_conf_button_block_in => rec_in.code_conf_button_block,
            icon_in                   => rec_in.icon,
            id_parent_in              => rec_in.id_parent,
            flg_available_in          => rec_in.flg_available,
            rank_in                   => rec_in.rank,
            action_in                 => rec_in.action,
            id_swf_file_in            => rec_in.id_swf_file,
            id_sys_shortcut_in        => rec_in.id_sys_shortcut,
            id_doc_area_in            => rec_in.id_doc_area,
            flg_action_in             => rec_in.flg_action,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            domain_in                 => rec_in.domain,
            id_pn_data_block_in       => rec_in.id_pn_data_block,
            id_task_type_in           => rec_in.id_task_type,
            id_type_in                => rec_in.id_type,
            internal_task_type_in     => rec_in.internal_task_type,
            id_pn_group_in            => rec_in.id_pn_group
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN conf_button_block%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_conf_button_block_in   => rec_in.id_conf_button_block,
            code_conf_button_block_in => rec_in.code_conf_button_block,
            icon_in                   => rec_in.icon,
            id_parent_in              => rec_in.id_parent,
            flg_available_in          => rec_in.flg_available,
            rank_in                   => rec_in.rank,
            action_in                 => rec_in.action,
            id_swf_file_in            => rec_in.id_swf_file,
            id_sys_shortcut_in        => rec_in.id_sys_shortcut,
            id_doc_area_in            => rec_in.id_doc_area,
            flg_action_in             => rec_in.flg_action,
            create_user_in            => rec_in.create_user,
            create_time_in            => rec_in.create_time,
            create_institution_in     => rec_in.create_institution,
            update_user_in            => rec_in.update_user,
            update_time_in            => rec_in.update_time,
            update_institution_in     => rec_in.update_institution,
            domain_in                 => rec_in.domain,
            id_pn_data_block_in       => rec_in.id_pn_data_block,
            id_task_type_in           => rec_in.id_task_type,
            id_type_in                => rec_in.id_type,
            internal_task_type_in     => rec_in.internal_task_type,
            id_pn_group_in            => rec_in.id_pn_group
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_conf_button_block_in   IN conf_button_block.id_conf_button_block%TYPE,
        code_conf_button_block_in IN conf_button_block.code_conf_button_block%TYPE DEFAULT NULL,
        icon_in                   IN conf_button_block.icon%TYPE DEFAULT NULL,
        id_parent_in              IN conf_button_block.id_parent%TYPE DEFAULT NULL,
        flg_available_in          IN conf_button_block.flg_available%TYPE DEFAULT NULL,
        rank_in                   IN conf_button_block.rank%TYPE DEFAULT NULL,
        action_in                 IN conf_button_block.action%TYPE DEFAULT NULL,
        id_swf_file_in            IN conf_button_block.id_swf_file%TYPE DEFAULT NULL,
        id_sys_shortcut_in        IN conf_button_block.id_sys_shortcut%TYPE DEFAULT NULL,
        id_doc_area_in            IN conf_button_block.id_doc_area%TYPE DEFAULT NULL,
        flg_action_in             IN conf_button_block.flg_action%TYPE DEFAULT NULL,
        create_user_in            IN conf_button_block.create_user%TYPE DEFAULT NULL,
        create_time_in            IN conf_button_block.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN conf_button_block.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN conf_button_block.update_user%TYPE DEFAULT NULL,
        update_time_in            IN conf_button_block.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN conf_button_block.update_institution%TYPE DEFAULT NULL,
        domain_in                 IN conf_button_block.domain%TYPE DEFAULT NULL,
        id_pn_data_block_in       IN conf_button_block.id_pn_data_block%TYPE DEFAULT NULL,
        id_task_type_in           IN conf_button_block.id_task_type%TYPE DEFAULT NULL,
        id_type_in                IN conf_button_block.id_type%TYPE DEFAULT NULL,
        internal_task_type_in     IN conf_button_block.internal_task_type%TYPE DEFAULT NULL,
        id_pn_group_in            IN conf_button_block.id_pn_group%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE,
        rows_out                  OUT table_varchar
    ) IS
    BEGIN
        upd(id_conf_button_block_in   => id_conf_button_block_in,
            code_conf_button_block_in => code_conf_button_block_in,
            icon_in                   => icon_in,
            id_parent_in              => id_parent_in,
            flg_available_in          => flg_available_in,
            rank_in                   => rank_in,
            action_in                 => action_in,
            id_swf_file_in            => id_swf_file_in,
            id_sys_shortcut_in        => id_sys_shortcut_in,
            id_doc_area_in            => id_doc_area_in,
            flg_action_in             => flg_action_in,
            create_user_in            => create_user_in,
            create_time_in            => create_time_in,
            create_institution_in     => create_institution_in,
            update_user_in            => update_user_in,
            update_time_in            => update_time_in,
            update_institution_in     => update_institution_in,
            domain_in                 => domain_in,
            id_pn_data_block_in       => id_pn_data_block_in,
            id_task_type_in           => id_task_type_in,
            id_type_in                => id_type_in,
            internal_task_type_in     => internal_task_type_in,
            id_pn_group_in            => id_pn_group_in,
            handle_error_in           => handle_error_in,
            rows_out                  => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_conf_button_block_in   => id_conf_button_block_in,
                code_conf_button_block_in => code_conf_button_block_in,
                icon_in                   => icon_in,
                id_parent_in              => id_parent_in,
                flg_available_in          => flg_available_in,
                rank_in                   => rank_in,
                action_in                 => action_in,
                id_swf_file_in            => id_swf_file_in,
                id_sys_shortcut_in        => id_sys_shortcut_in,
                id_doc_area_in            => id_doc_area_in,
                flg_action_in             => flg_action_in,
                create_user_in            => create_user_in,
                create_time_in            => create_time_in,
                create_institution_in     => create_institution_in,
                update_user_in            => update_user_in,
                update_time_in            => update_time_in,
                update_institution_in     => update_institution_in,
                domain_in                 => domain_in,
                id_pn_data_block_in       => id_pn_data_block_in,
                id_task_type_in           => id_task_type_in,
                id_type_in                => id_type_in,
                internal_task_type_in     => internal_task_type_in,
                id_pn_group_in            => id_pn_group_in,
                handle_error_in           => handle_error_in,
                rows_out                  => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_conf_button_block_in   IN conf_button_block.id_conf_button_block%TYPE,
        code_conf_button_block_in IN conf_button_block.code_conf_button_block%TYPE DEFAULT NULL,
        icon_in                   IN conf_button_block.icon%TYPE DEFAULT NULL,
        id_parent_in              IN conf_button_block.id_parent%TYPE DEFAULT NULL,
        flg_available_in          IN conf_button_block.flg_available%TYPE DEFAULT NULL,
        rank_in                   IN conf_button_block.rank%TYPE DEFAULT NULL,
        action_in                 IN conf_button_block.action%TYPE DEFAULT NULL,
        id_swf_file_in            IN conf_button_block.id_swf_file%TYPE DEFAULT NULL,
        id_sys_shortcut_in        IN conf_button_block.id_sys_shortcut%TYPE DEFAULT NULL,
        id_doc_area_in            IN conf_button_block.id_doc_area%TYPE DEFAULT NULL,
        flg_action_in             IN conf_button_block.flg_action%TYPE DEFAULT NULL,
        create_user_in            IN conf_button_block.create_user%TYPE DEFAULT NULL,
        create_time_in            IN conf_button_block.create_time%TYPE DEFAULT NULL,
        create_institution_in     IN conf_button_block.create_institution%TYPE DEFAULT NULL,
        update_user_in            IN conf_button_block.update_user%TYPE DEFAULT NULL,
        update_time_in            IN conf_button_block.update_time%TYPE DEFAULT NULL,
        update_institution_in     IN conf_button_block.update_institution%TYPE DEFAULT NULL,
        domain_in                 IN conf_button_block.domain%TYPE DEFAULT NULL,
        id_pn_data_block_in       IN conf_button_block.id_pn_data_block%TYPE DEFAULT NULL,
        id_task_type_in           IN conf_button_block.id_task_type%TYPE DEFAULT NULL,
        id_type_in                IN conf_button_block.id_type%TYPE DEFAULT NULL,
        internal_task_type_in     IN conf_button_block.internal_task_type%TYPE DEFAULT NULL,
        id_pn_group_in            IN conf_button_block.id_pn_group%TYPE DEFAULT NULL,
        handle_error_in           IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_conf_button_block_in,
                code_conf_button_block_in,
                icon_in,
                id_parent_in,
                flg_available_in,
                rank_in,
                action_in,
                id_swf_file_in,
                id_sys_shortcut_in,
                id_doc_area_in,
                flg_action_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                domain_in,
                id_pn_data_block_in,
                id_task_type_in,
                id_type_in,
                internal_task_type_in,
                id_pn_group_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN conf_button_block_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_conf_button_block   id_conf_button_block_cc;
        l_code_conf_button_block code_conf_button_block_cc;
        l_icon                   icon_cc;
        l_id_parent              id_parent_cc;
        l_flg_available          flg_available_cc;
        l_rank                   rank_cc;
        l_action                 action_cc;
        l_id_swf_file            id_swf_file_cc;
        l_id_sys_shortcut        id_sys_shortcut_cc;
        l_id_doc_area            id_doc_area_cc;
        l_flg_action             flg_action_cc;
        l_create_user            create_user_cc;
        l_create_time            create_time_cc;
        l_create_institution     create_institution_cc;
        l_update_user            update_user_cc;
        l_update_time            update_time_cc;
        l_update_institution     update_institution_cc;
        l_domain                 domain_cc;
        l_id_pn_data_block       id_pn_data_block_cc;
        l_id_task_type           id_task_type_cc;
        l_id_type                id_type_cc;
        l_internal_task_type     internal_task_type_cc;
        l_id_pn_group            id_pn_group_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_conf_button_block(i) := col_in(i).id_conf_button_block;
            l_code_conf_button_block(i) := col_in(i).code_conf_button_block;
            l_icon(i) := col_in(i).icon;
            l_id_parent(i) := col_in(i).id_parent;
            l_flg_available(i) := col_in(i).flg_available;
            l_rank(i) := col_in(i).rank;
            l_action(i) := col_in(i).action;
            l_id_swf_file(i) := col_in(i).id_swf_file;
            l_id_sys_shortcut(i) := col_in(i).id_sys_shortcut;
            l_id_doc_area(i) := col_in(i).id_doc_area;
            l_flg_action(i) := col_in(i).flg_action;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_domain(i) := col_in(i).domain;
            l_id_pn_data_block(i) := col_in(i).id_pn_data_block;
            l_id_task_type(i) := col_in(i).id_task_type;
            l_id_type(i) := col_in(i).id_type;
            l_internal_task_type(i) := col_in(i).internal_task_type;
            l_id_pn_group(i) := col_in(i).id_pn_group;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE conf_button_block
                   SET code_conf_button_block = nvl(l_code_conf_button_block(i), code_conf_button_block),
                       icon                   = nvl(l_icon(i), icon),
                       id_parent              = nvl(l_id_parent(i), id_parent),
                       flg_available          = nvl(l_flg_available(i), flg_available),
                       rank                   = nvl(l_rank(i), rank),
                       action                 = nvl(l_action(i), action),
                       id_swf_file            = nvl(l_id_swf_file(i), id_swf_file),
                       id_sys_shortcut        = nvl(l_id_sys_shortcut(i), id_sys_shortcut),
                       id_doc_area            = nvl(l_id_doc_area(i), id_doc_area),
                       flg_action             = nvl(l_flg_action(i), flg_action),
                       create_user            = nvl(l_create_user(i), create_user),
                       create_time            = nvl(l_create_time(i), create_time),
                       create_institution     = nvl(l_create_institution(i), create_institution),
                       update_user            = nvl(l_update_user(i), update_user),
                       update_time            = nvl(l_update_time(i), update_time),
                       update_institution     = nvl(l_update_institution(i), update_institution),
                       domain                 = nvl(l_domain(i), domain),
                       id_pn_data_block       = nvl(l_id_pn_data_block(i), id_pn_data_block),
                       id_task_type           = nvl(l_id_task_type(i), id_task_type),
                       id_type                = nvl(l_id_type(i), id_type),
                       internal_task_type     = nvl(l_internal_task_type(i), internal_task_type),
                       id_pn_group            = nvl(l_id_pn_group(i), id_pn_group)
                 WHERE id_conf_button_block = l_id_conf_button_block(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE conf_button_block
                   SET code_conf_button_block = l_code_conf_button_block(i),
                       icon                   = l_icon(i),
                       id_parent              = l_id_parent(i),
                       flg_available          = l_flg_available(i),
                       rank                   = l_rank(i),
                       action                 = l_action(i),
                       id_swf_file            = l_id_swf_file(i),
                       id_sys_shortcut        = l_id_sys_shortcut(i),
                       id_doc_area            = l_id_doc_area(i),
                       flg_action             = l_flg_action(i),
                       create_user            = l_create_user(i),
                       create_time            = l_create_time(i),
                       create_institution     = l_create_institution(i),
                       update_user            = l_update_user(i),
                       update_time            = l_update_time(i),
                       update_institution     = l_update_institution(i),
                       domain                 = l_domain(i),
                       id_pn_data_block       = l_id_pn_data_block(i),
                       id_task_type           = l_id_task_type(i),
                       id_type                = l_id_type(i),
                       internal_task_type     = l_internal_task_type(i),
                       id_pn_group            = l_id_pn_group(i)
                 WHERE id_conf_button_block = l_id_conf_button_block(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN conf_button_block_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE CONF_BUTTON_BLOCK
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE CONF_BUTTON_BLOCK
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE CONF_BUTTON_BLOCK set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE CONF_BUTTON_BLOCK set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_conf_button_block_in IN conf_button_block.id_conf_button_block%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM conf_button_block
         WHERE id_conf_button_block = id_conf_button_block_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_conf_button_block_in IN conf_button_block.id_conf_button_block%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_conf_button_block_in => id_conf_button_block_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_CONF_BUTTON_BLOCK
    PROCEDURE del_id_conf_button_block
    (
        id_conf_button_block_in IN conf_button_block.id_conf_button_block%TYPE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM conf_button_block
         WHERE id_conf_button_block = id_conf_button_block_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_conf_button_block;

    -- Delete all rows for primary key column ID_CONF_BUTTON_BLOCK
    PROCEDURE del_id_conf_button_block
    (
        id_conf_button_block_in IN conf_button_block.id_conf_button_block%TYPE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_conf_button_block(id_conf_button_block_in => id_conf_button_block_in,
                                 handle_error_in         => handle_error_in,
                                 rows_out                => rows_out);
    END del_id_conf_button_block;

    PROCEDURE del_cbb_appf_fk
    (
        id_swf_file_in  IN conf_button_block.id_swf_file%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM conf_button_block
         WHERE id_swf_file = del_cbb_appf_fk.id_swf_file_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_cbb_appf_fk;

    PROCEDURE del_cbb_appf_fk
    (
        id_swf_file_in  IN conf_button_block.id_swf_file%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_cbb_appf_fk(id_swf_file_in => id_swf_file_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_cbb_appf_fk;

    PROCEDURE del_cbb_cbb_fk
    (
        id_parent_in    IN conf_button_block.id_parent%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM conf_button_block
         WHERE id_parent = del_cbb_cbb_fk.id_parent_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_cbb_cbb_fk;

    PROCEDURE del_cbb_cbb_fk
    (
        id_parent_in    IN conf_button_block.id_parent%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_cbb_cbb_fk(id_parent_in => id_parent_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_cbb_cbb_fk;

    PROCEDURE del_cbb_doa_fk
    (
        id_doc_area_in  IN conf_button_block.id_doc_area%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM conf_button_block
         WHERE id_doc_area = del_cbb_doa_fk.id_doc_area_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_cbb_doa_fk;

    PROCEDURE del_cbb_doa_fk
    (
        id_doc_area_in  IN conf_button_block.id_doc_area%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_cbb_doa_fk(id_doc_area_in => id_doc_area_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_cbb_doa_fk;

    PROCEDURE del_cbb_pndb_fk
    (
        id_pn_data_block_in IN conf_button_block.id_pn_data_block%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM conf_button_block
         WHERE id_pn_data_block = del_cbb_pndb_fk.id_pn_data_block_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_cbb_pndb_fk;

    PROCEDURE del_cbb_pndb_fk
    (
        id_pn_data_block_in IN conf_button_block.id_pn_data_block%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_cbb_pndb_fk(id_pn_data_block_in => id_pn_data_block_in,
                        handle_error_in     => handle_error_in,
                        rows_out            => rows_out);
    END del_cbb_pndb_fk;

    PROCEDURE del_cbb_png_fk
    (
        id_pn_group_in  IN conf_button_block.id_pn_group%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM conf_button_block
         WHERE id_pn_group = del_cbb_png_fk.id_pn_group_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_cbb_png_fk;

    PROCEDURE del_cbb_png_fk
    (
        id_pn_group_in  IN conf_button_block.id_pn_group%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_cbb_png_fk(id_pn_group_in => id_pn_group_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_cbb_png_fk;

    PROCEDURE del_cbb_pntt_fk
    (
        id_task_type_in IN conf_button_block.id_task_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM conf_button_block
         WHERE id_task_type = del_cbb_pntt_fk.id_task_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_cbb_pntt_fk;

    PROCEDURE del_cbb_pntt_fk
    (
        id_task_type_in IN conf_button_block.id_task_type%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_cbb_pntt_fk(id_task_type_in => id_task_type_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_cbb_pntt_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM CONF_BUTTON_BLOCK';
        ELSE
            RETURN 'DELETE FROM CONF_BUTTON_BLOCK WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'CONF_BUTTON_BLOCK');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'CONF_BUTTON_BLOCK');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(conf_button_block_inout IN OUT conf_button_block%ROWTYPE) IS
    BEGIN
        conf_button_block_inout.id_conf_button_block   := NULL;
        conf_button_block_inout.code_conf_button_block := NULL;
        conf_button_block_inout.icon                   := NULL;
        conf_button_block_inout.id_parent              := NULL;
        conf_button_block_inout.flg_available          := NULL;
        conf_button_block_inout.rank                   := NULL;
        conf_button_block_inout.action                 := NULL;
        conf_button_block_inout.id_swf_file            := NULL;
        conf_button_block_inout.id_sys_shortcut        := NULL;
        conf_button_block_inout.id_doc_area            := NULL;
        conf_button_block_inout.flg_action             := NULL;
        conf_button_block_inout.create_user            := NULL;
        conf_button_block_inout.create_time            := NULL;
        conf_button_block_inout.create_institution     := NULL;
        conf_button_block_inout.update_user            := NULL;
        conf_button_block_inout.update_time            := NULL;
        conf_button_block_inout.update_institution     := NULL;
        conf_button_block_inout.domain                 := NULL;
        conf_button_block_inout.id_pn_data_block       := NULL;
        conf_button_block_inout.id_task_type           := NULL;
        conf_button_block_inout.id_type                := NULL;
        conf_button_block_inout.internal_task_type     := NULL;
        conf_button_block_inout.id_pn_group            := NULL;
    END initrec;

    FUNCTION initrec RETURN conf_button_block%ROWTYPE IS
        l_conf_button_block conf_button_block%ROWTYPE;
    BEGIN
        RETURN l_conf_button_block;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN conf_button_block_tc IS
        data conf_button_block_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM conf_button_block
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN conf_button_block_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data conf_button_block_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_conf_button_block;
/
