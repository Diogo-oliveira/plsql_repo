/*-- Last Change Revision: $Rev: 2027928 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:43:43 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_analysis_result
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: April 11, 2014 8:43:4
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_analysis_result_in      IN analysis_result.id_analysis_result%TYPE,
        id_analysis_in             IN analysis_result.id_analysis%TYPE DEFAULT NULL,
        id_analysis_req_det_in     IN analysis_result.id_analysis_req_det%TYPE DEFAULT NULL,
        id_professional_in         IN analysis_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in              IN analysis_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                IN analysis_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in          IN analysis_result.id_institution%TYPE DEFAULT NULL,
        id_episode_in              IN analysis_result.id_episode%TYPE DEFAULT NULL,
        loinc_code_in              IN analysis_result.loinc_code%TYPE DEFAULT NULL,
        flg_status_in              IN analysis_result.flg_status%TYPE DEFAULT NULL,
        dt_analysis_result_tstz_in IN analysis_result.dt_analysis_result_tstz%TYPE DEFAULT NULL,
        dt_sample_in               IN analysis_result.dt_sample%TYPE DEFAULT NULL,
        id_visit_in                IN analysis_result.id_visit%TYPE DEFAULT NULL,
        id_exam_cat_in             IN analysis_result.id_exam_cat%TYPE DEFAULT NULL,
        flg_orig_analysis_in       IN analysis_result.flg_orig_analysis%TYPE DEFAULT NULL,
        id_episode_orig_in         IN analysis_result.id_episode_orig%TYPE DEFAULT NULL,
        id_result_status_in        IN analysis_result.id_result_status%TYPE DEFAULT NULL,
        create_user_in             IN analysis_result.create_user%TYPE DEFAULT NULL,
        create_time_in             IN analysis_result.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN analysis_result.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN analysis_result.update_user%TYPE DEFAULT NULL,
        update_time_in             IN analysis_result.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN analysis_result.update_institution%TYPE DEFAULT NULL,
        flg_result_origin_in       IN analysis_result.flg_result_origin%TYPE DEFAULT NULL,
        id_prof_req_in             IN analysis_result.id_prof_req%TYPE DEFAULT NULL,
        notes_in                   IN analysis_result.notes%TYPE DEFAULT NULL,
        id_harvest_in              IN analysis_result.id_harvest%TYPE DEFAULT NULL,
        id_sample_type_in          IN analysis_result.id_sample_type%TYPE DEFAULT NULL,
        result_origin_notes_in     IN analysis_result.result_origin_notes%TYPE DEFAULT NULL,
        flg_mult_result_in         IN analysis_result.flg_mult_result%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO analysis_result
            (id_analysis_result,
             id_analysis,
             id_analysis_req_det,
             id_professional,
             id_patient,
             flg_type,
             id_institution,
             id_episode,
             loinc_code,
             flg_status,
             dt_analysis_result_tstz,
             dt_sample,
             id_visit,
             id_exam_cat,
             flg_orig_analysis,
             id_episode_orig,
             id_result_status,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution,
             flg_result_origin,
             id_prof_req,
             notes,
             id_harvest,
             id_sample_type,
             result_origin_notes,
             flg_mult_result)
        VALUES
            (id_analysis_result_in,
             id_analysis_in,
             id_analysis_req_det_in,
             id_professional_in,
             id_patient_in,
             flg_type_in,
             id_institution_in,
             id_episode_in,
             loinc_code_in,
             flg_status_in,
             dt_analysis_result_tstz_in,
             dt_sample_in,
             id_visit_in,
             id_exam_cat_in,
             flg_orig_analysis_in,
             id_episode_orig_in,
             id_result_status_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in,
             flg_result_origin_in,
             id_prof_req_in,
             notes_in,
             id_harvest_in,
             id_sample_type_in,
             result_origin_notes_in,
             flg_mult_result_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ANALYSIS_RESULT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    IF l_name = 'ARES_ANALY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ANALYSIS',
                                                        value_in           => id_analysis_in);
                    END IF;
                    IF l_name = 'ARES_ARD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ANALYSIS_REQ_DET',
                                                        value_in           => id_analysis_req_det_in);
                    END IF;
                    IF l_name = 'ARES_ASE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ANALYSIS',
                                                        value_in           => id_analysis_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SAMPLE_TYPE',
                                                        value_in           => id_sample_type_in);
                    END IF;
                    IF l_name = 'ARES_ECAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_CAT',
                                                        value_in           => id_exam_cat_in);
                    END IF;
                    IF l_name = 'ARES_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'ARES_EPIS_O_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_ORIG',
                                                        value_in           => id_episode_orig_in);
                    END IF;
                    IF l_name = 'ARES_HAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HARVEST',
                                                        value_in           => id_harvest_in);
                    END IF;
                    IF l_name = 'ARES_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'ARES_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'ARES_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'ARES_RSU_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RESULT_STATUS',
                                                        value_in           => id_result_status_in);
                    END IF;
                    IF l_name = 'ART_VIT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VISIT',
                                                        value_in           => id_visit_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_analysis_result_in      IN analysis_result.id_analysis_result%TYPE,
        id_analysis_in             IN analysis_result.id_analysis%TYPE DEFAULT NULL,
        id_analysis_req_det_in     IN analysis_result.id_analysis_req_det%TYPE DEFAULT NULL,
        id_professional_in         IN analysis_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in              IN analysis_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                IN analysis_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in          IN analysis_result.id_institution%TYPE DEFAULT NULL,
        id_episode_in              IN analysis_result.id_episode%TYPE DEFAULT NULL,
        loinc_code_in              IN analysis_result.loinc_code%TYPE DEFAULT NULL,
        flg_status_in              IN analysis_result.flg_status%TYPE DEFAULT NULL,
        dt_analysis_result_tstz_in IN analysis_result.dt_analysis_result_tstz%TYPE DEFAULT NULL,
        dt_sample_in               IN analysis_result.dt_sample%TYPE DEFAULT NULL,
        id_visit_in                IN analysis_result.id_visit%TYPE DEFAULT NULL,
        id_exam_cat_in             IN analysis_result.id_exam_cat%TYPE DEFAULT NULL,
        flg_orig_analysis_in       IN analysis_result.flg_orig_analysis%TYPE DEFAULT NULL,
        id_episode_orig_in         IN analysis_result.id_episode_orig%TYPE DEFAULT NULL,
        id_result_status_in        IN analysis_result.id_result_status%TYPE DEFAULT NULL,
        create_user_in             IN analysis_result.create_user%TYPE DEFAULT NULL,
        create_time_in             IN analysis_result.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN analysis_result.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN analysis_result.update_user%TYPE DEFAULT NULL,
        update_time_in             IN analysis_result.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN analysis_result.update_institution%TYPE DEFAULT NULL,
        flg_result_origin_in       IN analysis_result.flg_result_origin%TYPE DEFAULT NULL,
        id_prof_req_in             IN analysis_result.id_prof_req%TYPE DEFAULT NULL,
        notes_in                   IN analysis_result.notes%TYPE DEFAULT NULL,
        id_harvest_in              IN analysis_result.id_harvest%TYPE DEFAULT NULL,
        id_sample_type_in          IN analysis_result.id_sample_type%TYPE DEFAULT NULL,
        result_origin_notes_in     IN analysis_result.result_origin_notes%TYPE DEFAULT NULL,
        flg_mult_result_in         IN analysis_result.flg_mult_result%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_analysis_result_in      => id_analysis_result_in,
            id_analysis_in             => id_analysis_in,
            id_analysis_req_det_in     => id_analysis_req_det_in,
            id_professional_in         => id_professional_in,
            id_patient_in              => id_patient_in,
            flg_type_in                => flg_type_in,
            id_institution_in          => id_institution_in,
            id_episode_in              => id_episode_in,
            loinc_code_in              => loinc_code_in,
            flg_status_in              => flg_status_in,
            dt_analysis_result_tstz_in => dt_analysis_result_tstz_in,
            dt_sample_in               => dt_sample_in,
            id_visit_in                => id_visit_in,
            id_exam_cat_in             => id_exam_cat_in,
            flg_orig_analysis_in       => flg_orig_analysis_in,
            id_episode_orig_in         => id_episode_orig_in,
            id_result_status_in        => id_result_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_result_origin_in       => flg_result_origin_in,
            id_prof_req_in             => id_prof_req_in,
            notes_in                   => notes_in,
            id_harvest_in              => id_harvest_in,
            id_sample_type_in          => id_sample_type_in,
            result_origin_notes_in     => result_origin_notes_in,
            flg_mult_result_in         => flg_mult_result_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    /*
    START Special logic for handling LOB columns....
    */

    PROCEDURE n_ins_clobs_in_chunks
    (
        id_analysis_result_in      IN analysis_result.id_analysis_result%TYPE,
        id_analysis_in             IN analysis_result.id_analysis%TYPE DEFAULT NULL,
        id_analysis_req_det_in     IN analysis_result.id_analysis_req_det%TYPE DEFAULT NULL,
        id_professional_in         IN analysis_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in              IN analysis_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                IN analysis_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in          IN analysis_result.id_institution%TYPE DEFAULT NULL,
        id_episode_in              IN analysis_result.id_episode%TYPE DEFAULT NULL,
        loinc_code_in              IN analysis_result.loinc_code%TYPE DEFAULT NULL,
        flg_status_in              IN analysis_result.flg_status%TYPE DEFAULT NULL,
        dt_analysis_result_tstz_in IN analysis_result.dt_analysis_result_tstz%TYPE DEFAULT NULL,
        dt_sample_in               IN analysis_result.dt_sample%TYPE DEFAULT NULL,
        id_visit_in                IN analysis_result.id_visit%TYPE DEFAULT NULL,
        id_exam_cat_in             IN analysis_result.id_exam_cat%TYPE DEFAULT NULL,
        flg_orig_analysis_in       IN analysis_result.flg_orig_analysis%TYPE DEFAULT NULL,
        id_episode_orig_in         IN analysis_result.id_episode_orig%TYPE DEFAULT NULL,
        id_result_status_in        IN analysis_result.id_result_status%TYPE DEFAULT NULL,
        create_user_in             IN analysis_result.create_user%TYPE DEFAULT NULL,
        create_time_in             IN analysis_result.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN analysis_result.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN analysis_result.update_user%TYPE DEFAULT NULL,
        update_time_in             IN analysis_result.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN analysis_result.update_institution%TYPE DEFAULT NULL,
        flg_result_origin_in       IN analysis_result.flg_result_origin%TYPE DEFAULT NULL,
        id_prof_req_in             IN analysis_result.id_prof_req%TYPE DEFAULT NULL,
        id_harvest_in              IN analysis_result.id_harvest%TYPE DEFAULT NULL,
        id_sample_type_in          IN analysis_result.id_sample_type%TYPE DEFAULT NULL,
        result_origin_notes_in     IN analysis_result.result_origin_notes%TYPE DEFAULT NULL,
        flg_mult_result_in         IN analysis_result.flg_mult_result%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        clob_columns_in            IN varchar2_t,
        clob_pieces_in             IN varchar2_t
    ) IS
        l_notes        CLOB;
        i              PLS_INTEGER;
        current_column VARCHAR2(30) := '';
    BEGIN
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.first .. clob_columns_in.last
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'notes_in' THEN
                            IF l_notes IS NULL
                            THEN
                                dbms_lob.createtemporary(l_notes, TRUE, dbms_lob.call);
                            END IF;
                    END CASE;
                END IF;
            
                CASE current_column
                    WHEN 'notes_in' THEN
                        dbms_lob.writeappend(l_notes, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE;
            END IF;
        END LOOP;
    
        ins(id_analysis_result_in      => id_analysis_result_in,
            id_analysis_in             => id_analysis_in,
            id_analysis_req_det_in     => id_analysis_req_det_in,
            id_professional_in         => id_professional_in,
            id_patient_in              => id_patient_in,
            flg_type_in                => flg_type_in,
            id_institution_in          => id_institution_in,
            id_episode_in              => id_episode_in,
            loinc_code_in              => loinc_code_in,
            flg_status_in              => flg_status_in,
            dt_analysis_result_tstz_in => dt_analysis_result_tstz_in,
            dt_sample_in               => dt_sample_in,
            id_visit_in                => id_visit_in,
            id_exam_cat_in             => id_exam_cat_in,
            flg_orig_analysis_in       => flg_orig_analysis_in,
            id_episode_orig_in         => id_episode_orig_in,
            id_result_status_in        => id_result_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_result_origin_in       => flg_result_origin_in,
            id_prof_req_in             => id_prof_req_in,
            notes_in                   => l_notes,
            id_harvest_in              => id_harvest_in,
            id_sample_type_in          => id_sample_type_in,
            result_origin_notes_in     => result_origin_notes_in,
            flg_mult_result_in         => flg_mult_result_in,
            handle_error_in            => handle_error_in);
    
    END n_ins_clobs_in_chunks;

    PROCEDURE n_upd_clobs_in_chunks
    (
        id_analysis_result_in      IN analysis_result.id_analysis_result%TYPE,
        id_analysis_in             IN analysis_result.id_analysis%TYPE DEFAULT NULL,
        id_analysis_req_det_in     IN analysis_result.id_analysis_req_det%TYPE DEFAULT NULL,
        id_professional_in         IN analysis_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in              IN analysis_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                IN analysis_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in          IN analysis_result.id_institution%TYPE DEFAULT NULL,
        id_episode_in              IN analysis_result.id_episode%TYPE DEFAULT NULL,
        loinc_code_in              IN analysis_result.loinc_code%TYPE DEFAULT NULL,
        flg_status_in              IN analysis_result.flg_status%TYPE DEFAULT NULL,
        dt_analysis_result_tstz_in IN analysis_result.dt_analysis_result_tstz%TYPE DEFAULT NULL,
        dt_sample_in               IN analysis_result.dt_sample%TYPE DEFAULT NULL,
        id_visit_in                IN analysis_result.id_visit%TYPE DEFAULT NULL,
        id_exam_cat_in             IN analysis_result.id_exam_cat%TYPE DEFAULT NULL,
        flg_orig_analysis_in       IN analysis_result.flg_orig_analysis%TYPE DEFAULT NULL,
        id_episode_orig_in         IN analysis_result.id_episode_orig%TYPE DEFAULT NULL,
        id_result_status_in        IN analysis_result.id_result_status%TYPE DEFAULT NULL,
        create_user_in             IN analysis_result.create_user%TYPE DEFAULT NULL,
        create_time_in             IN analysis_result.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN analysis_result.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN analysis_result.update_user%TYPE DEFAULT NULL,
        update_time_in             IN analysis_result.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN analysis_result.update_institution%TYPE DEFAULT NULL,
        flg_result_origin_in       IN analysis_result.flg_result_origin%TYPE DEFAULT NULL,
        id_prof_req_in             IN analysis_result.id_prof_req%TYPE DEFAULT NULL,
        id_harvest_in              IN analysis_result.id_harvest%TYPE DEFAULT NULL,
        id_sample_type_in          IN analysis_result.id_sample_type%TYPE DEFAULT NULL,
        result_origin_notes_in     IN analysis_result.result_origin_notes%TYPE DEFAULT NULL,
        flg_mult_result_in         IN analysis_result.flg_mult_result%TYPE DEFAULT NULL,
        ignore_if_null_in          IN BOOLEAN := TRUE,
        handle_error_in            IN BOOLEAN := TRUE,
        clob_columns_in            IN varchar2_t,
        clob_pieces_in             IN varchar2_t
    ) IS
        l_notes        CLOB;
        i              PLS_INTEGER;
        current_column VARCHAR2(30) := '';
        l_rows         PLS_INTEGER;
    BEGIN
    
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.first .. clob_columns_in.last
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'notes_in' THEN
                            IF l_notes IS NULL
                            THEN
                                dbms_lob.createtemporary(l_notes, TRUE, dbms_lob.call);
                            END IF;
                    END CASE;
                END IF;
            
                CASE current_column
                    WHEN 'notes_in' THEN
                        dbms_lob.writeappend(l_notes, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE;
            END IF;
        END LOOP;
    
        upd(id_analysis_result_in      => id_analysis_result_in,
            id_analysis_in             => id_analysis_in,
            id_analysis_req_det_in     => id_analysis_req_det_in,
            id_professional_in         => id_professional_in,
            id_patient_in              => id_patient_in,
            flg_type_in                => flg_type_in,
            id_institution_in          => id_institution_in,
            id_episode_in              => id_episode_in,
            loinc_code_in              => loinc_code_in,
            flg_status_in              => flg_status_in,
            dt_analysis_result_tstz_in => dt_analysis_result_tstz_in,
            dt_sample_in               => dt_sample_in,
            id_visit_in                => id_visit_in,
            id_exam_cat_in             => id_exam_cat_in,
            flg_orig_analysis_in       => flg_orig_analysis_in,
            id_episode_orig_in         => id_episode_orig_in,
            id_result_status_in        => id_result_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_result_origin_in       => flg_result_origin_in,
            id_prof_req_in             => id_prof_req_in,
            notes_in                   => l_notes,
            id_harvest_in              => id_harvest_in,
            id_sample_type_in          => id_sample_type_in,
            result_origin_notes_in     => result_origin_notes_in,
            flg_mult_result_in         => flg_mult_result_in,
            handle_error_in            => handle_error_in);
    END n_upd_clobs_in_chunks;

    PROCEDURE n_upd_ins_clobs_in_chunks
    (
        id_analysis_result_in      IN analysis_result.id_analysis_result%TYPE,
        id_analysis_in             IN analysis_result.id_analysis%TYPE DEFAULT NULL,
        id_analysis_req_det_in     IN analysis_result.id_analysis_req_det%TYPE DEFAULT NULL,
        id_professional_in         IN analysis_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in              IN analysis_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                IN analysis_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in          IN analysis_result.id_institution%TYPE DEFAULT NULL,
        id_episode_in              IN analysis_result.id_episode%TYPE DEFAULT NULL,
        loinc_code_in              IN analysis_result.loinc_code%TYPE DEFAULT NULL,
        flg_status_in              IN analysis_result.flg_status%TYPE DEFAULT NULL,
        dt_analysis_result_tstz_in IN analysis_result.dt_analysis_result_tstz%TYPE DEFAULT NULL,
        dt_sample_in               IN analysis_result.dt_sample%TYPE DEFAULT NULL,
        id_visit_in                IN analysis_result.id_visit%TYPE DEFAULT NULL,
        id_exam_cat_in             IN analysis_result.id_exam_cat%TYPE DEFAULT NULL,
        flg_orig_analysis_in       IN analysis_result.flg_orig_analysis%TYPE DEFAULT NULL,
        id_episode_orig_in         IN analysis_result.id_episode_orig%TYPE DEFAULT NULL,
        id_result_status_in        IN analysis_result.id_result_status%TYPE DEFAULT NULL,
        create_user_in             IN analysis_result.create_user%TYPE DEFAULT NULL,
        create_time_in             IN analysis_result.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN analysis_result.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN analysis_result.update_user%TYPE DEFAULT NULL,
        update_time_in             IN analysis_result.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN analysis_result.update_institution%TYPE DEFAULT NULL,
        flg_result_origin_in       IN analysis_result.flg_result_origin%TYPE DEFAULT NULL,
        id_prof_req_in             IN analysis_result.id_prof_req%TYPE DEFAULT NULL,
        id_harvest_in              IN analysis_result.id_harvest%TYPE DEFAULT NULL,
        id_sample_type_in          IN analysis_result.id_sample_type%TYPE DEFAULT NULL,
        result_origin_notes_in     IN analysis_result.result_origin_notes%TYPE DEFAULT NULL,
        flg_mult_result_in         IN analysis_result.flg_mult_result%TYPE DEFAULT NULL,
        ignore_if_null_in          IN BOOLEAN DEFAULT TRUE,
        handle_error_in            IN BOOLEAN DEFAULT TRUE,
        clob_columns_in            IN varchar2_t,
        clob_pieces_in             IN varchar2_t
    ) IS
    BEGIN
        n_upd_clobs_in_chunks(id_analysis_result_in      => id_analysis_result_in,
                              id_analysis_in             => id_analysis_in,
                              id_analysis_req_det_in     => id_analysis_req_det_in,
                              id_professional_in         => id_professional_in,
                              id_patient_in              => id_patient_in,
                              flg_type_in                => flg_type_in,
                              id_institution_in          => id_institution_in,
                              id_episode_in              => id_episode_in,
                              loinc_code_in              => loinc_code_in,
                              flg_status_in              => flg_status_in,
                              dt_analysis_result_tstz_in => dt_analysis_result_tstz_in,
                              dt_sample_in               => dt_sample_in,
                              id_visit_in                => id_visit_in,
                              id_exam_cat_in             => id_exam_cat_in,
                              flg_orig_analysis_in       => flg_orig_analysis_in,
                              id_episode_orig_in         => id_episode_orig_in,
                              id_result_status_in        => id_result_status_in,
                              create_user_in             => create_user_in,
                              create_time_in             => create_time_in,
                              create_institution_in      => create_institution_in,
                              update_user_in             => update_user_in,
                              update_time_in             => update_time_in,
                              update_institution_in      => update_institution_in,
                              flg_result_origin_in       => flg_result_origin_in,
                              id_prof_req_in             => id_prof_req_in,
                              id_harvest_in              => id_harvest_in,
                              id_sample_type_in          => id_sample_type_in,
                              result_origin_notes_in     => result_origin_notes_in,
                              flg_mult_result_in         => flg_mult_result_in,
                              clob_columns_in            => clob_columns_in,
                              clob_pieces_in             => clob_pieces_in,
                              ignore_if_null_in          => ignore_if_null_in,
                              handle_error_in            => handle_error_in);
    
        IF SQL%ROWCOUNT = 0
        THEN
            n_ins_clobs_in_chunks(id_analysis_result_in      => id_analysis_result_in,
                                  id_analysis_in             => id_analysis_in,
                                  id_analysis_req_det_in     => id_analysis_req_det_in,
                                  id_professional_in         => id_professional_in,
                                  id_patient_in              => id_patient_in,
                                  flg_type_in                => flg_type_in,
                                  id_institution_in          => id_institution_in,
                                  id_episode_in              => id_episode_in,
                                  loinc_code_in              => loinc_code_in,
                                  flg_status_in              => flg_status_in,
                                  dt_analysis_result_tstz_in => dt_analysis_result_tstz_in,
                                  dt_sample_in               => dt_sample_in,
                                  id_visit_in                => id_visit_in,
                                  id_exam_cat_in             => id_exam_cat_in,
                                  flg_orig_analysis_in       => flg_orig_analysis_in,
                                  id_episode_orig_in         => id_episode_orig_in,
                                  id_result_status_in        => id_result_status_in,
                                  create_user_in             => create_user_in,
                                  create_time_in             => create_time_in,
                                  create_institution_in      => create_institution_in,
                                  update_user_in             => update_user_in,
                                  update_time_in             => update_time_in,
                                  update_institution_in      => update_institution_in,
                                  flg_result_origin_in       => flg_result_origin_in,
                                  id_prof_req_in             => id_prof_req_in,
                                  id_harvest_in              => id_harvest_in,
                                  id_sample_type_in          => id_sample_type_in,
                                  result_origin_notes_in     => result_origin_notes_in,
                                  flg_mult_result_in         => flg_mult_result_in,
                                  clob_columns_in            => clob_columns_in,
                                  clob_pieces_in             => clob_pieces_in,
                                  handle_error_in            => handle_error_in);
        END IF;
    END n_upd_ins_clobs_in_chunks;

    /*
    END Special logic for handling LOB columns.
    */

    PROCEDURE ins
    (
        rec_in          IN analysis_result%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec analysis_result%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_analysis_result := next_key(sequence_in);
        END IF;
        ins(id_analysis_result_in      => l_rec.id_analysis_result,
            id_analysis_in             => l_rec.id_analysis,
            id_analysis_req_det_in     => l_rec.id_analysis_req_det,
            id_professional_in         => l_rec.id_professional,
            id_patient_in              => l_rec.id_patient,
            flg_type_in                => l_rec.flg_type,
            id_institution_in          => l_rec.id_institution,
            id_episode_in              => l_rec.id_episode,
            loinc_code_in              => l_rec.loinc_code,
            flg_status_in              => l_rec.flg_status,
            dt_analysis_result_tstz_in => l_rec.dt_analysis_result_tstz,
            dt_sample_in               => l_rec.dt_sample,
            id_visit_in                => l_rec.id_visit,
            id_exam_cat_in             => l_rec.id_exam_cat,
            flg_orig_analysis_in       => l_rec.flg_orig_analysis,
            id_episode_orig_in         => l_rec.id_episode_orig,
            id_result_status_in        => l_rec.id_result_status,
            create_user_in             => l_rec.create_user,
            create_time_in             => l_rec.create_time,
            create_institution_in      => l_rec.create_institution,
            update_user_in             => l_rec.update_user,
            update_time_in             => l_rec.update_time,
            update_institution_in      => l_rec.update_institution,
            flg_result_origin_in       => l_rec.flg_result_origin,
            id_prof_req_in             => l_rec.id_prof_req,
            notes_in                   => l_rec.notes,
            id_harvest_in              => l_rec.id_harvest,
            id_sample_type_in          => l_rec.id_sample_type,
            result_origin_notes_in     => l_rec.result_origin_notes,
            flg_mult_result_in         => l_rec.flg_mult_result,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN analysis_result%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN analysis_result.id_analysis_result%TYPE
    
     IS
        retval analysis_result.id_analysis_result%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_analysis_result.nextval
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_ANALYSIS_RESULT'));
    END next_key;

    PROCEDURE ins
    (
        id_analysis_in             IN analysis_result.id_analysis%TYPE DEFAULT NULL,
        id_analysis_req_det_in     IN analysis_result.id_analysis_req_det%TYPE DEFAULT NULL,
        id_professional_in         IN analysis_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in              IN analysis_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                IN analysis_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in          IN analysis_result.id_institution%TYPE DEFAULT NULL,
        id_episode_in              IN analysis_result.id_episode%TYPE DEFAULT NULL,
        loinc_code_in              IN analysis_result.loinc_code%TYPE DEFAULT NULL,
        flg_status_in              IN analysis_result.flg_status%TYPE DEFAULT NULL,
        dt_analysis_result_tstz_in IN analysis_result.dt_analysis_result_tstz%TYPE DEFAULT NULL,
        dt_sample_in               IN analysis_result.dt_sample%TYPE DEFAULT NULL,
        id_visit_in                IN analysis_result.id_visit%TYPE DEFAULT NULL,
        id_exam_cat_in             IN analysis_result.id_exam_cat%TYPE DEFAULT NULL,
        flg_orig_analysis_in       IN analysis_result.flg_orig_analysis%TYPE DEFAULT NULL,
        id_episode_orig_in         IN analysis_result.id_episode_orig%TYPE DEFAULT NULL,
        id_result_status_in        IN analysis_result.id_result_status%TYPE DEFAULT NULL,
        create_user_in             IN analysis_result.create_user%TYPE DEFAULT NULL,
        create_time_in             IN analysis_result.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN analysis_result.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN analysis_result.update_user%TYPE DEFAULT NULL,
        update_time_in             IN analysis_result.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN analysis_result.update_institution%TYPE DEFAULT NULL,
        flg_result_origin_in       IN analysis_result.flg_result_origin%TYPE DEFAULT NULL,
        id_prof_req_in             IN analysis_result.id_prof_req%TYPE DEFAULT NULL,
        notes_in                   IN analysis_result.notes%TYPE DEFAULT NULL,
        id_harvest_in              IN analysis_result.id_harvest%TYPE DEFAULT NULL,
        id_sample_type_in          IN analysis_result.id_sample_type%TYPE DEFAULT NULL,
        result_origin_notes_in     IN analysis_result.result_origin_notes%TYPE DEFAULT NULL,
        flg_mult_result_in         IN analysis_result.flg_mult_result%TYPE DEFAULT NULL,
        id_analysis_result_out     IN OUT analysis_result.id_analysis_result%TYPE,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
        l_pky analysis_result.id_analysis_result%TYPE := next_key;
    BEGIN
        ins(id_analysis_result_in      => l_pky,
            id_analysis_in             => id_analysis_in,
            id_analysis_req_det_in     => id_analysis_req_det_in,
            id_professional_in         => id_professional_in,
            id_patient_in              => id_patient_in,
            flg_type_in                => flg_type_in,
            id_institution_in          => id_institution_in,
            id_episode_in              => id_episode_in,
            loinc_code_in              => loinc_code_in,
            flg_status_in              => flg_status_in,
            dt_analysis_result_tstz_in => dt_analysis_result_tstz_in,
            dt_sample_in               => dt_sample_in,
            id_visit_in                => id_visit_in,
            id_exam_cat_in             => id_exam_cat_in,
            flg_orig_analysis_in       => flg_orig_analysis_in,
            id_episode_orig_in         => id_episode_orig_in,
            id_result_status_in        => id_result_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_result_origin_in       => flg_result_origin_in,
            id_prof_req_in             => id_prof_req_in,
            notes_in                   => notes_in,
            id_harvest_in              => id_harvest_in,
            id_sample_type_in          => id_sample_type_in,
            result_origin_notes_in     => result_origin_notes_in,
            flg_mult_result_in         => flg_mult_result_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        id_analysis_result_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_analysis_in             IN analysis_result.id_analysis%TYPE DEFAULT NULL,
        id_analysis_req_det_in     IN analysis_result.id_analysis_req_det%TYPE DEFAULT NULL,
        id_professional_in         IN analysis_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in              IN analysis_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                IN analysis_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in          IN analysis_result.id_institution%TYPE DEFAULT NULL,
        id_episode_in              IN analysis_result.id_episode%TYPE DEFAULT NULL,
        loinc_code_in              IN analysis_result.loinc_code%TYPE DEFAULT NULL,
        flg_status_in              IN analysis_result.flg_status%TYPE DEFAULT NULL,
        dt_analysis_result_tstz_in IN analysis_result.dt_analysis_result_tstz%TYPE DEFAULT NULL,
        dt_sample_in               IN analysis_result.dt_sample%TYPE DEFAULT NULL,
        id_visit_in                IN analysis_result.id_visit%TYPE DEFAULT NULL,
        id_exam_cat_in             IN analysis_result.id_exam_cat%TYPE DEFAULT NULL,
        flg_orig_analysis_in       IN analysis_result.flg_orig_analysis%TYPE DEFAULT NULL,
        id_episode_orig_in         IN analysis_result.id_episode_orig%TYPE DEFAULT NULL,
        id_result_status_in        IN analysis_result.id_result_status%TYPE DEFAULT NULL,
        create_user_in             IN analysis_result.create_user%TYPE DEFAULT NULL,
        create_time_in             IN analysis_result.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN analysis_result.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN analysis_result.update_user%TYPE DEFAULT NULL,
        update_time_in             IN analysis_result.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN analysis_result.update_institution%TYPE DEFAULT NULL,
        flg_result_origin_in       IN analysis_result.flg_result_origin%TYPE DEFAULT NULL,
        id_prof_req_in             IN analysis_result.id_prof_req%TYPE DEFAULT NULL,
        notes_in                   IN analysis_result.notes%TYPE DEFAULT NULL,
        id_harvest_in              IN analysis_result.id_harvest%TYPE DEFAULT NULL,
        id_sample_type_in          IN analysis_result.id_sample_type%TYPE DEFAULT NULL,
        result_origin_notes_in     IN analysis_result.result_origin_notes%TYPE DEFAULT NULL,
        flg_mult_result_in         IN analysis_result.flg_mult_result%TYPE DEFAULT NULL,
        id_analysis_result_out     IN OUT analysis_result.id_analysis_result%TYPE,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_analysis_in             => id_analysis_in,
            id_analysis_req_det_in     => id_analysis_req_det_in,
            id_professional_in         => id_professional_in,
            id_patient_in              => id_patient_in,
            flg_type_in                => flg_type_in,
            id_institution_in          => id_institution_in,
            id_episode_in              => id_episode_in,
            loinc_code_in              => loinc_code_in,
            flg_status_in              => flg_status_in,
            dt_analysis_result_tstz_in => dt_analysis_result_tstz_in,
            dt_sample_in               => dt_sample_in,
            id_visit_in                => id_visit_in,
            id_exam_cat_in             => id_exam_cat_in,
            flg_orig_analysis_in       => flg_orig_analysis_in,
            id_episode_orig_in         => id_episode_orig_in,
            id_result_status_in        => id_result_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_result_origin_in       => flg_result_origin_in,
            id_prof_req_in             => id_prof_req_in,
            notes_in                   => notes_in,
            id_harvest_in              => id_harvest_in,
            id_sample_type_in          => id_sample_type_in,
            result_origin_notes_in     => result_origin_notes_in,
            flg_mult_result_in         => flg_mult_result_in,
            id_analysis_result_out     => id_analysis_result_out,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    FUNCTION ins
    (
        id_analysis_in             IN analysis_result.id_analysis%TYPE DEFAULT NULL,
        id_analysis_req_det_in     IN analysis_result.id_analysis_req_det%TYPE DEFAULT NULL,
        id_professional_in         IN analysis_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in              IN analysis_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                IN analysis_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in          IN analysis_result.id_institution%TYPE DEFAULT NULL,
        id_episode_in              IN analysis_result.id_episode%TYPE DEFAULT NULL,
        loinc_code_in              IN analysis_result.loinc_code%TYPE DEFAULT NULL,
        flg_status_in              IN analysis_result.flg_status%TYPE DEFAULT NULL,
        dt_analysis_result_tstz_in IN analysis_result.dt_analysis_result_tstz%TYPE DEFAULT NULL,
        dt_sample_in               IN analysis_result.dt_sample%TYPE DEFAULT NULL,
        id_visit_in                IN analysis_result.id_visit%TYPE DEFAULT NULL,
        id_exam_cat_in             IN analysis_result.id_exam_cat%TYPE DEFAULT NULL,
        flg_orig_analysis_in       IN analysis_result.flg_orig_analysis%TYPE DEFAULT NULL,
        id_episode_orig_in         IN analysis_result.id_episode_orig%TYPE DEFAULT NULL,
        id_result_status_in        IN analysis_result.id_result_status%TYPE DEFAULT NULL,
        create_user_in             IN analysis_result.create_user%TYPE DEFAULT NULL,
        create_time_in             IN analysis_result.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN analysis_result.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN analysis_result.update_user%TYPE DEFAULT NULL,
        update_time_in             IN analysis_result.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN analysis_result.update_institution%TYPE DEFAULT NULL,
        flg_result_origin_in       IN analysis_result.flg_result_origin%TYPE DEFAULT NULL,
        id_prof_req_in             IN analysis_result.id_prof_req%TYPE DEFAULT NULL,
        notes_in                   IN analysis_result.notes%TYPE DEFAULT NULL,
        id_harvest_in              IN analysis_result.id_harvest%TYPE DEFAULT NULL,
        id_sample_type_in          IN analysis_result.id_sample_type%TYPE DEFAULT NULL,
        result_origin_notes_in     IN analysis_result.result_origin_notes%TYPE DEFAULT NULL,
        flg_mult_result_in         IN analysis_result.flg_mult_result%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) RETURN analysis_result.id_analysis_result%TYPE IS
        l_pky analysis_result.id_analysis_result%TYPE := next_key;
    BEGIN
        ins(id_analysis_result_in      => l_pky,
            id_analysis_in             => id_analysis_in,
            id_analysis_req_det_in     => id_analysis_req_det_in,
            id_professional_in         => id_professional_in,
            id_patient_in              => id_patient_in,
            flg_type_in                => flg_type_in,
            id_institution_in          => id_institution_in,
            id_episode_in              => id_episode_in,
            loinc_code_in              => loinc_code_in,
            flg_status_in              => flg_status_in,
            dt_analysis_result_tstz_in => dt_analysis_result_tstz_in,
            dt_sample_in               => dt_sample_in,
            id_visit_in                => id_visit_in,
            id_exam_cat_in             => id_exam_cat_in,
            flg_orig_analysis_in       => flg_orig_analysis_in,
            id_episode_orig_in         => id_episode_orig_in,
            id_result_status_in        => id_result_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_result_origin_in       => flg_result_origin_in,
            id_prof_req_in             => id_prof_req_in,
            notes_in                   => notes_in,
            id_harvest_in              => id_harvest_in,
            id_sample_type_in          => id_sample_type_in,
            result_origin_notes_in     => result_origin_notes_in,
            flg_mult_result_in         => flg_mult_result_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_analysis_in             IN analysis_result.id_analysis%TYPE DEFAULT NULL,
        id_analysis_req_det_in     IN analysis_result.id_analysis_req_det%TYPE DEFAULT NULL,
        id_professional_in         IN analysis_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in              IN analysis_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                IN analysis_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in          IN analysis_result.id_institution%TYPE DEFAULT NULL,
        id_episode_in              IN analysis_result.id_episode%TYPE DEFAULT NULL,
        loinc_code_in              IN analysis_result.loinc_code%TYPE DEFAULT NULL,
        flg_status_in              IN analysis_result.flg_status%TYPE DEFAULT NULL,
        dt_analysis_result_tstz_in IN analysis_result.dt_analysis_result_tstz%TYPE DEFAULT NULL,
        dt_sample_in               IN analysis_result.dt_sample%TYPE DEFAULT NULL,
        id_visit_in                IN analysis_result.id_visit%TYPE DEFAULT NULL,
        id_exam_cat_in             IN analysis_result.id_exam_cat%TYPE DEFAULT NULL,
        flg_orig_analysis_in       IN analysis_result.flg_orig_analysis%TYPE DEFAULT NULL,
        id_episode_orig_in         IN analysis_result.id_episode_orig%TYPE DEFAULT NULL,
        id_result_status_in        IN analysis_result.id_result_status%TYPE DEFAULT NULL,
        create_user_in             IN analysis_result.create_user%TYPE DEFAULT NULL,
        create_time_in             IN analysis_result.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN analysis_result.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN analysis_result.update_user%TYPE DEFAULT NULL,
        update_time_in             IN analysis_result.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN analysis_result.update_institution%TYPE DEFAULT NULL,
        flg_result_origin_in       IN analysis_result.flg_result_origin%TYPE DEFAULT NULL,
        id_prof_req_in             IN analysis_result.id_prof_req%TYPE DEFAULT NULL,
        notes_in                   IN analysis_result.notes%TYPE DEFAULT NULL,
        id_harvest_in              IN analysis_result.id_harvest%TYPE DEFAULT NULL,
        id_sample_type_in          IN analysis_result.id_sample_type%TYPE DEFAULT NULL,
        result_origin_notes_in     IN analysis_result.result_origin_notes%TYPE DEFAULT NULL,
        flg_mult_result_in         IN analysis_result.flg_mult_result%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) RETURN analysis_result.id_analysis_result%TYPE IS
        l_pky    analysis_result.id_analysis_result%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_analysis_result_in      => l_pky,
            id_analysis_in             => id_analysis_in,
            id_analysis_req_det_in     => id_analysis_req_det_in,
            id_professional_in         => id_professional_in,
            id_patient_in              => id_patient_in,
            flg_type_in                => flg_type_in,
            id_institution_in          => id_institution_in,
            id_episode_in              => id_episode_in,
            loinc_code_in              => loinc_code_in,
            flg_status_in              => flg_status_in,
            dt_analysis_result_tstz_in => dt_analysis_result_tstz_in,
            dt_sample_in               => dt_sample_in,
            id_visit_in                => id_visit_in,
            id_exam_cat_in             => id_exam_cat_in,
            flg_orig_analysis_in       => flg_orig_analysis_in,
            id_episode_orig_in         => id_episode_orig_in,
            id_result_status_in        => id_result_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_result_origin_in       => flg_result_origin_in,
            id_prof_req_in             => id_prof_req_in,
            notes_in                   => notes_in,
            id_harvest_in              => id_harvest_in,
            id_sample_type_in          => id_sample_type_in,
            result_origin_notes_in     => result_origin_notes_in,
            flg_mult_result_in         => flg_mult_result_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_analysis_in             IN analysis_result.id_analysis%TYPE DEFAULT NULL,
        id_analysis_req_det_in     IN analysis_result.id_analysis_req_det%TYPE DEFAULT NULL,
        id_professional_in         IN analysis_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in              IN analysis_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                IN analysis_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in          IN analysis_result.id_institution%TYPE DEFAULT NULL,
        id_episode_in              IN analysis_result.id_episode%TYPE DEFAULT NULL,
        loinc_code_in              IN analysis_result.loinc_code%TYPE DEFAULT NULL,
        flg_status_in              IN analysis_result.flg_status%TYPE DEFAULT NULL,
        dt_analysis_result_tstz_in IN analysis_result.dt_analysis_result_tstz%TYPE DEFAULT NULL,
        dt_sample_in               IN analysis_result.dt_sample%TYPE DEFAULT NULL,
        id_visit_in                IN analysis_result.id_visit%TYPE DEFAULT NULL,
        id_exam_cat_in             IN analysis_result.id_exam_cat%TYPE DEFAULT NULL,
        flg_orig_analysis_in       IN analysis_result.flg_orig_analysis%TYPE DEFAULT NULL,
        id_episode_orig_in         IN analysis_result.id_episode_orig%TYPE DEFAULT NULL,
        id_result_status_in        IN analysis_result.id_result_status%TYPE DEFAULT NULL,
        create_user_in             IN analysis_result.create_user%TYPE DEFAULT NULL,
        create_time_in             IN analysis_result.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN analysis_result.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN analysis_result.update_user%TYPE DEFAULT NULL,
        update_time_in             IN analysis_result.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN analysis_result.update_institution%TYPE DEFAULT NULL,
        flg_result_origin_in       IN analysis_result.flg_result_origin%TYPE DEFAULT NULL,
        id_prof_req_in             IN analysis_result.id_prof_req%TYPE DEFAULT NULL,
        notes_in                   IN analysis_result.notes%TYPE DEFAULT NULL,
        id_harvest_in              IN analysis_result.id_harvest%TYPE DEFAULT NULL,
        id_sample_type_in          IN analysis_result.id_sample_type%TYPE DEFAULT NULL,
        result_origin_notes_in     IN analysis_result.result_origin_notes%TYPE DEFAULT NULL,
        flg_mult_result_in         IN analysis_result.flg_mult_result%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
        l_pky analysis_result.id_analysis_result%TYPE := next_key;
    BEGIN
        ins(id_analysis_result_in      => l_pky,
            id_analysis_in             => id_analysis_in,
            id_analysis_req_det_in     => id_analysis_req_det_in,
            id_professional_in         => id_professional_in,
            id_patient_in              => id_patient_in,
            flg_type_in                => flg_type_in,
            id_institution_in          => id_institution_in,
            id_episode_in              => id_episode_in,
            loinc_code_in              => loinc_code_in,
            flg_status_in              => flg_status_in,
            dt_analysis_result_tstz_in => dt_analysis_result_tstz_in,
            dt_sample_in               => dt_sample_in,
            id_visit_in                => id_visit_in,
            id_exam_cat_in             => id_exam_cat_in,
            flg_orig_analysis_in       => flg_orig_analysis_in,
            id_episode_orig_in         => id_episode_orig_in,
            id_result_status_in        => id_result_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_result_origin_in       => flg_result_origin_in,
            id_prof_req_in             => id_prof_req_in,
            notes_in                   => notes_in,
            id_harvest_in              => id_harvest_in,
            id_sample_type_in          => id_sample_type_in,
            result_origin_notes_in     => result_origin_notes_in,
            flg_mult_result_in         => flg_mult_result_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_analysis_in             IN analysis_result.id_analysis%TYPE DEFAULT NULL,
        id_analysis_req_det_in     IN analysis_result.id_analysis_req_det%TYPE DEFAULT NULL,
        id_professional_in         IN analysis_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in              IN analysis_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                IN analysis_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in          IN analysis_result.id_institution%TYPE DEFAULT NULL,
        id_episode_in              IN analysis_result.id_episode%TYPE DEFAULT NULL,
        loinc_code_in              IN analysis_result.loinc_code%TYPE DEFAULT NULL,
        flg_status_in              IN analysis_result.flg_status%TYPE DEFAULT NULL,
        dt_analysis_result_tstz_in IN analysis_result.dt_analysis_result_tstz%TYPE DEFAULT NULL,
        dt_sample_in               IN analysis_result.dt_sample%TYPE DEFAULT NULL,
        id_visit_in                IN analysis_result.id_visit%TYPE DEFAULT NULL,
        id_exam_cat_in             IN analysis_result.id_exam_cat%TYPE DEFAULT NULL,
        flg_orig_analysis_in       IN analysis_result.flg_orig_analysis%TYPE DEFAULT NULL,
        id_episode_orig_in         IN analysis_result.id_episode_orig%TYPE DEFAULT NULL,
        id_result_status_in        IN analysis_result.id_result_status%TYPE DEFAULT NULL,
        create_user_in             IN analysis_result.create_user%TYPE DEFAULT NULL,
        create_time_in             IN analysis_result.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN analysis_result.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN analysis_result.update_user%TYPE DEFAULT NULL,
        update_time_in             IN analysis_result.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN analysis_result.update_institution%TYPE DEFAULT NULL,
        flg_result_origin_in       IN analysis_result.flg_result_origin%TYPE DEFAULT NULL,
        id_prof_req_in             IN analysis_result.id_prof_req%TYPE DEFAULT NULL,
        notes_in                   IN analysis_result.notes%TYPE DEFAULT NULL,
        id_harvest_in              IN analysis_result.id_harvest%TYPE DEFAULT NULL,
        id_sample_type_in          IN analysis_result.id_sample_type%TYPE DEFAULT NULL,
        result_origin_notes_in     IN analysis_result.result_origin_notes%TYPE DEFAULT NULL,
        flg_mult_result_in         IN analysis_result.flg_mult_result%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        l_pky    analysis_result.id_analysis_result%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_analysis_result_in      => l_pky,
            id_analysis_in             => id_analysis_in,
            id_analysis_req_det_in     => id_analysis_req_det_in,
            id_professional_in         => id_professional_in,
            id_patient_in              => id_patient_in,
            flg_type_in                => flg_type_in,
            id_institution_in          => id_institution_in,
            id_episode_in              => id_episode_in,
            loinc_code_in              => loinc_code_in,
            flg_status_in              => flg_status_in,
            dt_analysis_result_tstz_in => dt_analysis_result_tstz_in,
            dt_sample_in               => dt_sample_in,
            id_visit_in                => id_visit_in,
            id_exam_cat_in             => id_exam_cat_in,
            flg_orig_analysis_in       => flg_orig_analysis_in,
            id_episode_orig_in         => id_episode_orig_in,
            id_result_status_in        => id_result_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_result_origin_in       => flg_result_origin_in,
            id_prof_req_in             => id_prof_req_in,
            notes_in                   => notes_in,
            id_harvest_in              => id_harvest_in,
            id_sample_type_in          => id_sample_type_in,
            result_origin_notes_in     => result_origin_notes_in,
            flg_mult_result_in         => flg_mult_result_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN analysis_result_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO analysis_result
                    (id_analysis_result,
                     id_analysis,
                     id_analysis_req_det,
                     id_professional,
                     id_patient,
                     flg_type,
                     id_institution,
                     id_episode,
                     loinc_code,
                     flg_status,
                     dt_analysis_result_tstz,
                     dt_sample,
                     id_visit,
                     id_exam_cat,
                     flg_orig_analysis,
                     id_episode_orig,
                     id_result_status,
                     create_user,
                     create_time,
                     create_institution,
                     update_user,
                     update_time,
                     update_institution,
                     flg_result_origin,
                     id_prof_req,
                     notes,
                     id_harvest,
                     id_sample_type,
                     result_origin_notes,
                     flg_mult_result)
                VALUES
                    (rows_in(indx).id_analysis_result,
                     rows_in(indx).id_analysis,
                     rows_in(indx).id_analysis_req_det,
                     rows_in(indx).id_professional,
                     rows_in(indx).id_patient,
                     rows_in(indx).flg_type,
                     rows_in(indx).id_institution,
                     rows_in(indx).id_episode,
                     rows_in(indx).loinc_code,
                     rows_in(indx).flg_status,
                     rows_in(indx).dt_analysis_result_tstz,
                     rows_in(indx).dt_sample,
                     rows_in(indx).id_visit,
                     rows_in(indx).id_exam_cat,
                     rows_in(indx).flg_orig_analysis,
                     rows_in(indx).id_episode_orig,
                     rows_in(indx).id_result_status,
                     rows_in(indx).create_user,
                     rows_in(indx).create_time,
                     rows_in(indx).create_institution,
                     rows_in(indx).update_user,
                     rows_in(indx).update_time,
                     rows_in(indx).update_institution,
                     rows_in(indx).flg_result_origin,
                     rows_in(indx).id_prof_req,
                     rows_in(indx).notes,
                     rows_in(indx).id_harvest,
                     rows_in(indx).id_sample_type,
                     rows_in(indx).result_origin_notes,
                     rows_in(indx).flg_mult_result)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%bulk_exceptions.count
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).error_index,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQLERRM(-sql%BULK_EXCEPTIONS(indx)
                                                                                      .error_code),
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ANALYSIS_RESULT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_analysis_result,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ANALYSIS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_analysis,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_ANALYSIS_REQ_DET _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_analysis_req_det,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PATIENT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_patient,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_TYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'LOINC_CODE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .loinc_code,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_ANALYSIS_RESULT_TSTZ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_analysis_result_tstz,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_SAMPLE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .dt_sample,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_VISIT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_visit,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EXAM_CAT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_exam_cat,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_ORIG_ANALYSIS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_orig_analysis,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE_ORIG _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_episode_orig,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_RESULT_STATUS _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_result_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_RESULT_ORIGIN _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_result_origin,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROF_REQ _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_prof_req,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_HARVEST _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_harvest,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_SAMPLE_TYPE _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .id_sample_type,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'RESULT_ORIGIN_NOTES _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .result_origin_notes,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_MULT_RESULT _' || indx,
                                                        value_in           => rows_in(SQL%BULK_EXCEPTIONS(indx).error_index)
                                                                              .flg_mult_result,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'ANALYSIS_RESULT',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.count);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN analysis_result_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_analysis_result_in       IN analysis_result.id_analysis_result%TYPE,
        id_analysis_in              IN analysis_result.id_analysis%TYPE DEFAULT NULL,
        id_analysis_nin             IN BOOLEAN := TRUE,
        id_analysis_req_det_in      IN analysis_result.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_req_det_nin     IN BOOLEAN := TRUE,
        id_professional_in          IN analysis_result.id_professional%TYPE DEFAULT NULL,
        id_professional_nin         IN BOOLEAN := TRUE,
        id_patient_in               IN analysis_result.id_patient%TYPE DEFAULT NULL,
        id_patient_nin              IN BOOLEAN := TRUE,
        flg_type_in                 IN analysis_result.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                IN BOOLEAN := TRUE,
        id_institution_in           IN analysis_result.id_institution%TYPE DEFAULT NULL,
        id_institution_nin          IN BOOLEAN := TRUE,
        id_episode_in               IN analysis_result.id_episode%TYPE DEFAULT NULL,
        id_episode_nin              IN BOOLEAN := TRUE,
        loinc_code_in               IN analysis_result.loinc_code%TYPE DEFAULT NULL,
        loinc_code_nin              IN BOOLEAN := TRUE,
        flg_status_in               IN analysis_result.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        dt_analysis_result_tstz_in  IN analysis_result.dt_analysis_result_tstz%TYPE DEFAULT NULL,
        dt_analysis_result_tstz_nin IN BOOLEAN := TRUE,
        dt_sample_in                IN analysis_result.dt_sample%TYPE DEFAULT NULL,
        dt_sample_nin               IN BOOLEAN := TRUE,
        id_visit_in                 IN analysis_result.id_visit%TYPE DEFAULT NULL,
        id_visit_nin                IN BOOLEAN := TRUE,
        id_exam_cat_in              IN analysis_result.id_exam_cat%TYPE DEFAULT NULL,
        id_exam_cat_nin             IN BOOLEAN := TRUE,
        flg_orig_analysis_in        IN analysis_result.flg_orig_analysis%TYPE DEFAULT NULL,
        flg_orig_analysis_nin       IN BOOLEAN := TRUE,
        id_episode_orig_in          IN analysis_result.id_episode_orig%TYPE DEFAULT NULL,
        id_episode_orig_nin         IN BOOLEAN := TRUE,
        id_result_status_in         IN analysis_result.id_result_status%TYPE DEFAULT NULL,
        id_result_status_nin        IN BOOLEAN := TRUE,
        create_user_in              IN analysis_result.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN analysis_result.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN analysis_result.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN analysis_result.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN analysis_result.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN analysis_result.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        flg_result_origin_in        IN analysis_result.flg_result_origin%TYPE DEFAULT NULL,
        flg_result_origin_nin       IN BOOLEAN := TRUE,
        id_prof_req_in              IN analysis_result.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin             IN BOOLEAN := TRUE,
        notes_in                    IN analysis_result.notes%TYPE DEFAULT NULL,
        notes_nin                   IN BOOLEAN := TRUE,
        id_harvest_in               IN analysis_result.id_harvest%TYPE DEFAULT NULL,
        id_harvest_nin              IN BOOLEAN := TRUE,
        id_sample_type_in           IN analysis_result.id_sample_type%TYPE DEFAULT NULL,
        id_sample_type_nin          IN BOOLEAN := TRUE,
        result_origin_notes_in      IN analysis_result.result_origin_notes%TYPE DEFAULT NULL,
        result_origin_notes_nin     IN BOOLEAN := TRUE,
        flg_mult_result_in          IN analysis_result.flg_mult_result%TYPE DEFAULT NULL,
        flg_mult_result_nin         IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_rows_out                  table_varchar;
        l_id_analysis_n             NUMBER(1);
        l_id_analysis_req_det_n     NUMBER(1);
        l_id_professional_n         NUMBER(1);
        l_id_patient_n              NUMBER(1);
        l_flg_type_n                NUMBER(1);
        l_id_institution_n          NUMBER(1);
        l_id_episode_n              NUMBER(1);
        l_loinc_code_n              NUMBER(1);
        l_flg_status_n              NUMBER(1);
        l_dt_analysis_result_tstz_n NUMBER(1);
        l_dt_sample_n               NUMBER(1);
        l_id_visit_n                NUMBER(1);
        l_id_exam_cat_n             NUMBER(1);
        l_flg_orig_analysis_n       NUMBER(1);
        l_id_episode_orig_n         NUMBER(1);
        l_id_result_status_n        NUMBER(1);
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_update_institution_n      NUMBER(1);
        l_flg_result_origin_n       NUMBER(1);
        l_id_prof_req_n             NUMBER(1);
        l_notes_n                   NUMBER(1);
        l_id_harvest_n              NUMBER(1);
        l_id_sample_type_n          NUMBER(1);
        l_result_origin_notes_n     NUMBER(1);
        l_flg_mult_result_n         NUMBER(1);
    BEGIN
    
        l_id_analysis_n             := sys.diutil.bool_to_int(id_analysis_nin);
        l_id_analysis_req_det_n     := sys.diutil.bool_to_int(id_analysis_req_det_nin);
        l_id_professional_n         := sys.diutil.bool_to_int(id_professional_nin);
        l_id_patient_n              := sys.diutil.bool_to_int(id_patient_nin);
        l_flg_type_n                := sys.diutil.bool_to_int(flg_type_nin);
        l_id_institution_n          := sys.diutil.bool_to_int(id_institution_nin);
        l_id_episode_n              := sys.diutil.bool_to_int(id_episode_nin);
        l_loinc_code_n              := sys.diutil.bool_to_int(loinc_code_nin);
        l_flg_status_n              := sys.diutil.bool_to_int(flg_status_nin);
        l_dt_analysis_result_tstz_n := sys.diutil.bool_to_int(dt_analysis_result_tstz_nin);
        l_dt_sample_n               := sys.diutil.bool_to_int(dt_sample_nin);
        l_id_visit_n                := sys.diutil.bool_to_int(id_visit_nin);
        l_id_exam_cat_n             := sys.diutil.bool_to_int(id_exam_cat_nin);
        l_flg_orig_analysis_n       := sys.diutil.bool_to_int(flg_orig_analysis_nin);
        l_id_episode_orig_n         := sys.diutil.bool_to_int(id_episode_orig_nin);
        l_id_result_status_n        := sys.diutil.bool_to_int(id_result_status_nin);
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_result_origin_n       := sys.diutil.bool_to_int(flg_result_origin_nin);
        l_id_prof_req_n             := sys.diutil.bool_to_int(id_prof_req_nin);
        l_notes_n                   := sys.diutil.bool_to_int(notes_nin);
        l_id_harvest_n              := sys.diutil.bool_to_int(id_harvest_nin);
        l_id_sample_type_n          := sys.diutil.bool_to_int(id_sample_type_nin);
        l_result_origin_notes_n     := sys.diutil.bool_to_int(result_origin_notes_nin);
        l_flg_mult_result_n         := sys.diutil.bool_to_int(flg_mult_result_nin);
    
        UPDATE analysis_result
           SET id_analysis             = decode(l_id_analysis_n, 0, id_analysis_in, nvl(id_analysis_in, id_analysis)),
               id_analysis_req_det     = decode(l_id_analysis_req_det_n,
                                                0,
                                                id_analysis_req_det_in,
                                                nvl(id_analysis_req_det_in, id_analysis_req_det)),
               id_professional         = decode(l_id_professional_n,
                                                0,
                                                id_professional_in,
                                                nvl(id_professional_in, id_professional)),
               id_patient              = decode(l_id_patient_n, 0, id_patient_in, nvl(id_patient_in, id_patient)),
               flg_type                = decode(l_flg_type_n, 0, flg_type_in, nvl(flg_type_in, flg_type)),
               id_institution          = decode(l_id_institution_n,
                                                0,
                                                id_institution_in,
                                                nvl(id_institution_in, id_institution)),
               id_episode              = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               loinc_code              = decode(l_loinc_code_n, 0, loinc_code_in, nvl(loinc_code_in, loinc_code)),
               flg_status              = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               dt_analysis_result_tstz = decode(l_dt_analysis_result_tstz_n,
                                                0,
                                                dt_analysis_result_tstz_in,
                                                nvl(dt_analysis_result_tstz_in, dt_analysis_result_tstz)),
               dt_sample               = decode(l_dt_sample_n, 0, dt_sample_in, nvl(dt_sample_in, dt_sample)),
               id_visit                = decode(l_id_visit_n, 0, id_visit_in, nvl(id_visit_in, id_visit)),
               id_exam_cat             = decode(l_id_exam_cat_n, 0, id_exam_cat_in, nvl(id_exam_cat_in, id_exam_cat)),
               flg_orig_analysis       = decode(l_flg_orig_analysis_n,
                                                0,
                                                flg_orig_analysis_in,
                                                nvl(flg_orig_analysis_in, flg_orig_analysis)),
               id_episode_orig         = decode(l_id_episode_orig_n,
                                                0,
                                                id_episode_orig_in,
                                                nvl(id_episode_orig_in, id_episode_orig)),
               id_result_status        = decode(l_id_result_status_n,
                                                0,
                                                id_result_status_in,
                                                nvl(id_result_status_in, id_result_status)),
               create_user             = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time             = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution      = decode(l_create_institution_n,
                                                0,
                                                create_institution_in,
                                                nvl(create_institution_in, create_institution)),
               update_user             = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time             = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution      = decode(l_update_institution_n,
                                                0,
                                                update_institution_in,
                                                nvl(update_institution_in, update_institution)),
               flg_result_origin       = decode(l_flg_result_origin_n,
                                                0,
                                                flg_result_origin_in,
                                                nvl(flg_result_origin_in, flg_result_origin)),
               id_prof_req             = decode(l_id_prof_req_n, 0, id_prof_req_in, nvl(id_prof_req_in, id_prof_req)),
               notes                   = decode(l_notes_n, 0, notes_in, nvl(notes_in, notes)),
               id_harvest              = decode(l_id_harvest_n, 0, id_harvest_in, nvl(id_harvest_in, id_harvest)),
               id_sample_type          = decode(l_id_sample_type_n,
                                                0,
                                                id_sample_type_in,
                                                nvl(id_sample_type_in, id_sample_type)),
               result_origin_notes     = decode(l_result_origin_notes_n,
                                                0,
                                                result_origin_notes_in,
                                                nvl(result_origin_notes_in, result_origin_notes)),
               flg_mult_result         = decode(l_flg_mult_result_n,
                                                0,
                                                flg_mult_result_in,
                                                nvl(flg_mult_result_in, flg_mult_result))
         WHERE id_analysis_result = id_analysis_result_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ANALYSIS_RESULT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    IF l_name = 'ARES_ANALY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ANALYSIS',
                                                        value_in           => id_analysis_in);
                    END IF;
                    IF l_name = 'ARES_ARD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ANALYSIS_REQ_DET',
                                                        value_in           => id_analysis_req_det_in);
                    END IF;
                    IF l_name = 'ARES_ASE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ANALYSIS',
                                                        value_in           => id_analysis_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SAMPLE_TYPE',
                                                        value_in           => id_sample_type_in);
                    END IF;
                    IF l_name = 'ARES_ECAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_CAT',
                                                        value_in           => id_exam_cat_in);
                    END IF;
                    IF l_name = 'ARES_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'ARES_EPIS_O_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_ORIG',
                                                        value_in           => id_episode_orig_in);
                    END IF;
                    IF l_name = 'ARES_HAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HARVEST',
                                                        value_in           => id_harvest_in);
                    END IF;
                    IF l_name = 'ARES_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'ARES_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'ARES_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'ARES_RSU_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RESULT_STATUS',
                                                        value_in           => id_result_status_in);
                    END IF;
                    IF l_name = 'ART_VIT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VISIT',
                                                        value_in           => id_visit_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_analysis_result_in       IN analysis_result.id_analysis_result%TYPE,
        id_analysis_in              IN analysis_result.id_analysis%TYPE DEFAULT NULL,
        id_analysis_nin             IN BOOLEAN := TRUE,
        id_analysis_req_det_in      IN analysis_result.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_req_det_nin     IN BOOLEAN := TRUE,
        id_professional_in          IN analysis_result.id_professional%TYPE DEFAULT NULL,
        id_professional_nin         IN BOOLEAN := TRUE,
        id_patient_in               IN analysis_result.id_patient%TYPE DEFAULT NULL,
        id_patient_nin              IN BOOLEAN := TRUE,
        flg_type_in                 IN analysis_result.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                IN BOOLEAN := TRUE,
        id_institution_in           IN analysis_result.id_institution%TYPE DEFAULT NULL,
        id_institution_nin          IN BOOLEAN := TRUE,
        id_episode_in               IN analysis_result.id_episode%TYPE DEFAULT NULL,
        id_episode_nin              IN BOOLEAN := TRUE,
        loinc_code_in               IN analysis_result.loinc_code%TYPE DEFAULT NULL,
        loinc_code_nin              IN BOOLEAN := TRUE,
        flg_status_in               IN analysis_result.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        dt_analysis_result_tstz_in  IN analysis_result.dt_analysis_result_tstz%TYPE DEFAULT NULL,
        dt_analysis_result_tstz_nin IN BOOLEAN := TRUE,
        dt_sample_in                IN analysis_result.dt_sample%TYPE DEFAULT NULL,
        dt_sample_nin               IN BOOLEAN := TRUE,
        id_visit_in                 IN analysis_result.id_visit%TYPE DEFAULT NULL,
        id_visit_nin                IN BOOLEAN := TRUE,
        id_exam_cat_in              IN analysis_result.id_exam_cat%TYPE DEFAULT NULL,
        id_exam_cat_nin             IN BOOLEAN := TRUE,
        flg_orig_analysis_in        IN analysis_result.flg_orig_analysis%TYPE DEFAULT NULL,
        flg_orig_analysis_nin       IN BOOLEAN := TRUE,
        id_episode_orig_in          IN analysis_result.id_episode_orig%TYPE DEFAULT NULL,
        id_episode_orig_nin         IN BOOLEAN := TRUE,
        id_result_status_in         IN analysis_result.id_result_status%TYPE DEFAULT NULL,
        id_result_status_nin        IN BOOLEAN := TRUE,
        create_user_in              IN analysis_result.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN analysis_result.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN analysis_result.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN analysis_result.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN analysis_result.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN analysis_result.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        flg_result_origin_in        IN analysis_result.flg_result_origin%TYPE DEFAULT NULL,
        flg_result_origin_nin       IN BOOLEAN := TRUE,
        id_prof_req_in              IN analysis_result.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin             IN BOOLEAN := TRUE,
        notes_in                    IN analysis_result.notes%TYPE DEFAULT NULL,
        notes_nin                   IN BOOLEAN := TRUE,
        id_harvest_in               IN analysis_result.id_harvest%TYPE DEFAULT NULL,
        id_harvest_nin              IN BOOLEAN := TRUE,
        id_sample_type_in           IN analysis_result.id_sample_type%TYPE DEFAULT NULL,
        id_sample_type_nin          IN BOOLEAN := TRUE,
        result_origin_notes_in      IN analysis_result.result_origin_notes%TYPE DEFAULT NULL,
        result_origin_notes_nin     IN BOOLEAN := TRUE,
        flg_mult_result_in          IN analysis_result.flg_mult_result%TYPE DEFAULT NULL,
        flg_mult_result_nin         IN BOOLEAN := TRUE,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_analysis_result_in       => id_analysis_result_in,
            id_analysis_in              => id_analysis_in,
            id_analysis_nin             => id_analysis_nin,
            id_analysis_req_det_in      => id_analysis_req_det_in,
            id_analysis_req_det_nin     => id_analysis_req_det_nin,
            id_professional_in          => id_professional_in,
            id_professional_nin         => id_professional_nin,
            id_patient_in               => id_patient_in,
            id_patient_nin              => id_patient_nin,
            flg_type_in                 => flg_type_in,
            flg_type_nin                => flg_type_nin,
            id_institution_in           => id_institution_in,
            id_institution_nin          => id_institution_nin,
            id_episode_in               => id_episode_in,
            id_episode_nin              => id_episode_nin,
            loinc_code_in               => loinc_code_in,
            loinc_code_nin              => loinc_code_nin,
            flg_status_in               => flg_status_in,
            flg_status_nin              => flg_status_nin,
            dt_analysis_result_tstz_in  => dt_analysis_result_tstz_in,
            dt_analysis_result_tstz_nin => dt_analysis_result_tstz_nin,
            dt_sample_in                => dt_sample_in,
            dt_sample_nin               => dt_sample_nin,
            id_visit_in                 => id_visit_in,
            id_visit_nin                => id_visit_nin,
            id_exam_cat_in              => id_exam_cat_in,
            id_exam_cat_nin             => id_exam_cat_nin,
            flg_orig_analysis_in        => flg_orig_analysis_in,
            flg_orig_analysis_nin       => flg_orig_analysis_nin,
            id_episode_orig_in          => id_episode_orig_in,
            id_episode_orig_nin         => id_episode_orig_nin,
            id_result_status_in         => id_result_status_in,
            id_result_status_nin        => id_result_status_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            flg_result_origin_in        => flg_result_origin_in,
            flg_result_origin_nin       => flg_result_origin_nin,
            id_prof_req_in              => id_prof_req_in,
            id_prof_req_nin             => id_prof_req_nin,
            notes_in                    => notes_in,
            notes_nin                   => notes_nin,
            id_harvest_in               => id_harvest_in,
            id_harvest_nin              => id_harvest_nin,
            id_sample_type_in           => id_sample_type_in,
            id_sample_type_nin          => id_sample_type_nin,
            result_origin_notes_in      => result_origin_notes_in,
            result_origin_notes_nin     => result_origin_notes_nin,
            flg_mult_result_in          => flg_mult_result_in,
            flg_mult_result_nin         => flg_mult_result_nin,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_analysis_in              IN analysis_result.id_analysis%TYPE DEFAULT NULL,
        id_analysis_nin             IN BOOLEAN := TRUE,
        id_analysis_req_det_in      IN analysis_result.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_req_det_nin     IN BOOLEAN := TRUE,
        id_professional_in          IN analysis_result.id_professional%TYPE DEFAULT NULL,
        id_professional_nin         IN BOOLEAN := TRUE,
        id_patient_in               IN analysis_result.id_patient%TYPE DEFAULT NULL,
        id_patient_nin              IN BOOLEAN := TRUE,
        flg_type_in                 IN analysis_result.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                IN BOOLEAN := TRUE,
        id_institution_in           IN analysis_result.id_institution%TYPE DEFAULT NULL,
        id_institution_nin          IN BOOLEAN := TRUE,
        id_episode_in               IN analysis_result.id_episode%TYPE DEFAULT NULL,
        id_episode_nin              IN BOOLEAN := TRUE,
        loinc_code_in               IN analysis_result.loinc_code%TYPE DEFAULT NULL,
        loinc_code_nin              IN BOOLEAN := TRUE,
        flg_status_in               IN analysis_result.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        dt_analysis_result_tstz_in  IN analysis_result.dt_analysis_result_tstz%TYPE DEFAULT NULL,
        dt_analysis_result_tstz_nin IN BOOLEAN := TRUE,
        dt_sample_in                IN analysis_result.dt_sample%TYPE DEFAULT NULL,
        dt_sample_nin               IN BOOLEAN := TRUE,
        id_visit_in                 IN analysis_result.id_visit%TYPE DEFAULT NULL,
        id_visit_nin                IN BOOLEAN := TRUE,
        id_exam_cat_in              IN analysis_result.id_exam_cat%TYPE DEFAULT NULL,
        id_exam_cat_nin             IN BOOLEAN := TRUE,
        flg_orig_analysis_in        IN analysis_result.flg_orig_analysis%TYPE DEFAULT NULL,
        flg_orig_analysis_nin       IN BOOLEAN := TRUE,
        id_episode_orig_in          IN analysis_result.id_episode_orig%TYPE DEFAULT NULL,
        id_episode_orig_nin         IN BOOLEAN := TRUE,
        id_result_status_in         IN analysis_result.id_result_status%TYPE DEFAULT NULL,
        id_result_status_nin        IN BOOLEAN := TRUE,
        create_user_in              IN analysis_result.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN analysis_result.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN analysis_result.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN analysis_result.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN analysis_result.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN analysis_result.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        flg_result_origin_in        IN analysis_result.flg_result_origin%TYPE DEFAULT NULL,
        flg_result_origin_nin       IN BOOLEAN := TRUE,
        id_prof_req_in              IN analysis_result.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin             IN BOOLEAN := TRUE,
        notes_in                    IN analysis_result.notes%TYPE DEFAULT NULL,
        notes_nin                   IN BOOLEAN := TRUE,
        id_harvest_in               IN analysis_result.id_harvest%TYPE DEFAULT NULL,
        id_harvest_nin              IN BOOLEAN := TRUE,
        id_sample_type_in           IN analysis_result.id_sample_type%TYPE DEFAULT NULL,
        id_sample_type_nin          IN BOOLEAN := TRUE,
        result_origin_notes_in      IN analysis_result.result_origin_notes%TYPE DEFAULT NULL,
        result_origin_notes_nin     IN BOOLEAN := TRUE,
        flg_mult_result_in          IN analysis_result.flg_mult_result%TYPE DEFAULT NULL,
        flg_mult_result_nin         IN BOOLEAN := TRUE,
        where_in                    VARCHAR2,
        handle_error_in             IN BOOLEAN := TRUE,
        rows_out                    IN OUT table_varchar
    ) IS
        l_sql                       VARCHAR2(32767);
        l_rows_out                  table_varchar;
        l_id_analysis_n             NUMBER(1);
        l_id_analysis_req_det_n     NUMBER(1);
        l_id_professional_n         NUMBER(1);
        l_id_patient_n              NUMBER(1);
        l_flg_type_n                NUMBER(1);
        l_id_institution_n          NUMBER(1);
        l_id_episode_n              NUMBER(1);
        l_loinc_code_n              NUMBER(1);
        l_flg_status_n              NUMBER(1);
        l_dt_analysis_result_tstz_n NUMBER(1);
        l_dt_sample_n               NUMBER(1);
        l_id_visit_n                NUMBER(1);
        l_id_exam_cat_n             NUMBER(1);
        l_flg_orig_analysis_n       NUMBER(1);
        l_id_episode_orig_n         NUMBER(1);
        l_id_result_status_n        NUMBER(1);
        l_create_user_n             NUMBER(1);
        l_create_time_n             NUMBER(1);
        l_create_institution_n      NUMBER(1);
        l_update_user_n             NUMBER(1);
        l_update_time_n             NUMBER(1);
        l_update_institution_n      NUMBER(1);
        l_flg_result_origin_n       NUMBER(1);
        l_id_prof_req_n             NUMBER(1);
        l_notes_n                   NUMBER(1);
        l_id_harvest_n              NUMBER(1);
        l_id_sample_type_n          NUMBER(1);
        l_result_origin_notes_n     NUMBER(1);
        l_flg_mult_result_n         NUMBER(1);
        id_analysis_result_in       analysis_result.id_analysis_result%TYPE;
    BEGIN
    
        l_id_analysis_n             := sys.diutil.bool_to_int(id_analysis_nin);
        l_id_analysis_req_det_n     := sys.diutil.bool_to_int(id_analysis_req_det_nin);
        l_id_professional_n         := sys.diutil.bool_to_int(id_professional_nin);
        l_id_patient_n              := sys.diutil.bool_to_int(id_patient_nin);
        l_flg_type_n                := sys.diutil.bool_to_int(flg_type_nin);
        l_id_institution_n          := sys.diutil.bool_to_int(id_institution_nin);
        l_id_episode_n              := sys.diutil.bool_to_int(id_episode_nin);
        l_loinc_code_n              := sys.diutil.bool_to_int(loinc_code_nin);
        l_flg_status_n              := sys.diutil.bool_to_int(flg_status_nin);
        l_dt_analysis_result_tstz_n := sys.diutil.bool_to_int(dt_analysis_result_tstz_nin);
        l_dt_sample_n               := sys.diutil.bool_to_int(dt_sample_nin);
        l_id_visit_n                := sys.diutil.bool_to_int(id_visit_nin);
        l_id_exam_cat_n             := sys.diutil.bool_to_int(id_exam_cat_nin);
        l_flg_orig_analysis_n       := sys.diutil.bool_to_int(flg_orig_analysis_nin);
        l_id_episode_orig_n         := sys.diutil.bool_to_int(id_episode_orig_nin);
        l_id_result_status_n        := sys.diutil.bool_to_int(id_result_status_nin);
        l_create_user_n             := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n             := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n      := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n             := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n             := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n      := sys.diutil.bool_to_int(update_institution_nin);
        l_flg_result_origin_n       := sys.diutil.bool_to_int(flg_result_origin_nin);
        l_id_prof_req_n             := sys.diutil.bool_to_int(id_prof_req_nin);
        l_notes_n                   := sys.diutil.bool_to_int(notes_nin);
        l_id_harvest_n              := sys.diutil.bool_to_int(id_harvest_nin);
        l_id_sample_type_n          := sys.diutil.bool_to_int(id_sample_type_nin);
        l_result_origin_notes_n     := sys.diutil.bool_to_int(result_origin_notes_nin);
        l_flg_mult_result_n         := sys.diutil.bool_to_int(flg_mult_result_nin);
    
        l_sql := 'UPDATE ANALYSIS_RESULT SET ' || ' ID_ANALYSIS = decode (' || l_id_analysis_n ||
                 ',0,:id_analysis_in, NVL (:id_analysis_in, ID_ANALYSIS)) ' || ',' || ' ID_ANALYSIS_REQ_DET = decode (' ||
                 l_id_analysis_req_det_n ||
                 ',0,:id_analysis_req_det_in, NVL (:id_analysis_req_det_in, ID_ANALYSIS_REQ_DET)) ' || ',' ||
                 ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                 ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) ' || ',' ||
                 ' ID_PATIENT = decode (' || l_id_patient_n || ',0,:id_patient_in, NVL (:id_patient_in, ID_PATIENT)) ' || ',' ||
                 ' FLG_TYPE = decode (' || l_flg_type_n || ',0,:flg_type_in, NVL (:flg_type_in, FLG_TYPE)) ' || ',' ||
                 ' ID_INSTITUTION = decode (' || l_id_institution_n ||
                 ',0,:id_institution_in, NVL (:id_institution_in, ID_INSTITUTION)) ' || ',' || ' ID_EPISODE = decode (' ||
                 l_id_episode_n || ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' ||
                 ' LOINC_CODE = decode (' || l_loinc_code_n || ',0,:loinc_code_in, NVL (:loinc_code_in, LOINC_CODE)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' DT_ANALYSIS_RESULT_TSTZ = decode (' || l_dt_analysis_result_tstz_n ||
                 ',0,:dt_analysis_result_tstz_in, NVL (:dt_analysis_result_tstz_in, DT_ANALYSIS_RESULT_TSTZ)) ' || ',' ||
                 ' DT_SAMPLE = decode (' || l_dt_sample_n || ',0,:dt_sample_in, NVL (:dt_sample_in, DT_SAMPLE)) ' || ',' ||
                 ' ID_VISIT = decode (' || l_id_visit_n || ',0,:id_visit_in, NVL (:id_visit_in, ID_VISIT)) ' || ',' ||
                 ' ID_EXAM_CAT = decode (' || l_id_exam_cat_n ||
                 ',0,:id_exam_cat_in, NVL (:id_exam_cat_in, ID_EXAM_CAT)) ' || ',' || ' FLG_ORIG_ANALYSIS = decode (' ||
                 l_flg_orig_analysis_n || ',0,:flg_orig_analysis_in, NVL (:flg_orig_analysis_in, FLG_ORIG_ANALYSIS)) ' || ',' ||
                 ' ID_EPISODE_ORIG = decode (' || l_id_episode_orig_n ||
                 ',0,:id_episode_orig_in, NVL (:id_episode_orig_in, ID_EPISODE_ORIG)) ' || ',' ||
                 ' ID_RESULT_STATUS = decode (' || l_id_result_status_n ||
                 ',0,:id_result_status_in, NVL (:id_result_status_in, ID_RESULT_STATUS)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ',' ||
                 ' FLG_RESULT_ORIGIN = decode (' || l_flg_result_origin_n ||
                 ',0,:flg_result_origin_in, NVL (:flg_result_origin_in, FLG_RESULT_ORIGIN)) ' || ',' ||
                 ' ID_PROF_REQ = decode (' || l_id_prof_req_n ||
                 ',0,:id_prof_req_in, NVL (:id_prof_req_in, ID_PROF_REQ)) ' || ',' || ' NOTES = decode (' || l_notes_n ||
                 ',0,:notes_in, NVL (:notes_in, NOTES)) ' || ',' || ' ID_HARVEST = decode (' || l_id_harvest_n ||
                 ',0,:id_harvest_in, NVL (:id_harvest_in, ID_HARVEST)) ' || ',' || ' ID_SAMPLE_TYPE = decode (' ||
                 l_id_sample_type_n || ',0,:id_sample_type_in, NVL (:id_sample_type_in, ID_SAMPLE_TYPE)) ' || ',' ||
                 ' RESULT_ORIGIN_NOTES = decode (' || l_result_origin_notes_n ||
                 ',0,:result_origin_notes_in, NVL (:result_origin_notes_in, RESULT_ORIGIN_NOTES)) ' || ',' ||
                 ' FLG_MULT_RESULT = decode (' || l_flg_mult_result_n ||
                 ',0,:flg_mult_result_in, NVL (:flg_mult_result_in, FLG_MULT_RESULT)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_analysis_in, id_analysis_req_det_in, id_professional_in, id_patient_in, flg_type_in, id_institution_in, id_episode_in, loinc_code_in, flg_status_in, dt_analysis_result_tstz_in, dt_sample_in, id_visit_in, id_exam_cat_in, flg_orig_analysis_in, id_episode_orig_in, id_result_status_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, flg_result_origin_in, id_prof_req_in, notes_in, id_harvest_in, id_sample_type_in, result_origin_notes_in, flg_mult_result_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'ANALYSIS_RESULT');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    IF l_name = 'ARES_ANALY_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ANALYSIS',
                                                        value_in           => id_analysis_in);
                    END IF;
                    IF l_name = 'ARES_ARD_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ANALYSIS_REQ_DET',
                                                        value_in           => id_analysis_req_det_in);
                    END IF;
                    IF l_name = 'ARES_ASE_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_ANALYSIS',
                                                        value_in           => id_analysis_in);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_SAMPLE_TYPE',
                                                        value_in           => id_sample_type_in);
                    END IF;
                    IF l_name = 'ARES_ECAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EXAM_CAT',
                                                        value_in           => id_exam_cat_in);
                    END IF;
                    IF l_name = 'ARES_EPIS_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE',
                                                        value_in           => id_episode_in);
                    END IF;
                    IF l_name = 'ARES_EPIS_O_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_EPISODE_ORIG',
                                                        value_in           => id_episode_orig_in);
                    END IF;
                    IF l_name = 'ARES_HAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_HARVEST',
                                                        value_in           => id_harvest_in);
                    END IF;
                    IF l_name = 'ARES_INST_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_INSTITUTION',
                                                        value_in           => id_institution_in);
                    END IF;
                    IF l_name = 'ARES_PAT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PATIENT',
                                                        value_in           => id_patient_in);
                    END IF;
                    IF l_name = 'ARES_PROF_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PROFESSIONAL',
                                                        value_in           => id_professional_in);
                    END IF;
                    IF l_name = 'ARES_RSU_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_RESULT_STATUS',
                                                        value_in           => id_result_status_in);
                    END IF;
                    IF l_name = 'ART_VIT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_VISIT',
                                                        value_in           => id_visit_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_analysis_in              IN analysis_result.id_analysis%TYPE DEFAULT NULL,
        id_analysis_nin             IN BOOLEAN := TRUE,
        id_analysis_req_det_in      IN analysis_result.id_analysis_req_det%TYPE DEFAULT NULL,
        id_analysis_req_det_nin     IN BOOLEAN := TRUE,
        id_professional_in          IN analysis_result.id_professional%TYPE DEFAULT NULL,
        id_professional_nin         IN BOOLEAN := TRUE,
        id_patient_in               IN analysis_result.id_patient%TYPE DEFAULT NULL,
        id_patient_nin              IN BOOLEAN := TRUE,
        flg_type_in                 IN analysis_result.flg_type%TYPE DEFAULT NULL,
        flg_type_nin                IN BOOLEAN := TRUE,
        id_institution_in           IN analysis_result.id_institution%TYPE DEFAULT NULL,
        id_institution_nin          IN BOOLEAN := TRUE,
        id_episode_in               IN analysis_result.id_episode%TYPE DEFAULT NULL,
        id_episode_nin              IN BOOLEAN := TRUE,
        loinc_code_in               IN analysis_result.loinc_code%TYPE DEFAULT NULL,
        loinc_code_nin              IN BOOLEAN := TRUE,
        flg_status_in               IN analysis_result.flg_status%TYPE DEFAULT NULL,
        flg_status_nin              IN BOOLEAN := TRUE,
        dt_analysis_result_tstz_in  IN analysis_result.dt_analysis_result_tstz%TYPE DEFAULT NULL,
        dt_analysis_result_tstz_nin IN BOOLEAN := TRUE,
        dt_sample_in                IN analysis_result.dt_sample%TYPE DEFAULT NULL,
        dt_sample_nin               IN BOOLEAN := TRUE,
        id_visit_in                 IN analysis_result.id_visit%TYPE DEFAULT NULL,
        id_visit_nin                IN BOOLEAN := TRUE,
        id_exam_cat_in              IN analysis_result.id_exam_cat%TYPE DEFAULT NULL,
        id_exam_cat_nin             IN BOOLEAN := TRUE,
        flg_orig_analysis_in        IN analysis_result.flg_orig_analysis%TYPE DEFAULT NULL,
        flg_orig_analysis_nin       IN BOOLEAN := TRUE,
        id_episode_orig_in          IN analysis_result.id_episode_orig%TYPE DEFAULT NULL,
        id_episode_orig_nin         IN BOOLEAN := TRUE,
        id_result_status_in         IN analysis_result.id_result_status%TYPE DEFAULT NULL,
        id_result_status_nin        IN BOOLEAN := TRUE,
        create_user_in              IN analysis_result.create_user%TYPE DEFAULT NULL,
        create_user_nin             IN BOOLEAN := TRUE,
        create_time_in              IN analysis_result.create_time%TYPE DEFAULT NULL,
        create_time_nin             IN BOOLEAN := TRUE,
        create_institution_in       IN analysis_result.create_institution%TYPE DEFAULT NULL,
        create_institution_nin      IN BOOLEAN := TRUE,
        update_user_in              IN analysis_result.update_user%TYPE DEFAULT NULL,
        update_user_nin             IN BOOLEAN := TRUE,
        update_time_in              IN analysis_result.update_time%TYPE DEFAULT NULL,
        update_time_nin             IN BOOLEAN := TRUE,
        update_institution_in       IN analysis_result.update_institution%TYPE DEFAULT NULL,
        update_institution_nin      IN BOOLEAN := TRUE,
        flg_result_origin_in        IN analysis_result.flg_result_origin%TYPE DEFAULT NULL,
        flg_result_origin_nin       IN BOOLEAN := TRUE,
        id_prof_req_in              IN analysis_result.id_prof_req%TYPE DEFAULT NULL,
        id_prof_req_nin             IN BOOLEAN := TRUE,
        notes_in                    IN analysis_result.notes%TYPE DEFAULT NULL,
        notes_nin                   IN BOOLEAN := TRUE,
        id_harvest_in               IN analysis_result.id_harvest%TYPE DEFAULT NULL,
        id_harvest_nin              IN BOOLEAN := TRUE,
        id_sample_type_in           IN analysis_result.id_sample_type%TYPE DEFAULT NULL,
        id_sample_type_nin          IN BOOLEAN := TRUE,
        result_origin_notes_in      IN analysis_result.result_origin_notes%TYPE DEFAULT NULL,
        result_origin_notes_nin     IN BOOLEAN := TRUE,
        flg_mult_result_in          IN analysis_result.flg_mult_result%TYPE DEFAULT NULL,
        flg_mult_result_nin         IN BOOLEAN := TRUE,
        where_in                    VARCHAR2,
        handle_error_in             IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_analysis_in              => id_analysis_in,
            id_analysis_nin             => id_analysis_nin,
            id_analysis_req_det_in      => id_analysis_req_det_in,
            id_analysis_req_det_nin     => id_analysis_req_det_nin,
            id_professional_in          => id_professional_in,
            id_professional_nin         => id_professional_nin,
            id_patient_in               => id_patient_in,
            id_patient_nin              => id_patient_nin,
            flg_type_in                 => flg_type_in,
            flg_type_nin                => flg_type_nin,
            id_institution_in           => id_institution_in,
            id_institution_nin          => id_institution_nin,
            id_episode_in               => id_episode_in,
            id_episode_nin              => id_episode_nin,
            loinc_code_in               => loinc_code_in,
            loinc_code_nin              => loinc_code_nin,
            flg_status_in               => flg_status_in,
            flg_status_nin              => flg_status_nin,
            dt_analysis_result_tstz_in  => dt_analysis_result_tstz_in,
            dt_analysis_result_tstz_nin => dt_analysis_result_tstz_nin,
            dt_sample_in                => dt_sample_in,
            dt_sample_nin               => dt_sample_nin,
            id_visit_in                 => id_visit_in,
            id_visit_nin                => id_visit_nin,
            id_exam_cat_in              => id_exam_cat_in,
            id_exam_cat_nin             => id_exam_cat_nin,
            flg_orig_analysis_in        => flg_orig_analysis_in,
            flg_orig_analysis_nin       => flg_orig_analysis_nin,
            id_episode_orig_in          => id_episode_orig_in,
            id_episode_orig_nin         => id_episode_orig_nin,
            id_result_status_in         => id_result_status_in,
            id_result_status_nin        => id_result_status_nin,
            create_user_in              => create_user_in,
            create_user_nin             => create_user_nin,
            create_time_in              => create_time_in,
            create_time_nin             => create_time_nin,
            create_institution_in       => create_institution_in,
            create_institution_nin      => create_institution_nin,
            update_user_in              => update_user_in,
            update_user_nin             => update_user_nin,
            update_time_in              => update_time_in,
            update_time_nin             => update_time_nin,
            update_institution_in       => update_institution_in,
            update_institution_nin      => update_institution_nin,
            flg_result_origin_in        => flg_result_origin_in,
            flg_result_origin_nin       => flg_result_origin_nin,
            id_prof_req_in              => id_prof_req_in,
            id_prof_req_nin             => id_prof_req_nin,
            notes_in                    => notes_in,
            notes_nin                   => notes_nin,
            id_harvest_in               => id_harvest_in,
            id_harvest_nin              => id_harvest_nin,
            id_sample_type_in           => id_sample_type_in,
            id_sample_type_nin          => id_sample_type_nin,
            result_origin_notes_in      => result_origin_notes_in,
            result_origin_notes_nin     => result_origin_notes_nin,
            flg_mult_result_in          => flg_mult_result_in,
            flg_mult_result_nin         => flg_mult_result_nin,
            where_in                    => where_in,
            handle_error_in             => handle_error_in,
            rows_out                    => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN analysis_result%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_analysis_result_in      => rec_in.id_analysis_result,
            id_analysis_in             => rec_in.id_analysis,
            id_analysis_req_det_in     => rec_in.id_analysis_req_det,
            id_professional_in         => rec_in.id_professional,
            id_patient_in              => rec_in.id_patient,
            flg_type_in                => rec_in.flg_type,
            id_institution_in          => rec_in.id_institution,
            id_episode_in              => rec_in.id_episode,
            loinc_code_in              => rec_in.loinc_code,
            flg_status_in              => rec_in.flg_status,
            dt_analysis_result_tstz_in => rec_in.dt_analysis_result_tstz,
            dt_sample_in               => rec_in.dt_sample,
            id_visit_in                => rec_in.id_visit,
            id_exam_cat_in             => rec_in.id_exam_cat,
            flg_orig_analysis_in       => rec_in.flg_orig_analysis,
            id_episode_orig_in         => rec_in.id_episode_orig,
            id_result_status_in        => rec_in.id_result_status,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution,
            flg_result_origin_in       => rec_in.flg_result_origin,
            id_prof_req_in             => rec_in.id_prof_req,
            notes_in                   => rec_in.notes,
            id_harvest_in              => rec_in.id_harvest,
            id_sample_type_in          => rec_in.id_sample_type,
            result_origin_notes_in     => rec_in.result_origin_notes,
            flg_mult_result_in         => rec_in.flg_mult_result
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN analysis_result%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_analysis_result_in      => rec_in.id_analysis_result,
            id_analysis_in             => rec_in.id_analysis,
            id_analysis_req_det_in     => rec_in.id_analysis_req_det,
            id_professional_in         => rec_in.id_professional,
            id_patient_in              => rec_in.id_patient,
            flg_type_in                => rec_in.flg_type,
            id_institution_in          => rec_in.id_institution,
            id_episode_in              => rec_in.id_episode,
            loinc_code_in              => rec_in.loinc_code,
            flg_status_in              => rec_in.flg_status,
            dt_analysis_result_tstz_in => rec_in.dt_analysis_result_tstz,
            dt_sample_in               => rec_in.dt_sample,
            id_visit_in                => rec_in.id_visit,
            id_exam_cat_in             => rec_in.id_exam_cat,
            flg_orig_analysis_in       => rec_in.flg_orig_analysis,
            id_episode_orig_in         => rec_in.id_episode_orig,
            id_result_status_in        => rec_in.id_result_status,
            create_user_in             => rec_in.create_user,
            create_time_in             => rec_in.create_time,
            create_institution_in      => rec_in.create_institution,
            update_user_in             => rec_in.update_user,
            update_time_in             => rec_in.update_time,
            update_institution_in      => rec_in.update_institution,
            flg_result_origin_in       => rec_in.flg_result_origin,
            id_prof_req_in             => rec_in.id_prof_req,
            notes_in                   => rec_in.notes,
            id_harvest_in              => rec_in.id_harvest,
            id_sample_type_in          => rec_in.id_sample_type,
            result_origin_notes_in     => rec_in.result_origin_notes,
            flg_mult_result_in         => rec_in.flg_mult_result
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_analysis_result_in      IN analysis_result.id_analysis_result%TYPE,
        id_analysis_in             IN analysis_result.id_analysis%TYPE DEFAULT NULL,
        id_analysis_req_det_in     IN analysis_result.id_analysis_req_det%TYPE DEFAULT NULL,
        id_professional_in         IN analysis_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in              IN analysis_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                IN analysis_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in          IN analysis_result.id_institution%TYPE DEFAULT NULL,
        id_episode_in              IN analysis_result.id_episode%TYPE DEFAULT NULL,
        loinc_code_in              IN analysis_result.loinc_code%TYPE DEFAULT NULL,
        flg_status_in              IN analysis_result.flg_status%TYPE DEFAULT NULL,
        dt_analysis_result_tstz_in IN analysis_result.dt_analysis_result_tstz%TYPE DEFAULT NULL,
        dt_sample_in               IN analysis_result.dt_sample%TYPE DEFAULT NULL,
        id_visit_in                IN analysis_result.id_visit%TYPE DEFAULT NULL,
        id_exam_cat_in             IN analysis_result.id_exam_cat%TYPE DEFAULT NULL,
        flg_orig_analysis_in       IN analysis_result.flg_orig_analysis%TYPE DEFAULT NULL,
        id_episode_orig_in         IN analysis_result.id_episode_orig%TYPE DEFAULT NULL,
        id_result_status_in        IN analysis_result.id_result_status%TYPE DEFAULT NULL,
        create_user_in             IN analysis_result.create_user%TYPE DEFAULT NULL,
        create_time_in             IN analysis_result.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN analysis_result.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN analysis_result.update_user%TYPE DEFAULT NULL,
        update_time_in             IN analysis_result.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN analysis_result.update_institution%TYPE DEFAULT NULL,
        flg_result_origin_in       IN analysis_result.flg_result_origin%TYPE DEFAULT NULL,
        id_prof_req_in             IN analysis_result.id_prof_req%TYPE DEFAULT NULL,
        notes_in                   IN analysis_result.notes%TYPE DEFAULT NULL,
        id_harvest_in              IN analysis_result.id_harvest%TYPE DEFAULT NULL,
        id_sample_type_in          IN analysis_result.id_sample_type%TYPE DEFAULT NULL,
        result_origin_notes_in     IN analysis_result.result_origin_notes%TYPE DEFAULT NULL,
        flg_mult_result_in         IN analysis_result.flg_mult_result%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE,
        rows_out                   OUT table_varchar
    ) IS
    BEGIN
        upd(id_analysis_result_in      => id_analysis_result_in,
            id_analysis_in             => id_analysis_in,
            id_analysis_req_det_in     => id_analysis_req_det_in,
            id_professional_in         => id_professional_in,
            id_patient_in              => id_patient_in,
            flg_type_in                => flg_type_in,
            id_institution_in          => id_institution_in,
            id_episode_in              => id_episode_in,
            loinc_code_in              => loinc_code_in,
            flg_status_in              => flg_status_in,
            dt_analysis_result_tstz_in => dt_analysis_result_tstz_in,
            dt_sample_in               => dt_sample_in,
            id_visit_in                => id_visit_in,
            id_exam_cat_in             => id_exam_cat_in,
            flg_orig_analysis_in       => flg_orig_analysis_in,
            id_episode_orig_in         => id_episode_orig_in,
            id_result_status_in        => id_result_status_in,
            create_user_in             => create_user_in,
            create_time_in             => create_time_in,
            create_institution_in      => create_institution_in,
            update_user_in             => update_user_in,
            update_time_in             => update_time_in,
            update_institution_in      => update_institution_in,
            flg_result_origin_in       => flg_result_origin_in,
            id_prof_req_in             => id_prof_req_in,
            notes_in                   => notes_in,
            id_harvest_in              => id_harvest_in,
            id_sample_type_in          => id_sample_type_in,
            result_origin_notes_in     => result_origin_notes_in,
            flg_mult_result_in         => flg_mult_result_in,
            handle_error_in            => handle_error_in,
            rows_out                   => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_analysis_result_in      => id_analysis_result_in,
                id_analysis_in             => id_analysis_in,
                id_analysis_req_det_in     => id_analysis_req_det_in,
                id_professional_in         => id_professional_in,
                id_patient_in              => id_patient_in,
                flg_type_in                => flg_type_in,
                id_institution_in          => id_institution_in,
                id_episode_in              => id_episode_in,
                loinc_code_in              => loinc_code_in,
                flg_status_in              => flg_status_in,
                dt_analysis_result_tstz_in => dt_analysis_result_tstz_in,
                dt_sample_in               => dt_sample_in,
                id_visit_in                => id_visit_in,
                id_exam_cat_in             => id_exam_cat_in,
                flg_orig_analysis_in       => flg_orig_analysis_in,
                id_episode_orig_in         => id_episode_orig_in,
                id_result_status_in        => id_result_status_in,
                create_user_in             => create_user_in,
                create_time_in             => create_time_in,
                create_institution_in      => create_institution_in,
                update_user_in             => update_user_in,
                update_time_in             => update_time_in,
                update_institution_in      => update_institution_in,
                flg_result_origin_in       => flg_result_origin_in,
                id_prof_req_in             => id_prof_req_in,
                notes_in                   => notes_in,
                id_harvest_in              => id_harvest_in,
                id_sample_type_in          => id_sample_type_in,
                result_origin_notes_in     => result_origin_notes_in,
                flg_mult_result_in         => flg_mult_result_in,
                handle_error_in            => handle_error_in,
                rows_out                   => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_analysis_result_in      IN analysis_result.id_analysis_result%TYPE,
        id_analysis_in             IN analysis_result.id_analysis%TYPE DEFAULT NULL,
        id_analysis_req_det_in     IN analysis_result.id_analysis_req_det%TYPE DEFAULT NULL,
        id_professional_in         IN analysis_result.id_professional%TYPE DEFAULT NULL,
        id_patient_in              IN analysis_result.id_patient%TYPE DEFAULT NULL,
        flg_type_in                IN analysis_result.flg_type%TYPE DEFAULT NULL,
        id_institution_in          IN analysis_result.id_institution%TYPE DEFAULT NULL,
        id_episode_in              IN analysis_result.id_episode%TYPE DEFAULT NULL,
        loinc_code_in              IN analysis_result.loinc_code%TYPE DEFAULT NULL,
        flg_status_in              IN analysis_result.flg_status%TYPE DEFAULT NULL,
        dt_analysis_result_tstz_in IN analysis_result.dt_analysis_result_tstz%TYPE DEFAULT NULL,
        dt_sample_in               IN analysis_result.dt_sample%TYPE DEFAULT NULL,
        id_visit_in                IN analysis_result.id_visit%TYPE DEFAULT NULL,
        id_exam_cat_in             IN analysis_result.id_exam_cat%TYPE DEFAULT NULL,
        flg_orig_analysis_in       IN analysis_result.flg_orig_analysis%TYPE DEFAULT NULL,
        id_episode_orig_in         IN analysis_result.id_episode_orig%TYPE DEFAULT NULL,
        id_result_status_in        IN analysis_result.id_result_status%TYPE DEFAULT NULL,
        create_user_in             IN analysis_result.create_user%TYPE DEFAULT NULL,
        create_time_in             IN analysis_result.create_time%TYPE DEFAULT NULL,
        create_institution_in      IN analysis_result.create_institution%TYPE DEFAULT NULL,
        update_user_in             IN analysis_result.update_user%TYPE DEFAULT NULL,
        update_time_in             IN analysis_result.update_time%TYPE DEFAULT NULL,
        update_institution_in      IN analysis_result.update_institution%TYPE DEFAULT NULL,
        flg_result_origin_in       IN analysis_result.flg_result_origin%TYPE DEFAULT NULL,
        id_prof_req_in             IN analysis_result.id_prof_req%TYPE DEFAULT NULL,
        notes_in                   IN analysis_result.notes%TYPE DEFAULT NULL,
        id_harvest_in              IN analysis_result.id_harvest%TYPE DEFAULT NULL,
        id_sample_type_in          IN analysis_result.id_sample_type%TYPE DEFAULT NULL,
        result_origin_notes_in     IN analysis_result.result_origin_notes%TYPE DEFAULT NULL,
        flg_mult_result_in         IN analysis_result.flg_mult_result%TYPE DEFAULT NULL,
        handle_error_in            IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_analysis_result_in,
                id_analysis_in,
                id_analysis_req_det_in,
                id_professional_in,
                id_patient_in,
                flg_type_in,
                id_institution_in,
                id_episode_in,
                loinc_code_in,
                flg_status_in,
                dt_analysis_result_tstz_in,
                dt_sample_in,
                id_visit_in,
                id_exam_cat_in,
                flg_orig_analysis_in,
                id_episode_orig_in,
                id_result_status_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                flg_result_origin_in,
                id_prof_req_in,
                notes_in,
                id_harvest_in,
                id_sample_type_in,
                result_origin_notes_in,
                flg_mult_result_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN analysis_result_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_analysis_result      id_analysis_result_cc;
        l_id_analysis             id_analysis_cc;
        l_id_analysis_req_det     id_analysis_req_det_cc;
        l_id_professional         id_professional_cc;
        l_id_patient              id_patient_cc;
        l_flg_type                flg_type_cc;
        l_id_institution          id_institution_cc;
        l_id_episode              id_episode_cc;
        l_loinc_code              loinc_code_cc;
        l_flg_status              flg_status_cc;
        l_dt_analysis_result_tstz dt_analysis_result_tstz_cc;
        l_dt_sample               dt_sample_cc;
        l_id_visit                id_visit_cc;
        l_id_exam_cat             id_exam_cat_cc;
        l_flg_orig_analysis       flg_orig_analysis_cc;
        l_id_episode_orig         id_episode_orig_cc;
        l_id_result_status        id_result_status_cc;
        l_create_user             create_user_cc;
        l_create_time             create_time_cc;
        l_create_institution      create_institution_cc;
        l_update_user             update_user_cc;
        l_update_time             update_time_cc;
        l_update_institution      update_institution_cc;
        l_flg_result_origin       flg_result_origin_cc;
        l_id_prof_req             id_prof_req_cc;
        l_notes                   notes_cc;
        l_id_harvest              id_harvest_cc;
        l_id_sample_type          id_sample_type_cc;
        l_result_origin_notes     result_origin_notes_cc;
        l_flg_mult_result         flg_mult_result_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_analysis_result(i) := col_in(i).id_analysis_result;
            l_id_analysis(i) := col_in(i).id_analysis;
            l_id_analysis_req_det(i) := col_in(i).id_analysis_req_det;
            l_id_professional(i) := col_in(i).id_professional;
            l_id_patient(i) := col_in(i).id_patient;
            l_flg_type(i) := col_in(i).flg_type;
            l_id_institution(i) := col_in(i).id_institution;
            l_id_episode(i) := col_in(i).id_episode;
            l_loinc_code(i) := col_in(i).loinc_code;
            l_flg_status(i) := col_in(i).flg_status;
            l_dt_analysis_result_tstz(i) := col_in(i).dt_analysis_result_tstz;
            l_dt_sample(i) := col_in(i).dt_sample;
            l_id_visit(i) := col_in(i).id_visit;
            l_id_exam_cat(i) := col_in(i).id_exam_cat;
            l_flg_orig_analysis(i) := col_in(i).flg_orig_analysis;
            l_id_episode_orig(i) := col_in(i).id_episode_orig;
            l_id_result_status(i) := col_in(i).id_result_status;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
            l_flg_result_origin(i) := col_in(i).flg_result_origin;
            l_id_prof_req(i) := col_in(i).id_prof_req;
            l_notes(i) := col_in(i).notes;
            l_id_harvest(i) := col_in(i).id_harvest;
            l_id_sample_type(i) := col_in(i).id_sample_type;
            l_result_origin_notes(i) := col_in(i).result_origin_notes;
            l_flg_mult_result(i) := col_in(i).flg_mult_result;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE analysis_result
                   SET id_analysis             = nvl(l_id_analysis(i), id_analysis),
                       id_analysis_req_det     = nvl(l_id_analysis_req_det(i), id_analysis_req_det),
                       id_professional         = nvl(l_id_professional(i), id_professional),
                       id_patient              = nvl(l_id_patient(i), id_patient),
                       flg_type                = nvl(l_flg_type(i), flg_type),
                       id_institution          = nvl(l_id_institution(i), id_institution),
                       id_episode              = nvl(l_id_episode(i), id_episode),
                       loinc_code              = nvl(l_loinc_code(i), loinc_code),
                       flg_status              = nvl(l_flg_status(i), flg_status),
                       dt_analysis_result_tstz = nvl(l_dt_analysis_result_tstz(i), dt_analysis_result_tstz),
                       dt_sample               = nvl(l_dt_sample(i), dt_sample),
                       id_visit                = nvl(l_id_visit(i), id_visit),
                       id_exam_cat             = nvl(l_id_exam_cat(i), id_exam_cat),
                       flg_orig_analysis       = nvl(l_flg_orig_analysis(i), flg_orig_analysis),
                       id_episode_orig         = nvl(l_id_episode_orig(i), id_episode_orig),
                       id_result_status        = nvl(l_id_result_status(i), id_result_status),
                       create_user             = nvl(l_create_user(i), create_user),
                       create_time             = nvl(l_create_time(i), create_time),
                       create_institution      = nvl(l_create_institution(i), create_institution),
                       update_user             = nvl(l_update_user(i), update_user),
                       update_time             = nvl(l_update_time(i), update_time),
                       update_institution      = nvl(l_update_institution(i), update_institution),
                       flg_result_origin       = nvl(l_flg_result_origin(i), flg_result_origin),
                       id_prof_req             = nvl(l_id_prof_req(i), id_prof_req),
                       notes                   = nvl(l_notes(i), notes),
                       id_harvest              = nvl(l_id_harvest(i), id_harvest),
                       id_sample_type          = nvl(l_id_sample_type(i), id_sample_type),
                       result_origin_notes     = nvl(l_result_origin_notes(i), result_origin_notes),
                       flg_mult_result         = nvl(l_flg_mult_result(i), flg_mult_result)
                 WHERE id_analysis_result = l_id_analysis_result(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE analysis_result
                   SET id_analysis             = l_id_analysis(i),
                       id_analysis_req_det     = l_id_analysis_req_det(i),
                       id_professional         = l_id_professional(i),
                       id_patient              = l_id_patient(i),
                       flg_type                = l_flg_type(i),
                       id_institution          = l_id_institution(i),
                       id_episode              = l_id_episode(i),
                       loinc_code              = l_loinc_code(i),
                       flg_status              = l_flg_status(i),
                       dt_analysis_result_tstz = l_dt_analysis_result_tstz(i),
                       dt_sample               = l_dt_sample(i),
                       id_visit                = l_id_visit(i),
                       id_exam_cat             = l_id_exam_cat(i),
                       flg_orig_analysis       = l_flg_orig_analysis(i),
                       id_episode_orig         = l_id_episode_orig(i),
                       id_result_status        = l_id_result_status(i),
                       create_user             = l_create_user(i),
                       create_time             = l_create_time(i),
                       create_institution      = l_create_institution(i),
                       update_user             = l_update_user(i),
                       update_time             = l_update_time(i),
                       update_institution      = l_update_institution(i),
                       flg_result_origin       = l_flg_result_origin(i),
                       id_prof_req             = l_id_prof_req(i),
                       notes                   = l_notes(i),
                       id_harvest              = l_id_harvest(i),
                       id_sample_type          = l_id_sample_type(i),
                       result_origin_notes     = l_result_origin_notes(i),
                       flg_mult_result         = l_flg_mult_result(i)
                 WHERE id_analysis_result = l_id_analysis_result(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN analysis_result_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE ANALYSIS_RESULT
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE ANALYSIS_RESULT
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE ANALYSIS_RESULT set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE ANALYSIS_RESULT set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_analysis_result_in IN analysis_result.id_analysis_result%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_result
         WHERE id_analysis_result = id_analysis_result_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_analysis_result_in IN analysis_result.id_analysis_result%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_analysis_result_in => id_analysis_result_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_ANALYSIS_RESULT
    PROCEDURE del_id_analysis_result
    (
        id_analysis_result_in IN analysis_result.id_analysis_result%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_result
         WHERE id_analysis_result = id_analysis_result_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_analysis_result;

    -- Delete all rows for primary key column ID_ANALYSIS_RESULT
    PROCEDURE del_id_analysis_result
    (
        id_analysis_result_in IN analysis_result.id_analysis_result%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_analysis_result(id_analysis_result_in => id_analysis_result_in,
                               handle_error_in       => handle_error_in,
                               rows_out              => rows_out);
    END del_id_analysis_result;

    PROCEDURE del_ares_analy_fk
    (
        id_analysis_in  IN analysis_result.id_analysis%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_result
         WHERE id_analysis = del_ares_analy_fk.id_analysis_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ares_analy_fk;

    PROCEDURE del_ares_analy_fk
    (
        id_analysis_in  IN analysis_result.id_analysis%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ares_analy_fk(id_analysis_in => id_analysis_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ares_analy_fk;

    PROCEDURE del_ares_ard_fk
    (
        id_analysis_req_det_in IN analysis_result.id_analysis_req_det%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_result
         WHERE id_analysis_req_det = del_ares_ard_fk.id_analysis_req_det_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ares_ard_fk;

    PROCEDURE del_ares_ard_fk
    (
        id_analysis_req_det_in IN analysis_result.id_analysis_req_det%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ares_ard_fk(id_analysis_req_det_in => id_analysis_req_det_in,
                        handle_error_in        => handle_error_in,
                        rows_out               => rows_out);
    END del_ares_ard_fk;

    PROCEDURE del_ares_ase_fk
    (
        id_analysis_in    IN analysis_result.id_analysis%TYPE,
        id_sample_type_in IN analysis_result.id_sample_type%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_result
         WHERE id_analysis = del_ares_ase_fk.id_analysis_in
           AND id_sample_type = del_ares_ase_fk.id_sample_type_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ares_ase_fk;

    PROCEDURE del_ares_ase_fk
    (
        id_analysis_in    IN analysis_result.id_analysis%TYPE,
        id_sample_type_in IN analysis_result.id_sample_type%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ares_ase_fk(id_analysis_in    => id_analysis_in,
                        id_sample_type_in => id_sample_type_in,
                        handle_error_in   => handle_error_in,
                        rows_out          => rows_out);
    END del_ares_ase_fk;

    PROCEDURE del_ares_ecat_fk
    (
        id_exam_cat_in  IN analysis_result.id_exam_cat%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_result
         WHERE id_exam_cat = del_ares_ecat_fk.id_exam_cat_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ares_ecat_fk;

    PROCEDURE del_ares_ecat_fk
    (
        id_exam_cat_in  IN analysis_result.id_exam_cat%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ares_ecat_fk(id_exam_cat_in => id_exam_cat_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ares_ecat_fk;

    PROCEDURE del_ares_epis_fk
    (
        id_episode_in   IN analysis_result.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_result
         WHERE id_episode = del_ares_epis_fk.id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ares_epis_fk;

    PROCEDURE del_ares_epis_fk
    (
        id_episode_in   IN analysis_result.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ares_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ares_epis_fk;

    PROCEDURE del_ares_epis_o_fk
    (
        id_episode_orig_in IN analysis_result.id_episode_orig%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_result
         WHERE id_episode_orig = del_ares_epis_o_fk.id_episode_orig_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ares_epis_o_fk;

    PROCEDURE del_ares_epis_o_fk
    (
        id_episode_orig_in IN analysis_result.id_episode_orig%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ares_epis_o_fk(id_episode_orig_in => id_episode_orig_in,
                           handle_error_in    => handle_error_in,
                           rows_out           => rows_out);
    END del_ares_epis_o_fk;

    PROCEDURE del_ares_hat_fk
    (
        id_harvest_in   IN analysis_result.id_harvest%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_result
         WHERE id_harvest = del_ares_hat_fk.id_harvest_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ares_hat_fk;

    PROCEDURE del_ares_hat_fk
    (
        id_harvest_in   IN analysis_result.id_harvest%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ares_hat_fk(id_harvest_in => id_harvest_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ares_hat_fk;

    PROCEDURE del_ares_inst_fk
    (
        id_institution_in IN analysis_result.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_result
         WHERE id_institution = del_ares_inst_fk.id_institution_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ares_inst_fk;

    PROCEDURE del_ares_inst_fk
    (
        id_institution_in IN analysis_result.id_institution%TYPE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ares_inst_fk(id_institution_in => id_institution_in,
                         handle_error_in   => handle_error_in,
                         rows_out          => rows_out);
    END del_ares_inst_fk;

    PROCEDURE del_ares_pat_fk
    (
        id_patient_in   IN analysis_result.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_result
         WHERE id_patient = del_ares_pat_fk.id_patient_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ares_pat_fk;

    PROCEDURE del_ares_pat_fk
    (
        id_patient_in   IN analysis_result.id_patient%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ares_pat_fk(id_patient_in => id_patient_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_ares_pat_fk;

    PROCEDURE del_ares_prof_fk
    (
        id_professional_in IN analysis_result.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_result
         WHERE id_professional = del_ares_prof_fk.id_professional_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ares_prof_fk;

    PROCEDURE del_ares_prof_fk
    (
        id_professional_in IN analysis_result.id_professional%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ares_prof_fk(id_professional_in => id_professional_in,
                         handle_error_in    => handle_error_in,
                         rows_out           => rows_out);
    END del_ares_prof_fk;

    PROCEDURE del_ares_rsu_fk
    (
        id_result_status_in IN analysis_result.id_result_status%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_result
         WHERE id_result_status = del_ares_rsu_fk.id_result_status_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_ares_rsu_fk;

    PROCEDURE del_ares_rsu_fk
    (
        id_result_status_in IN analysis_result.id_result_status%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_ares_rsu_fk(id_result_status_in => id_result_status_in,
                        handle_error_in     => handle_error_in,
                        rows_out            => rows_out);
    END del_ares_rsu_fk;

    PROCEDURE del_art_vit_fk
    (
        id_visit_in     IN analysis_result.id_visit%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM analysis_result
         WHERE id_visit = del_art_vit_fk.id_visit_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_art_vit_fk;

    PROCEDURE del_art_vit_fk
    (
        id_visit_in     IN analysis_result.id_visit%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_art_vit_fk(id_visit_in => id_visit_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_art_vit_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM ANALYSIS_RESULT';
        ELSE
            RETURN 'DELETE FROM ANALYSIS_RESULT WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'ANALYSIS_RESULT');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'ANALYSIS_RESULT');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(analysis_result_inout IN OUT analysis_result%ROWTYPE) IS
    BEGIN
        analysis_result_inout.id_analysis_result      := NULL;
        analysis_result_inout.id_analysis             := NULL;
        analysis_result_inout.id_analysis_req_det     := NULL;
        analysis_result_inout.id_professional         := NULL;
        analysis_result_inout.id_patient              := NULL;
        analysis_result_inout.flg_type                := NULL;
        analysis_result_inout.id_institution          := NULL;
        analysis_result_inout.id_episode              := NULL;
        analysis_result_inout.loinc_code              := NULL;
        analysis_result_inout.flg_status              := NULL;
        analysis_result_inout.dt_analysis_result_tstz := NULL;
        analysis_result_inout.dt_sample               := NULL;
        analysis_result_inout.id_visit                := NULL;
        analysis_result_inout.id_exam_cat             := NULL;
        analysis_result_inout.flg_orig_analysis       := NULL;
        analysis_result_inout.id_episode_orig         := NULL;
        analysis_result_inout.id_result_status        := NULL;
        analysis_result_inout.create_user             := NULL;
        analysis_result_inout.create_time             := NULL;
        analysis_result_inout.create_institution      := NULL;
        analysis_result_inout.update_user             := NULL;
        analysis_result_inout.update_time             := NULL;
        analysis_result_inout.update_institution      := NULL;
        analysis_result_inout.flg_result_origin       := NULL;
        analysis_result_inout.id_prof_req             := NULL;
        analysis_result_inout.notes                   := NULL;
        analysis_result_inout.id_harvest              := NULL;
        analysis_result_inout.id_sample_type          := NULL;
        analysis_result_inout.result_origin_notes     := NULL;
        analysis_result_inout.flg_mult_result         := NULL;
    END initrec;

    FUNCTION initrec RETURN analysis_result%ROWTYPE IS
        l_analysis_result analysis_result%ROWTYPE;
    BEGIN
        RETURN l_analysis_result;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN analysis_result_tc IS
        data analysis_result_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM analysis_result
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN analysis_result_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data analysis_result_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_analysis_result;
/
