/*-- Last Change Revision: $Rev: 2028257 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:42 +0100 (ter, 02 ago 2022) $*/

CREATE OR REPLACE PACKAGE BODY TS_MANAGEMENT_PLAN
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: Agosto 20, 2009 9:31:19
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);
    --
    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);
    --
    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);
    --
    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);
    --
    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);
    --
    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);
    --
    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    -- Private utilities
    PROCEDURE get_constraint_info
    (
        owner_out OUT all_constraints.owner%TYPE,
        name_out  OUT all_constraints.constraint_name%TYPE
    ) IS
        l_errm  VARCHAR2(2000) := dbms_utility.format_error_stack;
        dotloc  PLS_INTEGER;
        leftloc PLS_INTEGER;
    BEGIN
        dotloc    := instr(l_errm, '.');
        leftloc   := instr(l_errm, '(');
        owner_out := substr(l_errm, leftloc + 1, dotloc - leftloc - 1);
        name_out  := substr(l_errm, dotloc + 1, instr(l_errm, ')') - dotloc - 1);
    END get_constraint_info;
    -- Public programs

    PROCEDURE ins
    (
        id_management_plan_in  IN management_plan.id_management_plan%TYPE,
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
    
        INSERT INTO management_plan
            (id_management_plan,
             id_episode,
             id_epis_encounter,
             id_professional,
             id_management_level,
             flg_status,
             dt_register,
             admission_notes,
             immediate_needs,
             goals,
             plan,
             id_cancel_reason,
             notes_cancel,
             id_parent,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_management_plan_in,
             id_episode_in,
             id_epis_encounter_in,
             id_professional_in,
             id_management_level_in,
             flg_status_in,
             dt_register_in,
             admission_notes_in,
             immediate_needs_in,
             goals_in,
             plan_in,
             id_cancel_reason_in,
             notes_cancel_in,
             id_parent_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'MANAGEMENT_PLAN');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MANAGEMENT_PLAN');
                    IF l_name = 'MP_MP_PARENT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PARENT',
                                                        value_in           => id_parent_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END ins;

    PROCEDURE ins
    (
        id_management_plan_in  IN management_plan.id_management_plan%TYPE,
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(id_management_plan_in  => id_management_plan_in,
            id_episode_in          => id_episode_in,
            id_epis_encounter_in   => id_epis_encounter_in,
            id_professional_in     => id_professional_in,
            id_management_level_in => id_management_level_in,
            flg_status_in          => flg_status_in,
            dt_register_in         => dt_register_in,
            admission_notes_in     => admission_notes_in,
            immediate_needs_in     => immediate_needs_in,
            goals_in               => goals_in,
            plan_in                => plan_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            id_parent_in           => id_parent_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    /*
    START Special logic for handling LOB columns....
    */

    PROCEDURE n_ins_clobs_in_chunks
    (
        id_management_plan_in  IN management_plan.id_management_plan%TYPE,
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        clob_columns_in        IN varchar2_t,
        clob_pieces_in         IN varchar2_t
    ) IS
        l_admission_notes CLOB;
        l_immediate_needs CLOB;
        l_goals           CLOB;
        l_plan            CLOB;
        i                 PLS_INTEGER;
        current_column    VARCHAR2(30) := '';
    BEGIN
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.FIRST .. clob_columns_in.LAST
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'admission_notes_in' THEN
                            IF l_admission_notes IS NULL
                            THEN
                                dbms_lob.createtemporary(l_admission_notes, TRUE, dbms_lob.CALL);
                            END IF;
                        WHEN 'immediate_needs_in' THEN
                            IF l_immediate_needs IS NULL
                            THEN
                                dbms_lob.createtemporary(l_immediate_needs, TRUE, dbms_lob.CALL);
                            END IF;
                        WHEN 'goals_in' THEN
                            IF l_goals IS NULL
                            THEN
                                dbms_lob.createtemporary(l_goals, TRUE, dbms_lob.CALL);
                            END IF;
                        WHEN 'plan_in' THEN
                            IF l_plan IS NULL
                            THEN
                                dbms_lob.createtemporary(l_plan, TRUE, dbms_lob.CALL);
                            END IF;
                    END CASE; END IF;
            
                CASE current_column
                    WHEN 'admission_notes_in' THEN
                        dbms_lob.writeappend(l_admission_notes, length(clob_pieces_in(i)), clob_pieces_in(i));
                    WHEN 'immediate_needs_in' THEN
                        dbms_lob.writeappend(l_immediate_needs, length(clob_pieces_in(i)), clob_pieces_in(i));
                    WHEN 'goals_in' THEN
                        dbms_lob.writeappend(l_goals, length(clob_pieces_in(i)), clob_pieces_in(i));
                    WHEN 'plan_in' THEN
                        dbms_lob.writeappend(l_plan, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE; END IF;
        END LOOP;
    
        ins(id_management_plan_in  => id_management_plan_in,
            id_episode_in          => id_episode_in,
            id_epis_encounter_in   => id_epis_encounter_in,
            id_professional_in     => id_professional_in,
            id_management_level_in => id_management_level_in,
            flg_status_in          => flg_status_in,
            dt_register_in         => dt_register_in,
            admission_notes_in     => l_admission_notes,
            immediate_needs_in     => l_immediate_needs,
            goals_in               => l_goals,
            plan_in                => l_plan,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            id_parent_in           => id_parent_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in);
    
    END n_ins_clobs_in_chunks;

    PROCEDURE n_upd_clobs_in_chunks
    (
        id_management_plan_in  IN management_plan.id_management_plan%TYPE,
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        ignore_if_null_in      IN BOOLEAN := TRUE,
        handle_error_in        IN BOOLEAN := TRUE,
        clob_columns_in        IN varchar2_t,
        clob_pieces_in         IN varchar2_t
    ) IS
        l_admission_notes CLOB;
        l_immediate_needs CLOB;
        l_goals           CLOB;
        l_plan            CLOB;
        i                 PLS_INTEGER;
        current_column    VARCHAR2(30) := '';
        l_rows            PLS_INTEGER;
    BEGIN
    
        /* Be aware, PLSQL limitations on temporary clobs prevent multiple CLOB
        variables from pointing to the same temporary CLOB (it creates copies).
        Otherwise, the code could have been written a bit more compactly. */
    
        FOR i IN clob_columns_in.FIRST .. clob_columns_in.LAST
        LOOP
            /* Even when all clobs are null, DOA must send 1 row so skip it. */
            IF clob_columns_in(i) IS NOT NULL
            THEN
                IF current_column <> clob_columns_in(i)
                   OR current_column IS NULL
                THEN
                    current_column := lower(clob_columns_in(i));
                
                    CASE current_column
                        WHEN 'admission_notes_in' THEN
                            IF l_admission_notes IS NULL
                            THEN
                                dbms_lob.createtemporary(l_admission_notes, TRUE, dbms_lob.CALL);
                            END IF;
                        WHEN 'immediate_needs_in' THEN
                            IF l_immediate_needs IS NULL
                            THEN
                                dbms_lob.createtemporary(l_immediate_needs, TRUE, dbms_lob.CALL);
                            END IF;
                        WHEN 'goals_in' THEN
                            IF l_goals IS NULL
                            THEN
                                dbms_lob.createtemporary(l_goals, TRUE, dbms_lob.CALL);
                            END IF;
                        WHEN 'plan_in' THEN
                            IF l_plan IS NULL
                            THEN
                                dbms_lob.createtemporary(l_plan, TRUE, dbms_lob.CALL);
                            END IF;
                    END CASE; END IF;
            
                CASE current_column
                    WHEN 'admission_notes_in' THEN
                        dbms_lob.writeappend(l_admission_notes, length(clob_pieces_in(i)), clob_pieces_in(i));
                    WHEN 'immediate_needs_in' THEN
                        dbms_lob.writeappend(l_immediate_needs, length(clob_pieces_in(i)), clob_pieces_in(i));
                    WHEN 'goals_in' THEN
                        dbms_lob.writeappend(l_goals, length(clob_pieces_in(i)), clob_pieces_in(i));
                    WHEN 'plan_in' THEN
                        dbms_lob.writeappend(l_plan, length(clob_pieces_in(i)), clob_pieces_in(i));
                END CASE; END IF;
        END LOOP;
    
        upd(id_management_plan_in  => id_management_plan_in,
            id_episode_in          => id_episode_in,
            id_epis_encounter_in   => id_epis_encounter_in,
            id_professional_in     => id_professional_in,
            id_management_level_in => id_management_level_in,
            flg_status_in          => flg_status_in,
            dt_register_in         => dt_register_in,
            admission_notes_in     => l_admission_notes,
            immediate_needs_in     => l_immediate_needs,
            goals_in               => l_goals,
            plan_in                => l_plan,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            id_parent_in           => id_parent_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in);
    END n_upd_clobs_in_chunks;

    PROCEDURE n_upd_ins_clobs_in_chunks
    (
        id_management_plan_in  IN management_plan.id_management_plan%TYPE,
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        ignore_if_null_in      IN BOOLEAN DEFAULT TRUE,
        handle_error_in        IN BOOLEAN DEFAULT TRUE,
        clob_columns_in        IN varchar2_t,
        clob_pieces_in         IN varchar2_t
    ) IS
    BEGIN
        n_upd_clobs_in_chunks(id_management_plan_in  => id_management_plan_in,
                              id_episode_in          => id_episode_in,
                              id_epis_encounter_in   => id_epis_encounter_in,
                              id_professional_in     => id_professional_in,
                              id_management_level_in => id_management_level_in,
                              flg_status_in          => flg_status_in,
                              dt_register_in         => dt_register_in,
                              id_cancel_reason_in    => id_cancel_reason_in,
                              notes_cancel_in        => notes_cancel_in,
                              id_parent_in           => id_parent_in,
                              create_user_in         => create_user_in,
                              create_time_in         => create_time_in,
                              create_institution_in  => create_institution_in,
                              update_user_in         => update_user_in,
                              update_time_in         => update_time_in,
                              update_institution_in  => update_institution_in,
                              clob_columns_in        => clob_columns_in,
                              clob_pieces_in         => clob_pieces_in,
                              ignore_if_null_in      => ignore_if_null_in,
                              handle_error_in        => handle_error_in);
    
        IF SQL%ROWCOUNT = 0
        THEN
            n_ins_clobs_in_chunks(id_management_plan_in  => id_management_plan_in,
                                  id_episode_in          => id_episode_in,
                                  id_epis_encounter_in   => id_epis_encounter_in,
                                  id_professional_in     => id_professional_in,
                                  id_management_level_in => id_management_level_in,
                                  flg_status_in          => flg_status_in,
                                  dt_register_in         => dt_register_in,
                                  id_cancel_reason_in    => id_cancel_reason_in,
                                  notes_cancel_in        => notes_cancel_in,
                                  id_parent_in           => id_parent_in,
                                  create_user_in         => create_user_in,
                                  create_time_in         => create_time_in,
                                  create_institution_in  => create_institution_in,
                                  update_user_in         => update_user_in,
                                  update_time_in         => update_time_in,
                                  update_institution_in  => update_institution_in,
                                  clob_columns_in        => clob_columns_in,
                                  clob_pieces_in         => clob_pieces_in,
                                  handle_error_in        => handle_error_in);
        END IF;
    END n_upd_ins_clobs_in_chunks;

    /*
    END Special logic for handling LOB columns.
    */

    PROCEDURE ins
    (
        rec_in          IN management_plan%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec management_plan%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_management_plan := next_key(sequence_in);
        END IF;
        ins(id_management_plan_in  => l_rec.id_management_plan,
            id_episode_in          => l_rec.id_episode,
            id_epis_encounter_in   => l_rec.id_epis_encounter,
            id_professional_in     => l_rec.id_professional,
            id_management_level_in => l_rec.id_management_level,
            flg_status_in          => l_rec.flg_status,
            dt_register_in         => l_rec.dt_register,
            admission_notes_in     => l_rec.admission_notes,
            immediate_needs_in     => l_rec.immediate_needs,
            goals_in               => l_rec.goals,
            plan_in                => l_rec.plan,
            id_cancel_reason_in    => l_rec.id_cancel_reason,
            notes_cancel_in        => l_rec.notes_cancel,
            id_parent_in           => l_rec.id_parent,
            create_user_in         => l_rec.create_user,
            create_time_in         => l_rec.create_time,
            create_institution_in  => l_rec.create_institution,
            update_user_in         => l_rec.update_user,
            update_time_in         => l_rec.update_time,
            update_institution_in  => l_rec.update_institution,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN management_plan%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    
    END ins;

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN management_plan.id_management_plan%TYPE
    
     IS
        retval management_plan.id_management_plan%TYPE;
    
    BEGIN
        IF sequence_in IS NULL
        THEN
            SELECT seq_management_plan.NEXTVAL
              INTO retval
              FROM dual;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'SEQUENCE-GENERATION-FAILURE',
                                            name1_in      => 'SEQUENCE',
                                            value1_in     => nvl(sequence_in, 'seq_MANAGEMENT_PLAN'));
    END next_key;

    PROCEDURE ins
    (
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        id_management_plan_out IN OUT management_plan.id_management_plan%TYPE,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky management_plan.id_management_plan%TYPE := next_key;
    BEGIN
        ins(id_management_plan_in  => l_pky,
            id_episode_in          => id_episode_in,
            id_epis_encounter_in   => id_epis_encounter_in,
            id_professional_in     => id_professional_in,
            id_management_level_in => id_management_level_in,
            flg_status_in          => flg_status_in,
            dt_register_in         => dt_register_in,
            admission_notes_in     => admission_notes_in,
            immediate_needs_in     => immediate_needs_in,
            goals_in               => goals_in,
            plan_in                => plan_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            id_parent_in           => id_parent_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        id_management_plan_out := l_pky;
    END ins;

    PROCEDURE ins
    (
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        id_management_plan_out IN OUT management_plan.id_management_plan%TYPE,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in          => id_episode_in,
            id_epis_encounter_in   => id_epis_encounter_in,
            id_professional_in     => id_professional_in,
            id_management_level_in => id_management_level_in,
            flg_status_in          => flg_status_in,
            dt_register_in         => dt_register_in,
            admission_notes_in     => admission_notes_in,
            immediate_needs_in     => immediate_needs_in,
            goals_in               => goals_in,
            plan_in                => plan_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            id_parent_in           => id_parent_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_management_plan_out => id_management_plan_out,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    FUNCTION ins
    (
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) RETURN management_plan.id_management_plan%TYPE IS
        l_pky management_plan.id_management_plan%TYPE := next_key;
    BEGIN
        ins(id_management_plan_in  => l_pky,
            id_episode_in          => id_episode_in,
            id_epis_encounter_in   => id_epis_encounter_in,
            id_professional_in     => id_professional_in,
            id_management_level_in => id_management_level_in,
            flg_status_in          => flg_status_in,
            dt_register_in         => dt_register_in,
            admission_notes_in     => admission_notes_in,
            immediate_needs_in     => immediate_needs_in,
            goals_in               => goals_in,
            plan_in                => plan_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            id_parent_in           => id_parent_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    FUNCTION ins
    (
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) RETURN management_plan.id_management_plan%TYPE IS
        l_pky    management_plan.id_management_plan%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_management_plan_in  => l_pky,
            id_episode_in          => id_episode_in,
            id_epis_encounter_in   => id_epis_encounter_in,
            id_professional_in     => id_professional_in,
            id_management_level_in => id_management_level_in,
            flg_status_in          => flg_status_in,
            dt_register_in         => dt_register_in,
            admission_notes_in     => admission_notes_in,
            immediate_needs_in     => immediate_needs_in,
            goals_in               => goals_in,
            plan_in                => plan_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            id_parent_in           => id_parent_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
        l_pky management_plan.id_management_plan%TYPE := next_key;
    BEGIN
        ins(id_management_plan_in  => l_pky,
            id_episode_in          => id_episode_in,
            id_epis_encounter_in   => id_epis_encounter_in,
            id_professional_in     => id_professional_in,
            id_management_level_in => id_management_level_in,
            flg_status_in          => flg_status_in,
            dt_register_in         => dt_register_in,
            admission_notes_in     => admission_notes_in,
            immediate_needs_in     => immediate_needs_in,
            goals_in               => goals_in,
            plan_in                => plan_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            id_parent_in           => id_parent_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        l_pky    management_plan.id_management_plan%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_management_plan_in  => l_pky,
            id_episode_in          => id_episode_in,
            id_epis_encounter_in   => id_epis_encounter_in,
            id_professional_in     => id_professional_in,
            id_management_level_in => id_management_level_in,
            flg_status_in          => flg_status_in,
            dt_register_in         => dt_register_in,
            admission_notes_in     => admission_notes_in,
            immediate_needs_in     => immediate_needs_in,
            goals_in               => goals_in,
            plan_in                => plan_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            id_parent_in           => id_parent_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rows_in         IN management_plan_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.COUNT = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
                INSERT INTO management_plan
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    EXCEPTION
        WHEN e_forall_error THEN
            -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
            -- here if any error occurs. We can then save all the error
            -- information out to the error instance.
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                <<bulk_handler>>
                DECLARE
                    l_err_instance_id NUMBER;
                BEGIN
                    -- For each error, write to the log.
                    FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
                    LOOP
                        pk_alert_exceptions.register_error(error_name_in       => 'FORALL-INSERT-FAILURE',
                                                           err_instance_id_out => l_err_instance_id);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'BINDING_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_INDEX,
                                                        validate_in        => FALSE);
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ERROR_AT_ROW_' || indx,
                                                        value_in           => SQL%BULK_EXCEPTIONS(indx).ERROR_CODE,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_MANAGEMENT_PLAN _' || indx,
                                                        value_in           => rows_in(indx).id_management_plan,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPISODE _' || indx,
                                                        value_in           => rows_in(indx).id_episode,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_EPIS_ENCOUNTER _' || indx,
                                                        value_in           => rows_in(indx).id_epis_encounter,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PROFESSIONAL _' || indx,
                                                        value_in           => rows_in(indx).id_professional,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_MANAGEMENT_LEVEL _' || indx,
                                                        value_in           => rows_in(indx).id_management_level,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'FLG_STATUS _' || indx,
                                                        value_in           => rows_in(indx).flg_status,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'DT_REGISTER _' || indx,
                                                        value_in           => rows_in(indx).dt_register,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_CANCEL_REASON _' || indx,
                                                        value_in           => rows_in(indx).id_cancel_reason,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'NOTES_CANCEL _' || indx,
                                                        value_in           => rows_in(indx).notes_cancel,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'ID_PARENT _' || indx,
                                                        value_in           => rows_in(indx).id_parent,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_USER _' || indx,
                                                        value_in           => rows_in(indx).create_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).create_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'CREATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).create_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_USER _' || indx,
                                                        value_in           => rows_in(indx).update_user,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_TIME _' || indx,
                                                        value_in           => rows_in(indx).update_time,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.add_context(err_instance_id_in => l_err_instance_id,
                                                        name_in            => 'UPDATE_INSTITUTION _' || indx,
                                                        value_in           => rows_in(indx).update_institution,
                                                        validate_in        => FALSE);
                    
                        pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_err_instance_id);
                    END LOOP;
                END bulk_handler;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alert_exceptions.raise_error(error_name_in => 'FORALL-INSERT-FAILURE',
                                                name1_in      => 'TABLE_NAME',
                                                value1_in     => 'MANAGEMENT_PLAN',
                                                name2_in      => 'ROW_COUNT',
                                                value2_in     => rows_in.COUNT);
            END IF;
    END ins;

    PROCEDURE ins
    (
        rows_in         IN management_plan_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    PROCEDURE upd
    (
        id_management_plan_in   IN management_plan.id_management_plan%TYPE,
        id_episode_in           IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        id_epis_encounter_in    IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_epis_encounter_nin   IN BOOLEAN := TRUE,
        id_professional_in      IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        id_management_level_in  IN management_plan.id_management_level%TYPE DEFAULT NULL,
        id_management_level_nin IN BOOLEAN := TRUE,
        flg_status_in           IN management_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        dt_register_in          IN management_plan.dt_register%TYPE DEFAULT NULL,
        dt_register_nin         IN BOOLEAN := TRUE,
        admission_notes_in      IN management_plan.admission_notes%TYPE DEFAULT NULL,
        admission_notes_nin     IN BOOLEAN := TRUE,
        immediate_needs_in      IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        immediate_needs_nin     IN BOOLEAN := TRUE,
        goals_in                IN management_plan.goals%TYPE DEFAULT NULL,
        goals_nin               IN BOOLEAN := TRUE,
        plan_in                 IN management_plan.plan%TYPE DEFAULT NULL,
        plan_nin                IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        notes_cancel_in         IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_parent_in            IN management_plan.id_parent%TYPE DEFAULT NULL,
        id_parent_nin           IN BOOLEAN := TRUE,
        create_user_in          IN management_plan.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN management_plan.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN management_plan.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN management_plan.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN management_plan.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN management_plan.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_id_episode_n          NUMBER(1);
        l_id_epis_encounter_n   NUMBER(1);
        l_id_professional_n     NUMBER(1);
        l_id_management_level_n NUMBER(1);
        l_flg_status_n          NUMBER(1);
        l_dt_register_n         NUMBER(1);
        l_admission_notes_n     NUMBER(1);
        l_immediate_needs_n     NUMBER(1);
        l_goals_n               NUMBER(1);
        l_plan_n                NUMBER(1);
        l_id_cancel_reason_n    NUMBER(1);
        l_notes_cancel_n        NUMBER(1);
        l_id_parent_n           NUMBER(1);
        l_create_user_n         NUMBER(1);
        l_create_time_n         NUMBER(1);
        l_create_institution_n  NUMBER(1);
        l_update_user_n         NUMBER(1);
        l_update_time_n         NUMBER(1);
        l_update_institution_n  NUMBER(1);
    BEGIN
    
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
        l_id_epis_encounter_n   := sys.diutil.bool_to_int(id_epis_encounter_nin);
        l_id_professional_n     := sys.diutil.bool_to_int(id_professional_nin);
        l_id_management_level_n := sys.diutil.bool_to_int(id_management_level_nin);
        l_flg_status_n          := sys.diutil.bool_to_int(flg_status_nin);
        l_dt_register_n         := sys.diutil.bool_to_int(dt_register_nin);
        l_admission_notes_n     := sys.diutil.bool_to_int(admission_notes_nin);
        l_immediate_needs_n     := sys.diutil.bool_to_int(immediate_needs_nin);
        l_goals_n               := sys.diutil.bool_to_int(goals_nin);
        l_plan_n                := sys.diutil.bool_to_int(plan_nin);
        l_id_cancel_reason_n    := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n        := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_parent_n           := sys.diutil.bool_to_int(id_parent_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
    
        UPDATE management_plan
           SET id_episode          = decode(l_id_episode_n, 0, id_episode_in, nvl(id_episode_in, id_episode)),
               id_epis_encounter   = decode(l_id_epis_encounter_n,
                                            0,
                                            id_epis_encounter_in,
                                            nvl(id_epis_encounter_in, id_epis_encounter)),
               id_professional     = decode(l_id_professional_n,
                                            0,
                                            id_professional_in,
                                            nvl(id_professional_in, id_professional)),
               id_management_level = decode(l_id_management_level_n,
                                            0,
                                            id_management_level_in,
                                            nvl(id_management_level_in, id_management_level)),
               flg_status          = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               dt_register         = decode(l_dt_register_n, 0, dt_register_in, nvl(dt_register_in, dt_register)),
               admission_notes     = decode(l_admission_notes_n,
                                            0,
                                            admission_notes_in,
                                            nvl(admission_notes_in, admission_notes)),
               immediate_needs     = decode(l_immediate_needs_n,
                                            0,
                                            immediate_needs_in,
                                            nvl(immediate_needs_in, immediate_needs)),
               goals               = decode(l_goals_n, 0, goals_in, nvl(goals_in, goals)),
               plan                = decode(l_plan_n, 0, plan_in, nvl(plan_in, plan)),
               id_cancel_reason    = decode(l_id_cancel_reason_n,
                                            0,
                                            id_cancel_reason_in,
                                            nvl(id_cancel_reason_in, id_cancel_reason)),
               notes_cancel        = decode(l_notes_cancel_n, 0, notes_cancel_in, nvl(notes_cancel_in, notes_cancel)),
               id_parent           = decode(l_id_parent_n, 0, id_parent_in, nvl(id_parent_in, id_parent)),
               create_user         = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time         = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution  = decode(l_create_institution_n,
                                            0,
                                            create_institution_in,
                                            nvl(create_institution_in, create_institution)),
               update_user         = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time         = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution  = decode(l_update_institution_n,
                                            0,
                                            update_institution_in,
                                            nvl(update_institution_in, update_institution))
         WHERE id_management_plan = id_management_plan_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'MANAGEMENT_PLAN');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MANAGEMENT_PLAN');
                    IF l_name = 'MP_MP_PARENT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PARENT',
                                                        value_in           => id_parent_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_management_plan_in   IN management_plan.id_management_plan%TYPE,
        id_episode_in           IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        id_epis_encounter_in    IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_epis_encounter_nin   IN BOOLEAN := TRUE,
        id_professional_in      IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        id_management_level_in  IN management_plan.id_management_level%TYPE DEFAULT NULL,
        id_management_level_nin IN BOOLEAN := TRUE,
        flg_status_in           IN management_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        dt_register_in          IN management_plan.dt_register%TYPE DEFAULT NULL,
        dt_register_nin         IN BOOLEAN := TRUE,
        admission_notes_in      IN management_plan.admission_notes%TYPE DEFAULT NULL,
        admission_notes_nin     IN BOOLEAN := TRUE,
        immediate_needs_in      IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        immediate_needs_nin     IN BOOLEAN := TRUE,
        goals_in                IN management_plan.goals%TYPE DEFAULT NULL,
        goals_nin               IN BOOLEAN := TRUE,
        plan_in                 IN management_plan.plan%TYPE DEFAULT NULL,
        plan_nin                IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        notes_cancel_in         IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_parent_in            IN management_plan.id_parent%TYPE DEFAULT NULL,
        id_parent_nin           IN BOOLEAN := TRUE,
        create_user_in          IN management_plan.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN management_plan.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN management_plan.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN management_plan.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN management_plan.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN management_plan.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_management_plan_in   => id_management_plan_in,
            id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            id_epis_encounter_in    => id_epis_encounter_in,
            id_epis_encounter_nin   => id_epis_encounter_nin,
            id_professional_in      => id_professional_in,
            id_professional_nin     => id_professional_nin,
            id_management_level_in  => id_management_level_in,
            id_management_level_nin => id_management_level_nin,
            flg_status_in           => flg_status_in,
            flg_status_nin          => flg_status_nin,
            dt_register_in          => dt_register_in,
            dt_register_nin         => dt_register_nin,
            admission_notes_in      => admission_notes_in,
            admission_notes_nin     => admission_notes_nin,
            immediate_needs_in      => immediate_needs_in,
            immediate_needs_nin     => immediate_needs_nin,
            goals_in                => goals_in,
            goals_nin               => goals_nin,
            plan_in                 => plan_in,
            plan_nin                => plan_nin,
            id_cancel_reason_in     => id_cancel_reason_in,
            id_cancel_reason_nin    => id_cancel_reason_nin,
            notes_cancel_in         => notes_cancel_in,
            notes_cancel_nin        => notes_cancel_nin,
            id_parent_in            => id_parent_in,
            id_parent_nin           => id_parent_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        id_episode_in           IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        id_epis_encounter_in    IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_epis_encounter_nin   IN BOOLEAN := TRUE,
        id_professional_in      IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        id_management_level_in  IN management_plan.id_management_level%TYPE DEFAULT NULL,
        id_management_level_nin IN BOOLEAN := TRUE,
        flg_status_in           IN management_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        dt_register_in          IN management_plan.dt_register%TYPE DEFAULT NULL,
        dt_register_nin         IN BOOLEAN := TRUE,
        admission_notes_in      IN management_plan.admission_notes%TYPE DEFAULT NULL,
        admission_notes_nin     IN BOOLEAN := TRUE,
        immediate_needs_in      IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        immediate_needs_nin     IN BOOLEAN := TRUE,
        goals_in                IN management_plan.goals%TYPE DEFAULT NULL,
        goals_nin               IN BOOLEAN := TRUE,
        plan_in                 IN management_plan.plan%TYPE DEFAULT NULL,
        plan_nin                IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        notes_cancel_in         IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_parent_in            IN management_plan.id_parent%TYPE DEFAULT NULL,
        id_parent_nin           IN BOOLEAN := TRUE,
        create_user_in          IN management_plan.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN management_plan.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN management_plan.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN management_plan.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN management_plan.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN management_plan.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                   VARCHAR2(32767);
        l_rows_out              table_varchar;
        l_id_episode_n          NUMBER(1);
        l_id_epis_encounter_n   NUMBER(1);
        l_id_professional_n     NUMBER(1);
        l_id_management_level_n NUMBER(1);
        l_flg_status_n          NUMBER(1);
        l_dt_register_n         NUMBER(1);
        l_admission_notes_n     NUMBER(1);
        l_immediate_needs_n     NUMBER(1);
        l_goals_n               NUMBER(1);
        l_plan_n                NUMBER(1);
        l_id_cancel_reason_n    NUMBER(1);
        l_notes_cancel_n        NUMBER(1);
        l_id_parent_n           NUMBER(1);
        l_create_user_n         NUMBER(1);
        l_create_time_n         NUMBER(1);
        l_create_institution_n  NUMBER(1);
        l_update_user_n         NUMBER(1);
        l_update_time_n         NUMBER(1);
        l_update_institution_n  NUMBER(1);
        id_management_plan_in   management_plan.id_management_plan%TYPE;
    BEGIN
    
        l_id_episode_n          := sys.diutil.bool_to_int(id_episode_nin);
        l_id_epis_encounter_n   := sys.diutil.bool_to_int(id_epis_encounter_nin);
        l_id_professional_n     := sys.diutil.bool_to_int(id_professional_nin);
        l_id_management_level_n := sys.diutil.bool_to_int(id_management_level_nin);
        l_flg_status_n          := sys.diutil.bool_to_int(flg_status_nin);
        l_dt_register_n         := sys.diutil.bool_to_int(dt_register_nin);
        l_admission_notes_n     := sys.diutil.bool_to_int(admission_notes_nin);
        l_immediate_needs_n     := sys.diutil.bool_to_int(immediate_needs_nin);
        l_goals_n               := sys.diutil.bool_to_int(goals_nin);
        l_plan_n                := sys.diutil.bool_to_int(plan_nin);
        l_id_cancel_reason_n    := sys.diutil.bool_to_int(id_cancel_reason_nin);
        l_notes_cancel_n        := sys.diutil.bool_to_int(notes_cancel_nin);
        l_id_parent_n           := sys.diutil.bool_to_int(id_parent_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
    
        l_sql := 'UPDATE MANAGEMENT_PLAN SET ' || ' ID_EPISODE = decode (' || l_id_episode_n ||
                 ',0,:id_episode_in, NVL (:id_episode_in, ID_EPISODE)) ' || ',' || ' ID_EPIS_ENCOUNTER = decode (' ||
                 l_id_epis_encounter_n || ',0,:id_epis_encounter_in, NVL (:id_epis_encounter_in, ID_EPIS_ENCOUNTER)) ' || ',' ||
                 ' ID_PROFESSIONAL = decode (' || l_id_professional_n ||
                 ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) ' || ',' ||
                 ' ID_MANAGEMENT_LEVEL = decode (' || l_id_management_level_n ||
                 ',0,:id_management_level_in, NVL (:id_management_level_in, ID_MANAGEMENT_LEVEL)) ' || ',' ||
                 ' FLG_STATUS = decode (' || l_flg_status_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) ' || ',' ||
                 ' DT_REGISTER = decode (' || l_dt_register_n ||
                 ',0,:dt_register_in, NVL (:dt_register_in, DT_REGISTER)) ' || ',' || ' ADMISSION_NOTES = decode (' ||
                 l_admission_notes_n || ',0,:admission_notes_in, NVL (:admission_notes_in, ADMISSION_NOTES)) ' || ',' ||
                 ' IMMEDIATE_NEEDS = decode (' || l_immediate_needs_n ||
                 ',0,:immediate_needs_in, NVL (:immediate_needs_in, IMMEDIATE_NEEDS)) ' || ',' || ' GOALS = decode (' ||
                 l_goals_n || ',0,:goals_in, NVL (:goals_in, GOALS)) ' || ',' || ' PLAN = decode (' || l_plan_n ||
                 ',0,:plan_in, NVL (:plan_in, PLAN)) ' || ',' || ' ID_CANCEL_REASON = decode (' || l_id_cancel_reason_n ||
                 ',0,:id_cancel_reason_in, NVL (:id_cancel_reason_in, ID_CANCEL_REASON)) ' || ',' ||
                 ' NOTES_CANCEL = decode (' || l_notes_cancel_n ||
                 ',0,:notes_cancel_in, NVL (:notes_cancel_in, NOTES_CANCEL)) ' || ',' || ' ID_PARENT = decode (' ||
                 l_id_parent_n || ',0,:id_parent_in, NVL (:id_parent_in, ID_PARENT)) ' || ',' ||
                 ' CREATE_USER = decode (' || l_create_user_n ||
                 ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) ' || ',' || ' CREATE_TIME = decode (' ||
                 l_create_time_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) ' || ',' ||
                 ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                 ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) ' || ',' ||
                 ' UPDATE_USER = decode (' || l_update_user_n ||
                 ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) ' || ',' || ' UPDATE_TIME = decode (' ||
                 l_update_time_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) ' || ',' ||
                 ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                 ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) ' || ' where ' ||
                 nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
    
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_episode_in, id_epis_encounter_in, id_professional_in, id_management_level_in, flg_status_in, dt_register_in, admission_notes_in, immediate_needs_in, goals_in, plan_in, id_cancel_reason_in, notes_cancel_in, id_parent_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
    
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
    
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF FALSE
                    THEN
                        NULL; -- Placeholder in case no unique indexes
                    ELSE
                        pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                        name1_in      => 'OWNER',
                                                        value1_in     => l_owner,
                                                        name2_in      => 'CONSTRAINT_NAME',
                                                        value2_in     => l_name,
                                                        name3_in      => 'TABLE_NAME',
                                                        value3_in     => 'MANAGEMENT_PLAN');
                    END IF;
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MANAGEMENT_PLAN');
                    IF l_name = 'MP_MP_PARENT_FK'
                    THEN
                        -- Add a context value for each column
                        pk_alert_exceptions.add_context(err_instance_id_in => l_id,
                                                        name_in            => 'ID_PARENT',
                                                        value_in           => id_parent_in);
                    END IF;
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END upd;

    PROCEDURE upd
    (
        id_episode_in           IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_episode_nin          IN BOOLEAN := TRUE,
        id_epis_encounter_in    IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_epis_encounter_nin   IN BOOLEAN := TRUE,
        id_professional_in      IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_professional_nin     IN BOOLEAN := TRUE,
        id_management_level_in  IN management_plan.id_management_level%TYPE DEFAULT NULL,
        id_management_level_nin IN BOOLEAN := TRUE,
        flg_status_in           IN management_plan.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        dt_register_in          IN management_plan.dt_register%TYPE DEFAULT NULL,
        dt_register_nin         IN BOOLEAN := TRUE,
        admission_notes_in      IN management_plan.admission_notes%TYPE DEFAULT NULL,
        admission_notes_nin     IN BOOLEAN := TRUE,
        immediate_needs_in      IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        immediate_needs_nin     IN BOOLEAN := TRUE,
        goals_in                IN management_plan.goals%TYPE DEFAULT NULL,
        goals_nin               IN BOOLEAN := TRUE,
        plan_in                 IN management_plan.plan%TYPE DEFAULT NULL,
        plan_nin                IN BOOLEAN := TRUE,
        id_cancel_reason_in     IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        id_cancel_reason_nin    IN BOOLEAN := TRUE,
        notes_cancel_in         IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        notes_cancel_nin        IN BOOLEAN := TRUE,
        id_parent_in            IN management_plan.id_parent%TYPE DEFAULT NULL,
        id_parent_nin           IN BOOLEAN := TRUE,
        create_user_in          IN management_plan.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN management_plan.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN management_plan.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN management_plan.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN management_plan.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN management_plan.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        where_in                VARCHAR2 DEFAULT NULL,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in           => id_episode_in,
            id_episode_nin          => id_episode_nin,
            id_epis_encounter_in    => id_epis_encounter_in,
            id_epis_encounter_nin   => id_epis_encounter_nin,
            id_professional_in      => id_professional_in,
            id_professional_nin     => id_professional_nin,
            id_management_level_in  => id_management_level_in,
            id_management_level_nin => id_management_level_nin,
            flg_status_in           => flg_status_in,
            flg_status_nin          => flg_status_nin,
            dt_register_in          => dt_register_in,
            dt_register_nin         => dt_register_nin,
            admission_notes_in      => admission_notes_in,
            admission_notes_nin     => admission_notes_nin,
            immediate_needs_in      => immediate_needs_in,
            immediate_needs_nin     => immediate_needs_nin,
            goals_in                => goals_in,
            goals_nin               => goals_nin,
            plan_in                 => plan_in,
            plan_nin                => plan_nin,
            id_cancel_reason_in     => id_cancel_reason_in,
            id_cancel_reason_nin    => id_cancel_reason_nin,
            notes_cancel_in         => notes_cancel_in,
            notes_cancel_nin        => notes_cancel_nin,
            id_parent_in            => id_parent_in,
            id_parent_nin           => id_parent_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN management_plan%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_management_plan_in  => rec_in.id_management_plan,
            id_episode_in          => rec_in.id_episode,
            id_epis_encounter_in   => rec_in.id_epis_encounter,
            id_professional_in     => rec_in.id_professional,
            id_management_level_in => rec_in.id_management_level,
            flg_status_in          => rec_in.flg_status,
            dt_register_in         => rec_in.dt_register,
            admission_notes_in     => rec_in.admission_notes,
            immediate_needs_in     => rec_in.immediate_needs,
            goals_in               => rec_in.goals,
            plan_in                => rec_in.plan,
            id_cancel_reason_in    => rec_in.id_cancel_reason,
            notes_cancel_in        => rec_in.notes_cancel,
            id_parent_in           => rec_in.id_parent,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd
    (
        rec_in          IN management_plan%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_management_plan_in  => rec_in.id_management_plan,
            id_episode_in          => rec_in.id_episode,
            id_epis_encounter_in   => rec_in.id_epis_encounter,
            id_professional_in     => rec_in.id_professional,
            id_management_level_in => rec_in.id_management_level,
            flg_status_in          => rec_in.flg_status,
            dt_register_in         => rec_in.dt_register,
            admission_notes_in     => rec_in.admission_notes,
            immediate_needs_in     => rec_in.immediate_needs,
            goals_in               => rec_in.goals,
            plan_in                => rec_in.plan,
            id_cancel_reason_in    => rec_in.id_cancel_reason,
            notes_cancel_in        => rec_in.notes_cancel,
            id_parent_in           => rec_in.id_parent,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution
            
           ,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END upd;

    PROCEDURE upd_ins
    (
        id_management_plan_in  IN management_plan.id_management_plan%TYPE,
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        upd(id_management_plan_in  => id_management_plan_in,
            id_episode_in          => id_episode_in,
            id_epis_encounter_in   => id_epis_encounter_in,
            id_professional_in     => id_professional_in,
            id_management_level_in => id_management_level_in,
            flg_status_in          => flg_status_in,
            dt_register_in         => dt_register_in,
            admission_notes_in     => admission_notes_in,
            immediate_needs_in     => immediate_needs_in,
            goals_in               => goals_in,
            plan_in                => plan_in,
            id_cancel_reason_in    => id_cancel_reason_in,
            notes_cancel_in        => notes_cancel_in,
            id_parent_in           => id_parent_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_management_plan_in  => id_management_plan_in,
                id_episode_in          => id_episode_in,
                id_epis_encounter_in   => id_epis_encounter_in,
                id_professional_in     => id_professional_in,
                id_management_level_in => id_management_level_in,
                flg_status_in          => flg_status_in,
                dt_register_in         => dt_register_in,
                admission_notes_in     => admission_notes_in,
                immediate_needs_in     => immediate_needs_in,
                goals_in               => goals_in,
                plan_in                => plan_in,
                id_cancel_reason_in    => id_cancel_reason_in,
                notes_cancel_in        => notes_cancel_in,
                id_parent_in           => id_parent_in,
                create_user_in         => create_user_in,
                create_time_in         => create_time_in,
                create_institution_in  => create_institution_in,
                update_user_in         => update_user_in,
                update_time_in         => update_time_in,
                update_institution_in  => update_institution_in,
                handle_error_in        => handle_error_in,
                rows_out               => rows_out);
        END IF;
    END upd_ins;

    PROCEDURE upd_ins
    (
        id_management_plan_in  IN management_plan.id_management_plan%TYPE,
        id_episode_in          IN management_plan.id_episode%TYPE DEFAULT NULL,
        id_epis_encounter_in   IN management_plan.id_epis_encounter%TYPE DEFAULT NULL,
        id_professional_in     IN management_plan.id_professional%TYPE DEFAULT NULL,
        id_management_level_in IN management_plan.id_management_level%TYPE DEFAULT NULL,
        flg_status_in          IN management_plan.flg_status%TYPE DEFAULT NULL,
        dt_register_in         IN management_plan.dt_register%TYPE DEFAULT NULL,
        admission_notes_in     IN management_plan.admission_notes%TYPE DEFAULT NULL,
        immediate_needs_in     IN management_plan.immediate_needs%TYPE DEFAULT NULL,
        goals_in               IN management_plan.goals%TYPE DEFAULT NULL,
        plan_in                IN management_plan.plan%TYPE DEFAULT NULL,
        id_cancel_reason_in    IN management_plan.id_cancel_reason%TYPE DEFAULT NULL,
        notes_cancel_in        IN management_plan.notes_cancel%TYPE DEFAULT NULL,
        id_parent_in           IN management_plan.id_parent%TYPE DEFAULT NULL,
        create_user_in         IN management_plan.create_user%TYPE DEFAULT NULL,
        create_time_in         IN management_plan.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN management_plan.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN management_plan.update_user%TYPE DEFAULT NULL,
        update_time_in         IN management_plan.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN management_plan.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_management_plan_in,
                id_episode_in,
                id_epis_encounter_in,
                id_professional_in,
                id_management_level_in,
                flg_status_in,
                dt_register_in,
                admission_notes_in,
                immediate_needs_in,
                goals_in,
                plan_in,
                id_cancel_reason_in,
                notes_cancel_in,
                id_parent_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    PROCEDURE upd
    (
        col_in            IN management_plan_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_management_plan  id_management_plan_cc;
        l_id_episode          id_episode_cc;
        l_id_epis_encounter   id_epis_encounter_cc;
        l_id_professional     id_professional_cc;
        l_id_management_level id_management_level_cc;
        l_flg_status          flg_status_cc;
        l_dt_register         dt_register_cc;
        l_admission_notes     admission_notes_cc;
        l_immediate_needs     immediate_needs_cc;
        l_goals               goals_cc;
        l_plan                plan_cc;
        l_id_cancel_reason    id_cancel_reason_cc;
        l_notes_cancel        notes_cancel_cc;
        l_id_parent           id_parent_cc;
        l_create_user         create_user_cc;
        l_create_time         create_time_cc;
        l_create_institution  create_institution_cc;
        l_update_user         update_user_cc;
        l_update_time         update_time_cc;
        l_update_institution  update_institution_cc;
    BEGIN
        FOR i IN col_in.FIRST .. col_in.LAST
        LOOP
            l_id_management_plan(i) := col_in(i).id_management_plan;
            l_id_episode(i) := col_in(i).id_episode;
            l_id_epis_encounter(i) := col_in(i).id_epis_encounter;
            l_id_professional(i) := col_in(i).id_professional;
            l_id_management_level(i) := col_in(i).id_management_level;
            l_flg_status(i) := col_in(i).flg_status;
            l_dt_register(i) := col_in(i).dt_register;
            l_admission_notes(i) := col_in(i).admission_notes;
            l_immediate_needs(i) := col_in(i).immediate_needs;
            l_goals(i) := col_in(i).goals;
            l_plan(i) := col_in(i).plan;
            l_id_cancel_reason(i) := col_in(i).id_cancel_reason;
            l_notes_cancel(i) := col_in(i).notes_cancel;
            l_id_parent(i) := col_in(i).id_parent;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE management_plan
                   SET id_episode          = nvl(l_id_episode(i), id_episode),
                       id_epis_encounter   = nvl(l_id_epis_encounter(i), id_epis_encounter),
                       id_professional     = nvl(l_id_professional(i), id_professional),
                       id_management_level = nvl(l_id_management_level(i), id_management_level),
                       flg_status          = nvl(l_flg_status(i), flg_status),
                       dt_register         = nvl(l_dt_register(i), dt_register),
                       admission_notes     = nvl(l_admission_notes(i), admission_notes),
                       immediate_needs     = nvl(l_immediate_needs(i), immediate_needs),
                       goals               = nvl(l_goals(i), goals),
                       plan                = nvl(l_plan(i), plan),
                       id_cancel_reason    = nvl(l_id_cancel_reason(i), id_cancel_reason),
                       notes_cancel        = nvl(l_notes_cancel(i), notes_cancel),
                       id_parent           = nvl(l_id_parent(i), id_parent),
                       create_user         = nvl(l_create_user(i), create_user),
                       create_time         = nvl(l_create_time(i), create_time),
                       create_institution  = nvl(l_create_institution(i), create_institution),
                       update_user         = nvl(l_update_user(i), update_user),
                       update_time         = nvl(l_update_time(i), update_time),
                       update_institution  = nvl(l_update_institution(i), update_institution)
                 WHERE id_management_plan = l_id_management_plan(i);
        ELSE
            FORALL i IN col_in.FIRST .. col_in.LAST
                UPDATE management_plan
                   SET id_episode          = l_id_episode(i),
                       id_epis_encounter   = l_id_epis_encounter(i),
                       id_professional     = l_id_professional(i),
                       id_management_level = l_id_management_level(i),
                       flg_status          = l_flg_status(i),
                       dt_register         = l_dt_register(i),
                       admission_notes     = l_admission_notes(i),
                       immediate_needs     = l_immediate_needs(i),
                       goals               = l_goals(i),
                       plan                = l_plan(i),
                       id_cancel_reason    = l_id_cancel_reason(i),
                       notes_cancel        = l_notes_cancel(i),
                       id_parent           = l_id_parent(i),
                       create_user         = l_create_user(i),
                       create_time         = l_create_time(i),
                       create_institution  = l_create_institution(i),
                       update_user         = l_update_user(i),
                       update_time         = l_update_time(i),
                       update_institution  = l_update_institution(i)
                 WHERE id_management_plan = l_id_management_plan(i);
        END IF;
    END upd;

    PROCEDURE upd
    (
        col_in            IN management_plan_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE MANAGEMENT_PLAN
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    FUNCTION dynupdstr_no_rows_out
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    )
    
     RETURN VARCHAR2 IS
    BEGIN
        RETURN 'UPDATE MANAGEMENT_PLAN
             SET ' || colname_in || ' = :value
           WHERE ' || nvl(where_in, '1=1');
    END dynupdstr_no_rows_out;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE MANAGEMENT_PLAN set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1') ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MANAGEMENT_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2 := NULL,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE MANAGEMENT_PLAN set ' || colname_in || '=' || colname_in || ' + ' ||
                          nvl(increment_value_in, 1) || ' WHERE ' || nvl(where_in, '1=1');
    EXCEPTION
        WHEN dup_val_on_index THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner           all_constraints.owner%TYPE;
                    l_name            all_constraints.constraint_name%TYPE;
                    l_err_instance_id PLS_INTEGER;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'DUPLICATE-VALUE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MANAGEMENT_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
        WHEN e_null_column_value THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    v_errm    VARCHAR2(2000) := dbms_utility.format_error_stack;
                    dot1loc   INTEGER;
                    dot2loc   INTEGER;
                    parenloc  INTEGER;
                    c_owner   all_constraints.owner%TYPE;
                    c_tabname all_tables.table_name%TYPE;
                    c_colname all_tab_columns.column_name%TYPE;
                BEGIN
                    dot1loc   := instr(v_errm, '.', 1, 1);
                    dot2loc   := instr(v_errm, '.', 1, 2);
                    parenloc  := instr(v_errm, '(');
                    c_owner   := substr(v_errm, parenloc + 1, dot1loc - parenloc - 1);
                    c_tabname := substr(v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
                    c_colname := substr(v_errm, dot2loc + 1, instr(v_errm, ')') - dot2loc - 1);
                
                    pk_alert_exceptions.raise_error(error_name_in => 'COLUMN-CANNOT-BE-NULL',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => c_owner,
                                                    name2_in      => 'TABLE_NAME',
                                                    value2_in     => c_tabname,
                                                    name3_in      => 'COLUMN_NAME',
                                                    value3_in     => c_colname);
                END;
            END IF;
    END increment_onecol;

    -- Delete functionality

    PROCEDURE del
    (
        id_management_plan_in IN management_plan.id_management_plan%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM management_plan
         WHERE id_management_plan = id_management_plan_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MANAGEMENT_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del;

    PROCEDURE del
    (
        id_management_plan_in IN management_plan.id_management_plan%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
    
        del(id_management_plan_in => id_management_plan_in, handle_error_in => handle_error_in, rows_out => rows_out);
    
    END del;

    -- Delete all rows for primary key column ID_MANAGEMENT_PLAN
    PROCEDURE del_id_management_plan
    (
        id_management_plan_in IN management_plan.id_management_plan%TYPE,
        handle_error_in       IN BOOLEAN := TRUE,
        rows_out              OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM management_plan
         WHERE id_management_plan = id_management_plan_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MANAGEMENT_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_id_management_plan;

    -- Delete all rows for primary key column ID_MANAGEMENT_PLAN
    PROCEDURE del_id_management_plan
    (
        id_management_plan_in IN management_plan.id_management_plan%TYPE,
        handle_error_in       IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_id_management_plan(id_management_plan_in => id_management_plan_in,
                               handle_error_in       => handle_error_in,
                               rows_out              => rows_out);
    END del_id_management_plan;

    PROCEDURE del_mp_mp_parent_fk
    (
        id_parent_in    IN management_plan.id_parent%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM management_plan
         WHERE id_parent = del_mp_mp_parent_fk.id_parent_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MANAGEMENT_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_mp_mp_parent_fk;

    PROCEDURE del_mp_mp_parent_fk
    (
        id_parent_in    IN management_plan.id_parent%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_mp_mp_parent_fk(id_parent_in => id_parent_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_mp_mp_parent_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM MANAGEMENT_PLAN';
        ELSE
            RETURN 'DELETE FROM MANAGEMENT_PLAN WHERE ' || where_in;
        END IF;
    END dyndelstr;

    FUNCTION dyncoldelstr(colname_in IN all_tab_columns.column_name%TYPE) RETURN VARCHAR2 IS
    BEGIN
        RETURN dyndelstr(colname_in || ' = :value');
    END;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MANAGEMENT_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MANAGEMENT_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MANAGEMENT_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MANAGEMENT_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MANAGEMENT_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN DATE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MANAGEMENT_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MANAGEMENT_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN TIMESTAMP WITH LOCAL TIME ZONE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MANAGEMENT_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyncoldelstr(colname_in)
            USING colvalue_in;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MANAGEMENT_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    PROCEDURE del_by_col
    (
        colname_in      IN VARCHAR2,
        colvalue_in     IN NUMBER,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr(colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING IN colvalue_in, OUT rows_out;
    EXCEPTION
        WHEN e_check_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner all_constraints.owner%TYPE;
                    l_name  all_constraints.constraint_name%TYPE;
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    pk_alert_exceptions.raise_error(error_name_in => 'CHECK-CONSTRAINT-FAILURE',
                                                    name1_in      => 'OWNER',
                                                    value1_in     => l_owner,
                                                    name2_in      => 'CONSTRAINT_NAME',
                                                    value2_in     => l_name,
                                                    name3_in      => 'TABLE_NAME',
                                                    value3_in     => 'MANAGEMENT_PLAN');
                END;
            END IF;
        WHEN e_integ_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                DECLARE
                    l_owner    all_constraints.owner%TYPE;
                    l_name     all_constraints.constraint_name%TYPE;
                    l_id       PLS_INTEGER;
                    l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
                BEGIN
                    get_constraint_info(l_owner, l_name);
                    IF SQLCODE = -2292 -- Child record found
                    THEN
                        l_err_name := 'CHILD-RECORD-FOUND';
                    END IF;
                    pk_alert_exceptions.register_error(error_name_in       => l_err_name,
                                                       err_instance_id_out => l_id,
                                                       name1_in            => 'OWNER',
                                                       value1_in           => l_owner,
                                                       name2_in            => 'CONSTRAINT_NAME',
                                                       value2_in           => l_name,
                                                       name3_in            => 'TABLE_NAME',
                                                       value3_in           => 'MANAGEMENT_PLAN');
                    pk_alert_exceptions.raise_error_instance(err_instance_id_in => l_id);
                END;
            END IF;
    END del_by_col;

    -- Initialize a record with default values for columns in the table.
    PROCEDURE initrec(management_plan_inout IN OUT management_plan%ROWTYPE) IS
    BEGIN
        management_plan_inout.id_management_plan  := NULL;
        management_plan_inout.id_episode          := NULL;
        management_plan_inout.id_epis_encounter   := NULL;
        management_plan_inout.id_professional     := NULL;
        management_plan_inout.id_management_level := NULL;
        management_plan_inout.flg_status          := NULL;
        management_plan_inout.dt_register         := NULL;
        management_plan_inout.admission_notes     := NULL;
        management_plan_inout.immediate_needs     := NULL;
        management_plan_inout.goals               := NULL;
        management_plan_inout.plan                := NULL;
        management_plan_inout.id_cancel_reason    := NULL;
        management_plan_inout.notes_cancel        := NULL;
        management_plan_inout.id_parent           := NULL;
        management_plan_inout.create_user         := NULL;
        management_plan_inout.create_time         := NULL;
        management_plan_inout.create_institution  := NULL;
        management_plan_inout.update_user         := NULL;
        management_plan_inout.update_time         := NULL;
        management_plan_inout.update_institution  := NULL;
    END initrec;

    FUNCTION initrec RETURN management_plan%ROWTYPE IS
        l_management_plan management_plan%ROWTYPE;
    BEGIN
        RETURN l_management_plan;
    END initrec;

    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN management_plan_tc IS
        data management_plan_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM management_plan
         WHERE ROWID IN (SELECT *
                           FROM TABLE(rows_in));
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
    END get_data_rowid;

    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN management_plan_tc IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        data management_plan_tc;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid');
            ROLLBACK;
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_management_plan;
/
