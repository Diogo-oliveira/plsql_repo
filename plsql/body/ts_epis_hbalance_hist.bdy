/*-- Last Change Revision: $Rev: 2028080 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:08 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY TS_EPIS_HBALANCE_HIST
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: April 12, 2016 14:22:16
| Created By: ALERT
*/
IS


   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_epis_hidrics_balance_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS_BALANCE%TYPE,
      dt_epis_hbalance_hist_in IN EPIS_HBALANCE_HIST.DT_EPIS_HBALANCE_HIST%TYPE
      ,
      id_epis_hidrics_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS%TYPE DEFAULT NULL,
      id_prof_close_in IN EPIS_HBALANCE_HIST.ID_PROF_CLOSE%TYPE DEFAULT NULL,
      flg_status_in IN EPIS_HBALANCE_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      total_admin_in IN EPIS_HBALANCE_HIST.TOTAL_ADMIN%TYPE DEFAULT NULL,
      total_elim_in IN EPIS_HBALANCE_HIST.TOTAL_ELIM%TYPE DEFAULT NULL,
      id_unit_measure_in IN EPIS_HBALANCE_HIST.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      dt_prev_close_tstz_in IN EPIS_HBALANCE_HIST.DT_PREV_CLOSE_TSTZ%TYPE DEFAULT NULL,
      dt_close_balance_tstz_in IN EPIS_HBALANCE_HIST.DT_CLOSE_BALANCE_TSTZ%TYPE DEFAULT NULL,
      dt_open_tstz_in IN EPIS_HBALANCE_HIST.DT_OPEN_TSTZ%TYPE DEFAULT NULL,
      dt_register_tstz_in IN EPIS_HBALANCE_HIST.DT_REGISTER_TSTZ%TYPE DEFAULT NULL,
      create_user_in IN EPIS_HBALANCE_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN EPIS_HBALANCE_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN EPIS_HBALANCE_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN EPIS_HBALANCE_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN EPIS_HBALANCE_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN EPIS_HBALANCE_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_prof_last_change_in IN EPIS_HBALANCE_HIST.ID_PROF_LAST_CHANGE%TYPE DEFAULT NULL,
      dt_eh_balance_in IN EPIS_HBALANCE_HIST.DT_EH_BALANCE%TYPE DEFAULT NULL,
      flg_close_type_in IN EPIS_HBALANCE_HIST.FLG_CLOSE_TYPE%TYPE DEFAULT NULL,
      total_times_in IN EPIS_HBALANCE_HIST.TOTAL_TIMES%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO EPIS_HBALANCE_HIST (
         ID_EPIS_HIDRICS_BALANCE,
         DT_EPIS_HBALANCE_HIST,
         ID_EPIS_HIDRICS,
         ID_PROF_CLOSE,
         FLG_STATUS,
         TOTAL_ADMIN,
         TOTAL_ELIM,
         ID_UNIT_MEASURE,
         DT_PREV_CLOSE_TSTZ,
         DT_CLOSE_BALANCE_TSTZ,
         DT_OPEN_TSTZ,
         DT_REGISTER_TSTZ,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION,
         ID_PROF_LAST_CHANGE,
         DT_EH_BALANCE,
         FLG_CLOSE_TYPE,
         TOTAL_TIMES
         )
      VALUES (
         id_epis_hidrics_balance_in,
         dt_epis_hbalance_hist_in,
         id_epis_hidrics_in,
         id_prof_close_in,
         flg_status_in,
         total_admin_in,
         total_elim_in,
         id_unit_measure_in,
         dt_prev_close_tstz_in,
         dt_close_balance_tstz_in,
         dt_open_tstz_in,
         dt_register_tstz_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in,
         id_prof_last_change_in,
         dt_eh_balance_in,
         flg_close_type_in,
         total_times_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'EPIS_HBALANCE_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           IF l_name = 'EHBH_EHID_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_HIDRICS'
               , value_in => id_epis_hidrics_in);
           END IF;
           IF l_name = 'EHBH_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CLOSE'
               , value_in => id_prof_close_in);
           END IF;
           IF l_name = 'EHBH_PROF_FK2'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_LAST_CHANGE'
               , value_in => id_prof_last_change_in);
           END IF;
           IF l_name = 'EHBH_UME_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_UNIT_MEASURE'
               , value_in => id_unit_measure_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_epis_hidrics_balance_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS_BALANCE%TYPE,
      dt_epis_hbalance_hist_in IN EPIS_HBALANCE_HIST.DT_EPIS_HBALANCE_HIST%TYPE
      ,
      id_epis_hidrics_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS%TYPE DEFAULT NULL,
      id_prof_close_in IN EPIS_HBALANCE_HIST.ID_PROF_CLOSE%TYPE DEFAULT NULL,
      flg_status_in IN EPIS_HBALANCE_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      total_admin_in IN EPIS_HBALANCE_HIST.TOTAL_ADMIN%TYPE DEFAULT NULL,
      total_elim_in IN EPIS_HBALANCE_HIST.TOTAL_ELIM%TYPE DEFAULT NULL,
      id_unit_measure_in IN EPIS_HBALANCE_HIST.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      dt_prev_close_tstz_in IN EPIS_HBALANCE_HIST.DT_PREV_CLOSE_TSTZ%TYPE DEFAULT NULL,
      dt_close_balance_tstz_in IN EPIS_HBALANCE_HIST.DT_CLOSE_BALANCE_TSTZ%TYPE DEFAULT NULL,
      dt_open_tstz_in IN EPIS_HBALANCE_HIST.DT_OPEN_TSTZ%TYPE DEFAULT NULL,
      dt_register_tstz_in IN EPIS_HBALANCE_HIST.DT_REGISTER_TSTZ%TYPE DEFAULT NULL,
      create_user_in IN EPIS_HBALANCE_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN EPIS_HBALANCE_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN EPIS_HBALANCE_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN EPIS_HBALANCE_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN EPIS_HBALANCE_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN EPIS_HBALANCE_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_prof_last_change_in IN EPIS_HBALANCE_HIST.ID_PROF_LAST_CHANGE%TYPE DEFAULT NULL,
      dt_eh_balance_in IN EPIS_HBALANCE_HIST.DT_EH_BALANCE%TYPE DEFAULT NULL,
      flg_close_type_in IN EPIS_HBALANCE_HIST.FLG_CLOSE_TYPE%TYPE DEFAULT NULL,
      total_times_in IN EPIS_HBALANCE_HIST.TOTAL_TIMES%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_epis_hidrics_balance_in => id_epis_hidrics_balance_in,
      dt_epis_hbalance_hist_in => dt_epis_hbalance_hist_in
      ,
      id_epis_hidrics_in => id_epis_hidrics_in,
      id_prof_close_in => id_prof_close_in,
      flg_status_in => flg_status_in,
      total_admin_in => total_admin_in,
      total_elim_in => total_elim_in,
      id_unit_measure_in => id_unit_measure_in,
      dt_prev_close_tstz_in => dt_prev_close_tstz_in,
      dt_close_balance_tstz_in => dt_close_balance_tstz_in,
      dt_open_tstz_in => dt_open_tstz_in,
      dt_register_tstz_in => dt_register_tstz_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      id_prof_last_change_in => id_prof_last_change_in,
      dt_eh_balance_in => dt_eh_balance_in,
      flg_close_type_in => flg_close_type_in,
      total_times_in => total_times_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN EPIS_HBALANCE_HIST%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec EPIS_HBALANCE_HIST%ROWTYPE := rec_in;
   BEGIN
      ins (
         id_epis_hidrics_balance_in => l_rec.ID_EPIS_HIDRICS_BALANCE,
         dt_epis_hbalance_hist_in => l_rec.DT_EPIS_HBALANCE_HIST
         ,
         id_epis_hidrics_in => l_rec.ID_EPIS_HIDRICS,
         id_prof_close_in => l_rec.ID_PROF_CLOSE,
         flg_status_in => l_rec.FLG_STATUS,
         total_admin_in => l_rec.TOTAL_ADMIN,
         total_elim_in => l_rec.TOTAL_ELIM,
         id_unit_measure_in => l_rec.ID_UNIT_MEASURE,
         dt_prev_close_tstz_in => l_rec.DT_PREV_CLOSE_TSTZ,
         dt_close_balance_tstz_in => l_rec.DT_CLOSE_BALANCE_TSTZ,
         dt_open_tstz_in => l_rec.DT_OPEN_TSTZ,
         dt_register_tstz_in => l_rec.DT_REGISTER_TSTZ,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION,
         id_prof_last_change_in => l_rec.ID_PROF_LAST_CHANGE,
         dt_eh_balance_in => l_rec.DT_EH_BALANCE,
         flg_close_type_in => l_rec.FLG_CLOSE_TYPE,
         total_times_in => l_rec.TOTAL_TIMES
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN EPIS_HBALANCE_HIST%ROWTYPE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

    PROCEDURE ins (
      rows_in IN EPIS_HBALANCE_HIST_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
       FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO EPIS_HBALANCE_HIST (
               ID_EPIS_HIDRICS_BALANCE,
               DT_EPIS_HBALANCE_HIST,
               ID_EPIS_HIDRICS,
               ID_PROF_CLOSE,
               FLG_STATUS,
               TOTAL_ADMIN,
               TOTAL_ELIM,
               ID_UNIT_MEASURE,
               DT_PREV_CLOSE_TSTZ,
               DT_CLOSE_BALANCE_TSTZ,
               DT_OPEN_TSTZ,
               DT_REGISTER_TSTZ,
               CREATE_USER,
               CREATE_TIME,
               CREATE_INSTITUTION,
               UPDATE_USER,
               UPDATE_TIME,
               UPDATE_INSTITUTION,
               ID_PROF_LAST_CHANGE,
               DT_EH_BALANCE,
               FLG_CLOSE_TYPE,
               TOTAL_TIMES
               )
            VALUES (
               rows_in(indx).ID_EPIS_HIDRICS_BALANCE,
               rows_in(indx).DT_EPIS_HBALANCE_HIST,
               rows_in(indx).ID_EPIS_HIDRICS,
               rows_in(indx).ID_PROF_CLOSE,
               rows_in(indx).FLG_STATUS,
               rows_in(indx).TOTAL_ADMIN,
               rows_in(indx).TOTAL_ELIM,
               rows_in(indx).ID_UNIT_MEASURE,
               rows_in(indx).DT_PREV_CLOSE_TSTZ,
               rows_in(indx).DT_CLOSE_BALANCE_TSTZ,
               rows_in(indx).DT_OPEN_TSTZ,
               rows_in(indx).DT_REGISTER_TSTZ,
               rows_in(indx).CREATE_USER,
               rows_in(indx).CREATE_TIME,
               rows_in(indx).CREATE_INSTITUTION,
               rows_in(indx).UPDATE_USER,
               rows_in(indx).UPDATE_TIME,
               rows_in(indx).UPDATE_INSTITUTION,
               rows_in(indx).ID_PROF_LAST_CHANGE,
               rows_in(indx).DT_EH_BALANCE,
               rows_in(indx).FLG_CLOSE_TYPE,
               rows_in(indx).TOTAL_TIMES
               ) RETURNING ROWID BULK COLLECT INTO rows_out;

      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQLERRM (-SQL%BULK_EXCEPTIONS (indx).ERROR_CODE)
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPIS_HIDRICS_BALANCE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_EPIS_HIDRICS_BALANCE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_EPIS_HBALANCE_HIST _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_EPIS_HBALANCE_HIST
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_EPIS_HIDRICS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_EPIS_HIDRICS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_CLOSE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROF_CLOSE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATUS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_STATUS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'TOTAL_ADMIN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).TOTAL_ADMIN
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'TOTAL_ELIM _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).TOTAL_ELIM
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_UNIT_MEASURE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_UNIT_MEASURE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_PREV_CLOSE_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_PREV_CLOSE_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_CLOSE_BALANCE_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_CLOSE_BALANCE_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_OPEN_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_OPEN_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_REGISTER_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_REGISTER_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROF_LAST_CHANGE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROF_LAST_CHANGE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_EH_BALANCE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_EH_BALANCE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_CLOSE_TYPE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_CLOSE_TYPE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'TOTAL_TIMES _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).TOTAL_TIMES
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'EPIS_HBALANCE_HIST'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN EPIS_HBALANCE_HIST_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_epis_hidrics_balance_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS_BALANCE%TYPE,
      dt_epis_hbalance_hist_in IN EPIS_HBALANCE_HIST.DT_EPIS_HBALANCE_HIST%TYPE,
      id_epis_hidrics_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS%TYPE DEFAULT NULL,
      ID_EPIS_HIDRICS_nin IN BOOLEAN := TRUE,
      id_prof_close_in IN EPIS_HBALANCE_HIST.ID_PROF_CLOSE%TYPE DEFAULT NULL,
      ID_PROF_CLOSE_nin IN BOOLEAN := TRUE,
      flg_status_in IN EPIS_HBALANCE_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      total_admin_in IN EPIS_HBALANCE_HIST.TOTAL_ADMIN%TYPE DEFAULT NULL,
      TOTAL_ADMIN_nin IN BOOLEAN := TRUE,
      total_elim_in IN EPIS_HBALANCE_HIST.TOTAL_ELIM%TYPE DEFAULT NULL,
      TOTAL_ELIM_nin IN BOOLEAN := TRUE,
      id_unit_measure_in IN EPIS_HBALANCE_HIST.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      dt_prev_close_tstz_in IN EPIS_HBALANCE_HIST.DT_PREV_CLOSE_TSTZ%TYPE DEFAULT NULL,
      DT_PREV_CLOSE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_close_balance_tstz_in IN EPIS_HBALANCE_HIST.DT_CLOSE_BALANCE_TSTZ%TYPE DEFAULT NULL,
      DT_CLOSE_BALANCE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_open_tstz_in IN EPIS_HBALANCE_HIST.DT_OPEN_TSTZ%TYPE DEFAULT NULL,
      DT_OPEN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_register_tstz_in IN EPIS_HBALANCE_HIST.DT_REGISTER_TSTZ%TYPE DEFAULT NULL,
      DT_REGISTER_TSTZ_nin IN BOOLEAN := TRUE,
      create_user_in IN EPIS_HBALANCE_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN EPIS_HBALANCE_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN EPIS_HBALANCE_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN EPIS_HBALANCE_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN EPIS_HBALANCE_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN EPIS_HBALANCE_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_prof_last_change_in IN EPIS_HBALANCE_HIST.ID_PROF_LAST_CHANGE%TYPE DEFAULT NULL,
      ID_PROF_LAST_CHANGE_nin IN BOOLEAN := TRUE,
      dt_eh_balance_in IN EPIS_HBALANCE_HIST.DT_EH_BALANCE%TYPE DEFAULT NULL,
      DT_EH_BALANCE_nin IN BOOLEAN := TRUE,
      flg_close_type_in IN EPIS_HBALANCE_HIST.FLG_CLOSE_TYPE%TYPE DEFAULT NULL,
      FLG_CLOSE_TYPE_nin IN BOOLEAN := TRUE,
      total_times_in IN EPIS_HBALANCE_HIST.TOTAL_TIMES%TYPE DEFAULT NULL,
      TOTAL_TIMES_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_EPIS_HIDRICS_n NUMBER(1);
   l_ID_PROF_CLOSE_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_TOTAL_ADMIN_n NUMBER(1);
   l_TOTAL_ELIM_n NUMBER(1);
   l_ID_UNIT_MEASURE_n NUMBER(1);
   l_DT_PREV_CLOSE_TSTZ_n NUMBER(1);
   l_DT_CLOSE_BALANCE_TSTZ_n NUMBER(1);
   l_DT_OPEN_TSTZ_n NUMBER(1);
   l_DT_REGISTER_TSTZ_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_ID_PROF_LAST_CHANGE_n NUMBER(1);
   l_DT_EH_BALANCE_n NUMBER(1);
   l_FLG_CLOSE_TYPE_n NUMBER(1);
   l_TOTAL_TIMES_n NUMBER(1);
   BEGIN

   l_ID_EPIS_HIDRICS_n := sys.diutil.bool_to_int(ID_EPIS_HIDRICS_nin);
   l_ID_PROF_CLOSE_n := sys.diutil.bool_to_int(ID_PROF_CLOSE_nin);
   l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
   l_TOTAL_ADMIN_n := sys.diutil.bool_to_int(TOTAL_ADMIN_nin);
   l_TOTAL_ELIM_n := sys.diutil.bool_to_int(TOTAL_ELIM_nin);
   l_ID_UNIT_MEASURE_n := sys.diutil.bool_to_int(ID_UNIT_MEASURE_nin);
   l_DT_PREV_CLOSE_TSTZ_n := sys.diutil.bool_to_int(DT_PREV_CLOSE_TSTZ_nin);
   l_DT_CLOSE_BALANCE_TSTZ_n := sys.diutil.bool_to_int(DT_CLOSE_BALANCE_TSTZ_nin);
   l_DT_OPEN_TSTZ_n := sys.diutil.bool_to_int(DT_OPEN_TSTZ_nin);
   l_DT_REGISTER_TSTZ_n := sys.diutil.bool_to_int(DT_REGISTER_TSTZ_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
   l_ID_PROF_LAST_CHANGE_n := sys.diutil.bool_to_int(ID_PROF_LAST_CHANGE_nin);
   l_DT_EH_BALANCE_n := sys.diutil.bool_to_int(DT_EH_BALANCE_nin);
   l_FLG_CLOSE_TYPE_n := sys.diutil.bool_to_int(FLG_CLOSE_TYPE_nin);
   l_TOTAL_TIMES_n := sys.diutil.bool_to_int(TOTAL_TIMES_nin);


         UPDATE EPIS_HBALANCE_HIST SET
     ID_EPIS_HIDRICS = decode (l_ID_EPIS_HIDRICS_n,0,id_epis_hidrics_in, NVL (id_epis_hidrics_in, ID_EPIS_HIDRICS)),
     ID_PROF_CLOSE = decode (l_ID_PROF_CLOSE_n,0,id_prof_close_in, NVL (id_prof_close_in, ID_PROF_CLOSE)),
     FLG_STATUS = decode (l_FLG_STATUS_n,0,flg_status_in, NVL (flg_status_in, FLG_STATUS)),
     TOTAL_ADMIN = decode (l_TOTAL_ADMIN_n,0,total_admin_in, NVL (total_admin_in, TOTAL_ADMIN)),
     TOTAL_ELIM = decode (l_TOTAL_ELIM_n,0,total_elim_in, NVL (total_elim_in, TOTAL_ELIM)),
     ID_UNIT_MEASURE = decode (l_ID_UNIT_MEASURE_n,0,id_unit_measure_in, NVL (id_unit_measure_in, ID_UNIT_MEASURE)),
     DT_PREV_CLOSE_TSTZ = decode (l_DT_PREV_CLOSE_TSTZ_n,0,dt_prev_close_tstz_in, NVL (dt_prev_close_tstz_in, DT_PREV_CLOSE_TSTZ)),
     DT_CLOSE_BALANCE_TSTZ = decode (l_DT_CLOSE_BALANCE_TSTZ_n,0,dt_close_balance_tstz_in, NVL (dt_close_balance_tstz_in, DT_CLOSE_BALANCE_TSTZ)),
     DT_OPEN_TSTZ = decode (l_DT_OPEN_TSTZ_n,0,dt_open_tstz_in, NVL (dt_open_tstz_in, DT_OPEN_TSTZ)),
     DT_REGISTER_TSTZ = decode (l_DT_REGISTER_TSTZ_n,0,dt_register_tstz_in, NVL (dt_register_tstz_in, DT_REGISTER_TSTZ)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION)),
     ID_PROF_LAST_CHANGE = decode (l_ID_PROF_LAST_CHANGE_n,0,id_prof_last_change_in, NVL (id_prof_last_change_in, ID_PROF_LAST_CHANGE)),
     DT_EH_BALANCE = decode (l_DT_EH_BALANCE_n,0,dt_eh_balance_in, NVL (dt_eh_balance_in, DT_EH_BALANCE)),
     FLG_CLOSE_TYPE = decode (l_FLG_CLOSE_TYPE_n,0,flg_close_type_in, NVL (flg_close_type_in, FLG_CLOSE_TYPE)),
     TOTAL_TIMES = decode (l_TOTAL_TIMES_n,0,total_times_in, NVL (total_times_in, TOTAL_TIMES))
          WHERE
             ID_EPIS_HIDRICS_BALANCE = id_epis_hidrics_balance_in AND
             DT_EPIS_HBALANCE_HIST = dt_epis_hbalance_hist_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'EPIS_HBALANCE_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           IF l_name = 'EHBH_EHID_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_HIDRICS'
               , value_in => id_epis_hidrics_in);
           END IF;
           IF l_name = 'EHBH_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CLOSE'
               , value_in => id_prof_close_in);
           END IF;
           IF l_name = 'EHBH_PROF_FK2'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_LAST_CHANGE'
               , value_in => id_prof_last_change_in);
           END IF;
           IF l_name = 'EHBH_UME_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_UNIT_MEASURE'
               , value_in => id_unit_measure_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_epis_hidrics_balance_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS_BALANCE%TYPE,
      dt_epis_hbalance_hist_in IN EPIS_HBALANCE_HIST.DT_EPIS_HBALANCE_HIST%TYPE,
      id_epis_hidrics_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS%TYPE DEFAULT NULL,
      ID_EPIS_HIDRICS_nin IN BOOLEAN := TRUE,
      id_prof_close_in IN EPIS_HBALANCE_HIST.ID_PROF_CLOSE%TYPE DEFAULT NULL,
      ID_PROF_CLOSE_nin IN BOOLEAN := TRUE,
      flg_status_in IN EPIS_HBALANCE_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      total_admin_in IN EPIS_HBALANCE_HIST.TOTAL_ADMIN%TYPE DEFAULT NULL,
      TOTAL_ADMIN_nin IN BOOLEAN := TRUE,
      total_elim_in IN EPIS_HBALANCE_HIST.TOTAL_ELIM%TYPE DEFAULT NULL,
      TOTAL_ELIM_nin IN BOOLEAN := TRUE,
      id_unit_measure_in IN EPIS_HBALANCE_HIST.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      dt_prev_close_tstz_in IN EPIS_HBALANCE_HIST.DT_PREV_CLOSE_TSTZ%TYPE DEFAULT NULL,
      DT_PREV_CLOSE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_close_balance_tstz_in IN EPIS_HBALANCE_HIST.DT_CLOSE_BALANCE_TSTZ%TYPE DEFAULT NULL,
      DT_CLOSE_BALANCE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_open_tstz_in IN EPIS_HBALANCE_HIST.DT_OPEN_TSTZ%TYPE DEFAULT NULL,
      DT_OPEN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_register_tstz_in IN EPIS_HBALANCE_HIST.DT_REGISTER_TSTZ%TYPE DEFAULT NULL,
      DT_REGISTER_TSTZ_nin IN BOOLEAN := TRUE,
      create_user_in IN EPIS_HBALANCE_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN EPIS_HBALANCE_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN EPIS_HBALANCE_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN EPIS_HBALANCE_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN EPIS_HBALANCE_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN EPIS_HBALANCE_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_prof_last_change_in IN EPIS_HBALANCE_HIST.ID_PROF_LAST_CHANGE%TYPE DEFAULT NULL,
      ID_PROF_LAST_CHANGE_nin IN BOOLEAN := TRUE,
      dt_eh_balance_in IN EPIS_HBALANCE_HIST.DT_EH_BALANCE%TYPE DEFAULT NULL,
      DT_EH_BALANCE_nin IN BOOLEAN := TRUE,
      flg_close_type_in IN EPIS_HBALANCE_HIST.FLG_CLOSE_TYPE%TYPE DEFAULT NULL,
      FLG_CLOSE_TYPE_nin IN BOOLEAN := TRUE,
      total_times_in IN EPIS_HBALANCE_HIST.TOTAL_TIMES%TYPE DEFAULT NULL,
      TOTAL_TIMES_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_epis_hidrics_balance_in => id_epis_hidrics_balance_in,
      dt_epis_hbalance_hist_in => dt_epis_hbalance_hist_in,
      id_epis_hidrics_in => id_epis_hidrics_in,
      ID_EPIS_HIDRICS_nin => ID_EPIS_HIDRICS_nin,
      id_prof_close_in => id_prof_close_in,
      ID_PROF_CLOSE_nin => ID_PROF_CLOSE_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      total_admin_in => total_admin_in,
      TOTAL_ADMIN_nin => TOTAL_ADMIN_nin,
      total_elim_in => total_elim_in,
      TOTAL_ELIM_nin => TOTAL_ELIM_nin,
      id_unit_measure_in => id_unit_measure_in,
      ID_UNIT_MEASURE_nin => ID_UNIT_MEASURE_nin,
      dt_prev_close_tstz_in => dt_prev_close_tstz_in,
      DT_PREV_CLOSE_TSTZ_nin => DT_PREV_CLOSE_TSTZ_nin,
      dt_close_balance_tstz_in => dt_close_balance_tstz_in,
      DT_CLOSE_BALANCE_TSTZ_nin => DT_CLOSE_BALANCE_TSTZ_nin,
      dt_open_tstz_in => dt_open_tstz_in,
      DT_OPEN_TSTZ_nin => DT_OPEN_TSTZ_nin,
      dt_register_tstz_in => dt_register_tstz_in,
      DT_REGISTER_TSTZ_nin => DT_REGISTER_TSTZ_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      id_prof_last_change_in => id_prof_last_change_in,
      ID_PROF_LAST_CHANGE_nin => ID_PROF_LAST_CHANGE_nin,
      dt_eh_balance_in => dt_eh_balance_in,
      DT_EH_BALANCE_nin => DT_EH_BALANCE_nin,
      flg_close_type_in => flg_close_type_in,
      FLG_CLOSE_TYPE_nin => FLG_CLOSE_TYPE_nin,
      total_times_in => total_times_in,
      TOTAL_TIMES_nin => TOTAL_TIMES_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_epis_hidrics_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS%TYPE DEFAULT NULL,
      ID_EPIS_HIDRICS_nin IN BOOLEAN := TRUE,
      id_prof_close_in IN EPIS_HBALANCE_HIST.ID_PROF_CLOSE%TYPE DEFAULT NULL,
      ID_PROF_CLOSE_nin IN BOOLEAN := TRUE,
      flg_status_in IN EPIS_HBALANCE_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      total_admin_in IN EPIS_HBALANCE_HIST.TOTAL_ADMIN%TYPE DEFAULT NULL,
      TOTAL_ADMIN_nin IN BOOLEAN := TRUE,
      total_elim_in IN EPIS_HBALANCE_HIST.TOTAL_ELIM%TYPE DEFAULT NULL,
      TOTAL_ELIM_nin IN BOOLEAN := TRUE,
      id_unit_measure_in IN EPIS_HBALANCE_HIST.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      dt_prev_close_tstz_in IN EPIS_HBALANCE_HIST.DT_PREV_CLOSE_TSTZ%TYPE DEFAULT NULL,
      DT_PREV_CLOSE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_close_balance_tstz_in IN EPIS_HBALANCE_HIST.DT_CLOSE_BALANCE_TSTZ%TYPE DEFAULT NULL,
      DT_CLOSE_BALANCE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_open_tstz_in IN EPIS_HBALANCE_HIST.DT_OPEN_TSTZ%TYPE DEFAULT NULL,
      DT_OPEN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_register_tstz_in IN EPIS_HBALANCE_HIST.DT_REGISTER_TSTZ%TYPE DEFAULT NULL,
      DT_REGISTER_TSTZ_nin IN BOOLEAN := TRUE,
      create_user_in IN EPIS_HBALANCE_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN EPIS_HBALANCE_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN EPIS_HBALANCE_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN EPIS_HBALANCE_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN EPIS_HBALANCE_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN EPIS_HBALANCE_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_prof_last_change_in IN EPIS_HBALANCE_HIST.ID_PROF_LAST_CHANGE%TYPE DEFAULT NULL,
      ID_PROF_LAST_CHANGE_nin IN BOOLEAN := TRUE,
      dt_eh_balance_in IN EPIS_HBALANCE_HIST.DT_EH_BALANCE%TYPE DEFAULT NULL,
      DT_EH_BALANCE_nin IN BOOLEAN := TRUE,
      flg_close_type_in IN EPIS_HBALANCE_HIST.FLG_CLOSE_TYPE%TYPE DEFAULT NULL,
      FLG_CLOSE_TYPE_nin IN BOOLEAN := TRUE,
      total_times_in IN EPIS_HBALANCE_HIST.TOTAL_TIMES%TYPE DEFAULT NULL,
      TOTAL_TIMES_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_ID_EPIS_HIDRICS_n NUMBER(1);
   l_ID_PROF_CLOSE_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_TOTAL_ADMIN_n NUMBER(1);
   l_TOTAL_ELIM_n NUMBER(1);
   l_ID_UNIT_MEASURE_n NUMBER(1);
   l_DT_PREV_CLOSE_TSTZ_n NUMBER(1);
   l_DT_CLOSE_BALANCE_TSTZ_n NUMBER(1);
   l_DT_OPEN_TSTZ_n NUMBER(1);
   l_DT_REGISTER_TSTZ_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_ID_PROF_LAST_CHANGE_n NUMBER(1);
   l_DT_EH_BALANCE_n NUMBER(1);
   l_FLG_CLOSE_TYPE_n NUMBER(1);
   l_TOTAL_TIMES_n NUMBER(1);
      id_epis_hidrics_balance_in EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS_BALANCE%TYPE;
      dt_epis_hbalance_hist_in EPIS_HBALANCE_HIST.DT_EPIS_HBALANCE_HIST%TYPE;
   BEGIN



      l_ID_EPIS_HIDRICS_n := sys.diutil.bool_to_int(ID_EPIS_HIDRICS_nin);
      l_ID_PROF_CLOSE_n := sys.diutil.bool_to_int(ID_PROF_CLOSE_nin);
      l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
      l_TOTAL_ADMIN_n := sys.diutil.bool_to_int(TOTAL_ADMIN_nin);
      l_TOTAL_ELIM_n := sys.diutil.bool_to_int(TOTAL_ELIM_nin);
      l_ID_UNIT_MEASURE_n := sys.diutil.bool_to_int(ID_UNIT_MEASURE_nin);
      l_DT_PREV_CLOSE_TSTZ_n := sys.diutil.bool_to_int(DT_PREV_CLOSE_TSTZ_nin);
      l_DT_CLOSE_BALANCE_TSTZ_n := sys.diutil.bool_to_int(DT_CLOSE_BALANCE_TSTZ_nin);
      l_DT_OPEN_TSTZ_n := sys.diutil.bool_to_int(DT_OPEN_TSTZ_nin);
      l_DT_REGISTER_TSTZ_n := sys.diutil.bool_to_int(DT_REGISTER_TSTZ_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
      l_ID_PROF_LAST_CHANGE_n := sys.diutil.bool_to_int(ID_PROF_LAST_CHANGE_nin);
      l_DT_EH_BALANCE_n := sys.diutil.bool_to_int(DT_EH_BALANCE_nin);
      l_FLG_CLOSE_TYPE_n := sys.diutil.bool_to_int(FLG_CLOSE_TYPE_nin);
      l_TOTAL_TIMES_n := sys.diutil.bool_to_int(TOTAL_TIMES_nin);



l_sql := 'UPDATE EPIS_HBALANCE_HIST SET '
     || ' ID_EPIS_HIDRICS = decode (' || l_ID_EPIS_HIDRICS_n || ',0,:id_epis_hidrics_in, NVL (:id_epis_hidrics_in, ID_EPIS_HIDRICS)) '|| ','
     || ' ID_PROF_CLOSE = decode (' || l_ID_PROF_CLOSE_n || ',0,:id_prof_close_in, NVL (:id_prof_close_in, ID_PROF_CLOSE)) '|| ','
     || ' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) '|| ','
     || ' TOTAL_ADMIN = decode (' || l_TOTAL_ADMIN_n || ',0,:total_admin_in, NVL (:total_admin_in, TOTAL_ADMIN)) '|| ','
     || ' TOTAL_ELIM = decode (' || l_TOTAL_ELIM_n || ',0,:total_elim_in, NVL (:total_elim_in, TOTAL_ELIM)) '|| ','
     || ' ID_UNIT_MEASURE = decode (' || l_ID_UNIT_MEASURE_n || ',0,:id_unit_measure_in, NVL (:id_unit_measure_in, ID_UNIT_MEASURE)) '|| ','
     || ' DT_PREV_CLOSE_TSTZ = decode (' || l_DT_PREV_CLOSE_TSTZ_n || ',0,:dt_prev_close_tstz_in, NVL (:dt_prev_close_tstz_in, DT_PREV_CLOSE_TSTZ)) '|| ','
     || ' DT_CLOSE_BALANCE_TSTZ = decode (' || l_DT_CLOSE_BALANCE_TSTZ_n || ',0,:dt_close_balance_tstz_in, NVL (:dt_close_balance_tstz_in, DT_CLOSE_BALANCE_TSTZ)) '|| ','
     || ' DT_OPEN_TSTZ = decode (' || l_DT_OPEN_TSTZ_n || ',0,:dt_open_tstz_in, NVL (:dt_open_tstz_in, DT_OPEN_TSTZ)) '|| ','
     || ' DT_REGISTER_TSTZ = decode (' || l_DT_REGISTER_TSTZ_n || ',0,:dt_register_tstz_in, NVL (:dt_register_tstz_in, DT_REGISTER_TSTZ)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '|| ','
     || ' ID_PROF_LAST_CHANGE = decode (' || l_ID_PROF_LAST_CHANGE_n || ',0,:id_prof_last_change_in, NVL (:id_prof_last_change_in, ID_PROF_LAST_CHANGE)) '|| ','
     || ' DT_EH_BALANCE = decode (' || l_DT_EH_BALANCE_n || ',0,:dt_eh_balance_in, NVL (:dt_eh_balance_in, DT_EH_BALANCE)) '|| ','
     || ' FLG_CLOSE_TYPE = decode (' || l_FLG_CLOSE_TYPE_n || ',0,:flg_close_type_in, NVL (:flg_close_type_in, FLG_CLOSE_TYPE)) '|| ','
     || ' TOTAL_TIMES = decode (' || l_TOTAL_TIMES_n || ',0,:total_times_in, NVL (:total_times_in, TOTAL_TIMES)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_epis_hidrics_in,
     id_prof_close_in,
     flg_status_in,
     total_admin_in,
     total_elim_in,
     id_unit_measure_in,
     dt_prev_close_tstz_in,
     dt_close_balance_tstz_in,
     dt_open_tstz_in,
     dt_register_tstz_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
     id_prof_last_change_in,
     dt_eh_balance_in,
     flg_close_type_in,
     total_times_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'EPIS_HBALANCE_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           IF l_name = 'EHBH_EHID_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_EPIS_HIDRICS'
               , value_in => id_epis_hidrics_in);
           END IF;
           IF l_name = 'EHBH_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_CLOSE'
               , value_in => id_prof_close_in);
           END IF;
           IF l_name = 'EHBH_PROF_FK2'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROF_LAST_CHANGE'
               , value_in => id_prof_last_change_in);
           END IF;
           IF l_name = 'EHBH_UME_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_UNIT_MEASURE'
               , value_in => id_unit_measure_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_epis_hidrics_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS%TYPE DEFAULT NULL,
      ID_EPIS_HIDRICS_nin IN BOOLEAN := TRUE,
      id_prof_close_in IN EPIS_HBALANCE_HIST.ID_PROF_CLOSE%TYPE DEFAULT NULL,
      ID_PROF_CLOSE_nin IN BOOLEAN := TRUE,
      flg_status_in IN EPIS_HBALANCE_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      total_admin_in IN EPIS_HBALANCE_HIST.TOTAL_ADMIN%TYPE DEFAULT NULL,
      TOTAL_ADMIN_nin IN BOOLEAN := TRUE,
      total_elim_in IN EPIS_HBALANCE_HIST.TOTAL_ELIM%TYPE DEFAULT NULL,
      TOTAL_ELIM_nin IN BOOLEAN := TRUE,
      id_unit_measure_in IN EPIS_HBALANCE_HIST.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      ID_UNIT_MEASURE_nin IN BOOLEAN := TRUE,
      dt_prev_close_tstz_in IN EPIS_HBALANCE_HIST.DT_PREV_CLOSE_TSTZ%TYPE DEFAULT NULL,
      DT_PREV_CLOSE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_close_balance_tstz_in IN EPIS_HBALANCE_HIST.DT_CLOSE_BALANCE_TSTZ%TYPE DEFAULT NULL,
      DT_CLOSE_BALANCE_TSTZ_nin IN BOOLEAN := TRUE,
      dt_open_tstz_in IN EPIS_HBALANCE_HIST.DT_OPEN_TSTZ%TYPE DEFAULT NULL,
      DT_OPEN_TSTZ_nin IN BOOLEAN := TRUE,
      dt_register_tstz_in IN EPIS_HBALANCE_HIST.DT_REGISTER_TSTZ%TYPE DEFAULT NULL,
      DT_REGISTER_TSTZ_nin IN BOOLEAN := TRUE,
      create_user_in IN EPIS_HBALANCE_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN EPIS_HBALANCE_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN EPIS_HBALANCE_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN EPIS_HBALANCE_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN EPIS_HBALANCE_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN EPIS_HBALANCE_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      id_prof_last_change_in IN EPIS_HBALANCE_HIST.ID_PROF_LAST_CHANGE%TYPE DEFAULT NULL,
      ID_PROF_LAST_CHANGE_nin IN BOOLEAN := TRUE,
      dt_eh_balance_in IN EPIS_HBALANCE_HIST.DT_EH_BALANCE%TYPE DEFAULT NULL,
      DT_EH_BALANCE_nin IN BOOLEAN := TRUE,
      flg_close_type_in IN EPIS_HBALANCE_HIST.FLG_CLOSE_TYPE%TYPE DEFAULT NULL,
      FLG_CLOSE_TYPE_nin IN BOOLEAN := TRUE,
      total_times_in IN EPIS_HBALANCE_HIST.TOTAL_TIMES%TYPE DEFAULT NULL,
      TOTAL_TIMES_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_epis_hidrics_in => id_epis_hidrics_in,
      ID_EPIS_HIDRICS_nin => ID_EPIS_HIDRICS_nin,
      id_prof_close_in => id_prof_close_in,
      ID_PROF_CLOSE_nin => ID_PROF_CLOSE_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      total_admin_in => total_admin_in,
      TOTAL_ADMIN_nin => TOTAL_ADMIN_nin,
      total_elim_in => total_elim_in,
      TOTAL_ELIM_nin => TOTAL_ELIM_nin,
      id_unit_measure_in => id_unit_measure_in,
      ID_UNIT_MEASURE_nin => ID_UNIT_MEASURE_nin,
      dt_prev_close_tstz_in => dt_prev_close_tstz_in,
      DT_PREV_CLOSE_TSTZ_nin => DT_PREV_CLOSE_TSTZ_nin,
      dt_close_balance_tstz_in => dt_close_balance_tstz_in,
      DT_CLOSE_BALANCE_TSTZ_nin => DT_CLOSE_BALANCE_TSTZ_nin,
      dt_open_tstz_in => dt_open_tstz_in,
      DT_OPEN_TSTZ_nin => DT_OPEN_TSTZ_nin,
      dt_register_tstz_in => dt_register_tstz_in,
      DT_REGISTER_TSTZ_nin => DT_REGISTER_TSTZ_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      id_prof_last_change_in => id_prof_last_change_in,
      ID_PROF_LAST_CHANGE_nin => ID_PROF_LAST_CHANGE_nin,
      dt_eh_balance_in => dt_eh_balance_in,
      DT_EH_BALANCE_nin => DT_EH_BALANCE_nin,
      flg_close_type_in => flg_close_type_in,
      FLG_CLOSE_TYPE_nin => FLG_CLOSE_TYPE_nin,
      total_times_in => total_times_in,
      TOTAL_TIMES_nin => TOTAL_TIMES_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN EPIS_HBALANCE_HIST%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_epis_hidrics_balance_in => rec_in.ID_EPIS_HIDRICS_BALANCE,
         dt_epis_hbalance_hist_in => rec_in.DT_EPIS_HBALANCE_HIST,
         id_epis_hidrics_in => rec_in.ID_EPIS_HIDRICS,
         id_prof_close_in => rec_in.ID_PROF_CLOSE,
         flg_status_in => rec_in.FLG_STATUS,
         total_admin_in => rec_in.TOTAL_ADMIN,
         total_elim_in => rec_in.TOTAL_ELIM,
         id_unit_measure_in => rec_in.ID_UNIT_MEASURE,
         dt_prev_close_tstz_in => rec_in.DT_PREV_CLOSE_TSTZ,
         dt_close_balance_tstz_in => rec_in.DT_CLOSE_BALANCE_TSTZ,
         dt_open_tstz_in => rec_in.DT_OPEN_TSTZ,
         dt_register_tstz_in => rec_in.DT_REGISTER_TSTZ,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         id_prof_last_change_in => rec_in.ID_PROF_LAST_CHANGE,
         dt_eh_balance_in => rec_in.DT_EH_BALANCE,
         flg_close_type_in => rec_in.FLG_CLOSE_TYPE,
         total_times_in => rec_in.TOTAL_TIMES

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN EPIS_HBALANCE_HIST%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_epis_hidrics_balance_in => rec_in.ID_EPIS_HIDRICS_BALANCE,
         dt_epis_hbalance_hist_in => rec_in.DT_EPIS_HBALANCE_HIST,
         id_epis_hidrics_in => rec_in.ID_EPIS_HIDRICS,
         id_prof_close_in => rec_in.ID_PROF_CLOSE,
         flg_status_in => rec_in.FLG_STATUS,
         total_admin_in => rec_in.TOTAL_ADMIN,
         total_elim_in => rec_in.TOTAL_ELIM,
         id_unit_measure_in => rec_in.ID_UNIT_MEASURE,
         dt_prev_close_tstz_in => rec_in.DT_PREV_CLOSE_TSTZ,
         dt_close_balance_tstz_in => rec_in.DT_CLOSE_BALANCE_TSTZ,
         dt_open_tstz_in => rec_in.DT_OPEN_TSTZ,
         dt_register_tstz_in => rec_in.DT_REGISTER_TSTZ,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         id_prof_last_change_in => rec_in.ID_PROF_LAST_CHANGE,
         dt_eh_balance_in => rec_in.DT_EH_BALANCE,
         flg_close_type_in => rec_in.FLG_CLOSE_TYPE,
         total_times_in => rec_in.TOTAL_TIMES

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_epis_hidrics_balance_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS_BALANCE%TYPE,
      dt_epis_hbalance_hist_in IN EPIS_HBALANCE_HIST.DT_EPIS_HBALANCE_HIST%TYPE,
      id_epis_hidrics_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS%TYPE DEFAULT NULL,
      id_prof_close_in IN EPIS_HBALANCE_HIST.ID_PROF_CLOSE%TYPE DEFAULT NULL,
      flg_status_in IN EPIS_HBALANCE_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      total_admin_in IN EPIS_HBALANCE_HIST.TOTAL_ADMIN%TYPE DEFAULT NULL,
      total_elim_in IN EPIS_HBALANCE_HIST.TOTAL_ELIM%TYPE DEFAULT NULL,
      id_unit_measure_in IN EPIS_HBALANCE_HIST.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      dt_prev_close_tstz_in IN EPIS_HBALANCE_HIST.DT_PREV_CLOSE_TSTZ%TYPE DEFAULT NULL,
      dt_close_balance_tstz_in IN EPIS_HBALANCE_HIST.DT_CLOSE_BALANCE_TSTZ%TYPE DEFAULT NULL,
      dt_open_tstz_in IN EPIS_HBALANCE_HIST.DT_OPEN_TSTZ%TYPE DEFAULT NULL,
      dt_register_tstz_in IN EPIS_HBALANCE_HIST.DT_REGISTER_TSTZ%TYPE DEFAULT NULL,
      create_user_in IN EPIS_HBALANCE_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN EPIS_HBALANCE_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN EPIS_HBALANCE_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN EPIS_HBALANCE_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN EPIS_HBALANCE_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN EPIS_HBALANCE_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_prof_last_change_in IN EPIS_HBALANCE_HIST.ID_PROF_LAST_CHANGE%TYPE DEFAULT NULL,
      dt_eh_balance_in IN EPIS_HBALANCE_HIST.DT_EH_BALANCE%TYPE DEFAULT NULL,
      flg_close_type_in IN EPIS_HBALANCE_HIST.FLG_CLOSE_TYPE%TYPE DEFAULT NULL,
      total_times_in IN EPIS_HBALANCE_HIST.TOTAL_TIMES%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_epis_hidrics_balance_in => id_epis_hidrics_balance_in,
         dt_epis_hbalance_hist_in => dt_epis_hbalance_hist_in,
         id_epis_hidrics_in => id_epis_hidrics_in,
         id_prof_close_in => id_prof_close_in,
         flg_status_in => flg_status_in,
         total_admin_in => total_admin_in,
         total_elim_in => total_elim_in,
         id_unit_measure_in => id_unit_measure_in,
         dt_prev_close_tstz_in => dt_prev_close_tstz_in,
         dt_close_balance_tstz_in => dt_close_balance_tstz_in,
         dt_open_tstz_in => dt_open_tstz_in,
         dt_register_tstz_in => dt_register_tstz_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         id_prof_last_change_in => id_prof_last_change_in,
         dt_eh_balance_in => dt_eh_balance_in,
         flg_close_type_in => flg_close_type_in,
         total_times_in => total_times_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_epis_hidrics_balance_in => id_epis_hidrics_balance_in,
            dt_epis_hbalance_hist_in => dt_epis_hbalance_hist_in,
            id_epis_hidrics_in => id_epis_hidrics_in,
            id_prof_close_in => id_prof_close_in,
            flg_status_in => flg_status_in,
            total_admin_in => total_admin_in,
            total_elim_in => total_elim_in,
            id_unit_measure_in => id_unit_measure_in,
            dt_prev_close_tstz_in => dt_prev_close_tstz_in,
            dt_close_balance_tstz_in => dt_close_balance_tstz_in,
            dt_open_tstz_in => dt_open_tstz_in,
            dt_register_tstz_in => dt_register_tstz_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            id_prof_last_change_in => id_prof_last_change_in,
            dt_eh_balance_in => dt_eh_balance_in,
            flg_close_type_in => flg_close_type_in,
            total_times_in => total_times_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_epis_hidrics_balance_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS_BALANCE%TYPE,
      dt_epis_hbalance_hist_in IN EPIS_HBALANCE_HIST.DT_EPIS_HBALANCE_HIST%TYPE,
      id_epis_hidrics_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS%TYPE DEFAULT NULL,
      id_prof_close_in IN EPIS_HBALANCE_HIST.ID_PROF_CLOSE%TYPE DEFAULT NULL,
      flg_status_in IN EPIS_HBALANCE_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      total_admin_in IN EPIS_HBALANCE_HIST.TOTAL_ADMIN%TYPE DEFAULT NULL,
      total_elim_in IN EPIS_HBALANCE_HIST.TOTAL_ELIM%TYPE DEFAULT NULL,
      id_unit_measure_in IN EPIS_HBALANCE_HIST.ID_UNIT_MEASURE%TYPE DEFAULT NULL,
      dt_prev_close_tstz_in IN EPIS_HBALANCE_HIST.DT_PREV_CLOSE_TSTZ%TYPE DEFAULT NULL,
      dt_close_balance_tstz_in IN EPIS_HBALANCE_HIST.DT_CLOSE_BALANCE_TSTZ%TYPE DEFAULT NULL,
      dt_open_tstz_in IN EPIS_HBALANCE_HIST.DT_OPEN_TSTZ%TYPE DEFAULT NULL,
      dt_register_tstz_in IN EPIS_HBALANCE_HIST.DT_REGISTER_TSTZ%TYPE DEFAULT NULL,
      create_user_in IN EPIS_HBALANCE_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN EPIS_HBALANCE_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN EPIS_HBALANCE_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN EPIS_HBALANCE_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN EPIS_HBALANCE_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN EPIS_HBALANCE_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      id_prof_last_change_in IN EPIS_HBALANCE_HIST.ID_PROF_LAST_CHANGE%TYPE DEFAULT NULL,
      dt_eh_balance_in IN EPIS_HBALANCE_HIST.DT_EH_BALANCE%TYPE DEFAULT NULL,
      flg_close_type_in IN EPIS_HBALANCE_HIST.FLG_CLOSE_TYPE%TYPE DEFAULT NULL,
      total_times_in IN EPIS_HBALANCE_HIST.TOTAL_TIMES%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_epis_hidrics_balance_in,
      dt_epis_hbalance_hist_in,
      id_epis_hidrics_in,
      id_prof_close_in,
      flg_status_in,
      total_admin_in,
      total_elim_in,
      id_unit_measure_in,
      dt_prev_close_tstz_in,
      dt_close_balance_tstz_in,
      dt_open_tstz_in,
      dt_register_tstz_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
      id_prof_last_change_in,
      dt_eh_balance_in,
      flg_close_type_in,
      total_times_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN EPIS_HBALANCE_HIST_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_EPIS_HIDRICS_BALANCE ID_EPIS_HIDRICS_BALANCE_cc;
      l_DT_EPIS_HBALANCE_HIST DT_EPIS_HBALANCE_HIST_cc;
      l_ID_EPIS_HIDRICS ID_EPIS_HIDRICS_cc;
      l_ID_PROF_CLOSE ID_PROF_CLOSE_cc;
      l_FLG_STATUS FLG_STATUS_cc;
      l_TOTAL_ADMIN TOTAL_ADMIN_cc;
      l_TOTAL_ELIM TOTAL_ELIM_cc;
      l_ID_UNIT_MEASURE ID_UNIT_MEASURE_cc;
      l_DT_PREV_CLOSE_TSTZ DT_PREV_CLOSE_TSTZ_cc;
      l_DT_CLOSE_BALANCE_TSTZ DT_CLOSE_BALANCE_TSTZ_cc;
      l_DT_OPEN_TSTZ DT_OPEN_TSTZ_cc;
      l_DT_REGISTER_TSTZ DT_REGISTER_TSTZ_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
      l_ID_PROF_LAST_CHANGE ID_PROF_LAST_CHANGE_cc;
      l_DT_EH_BALANCE DT_EH_BALANCE_cc;
      l_FLG_CLOSE_TYPE FLG_CLOSE_TYPE_cc;
      l_TOTAL_TIMES TOTAL_TIMES_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_EPIS_HIDRICS_BALANCE(i) := col_in(i).ID_EPIS_HIDRICS_BALANCE;
         l_DT_EPIS_HBALANCE_HIST(i) := col_in(i).DT_EPIS_HBALANCE_HIST;
         l_ID_EPIS_HIDRICS(i) := col_in(i).ID_EPIS_HIDRICS;
         l_ID_PROF_CLOSE(i) := col_in(i).ID_PROF_CLOSE;
         l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
         l_TOTAL_ADMIN(i) := col_in(i).TOTAL_ADMIN;
         l_TOTAL_ELIM(i) := col_in(i).TOTAL_ELIM;
         l_ID_UNIT_MEASURE(i) := col_in(i).ID_UNIT_MEASURE;
         l_DT_PREV_CLOSE_TSTZ(i) := col_in(i).DT_PREV_CLOSE_TSTZ;
         l_DT_CLOSE_BALANCE_TSTZ(i) := col_in(i).DT_CLOSE_BALANCE_TSTZ;
         l_DT_OPEN_TSTZ(i) := col_in(i).DT_OPEN_TSTZ;
         l_DT_REGISTER_TSTZ(i) := col_in(i).DT_REGISTER_TSTZ;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
         l_ID_PROF_LAST_CHANGE(i) := col_in(i).ID_PROF_LAST_CHANGE;
         l_DT_EH_BALANCE(i) := col_in(i).DT_EH_BALANCE;
         l_FLG_CLOSE_TYPE(i) := col_in(i).FLG_CLOSE_TYPE;
         l_TOTAL_TIMES(i) := col_in(i).TOTAL_TIMES;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE EPIS_HBALANCE_HIST SET
               ID_EPIS_HIDRICS = NVL (l_ID_EPIS_HIDRICS(i), ID_EPIS_HIDRICS),
               ID_PROF_CLOSE = NVL (l_ID_PROF_CLOSE(i), ID_PROF_CLOSE),
               FLG_STATUS = NVL (l_FLG_STATUS(i), FLG_STATUS),
               TOTAL_ADMIN = NVL (l_TOTAL_ADMIN(i), TOTAL_ADMIN),
               TOTAL_ELIM = NVL (l_TOTAL_ELIM(i), TOTAL_ELIM),
               ID_UNIT_MEASURE = NVL (l_ID_UNIT_MEASURE(i), ID_UNIT_MEASURE),
               DT_PREV_CLOSE_TSTZ = NVL (l_DT_PREV_CLOSE_TSTZ(i), DT_PREV_CLOSE_TSTZ),
               DT_CLOSE_BALANCE_TSTZ = NVL (l_DT_CLOSE_BALANCE_TSTZ(i), DT_CLOSE_BALANCE_TSTZ),
               DT_OPEN_TSTZ = NVL (l_DT_OPEN_TSTZ(i), DT_OPEN_TSTZ),
               DT_REGISTER_TSTZ = NVL (l_DT_REGISTER_TSTZ(i), DT_REGISTER_TSTZ),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
               ID_PROF_LAST_CHANGE = NVL (l_ID_PROF_LAST_CHANGE(i), ID_PROF_LAST_CHANGE),
               DT_EH_BALANCE = NVL (l_DT_EH_BALANCE(i), DT_EH_BALANCE),
               FLG_CLOSE_TYPE = NVL (l_FLG_CLOSE_TYPE(i), FLG_CLOSE_TYPE),
               TOTAL_TIMES = NVL (l_TOTAL_TIMES(i), TOTAL_TIMES)
             WHERE
                ID_EPIS_HIDRICS_BALANCE = l_ID_EPIS_HIDRICS_BALANCE(i) AND
                DT_EPIS_HBALANCE_HIST = l_DT_EPIS_HBALANCE_HIST(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE EPIS_HBALANCE_HIST SET
               ID_EPIS_HIDRICS = l_ID_EPIS_HIDRICS(i),
               ID_PROF_CLOSE = l_ID_PROF_CLOSE(i),
               FLG_STATUS = l_FLG_STATUS(i),
               TOTAL_ADMIN = l_TOTAL_ADMIN(i),
               TOTAL_ELIM = l_TOTAL_ELIM(i),
               ID_UNIT_MEASURE = l_ID_UNIT_MEASURE(i),
               DT_PREV_CLOSE_TSTZ = l_DT_PREV_CLOSE_TSTZ(i),
               DT_CLOSE_BALANCE_TSTZ = l_DT_CLOSE_BALANCE_TSTZ(i),
               DT_OPEN_TSTZ = l_DT_OPEN_TSTZ(i),
               DT_REGISTER_TSTZ = l_DT_REGISTER_TSTZ(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
               ID_PROF_LAST_CHANGE = l_ID_PROF_LAST_CHANGE(i),
               DT_EH_BALANCE = l_DT_EH_BALANCE(i),
               FLG_CLOSE_TYPE = l_FLG_CLOSE_TYPE(i),
               TOTAL_TIMES = l_TOTAL_TIMES(i)
             WHERE
                ID_EPIS_HIDRICS_BALANCE = l_ID_EPIS_HIDRICS_BALANCE(i) AND
                DT_EPIS_HBALANCE_HIST = l_DT_EPIS_HBALANCE_HIST(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN EPIS_HBALANCE_HIST_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE EPIS_HBALANCE_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE EPIS_HBALANCE_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE EPIS_HBALANCE_HIST set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE EPIS_HBALANCE_HIST set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_epis_hidrics_balance_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS_BALANCE%TYPE,
      dt_epis_hbalance_hist_in IN EPIS_HBALANCE_HIST.DT_EPIS_HBALANCE_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_HBALANCE_HIST
       WHERE
          ID_EPIS_HIDRICS_BALANCE = id_epis_hidrics_balance_in AND
          DT_EPIS_HBALANCE_HIST = dt_epis_hbalance_hist_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_epis_hidrics_balance_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS_BALANCE%TYPE,
      dt_epis_hbalance_hist_in IN EPIS_HBALANCE_HIST.DT_EPIS_HBALANCE_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_epis_hidrics_balance_in => id_epis_hidrics_balance_in,
      dt_epis_hbalance_hist_in => dt_epis_hbalance_hist_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_EPIS_HIDRICS_BALANCE
   PROCEDURE del_ID_EPIS_HIDRICS_BALANCE (
      id_epis_hidrics_balance_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS_BALANCE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM EPIS_HBALANCE_HIST
       WHERE ID_EPIS_HIDRICS_BALANCE = id_epis_hidrics_balance_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_EPIS_HIDRICS_BALANCE;

   -- Delete all rows for primary key column DT_EPIS_HBALANCE_HIST
   PROCEDURE del_DT_EPIS_HBALANCE_HIST (
      dt_epis_hbalance_hist_in IN EPIS_HBALANCE_HIST.DT_EPIS_HBALANCE_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM EPIS_HBALANCE_HIST
       WHERE DT_EPIS_HBALANCE_HIST = dt_epis_hbalance_hist_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_DT_EPIS_HBALANCE_HIST;






   -- Delete all rows for primary key column ID_EPIS_HIDRICS_BALANCE
   PROCEDURE del_ID_EPIS_HIDRICS_BALANCE (
      id_epis_hidrics_balance_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS_BALANCE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_EPIS_HIDRICS_BALANCE (
      id_epis_hidrics_balance_in => id_epis_hidrics_balance_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_EPIS_HIDRICS_BALANCE;

   -- Delete all rows for primary key column DT_EPIS_HBALANCE_HIST
   PROCEDURE del_DT_EPIS_HBALANCE_HIST (
      dt_epis_hbalance_hist_in IN EPIS_HBALANCE_HIST.DT_EPIS_HBALANCE_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_DT_EPIS_HBALANCE_HIST (
      dt_epis_hbalance_hist_in => dt_epis_hbalance_hist_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_DT_EPIS_HBALANCE_HIST;















   PROCEDURE del_EHBH_EHID_FK (
      id_epis_hidrics_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_HBALANCE_HIST
       WHERE
          ID_EPIS_HIDRICS = del_EHBH_EHID_FK.id_epis_hidrics_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EHBH_EHID_FK;



PROCEDURE del_EHBH_EHID_FK (
      id_epis_hidrics_in IN EPIS_HBALANCE_HIST.ID_EPIS_HIDRICS%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EHBH_EHID_FK (
      id_epis_hidrics_in => id_epis_hidrics_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EHBH_EHID_FK;





   PROCEDURE del_EHBH_PROF_FK (
      id_prof_close_in IN EPIS_HBALANCE_HIST.ID_PROF_CLOSE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_HBALANCE_HIST
       WHERE
          ID_PROF_CLOSE = del_EHBH_PROF_FK.id_prof_close_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EHBH_PROF_FK;



PROCEDURE del_EHBH_PROF_FK (
      id_prof_close_in IN EPIS_HBALANCE_HIST.ID_PROF_CLOSE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EHBH_PROF_FK (
      id_prof_close_in => id_prof_close_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EHBH_PROF_FK;





   PROCEDURE del_EHBH_PROF_FK2 (
      id_prof_last_change_in IN EPIS_HBALANCE_HIST.ID_PROF_LAST_CHANGE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_HBALANCE_HIST
       WHERE
          ID_PROF_LAST_CHANGE = del_EHBH_PROF_FK2.id_prof_last_change_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EHBH_PROF_FK2;



PROCEDURE del_EHBH_PROF_FK2 (
      id_prof_last_change_in IN EPIS_HBALANCE_HIST.ID_PROF_LAST_CHANGE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EHBH_PROF_FK2 (
      id_prof_last_change_in => id_prof_last_change_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EHBH_PROF_FK2;





   PROCEDURE del_EHBH_UME_FK (
      id_unit_measure_in IN EPIS_HBALANCE_HIST.ID_UNIT_MEASURE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM EPIS_HBALANCE_HIST
       WHERE
          ID_UNIT_MEASURE = del_EHBH_UME_FK.id_unit_measure_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_EHBH_UME_FK;



PROCEDURE del_EHBH_UME_FK (
      id_unit_measure_in IN EPIS_HBALANCE_HIST.ID_UNIT_MEASURE%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_EHBH_UME_FK (
      id_unit_measure_in => id_unit_measure_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_EHBH_UME_FK;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM EPIS_HBALANCE_HIST';
      ELSE
         RETURN
            'DELETE FROM EPIS_HBALANCE_HIST WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'EPIS_HBALANCE_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'EPIS_HBALANCE_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      epis_hbalance_hist_inout IN OUT EPIS_HBALANCE_HIST%ROWTYPE
   )
   IS
   BEGIN
      epis_hbalance_hist_inout.ID_EPIS_HIDRICS_BALANCE := NULL;
      epis_hbalance_hist_inout.DT_EPIS_HBALANCE_HIST := NULL;
      epis_hbalance_hist_inout.ID_EPIS_HIDRICS := NULL;
      epis_hbalance_hist_inout.ID_PROF_CLOSE := NULL;
      epis_hbalance_hist_inout.FLG_STATUS := NULL;
      epis_hbalance_hist_inout.TOTAL_ADMIN := NULL;
      epis_hbalance_hist_inout.TOTAL_ELIM := NULL;
      epis_hbalance_hist_inout.ID_UNIT_MEASURE := NULL;
      epis_hbalance_hist_inout.DT_PREV_CLOSE_TSTZ := NULL;
      epis_hbalance_hist_inout.DT_CLOSE_BALANCE_TSTZ := NULL;
      epis_hbalance_hist_inout.DT_OPEN_TSTZ := NULL;
      epis_hbalance_hist_inout.DT_REGISTER_TSTZ := NULL;
      epis_hbalance_hist_inout.CREATE_USER := NULL;
      epis_hbalance_hist_inout.CREATE_TIME := NULL;
      epis_hbalance_hist_inout.CREATE_INSTITUTION := NULL;
      epis_hbalance_hist_inout.UPDATE_USER := NULL;
      epis_hbalance_hist_inout.UPDATE_TIME := NULL;
      epis_hbalance_hist_inout.UPDATE_INSTITUTION := NULL;
      epis_hbalance_hist_inout.ID_PROF_LAST_CHANGE := NULL;
      epis_hbalance_hist_inout.DT_EH_BALANCE := NULL;
      epis_hbalance_hist_inout.FLG_CLOSE_TYPE := NULL;
      epis_hbalance_hist_inout.TOTAL_TIMES := NULL;
   END initrec;

   FUNCTION initrec RETURN EPIS_HBALANCE_HIST%ROWTYPE
   IS
      l_epis_hbalance_hist EPIS_HBALANCE_HIST%ROWTYPE;
   BEGIN
      RETURN l_epis_hbalance_hist;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN EPIS_HBALANCE_HIST_tc
   IS
        data EPIS_HBALANCE_HIST_tc;
   BEGIN
        select * bulk collect into data from EPIS_HBALANCE_HIST where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN EPIS_HBALANCE_HIST_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data EPIS_HBALANCE_HIST_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_EPIS_HBALANCE_HIST;
/
