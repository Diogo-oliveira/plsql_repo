/*-- Last Change Revision: $Rev: 1797197 $*/
/*-- Last Change by: $Author: pedro.henriques $*/
/*-- Date of last change: $Date: 2017-09-28 10:13:30 +0100 (qui, 28 set 2017) $*/
CREATE OR REPLACE PACKAGE BODY ts_aih_abs_data
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2017-09-05 13:46:37
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN aih_abs_data.id_aih_abs_data%TYPE IS
        retval aih_abs_data.id_aih_abs_data%TYPE;
    BEGIN
        IF sequence_in IS NULL
        THEN
            retval := seq_aih_abs_data.nextval;
        ELSE
            EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                INTO retval;
        END IF;
        RETURN retval;
    END next_key;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_aih_data_in         IN aih_abs_data.id_aih_data%TYPE DEFAULT NULL,
        flg_aih_type_in        IN aih_abs_data.flg_aih_type%TYPE DEFAULT NULL,
        flg_field_type_in      IN aih_abs_data.flg_field_type%TYPE DEFAULT NULL,
        id_diag_in             IN aih_abs_data.id_diag%TYPE DEFAULT NULL,
        id_alert_diag_in       IN aih_abs_data.id_alert_diag%TYPE DEFAULT NULL,
        id_diag_inst_owner_in  IN aih_abs_data.id_diag_inst_owner%TYPE DEFAULT 0,
        id_adiag_inst_owner_in IN aih_abs_data.id_adiag_inst_owner%TYPE DEFAULT NULL,
        diag_quantity_in       IN aih_abs_data.diag_quantity%TYPE DEFAULT NULL,
        abs_order_in           IN aih_abs_data.abs_order%TYPE DEFAULT NULL,
        create_user_in         IN aih_abs_data.create_user%TYPE DEFAULT NULL,
        create_time_in         IN aih_abs_data.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN aih_abs_data.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN aih_abs_data.update_user%TYPE DEFAULT NULL,
        update_time_in         IN aih_abs_data.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN aih_abs_data.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky aih_abs_data.id_aih_abs_data%TYPE := next_key;
    BEGIN
        ins(id_aih_abs_data_in     => l_pky,
            id_aih_data_in         => id_aih_data_in,
            flg_aih_type_in        => flg_aih_type_in,
            flg_field_type_in      => flg_field_type_in,
            id_diag_in             => id_diag_in,
            id_alert_diag_in       => id_alert_diag_in,
            id_diag_inst_owner_in  => id_diag_inst_owner_in,
            id_adiag_inst_owner_in => id_adiag_inst_owner_in,
            diag_quantity_in       => diag_quantity_in,
            abs_order_in           => abs_order_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    -- Insert one row, generating hidden primary key using a sequence
    PROCEDURE ins
    (
        id_aih_data_in         IN aih_abs_data.id_aih_data%TYPE DEFAULT NULL,
        flg_aih_type_in        IN aih_abs_data.flg_aih_type%TYPE DEFAULT NULL,
        flg_field_type_in      IN aih_abs_data.flg_field_type%TYPE DEFAULT NULL,
        id_diag_in             IN aih_abs_data.id_diag%TYPE DEFAULT NULL,
        id_alert_diag_in       IN aih_abs_data.id_alert_diag%TYPE DEFAULT NULL,
        id_diag_inst_owner_in  IN aih_abs_data.id_diag_inst_owner%TYPE DEFAULT 0,
        id_adiag_inst_owner_in IN aih_abs_data.id_adiag_inst_owner%TYPE DEFAULT NULL,
        diag_quantity_in       IN aih_abs_data.diag_quantity%TYPE DEFAULT NULL,
        abs_order_in           IN aih_abs_data.abs_order%TYPE DEFAULT NULL,
        create_user_in         IN aih_abs_data.create_user%TYPE DEFAULT NULL,
        create_time_in         IN aih_abs_data.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN aih_abs_data.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN aih_abs_data.update_user%TYPE DEFAULT NULL,
        update_time_in         IN aih_abs_data.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN aih_abs_data.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_aih_data_in         => id_aih_data_in,
            flg_aih_type_in        => flg_aih_type_in,
            flg_field_type_in      => flg_field_type_in,
            id_diag_in             => id_diag_in,
            id_alert_diag_in       => id_alert_diag_in,
            id_diag_inst_owner_in  => id_diag_inst_owner_in,
            id_adiag_inst_owner_in => id_adiag_inst_owner_in,
            diag_quantity_in       => diag_quantity_in,
            abs_order_in           => abs_order_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_aih_data_in         IN aih_abs_data.id_aih_data%TYPE DEFAULT NULL,
        flg_aih_type_in        IN aih_abs_data.flg_aih_type%TYPE DEFAULT NULL,
        flg_field_type_in      IN aih_abs_data.flg_field_type%TYPE DEFAULT NULL,
        id_diag_in             IN aih_abs_data.id_diag%TYPE DEFAULT NULL,
        id_alert_diag_in       IN aih_abs_data.id_alert_diag%TYPE DEFAULT NULL,
        id_diag_inst_owner_in  IN aih_abs_data.id_diag_inst_owner%TYPE DEFAULT 0,
        id_adiag_inst_owner_in IN aih_abs_data.id_adiag_inst_owner%TYPE DEFAULT NULL,
        diag_quantity_in       IN aih_abs_data.diag_quantity%TYPE DEFAULT NULL,
        abs_order_in           IN aih_abs_data.abs_order%TYPE DEFAULT NULL,
        create_user_in         IN aih_abs_data.create_user%TYPE DEFAULT NULL,
        create_time_in         IN aih_abs_data.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN aih_abs_data.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN aih_abs_data.update_user%TYPE DEFAULT NULL,
        update_time_in         IN aih_abs_data.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN aih_abs_data.update_institution%TYPE DEFAULT NULL,
        id_aih_abs_data_out    IN OUT aih_abs_data.id_aih_abs_data%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_pky aih_abs_data.id_aih_abs_data%TYPE := next_key;
    BEGIN
        ins(id_aih_abs_data_in     => l_pky,
            id_aih_data_in         => id_aih_data_in,
            flg_aih_type_in        => flg_aih_type_in,
            flg_field_type_in      => flg_field_type_in,
            id_diag_in             => id_diag_in,
            id_alert_diag_in       => id_alert_diag_in,
            id_diag_inst_owner_in  => id_diag_inst_owner_in,
            id_adiag_inst_owner_in => id_adiag_inst_owner_in,
            diag_quantity_in       => diag_quantity_in,
            abs_order_in           => abs_order_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        id_aih_abs_data_out := l_pky;
    END ins;

    -- Insert one row, returning primary key generated by sequence
    PROCEDURE ins
    (
        id_aih_data_in         IN aih_abs_data.id_aih_data%TYPE DEFAULT NULL,
        flg_aih_type_in        IN aih_abs_data.flg_aih_type%TYPE DEFAULT NULL,
        flg_field_type_in      IN aih_abs_data.flg_field_type%TYPE DEFAULT NULL,
        id_diag_in             IN aih_abs_data.id_diag%TYPE DEFAULT NULL,
        id_alert_diag_in       IN aih_abs_data.id_alert_diag%TYPE DEFAULT NULL,
        id_diag_inst_owner_in  IN aih_abs_data.id_diag_inst_owner%TYPE DEFAULT 0,
        id_adiag_inst_owner_in IN aih_abs_data.id_adiag_inst_owner%TYPE DEFAULT NULL,
        diag_quantity_in       IN aih_abs_data.diag_quantity%TYPE DEFAULT NULL,
        abs_order_in           IN aih_abs_data.abs_order%TYPE DEFAULT NULL,
        create_user_in         IN aih_abs_data.create_user%TYPE DEFAULT NULL,
        create_time_in         IN aih_abs_data.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN aih_abs_data.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN aih_abs_data.update_user%TYPE DEFAULT NULL,
        update_time_in         IN aih_abs_data.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN aih_abs_data.update_institution%TYPE DEFAULT NULL,
        id_aih_abs_data_out    IN OUT aih_abs_data.id_aih_abs_data%TYPE,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_aih_data_in         => id_aih_data_in,
            flg_aih_type_in        => flg_aih_type_in,
            flg_field_type_in      => flg_field_type_in,
            id_diag_in             => id_diag_in,
            id_alert_diag_in       => id_alert_diag_in,
            id_diag_inst_owner_in  => id_diag_inst_owner_in,
            id_adiag_inst_owner_in => id_adiag_inst_owner_in,
            diag_quantity_in       => diag_quantity_in,
            abs_order_in           => abs_order_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            id_aih_abs_data_out    => id_aih_abs_data_out,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_aih_data_in         IN aih_abs_data.id_aih_data%TYPE DEFAULT NULL,
        flg_aih_type_in        IN aih_abs_data.flg_aih_type%TYPE DEFAULT NULL,
        flg_field_type_in      IN aih_abs_data.flg_field_type%TYPE DEFAULT NULL,
        id_diag_in             IN aih_abs_data.id_diag%TYPE DEFAULT NULL,
        id_alert_diag_in       IN aih_abs_data.id_alert_diag%TYPE DEFAULT NULL,
        id_diag_inst_owner_in  IN aih_abs_data.id_diag_inst_owner%TYPE DEFAULT 0,
        id_adiag_inst_owner_in IN aih_abs_data.id_adiag_inst_owner%TYPE DEFAULT NULL,
        diag_quantity_in       IN aih_abs_data.diag_quantity%TYPE DEFAULT NULL,
        abs_order_in           IN aih_abs_data.abs_order%TYPE DEFAULT NULL,
        create_user_in         IN aih_abs_data.create_user%TYPE DEFAULT NULL,
        create_time_in         IN aih_abs_data.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN aih_abs_data.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN aih_abs_data.update_user%TYPE DEFAULT NULL,
        update_time_in         IN aih_abs_data.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN aih_abs_data.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) RETURN aih_abs_data.id_aih_abs_data%TYPE IS
        l_pky aih_abs_data.id_aih_abs_data%TYPE := next_key;
    BEGIN
        ins(id_aih_abs_data_in     => l_pky,
            id_aih_data_in         => id_aih_data_in,
            flg_aih_type_in        => flg_aih_type_in,
            flg_field_type_in      => flg_field_type_in,
            id_diag_in             => id_diag_in,
            id_alert_diag_in       => id_alert_diag_in,
            id_diag_inst_owner_in  => id_diag_inst_owner_in,
            id_adiag_inst_owner_in => id_adiag_inst_owner_in,
            diag_quantity_in       => diag_quantity_in,
            abs_order_in           => abs_order_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    -- Insert one row with function, return generated primary key
    FUNCTION ins
    (
        id_aih_data_in         IN aih_abs_data.id_aih_data%TYPE DEFAULT NULL,
        flg_aih_type_in        IN aih_abs_data.flg_aih_type%TYPE DEFAULT NULL,
        flg_field_type_in      IN aih_abs_data.flg_field_type%TYPE DEFAULT NULL,
        id_diag_in             IN aih_abs_data.id_diag%TYPE DEFAULT NULL,
        id_alert_diag_in       IN aih_abs_data.id_alert_diag%TYPE DEFAULT NULL,
        id_diag_inst_owner_in  IN aih_abs_data.id_diag_inst_owner%TYPE DEFAULT 0,
        id_adiag_inst_owner_in IN aih_abs_data.id_adiag_inst_owner%TYPE DEFAULT NULL,
        diag_quantity_in       IN aih_abs_data.diag_quantity%TYPE DEFAULT NULL,
        abs_order_in           IN aih_abs_data.abs_order%TYPE DEFAULT NULL,
        create_user_in         IN aih_abs_data.create_user%TYPE DEFAULT NULL,
        create_time_in         IN aih_abs_data.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN aih_abs_data.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN aih_abs_data.update_user%TYPE DEFAULT NULL,
        update_time_in         IN aih_abs_data.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN aih_abs_data.update_institution%TYPE DEFAULT NULL,
        -- Pass false if you want errors to propagate out unhandled
        handle_error_in IN BOOLEAN := TRUE
    ) RETURN aih_abs_data.id_aih_abs_data%TYPE IS
        l_pky    aih_abs_data.id_aih_abs_data%TYPE := next_key;
        rows_out table_varchar;
    BEGIN
        ins(id_aih_abs_data_in     => l_pky,
            id_aih_data_in         => id_aih_data_in,
            flg_aih_type_in        => flg_aih_type_in,
            flg_field_type_in      => flg_field_type_in,
            id_diag_in             => id_diag_in,
            id_alert_diag_in       => id_alert_diag_in,
            id_diag_inst_owner_in  => id_diag_inst_owner_in,
            id_adiag_inst_owner_in => id_adiag_inst_owner_in,
            diag_quantity_in       => diag_quantity_in,
            abs_order_in           => abs_order_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        RETURN l_pky;
    END ins;

    PROCEDURE ins
    (
        id_aih_abs_data_in     IN aih_abs_data.id_aih_abs_data%TYPE,
        id_aih_data_in         IN aih_abs_data.id_aih_data%TYPE DEFAULT NULL,
        flg_aih_type_in        IN aih_abs_data.flg_aih_type%TYPE DEFAULT NULL,
        flg_field_type_in      IN aih_abs_data.flg_field_type%TYPE DEFAULT NULL,
        id_diag_in             IN aih_abs_data.id_diag%TYPE DEFAULT NULL,
        id_alert_diag_in       IN aih_abs_data.id_alert_diag%TYPE DEFAULT NULL,
        id_diag_inst_owner_in  IN aih_abs_data.id_diag_inst_owner%TYPE DEFAULT 0,
        id_adiag_inst_owner_in IN aih_abs_data.id_adiag_inst_owner%TYPE DEFAULT NULL,
        diag_quantity_in       IN aih_abs_data.diag_quantity%TYPE DEFAULT NULL,
        abs_order_in           IN aih_abs_data.abs_order%TYPE DEFAULT NULL,
        create_user_in         IN aih_abs_data.create_user%TYPE DEFAULT NULL,
        create_time_in         IN aih_abs_data.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN aih_abs_data.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN aih_abs_data.update_user%TYPE DEFAULT NULL,
        update_time_in         IN aih_abs_data.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN aih_abs_data.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO aih_abs_data
            (id_aih_abs_data,
             id_aih_data,
             flg_aih_type,
             flg_field_type,
             id_diag,
             id_alert_diag,
             id_diag_inst_owner,
             id_adiag_inst_owner,
             diag_quantity,
             abs_order,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_aih_abs_data_in,
             id_aih_data_in,
             flg_aih_type_in,
             flg_field_type_in,
             id_diag_in,
             id_alert_diag_in,
             id_diag_inst_owner_in,
             id_adiag_inst_owner_in,
             diag_quantity_in,
             abs_order_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_aih_abs_data_in     IN aih_abs_data.id_aih_abs_data%TYPE,
        id_aih_data_in         IN aih_abs_data.id_aih_data%TYPE DEFAULT NULL,
        flg_aih_type_in        IN aih_abs_data.flg_aih_type%TYPE DEFAULT NULL,
        flg_field_type_in      IN aih_abs_data.flg_field_type%TYPE DEFAULT NULL,
        id_diag_in             IN aih_abs_data.id_diag%TYPE DEFAULT NULL,
        id_alert_diag_in       IN aih_abs_data.id_alert_diag%TYPE DEFAULT NULL,
        id_diag_inst_owner_in  IN aih_abs_data.id_diag_inst_owner%TYPE DEFAULT 0,
        id_adiag_inst_owner_in IN aih_abs_data.id_adiag_inst_owner%TYPE DEFAULT NULL,
        diag_quantity_in       IN aih_abs_data.diag_quantity%TYPE DEFAULT NULL,
        abs_order_in           IN aih_abs_data.abs_order%TYPE DEFAULT NULL,
        create_user_in         IN aih_abs_data.create_user%TYPE DEFAULT NULL,
        create_time_in         IN aih_abs_data.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN aih_abs_data.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN aih_abs_data.update_user%TYPE DEFAULT NULL,
        update_time_in         IN aih_abs_data.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN aih_abs_data.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_aih_abs_data_in     => id_aih_abs_data_in,
            id_aih_data_in         => id_aih_data_in,
            flg_aih_type_in        => flg_aih_type_in,
            flg_field_type_in      => flg_field_type_in,
            id_diag_in             => id_diag_in,
            id_alert_diag_in       => id_alert_diag_in,
            id_diag_inst_owner_in  => id_diag_inst_owner_in,
            id_adiag_inst_owner_in => id_adiag_inst_owner_in,
            diag_quantity_in       => diag_quantity_in,
            abs_order_in           => abs_order_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN aih_abs_data%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec aih_abs_data%ROWTYPE := rec_in;
    BEGIN
        IF gen_pky_in
        THEN
            l_rec.id_aih_abs_data := next_key(sequence_in);
        END IF;
    
        ins(id_aih_abs_data_in     => l_rec.id_aih_abs_data,
            id_aih_data_in         => l_rec.id_aih_data,
            flg_aih_type_in        => l_rec.flg_aih_type,
            flg_field_type_in      => l_rec.flg_field_type,
            id_diag_in             => l_rec.id_diag,
            id_alert_diag_in       => l_rec.id_alert_diag,
            id_diag_inst_owner_in  => l_rec.id_diag_inst_owner,
            id_adiag_inst_owner_in => l_rec.id_adiag_inst_owner,
            diag_quantity_in       => l_rec.diag_quantity,
            abs_order_in           => l_rec.abs_order,
            create_user_in         => l_rec.create_user,
            create_time_in         => l_rec.create_time,
            create_institution_in  => l_rec.create_institution,
            update_user_in         => l_rec.update_user,
            update_time_in         => l_rec.update_time,
            update_institution_in  => l_rec.update_institution,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN aih_abs_data%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN aih_abs_data_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO aih_abs_data
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN aih_abs_data_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_aih_abs_data_in      IN aih_abs_data.id_aih_abs_data%TYPE,
        id_aih_data_in          IN aih_abs_data.id_aih_data%TYPE DEFAULT NULL,
        id_aih_data_nin         IN BOOLEAN := TRUE,
        flg_aih_type_in         IN aih_abs_data.flg_aih_type%TYPE DEFAULT NULL,
        flg_aih_type_nin        IN BOOLEAN := TRUE,
        flg_field_type_in       IN aih_abs_data.flg_field_type%TYPE DEFAULT NULL,
        flg_field_type_nin      IN BOOLEAN := TRUE,
        id_diag_in              IN aih_abs_data.id_diag%TYPE DEFAULT NULL,
        id_diag_nin             IN BOOLEAN := TRUE,
        id_alert_diag_in        IN aih_abs_data.id_alert_diag%TYPE DEFAULT NULL,
        id_alert_diag_nin       IN BOOLEAN := TRUE,
        id_diag_inst_owner_in   IN aih_abs_data.id_diag_inst_owner%TYPE DEFAULT NULL,
        id_diag_inst_owner_nin  IN BOOLEAN := TRUE,
        id_adiag_inst_owner_in  IN aih_abs_data.id_adiag_inst_owner%TYPE DEFAULT NULL,
        id_adiag_inst_owner_nin IN BOOLEAN := TRUE,
        diag_quantity_in        IN aih_abs_data.diag_quantity%TYPE DEFAULT NULL,
        diag_quantity_nin       IN BOOLEAN := TRUE,
        abs_order_in            IN aih_abs_data.abs_order%TYPE DEFAULT NULL,
        abs_order_nin           IN BOOLEAN := TRUE,
        create_user_in          IN aih_abs_data.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN aih_abs_data.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN aih_abs_data.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN aih_abs_data.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN aih_abs_data.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN aih_abs_data.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_id_aih_data_n         NUMBER(1) := sys.diutil.bool_to_int(id_aih_data_nin);
        l_flg_aih_type_n        NUMBER(1) := sys.diutil.bool_to_int(flg_aih_type_nin);
        l_flg_field_type_n      NUMBER(1) := sys.diutil.bool_to_int(flg_field_type_nin);
        l_id_diag_n             NUMBER(1) := sys.diutil.bool_to_int(id_diag_nin);
        l_id_alert_diag_n       NUMBER(1) := sys.diutil.bool_to_int(id_alert_diag_nin);
        l_id_diag_inst_owner_n  NUMBER(1) := sys.diutil.bool_to_int(id_diag_inst_owner_nin);
        l_id_adiag_inst_owner_n NUMBER(1) := sys.diutil.bool_to_int(id_adiag_inst_owner_nin);
        l_diag_quantity_n       NUMBER(1) := sys.diutil.bool_to_int(diag_quantity_nin);
        l_abs_order_n           NUMBER(1) := sys.diutil.bool_to_int(abs_order_nin);
        l_create_user_n         NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
    BEGIN
    
        UPDATE aih_abs_data
           SET id_aih_data         = decode(l_id_aih_data_n, 0, id_aih_data_in, nvl(id_aih_data_in, id_aih_data)),
               flg_aih_type        = decode(l_flg_aih_type_n, 0, flg_aih_type_in, nvl(flg_aih_type_in, flg_aih_type)),
               flg_field_type      = decode(l_flg_field_type_n,
                                            0,
                                            flg_field_type_in,
                                            nvl(flg_field_type_in, flg_field_type)),
               id_diag             = decode(l_id_diag_n, 0, id_diag_in, nvl(id_diag_in, id_diag)),
               id_alert_diag       = decode(l_id_alert_diag_n, 0, id_alert_diag_in, nvl(id_alert_diag_in, id_alert_diag)),
               id_diag_inst_owner  = decode(l_id_diag_inst_owner_n,
                                            0,
                                            id_diag_inst_owner_in,
                                            nvl(id_diag_inst_owner_in, id_diag_inst_owner)),
               id_adiag_inst_owner = decode(l_id_adiag_inst_owner_n,
                                            0,
                                            id_adiag_inst_owner_in,
                                            nvl(id_adiag_inst_owner_in, id_adiag_inst_owner)),
               diag_quantity       = decode(l_diag_quantity_n, 0, diag_quantity_in, nvl(diag_quantity_in, diag_quantity)),
               abs_order           = decode(l_abs_order_n, 0, abs_order_in, nvl(abs_order_in, abs_order)),
               create_user         = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time         = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution  = decode(l_create_institution_n,
                                            0,
                                            create_institution_in,
                                            nvl(create_institution_in, create_institution)),
               update_user         = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time         = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution  = decode(l_update_institution_n,
                                            0,
                                            update_institution_in,
                                            nvl(update_institution_in, update_institution))
         WHERE id_aih_abs_data = id_aih_abs_data_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_aih_abs_data_in      IN aih_abs_data.id_aih_abs_data%TYPE,
        id_aih_data_in          IN aih_abs_data.id_aih_data%TYPE DEFAULT NULL,
        id_aih_data_nin         IN BOOLEAN := TRUE,
        flg_aih_type_in         IN aih_abs_data.flg_aih_type%TYPE DEFAULT NULL,
        flg_aih_type_nin        IN BOOLEAN := TRUE,
        flg_field_type_in       IN aih_abs_data.flg_field_type%TYPE DEFAULT NULL,
        flg_field_type_nin      IN BOOLEAN := TRUE,
        id_diag_in              IN aih_abs_data.id_diag%TYPE DEFAULT NULL,
        id_diag_nin             IN BOOLEAN := TRUE,
        id_alert_diag_in        IN aih_abs_data.id_alert_diag%TYPE DEFAULT NULL,
        id_alert_diag_nin       IN BOOLEAN := TRUE,
        id_diag_inst_owner_in   IN aih_abs_data.id_diag_inst_owner%TYPE DEFAULT NULL,
        id_diag_inst_owner_nin  IN BOOLEAN := TRUE,
        id_adiag_inst_owner_in  IN aih_abs_data.id_adiag_inst_owner%TYPE DEFAULT NULL,
        id_adiag_inst_owner_nin IN BOOLEAN := TRUE,
        diag_quantity_in        IN aih_abs_data.diag_quantity%TYPE DEFAULT NULL,
        diag_quantity_nin       IN BOOLEAN := TRUE,
        abs_order_in            IN aih_abs_data.abs_order%TYPE DEFAULT NULL,
        abs_order_nin           IN BOOLEAN := TRUE,
        create_user_in          IN aih_abs_data.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN aih_abs_data.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN aih_abs_data.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN aih_abs_data.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN aih_abs_data.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN aih_abs_data.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_aih_abs_data_in      => id_aih_abs_data_in,
            id_aih_data_in          => id_aih_data_in,
            id_aih_data_nin         => id_aih_data_nin,
            flg_aih_type_in         => flg_aih_type_in,
            flg_aih_type_nin        => flg_aih_type_nin,
            flg_field_type_in       => flg_field_type_in,
            flg_field_type_nin      => flg_field_type_nin,
            id_diag_in              => id_diag_in,
            id_diag_nin             => id_diag_nin,
            id_alert_diag_in        => id_alert_diag_in,
            id_alert_diag_nin       => id_alert_diag_nin,
            id_diag_inst_owner_in   => id_diag_inst_owner_in,
            id_diag_inst_owner_nin  => id_diag_inst_owner_nin,
            id_adiag_inst_owner_in  => id_adiag_inst_owner_in,
            id_adiag_inst_owner_nin => id_adiag_inst_owner_nin,
            diag_quantity_in        => diag_quantity_in,
            diag_quantity_nin       => diag_quantity_nin,
            abs_order_in            => abs_order_in,
            abs_order_nin           => abs_order_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_aih_data_in          IN aih_abs_data.id_aih_data%TYPE DEFAULT NULL,
        id_aih_data_nin         IN BOOLEAN := TRUE,
        flg_aih_type_in         IN aih_abs_data.flg_aih_type%TYPE DEFAULT NULL,
        flg_aih_type_nin        IN BOOLEAN := TRUE,
        flg_field_type_in       IN aih_abs_data.flg_field_type%TYPE DEFAULT NULL,
        flg_field_type_nin      IN BOOLEAN := TRUE,
        id_diag_in              IN aih_abs_data.id_diag%TYPE DEFAULT NULL,
        id_diag_nin             IN BOOLEAN := TRUE,
        id_alert_diag_in        IN aih_abs_data.id_alert_diag%TYPE DEFAULT NULL,
        id_alert_diag_nin       IN BOOLEAN := TRUE,
        id_diag_inst_owner_in   IN aih_abs_data.id_diag_inst_owner%TYPE DEFAULT NULL,
        id_diag_inst_owner_nin  IN BOOLEAN := TRUE,
        id_adiag_inst_owner_in  IN aih_abs_data.id_adiag_inst_owner%TYPE DEFAULT NULL,
        id_adiag_inst_owner_nin IN BOOLEAN := TRUE,
        diag_quantity_in        IN aih_abs_data.diag_quantity%TYPE DEFAULT NULL,
        diag_quantity_nin       IN BOOLEAN := TRUE,
        abs_order_in            IN aih_abs_data.abs_order%TYPE DEFAULT NULL,
        abs_order_nin           IN BOOLEAN := TRUE,
        create_user_in          IN aih_abs_data.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN aih_abs_data.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN aih_abs_data.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN aih_abs_data.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN aih_abs_data.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN aih_abs_data.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        where_in                IN VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                   VARCHAR2(32767);
        l_rows_out              table_varchar;
        l_id_aih_data_n         NUMBER(1) := sys.diutil.bool_to_int(id_aih_data_nin);
        l_flg_aih_type_n        NUMBER(1) := sys.diutil.bool_to_int(flg_aih_type_nin);
        l_flg_field_type_n      NUMBER(1) := sys.diutil.bool_to_int(flg_field_type_nin);
        l_id_diag_n             NUMBER(1) := sys.diutil.bool_to_int(id_diag_nin);
        l_id_alert_diag_n       NUMBER(1) := sys.diutil.bool_to_int(id_alert_diag_nin);
        l_id_diag_inst_owner_n  NUMBER(1) := sys.diutil.bool_to_int(id_diag_inst_owner_nin);
        l_id_adiag_inst_owner_n NUMBER(1) := sys.diutil.bool_to_int(id_adiag_inst_owner_nin);
        l_diag_quantity_n       NUMBER(1) := sys.diutil.bool_to_int(diag_quantity_nin);
        l_abs_order_n           NUMBER(1) := sys.diutil.bool_to_int(abs_order_nin);
        l_create_user_n         NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
    BEGIN
        l_id_aih_data_n         := sys.diutil.bool_to_int(id_aih_data_nin);
        l_flg_aih_type_n        := sys.diutil.bool_to_int(flg_aih_type_nin);
        l_flg_field_type_n      := sys.diutil.bool_to_int(flg_field_type_nin);
        l_id_diag_n             := sys.diutil.bool_to_int(id_diag_nin);
        l_id_alert_diag_n       := sys.diutil.bool_to_int(id_alert_diag_nin);
        l_id_diag_inst_owner_n  := sys.diutil.bool_to_int(id_diag_inst_owner_nin);
        l_id_adiag_inst_owner_n := sys.diutil.bool_to_int(id_adiag_inst_owner_nin);
        l_diag_quantity_n       := sys.diutil.bool_to_int(diag_quantity_nin);
        l_abs_order_n           := sys.diutil.bool_to_int(abs_order_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_sql                   := 'UPDATE aih_abs_data SET' || ' ID_AIH_DATA = decode (' || l_id_aih_data_n ||
                                   ',0,:ID_AIH_DATA_in, NVL (:ID_AIH_DATA_in, ID_AIH_DATA)) ' || ',' ||
                                   ' FLG_AIH_TYPE = decode (' || l_flg_aih_type_n ||
                                   ',0,:FLG_AIH_TYPE_in, NVL (:FLG_AIH_TYPE_in, FLG_AIH_TYPE)) ' || ',' ||
                                   ' FLG_FIELD_TYPE = decode (' || l_flg_field_type_n ||
                                   ',0,:FLG_FIELD_TYPE_in, NVL (:FLG_FIELD_TYPE_in, FLG_FIELD_TYPE)) ' || ',' ||
                                   ' ID_DIAG = decode (' || l_id_diag_n ||
                                   ',0,:ID_DIAG_in, NVL (:ID_DIAG_in, ID_DIAG)) ' || ',' || ' ID_ALERT_DIAG = decode (' ||
                                   l_id_alert_diag_n ||
                                   ',0,:ID_ALERT_DIAG_in, NVL (:ID_ALERT_DIAG_in, ID_ALERT_DIAG)) ' || ',' ||
                                   ' ID_DIAG_INST_OWNER = decode (' || l_id_diag_inst_owner_n ||
                                   ',0,:ID_DIAG_INST_OWNER_in, NVL (:ID_DIAG_INST_OWNER_in, ID_DIAG_INST_OWNER)) ' || ',' ||
                                   ' ID_ADIAG_INST_OWNER = decode (' || l_id_adiag_inst_owner_n ||
                                   ',0,:ID_ADIAG_INST_OWNER_in, NVL (:ID_ADIAG_INST_OWNER_in, ID_ADIAG_INST_OWNER)) ' || ',' ||
                                   ' DIAG_QUANTITY = decode (' || l_diag_quantity_n ||
                                   ',0,:DIAG_QUANTITY_in, NVL (:DIAG_QUANTITY_in, DIAG_QUANTITY)) ' || ',' ||
                                   ' ABS_ORDER = decode (' || l_abs_order_n ||
                                   ',0,:ABS_ORDER_in, NVL (:ABS_ORDER_in, ABS_ORDER)) ' || ',' ||
                                   ' CREATE_USER = decode (' || l_create_user_n ||
                                   ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                   ' CREATE_TIME = decode (' || l_create_time_n ||
                                   ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                   ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                   ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                   ' UPDATE_USER = decode (' || l_update_user_n ||
                                   ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                   ' UPDATE_TIME = decode (' || l_update_time_n ||
                                   ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                   ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                   ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' ||
                                   ' where ' || nvl(where_in, '(1=1)') ||
                                   ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN id_aih_data_in, flg_aih_type_in, flg_field_type_in, id_diag_in, id_alert_diag_in, id_diag_inst_owner_in, id_adiag_inst_owner_in, diag_quantity_in, abs_order_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        id_aih_data_in          IN aih_abs_data.id_aih_data%TYPE DEFAULT NULL,
        id_aih_data_nin         IN BOOLEAN := TRUE,
        flg_aih_type_in         IN aih_abs_data.flg_aih_type%TYPE DEFAULT NULL,
        flg_aih_type_nin        IN BOOLEAN := TRUE,
        flg_field_type_in       IN aih_abs_data.flg_field_type%TYPE DEFAULT NULL,
        flg_field_type_nin      IN BOOLEAN := TRUE,
        id_diag_in              IN aih_abs_data.id_diag%TYPE DEFAULT NULL,
        id_diag_nin             IN BOOLEAN := TRUE,
        id_alert_diag_in        IN aih_abs_data.id_alert_diag%TYPE DEFAULT NULL,
        id_alert_diag_nin       IN BOOLEAN := TRUE,
        id_diag_inst_owner_in   IN aih_abs_data.id_diag_inst_owner%TYPE DEFAULT NULL,
        id_diag_inst_owner_nin  IN BOOLEAN := TRUE,
        id_adiag_inst_owner_in  IN aih_abs_data.id_adiag_inst_owner%TYPE DEFAULT NULL,
        id_adiag_inst_owner_nin IN BOOLEAN := TRUE,
        diag_quantity_in        IN aih_abs_data.diag_quantity%TYPE DEFAULT NULL,
        diag_quantity_nin       IN BOOLEAN := TRUE,
        abs_order_in            IN aih_abs_data.abs_order%TYPE DEFAULT NULL,
        abs_order_nin           IN BOOLEAN := TRUE,
        create_user_in          IN aih_abs_data.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN aih_abs_data.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN aih_abs_data.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN aih_abs_data.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN aih_abs_data.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN aih_abs_data.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        where_in                IN VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_aih_data_in          => id_aih_data_in,
            id_aih_data_nin         => id_aih_data_nin,
            flg_aih_type_in         => flg_aih_type_in,
            flg_aih_type_nin        => flg_aih_type_nin,
            flg_field_type_in       => flg_field_type_in,
            flg_field_type_nin      => flg_field_type_nin,
            id_diag_in              => id_diag_in,
            id_diag_nin             => id_diag_nin,
            id_alert_diag_in        => id_alert_diag_in,
            id_alert_diag_nin       => id_alert_diag_nin,
            id_diag_inst_owner_in   => id_diag_inst_owner_in,
            id_diag_inst_owner_nin  => id_diag_inst_owner_nin,
            id_adiag_inst_owner_in  => id_adiag_inst_owner_in,
            id_adiag_inst_owner_nin => id_adiag_inst_owner_nin,
            diag_quantity_in        => diag_quantity_in,
            diag_quantity_nin       => diag_quantity_nin,
            abs_order_in            => abs_order_in,
            abs_order_nin           => abs_order_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_aih_abs_data_in     IN aih_abs_data.id_aih_abs_data%TYPE,
        id_aih_data_in         IN aih_abs_data.id_aih_data%TYPE DEFAULT NULL,
        flg_aih_type_in        IN aih_abs_data.flg_aih_type%TYPE DEFAULT NULL,
        flg_field_type_in      IN aih_abs_data.flg_field_type%TYPE DEFAULT NULL,
        id_diag_in             IN aih_abs_data.id_diag%TYPE DEFAULT NULL,
        id_alert_diag_in       IN aih_abs_data.id_alert_diag%TYPE DEFAULT NULL,
        id_diag_inst_owner_in  IN aih_abs_data.id_diag_inst_owner%TYPE DEFAULT NULL,
        id_adiag_inst_owner_in IN aih_abs_data.id_adiag_inst_owner%TYPE DEFAULT NULL,
        diag_quantity_in       IN aih_abs_data.diag_quantity%TYPE DEFAULT NULL,
        abs_order_in           IN aih_abs_data.abs_order%TYPE DEFAULT NULL,
        create_user_in         IN aih_abs_data.create_user%TYPE DEFAULT NULL,
        create_time_in         IN aih_abs_data.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN aih_abs_data.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN aih_abs_data.update_user%TYPE DEFAULT NULL,
        update_time_in         IN aih_abs_data.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN aih_abs_data.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_aih_abs_data_in     => id_aih_abs_data_in,
            id_aih_data_in         => id_aih_data_in,
            flg_aih_type_in        => flg_aih_type_in,
            flg_field_type_in      => flg_field_type_in,
            id_diag_in             => id_diag_in,
            id_alert_diag_in       => id_alert_diag_in,
            id_diag_inst_owner_in  => id_diag_inst_owner_in,
            id_adiag_inst_owner_in => id_adiag_inst_owner_in,
            diag_quantity_in       => diag_quantity_in,
            abs_order_in           => abs_order_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_aih_abs_data_in     => id_aih_abs_data_in,
                id_aih_data_in         => id_aih_data_in,
                flg_aih_type_in        => flg_aih_type_in,
                flg_field_type_in      => flg_field_type_in,
                id_diag_in             => id_diag_in,
                id_alert_diag_in       => id_alert_diag_in,
                id_diag_inst_owner_in  => id_diag_inst_owner_in,
                id_adiag_inst_owner_in => id_adiag_inst_owner_in,
                diag_quantity_in       => diag_quantity_in,
                abs_order_in           => abs_order_in,
                create_user_in         => create_user_in,
                create_time_in         => create_time_in,
                create_institution_in  => create_institution_in,
                update_user_in         => update_user_in,
                update_time_in         => update_time_in,
                update_institution_in  => update_institution_in,
                handle_error_in        => handle_error_in,
                rows_out               => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_aih_abs_data_in     IN aih_abs_data.id_aih_abs_data%TYPE,
        id_aih_data_in         IN aih_abs_data.id_aih_data%TYPE DEFAULT NULL,
        flg_aih_type_in        IN aih_abs_data.flg_aih_type%TYPE DEFAULT NULL,
        flg_field_type_in      IN aih_abs_data.flg_field_type%TYPE DEFAULT NULL,
        id_diag_in             IN aih_abs_data.id_diag%TYPE DEFAULT NULL,
        id_alert_diag_in       IN aih_abs_data.id_alert_diag%TYPE DEFAULT NULL,
        id_diag_inst_owner_in  IN aih_abs_data.id_diag_inst_owner%TYPE DEFAULT NULL,
        id_adiag_inst_owner_in IN aih_abs_data.id_adiag_inst_owner%TYPE DEFAULT NULL,
        diag_quantity_in       IN aih_abs_data.diag_quantity%TYPE DEFAULT NULL,
        abs_order_in           IN aih_abs_data.abs_order%TYPE DEFAULT NULL,
        create_user_in         IN aih_abs_data.create_user%TYPE DEFAULT NULL,
        create_time_in         IN aih_abs_data.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN aih_abs_data.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN aih_abs_data.update_user%TYPE DEFAULT NULL,
        update_time_in         IN aih_abs_data.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN aih_abs_data.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_aih_abs_data_in,
                id_aih_data_in,
                flg_aih_type_in,
                flg_field_type_in,
                id_diag_in,
                id_alert_diag_in,
                id_diag_inst_owner_in,
                id_adiag_inst_owner_in,
                diag_quantity_in,
                abs_order_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN aih_abs_data%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_aih_abs_data_in     => rec_in.id_aih_abs_data,
            id_aih_data_in         => rec_in.id_aih_data,
            flg_aih_type_in        => rec_in.flg_aih_type,
            flg_field_type_in      => rec_in.flg_field_type,
            id_diag_in             => rec_in.id_diag,
            id_alert_diag_in       => rec_in.id_alert_diag,
            id_diag_inst_owner_in  => rec_in.id_diag_inst_owner,
            id_adiag_inst_owner_in => rec_in.id_adiag_inst_owner,
            diag_quantity_in       => rec_in.diag_quantity,
            abs_order_in           => rec_in.abs_order,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN aih_abs_data%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_aih_abs_data_in     => rec_in.id_aih_abs_data,
            id_aih_data_in         => rec_in.id_aih_data,
            flg_aih_type_in        => rec_in.flg_aih_type,
            flg_field_type_in      => rec_in.flg_field_type,
            id_diag_in             => rec_in.id_diag,
            id_alert_diag_in       => rec_in.id_alert_diag,
            id_diag_inst_owner_in  => rec_in.id_diag_inst_owner,
            id_adiag_inst_owner_in => rec_in.id_adiag_inst_owner,
            diag_quantity_in       => rec_in.diag_quantity,
            abs_order_in           => rec_in.abs_order,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN aih_abs_data_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_aih_abs_data     id_aih_abs_data_cc;
        l_id_aih_data         id_aih_data_cc;
        l_flg_aih_type        flg_aih_type_cc;
        l_flg_field_type      flg_field_type_cc;
        l_id_diag             id_diag_cc;
        l_id_alert_diag       id_alert_diag_cc;
        l_id_diag_inst_owner  id_diag_inst_owner_cc;
        l_id_adiag_inst_owner id_adiag_inst_owner_cc;
        l_diag_quantity       diag_quantity_cc;
        l_abs_order           abs_order_cc;
        l_create_user         create_user_cc;
        l_create_time         create_time_cc;
        l_create_institution  create_institution_cc;
        l_update_user         update_user_cc;
        l_update_time         update_time_cc;
        l_update_institution  update_institution_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_aih_abs_data(i) := col_in(i).id_aih_abs_data;
            l_id_aih_data(i) := col_in(i).id_aih_data;
            l_flg_aih_type(i) := col_in(i).flg_aih_type;
            l_flg_field_type(i) := col_in(i).flg_field_type;
            l_id_diag(i) := col_in(i).id_diag;
            l_id_alert_diag(i) := col_in(i).id_alert_diag;
            l_id_diag_inst_owner(i) := col_in(i).id_diag_inst_owner;
            l_id_adiag_inst_owner(i) := col_in(i).id_adiag_inst_owner;
            l_diag_quantity(i) := col_in(i).diag_quantity;
            l_abs_order(i) := col_in(i).abs_order;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE aih_abs_data
                   SET id_aih_data         = nvl(l_id_aih_data(i), id_aih_data),
                       flg_aih_type        = nvl(l_flg_aih_type(i), flg_aih_type),
                       flg_field_type      = nvl(l_flg_field_type(i), flg_field_type),
                       id_diag             = nvl(l_id_diag(i), id_diag),
                       id_alert_diag       = nvl(l_id_alert_diag(i), id_alert_diag),
                       id_diag_inst_owner  = nvl(l_id_diag_inst_owner(i), id_diag_inst_owner),
                       id_adiag_inst_owner = nvl(l_id_adiag_inst_owner(i), id_adiag_inst_owner),
                       diag_quantity       = nvl(l_diag_quantity(i), diag_quantity),
                       abs_order           = nvl(l_abs_order(i), abs_order),
                       create_user         = nvl(l_create_user(i), create_user),
                       create_time         = nvl(l_create_time(i), create_time),
                       create_institution  = nvl(l_create_institution(i), create_institution),
                       update_user         = nvl(l_update_user(i), update_user),
                       update_time         = nvl(l_update_time(i), update_time),
                       update_institution  = nvl(l_update_institution(i), update_institution)
                 WHERE id_aih_abs_data = l_id_aih_abs_data(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE aih_abs_data
                   SET id_aih_data         = l_id_aih_data(i),
                       flg_aih_type        = l_flg_aih_type(i),
                       flg_field_type      = l_flg_field_type(i),
                       id_diag             = l_id_diag(i),
                       id_alert_diag       = l_id_alert_diag(i),
                       id_diag_inst_owner  = l_id_diag_inst_owner(i),
                       id_adiag_inst_owner = l_id_adiag_inst_owner(i),
                       diag_quantity       = l_diag_quantity(i),
                       abs_order           = l_abs_order(i),
                       create_user         = l_create_user(i),
                       create_time         = l_create_time(i),
                       create_institution  = l_create_institution(i),
                       update_user         = l_update_user(i),
                       update_time         = l_update_time(i),
                       update_institution  = l_update_institution(i)
                 WHERE id_aih_abs_data = l_id_aih_abs_data(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN aih_abs_data_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE aih_abs_data
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE aih_abs_data
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE aih_abs_data
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_aih_abs_data_in IN aih_abs_data.id_aih_abs_data%TYPE,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM aih_abs_data
         WHERE id_aih_abs_data = id_aih_abs_data_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_aih_abs_data_in IN aih_abs_data.id_aih_abs_data%TYPE,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_aih_abs_data_in => id_aih_abs_data_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM aih_abs_data';
        ELSE
            RETURN 'DELETE FROM aih_abs_data WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(aih_abs_data_inout IN OUT aih_abs_data%ROWTYPE) IS
    BEGIN
        aih_abs_data_inout.id_aih_abs_data     := NULL;
        aih_abs_data_inout.id_aih_data         := NULL;
        aih_abs_data_inout.flg_aih_type        := NULL;
        aih_abs_data_inout.flg_field_type      := NULL;
        aih_abs_data_inout.id_diag             := NULL;
        aih_abs_data_inout.id_alert_diag       := NULL;
        aih_abs_data_inout.id_diag_inst_owner  := NULL;
        aih_abs_data_inout.id_adiag_inst_owner := NULL;
        aih_abs_data_inout.diag_quantity       := NULL;
        aih_abs_data_inout.abs_order           := NULL;
        aih_abs_data_inout.create_user         := NULL;
        aih_abs_data_inout.create_time         := NULL;
        aih_abs_data_inout.create_institution  := NULL;
        aih_abs_data_inout.update_user         := NULL;
        aih_abs_data_inout.update_time         := NULL;
        aih_abs_data_inout.update_institution  := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN aih_abs_data%ROWTYPE IS
        l_aih_abs_data aih_abs_data%ROWTYPE;
    BEGIN
        RETURN l_aih_abs_data;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN aih_abs_data_tc IS
        data aih_abs_data_tc;
    BEGIN
        SELECT *
          BULK COLLECT
          INTO data
          FROM aih_abs_data
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN aih_abs_data_tc IS
        data aih_abs_data_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_aih_abs_data;
/
