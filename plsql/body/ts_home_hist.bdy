/*-- Last Change Revision: $Rev: 2028202 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:28 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY TS_HOME_HIST
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {7A44F965-7C77-42EE-9A04-269EF006213B}
| Created On: Maio 9, 2013 9:45:43
| Created By: ALERT
*/
IS


   e_null_column_value EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

    -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out OUT ALL_CONSTRAINTS.OWNER%TYPE
     ,name_out OUT ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE)
   IS
      l_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
      dotloc PLS_INTEGER;
      leftloc PLS_INTEGER;
   BEGIN
      dotloc  := INSTR (l_errm,'.');
      leftloc := INSTR (l_errm,'(');
      owner_out := SUBSTR (l_errm, leftloc+1, dotloc-leftloc-1);
      name_out  := SUBSTR (l_errm, dotloc+1, INSTR (l_errm,')')-dotloc-1);
   END get_constraint_info;
   -- Public programs

   PROCEDURE ins (
      id_home_hist_in IN HOME_HIST.ID_HOME_HIST%TYPE
      ,
      id_home_in IN HOME_HIST.ID_HOME%TYPE DEFAULT NULL,
      id_pat_family_in IN HOME_HIST.ID_PAT_FAMILY%TYPE DEFAULT NULL,
      id_professional_in IN HOME_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      num_rooms_in IN HOME_HIST.NUM_ROOMS%TYPE DEFAULT NULL,
      num_bedrooms_in IN HOME_HIST.NUM_BEDROOMS%TYPE DEFAULT NULL,
      num_person_room_in IN HOME_HIST.NUM_PERSON_ROOM%TYPE DEFAULT NULL,
      flg_wc_type_in IN HOME_HIST.FLG_WC_TYPE%TYPE DEFAULT NULL,
      flg_wc_location_in IN HOME_HIST.FLG_WC_LOCATION%TYPE DEFAULT NULL,
      flg_wc_out_in IN HOME_HIST.FLG_WC_OUT%TYPE DEFAULT NULL,
      flg_water_distrib_in IN HOME_HIST.FLG_WATER_DISTRIB%TYPE DEFAULT NULL,
      flg_water_origin_in IN HOME_HIST.FLG_WATER_ORIGIN%TYPE DEFAULT NULL,
      flg_conserv_in IN HOME_HIST.FLG_CONSERV%TYPE DEFAULT NULL,
      flg_owner_in IN HOME_HIST.FLG_OWNER%TYPE DEFAULT NULL,
      flg_hab_type_in IN HOME_HIST.FLG_HAB_TYPE%TYPE DEFAULT NULL,
      flg_light_in IN HOME_HIST.FLG_LIGHT%TYPE DEFAULT NULL,
      flg_heat_in IN HOME_HIST.FLG_HEAT%TYPE DEFAULT NULL,
      arquitect_barrier_in IN HOME_HIST.ARQUITECT_BARRIER%TYPE DEFAULT NULL,
      dt_registry_tstz_in IN HOME_HIST.DT_REGISTRY_TSTZ%TYPE DEFAULT NULL,
      flg_hab_location_in IN HOME_HIST.FLG_HAB_LOCATION%TYPE DEFAULT NULL,
      dt_home_hist_in IN HOME_HIST.DT_HOME_HIST%TYPE DEFAULT NULL,
      notes_in IN HOME_HIST.NOTES%TYPE DEFAULT NULL,
      create_user_in IN HOME_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN HOME_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN HOME_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN HOME_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN HOME_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN HOME_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_in IN HOME_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN HOME_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      flg_water_treatment_in IN HOME_HIST.FLG_WATER_TREATMENT%TYPE DEFAULT NULL,
      flg_garbage_dest_in IN HOME_HIST.FLG_GARBAGE_DEST%TYPE DEFAULT NULL,
      flg_bath_in IN HOME_HIST.FLG_BATH%TYPE DEFAULT NULL,
      ft_bath_in IN HOME_HIST.FT_BATH%TYPE DEFAULT NULL,
      ft_wc_type_in IN HOME_HIST.FT_WC_TYPE%TYPE DEFAULT NULL,
      ft_wc_location_in IN HOME_HIST.FT_WC_LOCATION%TYPE DEFAULT NULL,
      ft_wc_out_in IN HOME_HIST.FT_WC_OUT%TYPE DEFAULT NULL,
      ft_water_distrib_in IN HOME_HIST.FT_WATER_DISTRIB%TYPE DEFAULT NULL,
      ft_water_origin_in IN HOME_HIST.FT_WATER_ORIGIN%TYPE DEFAULT NULL,
      ft_conserv_in IN HOME_HIST.FT_CONSERV%TYPE DEFAULT NULL,
      ft_owner_in IN HOME_HIST.FT_OWNER%TYPE DEFAULT NULL,
      ft_garbage_dest_in IN HOME_HIST.FT_GARBAGE_DEST%TYPE DEFAULT NULL,
      ft_hab_type_in IN HOME_HIST.FT_HAB_TYPE%TYPE DEFAULT NULL,
      ft_water_treatment_in IN HOME_HIST.FT_WATER_TREATMENT%TYPE DEFAULT NULL,
      ft_light_in IN HOME_HIST.FT_LIGHT%TYPE DEFAULT NULL,
      ft_heat_in IN HOME_HIST.FT_HEAT%TYPE DEFAULT NULL,
      ft_hab_location_in IN HOME_HIST.FT_HAB_LOCATION%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN

     INSERT INTO HOME_HIST (
         ID_HOME_HIST,
         ID_HOME,
         ID_PAT_FAMILY,
         ID_PROFESSIONAL,
         NUM_ROOMS,
         NUM_BEDROOMS,
         NUM_PERSON_ROOM,
         FLG_WC_TYPE,
         FLG_WC_LOCATION,
         FLG_WC_OUT,
         FLG_WATER_DISTRIB,
         FLG_WATER_ORIGIN,
         FLG_CONSERV,
         FLG_OWNER,
         FLG_HAB_TYPE,
         FLG_LIGHT,
         FLG_HEAT,
         ARQUITECT_BARRIER,
         DT_REGISTRY_TSTZ,
         FLG_HAB_LOCATION,
         DT_HOME_HIST,
         NOTES,
         CREATE_USER,
         CREATE_TIME,
         CREATE_INSTITUTION,
         UPDATE_USER,
         UPDATE_TIME,
         UPDATE_INSTITUTION,
         FLG_STATUS,
         ID_CANCEL_INFO_DET,
         FLG_WATER_TREATMENT,
         FLG_GARBAGE_DEST,
         FLG_BATH,
         FT_BATH,
         FT_WC_TYPE,
         FT_WC_LOCATION,
         FT_WC_OUT,
         FT_WATER_DISTRIB,
         FT_WATER_ORIGIN,
         FT_CONSERV,
         FT_OWNER,
         FT_GARBAGE_DEST,
         FT_HAB_TYPE,
         FT_WATER_TREATMENT,
         FT_LIGHT,
         FT_HEAT,
         FT_HAB_LOCATION
         )
      VALUES (
         id_home_hist_in,
         id_home_in,
         id_pat_family_in,
         id_professional_in,
         num_rooms_in,
         num_bedrooms_in,
         num_person_room_in,
         flg_wc_type_in,
         flg_wc_location_in,
         flg_wc_out_in,
         flg_water_distrib_in,
         flg_water_origin_in,
         flg_conserv_in,
         flg_owner_in,
         flg_hab_type_in,
         flg_light_in,
         flg_heat_in,
         arquitect_barrier_in,
         dt_registry_tstz_in,
         flg_hab_location_in,
         dt_home_hist_in,
         notes_in,
         create_user_in,
         create_time_in,
         create_institution_in,
         update_user_in,
         update_time_in,
         update_institution_in,
         flg_status_in,
         id_cancel_info_det_in,
         flg_water_treatment_in,
         flg_garbage_dest_in,
         flg_bath_in,
         ft_bath_in,
         ft_wc_type_in,
         ft_wc_location_in,
         ft_wc_out_in,
         ft_water_distrib_in,
         ft_water_origin_in,
         ft_conserv_in,
         ft_owner_in,
         ft_garbage_dest_in,
         ft_hab_type_in,
         ft_water_treatment_in,
         ft_light_in,
         ft_heat_in,
         ft_hab_location_in
         ) RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'HOME_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           IF l_name = 'HH_HOME_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_HOME'
               , value_in => id_home_in);
           END IF;
           IF l_name = 'HH_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           IF l_name = 'HH_PTFAM_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PAT_FAMILY'
               , value_in => id_pat_family_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END ins;

   PROCEDURE ins (
      id_home_hist_in IN HOME_HIST.ID_HOME_HIST%TYPE
      ,
      id_home_in IN HOME_HIST.ID_HOME%TYPE DEFAULT NULL,
      id_pat_family_in IN HOME_HIST.ID_PAT_FAMILY%TYPE DEFAULT NULL,
      id_professional_in IN HOME_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      num_rooms_in IN HOME_HIST.NUM_ROOMS%TYPE DEFAULT NULL,
      num_bedrooms_in IN HOME_HIST.NUM_BEDROOMS%TYPE DEFAULT NULL,
      num_person_room_in IN HOME_HIST.NUM_PERSON_ROOM%TYPE DEFAULT NULL,
      flg_wc_type_in IN HOME_HIST.FLG_WC_TYPE%TYPE DEFAULT NULL,
      flg_wc_location_in IN HOME_HIST.FLG_WC_LOCATION%TYPE DEFAULT NULL,
      flg_wc_out_in IN HOME_HIST.FLG_WC_OUT%TYPE DEFAULT NULL,
      flg_water_distrib_in IN HOME_HIST.FLG_WATER_DISTRIB%TYPE DEFAULT NULL,
      flg_water_origin_in IN HOME_HIST.FLG_WATER_ORIGIN%TYPE DEFAULT NULL,
      flg_conserv_in IN HOME_HIST.FLG_CONSERV%TYPE DEFAULT NULL,
      flg_owner_in IN HOME_HIST.FLG_OWNER%TYPE DEFAULT NULL,
      flg_hab_type_in IN HOME_HIST.FLG_HAB_TYPE%TYPE DEFAULT NULL,
      flg_light_in IN HOME_HIST.FLG_LIGHT%TYPE DEFAULT NULL,
      flg_heat_in IN HOME_HIST.FLG_HEAT%TYPE DEFAULT NULL,
      arquitect_barrier_in IN HOME_HIST.ARQUITECT_BARRIER%TYPE DEFAULT NULL,
      dt_registry_tstz_in IN HOME_HIST.DT_REGISTRY_TSTZ%TYPE DEFAULT NULL,
      flg_hab_location_in IN HOME_HIST.FLG_HAB_LOCATION%TYPE DEFAULT NULL,
      dt_home_hist_in IN HOME_HIST.DT_HOME_HIST%TYPE DEFAULT NULL,
      notes_in IN HOME_HIST.NOTES%TYPE DEFAULT NULL,
      create_user_in IN HOME_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN HOME_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN HOME_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN HOME_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN HOME_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN HOME_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_in IN HOME_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN HOME_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      flg_water_treatment_in IN HOME_HIST.FLG_WATER_TREATMENT%TYPE DEFAULT NULL,
      flg_garbage_dest_in IN HOME_HIST.FLG_GARBAGE_DEST%TYPE DEFAULT NULL,
      flg_bath_in IN HOME_HIST.FLG_BATH%TYPE DEFAULT NULL,
      ft_bath_in IN HOME_HIST.FT_BATH%TYPE DEFAULT NULL,
      ft_wc_type_in IN HOME_HIST.FT_WC_TYPE%TYPE DEFAULT NULL,
      ft_wc_location_in IN HOME_HIST.FT_WC_LOCATION%TYPE DEFAULT NULL,
      ft_wc_out_in IN HOME_HIST.FT_WC_OUT%TYPE DEFAULT NULL,
      ft_water_distrib_in IN HOME_HIST.FT_WATER_DISTRIB%TYPE DEFAULT NULL,
      ft_water_origin_in IN HOME_HIST.FT_WATER_ORIGIN%TYPE DEFAULT NULL,
      ft_conserv_in IN HOME_HIST.FT_CONSERV%TYPE DEFAULT NULL,
      ft_owner_in IN HOME_HIST.FT_OWNER%TYPE DEFAULT NULL,
      ft_garbage_dest_in IN HOME_HIST.FT_GARBAGE_DEST%TYPE DEFAULT NULL,
      ft_hab_type_in IN HOME_HIST.FT_HAB_TYPE%TYPE DEFAULT NULL,
      ft_water_treatment_in IN HOME_HIST.FT_WATER_TREATMENT%TYPE DEFAULT NULL,
      ft_light_in IN HOME_HIST.FT_LIGHT%TYPE DEFAULT NULL,
      ft_heat_in IN HOME_HIST.FT_HEAT%TYPE DEFAULT NULL,
      ft_hab_location_in IN HOME_HIST.FT_HAB_LOCATION%TYPE DEFAULT NULL
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN

     ins (
      id_home_hist_in => id_home_hist_in
      ,
      id_home_in => id_home_in,
      id_pat_family_in => id_pat_family_in,
      id_professional_in => id_professional_in,
      num_rooms_in => num_rooms_in,
      num_bedrooms_in => num_bedrooms_in,
      num_person_room_in => num_person_room_in,
      flg_wc_type_in => flg_wc_type_in,
      flg_wc_location_in => flg_wc_location_in,
      flg_wc_out_in => flg_wc_out_in,
      flg_water_distrib_in => flg_water_distrib_in,
      flg_water_origin_in => flg_water_origin_in,
      flg_conserv_in => flg_conserv_in,
      flg_owner_in => flg_owner_in,
      flg_hab_type_in => flg_hab_type_in,
      flg_light_in => flg_light_in,
      flg_heat_in => flg_heat_in,
      arquitect_barrier_in => arquitect_barrier_in,
      dt_registry_tstz_in => dt_registry_tstz_in,
      flg_hab_location_in => flg_hab_location_in,
      dt_home_hist_in => dt_home_hist_in,
      notes_in => notes_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      flg_status_in => flg_status_in,
      id_cancel_info_det_in => id_cancel_info_det_in,
      flg_water_treatment_in => flg_water_treatment_in,
      flg_garbage_dest_in => flg_garbage_dest_in,
      flg_bath_in => flg_bath_in,
      ft_bath_in => ft_bath_in,
      ft_wc_type_in => ft_wc_type_in,
      ft_wc_location_in => ft_wc_location_in,
      ft_wc_out_in => ft_wc_out_in,
      ft_water_distrib_in => ft_water_distrib_in,
      ft_water_origin_in => ft_water_origin_in,
      ft_conserv_in => ft_conserv_in,
      ft_owner_in => ft_owner_in,
      ft_garbage_dest_in => ft_garbage_dest_in,
      ft_hab_type_in => ft_hab_type_in,
      ft_water_treatment_in => ft_water_treatment_in,
      ft_light_in => ft_light_in,
      ft_heat_in => ft_heat_in,
      ft_hab_location_in => ft_hab_location_in
     ,handle_error_in => handle_error_in
      ,rows_out => rows_out
      );
   END ins;


   PROCEDURE ins (
      rec_in IN HOME_HIST%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
      l_rec HOME_HIST%ROWTYPE := rec_in;
   BEGIN
      IF gen_pky_in THEN
         l_rec.ID_HOME_HIST := next_key (sequence_in);
      END IF;
      ins (
         id_home_hist_in => l_rec.ID_HOME_HIST
         ,
         id_home_in => l_rec.ID_HOME,
         id_pat_family_in => l_rec.ID_PAT_FAMILY,
         id_professional_in => l_rec.ID_PROFESSIONAL,
         num_rooms_in => l_rec.NUM_ROOMS,
         num_bedrooms_in => l_rec.NUM_BEDROOMS,
         num_person_room_in => l_rec.NUM_PERSON_ROOM,
         flg_wc_type_in => l_rec.FLG_WC_TYPE,
         flg_wc_location_in => l_rec.FLG_WC_LOCATION,
         flg_wc_out_in => l_rec.FLG_WC_OUT,
         flg_water_distrib_in => l_rec.FLG_WATER_DISTRIB,
         flg_water_origin_in => l_rec.FLG_WATER_ORIGIN,
         flg_conserv_in => l_rec.FLG_CONSERV,
         flg_owner_in => l_rec.FLG_OWNER,
         flg_hab_type_in => l_rec.FLG_HAB_TYPE,
         flg_light_in => l_rec.FLG_LIGHT,
         flg_heat_in => l_rec.FLG_HEAT,
         arquitect_barrier_in => l_rec.ARQUITECT_BARRIER,
         dt_registry_tstz_in => l_rec.DT_REGISTRY_TSTZ,
         flg_hab_location_in => l_rec.FLG_HAB_LOCATION,
         dt_home_hist_in => l_rec.DT_HOME_HIST,
         notes_in => l_rec.NOTES,
         create_user_in => l_rec.CREATE_USER,
         create_time_in => l_rec.CREATE_TIME,
         create_institution_in => l_rec.CREATE_INSTITUTION,
         update_user_in => l_rec.UPDATE_USER,
         update_time_in => l_rec.UPDATE_TIME,
         update_institution_in => l_rec.UPDATE_INSTITUTION,
         flg_status_in => l_rec.FLG_STATUS,
         id_cancel_info_det_in => l_rec.ID_CANCEL_INFO_DET,
         flg_water_treatment_in => l_rec.FLG_WATER_TREATMENT,
         flg_garbage_dest_in => l_rec.FLG_GARBAGE_DEST,
         flg_bath_in => l_rec.FLG_BATH,
         ft_bath_in => l_rec.FT_BATH,
         ft_wc_type_in => l_rec.FT_WC_TYPE,
         ft_wc_location_in => l_rec.FT_WC_LOCATION,
         ft_wc_out_in => l_rec.FT_WC_OUT,
         ft_water_distrib_in => l_rec.FT_WATER_DISTRIB,
         ft_water_origin_in => l_rec.FT_WATER_ORIGIN,
         ft_conserv_in => l_rec.FT_CONSERV,
         ft_owner_in => l_rec.FT_OWNER,
         ft_garbage_dest_in => l_rec.FT_GARBAGE_DEST,
         ft_hab_type_in => l_rec.FT_HAB_TYPE,
         ft_water_treatment_in => l_rec.FT_WATER_TREATMENT,
         ft_light_in => l_rec.FT_LIGHT,
         ft_heat_in => l_rec.FT_HEAT,
         ft_hab_location_in => l_rec.FT_HAB_LOCATION
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

   PROCEDURE ins (
      rec_in IN HOME_HIST%ROWTYPE
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN

  ins (
      rec_in => rec_in
     ,gen_pky_in => gen_pky_in
     ,sequence_in => sequence_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );

   END ins;

   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN HOME_HIST.ID_HOME_HIST%TYPE

   IS
     retval HOME_HIST.ID_HOME_HIST%TYPE;

   BEGIN
      IF sequence_in IS NULL
      THEN
         SELECT seq_HOME_HIST.NEXTVAL INTO retval FROM dual;
      ELSE
         EXECUTE IMMEDIATE
            'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
            INTO retval;
      END IF;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'SEQUENCE-GENERATION-FAILURE'
           ,name1_in => 'SEQUENCE'
           ,value1_in => NVL (sequence_in, 'seq_HOME_HIST')
           );
   END next_key;

   PROCEDURE ins (
      id_home_in IN HOME_HIST.ID_HOME%TYPE DEFAULT NULL,
      id_pat_family_in IN HOME_HIST.ID_PAT_FAMILY%TYPE DEFAULT NULL,
      id_professional_in IN HOME_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      num_rooms_in IN HOME_HIST.NUM_ROOMS%TYPE DEFAULT NULL,
      num_bedrooms_in IN HOME_HIST.NUM_BEDROOMS%TYPE DEFAULT NULL,
      num_person_room_in IN HOME_HIST.NUM_PERSON_ROOM%TYPE DEFAULT NULL,
      flg_wc_type_in IN HOME_HIST.FLG_WC_TYPE%TYPE DEFAULT NULL,
      flg_wc_location_in IN HOME_HIST.FLG_WC_LOCATION%TYPE DEFAULT NULL,
      flg_wc_out_in IN HOME_HIST.FLG_WC_OUT%TYPE DEFAULT NULL,
      flg_water_distrib_in IN HOME_HIST.FLG_WATER_DISTRIB%TYPE DEFAULT NULL,
      flg_water_origin_in IN HOME_HIST.FLG_WATER_ORIGIN%TYPE DEFAULT NULL,
      flg_conserv_in IN HOME_HIST.FLG_CONSERV%TYPE DEFAULT NULL,
      flg_owner_in IN HOME_HIST.FLG_OWNER%TYPE DEFAULT NULL,
      flg_hab_type_in IN HOME_HIST.FLG_HAB_TYPE%TYPE DEFAULT NULL,
      flg_light_in IN HOME_HIST.FLG_LIGHT%TYPE DEFAULT NULL,
      flg_heat_in IN HOME_HIST.FLG_HEAT%TYPE DEFAULT NULL,
      arquitect_barrier_in IN HOME_HIST.ARQUITECT_BARRIER%TYPE DEFAULT NULL,
      dt_registry_tstz_in IN HOME_HIST.DT_REGISTRY_TSTZ%TYPE DEFAULT NULL,
      flg_hab_location_in IN HOME_HIST.FLG_HAB_LOCATION%TYPE DEFAULT NULL,
      dt_home_hist_in IN HOME_HIST.DT_HOME_HIST%TYPE DEFAULT NULL,
      notes_in IN HOME_HIST.NOTES%TYPE DEFAULT NULL,
      create_user_in IN HOME_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN HOME_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN HOME_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN HOME_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN HOME_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN HOME_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_in IN HOME_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN HOME_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      flg_water_treatment_in IN HOME_HIST.FLG_WATER_TREATMENT%TYPE DEFAULT NULL,
      flg_garbage_dest_in IN HOME_HIST.FLG_GARBAGE_DEST%TYPE DEFAULT NULL,
      flg_bath_in IN HOME_HIST.FLG_BATH%TYPE DEFAULT NULL,
      ft_bath_in IN HOME_HIST.FT_BATH%TYPE DEFAULT NULL,
      ft_wc_type_in IN HOME_HIST.FT_WC_TYPE%TYPE DEFAULT NULL,
      ft_wc_location_in IN HOME_HIST.FT_WC_LOCATION%TYPE DEFAULT NULL,
      ft_wc_out_in IN HOME_HIST.FT_WC_OUT%TYPE DEFAULT NULL,
      ft_water_distrib_in IN HOME_HIST.FT_WATER_DISTRIB%TYPE DEFAULT NULL,
      ft_water_origin_in IN HOME_HIST.FT_WATER_ORIGIN%TYPE DEFAULT NULL,
      ft_conserv_in IN HOME_HIST.FT_CONSERV%TYPE DEFAULT NULL,
      ft_owner_in IN HOME_HIST.FT_OWNER%TYPE DEFAULT NULL,
      ft_garbage_dest_in IN HOME_HIST.FT_GARBAGE_DEST%TYPE DEFAULT NULL,
      ft_hab_type_in IN HOME_HIST.FT_HAB_TYPE%TYPE DEFAULT NULL,
      ft_water_treatment_in IN HOME_HIST.FT_WATER_TREATMENT%TYPE DEFAULT NULL,
      ft_light_in IN HOME_HIST.FT_LIGHT%TYPE DEFAULT NULL,
      ft_heat_in IN HOME_HIST.FT_HEAT%TYPE DEFAULT NULL,
      ft_hab_location_in IN HOME_HIST.FT_HAB_LOCATION%TYPE DEFAULT NULL,
      id_home_hist_out IN OUT HOME_HIST.ID_HOME_HIST%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky HOME_HIST.ID_HOME_HIST%TYPE := next_key;
   BEGIN
      ins (
         id_home_hist_in => l_pky,
         id_home_in => id_home_in,
         id_pat_family_in => id_pat_family_in,
         id_professional_in => id_professional_in,
         num_rooms_in => num_rooms_in,
         num_bedrooms_in => num_bedrooms_in,
         num_person_room_in => num_person_room_in,
         flg_wc_type_in => flg_wc_type_in,
         flg_wc_location_in => flg_wc_location_in,
         flg_wc_out_in => flg_wc_out_in,
         flg_water_distrib_in => flg_water_distrib_in,
         flg_water_origin_in => flg_water_origin_in,
         flg_conserv_in => flg_conserv_in,
         flg_owner_in => flg_owner_in,
         flg_hab_type_in => flg_hab_type_in,
         flg_light_in => flg_light_in,
         flg_heat_in => flg_heat_in,
         arquitect_barrier_in => arquitect_barrier_in,
         dt_registry_tstz_in => dt_registry_tstz_in,
         flg_hab_location_in => flg_hab_location_in,
         dt_home_hist_in => dt_home_hist_in,
         notes_in => notes_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_status_in => flg_status_in,
         id_cancel_info_det_in => id_cancel_info_det_in,
         flg_water_treatment_in => flg_water_treatment_in,
         flg_garbage_dest_in => flg_garbage_dest_in,
         flg_bath_in => flg_bath_in,
         ft_bath_in => ft_bath_in,
         ft_wc_type_in => ft_wc_type_in,
         ft_wc_location_in => ft_wc_location_in,
         ft_wc_out_in => ft_wc_out_in,
         ft_water_distrib_in => ft_water_distrib_in,
         ft_water_origin_in => ft_water_origin_in,
         ft_conserv_in => ft_conserv_in,
         ft_owner_in => ft_owner_in,
         ft_garbage_dest_in => ft_garbage_dest_in,
         ft_hab_type_in => ft_hab_type_in,
         ft_water_treatment_in => ft_water_treatment_in,
         ft_light_in => ft_light_in,
         ft_heat_in => ft_heat_in,
         ft_hab_location_in => ft_hab_location_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      id_home_hist_out := l_pky;
   END ins;

   PROCEDURE ins (
      id_home_in IN HOME_HIST.ID_HOME%TYPE DEFAULT NULL,
      id_pat_family_in IN HOME_HIST.ID_PAT_FAMILY%TYPE DEFAULT NULL,
      id_professional_in IN HOME_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      num_rooms_in IN HOME_HIST.NUM_ROOMS%TYPE DEFAULT NULL,
      num_bedrooms_in IN HOME_HIST.NUM_BEDROOMS%TYPE DEFAULT NULL,
      num_person_room_in IN HOME_HIST.NUM_PERSON_ROOM%TYPE DEFAULT NULL,
      flg_wc_type_in IN HOME_HIST.FLG_WC_TYPE%TYPE DEFAULT NULL,
      flg_wc_location_in IN HOME_HIST.FLG_WC_LOCATION%TYPE DEFAULT NULL,
      flg_wc_out_in IN HOME_HIST.FLG_WC_OUT%TYPE DEFAULT NULL,
      flg_water_distrib_in IN HOME_HIST.FLG_WATER_DISTRIB%TYPE DEFAULT NULL,
      flg_water_origin_in IN HOME_HIST.FLG_WATER_ORIGIN%TYPE DEFAULT NULL,
      flg_conserv_in IN HOME_HIST.FLG_CONSERV%TYPE DEFAULT NULL,
      flg_owner_in IN HOME_HIST.FLG_OWNER%TYPE DEFAULT NULL,
      flg_hab_type_in IN HOME_HIST.FLG_HAB_TYPE%TYPE DEFAULT NULL,
      flg_light_in IN HOME_HIST.FLG_LIGHT%TYPE DEFAULT NULL,
      flg_heat_in IN HOME_HIST.FLG_HEAT%TYPE DEFAULT NULL,
      arquitect_barrier_in IN HOME_HIST.ARQUITECT_BARRIER%TYPE DEFAULT NULL,
      dt_registry_tstz_in IN HOME_HIST.DT_REGISTRY_TSTZ%TYPE DEFAULT NULL,
      flg_hab_location_in IN HOME_HIST.FLG_HAB_LOCATION%TYPE DEFAULT NULL,
      dt_home_hist_in IN HOME_HIST.DT_HOME_HIST%TYPE DEFAULT NULL,
      notes_in IN HOME_HIST.NOTES%TYPE DEFAULT NULL,
      create_user_in IN HOME_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN HOME_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN HOME_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN HOME_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN HOME_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN HOME_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_in IN HOME_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN HOME_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      flg_water_treatment_in IN HOME_HIST.FLG_WATER_TREATMENT%TYPE DEFAULT NULL,
      flg_garbage_dest_in IN HOME_HIST.FLG_GARBAGE_DEST%TYPE DEFAULT NULL,
      flg_bath_in IN HOME_HIST.FLG_BATH%TYPE DEFAULT NULL,
      ft_bath_in IN HOME_HIST.FT_BATH%TYPE DEFAULT NULL,
      ft_wc_type_in IN HOME_HIST.FT_WC_TYPE%TYPE DEFAULT NULL,
      ft_wc_location_in IN HOME_HIST.FT_WC_LOCATION%TYPE DEFAULT NULL,
      ft_wc_out_in IN HOME_HIST.FT_WC_OUT%TYPE DEFAULT NULL,
      ft_water_distrib_in IN HOME_HIST.FT_WATER_DISTRIB%TYPE DEFAULT NULL,
      ft_water_origin_in IN HOME_HIST.FT_WATER_ORIGIN%TYPE DEFAULT NULL,
      ft_conserv_in IN HOME_HIST.FT_CONSERV%TYPE DEFAULT NULL,
      ft_owner_in IN HOME_HIST.FT_OWNER%TYPE DEFAULT NULL,
      ft_garbage_dest_in IN HOME_HIST.FT_GARBAGE_DEST%TYPE DEFAULT NULL,
      ft_hab_type_in IN HOME_HIST.FT_HAB_TYPE%TYPE DEFAULT NULL,
      ft_water_treatment_in IN HOME_HIST.FT_WATER_TREATMENT%TYPE DEFAULT NULL,
      ft_light_in IN HOME_HIST.FT_LIGHT%TYPE DEFAULT NULL,
      ft_heat_in IN HOME_HIST.FT_HEAT%TYPE DEFAULT NULL,
      ft_hab_location_in IN HOME_HIST.FT_HAB_LOCATION%TYPE DEFAULT NULL,
      id_home_hist_out IN OUT HOME_HIST.ID_HOME_HIST%TYPE
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      id_home_in => id_home_in,
      id_pat_family_in => id_pat_family_in,
      id_professional_in => id_professional_in,
      num_rooms_in => num_rooms_in,
      num_bedrooms_in => num_bedrooms_in,
      num_person_room_in => num_person_room_in,
      flg_wc_type_in => flg_wc_type_in,
      flg_wc_location_in => flg_wc_location_in,
      flg_wc_out_in => flg_wc_out_in,
      flg_water_distrib_in => flg_water_distrib_in,
      flg_water_origin_in => flg_water_origin_in,
      flg_conserv_in => flg_conserv_in,
      flg_owner_in => flg_owner_in,
      flg_hab_type_in => flg_hab_type_in,
      flg_light_in => flg_light_in,
      flg_heat_in => flg_heat_in,
      arquitect_barrier_in => arquitect_barrier_in,
      dt_registry_tstz_in => dt_registry_tstz_in,
      flg_hab_location_in => flg_hab_location_in,
      dt_home_hist_in => dt_home_hist_in,
      notes_in => notes_in,
      create_user_in => create_user_in,
      create_time_in => create_time_in,
      create_institution_in => create_institution_in,
      update_user_in => update_user_in,
      update_time_in => update_time_in,
      update_institution_in => update_institution_in,
      flg_status_in => flg_status_in,
      id_cancel_info_det_in => id_cancel_info_det_in,
      flg_water_treatment_in => flg_water_treatment_in,
      flg_garbage_dest_in => flg_garbage_dest_in,
      flg_bath_in => flg_bath_in,
      ft_bath_in => ft_bath_in,
      ft_wc_type_in => ft_wc_type_in,
      ft_wc_location_in => ft_wc_location_in,
      ft_wc_out_in => ft_wc_out_in,
      ft_water_distrib_in => ft_water_distrib_in,
      ft_water_origin_in => ft_water_origin_in,
      ft_conserv_in => ft_conserv_in,
      ft_owner_in => ft_owner_in,
      ft_garbage_dest_in => ft_garbage_dest_in,
      ft_hab_type_in => ft_hab_type_in,
      ft_water_treatment_in => ft_water_treatment_in,
      ft_light_in => ft_light_in,
      ft_heat_in => ft_heat_in,
      ft_hab_location_in => ft_hab_location_in,
      id_home_hist_out => id_home_hist_out
      ,handle_error_in => handle_error_in
      , rows_out => rows_out
   );
   END ins;

   FUNCTION ins (
      id_home_in IN HOME_HIST.ID_HOME%TYPE DEFAULT NULL,
      id_pat_family_in IN HOME_HIST.ID_PAT_FAMILY%TYPE DEFAULT NULL,
      id_professional_in IN HOME_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      num_rooms_in IN HOME_HIST.NUM_ROOMS%TYPE DEFAULT NULL,
      num_bedrooms_in IN HOME_HIST.NUM_BEDROOMS%TYPE DEFAULT NULL,
      num_person_room_in IN HOME_HIST.NUM_PERSON_ROOM%TYPE DEFAULT NULL,
      flg_wc_type_in IN HOME_HIST.FLG_WC_TYPE%TYPE DEFAULT NULL,
      flg_wc_location_in IN HOME_HIST.FLG_WC_LOCATION%TYPE DEFAULT NULL,
      flg_wc_out_in IN HOME_HIST.FLG_WC_OUT%TYPE DEFAULT NULL,
      flg_water_distrib_in IN HOME_HIST.FLG_WATER_DISTRIB%TYPE DEFAULT NULL,
      flg_water_origin_in IN HOME_HIST.FLG_WATER_ORIGIN%TYPE DEFAULT NULL,
      flg_conserv_in IN HOME_HIST.FLG_CONSERV%TYPE DEFAULT NULL,
      flg_owner_in IN HOME_HIST.FLG_OWNER%TYPE DEFAULT NULL,
      flg_hab_type_in IN HOME_HIST.FLG_HAB_TYPE%TYPE DEFAULT NULL,
      flg_light_in IN HOME_HIST.FLG_LIGHT%TYPE DEFAULT NULL,
      flg_heat_in IN HOME_HIST.FLG_HEAT%TYPE DEFAULT NULL,
      arquitect_barrier_in IN HOME_HIST.ARQUITECT_BARRIER%TYPE DEFAULT NULL,
      dt_registry_tstz_in IN HOME_HIST.DT_REGISTRY_TSTZ%TYPE DEFAULT NULL,
      flg_hab_location_in IN HOME_HIST.FLG_HAB_LOCATION%TYPE DEFAULT NULL,
      dt_home_hist_in IN HOME_HIST.DT_HOME_HIST%TYPE DEFAULT NULL,
      notes_in IN HOME_HIST.NOTES%TYPE DEFAULT NULL,
      create_user_in IN HOME_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN HOME_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN HOME_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN HOME_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN HOME_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN HOME_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_in IN HOME_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN HOME_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      flg_water_treatment_in IN HOME_HIST.FLG_WATER_TREATMENT%TYPE DEFAULT NULL,
      flg_garbage_dest_in IN HOME_HIST.FLG_GARBAGE_DEST%TYPE DEFAULT NULL,
      flg_bath_in IN HOME_HIST.FLG_BATH%TYPE DEFAULT NULL,
      ft_bath_in IN HOME_HIST.FT_BATH%TYPE DEFAULT NULL,
      ft_wc_type_in IN HOME_HIST.FT_WC_TYPE%TYPE DEFAULT NULL,
      ft_wc_location_in IN HOME_HIST.FT_WC_LOCATION%TYPE DEFAULT NULL,
      ft_wc_out_in IN HOME_HIST.FT_WC_OUT%TYPE DEFAULT NULL,
      ft_water_distrib_in IN HOME_HIST.FT_WATER_DISTRIB%TYPE DEFAULT NULL,
      ft_water_origin_in IN HOME_HIST.FT_WATER_ORIGIN%TYPE DEFAULT NULL,
      ft_conserv_in IN HOME_HIST.FT_CONSERV%TYPE DEFAULT NULL,
      ft_owner_in IN HOME_HIST.FT_OWNER%TYPE DEFAULT NULL,
      ft_garbage_dest_in IN HOME_HIST.FT_GARBAGE_DEST%TYPE DEFAULT NULL,
      ft_hab_type_in IN HOME_HIST.FT_HAB_TYPE%TYPE DEFAULT NULL,
      ft_water_treatment_in IN HOME_HIST.FT_WATER_TREATMENT%TYPE DEFAULT NULL,
      ft_light_in IN HOME_HIST.FT_LIGHT%TYPE DEFAULT NULL,
      ft_heat_in IN HOME_HIST.FT_HEAT%TYPE DEFAULT NULL,
      ft_hab_location_in IN HOME_HIST.FT_HAB_LOCATION%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
      RETURN
         HOME_HIST.ID_HOME_HIST%TYPE
   IS
        l_pky HOME_HIST.ID_HOME_HIST%TYPE := next_key;
   BEGIN
      ins (
         id_home_hist_in => l_pky,
         id_home_in => id_home_in,
         id_pat_family_in => id_pat_family_in,
         id_professional_in => id_professional_in,
         num_rooms_in => num_rooms_in,
         num_bedrooms_in => num_bedrooms_in,
         num_person_room_in => num_person_room_in,
         flg_wc_type_in => flg_wc_type_in,
         flg_wc_location_in => flg_wc_location_in,
         flg_wc_out_in => flg_wc_out_in,
         flg_water_distrib_in => flg_water_distrib_in,
         flg_water_origin_in => flg_water_origin_in,
         flg_conserv_in => flg_conserv_in,
         flg_owner_in => flg_owner_in,
         flg_hab_type_in => flg_hab_type_in,
         flg_light_in => flg_light_in,
         flg_heat_in => flg_heat_in,
         arquitect_barrier_in => arquitect_barrier_in,
         dt_registry_tstz_in => dt_registry_tstz_in,
         flg_hab_location_in => flg_hab_location_in,
         dt_home_hist_in => dt_home_hist_in,
         notes_in => notes_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_status_in => flg_status_in,
         id_cancel_info_det_in => id_cancel_info_det_in,
         flg_water_treatment_in => flg_water_treatment_in,
         flg_garbage_dest_in => flg_garbage_dest_in,
         flg_bath_in => flg_bath_in,
         ft_bath_in => ft_bath_in,
         ft_wc_type_in => ft_wc_type_in,
         ft_wc_location_in => ft_wc_location_in,
         ft_wc_out_in => ft_wc_out_in,
         ft_water_distrib_in => ft_water_distrib_in,
         ft_water_origin_in => ft_water_origin_in,
         ft_conserv_in => ft_conserv_in,
         ft_owner_in => ft_owner_in,
         ft_garbage_dest_in => ft_garbage_dest_in,
         ft_hab_type_in => ft_hab_type_in,
         ft_water_treatment_in => ft_water_treatment_in,
         ft_light_in => ft_light_in,
         ft_heat_in => ft_heat_in,
         ft_hab_location_in => ft_hab_location_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

   FUNCTION ins (
      id_home_in IN HOME_HIST.ID_HOME%TYPE DEFAULT NULL,
      id_pat_family_in IN HOME_HIST.ID_PAT_FAMILY%TYPE DEFAULT NULL,
      id_professional_in IN HOME_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      num_rooms_in IN HOME_HIST.NUM_ROOMS%TYPE DEFAULT NULL,
      num_bedrooms_in IN HOME_HIST.NUM_BEDROOMS%TYPE DEFAULT NULL,
      num_person_room_in IN HOME_HIST.NUM_PERSON_ROOM%TYPE DEFAULT NULL,
      flg_wc_type_in IN HOME_HIST.FLG_WC_TYPE%TYPE DEFAULT NULL,
      flg_wc_location_in IN HOME_HIST.FLG_WC_LOCATION%TYPE DEFAULT NULL,
      flg_wc_out_in IN HOME_HIST.FLG_WC_OUT%TYPE DEFAULT NULL,
      flg_water_distrib_in IN HOME_HIST.FLG_WATER_DISTRIB%TYPE DEFAULT NULL,
      flg_water_origin_in IN HOME_HIST.FLG_WATER_ORIGIN%TYPE DEFAULT NULL,
      flg_conserv_in IN HOME_HIST.FLG_CONSERV%TYPE DEFAULT NULL,
      flg_owner_in IN HOME_HIST.FLG_OWNER%TYPE DEFAULT NULL,
      flg_hab_type_in IN HOME_HIST.FLG_HAB_TYPE%TYPE DEFAULT NULL,
      flg_light_in IN HOME_HIST.FLG_LIGHT%TYPE DEFAULT NULL,
      flg_heat_in IN HOME_HIST.FLG_HEAT%TYPE DEFAULT NULL,
      arquitect_barrier_in IN HOME_HIST.ARQUITECT_BARRIER%TYPE DEFAULT NULL,
      dt_registry_tstz_in IN HOME_HIST.DT_REGISTRY_TSTZ%TYPE DEFAULT NULL,
      flg_hab_location_in IN HOME_HIST.FLG_HAB_LOCATION%TYPE DEFAULT NULL,
      dt_home_hist_in IN HOME_HIST.DT_HOME_HIST%TYPE DEFAULT NULL,
      notes_in IN HOME_HIST.NOTES%TYPE DEFAULT NULL,
      create_user_in IN HOME_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN HOME_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN HOME_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN HOME_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN HOME_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN HOME_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_in IN HOME_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN HOME_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      flg_water_treatment_in IN HOME_HIST.FLG_WATER_TREATMENT%TYPE DEFAULT NULL,
      flg_garbage_dest_in IN HOME_HIST.FLG_GARBAGE_DEST%TYPE DEFAULT NULL,
      flg_bath_in IN HOME_HIST.FLG_BATH%TYPE DEFAULT NULL,
      ft_bath_in IN HOME_HIST.FT_BATH%TYPE DEFAULT NULL,
      ft_wc_type_in IN HOME_HIST.FT_WC_TYPE%TYPE DEFAULT NULL,
      ft_wc_location_in IN HOME_HIST.FT_WC_LOCATION%TYPE DEFAULT NULL,
      ft_wc_out_in IN HOME_HIST.FT_WC_OUT%TYPE DEFAULT NULL,
      ft_water_distrib_in IN HOME_HIST.FT_WATER_DISTRIB%TYPE DEFAULT NULL,
      ft_water_origin_in IN HOME_HIST.FT_WATER_ORIGIN%TYPE DEFAULT NULL,
      ft_conserv_in IN HOME_HIST.FT_CONSERV%TYPE DEFAULT NULL,
      ft_owner_in IN HOME_HIST.FT_OWNER%TYPE DEFAULT NULL,
      ft_garbage_dest_in IN HOME_HIST.FT_GARBAGE_DEST%TYPE DEFAULT NULL,
      ft_hab_type_in IN HOME_HIST.FT_HAB_TYPE%TYPE DEFAULT NULL,
      ft_water_treatment_in IN HOME_HIST.FT_WATER_TREATMENT%TYPE DEFAULT NULL,
      ft_light_in IN HOME_HIST.FT_LIGHT%TYPE DEFAULT NULL,
      ft_heat_in IN HOME_HIST.FT_HEAT%TYPE DEFAULT NULL,
      ft_hab_location_in IN HOME_HIST.FT_HAB_LOCATION%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
      RETURN
         HOME_HIST.ID_HOME_HIST%TYPE
   IS
        l_pky HOME_HIST.ID_HOME_HIST%TYPE := next_key;
    rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_home_hist_in => l_pky,
         id_home_in => id_home_in,
         id_pat_family_in => id_pat_family_in,
         id_professional_in => id_professional_in,
         num_rooms_in => num_rooms_in,
         num_bedrooms_in => num_bedrooms_in,
         num_person_room_in => num_person_room_in,
         flg_wc_type_in => flg_wc_type_in,
         flg_wc_location_in => flg_wc_location_in,
         flg_wc_out_in => flg_wc_out_in,
         flg_water_distrib_in => flg_water_distrib_in,
         flg_water_origin_in => flg_water_origin_in,
         flg_conserv_in => flg_conserv_in,
         flg_owner_in => flg_owner_in,
         flg_hab_type_in => flg_hab_type_in,
         flg_light_in => flg_light_in,
         flg_heat_in => flg_heat_in,
         arquitect_barrier_in => arquitect_barrier_in,
         dt_registry_tstz_in => dt_registry_tstz_in,
         flg_hab_location_in => flg_hab_location_in,
         dt_home_hist_in => dt_home_hist_in,
         notes_in => notes_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_status_in => flg_status_in,
         id_cancel_info_det_in => id_cancel_info_det_in,
         flg_water_treatment_in => flg_water_treatment_in,
         flg_garbage_dest_in => flg_garbage_dest_in,
         flg_bath_in => flg_bath_in,
         ft_bath_in => ft_bath_in,
         ft_wc_type_in => ft_wc_type_in,
         ft_wc_location_in => ft_wc_location_in,
         ft_wc_out_in => ft_wc_out_in,
         ft_water_distrib_in => ft_water_distrib_in,
         ft_water_origin_in => ft_water_origin_in,
         ft_conserv_in => ft_conserv_in,
         ft_owner_in => ft_owner_in,
         ft_garbage_dest_in => ft_garbage_dest_in,
         ft_hab_type_in => ft_hab_type_in,
         ft_water_treatment_in => ft_water_treatment_in,
         ft_light_in => ft_light_in,
         ft_heat_in => ft_heat_in,
         ft_hab_location_in => ft_hab_location_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
      RETURN l_pky;
   END ins;

      PROCEDURE ins (
      id_home_in IN HOME_HIST.ID_HOME%TYPE DEFAULT NULL,
      id_pat_family_in IN HOME_HIST.ID_PAT_FAMILY%TYPE DEFAULT NULL,
      id_professional_in IN HOME_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      num_rooms_in IN HOME_HIST.NUM_ROOMS%TYPE DEFAULT NULL,
      num_bedrooms_in IN HOME_HIST.NUM_BEDROOMS%TYPE DEFAULT NULL,
      num_person_room_in IN HOME_HIST.NUM_PERSON_ROOM%TYPE DEFAULT NULL,
      flg_wc_type_in IN HOME_HIST.FLG_WC_TYPE%TYPE DEFAULT NULL,
      flg_wc_location_in IN HOME_HIST.FLG_WC_LOCATION%TYPE DEFAULT NULL,
      flg_wc_out_in IN HOME_HIST.FLG_WC_OUT%TYPE DEFAULT NULL,
      flg_water_distrib_in IN HOME_HIST.FLG_WATER_DISTRIB%TYPE DEFAULT NULL,
      flg_water_origin_in IN HOME_HIST.FLG_WATER_ORIGIN%TYPE DEFAULT NULL,
      flg_conserv_in IN HOME_HIST.FLG_CONSERV%TYPE DEFAULT NULL,
      flg_owner_in IN HOME_HIST.FLG_OWNER%TYPE DEFAULT NULL,
      flg_hab_type_in IN HOME_HIST.FLG_HAB_TYPE%TYPE DEFAULT NULL,
      flg_light_in IN HOME_HIST.FLG_LIGHT%TYPE DEFAULT NULL,
      flg_heat_in IN HOME_HIST.FLG_HEAT%TYPE DEFAULT NULL,
      arquitect_barrier_in IN HOME_HIST.ARQUITECT_BARRIER%TYPE DEFAULT NULL,
      dt_registry_tstz_in IN HOME_HIST.DT_REGISTRY_TSTZ%TYPE DEFAULT NULL,
      flg_hab_location_in IN HOME_HIST.FLG_HAB_LOCATION%TYPE DEFAULT NULL,
      dt_home_hist_in IN HOME_HIST.DT_HOME_HIST%TYPE DEFAULT NULL,
      notes_in IN HOME_HIST.NOTES%TYPE DEFAULT NULL,
      create_user_in IN HOME_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN HOME_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN HOME_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN HOME_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN HOME_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN HOME_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_in IN HOME_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN HOME_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      flg_water_treatment_in IN HOME_HIST.FLG_WATER_TREATMENT%TYPE DEFAULT NULL,
      flg_garbage_dest_in IN HOME_HIST.FLG_GARBAGE_DEST%TYPE DEFAULT NULL,
      flg_bath_in IN HOME_HIST.FLG_BATH%TYPE DEFAULT NULL,
      ft_bath_in IN HOME_HIST.FT_BATH%TYPE DEFAULT NULL,
      ft_wc_type_in IN HOME_HIST.FT_WC_TYPE%TYPE DEFAULT NULL,
      ft_wc_location_in IN HOME_HIST.FT_WC_LOCATION%TYPE DEFAULT NULL,
      ft_wc_out_in IN HOME_HIST.FT_WC_OUT%TYPE DEFAULT NULL,
      ft_water_distrib_in IN HOME_HIST.FT_WATER_DISTRIB%TYPE DEFAULT NULL,
      ft_water_origin_in IN HOME_HIST.FT_WATER_ORIGIN%TYPE DEFAULT NULL,
      ft_conserv_in IN HOME_HIST.FT_CONSERV%TYPE DEFAULT NULL,
      ft_owner_in IN HOME_HIST.FT_OWNER%TYPE DEFAULT NULL,
      ft_garbage_dest_in IN HOME_HIST.FT_GARBAGE_DEST%TYPE DEFAULT NULL,
      ft_hab_type_in IN HOME_HIST.FT_HAB_TYPE%TYPE DEFAULT NULL,
      ft_water_treatment_in IN HOME_HIST.FT_WATER_TREATMENT%TYPE DEFAULT NULL,
      ft_light_in IN HOME_HIST.FT_LIGHT%TYPE DEFAULT NULL,
      ft_heat_in IN HOME_HIST.FT_HEAT%TYPE DEFAULT NULL,
      ft_hab_location_in IN HOME_HIST.FT_HAB_LOCATION%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
      , rows_out OUT TABLE_VARCHAR
   )
   IS
        l_pky HOME_HIST.ID_HOME_HIST%TYPE := next_key;
   BEGIN
      ins (
         id_home_hist_in => l_pky,
         id_home_in => id_home_in,
         id_pat_family_in => id_pat_family_in,
         id_professional_in => id_professional_in,
         num_rooms_in => num_rooms_in,
         num_bedrooms_in => num_bedrooms_in,
         num_person_room_in => num_person_room_in,
         flg_wc_type_in => flg_wc_type_in,
         flg_wc_location_in => flg_wc_location_in,
         flg_wc_out_in => flg_wc_out_in,
         flg_water_distrib_in => flg_water_distrib_in,
         flg_water_origin_in => flg_water_origin_in,
         flg_conserv_in => flg_conserv_in,
         flg_owner_in => flg_owner_in,
         flg_hab_type_in => flg_hab_type_in,
         flg_light_in => flg_light_in,
         flg_heat_in => flg_heat_in,
         arquitect_barrier_in => arquitect_barrier_in,
         dt_registry_tstz_in => dt_registry_tstz_in,
         flg_hab_location_in => flg_hab_location_in,
         dt_home_hist_in => dt_home_hist_in,
         notes_in => notes_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_status_in => flg_status_in,
         id_cancel_info_det_in => id_cancel_info_det_in,
         flg_water_treatment_in => flg_water_treatment_in,
         flg_garbage_dest_in => flg_garbage_dest_in,
         flg_bath_in => flg_bath_in,
         ft_bath_in => ft_bath_in,
         ft_wc_type_in => ft_wc_type_in,
         ft_wc_location_in => ft_wc_location_in,
         ft_wc_out_in => ft_wc_out_in,
         ft_water_distrib_in => ft_water_distrib_in,
         ft_water_origin_in => ft_water_origin_in,
         ft_conserv_in => ft_conserv_in,
         ft_owner_in => ft_owner_in,
         ft_garbage_dest_in => ft_garbage_dest_in,
         ft_hab_type_in => ft_hab_type_in,
         ft_water_treatment_in => ft_water_treatment_in,
         ft_light_in => ft_light_in,
         ft_heat_in => ft_heat_in,
         ft_hab_location_in => ft_hab_location_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;


     PROCEDURE ins (
      id_home_in IN HOME_HIST.ID_HOME%TYPE DEFAULT NULL,
      id_pat_family_in IN HOME_HIST.ID_PAT_FAMILY%TYPE DEFAULT NULL,
      id_professional_in IN HOME_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      num_rooms_in IN HOME_HIST.NUM_ROOMS%TYPE DEFAULT NULL,
      num_bedrooms_in IN HOME_HIST.NUM_BEDROOMS%TYPE DEFAULT NULL,
      num_person_room_in IN HOME_HIST.NUM_PERSON_ROOM%TYPE DEFAULT NULL,
      flg_wc_type_in IN HOME_HIST.FLG_WC_TYPE%TYPE DEFAULT NULL,
      flg_wc_location_in IN HOME_HIST.FLG_WC_LOCATION%TYPE DEFAULT NULL,
      flg_wc_out_in IN HOME_HIST.FLG_WC_OUT%TYPE DEFAULT NULL,
      flg_water_distrib_in IN HOME_HIST.FLG_WATER_DISTRIB%TYPE DEFAULT NULL,
      flg_water_origin_in IN HOME_HIST.FLG_WATER_ORIGIN%TYPE DEFAULT NULL,
      flg_conserv_in IN HOME_HIST.FLG_CONSERV%TYPE DEFAULT NULL,
      flg_owner_in IN HOME_HIST.FLG_OWNER%TYPE DEFAULT NULL,
      flg_hab_type_in IN HOME_HIST.FLG_HAB_TYPE%TYPE DEFAULT NULL,
      flg_light_in IN HOME_HIST.FLG_LIGHT%TYPE DEFAULT NULL,
      flg_heat_in IN HOME_HIST.FLG_HEAT%TYPE DEFAULT NULL,
      arquitect_barrier_in IN HOME_HIST.ARQUITECT_BARRIER%TYPE DEFAULT NULL,
      dt_registry_tstz_in IN HOME_HIST.DT_REGISTRY_TSTZ%TYPE DEFAULT NULL,
      flg_hab_location_in IN HOME_HIST.FLG_HAB_LOCATION%TYPE DEFAULT NULL,
      dt_home_hist_in IN HOME_HIST.DT_HOME_HIST%TYPE DEFAULT NULL,
      notes_in IN HOME_HIST.NOTES%TYPE DEFAULT NULL,
      create_user_in IN HOME_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN HOME_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN HOME_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN HOME_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN HOME_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN HOME_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_in IN HOME_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN HOME_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      flg_water_treatment_in IN HOME_HIST.FLG_WATER_TREATMENT%TYPE DEFAULT NULL,
      flg_garbage_dest_in IN HOME_HIST.FLG_GARBAGE_DEST%TYPE DEFAULT NULL,
      flg_bath_in IN HOME_HIST.FLG_BATH%TYPE DEFAULT NULL,
      ft_bath_in IN HOME_HIST.FT_BATH%TYPE DEFAULT NULL,
      ft_wc_type_in IN HOME_HIST.FT_WC_TYPE%TYPE DEFAULT NULL,
      ft_wc_location_in IN HOME_HIST.FT_WC_LOCATION%TYPE DEFAULT NULL,
      ft_wc_out_in IN HOME_HIST.FT_WC_OUT%TYPE DEFAULT NULL,
      ft_water_distrib_in IN HOME_HIST.FT_WATER_DISTRIB%TYPE DEFAULT NULL,
      ft_water_origin_in IN HOME_HIST.FT_WATER_ORIGIN%TYPE DEFAULT NULL,
      ft_conserv_in IN HOME_HIST.FT_CONSERV%TYPE DEFAULT NULL,
      ft_owner_in IN HOME_HIST.FT_OWNER%TYPE DEFAULT NULL,
      ft_garbage_dest_in IN HOME_HIST.FT_GARBAGE_DEST%TYPE DEFAULT NULL,
      ft_hab_type_in IN HOME_HIST.FT_HAB_TYPE%TYPE DEFAULT NULL,
      ft_water_treatment_in IN HOME_HIST.FT_WATER_TREATMENT%TYPE DEFAULT NULL,
      ft_light_in IN HOME_HIST.FT_LIGHT%TYPE DEFAULT NULL,
      ft_heat_in IN HOME_HIST.FT_HEAT%TYPE DEFAULT NULL,
      ft_hab_location_in IN HOME_HIST.FT_HAB_LOCATION%TYPE DEFAULT NULL
      ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
        l_pky HOME_HIST.ID_HOME_HIST%TYPE := next_key;
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
         id_home_hist_in => l_pky,
         id_home_in => id_home_in,
         id_pat_family_in => id_pat_family_in,
         id_professional_in => id_professional_in,
         num_rooms_in => num_rooms_in,
         num_bedrooms_in => num_bedrooms_in,
         num_person_room_in => num_person_room_in,
         flg_wc_type_in => flg_wc_type_in,
         flg_wc_location_in => flg_wc_location_in,
         flg_wc_out_in => flg_wc_out_in,
         flg_water_distrib_in => flg_water_distrib_in,
         flg_water_origin_in => flg_water_origin_in,
         flg_conserv_in => flg_conserv_in,
         flg_owner_in => flg_owner_in,
         flg_hab_type_in => flg_hab_type_in,
         flg_light_in => flg_light_in,
         flg_heat_in => flg_heat_in,
         arquitect_barrier_in => arquitect_barrier_in,
         dt_registry_tstz_in => dt_registry_tstz_in,
         flg_hab_location_in => flg_hab_location_in,
         dt_home_hist_in => dt_home_hist_in,
         notes_in => notes_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_status_in => flg_status_in,
         id_cancel_info_det_in => id_cancel_info_det_in,
         flg_water_treatment_in => flg_water_treatment_in,
         flg_garbage_dest_in => flg_garbage_dest_in,
         flg_bath_in => flg_bath_in,
         ft_bath_in => ft_bath_in,
         ft_wc_type_in => ft_wc_type_in,
         ft_wc_location_in => ft_wc_location_in,
         ft_wc_out_in => ft_wc_out_in,
         ft_water_distrib_in => ft_water_distrib_in,
         ft_water_origin_in => ft_water_origin_in,
         ft_conserv_in => ft_conserv_in,
         ft_owner_in => ft_owner_in,
         ft_garbage_dest_in => ft_garbage_dest_in,
         ft_hab_type_in => ft_hab_type_in,
         ft_water_treatment_in => ft_water_treatment_in,
         ft_light_in => ft_light_in,
         ft_heat_in => ft_heat_in,
         ft_hab_location_in => ft_hab_location_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
         );
   END ins;

    PROCEDURE ins (
      rows_in IN HOME_HIST_tc
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
         FORALL indx IN rows_in.FIRST .. rows_in.LAST
            SAVE EXCEPTIONS
            INSERT INTO HOME_HIST VALUES rows_in (indx) RETURNING ROWID BULK COLLECT INTO rows_out;
      END IF;
   EXCEPTION
     WHEN e_forall_error
     THEN
        -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
        -- here if any error occurs. We can then save all the error
        -- information out to the error instance.
       IF NOT handle_error_in THEN RAISE;
       ELSE
          <<bulk_handler>>
          DECLARE
             l_err_instance_id NUMBER;
          BEGIN
             -- For each error, write to the log.
             FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
             LOOP
                pk_alert_exceptions.register_error (
                    error_name_in => 'FORALL-INSERT-FAILURE'
                   ,err_instance_id_out => l_err_instance_id
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'BINDING_ROW_' || indx
                  ,value_in => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                  ,validate_in => FALSE
                );
                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ERROR_AT_ROW_' || indx
                  ,value_in => SQLERRM (-SQL%BULK_EXCEPTIONS (indx).ERROR_CODE)
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_HOME_HIST _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_HOME_HIST
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_HOME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_HOME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PAT_FAMILY _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PAT_FAMILY
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_PROFESSIONAL _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_PROFESSIONAL
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NUM_ROOMS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NUM_ROOMS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NUM_BEDROOMS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NUM_BEDROOMS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NUM_PERSON_ROOM _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NUM_PERSON_ROOM
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_WC_TYPE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_WC_TYPE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_WC_LOCATION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_WC_LOCATION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_WC_OUT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_WC_OUT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_WATER_DISTRIB _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_WATER_DISTRIB
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_WATER_ORIGIN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_WATER_ORIGIN
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_CONSERV _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_CONSERV
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_OWNER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_OWNER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_HAB_TYPE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_HAB_TYPE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_LIGHT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_LIGHT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_HEAT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_HEAT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ARQUITECT_BARRIER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ARQUITECT_BARRIER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_REGISTRY_TSTZ _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_REGISTRY_TSTZ
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_HAB_LOCATION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_HAB_LOCATION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'DT_HOME_HIST _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).DT_HOME_HIST
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'NOTES _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).NOTES
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'CREATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).CREATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_USER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_USER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_TIME _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_TIME
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'UPDATE_INSTITUTION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).UPDATE_INSTITUTION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_STATUS _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_STATUS
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'ID_CANCEL_INFO_DET _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).ID_CANCEL_INFO_DET
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_WATER_TREATMENT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_WATER_TREATMENT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_GARBAGE_DEST _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_GARBAGE_DEST
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FLG_BATH _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FLG_BATH
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FT_BATH _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FT_BATH
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FT_WC_TYPE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FT_WC_TYPE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FT_WC_LOCATION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FT_WC_LOCATION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FT_WC_OUT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FT_WC_OUT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FT_WATER_DISTRIB _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FT_WATER_DISTRIB
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FT_WATER_ORIGIN _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FT_WATER_ORIGIN
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FT_CONSERV _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FT_CONSERV
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FT_OWNER _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FT_OWNER
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FT_GARBAGE_DEST _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FT_GARBAGE_DEST
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FT_HAB_TYPE _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FT_HAB_TYPE
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FT_WATER_TREATMENT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FT_WATER_TREATMENT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FT_LIGHT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FT_LIGHT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FT_HEAT _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FT_HEAT
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.add_context (
                   err_instance_id_in => l_err_instance_id
                  ,NAME_IN => 'FT_HAB_LOCATION _' || indx
                  ,value_in => rows_in(SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX).FT_HAB_LOCATION
                  ,validate_in => FALSE
                );

                pk_alert_exceptions.raise_error_instance( err_instance_id_in => l_err_instance_id );
             END LOOP;
          END bulk_handler;
        END IF;
     WHEN OTHERS
     THEN
       IF NOT handle_error_in THEN RAISE;
       ELSE
       pk_alert_exceptions.raise_error(
          error_name_in => 'FORALL-INSERT-FAILURE'
          ,name1_in => 'TABLE_NAME'
          ,value1_in => 'HOME_HIST'
          ,name2_in => 'ROW_COUNT'
          ,value2_in => rows_in.COUNT
           );
       END IF;
   END ins;

    PROCEDURE ins (
      rows_in IN HOME_HIST_tc
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
      rows_out TABLE_VARCHAR;
   BEGIN
      ins (
      rows_in => rows_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
   );
   END ins;


PROCEDURE upd (
      id_home_hist_in IN HOME_HIST.ID_HOME_HIST%TYPE,
      id_home_in IN HOME_HIST.ID_HOME%TYPE DEFAULT NULL,
      ID_HOME_nin IN BOOLEAN := TRUE,
      id_pat_family_in IN HOME_HIST.ID_PAT_FAMILY%TYPE DEFAULT NULL,
      ID_PAT_FAMILY_nin IN BOOLEAN := TRUE,
      id_professional_in IN HOME_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      num_rooms_in IN HOME_HIST.NUM_ROOMS%TYPE DEFAULT NULL,
      NUM_ROOMS_nin IN BOOLEAN := TRUE,
      num_bedrooms_in IN HOME_HIST.NUM_BEDROOMS%TYPE DEFAULT NULL,
      NUM_BEDROOMS_nin IN BOOLEAN := TRUE,
      num_person_room_in IN HOME_HIST.NUM_PERSON_ROOM%TYPE DEFAULT NULL,
      NUM_PERSON_ROOM_nin IN BOOLEAN := TRUE,
      flg_wc_type_in IN HOME_HIST.FLG_WC_TYPE%TYPE DEFAULT NULL,
      FLG_WC_TYPE_nin IN BOOLEAN := TRUE,
      flg_wc_location_in IN HOME_HIST.FLG_WC_LOCATION%TYPE DEFAULT NULL,
      FLG_WC_LOCATION_nin IN BOOLEAN := TRUE,
      flg_wc_out_in IN HOME_HIST.FLG_WC_OUT%TYPE DEFAULT NULL,
      FLG_WC_OUT_nin IN BOOLEAN := TRUE,
      flg_water_distrib_in IN HOME_HIST.FLG_WATER_DISTRIB%TYPE DEFAULT NULL,
      FLG_WATER_DISTRIB_nin IN BOOLEAN := TRUE,
      flg_water_origin_in IN HOME_HIST.FLG_WATER_ORIGIN%TYPE DEFAULT NULL,
      FLG_WATER_ORIGIN_nin IN BOOLEAN := TRUE,
      flg_conserv_in IN HOME_HIST.FLG_CONSERV%TYPE DEFAULT NULL,
      FLG_CONSERV_nin IN BOOLEAN := TRUE,
      flg_owner_in IN HOME_HIST.FLG_OWNER%TYPE DEFAULT NULL,
      FLG_OWNER_nin IN BOOLEAN := TRUE,
      flg_hab_type_in IN HOME_HIST.FLG_HAB_TYPE%TYPE DEFAULT NULL,
      FLG_HAB_TYPE_nin IN BOOLEAN := TRUE,
      flg_light_in IN HOME_HIST.FLG_LIGHT%TYPE DEFAULT NULL,
      FLG_LIGHT_nin IN BOOLEAN := TRUE,
      flg_heat_in IN HOME_HIST.FLG_HEAT%TYPE DEFAULT NULL,
      FLG_HEAT_nin IN BOOLEAN := TRUE,
      arquitect_barrier_in IN HOME_HIST.ARQUITECT_BARRIER%TYPE DEFAULT NULL,
      ARQUITECT_BARRIER_nin IN BOOLEAN := TRUE,
      dt_registry_tstz_in IN HOME_HIST.DT_REGISTRY_TSTZ%TYPE DEFAULT NULL,
      DT_REGISTRY_TSTZ_nin IN BOOLEAN := TRUE,
      flg_hab_location_in IN HOME_HIST.FLG_HAB_LOCATION%TYPE DEFAULT NULL,
      FLG_HAB_LOCATION_nin IN BOOLEAN := TRUE,
      dt_home_hist_in IN HOME_HIST.DT_HOME_HIST%TYPE DEFAULT NULL,
      DT_HOME_HIST_nin IN BOOLEAN := TRUE,
      notes_in IN HOME_HIST.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      create_user_in IN HOME_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN HOME_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN HOME_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN HOME_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN HOME_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN HOME_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_status_in IN HOME_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_cancel_info_det_in IN HOME_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      ID_CANCEL_INFO_DET_nin IN BOOLEAN := TRUE,
      flg_water_treatment_in IN HOME_HIST.FLG_WATER_TREATMENT%TYPE DEFAULT NULL,
      FLG_WATER_TREATMENT_nin IN BOOLEAN := TRUE,
      flg_garbage_dest_in IN HOME_HIST.FLG_GARBAGE_DEST%TYPE DEFAULT NULL,
      FLG_GARBAGE_DEST_nin IN BOOLEAN := TRUE,
      flg_bath_in IN HOME_HIST.FLG_BATH%TYPE DEFAULT NULL,
      FLG_BATH_nin IN BOOLEAN := TRUE,
      ft_bath_in IN HOME_HIST.FT_BATH%TYPE DEFAULT NULL,
      FT_BATH_nin IN BOOLEAN := TRUE,
      ft_wc_type_in IN HOME_HIST.FT_WC_TYPE%TYPE DEFAULT NULL,
      FT_WC_TYPE_nin IN BOOLEAN := TRUE,
      ft_wc_location_in IN HOME_HIST.FT_WC_LOCATION%TYPE DEFAULT NULL,
      FT_WC_LOCATION_nin IN BOOLEAN := TRUE,
      ft_wc_out_in IN HOME_HIST.FT_WC_OUT%TYPE DEFAULT NULL,
      FT_WC_OUT_nin IN BOOLEAN := TRUE,
      ft_water_distrib_in IN HOME_HIST.FT_WATER_DISTRIB%TYPE DEFAULT NULL,
      FT_WATER_DISTRIB_nin IN BOOLEAN := TRUE,
      ft_water_origin_in IN HOME_HIST.FT_WATER_ORIGIN%TYPE DEFAULT NULL,
      FT_WATER_ORIGIN_nin IN BOOLEAN := TRUE,
      ft_conserv_in IN HOME_HIST.FT_CONSERV%TYPE DEFAULT NULL,
      FT_CONSERV_nin IN BOOLEAN := TRUE,
      ft_owner_in IN HOME_HIST.FT_OWNER%TYPE DEFAULT NULL,
      FT_OWNER_nin IN BOOLEAN := TRUE,
      ft_garbage_dest_in IN HOME_HIST.FT_GARBAGE_DEST%TYPE DEFAULT NULL,
      FT_GARBAGE_DEST_nin IN BOOLEAN := TRUE,
      ft_hab_type_in IN HOME_HIST.FT_HAB_TYPE%TYPE DEFAULT NULL,
      FT_HAB_TYPE_nin IN BOOLEAN := TRUE,
      ft_water_treatment_in IN HOME_HIST.FT_WATER_TREATMENT%TYPE DEFAULT NULL,
      FT_WATER_TREATMENT_nin IN BOOLEAN := TRUE,
      ft_light_in IN HOME_HIST.FT_LIGHT%TYPE DEFAULT NULL,
      FT_LIGHT_nin IN BOOLEAN := TRUE,
      ft_heat_in IN HOME_HIST.FT_HEAT%TYPE DEFAULT NULL,
      FT_HEAT_nin IN BOOLEAN := TRUE,
      ft_hab_location_in IN HOME_HIST.FT_HAB_LOCATION%TYPE DEFAULT NULL,
      FT_HAB_LOCATION_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_rows_out TABLE_VARCHAR;
   l_ID_HOME_n NUMBER(1);
   l_ID_PAT_FAMILY_n NUMBER(1);
   l_ID_PROFESSIONAL_n NUMBER(1);
   l_NUM_ROOMS_n NUMBER(1);
   l_NUM_BEDROOMS_n NUMBER(1);
   l_NUM_PERSON_ROOM_n NUMBER(1);
   l_FLG_WC_TYPE_n NUMBER(1);
   l_FLG_WC_LOCATION_n NUMBER(1);
   l_FLG_WC_OUT_n NUMBER(1);
   l_FLG_WATER_DISTRIB_n NUMBER(1);
   l_FLG_WATER_ORIGIN_n NUMBER(1);
   l_FLG_CONSERV_n NUMBER(1);
   l_FLG_OWNER_n NUMBER(1);
   l_FLG_HAB_TYPE_n NUMBER(1);
   l_FLG_LIGHT_n NUMBER(1);
   l_FLG_HEAT_n NUMBER(1);
   l_ARQUITECT_BARRIER_n NUMBER(1);
   l_DT_REGISTRY_TSTZ_n NUMBER(1);
   l_FLG_HAB_LOCATION_n NUMBER(1);
   l_DT_HOME_HIST_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_ID_CANCEL_INFO_DET_n NUMBER(1);
   l_FLG_WATER_TREATMENT_n NUMBER(1);
   l_FLG_GARBAGE_DEST_n NUMBER(1);
   l_FLG_BATH_n NUMBER(1);
   l_FT_BATH_n NUMBER(1);
   l_FT_WC_TYPE_n NUMBER(1);
   l_FT_WC_LOCATION_n NUMBER(1);
   l_FT_WC_OUT_n NUMBER(1);
   l_FT_WATER_DISTRIB_n NUMBER(1);
   l_FT_WATER_ORIGIN_n NUMBER(1);
   l_FT_CONSERV_n NUMBER(1);
   l_FT_OWNER_n NUMBER(1);
   l_FT_GARBAGE_DEST_n NUMBER(1);
   l_FT_HAB_TYPE_n NUMBER(1);
   l_FT_WATER_TREATMENT_n NUMBER(1);
   l_FT_LIGHT_n NUMBER(1);
   l_FT_HEAT_n NUMBER(1);
   l_FT_HAB_LOCATION_n NUMBER(1);
   BEGIN

   l_ID_HOME_n := sys.diutil.bool_to_int(ID_HOME_nin);
   l_ID_PAT_FAMILY_n := sys.diutil.bool_to_int(ID_PAT_FAMILY_nin);
   l_ID_PROFESSIONAL_n := sys.diutil.bool_to_int(ID_PROFESSIONAL_nin);
   l_NUM_ROOMS_n := sys.diutil.bool_to_int(NUM_ROOMS_nin);
   l_NUM_BEDROOMS_n := sys.diutil.bool_to_int(NUM_BEDROOMS_nin);
   l_NUM_PERSON_ROOM_n := sys.diutil.bool_to_int(NUM_PERSON_ROOM_nin);
   l_FLG_WC_TYPE_n := sys.diutil.bool_to_int(FLG_WC_TYPE_nin);
   l_FLG_WC_LOCATION_n := sys.diutil.bool_to_int(FLG_WC_LOCATION_nin);
   l_FLG_WC_OUT_n := sys.diutil.bool_to_int(FLG_WC_OUT_nin);
   l_FLG_WATER_DISTRIB_n := sys.diutil.bool_to_int(FLG_WATER_DISTRIB_nin);
   l_FLG_WATER_ORIGIN_n := sys.diutil.bool_to_int(FLG_WATER_ORIGIN_nin);
   l_FLG_CONSERV_n := sys.diutil.bool_to_int(FLG_CONSERV_nin);
   l_FLG_OWNER_n := sys.diutil.bool_to_int(FLG_OWNER_nin);
   l_FLG_HAB_TYPE_n := sys.diutil.bool_to_int(FLG_HAB_TYPE_nin);
   l_FLG_LIGHT_n := sys.diutil.bool_to_int(FLG_LIGHT_nin);
   l_FLG_HEAT_n := sys.diutil.bool_to_int(FLG_HEAT_nin);
   l_ARQUITECT_BARRIER_n := sys.diutil.bool_to_int(ARQUITECT_BARRIER_nin);
   l_DT_REGISTRY_TSTZ_n := sys.diutil.bool_to_int(DT_REGISTRY_TSTZ_nin);
   l_FLG_HAB_LOCATION_n := sys.diutil.bool_to_int(FLG_HAB_LOCATION_nin);
   l_DT_HOME_HIST_n := sys.diutil.bool_to_int(DT_HOME_HIST_nin);
   l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
   l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
   l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
   l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
   l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
   l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
   l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
   l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
   l_ID_CANCEL_INFO_DET_n := sys.diutil.bool_to_int(ID_CANCEL_INFO_DET_nin);
   l_FLG_WATER_TREATMENT_n := sys.diutil.bool_to_int(FLG_WATER_TREATMENT_nin);
   l_FLG_GARBAGE_DEST_n := sys.diutil.bool_to_int(FLG_GARBAGE_DEST_nin);
   l_FLG_BATH_n := sys.diutil.bool_to_int(FLG_BATH_nin);
   l_FT_BATH_n := sys.diutil.bool_to_int(FT_BATH_nin);
   l_FT_WC_TYPE_n := sys.diutil.bool_to_int(FT_WC_TYPE_nin);
   l_FT_WC_LOCATION_n := sys.diutil.bool_to_int(FT_WC_LOCATION_nin);
   l_FT_WC_OUT_n := sys.diutil.bool_to_int(FT_WC_OUT_nin);
   l_FT_WATER_DISTRIB_n := sys.diutil.bool_to_int(FT_WATER_DISTRIB_nin);
   l_FT_WATER_ORIGIN_n := sys.diutil.bool_to_int(FT_WATER_ORIGIN_nin);
   l_FT_CONSERV_n := sys.diutil.bool_to_int(FT_CONSERV_nin);
   l_FT_OWNER_n := sys.diutil.bool_to_int(FT_OWNER_nin);
   l_FT_GARBAGE_DEST_n := sys.diutil.bool_to_int(FT_GARBAGE_DEST_nin);
   l_FT_HAB_TYPE_n := sys.diutil.bool_to_int(FT_HAB_TYPE_nin);
   l_FT_WATER_TREATMENT_n := sys.diutil.bool_to_int(FT_WATER_TREATMENT_nin);
   l_FT_LIGHT_n := sys.diutil.bool_to_int(FT_LIGHT_nin);
   l_FT_HEAT_n := sys.diutil.bool_to_int(FT_HEAT_nin);
   l_FT_HAB_LOCATION_n := sys.diutil.bool_to_int(FT_HAB_LOCATION_nin);


         UPDATE HOME_HIST SET
     ID_HOME = decode (l_ID_HOME_n,0,id_home_in, NVL (id_home_in, ID_HOME)),
     ID_PAT_FAMILY = decode (l_ID_PAT_FAMILY_n,0,id_pat_family_in, NVL (id_pat_family_in, ID_PAT_FAMILY)),
     ID_PROFESSIONAL = decode (l_ID_PROFESSIONAL_n,0,id_professional_in, NVL (id_professional_in, ID_PROFESSIONAL)),
     NUM_ROOMS = decode (l_NUM_ROOMS_n,0,num_rooms_in, NVL (num_rooms_in, NUM_ROOMS)),
     NUM_BEDROOMS = decode (l_NUM_BEDROOMS_n,0,num_bedrooms_in, NVL (num_bedrooms_in, NUM_BEDROOMS)),
     NUM_PERSON_ROOM = decode (l_NUM_PERSON_ROOM_n,0,num_person_room_in, NVL (num_person_room_in, NUM_PERSON_ROOM)),
     FLG_WC_TYPE = decode (l_FLG_WC_TYPE_n,0,flg_wc_type_in, NVL (flg_wc_type_in, FLG_WC_TYPE)),
     FLG_WC_LOCATION = decode (l_FLG_WC_LOCATION_n,0,flg_wc_location_in, NVL (flg_wc_location_in, FLG_WC_LOCATION)),
     FLG_WC_OUT = decode (l_FLG_WC_OUT_n,0,flg_wc_out_in, NVL (flg_wc_out_in, FLG_WC_OUT)),
     FLG_WATER_DISTRIB = decode (l_FLG_WATER_DISTRIB_n,0,flg_water_distrib_in, NVL (flg_water_distrib_in, FLG_WATER_DISTRIB)),
     FLG_WATER_ORIGIN = decode (l_FLG_WATER_ORIGIN_n,0,flg_water_origin_in, NVL (flg_water_origin_in, FLG_WATER_ORIGIN)),
     FLG_CONSERV = decode (l_FLG_CONSERV_n,0,flg_conserv_in, NVL (flg_conserv_in, FLG_CONSERV)),
     FLG_OWNER = decode (l_FLG_OWNER_n,0,flg_owner_in, NVL (flg_owner_in, FLG_OWNER)),
     FLG_HAB_TYPE = decode (l_FLG_HAB_TYPE_n,0,flg_hab_type_in, NVL (flg_hab_type_in, FLG_HAB_TYPE)),
     FLG_LIGHT = decode (l_FLG_LIGHT_n,0,flg_light_in, NVL (flg_light_in, FLG_LIGHT)),
     FLG_HEAT = decode (l_FLG_HEAT_n,0,flg_heat_in, NVL (flg_heat_in, FLG_HEAT)),
     ARQUITECT_BARRIER = decode (l_ARQUITECT_BARRIER_n,0,arquitect_barrier_in, NVL (arquitect_barrier_in, ARQUITECT_BARRIER)),
     DT_REGISTRY_TSTZ = decode (l_DT_REGISTRY_TSTZ_n,0,dt_registry_tstz_in, NVL (dt_registry_tstz_in, DT_REGISTRY_TSTZ)),
     FLG_HAB_LOCATION = decode (l_FLG_HAB_LOCATION_n,0,flg_hab_location_in, NVL (flg_hab_location_in, FLG_HAB_LOCATION)),
     DT_HOME_HIST = decode (l_DT_HOME_HIST_n,0,dt_home_hist_in, NVL (dt_home_hist_in, DT_HOME_HIST)),
     NOTES = decode (l_NOTES_n,0,notes_in, NVL (notes_in, NOTES)),
     CREATE_USER = decode (l_CREATE_USER_n,0,create_user_in, NVL (create_user_in, CREATE_USER)),
     CREATE_TIME = decode (l_CREATE_TIME_n,0,create_time_in, NVL (create_time_in, CREATE_TIME)),
     CREATE_INSTITUTION = decode (l_CREATE_INSTITUTION_n,0,create_institution_in, NVL (create_institution_in, CREATE_INSTITUTION)),
     UPDATE_USER = decode (l_UPDATE_USER_n,0,update_user_in, NVL (update_user_in, UPDATE_USER)),
     UPDATE_TIME = decode (l_UPDATE_TIME_n,0,update_time_in, NVL (update_time_in, UPDATE_TIME)),
     UPDATE_INSTITUTION = decode (l_UPDATE_INSTITUTION_n,0,update_institution_in, NVL (update_institution_in, UPDATE_INSTITUTION)),
     FLG_STATUS = decode (l_FLG_STATUS_n,0,flg_status_in, NVL (flg_status_in, FLG_STATUS)),
     ID_CANCEL_INFO_DET = decode (l_ID_CANCEL_INFO_DET_n,0,id_cancel_info_det_in, NVL (id_cancel_info_det_in, ID_CANCEL_INFO_DET)),
     FLG_WATER_TREATMENT = decode (l_FLG_WATER_TREATMENT_n,0,flg_water_treatment_in, NVL (flg_water_treatment_in, FLG_WATER_TREATMENT)),
     FLG_GARBAGE_DEST = decode (l_FLG_GARBAGE_DEST_n,0,flg_garbage_dest_in, NVL (flg_garbage_dest_in, FLG_GARBAGE_DEST)),
     FLG_BATH = decode (l_FLG_BATH_n,0,flg_bath_in, NVL (flg_bath_in, FLG_BATH)),
     FT_BATH = decode (l_FT_BATH_n,0,ft_bath_in, NVL (ft_bath_in, FT_BATH)),
     FT_WC_TYPE = decode (l_FT_WC_TYPE_n,0,ft_wc_type_in, NVL (ft_wc_type_in, FT_WC_TYPE)),
     FT_WC_LOCATION = decode (l_FT_WC_LOCATION_n,0,ft_wc_location_in, NVL (ft_wc_location_in, FT_WC_LOCATION)),
     FT_WC_OUT = decode (l_FT_WC_OUT_n,0,ft_wc_out_in, NVL (ft_wc_out_in, FT_WC_OUT)),
     FT_WATER_DISTRIB = decode (l_FT_WATER_DISTRIB_n,0,ft_water_distrib_in, NVL (ft_water_distrib_in, FT_WATER_DISTRIB)),
     FT_WATER_ORIGIN = decode (l_FT_WATER_ORIGIN_n,0,ft_water_origin_in, NVL (ft_water_origin_in, FT_WATER_ORIGIN)),
     FT_CONSERV = decode (l_FT_CONSERV_n,0,ft_conserv_in, NVL (ft_conserv_in, FT_CONSERV)),
     FT_OWNER = decode (l_FT_OWNER_n,0,ft_owner_in, NVL (ft_owner_in, FT_OWNER)),
     FT_GARBAGE_DEST = decode (l_FT_GARBAGE_DEST_n,0,ft_garbage_dest_in, NVL (ft_garbage_dest_in, FT_GARBAGE_DEST)),
     FT_HAB_TYPE = decode (l_FT_HAB_TYPE_n,0,ft_hab_type_in, NVL (ft_hab_type_in, FT_HAB_TYPE)),
     FT_WATER_TREATMENT = decode (l_FT_WATER_TREATMENT_n,0,ft_water_treatment_in, NVL (ft_water_treatment_in, FT_WATER_TREATMENT)),
     FT_LIGHT = decode (l_FT_LIGHT_n,0,ft_light_in, NVL (ft_light_in, FT_LIGHT)),
     FT_HEAT = decode (l_FT_HEAT_n,0,ft_heat_in, NVL (ft_heat_in, FT_HEAT)),
     FT_HAB_LOCATION = decode (l_FT_HAB_LOCATION_n,0,ft_hab_location_in, NVL (ft_hab_location_in, FT_HAB_LOCATION))
          WHERE
             ID_HOME_HIST = id_home_hist_in
         RETURNING ROWID BULK COLLECT INTO l_rows_out;


if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'HOME_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           IF l_name = 'HH_HOME_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_HOME'
               , value_in => id_home_in);
           END IF;
           IF l_name = 'HH_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           IF l_name = 'HH_PTFAM_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PAT_FAMILY'
               , value_in => id_pat_family_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;


   PROCEDURE upd (
      id_home_hist_in IN HOME_HIST.ID_HOME_HIST%TYPE,
      id_home_in IN HOME_HIST.ID_HOME%TYPE DEFAULT NULL,
      ID_HOME_nin IN BOOLEAN := TRUE,
      id_pat_family_in IN HOME_HIST.ID_PAT_FAMILY%TYPE DEFAULT NULL,
      ID_PAT_FAMILY_nin IN BOOLEAN := TRUE,
      id_professional_in IN HOME_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      num_rooms_in IN HOME_HIST.NUM_ROOMS%TYPE DEFAULT NULL,
      NUM_ROOMS_nin IN BOOLEAN := TRUE,
      num_bedrooms_in IN HOME_HIST.NUM_BEDROOMS%TYPE DEFAULT NULL,
      NUM_BEDROOMS_nin IN BOOLEAN := TRUE,
      num_person_room_in IN HOME_HIST.NUM_PERSON_ROOM%TYPE DEFAULT NULL,
      NUM_PERSON_ROOM_nin IN BOOLEAN := TRUE,
      flg_wc_type_in IN HOME_HIST.FLG_WC_TYPE%TYPE DEFAULT NULL,
      FLG_WC_TYPE_nin IN BOOLEAN := TRUE,
      flg_wc_location_in IN HOME_HIST.FLG_WC_LOCATION%TYPE DEFAULT NULL,
      FLG_WC_LOCATION_nin IN BOOLEAN := TRUE,
      flg_wc_out_in IN HOME_HIST.FLG_WC_OUT%TYPE DEFAULT NULL,
      FLG_WC_OUT_nin IN BOOLEAN := TRUE,
      flg_water_distrib_in IN HOME_HIST.FLG_WATER_DISTRIB%TYPE DEFAULT NULL,
      FLG_WATER_DISTRIB_nin IN BOOLEAN := TRUE,
      flg_water_origin_in IN HOME_HIST.FLG_WATER_ORIGIN%TYPE DEFAULT NULL,
      FLG_WATER_ORIGIN_nin IN BOOLEAN := TRUE,
      flg_conserv_in IN HOME_HIST.FLG_CONSERV%TYPE DEFAULT NULL,
      FLG_CONSERV_nin IN BOOLEAN := TRUE,
      flg_owner_in IN HOME_HIST.FLG_OWNER%TYPE DEFAULT NULL,
      FLG_OWNER_nin IN BOOLEAN := TRUE,
      flg_hab_type_in IN HOME_HIST.FLG_HAB_TYPE%TYPE DEFAULT NULL,
      FLG_HAB_TYPE_nin IN BOOLEAN := TRUE,
      flg_light_in IN HOME_HIST.FLG_LIGHT%TYPE DEFAULT NULL,
      FLG_LIGHT_nin IN BOOLEAN := TRUE,
      flg_heat_in IN HOME_HIST.FLG_HEAT%TYPE DEFAULT NULL,
      FLG_HEAT_nin IN BOOLEAN := TRUE,
      arquitect_barrier_in IN HOME_HIST.ARQUITECT_BARRIER%TYPE DEFAULT NULL,
      ARQUITECT_BARRIER_nin IN BOOLEAN := TRUE,
      dt_registry_tstz_in IN HOME_HIST.DT_REGISTRY_TSTZ%TYPE DEFAULT NULL,
      DT_REGISTRY_TSTZ_nin IN BOOLEAN := TRUE,
      flg_hab_location_in IN HOME_HIST.FLG_HAB_LOCATION%TYPE DEFAULT NULL,
      FLG_HAB_LOCATION_nin IN BOOLEAN := TRUE,
      dt_home_hist_in IN HOME_HIST.DT_HOME_HIST%TYPE DEFAULT NULL,
      DT_HOME_HIST_nin IN BOOLEAN := TRUE,
      notes_in IN HOME_HIST.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      create_user_in IN HOME_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN HOME_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN HOME_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN HOME_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN HOME_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN HOME_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_status_in IN HOME_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_cancel_info_det_in IN HOME_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      ID_CANCEL_INFO_DET_nin IN BOOLEAN := TRUE,
      flg_water_treatment_in IN HOME_HIST.FLG_WATER_TREATMENT%TYPE DEFAULT NULL,
      FLG_WATER_TREATMENT_nin IN BOOLEAN := TRUE,
      flg_garbage_dest_in IN HOME_HIST.FLG_GARBAGE_DEST%TYPE DEFAULT NULL,
      FLG_GARBAGE_DEST_nin IN BOOLEAN := TRUE,
      flg_bath_in IN HOME_HIST.FLG_BATH%TYPE DEFAULT NULL,
      FLG_BATH_nin IN BOOLEAN := TRUE,
      ft_bath_in IN HOME_HIST.FT_BATH%TYPE DEFAULT NULL,
      FT_BATH_nin IN BOOLEAN := TRUE,
      ft_wc_type_in IN HOME_HIST.FT_WC_TYPE%TYPE DEFAULT NULL,
      FT_WC_TYPE_nin IN BOOLEAN := TRUE,
      ft_wc_location_in IN HOME_HIST.FT_WC_LOCATION%TYPE DEFAULT NULL,
      FT_WC_LOCATION_nin IN BOOLEAN := TRUE,
      ft_wc_out_in IN HOME_HIST.FT_WC_OUT%TYPE DEFAULT NULL,
      FT_WC_OUT_nin IN BOOLEAN := TRUE,
      ft_water_distrib_in IN HOME_HIST.FT_WATER_DISTRIB%TYPE DEFAULT NULL,
      FT_WATER_DISTRIB_nin IN BOOLEAN := TRUE,
      ft_water_origin_in IN HOME_HIST.FT_WATER_ORIGIN%TYPE DEFAULT NULL,
      FT_WATER_ORIGIN_nin IN BOOLEAN := TRUE,
      ft_conserv_in IN HOME_HIST.FT_CONSERV%TYPE DEFAULT NULL,
      FT_CONSERV_nin IN BOOLEAN := TRUE,
      ft_owner_in IN HOME_HIST.FT_OWNER%TYPE DEFAULT NULL,
      FT_OWNER_nin IN BOOLEAN := TRUE,
      ft_garbage_dest_in IN HOME_HIST.FT_GARBAGE_DEST%TYPE DEFAULT NULL,
      FT_GARBAGE_DEST_nin IN BOOLEAN := TRUE,
      ft_hab_type_in IN HOME_HIST.FT_HAB_TYPE%TYPE DEFAULT NULL,
      FT_HAB_TYPE_nin IN BOOLEAN := TRUE,
      ft_water_treatment_in IN HOME_HIST.FT_WATER_TREATMENT%TYPE DEFAULT NULL,
      FT_WATER_TREATMENT_nin IN BOOLEAN := TRUE,
      ft_light_in IN HOME_HIST.FT_LIGHT%TYPE DEFAULT NULL,
      FT_LIGHT_nin IN BOOLEAN := TRUE,
      ft_heat_in IN HOME_HIST.FT_HEAT%TYPE DEFAULT NULL,
      FT_HEAT_nin IN BOOLEAN := TRUE,
      ft_hab_location_in IN HOME_HIST.FT_HAB_LOCATION%TYPE DEFAULT NULL,
      FT_HAB_LOCATION_nin IN BOOLEAN := TRUE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
     upd (
      id_home_hist_in => id_home_hist_in,
      id_home_in => id_home_in,
      ID_HOME_nin => ID_HOME_nin,
      id_pat_family_in => id_pat_family_in,
      ID_PAT_FAMILY_nin => ID_PAT_FAMILY_nin,
      id_professional_in => id_professional_in,
      ID_PROFESSIONAL_nin => ID_PROFESSIONAL_nin,
      num_rooms_in => num_rooms_in,
      NUM_ROOMS_nin => NUM_ROOMS_nin,
      num_bedrooms_in => num_bedrooms_in,
      NUM_BEDROOMS_nin => NUM_BEDROOMS_nin,
      num_person_room_in => num_person_room_in,
      NUM_PERSON_ROOM_nin => NUM_PERSON_ROOM_nin,
      flg_wc_type_in => flg_wc_type_in,
      FLG_WC_TYPE_nin => FLG_WC_TYPE_nin,
      flg_wc_location_in => flg_wc_location_in,
      FLG_WC_LOCATION_nin => FLG_WC_LOCATION_nin,
      flg_wc_out_in => flg_wc_out_in,
      FLG_WC_OUT_nin => FLG_WC_OUT_nin,
      flg_water_distrib_in => flg_water_distrib_in,
      FLG_WATER_DISTRIB_nin => FLG_WATER_DISTRIB_nin,
      flg_water_origin_in => flg_water_origin_in,
      FLG_WATER_ORIGIN_nin => FLG_WATER_ORIGIN_nin,
      flg_conserv_in => flg_conserv_in,
      FLG_CONSERV_nin => FLG_CONSERV_nin,
      flg_owner_in => flg_owner_in,
      FLG_OWNER_nin => FLG_OWNER_nin,
      flg_hab_type_in => flg_hab_type_in,
      FLG_HAB_TYPE_nin => FLG_HAB_TYPE_nin,
      flg_light_in => flg_light_in,
      FLG_LIGHT_nin => FLG_LIGHT_nin,
      flg_heat_in => flg_heat_in,
      FLG_HEAT_nin => FLG_HEAT_nin,
      arquitect_barrier_in => arquitect_barrier_in,
      ARQUITECT_BARRIER_nin => ARQUITECT_BARRIER_nin,
      dt_registry_tstz_in => dt_registry_tstz_in,
      DT_REGISTRY_TSTZ_nin => DT_REGISTRY_TSTZ_nin,
      flg_hab_location_in => flg_hab_location_in,
      FLG_HAB_LOCATION_nin => FLG_HAB_LOCATION_nin,
      dt_home_hist_in => dt_home_hist_in,
      DT_HOME_HIST_nin => DT_HOME_HIST_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      id_cancel_info_det_in => id_cancel_info_det_in,
      ID_CANCEL_INFO_DET_nin => ID_CANCEL_INFO_DET_nin,
      flg_water_treatment_in => flg_water_treatment_in,
      FLG_WATER_TREATMENT_nin => FLG_WATER_TREATMENT_nin,
      flg_garbage_dest_in => flg_garbage_dest_in,
      FLG_GARBAGE_DEST_nin => FLG_GARBAGE_DEST_nin,
      flg_bath_in => flg_bath_in,
      FLG_BATH_nin => FLG_BATH_nin,
      ft_bath_in => ft_bath_in,
      FT_BATH_nin => FT_BATH_nin,
      ft_wc_type_in => ft_wc_type_in,
      FT_WC_TYPE_nin => FT_WC_TYPE_nin,
      ft_wc_location_in => ft_wc_location_in,
      FT_WC_LOCATION_nin => FT_WC_LOCATION_nin,
      ft_wc_out_in => ft_wc_out_in,
      FT_WC_OUT_nin => FT_WC_OUT_nin,
      ft_water_distrib_in => ft_water_distrib_in,
      FT_WATER_DISTRIB_nin => FT_WATER_DISTRIB_nin,
      ft_water_origin_in => ft_water_origin_in,
      FT_WATER_ORIGIN_nin => FT_WATER_ORIGIN_nin,
      ft_conserv_in => ft_conserv_in,
      FT_CONSERV_nin => FT_CONSERV_nin,
      ft_owner_in => ft_owner_in,
      FT_OWNER_nin => FT_OWNER_nin,
      ft_garbage_dest_in => ft_garbage_dest_in,
      FT_GARBAGE_DEST_nin => FT_GARBAGE_DEST_nin,
      ft_hab_type_in => ft_hab_type_in,
      FT_HAB_TYPE_nin => FT_HAB_TYPE_nin,
      ft_water_treatment_in => ft_water_treatment_in,
      FT_WATER_TREATMENT_nin => FT_WATER_TREATMENT_nin,
      ft_light_in => ft_light_in,
      FT_LIGHT_nin => FT_LIGHT_nin,
      ft_heat_in => ft_heat_in,
      FT_HEAT_nin => FT_HEAT_nin,
      ft_hab_location_in => ft_hab_location_in,
      FT_HAB_LOCATION_nin => FT_HAB_LOCATION_nin,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

PROCEDURE upd (
      id_home_in IN HOME_HIST.ID_HOME%TYPE DEFAULT NULL,
      ID_HOME_nin IN BOOLEAN := TRUE,
      id_pat_family_in IN HOME_HIST.ID_PAT_FAMILY%TYPE DEFAULT NULL,
      ID_PAT_FAMILY_nin IN BOOLEAN := TRUE,
      id_professional_in IN HOME_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      num_rooms_in IN HOME_HIST.NUM_ROOMS%TYPE DEFAULT NULL,
      NUM_ROOMS_nin IN BOOLEAN := TRUE,
      num_bedrooms_in IN HOME_HIST.NUM_BEDROOMS%TYPE DEFAULT NULL,
      NUM_BEDROOMS_nin IN BOOLEAN := TRUE,
      num_person_room_in IN HOME_HIST.NUM_PERSON_ROOM%TYPE DEFAULT NULL,
      NUM_PERSON_ROOM_nin IN BOOLEAN := TRUE,
      flg_wc_type_in IN HOME_HIST.FLG_WC_TYPE%TYPE DEFAULT NULL,
      FLG_WC_TYPE_nin IN BOOLEAN := TRUE,
      flg_wc_location_in IN HOME_HIST.FLG_WC_LOCATION%TYPE DEFAULT NULL,
      FLG_WC_LOCATION_nin IN BOOLEAN := TRUE,
      flg_wc_out_in IN HOME_HIST.FLG_WC_OUT%TYPE DEFAULT NULL,
      FLG_WC_OUT_nin IN BOOLEAN := TRUE,
      flg_water_distrib_in IN HOME_HIST.FLG_WATER_DISTRIB%TYPE DEFAULT NULL,
      FLG_WATER_DISTRIB_nin IN BOOLEAN := TRUE,
      flg_water_origin_in IN HOME_HIST.FLG_WATER_ORIGIN%TYPE DEFAULT NULL,
      FLG_WATER_ORIGIN_nin IN BOOLEAN := TRUE,
      flg_conserv_in IN HOME_HIST.FLG_CONSERV%TYPE DEFAULT NULL,
      FLG_CONSERV_nin IN BOOLEAN := TRUE,
      flg_owner_in IN HOME_HIST.FLG_OWNER%TYPE DEFAULT NULL,
      FLG_OWNER_nin IN BOOLEAN := TRUE,
      flg_hab_type_in IN HOME_HIST.FLG_HAB_TYPE%TYPE DEFAULT NULL,
      FLG_HAB_TYPE_nin IN BOOLEAN := TRUE,
      flg_light_in IN HOME_HIST.FLG_LIGHT%TYPE DEFAULT NULL,
      FLG_LIGHT_nin IN BOOLEAN := TRUE,
      flg_heat_in IN HOME_HIST.FLG_HEAT%TYPE DEFAULT NULL,
      FLG_HEAT_nin IN BOOLEAN := TRUE,
      arquitect_barrier_in IN HOME_HIST.ARQUITECT_BARRIER%TYPE DEFAULT NULL,
      ARQUITECT_BARRIER_nin IN BOOLEAN := TRUE,
      dt_registry_tstz_in IN HOME_HIST.DT_REGISTRY_TSTZ%TYPE DEFAULT NULL,
      DT_REGISTRY_TSTZ_nin IN BOOLEAN := TRUE,
      flg_hab_location_in IN HOME_HIST.FLG_HAB_LOCATION%TYPE DEFAULT NULL,
      FLG_HAB_LOCATION_nin IN BOOLEAN := TRUE,
      dt_home_hist_in IN HOME_HIST.DT_HOME_HIST%TYPE DEFAULT NULL,
      DT_HOME_HIST_nin IN BOOLEAN := TRUE,
      notes_in IN HOME_HIST.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      create_user_in IN HOME_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN HOME_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN HOME_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN HOME_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN HOME_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN HOME_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_status_in IN HOME_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_cancel_info_det_in IN HOME_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      ID_CANCEL_INFO_DET_nin IN BOOLEAN := TRUE,
      flg_water_treatment_in IN HOME_HIST.FLG_WATER_TREATMENT%TYPE DEFAULT NULL,
      FLG_WATER_TREATMENT_nin IN BOOLEAN := TRUE,
      flg_garbage_dest_in IN HOME_HIST.FLG_GARBAGE_DEST%TYPE DEFAULT NULL,
      FLG_GARBAGE_DEST_nin IN BOOLEAN := TRUE,
      flg_bath_in IN HOME_HIST.FLG_BATH%TYPE DEFAULT NULL,
      FLG_BATH_nin IN BOOLEAN := TRUE,
      ft_bath_in IN HOME_HIST.FT_BATH%TYPE DEFAULT NULL,
      FT_BATH_nin IN BOOLEAN := TRUE,
      ft_wc_type_in IN HOME_HIST.FT_WC_TYPE%TYPE DEFAULT NULL,
      FT_WC_TYPE_nin IN BOOLEAN := TRUE,
      ft_wc_location_in IN HOME_HIST.FT_WC_LOCATION%TYPE DEFAULT NULL,
      FT_WC_LOCATION_nin IN BOOLEAN := TRUE,
      ft_wc_out_in IN HOME_HIST.FT_WC_OUT%TYPE DEFAULT NULL,
      FT_WC_OUT_nin IN BOOLEAN := TRUE,
      ft_water_distrib_in IN HOME_HIST.FT_WATER_DISTRIB%TYPE DEFAULT NULL,
      FT_WATER_DISTRIB_nin IN BOOLEAN := TRUE,
      ft_water_origin_in IN HOME_HIST.FT_WATER_ORIGIN%TYPE DEFAULT NULL,
      FT_WATER_ORIGIN_nin IN BOOLEAN := TRUE,
      ft_conserv_in IN HOME_HIST.FT_CONSERV%TYPE DEFAULT NULL,
      FT_CONSERV_nin IN BOOLEAN := TRUE,
      ft_owner_in IN HOME_HIST.FT_OWNER%TYPE DEFAULT NULL,
      FT_OWNER_nin IN BOOLEAN := TRUE,
      ft_garbage_dest_in IN HOME_HIST.FT_GARBAGE_DEST%TYPE DEFAULT NULL,
      FT_GARBAGE_DEST_nin IN BOOLEAN := TRUE,
      ft_hab_type_in IN HOME_HIST.FT_HAB_TYPE%TYPE DEFAULT NULL,
      FT_HAB_TYPE_nin IN BOOLEAN := TRUE,
      ft_water_treatment_in IN HOME_HIST.FT_WATER_TREATMENT%TYPE DEFAULT NULL,
      FT_WATER_TREATMENT_nin IN BOOLEAN := TRUE,
      ft_light_in IN HOME_HIST.FT_LIGHT%TYPE DEFAULT NULL,
      FT_LIGHT_nin IN BOOLEAN := TRUE,
      ft_heat_in IN HOME_HIST.FT_HEAT%TYPE DEFAULT NULL,
      FT_HEAT_nin IN BOOLEAN := TRUE,
      ft_hab_location_in IN HOME_HIST.FT_HAB_LOCATION%TYPE DEFAULT NULL,
      FT_HAB_LOCATION_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   l_sql VARCHAR2(32767);
   l_rows_out TABLE_VARCHAR;
   l_ID_HOME_n NUMBER(1);
   l_ID_PAT_FAMILY_n NUMBER(1);
   l_ID_PROFESSIONAL_n NUMBER(1);
   l_NUM_ROOMS_n NUMBER(1);
   l_NUM_BEDROOMS_n NUMBER(1);
   l_NUM_PERSON_ROOM_n NUMBER(1);
   l_FLG_WC_TYPE_n NUMBER(1);
   l_FLG_WC_LOCATION_n NUMBER(1);
   l_FLG_WC_OUT_n NUMBER(1);
   l_FLG_WATER_DISTRIB_n NUMBER(1);
   l_FLG_WATER_ORIGIN_n NUMBER(1);
   l_FLG_CONSERV_n NUMBER(1);
   l_FLG_OWNER_n NUMBER(1);
   l_FLG_HAB_TYPE_n NUMBER(1);
   l_FLG_LIGHT_n NUMBER(1);
   l_FLG_HEAT_n NUMBER(1);
   l_ARQUITECT_BARRIER_n NUMBER(1);
   l_DT_REGISTRY_TSTZ_n NUMBER(1);
   l_FLG_HAB_LOCATION_n NUMBER(1);
   l_DT_HOME_HIST_n NUMBER(1);
   l_NOTES_n NUMBER(1);
   l_CREATE_USER_n NUMBER(1);
   l_CREATE_TIME_n NUMBER(1);
   l_CREATE_INSTITUTION_n NUMBER(1);
   l_UPDATE_USER_n NUMBER(1);
   l_UPDATE_TIME_n NUMBER(1);
   l_UPDATE_INSTITUTION_n NUMBER(1);
   l_FLG_STATUS_n NUMBER(1);
   l_ID_CANCEL_INFO_DET_n NUMBER(1);
   l_FLG_WATER_TREATMENT_n NUMBER(1);
   l_FLG_GARBAGE_DEST_n NUMBER(1);
   l_FLG_BATH_n NUMBER(1);
   l_FT_BATH_n NUMBER(1);
   l_FT_WC_TYPE_n NUMBER(1);
   l_FT_WC_LOCATION_n NUMBER(1);
   l_FT_WC_OUT_n NUMBER(1);
   l_FT_WATER_DISTRIB_n NUMBER(1);
   l_FT_WATER_ORIGIN_n NUMBER(1);
   l_FT_CONSERV_n NUMBER(1);
   l_FT_OWNER_n NUMBER(1);
   l_FT_GARBAGE_DEST_n NUMBER(1);
   l_FT_HAB_TYPE_n NUMBER(1);
   l_FT_WATER_TREATMENT_n NUMBER(1);
   l_FT_LIGHT_n NUMBER(1);
   l_FT_HEAT_n NUMBER(1);
   l_FT_HAB_LOCATION_n NUMBER(1);
      id_home_hist_in HOME_HIST.ID_HOME_HIST%TYPE;
   BEGIN



      l_ID_HOME_n := sys.diutil.bool_to_int(ID_HOME_nin);
      l_ID_PAT_FAMILY_n := sys.diutil.bool_to_int(ID_PAT_FAMILY_nin);
      l_ID_PROFESSIONAL_n := sys.diutil.bool_to_int(ID_PROFESSIONAL_nin);
      l_NUM_ROOMS_n := sys.diutil.bool_to_int(NUM_ROOMS_nin);
      l_NUM_BEDROOMS_n := sys.diutil.bool_to_int(NUM_BEDROOMS_nin);
      l_NUM_PERSON_ROOM_n := sys.diutil.bool_to_int(NUM_PERSON_ROOM_nin);
      l_FLG_WC_TYPE_n := sys.diutil.bool_to_int(FLG_WC_TYPE_nin);
      l_FLG_WC_LOCATION_n := sys.diutil.bool_to_int(FLG_WC_LOCATION_nin);
      l_FLG_WC_OUT_n := sys.diutil.bool_to_int(FLG_WC_OUT_nin);
      l_FLG_WATER_DISTRIB_n := sys.diutil.bool_to_int(FLG_WATER_DISTRIB_nin);
      l_FLG_WATER_ORIGIN_n := sys.diutil.bool_to_int(FLG_WATER_ORIGIN_nin);
      l_FLG_CONSERV_n := sys.diutil.bool_to_int(FLG_CONSERV_nin);
      l_FLG_OWNER_n := sys.diutil.bool_to_int(FLG_OWNER_nin);
      l_FLG_HAB_TYPE_n := sys.diutil.bool_to_int(FLG_HAB_TYPE_nin);
      l_FLG_LIGHT_n := sys.diutil.bool_to_int(FLG_LIGHT_nin);
      l_FLG_HEAT_n := sys.diutil.bool_to_int(FLG_HEAT_nin);
      l_ARQUITECT_BARRIER_n := sys.diutil.bool_to_int(ARQUITECT_BARRIER_nin);
      l_DT_REGISTRY_TSTZ_n := sys.diutil.bool_to_int(DT_REGISTRY_TSTZ_nin);
      l_FLG_HAB_LOCATION_n := sys.diutil.bool_to_int(FLG_HAB_LOCATION_nin);
      l_DT_HOME_HIST_n := sys.diutil.bool_to_int(DT_HOME_HIST_nin);
      l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
      l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
      l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
      l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
      l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
      l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
      l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
      l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
      l_ID_CANCEL_INFO_DET_n := sys.diutil.bool_to_int(ID_CANCEL_INFO_DET_nin);
      l_FLG_WATER_TREATMENT_n := sys.diutil.bool_to_int(FLG_WATER_TREATMENT_nin);
      l_FLG_GARBAGE_DEST_n := sys.diutil.bool_to_int(FLG_GARBAGE_DEST_nin);
      l_FLG_BATH_n := sys.diutil.bool_to_int(FLG_BATH_nin);
      l_FT_BATH_n := sys.diutil.bool_to_int(FT_BATH_nin);
      l_FT_WC_TYPE_n := sys.diutil.bool_to_int(FT_WC_TYPE_nin);
      l_FT_WC_LOCATION_n := sys.diutil.bool_to_int(FT_WC_LOCATION_nin);
      l_FT_WC_OUT_n := sys.diutil.bool_to_int(FT_WC_OUT_nin);
      l_FT_WATER_DISTRIB_n := sys.diutil.bool_to_int(FT_WATER_DISTRIB_nin);
      l_FT_WATER_ORIGIN_n := sys.diutil.bool_to_int(FT_WATER_ORIGIN_nin);
      l_FT_CONSERV_n := sys.diutil.bool_to_int(FT_CONSERV_nin);
      l_FT_OWNER_n := sys.diutil.bool_to_int(FT_OWNER_nin);
      l_FT_GARBAGE_DEST_n := sys.diutil.bool_to_int(FT_GARBAGE_DEST_nin);
      l_FT_HAB_TYPE_n := sys.diutil.bool_to_int(FT_HAB_TYPE_nin);
      l_FT_WATER_TREATMENT_n := sys.diutil.bool_to_int(FT_WATER_TREATMENT_nin);
      l_FT_LIGHT_n := sys.diutil.bool_to_int(FT_LIGHT_nin);
      l_FT_HEAT_n := sys.diutil.bool_to_int(FT_HEAT_nin);
      l_FT_HAB_LOCATION_n := sys.diutil.bool_to_int(FT_HAB_LOCATION_nin);



l_sql := 'UPDATE HOME_HIST SET '
     || ' ID_HOME = decode (' || l_ID_HOME_n || ',0,:id_home_in, NVL (:id_home_in, ID_HOME)) '|| ','
     || ' ID_PAT_FAMILY = decode (' || l_ID_PAT_FAMILY_n || ',0,:id_pat_family_in, NVL (:id_pat_family_in, ID_PAT_FAMILY)) '|| ','
     || ' ID_PROFESSIONAL = decode (' || l_ID_PROFESSIONAL_n || ',0,:id_professional_in, NVL (:id_professional_in, ID_PROFESSIONAL)) '|| ','
     || ' NUM_ROOMS = decode (' || l_NUM_ROOMS_n || ',0,:num_rooms_in, NVL (:num_rooms_in, NUM_ROOMS)) '|| ','
     || ' NUM_BEDROOMS = decode (' || l_NUM_BEDROOMS_n || ',0,:num_bedrooms_in, NVL (:num_bedrooms_in, NUM_BEDROOMS)) '|| ','
     || ' NUM_PERSON_ROOM = decode (' || l_NUM_PERSON_ROOM_n || ',0,:num_person_room_in, NVL (:num_person_room_in, NUM_PERSON_ROOM)) '|| ','
     || ' FLG_WC_TYPE = decode (' || l_FLG_WC_TYPE_n || ',0,:flg_wc_type_in, NVL (:flg_wc_type_in, FLG_WC_TYPE)) '|| ','
     || ' FLG_WC_LOCATION = decode (' || l_FLG_WC_LOCATION_n || ',0,:flg_wc_location_in, NVL (:flg_wc_location_in, FLG_WC_LOCATION)) '|| ','
     || ' FLG_WC_OUT = decode (' || l_FLG_WC_OUT_n || ',0,:flg_wc_out_in, NVL (:flg_wc_out_in, FLG_WC_OUT)) '|| ','
     || ' FLG_WATER_DISTRIB = decode (' || l_FLG_WATER_DISTRIB_n || ',0,:flg_water_distrib_in, NVL (:flg_water_distrib_in, FLG_WATER_DISTRIB)) '|| ','
     || ' FLG_WATER_ORIGIN = decode (' || l_FLG_WATER_ORIGIN_n || ',0,:flg_water_origin_in, NVL (:flg_water_origin_in, FLG_WATER_ORIGIN)) '|| ','
     || ' FLG_CONSERV = decode (' || l_FLG_CONSERV_n || ',0,:flg_conserv_in, NVL (:flg_conserv_in, FLG_CONSERV)) '|| ','
     || ' FLG_OWNER = decode (' || l_FLG_OWNER_n || ',0,:flg_owner_in, NVL (:flg_owner_in, FLG_OWNER)) '|| ','
     || ' FLG_HAB_TYPE = decode (' || l_FLG_HAB_TYPE_n || ',0,:flg_hab_type_in, NVL (:flg_hab_type_in, FLG_HAB_TYPE)) '|| ','
     || ' FLG_LIGHT = decode (' || l_FLG_LIGHT_n || ',0,:flg_light_in, NVL (:flg_light_in, FLG_LIGHT)) '|| ','
     || ' FLG_HEAT = decode (' || l_FLG_HEAT_n || ',0,:flg_heat_in, NVL (:flg_heat_in, FLG_HEAT)) '|| ','
     || ' ARQUITECT_BARRIER = decode (' || l_ARQUITECT_BARRIER_n || ',0,:arquitect_barrier_in, NVL (:arquitect_barrier_in, ARQUITECT_BARRIER)) '|| ','
     || ' DT_REGISTRY_TSTZ = decode (' || l_DT_REGISTRY_TSTZ_n || ',0,:dt_registry_tstz_in, NVL (:dt_registry_tstz_in, DT_REGISTRY_TSTZ)) '|| ','
     || ' FLG_HAB_LOCATION = decode (' || l_FLG_HAB_LOCATION_n || ',0,:flg_hab_location_in, NVL (:flg_hab_location_in, FLG_HAB_LOCATION)) '|| ','
     || ' DT_HOME_HIST = decode (' || l_DT_HOME_HIST_n || ',0,:dt_home_hist_in, NVL (:dt_home_hist_in, DT_HOME_HIST)) '|| ','
     || ' NOTES = decode (' || l_NOTES_n || ',0,:notes_in, NVL (:notes_in, NOTES)) '|| ','
     || ' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:create_user_in, NVL (:create_user_in, CREATE_USER)) '|| ','
     || ' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:create_time_in, NVL (:create_time_in, CREATE_TIME)) '|| ','
     || ' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:create_institution_in, NVL (:create_institution_in, CREATE_INSTITUTION)) '|| ','
     || ' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:update_user_in, NVL (:update_user_in, UPDATE_USER)) '|| ','
     || ' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:update_time_in, NVL (:update_time_in, UPDATE_TIME)) '|| ','
     || ' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:update_institution_in, NVL (:update_institution_in, UPDATE_INSTITUTION)) '|| ','
     || ' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:flg_status_in, NVL (:flg_status_in, FLG_STATUS)) '|| ','
     || ' ID_CANCEL_INFO_DET = decode (' || l_ID_CANCEL_INFO_DET_n || ',0,:id_cancel_info_det_in, NVL (:id_cancel_info_det_in, ID_CANCEL_INFO_DET)) '|| ','
     || ' FLG_WATER_TREATMENT = decode (' || l_FLG_WATER_TREATMENT_n || ',0,:flg_water_treatment_in, NVL (:flg_water_treatment_in, FLG_WATER_TREATMENT)) '|| ','
     || ' FLG_GARBAGE_DEST = decode (' || l_FLG_GARBAGE_DEST_n || ',0,:flg_garbage_dest_in, NVL (:flg_garbage_dest_in, FLG_GARBAGE_DEST)) '|| ','
     || ' FLG_BATH = decode (' || l_FLG_BATH_n || ',0,:flg_bath_in, NVL (:flg_bath_in, FLG_BATH)) '|| ','
     || ' FT_BATH = decode (' || l_FT_BATH_n || ',0,:ft_bath_in, NVL (:ft_bath_in, FT_BATH)) '|| ','
     || ' FT_WC_TYPE = decode (' || l_FT_WC_TYPE_n || ',0,:ft_wc_type_in, NVL (:ft_wc_type_in, FT_WC_TYPE)) '|| ','
     || ' FT_WC_LOCATION = decode (' || l_FT_WC_LOCATION_n || ',0,:ft_wc_location_in, NVL (:ft_wc_location_in, FT_WC_LOCATION)) '|| ','
     || ' FT_WC_OUT = decode (' || l_FT_WC_OUT_n || ',0,:ft_wc_out_in, NVL (:ft_wc_out_in, FT_WC_OUT)) '|| ','
     || ' FT_WATER_DISTRIB = decode (' || l_FT_WATER_DISTRIB_n || ',0,:ft_water_distrib_in, NVL (:ft_water_distrib_in, FT_WATER_DISTRIB)) '|| ','
     || ' FT_WATER_ORIGIN = decode (' || l_FT_WATER_ORIGIN_n || ',0,:ft_water_origin_in, NVL (:ft_water_origin_in, FT_WATER_ORIGIN)) '|| ','
     || ' FT_CONSERV = decode (' || l_FT_CONSERV_n || ',0,:ft_conserv_in, NVL (:ft_conserv_in, FT_CONSERV)) '|| ','
     || ' FT_OWNER = decode (' || l_FT_OWNER_n || ',0,:ft_owner_in, NVL (:ft_owner_in, FT_OWNER)) '|| ','
     || ' FT_GARBAGE_DEST = decode (' || l_FT_GARBAGE_DEST_n || ',0,:ft_garbage_dest_in, NVL (:ft_garbage_dest_in, FT_GARBAGE_DEST)) '|| ','
     || ' FT_HAB_TYPE = decode (' || l_FT_HAB_TYPE_n || ',0,:ft_hab_type_in, NVL (:ft_hab_type_in, FT_HAB_TYPE)) '|| ','
     || ' FT_WATER_TREATMENT = decode (' || l_FT_WATER_TREATMENT_n || ',0,:ft_water_treatment_in, NVL (:ft_water_treatment_in, FT_WATER_TREATMENT)) '|| ','
     || ' FT_LIGHT = decode (' || l_FT_LIGHT_n || ',0,:ft_light_in, NVL (:ft_light_in, FT_LIGHT)) '|| ','
     || ' FT_HEAT = decode (' || l_FT_HEAT_n || ',0,:ft_heat_in, NVL (:ft_heat_in, FT_HEAT)) '|| ','
     || ' FT_HAB_LOCATION = decode (' || l_FT_HAB_LOCATION_n || ',0,:ft_hab_location_in, NVL (:ft_hab_location_in, FT_HAB_LOCATION)) '
      || ' where ' || nvl(where_in,'(1=1)')
      || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';




execute immediate 'BEGIN ' || l_sql || '; END;' using in
     id_home_in,
     id_pat_family_in,
     id_professional_in,
     num_rooms_in,
     num_bedrooms_in,
     num_person_room_in,
     flg_wc_type_in,
     flg_wc_location_in,
     flg_wc_out_in,
     flg_water_distrib_in,
     flg_water_origin_in,
     flg_conserv_in,
     flg_owner_in,
     flg_hab_type_in,
     flg_light_in,
     flg_heat_in,
     arquitect_barrier_in,
     dt_registry_tstz_in,
     flg_hab_location_in,
     dt_home_hist_in,
     notes_in,
     create_user_in,
     create_time_in,
     create_institution_in,
     update_user_in,
     update_time_in,
     update_institution_in,
     flg_status_in,
     id_cancel_info_det_in,
     flg_water_treatment_in,
     flg_garbage_dest_in,
     flg_bath_in,
     ft_bath_in,
     ft_wc_type_in,
     ft_wc_location_in,
     ft_wc_out_in,
     ft_water_distrib_in,
     ft_water_origin_in,
     ft_conserv_in,
     ft_owner_in,
     ft_garbage_dest_in,
     ft_hab_type_in,
     ft_water_treatment_in,
     ft_light_in,
     ft_heat_in,
     ft_hab_location_in,
    OUT l_rows_out;

if(rows_out is null)
then
rows_out := table_varchar();
end if;

rows_out :=  rows_out MULTISET UNION DISTINCT l_rows_out;

   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF FALSE THEN NULL; -- Placeholder in case no unique indexes
           ELSE
              pk_alert_exceptions.raise_error (
                    error_name_in => 'DUPLICATE-VALUE'
                    ,name1_in => 'OWNER'
                    ,value1_in => l_owner
                    ,name2_in => 'CONSTRAINT_NAME'
                    ,value2_in => l_name
                    ,name3_in => 'TABLE_NAME'
                    ,value3_in => 'HOME_HIST');
           END IF;
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           IF l_name = 'HH_HOME_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_HOME'
               , value_in => id_home_in);
           END IF;
           IF l_name = 'HH_PROF_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PROFESSIONAL'
               , value_in => id_professional_in);
           END IF;
           IF l_name = 'HH_PTFAM_FK'
           THEN
              -- Add a context value for each column
              pk_alert_exceptions.add_context (
                 err_instance_id_in => l_id
               , name_in => 'ID_PAT_FAMILY'
               , value_in => id_pat_family_in);
           END IF;
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END upd;





PROCEDURE upd (
      id_home_in IN HOME_HIST.ID_HOME%TYPE DEFAULT NULL,
      ID_HOME_nin IN BOOLEAN := TRUE,
      id_pat_family_in IN HOME_HIST.ID_PAT_FAMILY%TYPE DEFAULT NULL,
      ID_PAT_FAMILY_nin IN BOOLEAN := TRUE,
      id_professional_in IN HOME_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
      num_rooms_in IN HOME_HIST.NUM_ROOMS%TYPE DEFAULT NULL,
      NUM_ROOMS_nin IN BOOLEAN := TRUE,
      num_bedrooms_in IN HOME_HIST.NUM_BEDROOMS%TYPE DEFAULT NULL,
      NUM_BEDROOMS_nin IN BOOLEAN := TRUE,
      num_person_room_in IN HOME_HIST.NUM_PERSON_ROOM%TYPE DEFAULT NULL,
      NUM_PERSON_ROOM_nin IN BOOLEAN := TRUE,
      flg_wc_type_in IN HOME_HIST.FLG_WC_TYPE%TYPE DEFAULT NULL,
      FLG_WC_TYPE_nin IN BOOLEAN := TRUE,
      flg_wc_location_in IN HOME_HIST.FLG_WC_LOCATION%TYPE DEFAULT NULL,
      FLG_WC_LOCATION_nin IN BOOLEAN := TRUE,
      flg_wc_out_in IN HOME_HIST.FLG_WC_OUT%TYPE DEFAULT NULL,
      FLG_WC_OUT_nin IN BOOLEAN := TRUE,
      flg_water_distrib_in IN HOME_HIST.FLG_WATER_DISTRIB%TYPE DEFAULT NULL,
      FLG_WATER_DISTRIB_nin IN BOOLEAN := TRUE,
      flg_water_origin_in IN HOME_HIST.FLG_WATER_ORIGIN%TYPE DEFAULT NULL,
      FLG_WATER_ORIGIN_nin IN BOOLEAN := TRUE,
      flg_conserv_in IN HOME_HIST.FLG_CONSERV%TYPE DEFAULT NULL,
      FLG_CONSERV_nin IN BOOLEAN := TRUE,
      flg_owner_in IN HOME_HIST.FLG_OWNER%TYPE DEFAULT NULL,
      FLG_OWNER_nin IN BOOLEAN := TRUE,
      flg_hab_type_in IN HOME_HIST.FLG_HAB_TYPE%TYPE DEFAULT NULL,
      FLG_HAB_TYPE_nin IN BOOLEAN := TRUE,
      flg_light_in IN HOME_HIST.FLG_LIGHT%TYPE DEFAULT NULL,
      FLG_LIGHT_nin IN BOOLEAN := TRUE,
      flg_heat_in IN HOME_HIST.FLG_HEAT%TYPE DEFAULT NULL,
      FLG_HEAT_nin IN BOOLEAN := TRUE,
      arquitect_barrier_in IN HOME_HIST.ARQUITECT_BARRIER%TYPE DEFAULT NULL,
      ARQUITECT_BARRIER_nin IN BOOLEAN := TRUE,
      dt_registry_tstz_in IN HOME_HIST.DT_REGISTRY_TSTZ%TYPE DEFAULT NULL,
      DT_REGISTRY_TSTZ_nin IN BOOLEAN := TRUE,
      flg_hab_location_in IN HOME_HIST.FLG_HAB_LOCATION%TYPE DEFAULT NULL,
      FLG_HAB_LOCATION_nin IN BOOLEAN := TRUE,
      dt_home_hist_in IN HOME_HIST.DT_HOME_HIST%TYPE DEFAULT NULL,
      DT_HOME_HIST_nin IN BOOLEAN := TRUE,
      notes_in IN HOME_HIST.NOTES%TYPE DEFAULT NULL,
      NOTES_nin IN BOOLEAN := TRUE,
      create_user_in IN HOME_HIST.CREATE_USER%TYPE DEFAULT NULL,
      CREATE_USER_nin IN BOOLEAN := TRUE,
      create_time_in IN HOME_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      CREATE_TIME_nin IN BOOLEAN := TRUE,
      create_institution_in IN HOME_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      update_user_in IN HOME_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      UPDATE_USER_nin IN BOOLEAN := TRUE,
      update_time_in IN HOME_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      UPDATE_TIME_nin IN BOOLEAN := TRUE,
      update_institution_in IN HOME_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
      flg_status_in IN HOME_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      FLG_STATUS_nin IN BOOLEAN := TRUE,
      id_cancel_info_det_in IN HOME_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      ID_CANCEL_INFO_DET_nin IN BOOLEAN := TRUE,
      flg_water_treatment_in IN HOME_HIST.FLG_WATER_TREATMENT%TYPE DEFAULT NULL,
      FLG_WATER_TREATMENT_nin IN BOOLEAN := TRUE,
      flg_garbage_dest_in IN HOME_HIST.FLG_GARBAGE_DEST%TYPE DEFAULT NULL,
      FLG_GARBAGE_DEST_nin IN BOOLEAN := TRUE,
      flg_bath_in IN HOME_HIST.FLG_BATH%TYPE DEFAULT NULL,
      FLG_BATH_nin IN BOOLEAN := TRUE,
      ft_bath_in IN HOME_HIST.FT_BATH%TYPE DEFAULT NULL,
      FT_BATH_nin IN BOOLEAN := TRUE,
      ft_wc_type_in IN HOME_HIST.FT_WC_TYPE%TYPE DEFAULT NULL,
      FT_WC_TYPE_nin IN BOOLEAN := TRUE,
      ft_wc_location_in IN HOME_HIST.FT_WC_LOCATION%TYPE DEFAULT NULL,
      FT_WC_LOCATION_nin IN BOOLEAN := TRUE,
      ft_wc_out_in IN HOME_HIST.FT_WC_OUT%TYPE DEFAULT NULL,
      FT_WC_OUT_nin IN BOOLEAN := TRUE,
      ft_water_distrib_in IN HOME_HIST.FT_WATER_DISTRIB%TYPE DEFAULT NULL,
      FT_WATER_DISTRIB_nin IN BOOLEAN := TRUE,
      ft_water_origin_in IN HOME_HIST.FT_WATER_ORIGIN%TYPE DEFAULT NULL,
      FT_WATER_ORIGIN_nin IN BOOLEAN := TRUE,
      ft_conserv_in IN HOME_HIST.FT_CONSERV%TYPE DEFAULT NULL,
      FT_CONSERV_nin IN BOOLEAN := TRUE,
      ft_owner_in IN HOME_HIST.FT_OWNER%TYPE DEFAULT NULL,
      FT_OWNER_nin IN BOOLEAN := TRUE,
      ft_garbage_dest_in IN HOME_HIST.FT_GARBAGE_DEST%TYPE DEFAULT NULL,
      FT_GARBAGE_DEST_nin IN BOOLEAN := TRUE,
      ft_hab_type_in IN HOME_HIST.FT_HAB_TYPE%TYPE DEFAULT NULL,
      FT_HAB_TYPE_nin IN BOOLEAN := TRUE,
      ft_water_treatment_in IN HOME_HIST.FT_WATER_TREATMENT%TYPE DEFAULT NULL,
      FT_WATER_TREATMENT_nin IN BOOLEAN := TRUE,
      ft_light_in IN HOME_HIST.FT_LIGHT%TYPE DEFAULT NULL,
      FT_LIGHT_nin IN BOOLEAN := TRUE,
      ft_heat_in IN HOME_HIST.FT_HEAT%TYPE DEFAULT NULL,
      FT_HEAT_nin IN BOOLEAN := TRUE,
      ft_hab_location_in IN HOME_HIST.FT_HAB_LOCATION%TYPE DEFAULT NULL,
      FT_HAB_LOCATION_nin IN BOOLEAN := TRUE,
    where_in varchar2,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      id_home_in => id_home_in,
      ID_HOME_nin => ID_HOME_nin,
      id_pat_family_in => id_pat_family_in,
      ID_PAT_FAMILY_nin => ID_PAT_FAMILY_nin,
      id_professional_in => id_professional_in,
      ID_PROFESSIONAL_nin => ID_PROFESSIONAL_nin,
      num_rooms_in => num_rooms_in,
      NUM_ROOMS_nin => NUM_ROOMS_nin,
      num_bedrooms_in => num_bedrooms_in,
      NUM_BEDROOMS_nin => NUM_BEDROOMS_nin,
      num_person_room_in => num_person_room_in,
      NUM_PERSON_ROOM_nin => NUM_PERSON_ROOM_nin,
      flg_wc_type_in => flg_wc_type_in,
      FLG_WC_TYPE_nin => FLG_WC_TYPE_nin,
      flg_wc_location_in => flg_wc_location_in,
      FLG_WC_LOCATION_nin => FLG_WC_LOCATION_nin,
      flg_wc_out_in => flg_wc_out_in,
      FLG_WC_OUT_nin => FLG_WC_OUT_nin,
      flg_water_distrib_in => flg_water_distrib_in,
      FLG_WATER_DISTRIB_nin => FLG_WATER_DISTRIB_nin,
      flg_water_origin_in => flg_water_origin_in,
      FLG_WATER_ORIGIN_nin => FLG_WATER_ORIGIN_nin,
      flg_conserv_in => flg_conserv_in,
      FLG_CONSERV_nin => FLG_CONSERV_nin,
      flg_owner_in => flg_owner_in,
      FLG_OWNER_nin => FLG_OWNER_nin,
      flg_hab_type_in => flg_hab_type_in,
      FLG_HAB_TYPE_nin => FLG_HAB_TYPE_nin,
      flg_light_in => flg_light_in,
      FLG_LIGHT_nin => FLG_LIGHT_nin,
      flg_heat_in => flg_heat_in,
      FLG_HEAT_nin => FLG_HEAT_nin,
      arquitect_barrier_in => arquitect_barrier_in,
      ARQUITECT_BARRIER_nin => ARQUITECT_BARRIER_nin,
      dt_registry_tstz_in => dt_registry_tstz_in,
      DT_REGISTRY_TSTZ_nin => DT_REGISTRY_TSTZ_nin,
      flg_hab_location_in => flg_hab_location_in,
      FLG_HAB_LOCATION_nin => FLG_HAB_LOCATION_nin,
      dt_home_hist_in => dt_home_hist_in,
      DT_HOME_HIST_nin => DT_HOME_HIST_nin,
      notes_in => notes_in,
      NOTES_nin => NOTES_nin,
      create_user_in => create_user_in,
      CREATE_USER_nin => CREATE_USER_nin,
      create_time_in => create_time_in,
      CREATE_TIME_nin => CREATE_TIME_nin,
      create_institution_in => create_institution_in,
      CREATE_INSTITUTION_nin => CREATE_INSTITUTION_nin,
      update_user_in => update_user_in,
      UPDATE_USER_nin => UPDATE_USER_nin,
      update_time_in => update_time_in,
      UPDATE_TIME_nin => UPDATE_TIME_nin,
      update_institution_in => update_institution_in,
      UPDATE_INSTITUTION_nin => UPDATE_INSTITUTION_nin,
      flg_status_in => flg_status_in,
      FLG_STATUS_nin => FLG_STATUS_nin,
      id_cancel_info_det_in => id_cancel_info_det_in,
      ID_CANCEL_INFO_DET_nin => ID_CANCEL_INFO_DET_nin,
      flg_water_treatment_in => flg_water_treatment_in,
      FLG_WATER_TREATMENT_nin => FLG_WATER_TREATMENT_nin,
      flg_garbage_dest_in => flg_garbage_dest_in,
      FLG_GARBAGE_DEST_nin => FLG_GARBAGE_DEST_nin,
      flg_bath_in => flg_bath_in,
      FLG_BATH_nin => FLG_BATH_nin,
      ft_bath_in => ft_bath_in,
      FT_BATH_nin => FT_BATH_nin,
      ft_wc_type_in => ft_wc_type_in,
      FT_WC_TYPE_nin => FT_WC_TYPE_nin,
      ft_wc_location_in => ft_wc_location_in,
      FT_WC_LOCATION_nin => FT_WC_LOCATION_nin,
      ft_wc_out_in => ft_wc_out_in,
      FT_WC_OUT_nin => FT_WC_OUT_nin,
      ft_water_distrib_in => ft_water_distrib_in,
      FT_WATER_DISTRIB_nin => FT_WATER_DISTRIB_nin,
      ft_water_origin_in => ft_water_origin_in,
      FT_WATER_ORIGIN_nin => FT_WATER_ORIGIN_nin,
      ft_conserv_in => ft_conserv_in,
      FT_CONSERV_nin => FT_CONSERV_nin,
      ft_owner_in => ft_owner_in,
      FT_OWNER_nin => FT_OWNER_nin,
      ft_garbage_dest_in => ft_garbage_dest_in,
      FT_GARBAGE_DEST_nin => FT_GARBAGE_DEST_nin,
      ft_hab_type_in => ft_hab_type_in,
      FT_HAB_TYPE_nin => FT_HAB_TYPE_nin,
      ft_water_treatment_in => ft_water_treatment_in,
      FT_WATER_TREATMENT_nin => FT_WATER_TREATMENT_nin,
      ft_light_in => ft_light_in,
      FT_LIGHT_nin => FT_LIGHT_nin,
      ft_heat_in => ft_heat_in,
      FT_HEAT_nin => FT_HEAT_nin,
      ft_hab_location_in => ft_hab_location_in,
      FT_HAB_LOCATION_nin => FT_HAB_LOCATION_nin,
    where_in => where_in,
     handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END upd;

   PROCEDURE upd (
      rec_in IN HOME_HIST%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_home_hist_in => rec_in.ID_HOME_HIST,
         id_home_in => rec_in.ID_HOME,
         id_pat_family_in => rec_in.ID_PAT_FAMILY,
         id_professional_in => rec_in.ID_PROFESSIONAL,
         num_rooms_in => rec_in.NUM_ROOMS,
         num_bedrooms_in => rec_in.NUM_BEDROOMS,
         num_person_room_in => rec_in.NUM_PERSON_ROOM,
         flg_wc_type_in => rec_in.FLG_WC_TYPE,
         flg_wc_location_in => rec_in.FLG_WC_LOCATION,
         flg_wc_out_in => rec_in.FLG_WC_OUT,
         flg_water_distrib_in => rec_in.FLG_WATER_DISTRIB,
         flg_water_origin_in => rec_in.FLG_WATER_ORIGIN,
         flg_conserv_in => rec_in.FLG_CONSERV,
         flg_owner_in => rec_in.FLG_OWNER,
         flg_hab_type_in => rec_in.FLG_HAB_TYPE,
         flg_light_in => rec_in.FLG_LIGHT,
         flg_heat_in => rec_in.FLG_HEAT,
         arquitect_barrier_in => rec_in.ARQUITECT_BARRIER,
         dt_registry_tstz_in => rec_in.DT_REGISTRY_TSTZ,
         flg_hab_location_in => rec_in.FLG_HAB_LOCATION,
         dt_home_hist_in => rec_in.DT_HOME_HIST,
         notes_in => rec_in.NOTES,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         flg_status_in => rec_in.FLG_STATUS,
         id_cancel_info_det_in => rec_in.ID_CANCEL_INFO_DET,
         flg_water_treatment_in => rec_in.FLG_WATER_TREATMENT,
         flg_garbage_dest_in => rec_in.FLG_GARBAGE_DEST,
         flg_bath_in => rec_in.FLG_BATH,
         ft_bath_in => rec_in.FT_BATH,
         ft_wc_type_in => rec_in.FT_WC_TYPE,
         ft_wc_location_in => rec_in.FT_WC_LOCATION,
         ft_wc_out_in => rec_in.FT_WC_OUT,
         ft_water_distrib_in => rec_in.FT_WATER_DISTRIB,
         ft_water_origin_in => rec_in.FT_WATER_ORIGIN,
         ft_conserv_in => rec_in.FT_CONSERV,
         ft_owner_in => rec_in.FT_OWNER,
         ft_garbage_dest_in => rec_in.FT_GARBAGE_DEST,
         ft_hab_type_in => rec_in.FT_HAB_TYPE,
         ft_water_treatment_in => rec_in.FT_WATER_TREATMENT,
         ft_light_in => rec_in.FT_LIGHT,
         ft_heat_in => rec_in.FT_HEAT,
         ft_hab_location_in => rec_in.FT_HAB_LOCATION

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd (
      rec_in IN HOME_HIST%ROWTYPE,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd (
         id_home_hist_in => rec_in.ID_HOME_HIST,
         id_home_in => rec_in.ID_HOME,
         id_pat_family_in => rec_in.ID_PAT_FAMILY,
         id_professional_in => rec_in.ID_PROFESSIONAL,
         num_rooms_in => rec_in.NUM_ROOMS,
         num_bedrooms_in => rec_in.NUM_BEDROOMS,
         num_person_room_in => rec_in.NUM_PERSON_ROOM,
         flg_wc_type_in => rec_in.FLG_WC_TYPE,
         flg_wc_location_in => rec_in.FLG_WC_LOCATION,
         flg_wc_out_in => rec_in.FLG_WC_OUT,
         flg_water_distrib_in => rec_in.FLG_WATER_DISTRIB,
         flg_water_origin_in => rec_in.FLG_WATER_ORIGIN,
         flg_conserv_in => rec_in.FLG_CONSERV,
         flg_owner_in => rec_in.FLG_OWNER,
         flg_hab_type_in => rec_in.FLG_HAB_TYPE,
         flg_light_in => rec_in.FLG_LIGHT,
         flg_heat_in => rec_in.FLG_HEAT,
         arquitect_barrier_in => rec_in.ARQUITECT_BARRIER,
         dt_registry_tstz_in => rec_in.DT_REGISTRY_TSTZ,
         flg_hab_location_in => rec_in.FLG_HAB_LOCATION,
         dt_home_hist_in => rec_in.DT_HOME_HIST,
         notes_in => rec_in.NOTES,
         create_user_in => rec_in.CREATE_USER,
         create_time_in => rec_in.CREATE_TIME,
         create_institution_in => rec_in.CREATE_INSTITUTION,
         update_user_in => rec_in.UPDATE_USER,
         update_time_in => rec_in.UPDATE_TIME,
         update_institution_in => rec_in.UPDATE_INSTITUTION,
         flg_status_in => rec_in.FLG_STATUS,
         id_cancel_info_det_in => rec_in.ID_CANCEL_INFO_DET,
         flg_water_treatment_in => rec_in.FLG_WATER_TREATMENT,
         flg_garbage_dest_in => rec_in.FLG_GARBAGE_DEST,
         flg_bath_in => rec_in.FLG_BATH,
         ft_bath_in => rec_in.FT_BATH,
         ft_wc_type_in => rec_in.FT_WC_TYPE,
         ft_wc_location_in => rec_in.FT_WC_LOCATION,
         ft_wc_out_in => rec_in.FT_WC_OUT,
         ft_water_distrib_in => rec_in.FT_WATER_DISTRIB,
         ft_water_origin_in => rec_in.FT_WATER_ORIGIN,
         ft_conserv_in => rec_in.FT_CONSERV,
         ft_owner_in => rec_in.FT_OWNER,
         ft_garbage_dest_in => rec_in.FT_GARBAGE_DEST,
         ft_hab_type_in => rec_in.FT_HAB_TYPE,
         ft_water_treatment_in => rec_in.FT_WATER_TREATMENT,
         ft_light_in => rec_in.FT_LIGHT,
         ft_heat_in => rec_in.FT_HEAT,
         ft_hab_location_in => rec_in.FT_HAB_LOCATION

        ,handle_error_in => handle_error_in
        , rows_out => rows_out
       );
   END upd;

   PROCEDURE upd_ins (
      id_home_hist_in IN HOME_HIST.ID_HOME_HIST%TYPE,
      id_home_in IN HOME_HIST.ID_HOME%TYPE DEFAULT NULL,
      id_pat_family_in IN HOME_HIST.ID_PAT_FAMILY%TYPE DEFAULT NULL,
      id_professional_in IN HOME_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      num_rooms_in IN HOME_HIST.NUM_ROOMS%TYPE DEFAULT NULL,
      num_bedrooms_in IN HOME_HIST.NUM_BEDROOMS%TYPE DEFAULT NULL,
      num_person_room_in IN HOME_HIST.NUM_PERSON_ROOM%TYPE DEFAULT NULL,
      flg_wc_type_in IN HOME_HIST.FLG_WC_TYPE%TYPE DEFAULT NULL,
      flg_wc_location_in IN HOME_HIST.FLG_WC_LOCATION%TYPE DEFAULT NULL,
      flg_wc_out_in IN HOME_HIST.FLG_WC_OUT%TYPE DEFAULT NULL,
      flg_water_distrib_in IN HOME_HIST.FLG_WATER_DISTRIB%TYPE DEFAULT NULL,
      flg_water_origin_in IN HOME_HIST.FLG_WATER_ORIGIN%TYPE DEFAULT NULL,
      flg_conserv_in IN HOME_HIST.FLG_CONSERV%TYPE DEFAULT NULL,
      flg_owner_in IN HOME_HIST.FLG_OWNER%TYPE DEFAULT NULL,
      flg_hab_type_in IN HOME_HIST.FLG_HAB_TYPE%TYPE DEFAULT NULL,
      flg_light_in IN HOME_HIST.FLG_LIGHT%TYPE DEFAULT NULL,
      flg_heat_in IN HOME_HIST.FLG_HEAT%TYPE DEFAULT NULL,
      arquitect_barrier_in IN HOME_HIST.ARQUITECT_BARRIER%TYPE DEFAULT NULL,
      dt_registry_tstz_in IN HOME_HIST.DT_REGISTRY_TSTZ%TYPE DEFAULT NULL,
      flg_hab_location_in IN HOME_HIST.FLG_HAB_LOCATION%TYPE DEFAULT NULL,
      dt_home_hist_in IN HOME_HIST.DT_HOME_HIST%TYPE DEFAULT NULL,
      notes_in IN HOME_HIST.NOTES%TYPE DEFAULT NULL,
      create_user_in IN HOME_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN HOME_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN HOME_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN HOME_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN HOME_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN HOME_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_in IN HOME_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN HOME_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      flg_water_treatment_in IN HOME_HIST.FLG_WATER_TREATMENT%TYPE DEFAULT NULL,
      flg_garbage_dest_in IN HOME_HIST.FLG_GARBAGE_DEST%TYPE DEFAULT NULL,
      flg_bath_in IN HOME_HIST.FLG_BATH%TYPE DEFAULT NULL,
      ft_bath_in IN HOME_HIST.FT_BATH%TYPE DEFAULT NULL,
      ft_wc_type_in IN HOME_HIST.FT_WC_TYPE%TYPE DEFAULT NULL,
      ft_wc_location_in IN HOME_HIST.FT_WC_LOCATION%TYPE DEFAULT NULL,
      ft_wc_out_in IN HOME_HIST.FT_WC_OUT%TYPE DEFAULT NULL,
      ft_water_distrib_in IN HOME_HIST.FT_WATER_DISTRIB%TYPE DEFAULT NULL,
      ft_water_origin_in IN HOME_HIST.FT_WATER_ORIGIN%TYPE DEFAULT NULL,
      ft_conserv_in IN HOME_HIST.FT_CONSERV%TYPE DEFAULT NULL,
      ft_owner_in IN HOME_HIST.FT_OWNER%TYPE DEFAULT NULL,
      ft_garbage_dest_in IN HOME_HIST.FT_GARBAGE_DEST%TYPE DEFAULT NULL,
      ft_hab_type_in IN HOME_HIST.FT_HAB_TYPE%TYPE DEFAULT NULL,
      ft_water_treatment_in IN HOME_HIST.FT_WATER_TREATMENT%TYPE DEFAULT NULL,
      ft_light_in IN HOME_HIST.FT_LIGHT%TYPE DEFAULT NULL,
      ft_heat_in IN HOME_HIST.FT_HEAT%TYPE DEFAULT NULL,
      ft_hab_location_in IN HOME_HIST.FT_HAB_LOCATION%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      upd (
         id_home_hist_in => id_home_hist_in,
         id_home_in => id_home_in,
         id_pat_family_in => id_pat_family_in,
         id_professional_in => id_professional_in,
         num_rooms_in => num_rooms_in,
         num_bedrooms_in => num_bedrooms_in,
         num_person_room_in => num_person_room_in,
         flg_wc_type_in => flg_wc_type_in,
         flg_wc_location_in => flg_wc_location_in,
         flg_wc_out_in => flg_wc_out_in,
         flg_water_distrib_in => flg_water_distrib_in,
         flg_water_origin_in => flg_water_origin_in,
         flg_conserv_in => flg_conserv_in,
         flg_owner_in => flg_owner_in,
         flg_hab_type_in => flg_hab_type_in,
         flg_light_in => flg_light_in,
         flg_heat_in => flg_heat_in,
         arquitect_barrier_in => arquitect_barrier_in,
         dt_registry_tstz_in => dt_registry_tstz_in,
         flg_hab_location_in => flg_hab_location_in,
         dt_home_hist_in => dt_home_hist_in,
         notes_in => notes_in,
         create_user_in => create_user_in,
         create_time_in => create_time_in,
         create_institution_in => create_institution_in,
         update_user_in => update_user_in,
         update_time_in => update_time_in,
         update_institution_in => update_institution_in,
         flg_status_in => flg_status_in,
         id_cancel_info_det_in => id_cancel_info_det_in,
         flg_water_treatment_in => flg_water_treatment_in,
         flg_garbage_dest_in => flg_garbage_dest_in,
         flg_bath_in => flg_bath_in,
         ft_bath_in => ft_bath_in,
         ft_wc_type_in => ft_wc_type_in,
         ft_wc_location_in => ft_wc_location_in,
         ft_wc_out_in => ft_wc_out_in,
         ft_water_distrib_in => ft_water_distrib_in,
         ft_water_origin_in => ft_water_origin_in,
         ft_conserv_in => ft_conserv_in,
         ft_owner_in => ft_owner_in,
         ft_garbage_dest_in => ft_garbage_dest_in,
         ft_hab_type_in => ft_hab_type_in,
         ft_water_treatment_in => ft_water_treatment_in,
         ft_light_in => ft_light_in,
         ft_heat_in => ft_heat_in,
         ft_hab_location_in => ft_hab_location_in
         ,handle_error_in => handle_error_in
         , rows_out => rows_out
       );
      IF SQL%ROWCOUNT = 0
      THEN
         ins (
            id_home_hist_in => id_home_hist_in,
            id_home_in => id_home_in,
            id_pat_family_in => id_pat_family_in,
            id_professional_in => id_professional_in,
            num_rooms_in => num_rooms_in,
            num_bedrooms_in => num_bedrooms_in,
            num_person_room_in => num_person_room_in,
            flg_wc_type_in => flg_wc_type_in,
            flg_wc_location_in => flg_wc_location_in,
            flg_wc_out_in => flg_wc_out_in,
            flg_water_distrib_in => flg_water_distrib_in,
            flg_water_origin_in => flg_water_origin_in,
            flg_conserv_in => flg_conserv_in,
            flg_owner_in => flg_owner_in,
            flg_hab_type_in => flg_hab_type_in,
            flg_light_in => flg_light_in,
            flg_heat_in => flg_heat_in,
            arquitect_barrier_in => arquitect_barrier_in,
            dt_registry_tstz_in => dt_registry_tstz_in,
            flg_hab_location_in => flg_hab_location_in,
            dt_home_hist_in => dt_home_hist_in,
            notes_in => notes_in,
            create_user_in => create_user_in,
            create_time_in => create_time_in,
            create_institution_in => create_institution_in,
            update_user_in => update_user_in,
            update_time_in => update_time_in,
            update_institution_in => update_institution_in,
            flg_status_in => flg_status_in,
            id_cancel_info_det_in => id_cancel_info_det_in,
            flg_water_treatment_in => flg_water_treatment_in,
            flg_garbage_dest_in => flg_garbage_dest_in,
            flg_bath_in => flg_bath_in,
            ft_bath_in => ft_bath_in,
            ft_wc_type_in => ft_wc_type_in,
            ft_wc_location_in => ft_wc_location_in,
            ft_wc_out_in => ft_wc_out_in,
            ft_water_distrib_in => ft_water_distrib_in,
            ft_water_origin_in => ft_water_origin_in,
            ft_conserv_in => ft_conserv_in,
            ft_owner_in => ft_owner_in,
            ft_garbage_dest_in => ft_garbage_dest_in,
            ft_hab_type_in => ft_hab_type_in,
            ft_water_treatment_in => ft_water_treatment_in,
            ft_light_in => ft_light_in,
            ft_heat_in => ft_heat_in,
            ft_hab_location_in => ft_hab_location_in
            ,handle_error_in => handle_error_in
            , rows_out => rows_out
         );
      END IF;
   END upd_ins;

   PROCEDURE upd_ins (
      id_home_hist_in IN HOME_HIST.ID_HOME_HIST%TYPE,
      id_home_in IN HOME_HIST.ID_HOME%TYPE DEFAULT NULL,
      id_pat_family_in IN HOME_HIST.ID_PAT_FAMILY%TYPE DEFAULT NULL,
      id_professional_in IN HOME_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
      num_rooms_in IN HOME_HIST.NUM_ROOMS%TYPE DEFAULT NULL,
      num_bedrooms_in IN HOME_HIST.NUM_BEDROOMS%TYPE DEFAULT NULL,
      num_person_room_in IN HOME_HIST.NUM_PERSON_ROOM%TYPE DEFAULT NULL,
      flg_wc_type_in IN HOME_HIST.FLG_WC_TYPE%TYPE DEFAULT NULL,
      flg_wc_location_in IN HOME_HIST.FLG_WC_LOCATION%TYPE DEFAULT NULL,
      flg_wc_out_in IN HOME_HIST.FLG_WC_OUT%TYPE DEFAULT NULL,
      flg_water_distrib_in IN HOME_HIST.FLG_WATER_DISTRIB%TYPE DEFAULT NULL,
      flg_water_origin_in IN HOME_HIST.FLG_WATER_ORIGIN%TYPE DEFAULT NULL,
      flg_conserv_in IN HOME_HIST.FLG_CONSERV%TYPE DEFAULT NULL,
      flg_owner_in IN HOME_HIST.FLG_OWNER%TYPE DEFAULT NULL,
      flg_hab_type_in IN HOME_HIST.FLG_HAB_TYPE%TYPE DEFAULT NULL,
      flg_light_in IN HOME_HIST.FLG_LIGHT%TYPE DEFAULT NULL,
      flg_heat_in IN HOME_HIST.FLG_HEAT%TYPE DEFAULT NULL,
      arquitect_barrier_in IN HOME_HIST.ARQUITECT_BARRIER%TYPE DEFAULT NULL,
      dt_registry_tstz_in IN HOME_HIST.DT_REGISTRY_TSTZ%TYPE DEFAULT NULL,
      flg_hab_location_in IN HOME_HIST.FLG_HAB_LOCATION%TYPE DEFAULT NULL,
      dt_home_hist_in IN HOME_HIST.DT_HOME_HIST%TYPE DEFAULT NULL,
      notes_in IN HOME_HIST.NOTES%TYPE DEFAULT NULL,
      create_user_in IN HOME_HIST.CREATE_USER%TYPE DEFAULT NULL,
      create_time_in IN HOME_HIST.CREATE_TIME%TYPE DEFAULT NULL,
      create_institution_in IN HOME_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
      update_user_in IN HOME_HIST.UPDATE_USER%TYPE DEFAULT NULL,
      update_time_in IN HOME_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
      update_institution_in IN HOME_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
      flg_status_in IN HOME_HIST.FLG_STATUS%TYPE DEFAULT NULL,
      id_cancel_info_det_in IN HOME_HIST.ID_CANCEL_INFO_DET%TYPE DEFAULT NULL,
      flg_water_treatment_in IN HOME_HIST.FLG_WATER_TREATMENT%TYPE DEFAULT NULL,
      flg_garbage_dest_in IN HOME_HIST.FLG_GARBAGE_DEST%TYPE DEFAULT NULL,
      flg_bath_in IN HOME_HIST.FLG_BATH%TYPE DEFAULT NULL,
      ft_bath_in IN HOME_HIST.FT_BATH%TYPE DEFAULT NULL,
      ft_wc_type_in IN HOME_HIST.FT_WC_TYPE%TYPE DEFAULT NULL,
      ft_wc_location_in IN HOME_HIST.FT_WC_LOCATION%TYPE DEFAULT NULL,
      ft_wc_out_in IN HOME_HIST.FT_WC_OUT%TYPE DEFAULT NULL,
      ft_water_distrib_in IN HOME_HIST.FT_WATER_DISTRIB%TYPE DEFAULT NULL,
      ft_water_origin_in IN HOME_HIST.FT_WATER_ORIGIN%TYPE DEFAULT NULL,
      ft_conserv_in IN HOME_HIST.FT_CONSERV%TYPE DEFAULT NULL,
      ft_owner_in IN HOME_HIST.FT_OWNER%TYPE DEFAULT NULL,
      ft_garbage_dest_in IN HOME_HIST.FT_GARBAGE_DEST%TYPE DEFAULT NULL,
      ft_hab_type_in IN HOME_HIST.FT_HAB_TYPE%TYPE DEFAULT NULL,
      ft_water_treatment_in IN HOME_HIST.FT_WATER_TREATMENT%TYPE DEFAULT NULL,
      ft_light_in IN HOME_HIST.FT_LIGHT%TYPE DEFAULT NULL,
      ft_heat_in IN HOME_HIST.FT_HEAT%TYPE DEFAULT NULL,
      ft_hab_location_in IN HOME_HIST.FT_HAB_LOCATION%TYPE DEFAULT NULL,
     handle_error_in IN BOOLEAN := TRUE
      )
   IS
        rows_out TABLE_VARCHAR;
   BEGIN
      upd_ins (
      id_home_hist_in,
      id_home_in,
      id_pat_family_in,
      id_professional_in,
      num_rooms_in,
      num_bedrooms_in,
      num_person_room_in,
      flg_wc_type_in,
      flg_wc_location_in,
      flg_wc_out_in,
      flg_water_distrib_in,
      flg_water_origin_in,
      flg_conserv_in,
      flg_owner_in,
      flg_hab_type_in,
      flg_light_in,
      flg_heat_in,
      arquitect_barrier_in,
      dt_registry_tstz_in,
      flg_hab_location_in,
      dt_home_hist_in,
      notes_in,
      create_user_in,
      create_time_in,
      create_institution_in,
      update_user_in,
      update_time_in,
      update_institution_in,
      flg_status_in,
      id_cancel_info_det_in,
      flg_water_treatment_in,
      flg_garbage_dest_in,
      flg_bath_in,
      ft_bath_in,
      ft_wc_type_in,
      ft_wc_location_in,
      ft_wc_out_in,
      ft_water_distrib_in,
      ft_water_origin_in,
      ft_conserv_in,
      ft_owner_in,
      ft_garbage_dest_in,
      ft_hab_type_in,
      ft_water_treatment_in,
      ft_light_in,
      ft_heat_in,
      ft_hab_location_in,
     handle_error_in
     ,rows_out
      );
   END upd_ins;


   PROCEDURE upd (
      col_in IN HOME_HIST_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out IN OUT TABLE_VARCHAR
      )
   IS
      l_ID_HOME_HIST ID_HOME_HIST_cc;
      l_ID_HOME ID_HOME_cc;
      l_ID_PAT_FAMILY ID_PAT_FAMILY_cc;
      l_ID_PROFESSIONAL ID_PROFESSIONAL_cc;
      l_NUM_ROOMS NUM_ROOMS_cc;
      l_NUM_BEDROOMS NUM_BEDROOMS_cc;
      l_NUM_PERSON_ROOM NUM_PERSON_ROOM_cc;
      l_FLG_WC_TYPE FLG_WC_TYPE_cc;
      l_FLG_WC_LOCATION FLG_WC_LOCATION_cc;
      l_FLG_WC_OUT FLG_WC_OUT_cc;
      l_FLG_WATER_DISTRIB FLG_WATER_DISTRIB_cc;
      l_FLG_WATER_ORIGIN FLG_WATER_ORIGIN_cc;
      l_FLG_CONSERV FLG_CONSERV_cc;
      l_FLG_OWNER FLG_OWNER_cc;
      l_FLG_HAB_TYPE FLG_HAB_TYPE_cc;
      l_FLG_LIGHT FLG_LIGHT_cc;
      l_FLG_HEAT FLG_HEAT_cc;
      l_ARQUITECT_BARRIER ARQUITECT_BARRIER_cc;
      l_DT_REGISTRY_TSTZ DT_REGISTRY_TSTZ_cc;
      l_FLG_HAB_LOCATION FLG_HAB_LOCATION_cc;
      l_DT_HOME_HIST DT_HOME_HIST_cc;
      l_NOTES NOTES_cc;
      l_CREATE_USER CREATE_USER_cc;
      l_CREATE_TIME CREATE_TIME_cc;
      l_CREATE_INSTITUTION CREATE_INSTITUTION_cc;
      l_UPDATE_USER UPDATE_USER_cc;
      l_UPDATE_TIME UPDATE_TIME_cc;
      l_UPDATE_INSTITUTION UPDATE_INSTITUTION_cc;
      l_FLG_STATUS FLG_STATUS_cc;
      l_ID_CANCEL_INFO_DET ID_CANCEL_INFO_DET_cc;
      l_FLG_WATER_TREATMENT FLG_WATER_TREATMENT_cc;
      l_FLG_GARBAGE_DEST FLG_GARBAGE_DEST_cc;
      l_FLG_BATH FLG_BATH_cc;
      l_FT_BATH FT_BATH_cc;
      l_FT_WC_TYPE FT_WC_TYPE_cc;
      l_FT_WC_LOCATION FT_WC_LOCATION_cc;
      l_FT_WC_OUT FT_WC_OUT_cc;
      l_FT_WATER_DISTRIB FT_WATER_DISTRIB_cc;
      l_FT_WATER_ORIGIN FT_WATER_ORIGIN_cc;
      l_FT_CONSERV FT_CONSERV_cc;
      l_FT_OWNER FT_OWNER_cc;
      l_FT_GARBAGE_DEST FT_GARBAGE_DEST_cc;
      l_FT_HAB_TYPE FT_HAB_TYPE_cc;
      l_FT_WATER_TREATMENT FT_WATER_TREATMENT_cc;
      l_FT_LIGHT FT_LIGHT_cc;
      l_FT_HEAT FT_HEAT_cc;
      l_FT_HAB_LOCATION FT_HAB_LOCATION_cc;
   BEGIN
      FOR i IN col_in.FIRST .. col_in.LAST loop
         l_ID_HOME_HIST(i) := col_in(i).ID_HOME_HIST;
         l_ID_HOME(i) := col_in(i).ID_HOME;
         l_ID_PAT_FAMILY(i) := col_in(i).ID_PAT_FAMILY;
         l_ID_PROFESSIONAL(i) := col_in(i).ID_PROFESSIONAL;
         l_NUM_ROOMS(i) := col_in(i).NUM_ROOMS;
         l_NUM_BEDROOMS(i) := col_in(i).NUM_BEDROOMS;
         l_NUM_PERSON_ROOM(i) := col_in(i).NUM_PERSON_ROOM;
         l_FLG_WC_TYPE(i) := col_in(i).FLG_WC_TYPE;
         l_FLG_WC_LOCATION(i) := col_in(i).FLG_WC_LOCATION;
         l_FLG_WC_OUT(i) := col_in(i).FLG_WC_OUT;
         l_FLG_WATER_DISTRIB(i) := col_in(i).FLG_WATER_DISTRIB;
         l_FLG_WATER_ORIGIN(i) := col_in(i).FLG_WATER_ORIGIN;
         l_FLG_CONSERV(i) := col_in(i).FLG_CONSERV;
         l_FLG_OWNER(i) := col_in(i).FLG_OWNER;
         l_FLG_HAB_TYPE(i) := col_in(i).FLG_HAB_TYPE;
         l_FLG_LIGHT(i) := col_in(i).FLG_LIGHT;
         l_FLG_HEAT(i) := col_in(i).FLG_HEAT;
         l_ARQUITECT_BARRIER(i) := col_in(i).ARQUITECT_BARRIER;
         l_DT_REGISTRY_TSTZ(i) := col_in(i).DT_REGISTRY_TSTZ;
         l_FLG_HAB_LOCATION(i) := col_in(i).FLG_HAB_LOCATION;
         l_DT_HOME_HIST(i) := col_in(i).DT_HOME_HIST;
         l_NOTES(i) := col_in(i).NOTES;
         l_CREATE_USER(i) := col_in(i).CREATE_USER;
         l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
         l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
         l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
         l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
         l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
         l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
         l_ID_CANCEL_INFO_DET(i) := col_in(i).ID_CANCEL_INFO_DET;
         l_FLG_WATER_TREATMENT(i) := col_in(i).FLG_WATER_TREATMENT;
         l_FLG_GARBAGE_DEST(i) := col_in(i).FLG_GARBAGE_DEST;
         l_FLG_BATH(i) := col_in(i).FLG_BATH;
         l_FT_BATH(i) := col_in(i).FT_BATH;
         l_FT_WC_TYPE(i) := col_in(i).FT_WC_TYPE;
         l_FT_WC_LOCATION(i) := col_in(i).FT_WC_LOCATION;
         l_FT_WC_OUT(i) := col_in(i).FT_WC_OUT;
         l_FT_WATER_DISTRIB(i) := col_in(i).FT_WATER_DISTRIB;
         l_FT_WATER_ORIGIN(i) := col_in(i).FT_WATER_ORIGIN;
         l_FT_CONSERV(i) := col_in(i).FT_CONSERV;
         l_FT_OWNER(i) := col_in(i).FT_OWNER;
         l_FT_GARBAGE_DEST(i) := col_in(i).FT_GARBAGE_DEST;
         l_FT_HAB_TYPE(i) := col_in(i).FT_HAB_TYPE;
         l_FT_WATER_TREATMENT(i) := col_in(i).FT_WATER_TREATMENT;
         l_FT_LIGHT(i) := col_in(i).FT_LIGHT;
         l_FT_HEAT(i) := col_in(i).FT_HEAT;
         l_FT_HAB_LOCATION(i) := col_in(i).FT_HAB_LOCATION;
      END LOOP;
      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE HOME_HIST SET
               ID_HOME = NVL (l_ID_HOME(i), ID_HOME),
               ID_PAT_FAMILY = NVL (l_ID_PAT_FAMILY(i), ID_PAT_FAMILY),
               ID_PROFESSIONAL = NVL (l_ID_PROFESSIONAL(i), ID_PROFESSIONAL),
               NUM_ROOMS = NVL (l_NUM_ROOMS(i), NUM_ROOMS),
               NUM_BEDROOMS = NVL (l_NUM_BEDROOMS(i), NUM_BEDROOMS),
               NUM_PERSON_ROOM = NVL (l_NUM_PERSON_ROOM(i), NUM_PERSON_ROOM),
               FLG_WC_TYPE = NVL (l_FLG_WC_TYPE(i), FLG_WC_TYPE),
               FLG_WC_LOCATION = NVL (l_FLG_WC_LOCATION(i), FLG_WC_LOCATION),
               FLG_WC_OUT = NVL (l_FLG_WC_OUT(i), FLG_WC_OUT),
               FLG_WATER_DISTRIB = NVL (l_FLG_WATER_DISTRIB(i), FLG_WATER_DISTRIB),
               FLG_WATER_ORIGIN = NVL (l_FLG_WATER_ORIGIN(i), FLG_WATER_ORIGIN),
               FLG_CONSERV = NVL (l_FLG_CONSERV(i), FLG_CONSERV),
               FLG_OWNER = NVL (l_FLG_OWNER(i), FLG_OWNER),
               FLG_HAB_TYPE = NVL (l_FLG_HAB_TYPE(i), FLG_HAB_TYPE),
               FLG_LIGHT = NVL (l_FLG_LIGHT(i), FLG_LIGHT),
               FLG_HEAT = NVL (l_FLG_HEAT(i), FLG_HEAT),
               ARQUITECT_BARRIER = NVL (l_ARQUITECT_BARRIER(i), ARQUITECT_BARRIER),
               DT_REGISTRY_TSTZ = NVL (l_DT_REGISTRY_TSTZ(i), DT_REGISTRY_TSTZ),
               FLG_HAB_LOCATION = NVL (l_FLG_HAB_LOCATION(i), FLG_HAB_LOCATION),
               DT_HOME_HIST = NVL (l_DT_HOME_HIST(i), DT_HOME_HIST),
               NOTES = NVL (l_NOTES(i), NOTES),
               CREATE_USER = NVL (l_CREATE_USER(i), CREATE_USER),
               CREATE_TIME = NVL (l_CREATE_TIME(i), CREATE_TIME),
               CREATE_INSTITUTION = NVL (l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
               UPDATE_USER = NVL (l_UPDATE_USER(i), UPDATE_USER),
               UPDATE_TIME = NVL (l_UPDATE_TIME(i), UPDATE_TIME),
               UPDATE_INSTITUTION = NVL (l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
               FLG_STATUS = NVL (l_FLG_STATUS(i), FLG_STATUS),
               ID_CANCEL_INFO_DET = NVL (l_ID_CANCEL_INFO_DET(i), ID_CANCEL_INFO_DET),
               FLG_WATER_TREATMENT = NVL (l_FLG_WATER_TREATMENT(i), FLG_WATER_TREATMENT),
               FLG_GARBAGE_DEST = NVL (l_FLG_GARBAGE_DEST(i), FLG_GARBAGE_DEST),
               FLG_BATH = NVL (l_FLG_BATH(i), FLG_BATH),
               FT_BATH = NVL (l_FT_BATH(i), FT_BATH),
               FT_WC_TYPE = NVL (l_FT_WC_TYPE(i), FT_WC_TYPE),
               FT_WC_LOCATION = NVL (l_FT_WC_LOCATION(i), FT_WC_LOCATION),
               FT_WC_OUT = NVL (l_FT_WC_OUT(i), FT_WC_OUT),
               FT_WATER_DISTRIB = NVL (l_FT_WATER_DISTRIB(i), FT_WATER_DISTRIB),
               FT_WATER_ORIGIN = NVL (l_FT_WATER_ORIGIN(i), FT_WATER_ORIGIN),
               FT_CONSERV = NVL (l_FT_CONSERV(i), FT_CONSERV),
               FT_OWNER = NVL (l_FT_OWNER(i), FT_OWNER),
               FT_GARBAGE_DEST = NVL (l_FT_GARBAGE_DEST(i), FT_GARBAGE_DEST),
               FT_HAB_TYPE = NVL (l_FT_HAB_TYPE(i), FT_HAB_TYPE),
               FT_WATER_TREATMENT = NVL (l_FT_WATER_TREATMENT(i), FT_WATER_TREATMENT),
               FT_LIGHT = NVL (l_FT_LIGHT(i), FT_LIGHT),
               FT_HEAT = NVL (l_FT_HEAT(i), FT_HEAT),
               FT_HAB_LOCATION = NVL (l_FT_HAB_LOCATION(i), FT_HAB_LOCATION)
             WHERE
                ID_HOME_HIST = l_ID_HOME_HIST(i)
          returning rowid bulk collect into rows_out;
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE HOME_HIST SET
               ID_HOME = l_ID_HOME(i),
               ID_PAT_FAMILY = l_ID_PAT_FAMILY(i),
               ID_PROFESSIONAL = l_ID_PROFESSIONAL(i),
               NUM_ROOMS = l_NUM_ROOMS(i),
               NUM_BEDROOMS = l_NUM_BEDROOMS(i),
               NUM_PERSON_ROOM = l_NUM_PERSON_ROOM(i),
               FLG_WC_TYPE = l_FLG_WC_TYPE(i),
               FLG_WC_LOCATION = l_FLG_WC_LOCATION(i),
               FLG_WC_OUT = l_FLG_WC_OUT(i),
               FLG_WATER_DISTRIB = l_FLG_WATER_DISTRIB(i),
               FLG_WATER_ORIGIN = l_FLG_WATER_ORIGIN(i),
               FLG_CONSERV = l_FLG_CONSERV(i),
               FLG_OWNER = l_FLG_OWNER(i),
               FLG_HAB_TYPE = l_FLG_HAB_TYPE(i),
               FLG_LIGHT = l_FLG_LIGHT(i),
               FLG_HEAT = l_FLG_HEAT(i),
               ARQUITECT_BARRIER = l_ARQUITECT_BARRIER(i),
               DT_REGISTRY_TSTZ = l_DT_REGISTRY_TSTZ(i),
               FLG_HAB_LOCATION = l_FLG_HAB_LOCATION(i),
               DT_HOME_HIST = l_DT_HOME_HIST(i),
               NOTES = l_NOTES(i),
               CREATE_USER = l_CREATE_USER(i),
               CREATE_TIME = l_CREATE_TIME(i),
               CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
               UPDATE_USER = l_UPDATE_USER(i),
               UPDATE_TIME = l_UPDATE_TIME(i),
               UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
               FLG_STATUS = l_FLG_STATUS(i),
               ID_CANCEL_INFO_DET = l_ID_CANCEL_INFO_DET(i),
               FLG_WATER_TREATMENT = l_FLG_WATER_TREATMENT(i),
               FLG_GARBAGE_DEST = l_FLG_GARBAGE_DEST(i),
               FLG_BATH = l_FLG_BATH(i),
               FT_BATH = l_FT_BATH(i),
               FT_WC_TYPE = l_FT_WC_TYPE(i),
               FT_WC_LOCATION = l_FT_WC_LOCATION(i),
               FT_WC_OUT = l_FT_WC_OUT(i),
               FT_WATER_DISTRIB = l_FT_WATER_DISTRIB(i),
               FT_WATER_ORIGIN = l_FT_WATER_ORIGIN(i),
               FT_CONSERV = l_FT_CONSERV(i),
               FT_OWNER = l_FT_OWNER(i),
               FT_GARBAGE_DEST = l_FT_GARBAGE_DEST(i),
               FT_HAB_TYPE = l_FT_HAB_TYPE(i),
               FT_WATER_TREATMENT = l_FT_WATER_TREATMENT(i),
               FT_LIGHT = l_FT_LIGHT(i),
               FT_HEAT = l_FT_HEAT(i),
               FT_HAB_LOCATION = l_FT_HAB_LOCATION(i)
             WHERE
                ID_HOME_HIST = l_ID_HOME_HIST(i)
        returning rowid bulk collect into rows_out  ;
      END IF;
   END upd;


   PROCEDURE upd (
      col_in IN HOME_HIST_tc,
      ignore_if_null_in IN BOOLEAN := TRUE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
     rows_out TABLE_VARCHAR;
   BEGIN
      upd (
      col_in ,
      ignore_if_null_in
     ,handle_error_in
     , rows_out
      );
   END upd;

   FUNCTION dynupdstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'BEGIN UPDATE HOME_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' ;
   END dynupdstr;

   FUNCTION dynupdstr_no_rows_out (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL)

   RETURN VARCHAR2
   IS
   BEGIN
      RETURN
         'UPDATE HOME_HIST
             SET ' || colname_in || ' = :value
           WHERE ' || NVL (where_in, '1=1');
   END dynupdstr_no_rows_out;























  PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
      , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN UPDATE HOME_HIST set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
      USING OUT rows_out;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;

   PROCEDURE increment_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      where_in IN VARCHAR2 := NULL
     , increment_value_in IN NUMBER DEFAULT 1
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   rows_out table_varchar;
   BEGIN
      EXECUTE IMMEDIATE 'UPDATE HOME_HIST set ' || colname_in || '=' || colname_in || ' + ' || nvl(increment_value_in,1) || ' WHERE ' || NVL (where_in, '1=1');
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_err_instance_id PLS_INTEGER;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'DUPLICATE-VALUE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
      WHEN e_null_column_value
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           v_errm VARCHAR2(2000) := DBMS_UTILITY.FORMAT_ERROR_STACK;
           dot1loc INTEGER;
           dot2loc INTEGER;
           parenloc INTEGER;
           c_owner ALL_CONSTRAINTS.OWNER%TYPE;
           c_tabname ALL_TABLES.TABLE_NAME%TYPE;
           c_colname ALL_TAB_COLUMNS.COLUMN_NAME%TYPE;
        BEGIN
           dot1loc := INSTR (v_errm, '.', 1, 1);
           dot2loc := INSTR (v_errm, '.', 1, 2);
           parenloc := INSTR (v_errm, '(');
           c_owner :=SUBSTR (v_errm, parenloc+1, dot1loc-parenloc-1);
           c_tabname := SUBSTR (v_errm, dot1loc+1, dot2loc-dot1loc-1);
           c_colname := SUBSTR (v_errm, dot2loc+1, INSTR (v_errm,')')-dot2loc-1);

           pk_alert_exceptions.raise_error (
                error_name_in => 'COLUMN-CANNOT-BE-NULL'
               ,name1_in => 'OWNER'
               ,value1_in => c_owner
               ,name2_in => 'TABLE_NAME'
               ,value2_in => c_tabname
               ,name3_in => 'COLUMN_NAME'
               ,value3_in => c_colname);
        END;
        END IF;
   END increment_onecol;


   -- Delete functionality


   PROCEDURE del (
      id_home_hist_in IN HOME_HIST.ID_HOME_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM HOME_HIST
       WHERE
          ID_HOME_HIST = id_home_hist_in
       RETURNING ROWID BULK COLLECT INTO rows_out
         ;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del;




   PROCEDURE del (
      id_home_hist_in IN HOME_HIST.ID_HOME_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
rows_out TABLE_VARCHAR;
   BEGIN

del (
      id_home_hist_in => id_home_hist_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
      );

   END del;








   -- Delete all rows for primary key column ID_HOME_HIST
   PROCEDURE del_ID_HOME_HIST (
      id_home_hist_in IN HOME_HIST.ID_HOME_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
     )
   IS
   BEGIN
      DELETE FROM HOME_HIST
       WHERE ID_HOME_HIST = id_home_hist_in
      RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_ID_HOME_HIST;






   -- Delete all rows for primary key column ID_HOME_HIST
   PROCEDURE del_ID_HOME_HIST (
      id_home_hist_in IN HOME_HIST.ID_HOME_HIST%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_ID_HOME_HIST (
      id_home_hist_in => id_home_hist_in
     ,handle_error_in => handle_error_in
, rows_out => rows_out
     );
   END del_ID_HOME_HIST;















   PROCEDURE del_HH_HOME_FK (
      id_home_in IN HOME_HIST.ID_HOME%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM HOME_HIST
       WHERE
          ID_HOME = del_HH_HOME_FK.id_home_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_HH_HOME_FK;



PROCEDURE del_HH_HOME_FK (
      id_home_in IN HOME_HIST.ID_HOME%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_HH_HOME_FK (
      id_home_in => id_home_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_HH_HOME_FK;





   PROCEDURE del_HH_PROF_FK (
      id_professional_in IN HOME_HIST.ID_PROFESSIONAL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM HOME_HIST
       WHERE
          ID_PROFESSIONAL = del_HH_PROF_FK.id_professional_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_HH_PROF_FK;



PROCEDURE del_HH_PROF_FK (
      id_professional_in IN HOME_HIST.ID_PROFESSIONAL%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_HH_PROF_FK (
      id_professional_in => id_professional_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_HH_PROF_FK;





   PROCEDURE del_HH_PTFAM_FK (
      id_pat_family_in IN HOME_HIST.ID_PAT_FAMILY%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      DELETE FROM HOME_HIST
       WHERE
          ID_PAT_FAMILY = del_HH_PTFAM_FK.id_pat_family_in
       RETURNING ROWID BULK COLLECT INTO rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_HH_PTFAM_FK;



PROCEDURE del_HH_PTFAM_FK (
      id_pat_family_in IN HOME_HIST.ID_PAT_FAMILY%TYPE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   rows_out TABLE_VARCHAR;
   BEGIN
del_HH_PTFAM_FK (
      id_pat_family_in => id_pat_family_in
     ,handle_error_in => handle_error_in
     , rows_out => rows_out
      );
   END del_HH_PTFAM_FK;












   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2) RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM HOME_HIST';
      ELSE
         RETURN
            'DELETE FROM HOME_HIST WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr ( colname_in || ' = :value' );
   END;

   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyndelstr (where_clause_in);
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by;





   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN TIMESTAMP WITH LOCAL TIME ZONE
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
      )
   IS
   BEGIN
      EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
   )
   IS
   BEGIN
      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
         USING colvalue_in;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;






   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
     , rows_out OUT TABLE_VARCHAR
   )
   IS
   BEGIN
     EXECUTE IMMEDIATE 'BEGIN ' || dyncoldelstr (colname_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
         USING IN colvalue_in, OUT rows_out;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
        BEGIN
           get_constraint_info (l_owner, l_name);
           pk_alert_exceptions.raise_error (
              error_name_in => 'CHECK-CONSTRAINT-FAILURE'
             ,name1_in => 'OWNER'
             ,value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME'
             ,value2_in => l_name
             ,name3_in => 'TABLE_NAME'
             ,value3_in => 'HOME_HIST');
        END;
        END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
        IF NOT handle_error_in THEN RAISE;
        ELSE
        DECLARE
           l_owner ALL_CONSTRAINTS.OWNER%TYPE;
           l_name ALL_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
           l_id PLS_INTEGER;
           l_err_name VARCHAR2(32767) DEFAULT 'NO-PARENT-KEY-FOUND';
        BEGIN
           get_constraint_info (l_owner, l_name);
           IF SQLCODE = -2292 -- Child record found
           THEN
              l_err_name := 'CHILD-RECORD-FOUND' ;
           END IF;
           pk_alert_exceptions.register_error (
              error_name_in => l_err_name
             ,err_instance_id_out => l_id
             ,name1_in => 'OWNER', value1_in => l_owner
             ,name2_in => 'CONSTRAINT_NAME', value2_in => l_name
             ,name3_in => 'TABLE_NAME', value3_in => 'HOME_HIST');
           pk_alert_exceptions.raise_error_instance (err_instance_id_in => l_id);
        END;
        END IF;
   END del_by_col;







   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      home_hist_inout IN OUT HOME_HIST%ROWTYPE
   )
   IS
   BEGIN
      home_hist_inout.ID_HOME_HIST := NULL;
      home_hist_inout.ID_HOME := NULL;
      home_hist_inout.ID_PAT_FAMILY := NULL;
      home_hist_inout.ID_PROFESSIONAL := NULL;
      home_hist_inout.NUM_ROOMS := NULL;
      home_hist_inout.NUM_BEDROOMS := NULL;
      home_hist_inout.NUM_PERSON_ROOM := NULL;
      home_hist_inout.FLG_WC_TYPE := NULL;
      home_hist_inout.FLG_WC_LOCATION := NULL;
      home_hist_inout.FLG_WC_OUT := NULL;
      home_hist_inout.FLG_WATER_DISTRIB := NULL;
      home_hist_inout.FLG_WATER_ORIGIN := NULL;
      home_hist_inout.FLG_CONSERV := NULL;
      home_hist_inout.FLG_OWNER := NULL;
      home_hist_inout.FLG_HAB_TYPE := NULL;
      home_hist_inout.FLG_LIGHT := NULL;
      home_hist_inout.FLG_HEAT := NULL;
      home_hist_inout.ARQUITECT_BARRIER := NULL;
      home_hist_inout.DT_REGISTRY_TSTZ := NULL;
      home_hist_inout.FLG_HAB_LOCATION := NULL;
      home_hist_inout.DT_HOME_HIST := NULL;
      home_hist_inout.NOTES := NULL;
      home_hist_inout.CREATE_USER := NULL;
      home_hist_inout.CREATE_TIME := NULL;
      home_hist_inout.CREATE_INSTITUTION := NULL;
      home_hist_inout.UPDATE_USER := NULL;
      home_hist_inout.UPDATE_TIME := NULL;
      home_hist_inout.UPDATE_INSTITUTION := NULL;
      home_hist_inout.FLG_STATUS := NULL;
      home_hist_inout.ID_CANCEL_INFO_DET := NULL;
      home_hist_inout.FLG_WATER_TREATMENT := NULL;
      home_hist_inout.FLG_GARBAGE_DEST := NULL;
      home_hist_inout.FLG_BATH := NULL;
      home_hist_inout.FT_BATH := NULL;
      home_hist_inout.FT_WC_TYPE := NULL;
      home_hist_inout.FT_WC_LOCATION := NULL;
      home_hist_inout.FT_WC_OUT := NULL;
      home_hist_inout.FT_WATER_DISTRIB := NULL;
      home_hist_inout.FT_WATER_ORIGIN := NULL;
      home_hist_inout.FT_CONSERV := NULL;
      home_hist_inout.FT_OWNER := NULL;
      home_hist_inout.FT_GARBAGE_DEST := NULL;
      home_hist_inout.FT_HAB_TYPE := NULL;
      home_hist_inout.FT_WATER_TREATMENT := NULL;
      home_hist_inout.FT_LIGHT := NULL;
      home_hist_inout.FT_HEAT := NULL;
      home_hist_inout.FT_HAB_LOCATION := NULL;
   END initrec;

   FUNCTION initrec RETURN HOME_HIST%ROWTYPE
   IS
      l_home_hist HOME_HIST%ROWTYPE;
   BEGIN
      RETURN l_home_hist;
   END initrec;


   FUNCTION get_data_rowid(
        rows_in IN TABLE_VARCHAR
        ) RETURN HOME_HIST_tc
   IS
        data HOME_HIST_tc;
   BEGIN
        select * bulk collect into data from HOME_HIST where rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
   END get_data_rowid;


   FUNCTION get_data_rowid_pat(
        rows_in IN TABLE_VARCHAR
        ) RETURN HOME_HIST_tc
   is
        PRAGMA AUTONOMOUS_TRANSACTION;
        data HOME_HIST_tc;
   BEGIN
        data := get_data_rowid(rows_in);
        commit;
        return data;
        EXCEPTION
      WHEN OTHERS THEN
        pk_alert_exceptions.raise_error (
           error_name_in => 'get_data_rowid'
           );
        rollback;
    END get_data_rowid_pat;

BEGIN
   NULL;
END TS_HOME_HIST;
/
