/*-- Last Change Revision: $Rev: 2028041 $*/
/*-- Last Change by: $Author: mario.fernandes $*/
/*-- Date of last change: $Date: 2022-08-02 18:44:01 +0100 (ter, 02 ago 2022) $*/
CREATE OR REPLACE PACKAGE BODY ts_epis_diagnosis_hist
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2017-10-23 11:18:06
| Created By: ALERT
*/
IS

e_null_column_value EXCEPTION;
PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

e_existing_fky_reference EXCEPTION;
PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

e_check_constraint_failure EXCEPTION;
PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

e_no_parent_key EXCEPTION;
PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

e_child_record_found EXCEPTION;
PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

e_forall_error EXCEPTION;
PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

-- Defined for backward compatibilty.
e_integ_constraint_failure EXCEPTION;
PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

FUNCTION next_key(sequence_in IN VARCHAR2 := NULL) RETURN epis_diagnosis_hist.ID_EPIS_DIAGNOSIS_HIST%TYPE
IS
retval epis_diagnosis_hist.ID_EPIS_DIAGNOSIS_HIST%TYPE;
BEGIN
IF sequence_in IS NULL
THEN
retval := seq_epis_diagnosis_hist.NEXTVAL;
ELSE
EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
INTO retval;
END IF;
RETURN retval;
END next_key;

-- Insert one row, generating hidden primary key using a sequence
PROCEDURE ins
(
ID_EPIS_DIAGNOSIS_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
ID_PROFESSIONAL_in IN EPIS_DIAGNOSIS_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_DIAGNOSIS_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_TYPE%TYPE DEFAULT NULL,
ADW_LAST_UPDATE_in IN EPIS_DIAGNOSIS_HIST.ADW_LAST_UPDATE%TYPE DEFAULT sysdate ,
NOTES_in IN EPIS_DIAGNOSIS_HIST.NOTES%TYPE DEFAULT NULL,
FLG_FINAL_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_FINAL_TYPE%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_NOTES_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS_NOTES%TYPE DEFAULT NULL,
DT_CREATION_TSTZ_in IN EPIS_DIAGNOSIS_HIST.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
ID_CANCEL_REASON_in IN EPIS_DIAGNOSIS_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_DIAGNOSIS_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_DIAGNOSIS_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_DIAGNOSIS_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_DIAGNOSIS_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
ID_EPISODE_ORIGIN_in IN EPIS_DIAGNOSIS_HIST.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
FLG_ADD_PROBLEM_in IN EPIS_DIAGNOSIS_HIST.FLG_ADD_PROBLEM%TYPE DEFAULT NULL,
ID_CDR_CALL_in IN EPIS_DIAGNOSIS_HIST.ID_CDR_CALL%TYPE DEFAULT NULL,
DT_INITIAL_DIAG_in IN EPIS_DIAGNOSIS_HIST.DT_INITIAL_DIAG%TYPE DEFAULT NULL,
ID_DIAG_BASIS_in IN EPIS_DIAGNOSIS_HIST.ID_DIAG_BASIS%TYPE DEFAULT NULL,
ID_DBASIS_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DBASIS_INST_OWNER%TYPE DEFAULT NULL,
DIAG_BASIS_SPEC_in IN EPIS_DIAGNOSIS_HIST.DIAG_BASIS_SPEC%TYPE DEFAULT NULL,
FLG_RECURRENCE_in IN EPIS_DIAGNOSIS_HIST.FLG_RECURRENCE%TYPE DEFAULT NULL,
FLG_MULT_TUMORS_in IN EPIS_DIAGNOSIS_HIST.FLG_MULT_TUMORS%TYPE DEFAULT NULL,
NUM_PRIMARY_TUMORS_in IN EPIS_DIAGNOSIS_HIST.NUM_PRIMARY_TUMORS%TYPE DEFAULT NULL,
ID_SUB_ANALYSIS_in IN EPIS_DIAGNOSIS_HIST.ID_SUB_ANALYSIS%TYPE DEFAULT NULL,
ID_SUBANALY_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_SUBANALY_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_AREA_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_AREA%TYPE DEFAULT NULL,
ID_ANATAREA_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATAREA_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_SIDE_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_SIDE%TYPE DEFAULT NULL,
ID_ANATSIDE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATSIDE_INST_OWNER%TYPE DEFAULT NULL,
ID_DIAGNOSIS_CONDITION_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGNOSIS_CONDITION%TYPE DEFAULT NULL,
ID_DIAGCOND_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGCOND_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_LOCATION_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCATION%TYPE DEFAULT NULL,
ID_LESION_LOCAT_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCAT_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_TYPE_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE%TYPE DEFAULT NULL,
ID_LESION_TYPE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE_INST_OWNER%TYPE DEFAULT NULL,
RANK_in IN EPIS_DIAGNOSIS_HIST.RANK%TYPE DEFAULT NULL,
-- Pass false if you want errors to propagate out unhandled
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
IS
l_pky epis_diagnosis_hist.ID_EPIS_DIAGNOSIS_HIST%TYPE := next_key;
BEGIN
ins(
ID_EPIS_DIAGNOSIS_HIST_IN => l_pky,
ID_EPIS_DIAGNOSIS_IN => ID_EPIS_DIAGNOSIS_IN,
ID_PROFESSIONAL_IN => ID_PROFESSIONAL_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
ADW_LAST_UPDATE_IN => ADW_LAST_UPDATE_IN,
NOTES_IN => NOTES_IN,
FLG_FINAL_TYPE_IN => FLG_FINAL_TYPE_IN,
ID_EPIS_DIAGNOSIS_NOTES_IN => ID_EPIS_DIAGNOSIS_NOTES_IN,
DT_CREATION_TSTZ_IN => DT_CREATION_TSTZ_IN,
ID_CANCEL_REASON_IN => ID_CANCEL_REASON_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
ID_EPISODE_ORIGIN_IN => ID_EPISODE_ORIGIN_IN,
FLG_ADD_PROBLEM_IN => FLG_ADD_PROBLEM_IN,
ID_CDR_CALL_IN => ID_CDR_CALL_IN,
DT_INITIAL_DIAG_IN => DT_INITIAL_DIAG_IN,
ID_DIAG_BASIS_IN => ID_DIAG_BASIS_IN,
ID_DBASIS_INST_OWNER_IN => ID_DBASIS_INST_OWNER_IN,
DIAG_BASIS_SPEC_IN => DIAG_BASIS_SPEC_IN,
FLG_RECURRENCE_IN => FLG_RECURRENCE_IN,
FLG_MULT_TUMORS_IN => FLG_MULT_TUMORS_IN,
NUM_PRIMARY_TUMORS_IN => NUM_PRIMARY_TUMORS_IN,
ID_SUB_ANALYSIS_IN => ID_SUB_ANALYSIS_IN,
ID_SUBANALY_INST_OWNER_IN => ID_SUBANALY_INST_OWNER_IN,
ID_ANATOMICAL_AREA_IN => ID_ANATOMICAL_AREA_IN,
ID_ANATAREA_INST_OWNER_IN => ID_ANATAREA_INST_OWNER_IN,
ID_ANATOMICAL_SIDE_IN => ID_ANATOMICAL_SIDE_IN,
ID_ANATSIDE_INST_OWNER_IN => ID_ANATSIDE_INST_OWNER_IN,
ID_DIAGNOSIS_CONDITION_IN => ID_DIAGNOSIS_CONDITION_IN,
ID_DIAGCOND_INST_OWNER_IN => ID_DIAGCOND_INST_OWNER_IN,
ID_LESION_LOCATION_IN => ID_LESION_LOCATION_IN,
ID_LESION_LOCAT_INST_OWNER_IN => ID_LESION_LOCAT_INST_OWNER_IN,
ID_LESION_TYPE_IN => ID_LESION_TYPE_IN,
ID_LESION_TYPE_INST_OWNER_IN => ID_LESION_TYPE_INST_OWNER_IN,
RANK_IN => RANK_IN,
handle_error_in       => handle_error_in,
rows_out              => rows_out);
END ins;

-- Insert one row, generating hidden primary key using a sequence
PROCEDURE ins
(
ID_EPIS_DIAGNOSIS_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
ID_PROFESSIONAL_in IN EPIS_DIAGNOSIS_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_DIAGNOSIS_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_TYPE%TYPE DEFAULT NULL,
ADW_LAST_UPDATE_in IN EPIS_DIAGNOSIS_HIST.ADW_LAST_UPDATE%TYPE DEFAULT sysdate ,
NOTES_in IN EPIS_DIAGNOSIS_HIST.NOTES%TYPE DEFAULT NULL,
FLG_FINAL_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_FINAL_TYPE%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_NOTES_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS_NOTES%TYPE DEFAULT NULL,
DT_CREATION_TSTZ_in IN EPIS_DIAGNOSIS_HIST.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
ID_CANCEL_REASON_in IN EPIS_DIAGNOSIS_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_DIAGNOSIS_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_DIAGNOSIS_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_DIAGNOSIS_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_DIAGNOSIS_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
ID_EPISODE_ORIGIN_in IN EPIS_DIAGNOSIS_HIST.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
FLG_ADD_PROBLEM_in IN EPIS_DIAGNOSIS_HIST.FLG_ADD_PROBLEM%TYPE DEFAULT NULL,
ID_CDR_CALL_in IN EPIS_DIAGNOSIS_HIST.ID_CDR_CALL%TYPE DEFAULT NULL,
DT_INITIAL_DIAG_in IN EPIS_DIAGNOSIS_HIST.DT_INITIAL_DIAG%TYPE DEFAULT NULL,
ID_DIAG_BASIS_in IN EPIS_DIAGNOSIS_HIST.ID_DIAG_BASIS%TYPE DEFAULT NULL,
ID_DBASIS_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DBASIS_INST_OWNER%TYPE DEFAULT NULL,
DIAG_BASIS_SPEC_in IN EPIS_DIAGNOSIS_HIST.DIAG_BASIS_SPEC%TYPE DEFAULT NULL,
FLG_RECURRENCE_in IN EPIS_DIAGNOSIS_HIST.FLG_RECURRENCE%TYPE DEFAULT NULL,
FLG_MULT_TUMORS_in IN EPIS_DIAGNOSIS_HIST.FLG_MULT_TUMORS%TYPE DEFAULT NULL,
NUM_PRIMARY_TUMORS_in IN EPIS_DIAGNOSIS_HIST.NUM_PRIMARY_TUMORS%TYPE DEFAULT NULL,
ID_SUB_ANALYSIS_in IN EPIS_DIAGNOSIS_HIST.ID_SUB_ANALYSIS%TYPE DEFAULT NULL,
ID_SUBANALY_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_SUBANALY_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_AREA_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_AREA%TYPE DEFAULT NULL,
ID_ANATAREA_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATAREA_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_SIDE_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_SIDE%TYPE DEFAULT NULL,
ID_ANATSIDE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATSIDE_INST_OWNER%TYPE DEFAULT NULL,
ID_DIAGNOSIS_CONDITION_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGNOSIS_CONDITION%TYPE DEFAULT NULL,
ID_DIAGCOND_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGCOND_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_LOCATION_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCATION%TYPE DEFAULT NULL,
ID_LESION_LOCAT_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCAT_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_TYPE_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE%TYPE DEFAULT NULL,
ID_LESION_TYPE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE_INST_OWNER%TYPE DEFAULT NULL,
RANK_in IN EPIS_DIAGNOSIS_HIST.RANK%TYPE DEFAULT NULL,
-- Pass false if you want errors to propagate out unhandled
handle_error_in IN BOOLEAN := TRUE
)
IS
rows_out table_varchar;
BEGIN
ins(
ID_EPIS_DIAGNOSIS_IN => ID_EPIS_DIAGNOSIS_IN,
ID_PROFESSIONAL_IN => ID_PROFESSIONAL_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
ADW_LAST_UPDATE_IN => ADW_LAST_UPDATE_IN,
NOTES_IN => NOTES_IN,
FLG_FINAL_TYPE_IN => FLG_FINAL_TYPE_IN,
ID_EPIS_DIAGNOSIS_NOTES_IN => ID_EPIS_DIAGNOSIS_NOTES_IN,
DT_CREATION_TSTZ_IN => DT_CREATION_TSTZ_IN,
ID_CANCEL_REASON_IN => ID_CANCEL_REASON_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
ID_EPISODE_ORIGIN_IN => ID_EPISODE_ORIGIN_IN,
FLG_ADD_PROBLEM_IN => FLG_ADD_PROBLEM_IN,
ID_CDR_CALL_IN => ID_CDR_CALL_IN,
DT_INITIAL_DIAG_IN => DT_INITIAL_DIAG_IN,
ID_DIAG_BASIS_IN => ID_DIAG_BASIS_IN,
ID_DBASIS_INST_OWNER_IN => ID_DBASIS_INST_OWNER_IN,
DIAG_BASIS_SPEC_IN => DIAG_BASIS_SPEC_IN,
FLG_RECURRENCE_IN => FLG_RECURRENCE_IN,
FLG_MULT_TUMORS_IN => FLG_MULT_TUMORS_IN,
NUM_PRIMARY_TUMORS_IN => NUM_PRIMARY_TUMORS_IN,
ID_SUB_ANALYSIS_IN => ID_SUB_ANALYSIS_IN,
ID_SUBANALY_INST_OWNER_IN => ID_SUBANALY_INST_OWNER_IN,
ID_ANATOMICAL_AREA_IN => ID_ANATOMICAL_AREA_IN,
ID_ANATAREA_INST_OWNER_IN => ID_ANATAREA_INST_OWNER_IN,
ID_ANATOMICAL_SIDE_IN => ID_ANATOMICAL_SIDE_IN,
ID_ANATSIDE_INST_OWNER_IN => ID_ANATSIDE_INST_OWNER_IN,
ID_DIAGNOSIS_CONDITION_IN => ID_DIAGNOSIS_CONDITION_IN,
ID_DIAGCOND_INST_OWNER_IN => ID_DIAGCOND_INST_OWNER_IN,
ID_LESION_LOCATION_IN => ID_LESION_LOCATION_IN,
ID_LESION_LOCAT_INST_OWNER_IN => ID_LESION_LOCAT_INST_OWNER_IN,
ID_LESION_TYPE_IN => ID_LESION_TYPE_IN,
ID_LESION_TYPE_INST_OWNER_IN => ID_LESION_TYPE_INST_OWNER_IN,
RANK_IN => RANK_IN,
handle_error_in       => handle_error_in,
rows_out              => rows_out);
END ins;

-- Insert one row, returning primary key generated by sequence
PROCEDURE ins
(
ID_EPIS_DIAGNOSIS_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
ID_PROFESSIONAL_in IN EPIS_DIAGNOSIS_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_DIAGNOSIS_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_TYPE%TYPE DEFAULT NULL,
ADW_LAST_UPDATE_in IN EPIS_DIAGNOSIS_HIST.ADW_LAST_UPDATE%TYPE DEFAULT sysdate ,
NOTES_in IN EPIS_DIAGNOSIS_HIST.NOTES%TYPE DEFAULT NULL,
FLG_FINAL_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_FINAL_TYPE%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_NOTES_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS_NOTES%TYPE DEFAULT NULL,
DT_CREATION_TSTZ_in IN EPIS_DIAGNOSIS_HIST.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
ID_CANCEL_REASON_in IN EPIS_DIAGNOSIS_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_DIAGNOSIS_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_DIAGNOSIS_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_DIAGNOSIS_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_DIAGNOSIS_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
ID_EPISODE_ORIGIN_in IN EPIS_DIAGNOSIS_HIST.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
FLG_ADD_PROBLEM_in IN EPIS_DIAGNOSIS_HIST.FLG_ADD_PROBLEM%TYPE DEFAULT NULL,
ID_CDR_CALL_in IN EPIS_DIAGNOSIS_HIST.ID_CDR_CALL%TYPE DEFAULT NULL,
DT_INITIAL_DIAG_in IN EPIS_DIAGNOSIS_HIST.DT_INITIAL_DIAG%TYPE DEFAULT NULL,
ID_DIAG_BASIS_in IN EPIS_DIAGNOSIS_HIST.ID_DIAG_BASIS%TYPE DEFAULT NULL,
ID_DBASIS_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DBASIS_INST_OWNER%TYPE DEFAULT NULL,
DIAG_BASIS_SPEC_in IN EPIS_DIAGNOSIS_HIST.DIAG_BASIS_SPEC%TYPE DEFAULT NULL,
FLG_RECURRENCE_in IN EPIS_DIAGNOSIS_HIST.FLG_RECURRENCE%TYPE DEFAULT NULL,
FLG_MULT_TUMORS_in IN EPIS_DIAGNOSIS_HIST.FLG_MULT_TUMORS%TYPE DEFAULT NULL,
NUM_PRIMARY_TUMORS_in IN EPIS_DIAGNOSIS_HIST.NUM_PRIMARY_TUMORS%TYPE DEFAULT NULL,
ID_SUB_ANALYSIS_in IN EPIS_DIAGNOSIS_HIST.ID_SUB_ANALYSIS%TYPE DEFAULT NULL,
ID_SUBANALY_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_SUBANALY_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_AREA_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_AREA%TYPE DEFAULT NULL,
ID_ANATAREA_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATAREA_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_SIDE_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_SIDE%TYPE DEFAULT NULL,
ID_ANATSIDE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATSIDE_INST_OWNER%TYPE DEFAULT NULL,
ID_DIAGNOSIS_CONDITION_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGNOSIS_CONDITION%TYPE DEFAULT NULL,
ID_DIAGCOND_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGCOND_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_LOCATION_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCATION%TYPE DEFAULT NULL,
ID_LESION_LOCAT_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCAT_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_TYPE_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE%TYPE DEFAULT NULL,
ID_LESION_TYPE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE_INST_OWNER%TYPE DEFAULT NULL,
RANK_in IN EPIS_DIAGNOSIS_HIST.RANK%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_HIST_OUT IN OUT epis_diagnosis_hist.ID_EPIS_DIAGNOSIS_HIST%TYPE,
-- Pass false if you want errors to propagate out unhandled
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
IS
l_pky epis_diagnosis_hist.ID_EPIS_DIAGNOSIS_HIST%TYPE := next_key;
BEGIN
ins(
ID_EPIS_DIAGNOSIS_HIST_IN => l_pky,
ID_EPIS_DIAGNOSIS_IN => ID_EPIS_DIAGNOSIS_IN,
ID_PROFESSIONAL_IN => ID_PROFESSIONAL_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
ADW_LAST_UPDATE_IN => ADW_LAST_UPDATE_IN,
NOTES_IN => NOTES_IN,
FLG_FINAL_TYPE_IN => FLG_FINAL_TYPE_IN,
ID_EPIS_DIAGNOSIS_NOTES_IN => ID_EPIS_DIAGNOSIS_NOTES_IN,
DT_CREATION_TSTZ_IN => DT_CREATION_TSTZ_IN,
ID_CANCEL_REASON_IN => ID_CANCEL_REASON_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
ID_EPISODE_ORIGIN_IN => ID_EPISODE_ORIGIN_IN,
FLG_ADD_PROBLEM_IN => FLG_ADD_PROBLEM_IN,
ID_CDR_CALL_IN => ID_CDR_CALL_IN,
DT_INITIAL_DIAG_IN => DT_INITIAL_DIAG_IN,
ID_DIAG_BASIS_IN => ID_DIAG_BASIS_IN,
ID_DBASIS_INST_OWNER_IN => ID_DBASIS_INST_OWNER_IN,
DIAG_BASIS_SPEC_IN => DIAG_BASIS_SPEC_IN,
FLG_RECURRENCE_IN => FLG_RECURRENCE_IN,
FLG_MULT_TUMORS_IN => FLG_MULT_TUMORS_IN,
NUM_PRIMARY_TUMORS_IN => NUM_PRIMARY_TUMORS_IN,
ID_SUB_ANALYSIS_IN => ID_SUB_ANALYSIS_IN,
ID_SUBANALY_INST_OWNER_IN => ID_SUBANALY_INST_OWNER_IN,
ID_ANATOMICAL_AREA_IN => ID_ANATOMICAL_AREA_IN,
ID_ANATAREA_INST_OWNER_IN => ID_ANATAREA_INST_OWNER_IN,
ID_ANATOMICAL_SIDE_IN => ID_ANATOMICAL_SIDE_IN,
ID_ANATSIDE_INST_OWNER_IN => ID_ANATSIDE_INST_OWNER_IN,
ID_DIAGNOSIS_CONDITION_IN => ID_DIAGNOSIS_CONDITION_IN,
ID_DIAGCOND_INST_OWNER_IN => ID_DIAGCOND_INST_OWNER_IN,
ID_LESION_LOCATION_IN => ID_LESION_LOCATION_IN,
ID_LESION_LOCAT_INST_OWNER_IN => ID_LESION_LOCAT_INST_OWNER_IN,
ID_LESION_TYPE_IN => ID_LESION_TYPE_IN,
ID_LESION_TYPE_INST_OWNER_IN => ID_LESION_TYPE_INST_OWNER_IN,
RANK_IN => RANK_IN,
handle_error_in       => handle_error_in,
rows_out              => rows_out);
ID_EPIS_DIAGNOSIS_HIST_OUT := l_pky;
END ins;

-- Insert one row, returning primary key generated by sequence
PROCEDURE ins
(
ID_EPIS_DIAGNOSIS_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
ID_PROFESSIONAL_in IN EPIS_DIAGNOSIS_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_DIAGNOSIS_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_TYPE%TYPE DEFAULT NULL,
ADW_LAST_UPDATE_in IN EPIS_DIAGNOSIS_HIST.ADW_LAST_UPDATE%TYPE DEFAULT sysdate ,
NOTES_in IN EPIS_DIAGNOSIS_HIST.NOTES%TYPE DEFAULT NULL,
FLG_FINAL_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_FINAL_TYPE%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_NOTES_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS_NOTES%TYPE DEFAULT NULL,
DT_CREATION_TSTZ_in IN EPIS_DIAGNOSIS_HIST.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
ID_CANCEL_REASON_in IN EPIS_DIAGNOSIS_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_DIAGNOSIS_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_DIAGNOSIS_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_DIAGNOSIS_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_DIAGNOSIS_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
ID_EPISODE_ORIGIN_in IN EPIS_DIAGNOSIS_HIST.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
FLG_ADD_PROBLEM_in IN EPIS_DIAGNOSIS_HIST.FLG_ADD_PROBLEM%TYPE DEFAULT NULL,
ID_CDR_CALL_in IN EPIS_DIAGNOSIS_HIST.ID_CDR_CALL%TYPE DEFAULT NULL,
DT_INITIAL_DIAG_in IN EPIS_DIAGNOSIS_HIST.DT_INITIAL_DIAG%TYPE DEFAULT NULL,
ID_DIAG_BASIS_in IN EPIS_DIAGNOSIS_HIST.ID_DIAG_BASIS%TYPE DEFAULT NULL,
ID_DBASIS_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DBASIS_INST_OWNER%TYPE DEFAULT NULL,
DIAG_BASIS_SPEC_in IN EPIS_DIAGNOSIS_HIST.DIAG_BASIS_SPEC%TYPE DEFAULT NULL,
FLG_RECURRENCE_in IN EPIS_DIAGNOSIS_HIST.FLG_RECURRENCE%TYPE DEFAULT NULL,
FLG_MULT_TUMORS_in IN EPIS_DIAGNOSIS_HIST.FLG_MULT_TUMORS%TYPE DEFAULT NULL,
NUM_PRIMARY_TUMORS_in IN EPIS_DIAGNOSIS_HIST.NUM_PRIMARY_TUMORS%TYPE DEFAULT NULL,
ID_SUB_ANALYSIS_in IN EPIS_DIAGNOSIS_HIST.ID_SUB_ANALYSIS%TYPE DEFAULT NULL,
ID_SUBANALY_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_SUBANALY_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_AREA_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_AREA%TYPE DEFAULT NULL,
ID_ANATAREA_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATAREA_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_SIDE_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_SIDE%TYPE DEFAULT NULL,
ID_ANATSIDE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATSIDE_INST_OWNER%TYPE DEFAULT NULL,
ID_DIAGNOSIS_CONDITION_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGNOSIS_CONDITION%TYPE DEFAULT NULL,
ID_DIAGCOND_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGCOND_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_LOCATION_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCATION%TYPE DEFAULT NULL,
ID_LESION_LOCAT_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCAT_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_TYPE_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE%TYPE DEFAULT NULL,
ID_LESION_TYPE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE_INST_OWNER%TYPE DEFAULT NULL,
RANK_in IN EPIS_DIAGNOSIS_HIST.RANK%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_HIST_OUT IN OUT epis_diagnosis_hist.ID_EPIS_DIAGNOSIS_HIST%TYPE,
-- Pass false if you want errors to propagate out unhandled
handle_error_in IN BOOLEAN := TRUE
)
IS
rows_out table_varchar;
BEGIN
ins(
ID_EPIS_DIAGNOSIS_IN => ID_EPIS_DIAGNOSIS_IN,
ID_PROFESSIONAL_IN => ID_PROFESSIONAL_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
ADW_LAST_UPDATE_IN => ADW_LAST_UPDATE_IN,
NOTES_IN => NOTES_IN,
FLG_FINAL_TYPE_IN => FLG_FINAL_TYPE_IN,
ID_EPIS_DIAGNOSIS_NOTES_IN => ID_EPIS_DIAGNOSIS_NOTES_IN,
DT_CREATION_TSTZ_IN => DT_CREATION_TSTZ_IN,
ID_CANCEL_REASON_IN => ID_CANCEL_REASON_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
ID_EPISODE_ORIGIN_IN => ID_EPISODE_ORIGIN_IN,
FLG_ADD_PROBLEM_IN => FLG_ADD_PROBLEM_IN,
ID_CDR_CALL_IN => ID_CDR_CALL_IN,
DT_INITIAL_DIAG_IN => DT_INITIAL_DIAG_IN,
ID_DIAG_BASIS_IN => ID_DIAG_BASIS_IN,
ID_DBASIS_INST_OWNER_IN => ID_DBASIS_INST_OWNER_IN,
DIAG_BASIS_SPEC_IN => DIAG_BASIS_SPEC_IN,
FLG_RECURRENCE_IN => FLG_RECURRENCE_IN,
FLG_MULT_TUMORS_IN => FLG_MULT_TUMORS_IN,
NUM_PRIMARY_TUMORS_IN => NUM_PRIMARY_TUMORS_IN,
ID_SUB_ANALYSIS_IN => ID_SUB_ANALYSIS_IN,
ID_SUBANALY_INST_OWNER_IN => ID_SUBANALY_INST_OWNER_IN,
ID_ANATOMICAL_AREA_IN => ID_ANATOMICAL_AREA_IN,
ID_ANATAREA_INST_OWNER_IN => ID_ANATAREA_INST_OWNER_IN,
ID_ANATOMICAL_SIDE_IN => ID_ANATOMICAL_SIDE_IN,
ID_ANATSIDE_INST_OWNER_IN => ID_ANATSIDE_INST_OWNER_IN,
ID_DIAGNOSIS_CONDITION_IN => ID_DIAGNOSIS_CONDITION_IN,
ID_DIAGCOND_INST_OWNER_IN => ID_DIAGCOND_INST_OWNER_IN,
ID_LESION_LOCATION_IN => ID_LESION_LOCATION_IN,
ID_LESION_LOCAT_INST_OWNER_IN => ID_LESION_LOCAT_INST_OWNER_IN,
ID_LESION_TYPE_IN => ID_LESION_TYPE_IN,
ID_LESION_TYPE_INST_OWNER_IN => ID_LESION_TYPE_INST_OWNER_IN,
RANK_IN => RANK_IN,
ID_EPIS_DIAGNOSIS_HIST_OUT => ID_EPIS_DIAGNOSIS_HIST_OUT,
handle_error_in       => handle_error_in,
rows_out              => rows_out);
END ins;

-- Insert one row with function, return generated primary key
FUNCTION ins
(
ID_EPIS_DIAGNOSIS_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
ID_PROFESSIONAL_in IN EPIS_DIAGNOSIS_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_DIAGNOSIS_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_TYPE%TYPE DEFAULT NULL,
ADW_LAST_UPDATE_in IN EPIS_DIAGNOSIS_HIST.ADW_LAST_UPDATE%TYPE DEFAULT sysdate ,
NOTES_in IN EPIS_DIAGNOSIS_HIST.NOTES%TYPE DEFAULT NULL,
FLG_FINAL_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_FINAL_TYPE%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_NOTES_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS_NOTES%TYPE DEFAULT NULL,
DT_CREATION_TSTZ_in IN EPIS_DIAGNOSIS_HIST.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
ID_CANCEL_REASON_in IN EPIS_DIAGNOSIS_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_DIAGNOSIS_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_DIAGNOSIS_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_DIAGNOSIS_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_DIAGNOSIS_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
ID_EPISODE_ORIGIN_in IN EPIS_DIAGNOSIS_HIST.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
FLG_ADD_PROBLEM_in IN EPIS_DIAGNOSIS_HIST.FLG_ADD_PROBLEM%TYPE DEFAULT NULL,
ID_CDR_CALL_in IN EPIS_DIAGNOSIS_HIST.ID_CDR_CALL%TYPE DEFAULT NULL,
DT_INITIAL_DIAG_in IN EPIS_DIAGNOSIS_HIST.DT_INITIAL_DIAG%TYPE DEFAULT NULL,
ID_DIAG_BASIS_in IN EPIS_DIAGNOSIS_HIST.ID_DIAG_BASIS%TYPE DEFAULT NULL,
ID_DBASIS_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DBASIS_INST_OWNER%TYPE DEFAULT NULL,
DIAG_BASIS_SPEC_in IN EPIS_DIAGNOSIS_HIST.DIAG_BASIS_SPEC%TYPE DEFAULT NULL,
FLG_RECURRENCE_in IN EPIS_DIAGNOSIS_HIST.FLG_RECURRENCE%TYPE DEFAULT NULL,
FLG_MULT_TUMORS_in IN EPIS_DIAGNOSIS_HIST.FLG_MULT_TUMORS%TYPE DEFAULT NULL,
NUM_PRIMARY_TUMORS_in IN EPIS_DIAGNOSIS_HIST.NUM_PRIMARY_TUMORS%TYPE DEFAULT NULL,
ID_SUB_ANALYSIS_in IN EPIS_DIAGNOSIS_HIST.ID_SUB_ANALYSIS%TYPE DEFAULT NULL,
ID_SUBANALY_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_SUBANALY_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_AREA_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_AREA%TYPE DEFAULT NULL,
ID_ANATAREA_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATAREA_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_SIDE_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_SIDE%TYPE DEFAULT NULL,
ID_ANATSIDE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATSIDE_INST_OWNER%TYPE DEFAULT NULL,
ID_DIAGNOSIS_CONDITION_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGNOSIS_CONDITION%TYPE DEFAULT NULL,
ID_DIAGCOND_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGCOND_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_LOCATION_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCATION%TYPE DEFAULT NULL,
ID_LESION_LOCAT_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCAT_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_TYPE_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE%TYPE DEFAULT NULL,
ID_LESION_TYPE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE_INST_OWNER%TYPE DEFAULT NULL,
RANK_in IN EPIS_DIAGNOSIS_HIST.RANK%TYPE DEFAULT NULL,
-- Pass false if you want errors to propagate out unhandled
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
) RETURN epis_diagnosis_hist.ID_EPIS_DIAGNOSIS_HIST%TYPE
IS
l_pky epis_diagnosis_hist.ID_EPIS_DIAGNOSIS_HIST%TYPE := next_key;
BEGIN
ins(
ID_EPIS_DIAGNOSIS_HIST_IN => l_pky,
ID_EPIS_DIAGNOSIS_IN => ID_EPIS_DIAGNOSIS_IN,
ID_PROFESSIONAL_IN => ID_PROFESSIONAL_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
ADW_LAST_UPDATE_IN => ADW_LAST_UPDATE_IN,
NOTES_IN => NOTES_IN,
FLG_FINAL_TYPE_IN => FLG_FINAL_TYPE_IN,
ID_EPIS_DIAGNOSIS_NOTES_IN => ID_EPIS_DIAGNOSIS_NOTES_IN,
DT_CREATION_TSTZ_IN => DT_CREATION_TSTZ_IN,
ID_CANCEL_REASON_IN => ID_CANCEL_REASON_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
ID_EPISODE_ORIGIN_IN => ID_EPISODE_ORIGIN_IN,
FLG_ADD_PROBLEM_IN => FLG_ADD_PROBLEM_IN,
ID_CDR_CALL_IN => ID_CDR_CALL_IN,
DT_INITIAL_DIAG_IN => DT_INITIAL_DIAG_IN,
ID_DIAG_BASIS_IN => ID_DIAG_BASIS_IN,
ID_DBASIS_INST_OWNER_IN => ID_DBASIS_INST_OWNER_IN,
DIAG_BASIS_SPEC_IN => DIAG_BASIS_SPEC_IN,
FLG_RECURRENCE_IN => FLG_RECURRENCE_IN,
FLG_MULT_TUMORS_IN => FLG_MULT_TUMORS_IN,
NUM_PRIMARY_TUMORS_IN => NUM_PRIMARY_TUMORS_IN,
ID_SUB_ANALYSIS_IN => ID_SUB_ANALYSIS_IN,
ID_SUBANALY_INST_OWNER_IN => ID_SUBANALY_INST_OWNER_IN,
ID_ANATOMICAL_AREA_IN => ID_ANATOMICAL_AREA_IN,
ID_ANATAREA_INST_OWNER_IN => ID_ANATAREA_INST_OWNER_IN,
ID_ANATOMICAL_SIDE_IN => ID_ANATOMICAL_SIDE_IN,
ID_ANATSIDE_INST_OWNER_IN => ID_ANATSIDE_INST_OWNER_IN,
ID_DIAGNOSIS_CONDITION_IN => ID_DIAGNOSIS_CONDITION_IN,
ID_DIAGCOND_INST_OWNER_IN => ID_DIAGCOND_INST_OWNER_IN,
ID_LESION_LOCATION_IN => ID_LESION_LOCATION_IN,
ID_LESION_LOCAT_INST_OWNER_IN => ID_LESION_LOCAT_INST_OWNER_IN,
ID_LESION_TYPE_IN => ID_LESION_TYPE_IN,
ID_LESION_TYPE_INST_OWNER_IN => ID_LESION_TYPE_INST_OWNER_IN,
RANK_IN => RANK_IN,
handle_error_in       => handle_error_in,
rows_out              => rows_out);
RETURN l_pky;
END ins;

-- Insert one row with function, return generated primary key
FUNCTION ins
(
ID_EPIS_DIAGNOSIS_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
ID_PROFESSIONAL_in IN EPIS_DIAGNOSIS_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_DIAGNOSIS_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_TYPE%TYPE DEFAULT NULL,
ADW_LAST_UPDATE_in IN EPIS_DIAGNOSIS_HIST.ADW_LAST_UPDATE%TYPE DEFAULT sysdate ,
NOTES_in IN EPIS_DIAGNOSIS_HIST.NOTES%TYPE DEFAULT NULL,
FLG_FINAL_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_FINAL_TYPE%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_NOTES_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS_NOTES%TYPE DEFAULT NULL,
DT_CREATION_TSTZ_in IN EPIS_DIAGNOSIS_HIST.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
ID_CANCEL_REASON_in IN EPIS_DIAGNOSIS_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_DIAGNOSIS_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_DIAGNOSIS_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_DIAGNOSIS_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_DIAGNOSIS_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
ID_EPISODE_ORIGIN_in IN EPIS_DIAGNOSIS_HIST.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
FLG_ADD_PROBLEM_in IN EPIS_DIAGNOSIS_HIST.FLG_ADD_PROBLEM%TYPE DEFAULT NULL,
ID_CDR_CALL_in IN EPIS_DIAGNOSIS_HIST.ID_CDR_CALL%TYPE DEFAULT NULL,
DT_INITIAL_DIAG_in IN EPIS_DIAGNOSIS_HIST.DT_INITIAL_DIAG%TYPE DEFAULT NULL,
ID_DIAG_BASIS_in IN EPIS_DIAGNOSIS_HIST.ID_DIAG_BASIS%TYPE DEFAULT NULL,
ID_DBASIS_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DBASIS_INST_OWNER%TYPE DEFAULT NULL,
DIAG_BASIS_SPEC_in IN EPIS_DIAGNOSIS_HIST.DIAG_BASIS_SPEC%TYPE DEFAULT NULL,
FLG_RECURRENCE_in IN EPIS_DIAGNOSIS_HIST.FLG_RECURRENCE%TYPE DEFAULT NULL,
FLG_MULT_TUMORS_in IN EPIS_DIAGNOSIS_HIST.FLG_MULT_TUMORS%TYPE DEFAULT NULL,
NUM_PRIMARY_TUMORS_in IN EPIS_DIAGNOSIS_HIST.NUM_PRIMARY_TUMORS%TYPE DEFAULT NULL,
ID_SUB_ANALYSIS_in IN EPIS_DIAGNOSIS_HIST.ID_SUB_ANALYSIS%TYPE DEFAULT NULL,
ID_SUBANALY_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_SUBANALY_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_AREA_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_AREA%TYPE DEFAULT NULL,
ID_ANATAREA_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATAREA_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_SIDE_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_SIDE%TYPE DEFAULT NULL,
ID_ANATSIDE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATSIDE_INST_OWNER%TYPE DEFAULT NULL,
ID_DIAGNOSIS_CONDITION_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGNOSIS_CONDITION%TYPE DEFAULT NULL,
ID_DIAGCOND_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGCOND_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_LOCATION_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCATION%TYPE DEFAULT NULL,
ID_LESION_LOCAT_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCAT_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_TYPE_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE%TYPE DEFAULT NULL,
ID_LESION_TYPE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE_INST_OWNER%TYPE DEFAULT NULL,
RANK_in IN EPIS_DIAGNOSIS_HIST.RANK%TYPE DEFAULT NULL,
-- Pass false if you want errors to propagate out unhandled
handle_error_in IN BOOLEAN := TRUE
) RETURN epis_diagnosis_hist.ID_EPIS_DIAGNOSIS_HIST%TYPE
IS
l_pky    epis_diagnosis_hist.ID_EPIS_DIAGNOSIS_HIST%TYPE := next_key;
rows_out table_varchar;
BEGIN
ins(
ID_EPIS_DIAGNOSIS_HIST_IN => l_pky,
ID_EPIS_DIAGNOSIS_IN => ID_EPIS_DIAGNOSIS_IN,
ID_PROFESSIONAL_IN => ID_PROFESSIONAL_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
ADW_LAST_UPDATE_IN => ADW_LAST_UPDATE_IN,
NOTES_IN => NOTES_IN,
FLG_FINAL_TYPE_IN => FLG_FINAL_TYPE_IN,
ID_EPIS_DIAGNOSIS_NOTES_IN => ID_EPIS_DIAGNOSIS_NOTES_IN,
DT_CREATION_TSTZ_IN => DT_CREATION_TSTZ_IN,
ID_CANCEL_REASON_IN => ID_CANCEL_REASON_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
ID_EPISODE_ORIGIN_IN => ID_EPISODE_ORIGIN_IN,
FLG_ADD_PROBLEM_IN => FLG_ADD_PROBLEM_IN,
ID_CDR_CALL_IN => ID_CDR_CALL_IN,
DT_INITIAL_DIAG_IN => DT_INITIAL_DIAG_IN,
ID_DIAG_BASIS_IN => ID_DIAG_BASIS_IN,
ID_DBASIS_INST_OWNER_IN => ID_DBASIS_INST_OWNER_IN,
DIAG_BASIS_SPEC_IN => DIAG_BASIS_SPEC_IN,
FLG_RECURRENCE_IN => FLG_RECURRENCE_IN,
FLG_MULT_TUMORS_IN => FLG_MULT_TUMORS_IN,
NUM_PRIMARY_TUMORS_IN => NUM_PRIMARY_TUMORS_IN,
ID_SUB_ANALYSIS_IN => ID_SUB_ANALYSIS_IN,
ID_SUBANALY_INST_OWNER_IN => ID_SUBANALY_INST_OWNER_IN,
ID_ANATOMICAL_AREA_IN => ID_ANATOMICAL_AREA_IN,
ID_ANATAREA_INST_OWNER_IN => ID_ANATAREA_INST_OWNER_IN,
ID_ANATOMICAL_SIDE_IN => ID_ANATOMICAL_SIDE_IN,
ID_ANATSIDE_INST_OWNER_IN => ID_ANATSIDE_INST_OWNER_IN,
ID_DIAGNOSIS_CONDITION_IN => ID_DIAGNOSIS_CONDITION_IN,
ID_DIAGCOND_INST_OWNER_IN => ID_DIAGCOND_INST_OWNER_IN,
ID_LESION_LOCATION_IN => ID_LESION_LOCATION_IN,
ID_LESION_LOCAT_INST_OWNER_IN => ID_LESION_LOCAT_INST_OWNER_IN,
ID_LESION_TYPE_IN => ID_LESION_TYPE_IN,
ID_LESION_TYPE_INST_OWNER_IN => ID_LESION_TYPE_INST_OWNER_IN,
RANK_IN => RANK_IN,
handle_error_in       => handle_error_in,
rows_out              => rows_out);
RETURN l_pky;
END ins;

PROCEDURE ins
(
ID_EPIS_DIAGNOSIS_HIST_in IN epis_diagnosis_hist.ID_EPIS_DIAGNOSIS_HIST%TYPE,
ID_EPIS_DIAGNOSIS_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
ID_PROFESSIONAL_in IN EPIS_DIAGNOSIS_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_DIAGNOSIS_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_TYPE%TYPE DEFAULT NULL,
ADW_LAST_UPDATE_in IN EPIS_DIAGNOSIS_HIST.ADW_LAST_UPDATE%TYPE DEFAULT sysdate ,
NOTES_in IN EPIS_DIAGNOSIS_HIST.NOTES%TYPE DEFAULT NULL,
FLG_FINAL_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_FINAL_TYPE%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_NOTES_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS_NOTES%TYPE DEFAULT NULL,
DT_CREATION_TSTZ_in IN EPIS_DIAGNOSIS_HIST.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
ID_CANCEL_REASON_in IN EPIS_DIAGNOSIS_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_DIAGNOSIS_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_DIAGNOSIS_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_DIAGNOSIS_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_DIAGNOSIS_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
ID_EPISODE_ORIGIN_in IN EPIS_DIAGNOSIS_HIST.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
FLG_ADD_PROBLEM_in IN EPIS_DIAGNOSIS_HIST.FLG_ADD_PROBLEM%TYPE DEFAULT NULL,
ID_CDR_CALL_in IN EPIS_DIAGNOSIS_HIST.ID_CDR_CALL%TYPE DEFAULT NULL,
DT_INITIAL_DIAG_in IN EPIS_DIAGNOSIS_HIST.DT_INITIAL_DIAG%TYPE DEFAULT NULL,
ID_DIAG_BASIS_in IN EPIS_DIAGNOSIS_HIST.ID_DIAG_BASIS%TYPE DEFAULT NULL,
ID_DBASIS_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DBASIS_INST_OWNER%TYPE DEFAULT NULL,
DIAG_BASIS_SPEC_in IN EPIS_DIAGNOSIS_HIST.DIAG_BASIS_SPEC%TYPE DEFAULT NULL,
FLG_RECURRENCE_in IN EPIS_DIAGNOSIS_HIST.FLG_RECURRENCE%TYPE DEFAULT NULL,
FLG_MULT_TUMORS_in IN EPIS_DIAGNOSIS_HIST.FLG_MULT_TUMORS%TYPE DEFAULT NULL,
NUM_PRIMARY_TUMORS_in IN EPIS_DIAGNOSIS_HIST.NUM_PRIMARY_TUMORS%TYPE DEFAULT NULL,
ID_SUB_ANALYSIS_in IN EPIS_DIAGNOSIS_HIST.ID_SUB_ANALYSIS%TYPE DEFAULT NULL,
ID_SUBANALY_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_SUBANALY_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_AREA_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_AREA%TYPE DEFAULT NULL,
ID_ANATAREA_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATAREA_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_SIDE_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_SIDE%TYPE DEFAULT NULL,
ID_ANATSIDE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATSIDE_INST_OWNER%TYPE DEFAULT NULL,
ID_DIAGNOSIS_CONDITION_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGNOSIS_CONDITION%TYPE DEFAULT NULL,
ID_DIAGCOND_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGCOND_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_LOCATION_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCATION%TYPE DEFAULT NULL,
ID_LESION_LOCAT_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCAT_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_TYPE_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE%TYPE DEFAULT NULL,
ID_LESION_TYPE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE_INST_OWNER%TYPE DEFAULT NULL,
RANK_in IN EPIS_DIAGNOSIS_HIST.RANK%TYPE DEFAULT NULL,
handle_error_in IN BOOLEAN := TRUE,
rows_out OUT table_varchar
) IS
BEGIN
INSERT INTO epis_diagnosis_hist
(
ID_EPIS_DIAGNOSIS_HIST,
ID_EPIS_DIAGNOSIS,
ID_PROFESSIONAL,
FLG_STATUS,
FLG_TYPE,
ADW_LAST_UPDATE,
NOTES,
FLG_FINAL_TYPE,
ID_EPIS_DIAGNOSIS_NOTES,
DT_CREATION_TSTZ,
ID_CANCEL_REASON,
CREATE_USER,
CREATE_TIME,
CREATE_INSTITUTION,
UPDATE_USER,
UPDATE_TIME,
UPDATE_INSTITUTION,
ID_EPISODE_ORIGIN,
FLG_ADD_PROBLEM,
ID_CDR_CALL,
DT_INITIAL_DIAG,
ID_DIAG_BASIS,
ID_DBASIS_INST_OWNER,
DIAG_BASIS_SPEC,
FLG_RECURRENCE,
FLG_MULT_TUMORS,
NUM_PRIMARY_TUMORS,
ID_SUB_ANALYSIS,
ID_SUBANALY_INST_OWNER,
ID_ANATOMICAL_AREA,
ID_ANATAREA_INST_OWNER,
ID_ANATOMICAL_SIDE,
ID_ANATSIDE_INST_OWNER,
ID_DIAGNOSIS_CONDITION,
ID_DIAGCOND_INST_OWNER,
ID_LESION_LOCATION,
ID_LESION_LOCAT_INST_OWNER,
ID_LESION_TYPE,
ID_LESION_TYPE_INST_OWNER,
RANK
)
 VALUES
(
ID_EPIS_DIAGNOSIS_HIST_IN,
ID_EPIS_DIAGNOSIS_IN,
ID_PROFESSIONAL_IN,
FLG_STATUS_IN,
FLG_TYPE_IN,
ADW_LAST_UPDATE_IN,
NOTES_IN,
FLG_FINAL_TYPE_IN,
ID_EPIS_DIAGNOSIS_NOTES_IN,
DT_CREATION_TSTZ_IN,
ID_CANCEL_REASON_IN,
CREATE_USER_IN,
CREATE_TIME_IN,
CREATE_INSTITUTION_IN,
UPDATE_USER_IN,
UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN,
ID_EPISODE_ORIGIN_IN,
FLG_ADD_PROBLEM_IN,
ID_CDR_CALL_IN,
DT_INITIAL_DIAG_IN,
ID_DIAG_BASIS_IN,
ID_DBASIS_INST_OWNER_IN,
DIAG_BASIS_SPEC_IN,
FLG_RECURRENCE_IN,
FLG_MULT_TUMORS_IN,
NUM_PRIMARY_TUMORS_IN,
ID_SUB_ANALYSIS_IN,
ID_SUBANALY_INST_OWNER_IN,
ID_ANATOMICAL_AREA_IN,
ID_ANATAREA_INST_OWNER_IN,
ID_ANATOMICAL_SIDE_IN,
ID_ANATSIDE_INST_OWNER_IN,
ID_DIAGNOSIS_CONDITION_IN,
ID_DIAGCOND_INST_OWNER_IN,
ID_LESION_LOCATION_IN,
ID_LESION_LOCAT_INST_OWNER_IN,
ID_LESION_TYPE_IN,
ID_LESION_TYPE_INST_OWNER_IN,
RANK_IN
)
RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end ins;

PROCEDURE ins
(
ID_EPIS_DIAGNOSIS_HIST_in IN epis_diagnosis_hist.ID_EPIS_DIAGNOSIS_HIST%TYPE,
ID_EPIS_DIAGNOSIS_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
ID_PROFESSIONAL_in IN EPIS_DIAGNOSIS_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_DIAGNOSIS_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_TYPE%TYPE DEFAULT NULL,
ADW_LAST_UPDATE_in IN EPIS_DIAGNOSIS_HIST.ADW_LAST_UPDATE%TYPE DEFAULT sysdate ,
NOTES_in IN EPIS_DIAGNOSIS_HIST.NOTES%TYPE DEFAULT NULL,
FLG_FINAL_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_FINAL_TYPE%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_NOTES_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS_NOTES%TYPE DEFAULT NULL,
DT_CREATION_TSTZ_in IN EPIS_DIAGNOSIS_HIST.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
ID_CANCEL_REASON_in IN EPIS_DIAGNOSIS_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_DIAGNOSIS_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_DIAGNOSIS_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_DIAGNOSIS_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_DIAGNOSIS_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
ID_EPISODE_ORIGIN_in IN EPIS_DIAGNOSIS_HIST.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
FLG_ADD_PROBLEM_in IN EPIS_DIAGNOSIS_HIST.FLG_ADD_PROBLEM%TYPE DEFAULT NULL,
ID_CDR_CALL_in IN EPIS_DIAGNOSIS_HIST.ID_CDR_CALL%TYPE DEFAULT NULL,
DT_INITIAL_DIAG_in IN EPIS_DIAGNOSIS_HIST.DT_INITIAL_DIAG%TYPE DEFAULT NULL,
ID_DIAG_BASIS_in IN EPIS_DIAGNOSIS_HIST.ID_DIAG_BASIS%TYPE DEFAULT NULL,
ID_DBASIS_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DBASIS_INST_OWNER%TYPE DEFAULT NULL,
DIAG_BASIS_SPEC_in IN EPIS_DIAGNOSIS_HIST.DIAG_BASIS_SPEC%TYPE DEFAULT NULL,
FLG_RECURRENCE_in IN EPIS_DIAGNOSIS_HIST.FLG_RECURRENCE%TYPE DEFAULT NULL,
FLG_MULT_TUMORS_in IN EPIS_DIAGNOSIS_HIST.FLG_MULT_TUMORS%TYPE DEFAULT NULL,
NUM_PRIMARY_TUMORS_in IN EPIS_DIAGNOSIS_HIST.NUM_PRIMARY_TUMORS%TYPE DEFAULT NULL,
ID_SUB_ANALYSIS_in IN EPIS_DIAGNOSIS_HIST.ID_SUB_ANALYSIS%TYPE DEFAULT NULL,
ID_SUBANALY_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_SUBANALY_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_AREA_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_AREA%TYPE DEFAULT NULL,
ID_ANATAREA_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATAREA_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_SIDE_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_SIDE%TYPE DEFAULT NULL,
ID_ANATSIDE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATSIDE_INST_OWNER%TYPE DEFAULT NULL,
ID_DIAGNOSIS_CONDITION_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGNOSIS_CONDITION%TYPE DEFAULT NULL,
ID_DIAGCOND_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGCOND_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_LOCATION_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCATION%TYPE DEFAULT NULL,
ID_LESION_LOCAT_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCAT_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_TYPE_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE%TYPE DEFAULT NULL,
ID_LESION_TYPE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE_INST_OWNER%TYPE DEFAULT NULL,
RANK_in IN EPIS_DIAGNOSIS_HIST.RANK%TYPE DEFAULT NULL,
handle_error_in IN BOOLEAN := TRUE
) IS
rows_out table_varchar;
BEGIN
ins(
ID_EPIS_DIAGNOSIS_HIST_IN => ID_EPIS_DIAGNOSIS_HIST_IN,
ID_EPIS_DIAGNOSIS_IN => ID_EPIS_DIAGNOSIS_IN,
ID_PROFESSIONAL_IN => ID_PROFESSIONAL_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
ADW_LAST_UPDATE_IN => ADW_LAST_UPDATE_IN,
NOTES_IN => NOTES_IN,
FLG_FINAL_TYPE_IN => FLG_FINAL_TYPE_IN,
ID_EPIS_DIAGNOSIS_NOTES_IN => ID_EPIS_DIAGNOSIS_NOTES_IN,
DT_CREATION_TSTZ_IN => DT_CREATION_TSTZ_IN,
ID_CANCEL_REASON_IN => ID_CANCEL_REASON_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
ID_EPISODE_ORIGIN_IN => ID_EPISODE_ORIGIN_IN,
FLG_ADD_PROBLEM_IN => FLG_ADD_PROBLEM_IN,
ID_CDR_CALL_IN => ID_CDR_CALL_IN,
DT_INITIAL_DIAG_IN => DT_INITIAL_DIAG_IN,
ID_DIAG_BASIS_IN => ID_DIAG_BASIS_IN,
ID_DBASIS_INST_OWNER_IN => ID_DBASIS_INST_OWNER_IN,
DIAG_BASIS_SPEC_IN => DIAG_BASIS_SPEC_IN,
FLG_RECURRENCE_IN => FLG_RECURRENCE_IN,
FLG_MULT_TUMORS_IN => FLG_MULT_TUMORS_IN,
NUM_PRIMARY_TUMORS_IN => NUM_PRIMARY_TUMORS_IN,
ID_SUB_ANALYSIS_IN => ID_SUB_ANALYSIS_IN,
ID_SUBANALY_INST_OWNER_IN => ID_SUBANALY_INST_OWNER_IN,
ID_ANATOMICAL_AREA_IN => ID_ANATOMICAL_AREA_IN,
ID_ANATAREA_INST_OWNER_IN => ID_ANATAREA_INST_OWNER_IN,
ID_ANATOMICAL_SIDE_IN => ID_ANATOMICAL_SIDE_IN,
ID_ANATSIDE_INST_OWNER_IN => ID_ANATSIDE_INST_OWNER_IN,
ID_DIAGNOSIS_CONDITION_IN => ID_DIAGNOSIS_CONDITION_IN,
ID_DIAGCOND_INST_OWNER_IN => ID_DIAGCOND_INST_OWNER_IN,
ID_LESION_LOCATION_IN => ID_LESION_LOCATION_IN,
ID_LESION_LOCAT_INST_OWNER_IN => ID_LESION_LOCAT_INST_OWNER_IN,
ID_LESION_TYPE_IN => ID_LESION_TYPE_IN,
ID_LESION_TYPE_INST_OWNER_IN => ID_LESION_TYPE_INST_OWNER_IN,
RANK_IN => RANK_IN,
handle_error_in => handle_error_in,
rows_out => rows_out);
END ins;

PROCEDURE ins
(
rec_in          IN epis_diagnosis_hist%ROWTYPE,
gen_pky_in      IN BOOLEAN DEFAULT FALSE,
sequence_in     IN VARCHAR2 := NULL,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
) IS
l_rec epis_diagnosis_hist%ROWTYPE := rec_in;
BEGIN
IF gen_pky_in
THEN
l_rec.ID_EPIS_DIAGNOSIS_HIST := next_key(sequence_in);
END IF;

ins(
ID_EPIS_DIAGNOSIS_HIST_IN => l_rec.ID_EPIS_DIAGNOSIS_HIST,
ID_EPIS_DIAGNOSIS_IN => l_rec.ID_EPIS_DIAGNOSIS,
ID_PROFESSIONAL_IN => l_rec.ID_PROFESSIONAL,
FLG_STATUS_IN => l_rec.FLG_STATUS,
FLG_TYPE_IN => l_rec.FLG_TYPE,
ADW_LAST_UPDATE_IN => l_rec.ADW_LAST_UPDATE,
NOTES_IN => l_rec.NOTES,
FLG_FINAL_TYPE_IN => l_rec.FLG_FINAL_TYPE,
ID_EPIS_DIAGNOSIS_NOTES_IN => l_rec.ID_EPIS_DIAGNOSIS_NOTES,
DT_CREATION_TSTZ_IN => l_rec.DT_CREATION_TSTZ,
ID_CANCEL_REASON_IN => l_rec.ID_CANCEL_REASON,
CREATE_USER_IN => l_rec.CREATE_USER,
CREATE_TIME_IN => l_rec.CREATE_TIME,
CREATE_INSTITUTION_IN => l_rec.CREATE_INSTITUTION,
UPDATE_USER_IN => l_rec.UPDATE_USER,
UPDATE_TIME_IN => l_rec.UPDATE_TIME,
UPDATE_INSTITUTION_IN => l_rec.UPDATE_INSTITUTION,
ID_EPISODE_ORIGIN_IN => l_rec.ID_EPISODE_ORIGIN,
FLG_ADD_PROBLEM_IN => l_rec.FLG_ADD_PROBLEM,
ID_CDR_CALL_IN => l_rec.ID_CDR_CALL,
DT_INITIAL_DIAG_IN => l_rec.DT_INITIAL_DIAG,
ID_DIAG_BASIS_IN => l_rec.ID_DIAG_BASIS,
ID_DBASIS_INST_OWNER_IN => l_rec.ID_DBASIS_INST_OWNER,
DIAG_BASIS_SPEC_IN => l_rec.DIAG_BASIS_SPEC,
FLG_RECURRENCE_IN => l_rec.FLG_RECURRENCE,
FLG_MULT_TUMORS_IN => l_rec.FLG_MULT_TUMORS,
NUM_PRIMARY_TUMORS_IN => l_rec.NUM_PRIMARY_TUMORS,
ID_SUB_ANALYSIS_IN => l_rec.ID_SUB_ANALYSIS,
ID_SUBANALY_INST_OWNER_IN => l_rec.ID_SUBANALY_INST_OWNER,
ID_ANATOMICAL_AREA_IN => l_rec.ID_ANATOMICAL_AREA,
ID_ANATAREA_INST_OWNER_IN => l_rec.ID_ANATAREA_INST_OWNER,
ID_ANATOMICAL_SIDE_IN => l_rec.ID_ANATOMICAL_SIDE,
ID_ANATSIDE_INST_OWNER_IN => l_rec.ID_ANATSIDE_INST_OWNER,
ID_DIAGNOSIS_CONDITION_IN => l_rec.ID_DIAGNOSIS_CONDITION,
ID_DIAGCOND_INST_OWNER_IN => l_rec.ID_DIAGCOND_INST_OWNER,
ID_LESION_LOCATION_IN => l_rec.ID_LESION_LOCATION,
ID_LESION_LOCAT_INST_OWNER_IN => l_rec.ID_LESION_LOCAT_INST_OWNER,
ID_LESION_TYPE_IN => l_rec.ID_LESION_TYPE,
ID_LESION_TYPE_INST_OWNER_IN => l_rec.ID_LESION_TYPE_INST_OWNER,
RANK_IN => l_rec.RANK,
handle_error_in       => handle_error_in,
rows_out              => rows_out);
END ins;

PROCEDURE ins
(
rec_in          IN epis_diagnosis_hist%ROWTYPE,
gen_pky_in      IN BOOLEAN DEFAULT FALSE,
sequence_in     IN VARCHAR2 := NULL,
handle_error_in IN BOOLEAN := TRUE
) IS
rows_out table_varchar;
BEGIN
ins(rec_in          => rec_in,
gen_pky_in      => gen_pky_in,
sequence_in     => sequence_in,
handle_error_in => handle_error_in,
rows_out        => rows_out);
END ins;

-- Insert a collection of rows using FORALL; all primary key values
-- must have already been generated, or are handled in triggers
PROCEDURE ins
(
rows_in         IN epis_diagnosis_hist_tc,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
IS
BEGIN
IF rows_in.COUNT = 0
THEN
NULL;
ELSE
FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
INSERT INTO epis_diagnosis_hist
VALUES rows_in
(indx)
RETURNING ROWID BULK COLLECT INTO rows_out;
END IF;

EXCEPTION
WHEN e_forall_error THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
LOOP
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END LOOP;
END IF;
WHEN OTHERS THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

END ins;

-- Insert a collection of rows using FORALL; all primary key values
-- must have already been generated, or are handled in triggers
PROCEDURE ins
(
rows_in         IN epis_diagnosis_hist_tc,
handle_error_in IN BOOLEAN := TRUE
)
IS
rows_out table_varchar;
BEGIN
ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
END ins;

-- Update any/all columns by primary key. If you pass NULL, then
-- the current column value is set to itself. If you need a more
-- selected UPDATE then use one of the onecol procedures below.
PROCEDURE upd
(
ID_EPIS_DIAGNOSIS_HIST_in IN epis_diagnosis_hist.ID_EPIS_DIAGNOSIS_HIST%TYPE,
ID_EPIS_DIAGNOSIS_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_nin IN BOOLEAN := TRUE,
ID_PROFESSIONAL_in IN EPIS_DIAGNOSIS_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
FLG_STATUS_in IN EPIS_DIAGNOSIS_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_STATUS_nin IN BOOLEAN := TRUE,
FLG_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_TYPE_nin IN BOOLEAN := TRUE,
ADW_LAST_UPDATE_in IN EPIS_DIAGNOSIS_HIST.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
NOTES_in IN EPIS_DIAGNOSIS_HIST.NOTES%TYPE DEFAULT NULL,
NOTES_nin IN BOOLEAN := TRUE,
FLG_FINAL_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_FINAL_TYPE%TYPE DEFAULT NULL,
FLG_FINAL_TYPE_nin IN BOOLEAN := TRUE,
ID_EPIS_DIAGNOSIS_NOTES_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS_NOTES%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_NOTES_nin IN BOOLEAN := TRUE,
DT_CREATION_TSTZ_in IN EPIS_DIAGNOSIS_HIST.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
DT_CREATION_TSTZ_nin IN BOOLEAN := TRUE,
ID_CANCEL_REASON_in IN EPIS_DIAGNOSIS_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN EPIS_DIAGNOSIS_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN EPIS_DIAGNOSIS_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN EPIS_DIAGNOSIS_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN EPIS_DIAGNOSIS_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
ID_EPISODE_ORIGIN_in IN EPIS_DIAGNOSIS_HIST.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
ID_EPISODE_ORIGIN_nin IN BOOLEAN := TRUE,
FLG_ADD_PROBLEM_in IN EPIS_DIAGNOSIS_HIST.FLG_ADD_PROBLEM%TYPE DEFAULT NULL,
FLG_ADD_PROBLEM_nin IN BOOLEAN := TRUE,
ID_CDR_CALL_in IN EPIS_DIAGNOSIS_HIST.ID_CDR_CALL%TYPE DEFAULT NULL,
ID_CDR_CALL_nin IN BOOLEAN := TRUE,
DT_INITIAL_DIAG_in IN EPIS_DIAGNOSIS_HIST.DT_INITIAL_DIAG%TYPE DEFAULT NULL,
DT_INITIAL_DIAG_nin IN BOOLEAN := TRUE,
ID_DIAG_BASIS_in IN EPIS_DIAGNOSIS_HIST.ID_DIAG_BASIS%TYPE DEFAULT NULL,
ID_DIAG_BASIS_nin IN BOOLEAN := TRUE,
ID_DBASIS_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DBASIS_INST_OWNER%TYPE DEFAULT NULL,
ID_DBASIS_INST_OWNER_nin IN BOOLEAN := TRUE,
DIAG_BASIS_SPEC_in IN EPIS_DIAGNOSIS_HIST.DIAG_BASIS_SPEC%TYPE DEFAULT NULL,
DIAG_BASIS_SPEC_nin IN BOOLEAN := TRUE,
FLG_RECURRENCE_in IN EPIS_DIAGNOSIS_HIST.FLG_RECURRENCE%TYPE DEFAULT NULL,
FLG_RECURRENCE_nin IN BOOLEAN := TRUE,
FLG_MULT_TUMORS_in IN EPIS_DIAGNOSIS_HIST.FLG_MULT_TUMORS%TYPE DEFAULT NULL,
FLG_MULT_TUMORS_nin IN BOOLEAN := TRUE,
NUM_PRIMARY_TUMORS_in IN EPIS_DIAGNOSIS_HIST.NUM_PRIMARY_TUMORS%TYPE DEFAULT NULL,
NUM_PRIMARY_TUMORS_nin IN BOOLEAN := TRUE,
ID_SUB_ANALYSIS_in IN EPIS_DIAGNOSIS_HIST.ID_SUB_ANALYSIS%TYPE DEFAULT NULL,
ID_SUB_ANALYSIS_nin IN BOOLEAN := TRUE,
ID_SUBANALY_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_SUBANALY_INST_OWNER%TYPE DEFAULT NULL,
ID_SUBANALY_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_ANATOMICAL_AREA_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_AREA%TYPE DEFAULT NULL,
ID_ANATOMICAL_AREA_nin IN BOOLEAN := TRUE,
ID_ANATAREA_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATAREA_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATAREA_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_ANATOMICAL_SIDE_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_SIDE%TYPE DEFAULT NULL,
ID_ANATOMICAL_SIDE_nin IN BOOLEAN := TRUE,
ID_ANATSIDE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATSIDE_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATSIDE_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_DIAGNOSIS_CONDITION_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGNOSIS_CONDITION%TYPE DEFAULT NULL,
ID_DIAGNOSIS_CONDITION_nin IN BOOLEAN := TRUE,
ID_DIAGCOND_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGCOND_INST_OWNER%TYPE DEFAULT NULL,
ID_DIAGCOND_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_LESION_LOCATION_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCATION%TYPE DEFAULT NULL,
ID_LESION_LOCATION_nin IN BOOLEAN := TRUE,
ID_LESION_LOCAT_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCAT_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_LOCAT_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_LESION_TYPE_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE%TYPE DEFAULT NULL,
ID_LESION_TYPE_nin IN BOOLEAN := TRUE,
ID_LESION_TYPE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_TYPE_INST_OWNER_nin IN BOOLEAN := TRUE,
RANK_in IN EPIS_DIAGNOSIS_HIST.RANK%TYPE DEFAULT NULL,
RANK_nin IN BOOLEAN := TRUE,
handle_error_in        IN BOOLEAN := TRUE,
rows_out               IN OUT table_varchar
)
is
l_rows_out             table_varchar;
l_ID_EPIS_DIAGNOSIS_n number(1) := sys.diutil.bool_to_int(ID_EPIS_DIAGNOSIS_nin);
l_ID_PROFESSIONAL_n number(1) := sys.diutil.bool_to_int(ID_PROFESSIONAL_nin);
l_FLG_STATUS_n number(1) := sys.diutil.bool_to_int(FLG_STATUS_nin);
l_FLG_TYPE_n number(1) := sys.diutil.bool_to_int(FLG_TYPE_nin);
l_ADW_LAST_UPDATE_n number(1) := sys.diutil.bool_to_int(ADW_LAST_UPDATE_nin);
l_NOTES_n number(1) := sys.diutil.bool_to_int(NOTES_nin);
l_FLG_FINAL_TYPE_n number(1) := sys.diutil.bool_to_int(FLG_FINAL_TYPE_nin);
l_ID_EPIS_DIAGNOSIS_NOTES_n number(1) := sys.diutil.bool_to_int(ID_EPIS_DIAGNOSIS_NOTES_nin);
l_DT_CREATION_TSTZ_n number(1) := sys.diutil.bool_to_int(DT_CREATION_TSTZ_nin);
l_ID_CANCEL_REASON_n number(1) := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
l_CREATE_USER_n number(1) := sys.diutil.bool_to_int(CREATE_USER_nin);
l_CREATE_TIME_n number(1) := sys.diutil.bool_to_int(CREATE_TIME_nin);
l_CREATE_INSTITUTION_n number(1) := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
l_UPDATE_USER_n number(1) := sys.diutil.bool_to_int(UPDATE_USER_nin);
l_UPDATE_TIME_n number(1) := sys.diutil.bool_to_int(UPDATE_TIME_nin);
l_UPDATE_INSTITUTION_n number(1) := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
l_ID_EPISODE_ORIGIN_n number(1) := sys.diutil.bool_to_int(ID_EPISODE_ORIGIN_nin);
l_FLG_ADD_PROBLEM_n number(1) := sys.diutil.bool_to_int(FLG_ADD_PROBLEM_nin);
l_ID_CDR_CALL_n number(1) := sys.diutil.bool_to_int(ID_CDR_CALL_nin);
l_DT_INITIAL_DIAG_n number(1) := sys.diutil.bool_to_int(DT_INITIAL_DIAG_nin);
l_ID_DIAG_BASIS_n number(1) := sys.diutil.bool_to_int(ID_DIAG_BASIS_nin);
l_ID_DBASIS_INST_OWNER_n number(1) := sys.diutil.bool_to_int(ID_DBASIS_INST_OWNER_nin);
l_DIAG_BASIS_SPEC_n number(1) := sys.diutil.bool_to_int(DIAG_BASIS_SPEC_nin);
l_FLG_RECURRENCE_n number(1) := sys.diutil.bool_to_int(FLG_RECURRENCE_nin);
l_FLG_MULT_TUMORS_n number(1) := sys.diutil.bool_to_int(FLG_MULT_TUMORS_nin);
l_NUM_PRIMARY_TUMORS_n number(1) := sys.diutil.bool_to_int(NUM_PRIMARY_TUMORS_nin);
l_ID_SUB_ANALYSIS_n number(1) := sys.diutil.bool_to_int(ID_SUB_ANALYSIS_nin);
l_ID_SUBANALY_INST_OWNER_n number(1) := sys.diutil.bool_to_int(ID_SUBANALY_INST_OWNER_nin);
l_ID_ANATOMICAL_AREA_n number(1) := sys.diutil.bool_to_int(ID_ANATOMICAL_AREA_nin);
l_ID_ANATAREA_INST_OWNER_n number(1) := sys.diutil.bool_to_int(ID_ANATAREA_INST_OWNER_nin);
l_ID_ANATOMICAL_SIDE_n number(1) := sys.diutil.bool_to_int(ID_ANATOMICAL_SIDE_nin);
l_ID_ANATSIDE_INST_OWNER_n number(1) := sys.diutil.bool_to_int(ID_ANATSIDE_INST_OWNER_nin);
l_ID_DIAGNOSIS_CONDITION_n number(1) := sys.diutil.bool_to_int(ID_DIAGNOSIS_CONDITION_nin);
l_ID_DIAGCOND_INST_OWNER_n number(1) := sys.diutil.bool_to_int(ID_DIAGCOND_INST_OWNER_nin);
l_ID_LESION_LOCATION_n number(1) := sys.diutil.bool_to_int(ID_LESION_LOCATION_nin);
l_ID_LESION_LOCAT_INST_OWNER_n number(1) := sys.diutil.bool_to_int(ID_LESION_LOCAT_INST_OWNER_nin);
l_ID_LESION_TYPE_n number(1) := sys.diutil.bool_to_int(ID_LESION_TYPE_nin);
l_ID_LESION_TYPE_INST_OWNER_n number(1) := sys.diutil.bool_to_int(ID_LESION_TYPE_INST_OWNER_nin);
l_RANK_n number(1) := sys.diutil.bool_to_int(RANK_nin);
begin

UPDATE epis_diagnosis_hist
SET
ID_EPIS_DIAGNOSIS = decode(l_ID_EPIS_DIAGNOSIS_n, 0, ID_EPIS_DIAGNOSIS_in, nvl(ID_EPIS_DIAGNOSIS_in, ID_EPIS_DIAGNOSIS)),
ID_PROFESSIONAL = decode(l_ID_PROFESSIONAL_n, 0, ID_PROFESSIONAL_in, nvl(ID_PROFESSIONAL_in, ID_PROFESSIONAL)),
FLG_STATUS = decode(l_FLG_STATUS_n, 0, FLG_STATUS_in, nvl(FLG_STATUS_in, FLG_STATUS)),
FLG_TYPE = decode(l_FLG_TYPE_n, 0, FLG_TYPE_in, nvl(FLG_TYPE_in, FLG_TYPE)),
ADW_LAST_UPDATE = decode(l_ADW_LAST_UPDATE_n, 0, ADW_LAST_UPDATE_in, nvl(ADW_LAST_UPDATE_in, ADW_LAST_UPDATE)),
NOTES = decode(l_NOTES_n, 0, NOTES_in, nvl(NOTES_in, NOTES)),
FLG_FINAL_TYPE = decode(l_FLG_FINAL_TYPE_n, 0, FLG_FINAL_TYPE_in, nvl(FLG_FINAL_TYPE_in, FLG_FINAL_TYPE)),
ID_EPIS_DIAGNOSIS_NOTES = decode(l_ID_EPIS_DIAGNOSIS_NOTES_n, 0, ID_EPIS_DIAGNOSIS_NOTES_in, nvl(ID_EPIS_DIAGNOSIS_NOTES_in, ID_EPIS_DIAGNOSIS_NOTES)),
DT_CREATION_TSTZ = decode(l_DT_CREATION_TSTZ_n, 0, DT_CREATION_TSTZ_in, nvl(DT_CREATION_TSTZ_in, DT_CREATION_TSTZ)),
ID_CANCEL_REASON = decode(l_ID_CANCEL_REASON_n, 0, ID_CANCEL_REASON_in, nvl(ID_CANCEL_REASON_in, ID_CANCEL_REASON)),
CREATE_USER = decode(l_CREATE_USER_n, 0, CREATE_USER_in, nvl(CREATE_USER_in, CREATE_USER)),
CREATE_TIME = decode(l_CREATE_TIME_n, 0, CREATE_TIME_in, nvl(CREATE_TIME_in, CREATE_TIME)),
CREATE_INSTITUTION = decode(l_CREATE_INSTITUTION_n, 0, CREATE_INSTITUTION_in, nvl(CREATE_INSTITUTION_in, CREATE_INSTITUTION)),
UPDATE_USER = decode(l_UPDATE_USER_n, 0, UPDATE_USER_in, nvl(UPDATE_USER_in, UPDATE_USER)),
UPDATE_TIME = decode(l_UPDATE_TIME_n, 0, UPDATE_TIME_in, nvl(UPDATE_TIME_in, UPDATE_TIME)),
UPDATE_INSTITUTION = decode(l_UPDATE_INSTITUTION_n, 0, UPDATE_INSTITUTION_in, nvl(UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)),
ID_EPISODE_ORIGIN = decode(l_ID_EPISODE_ORIGIN_n, 0, ID_EPISODE_ORIGIN_in, nvl(ID_EPISODE_ORIGIN_in, ID_EPISODE_ORIGIN)),
FLG_ADD_PROBLEM = decode(l_FLG_ADD_PROBLEM_n, 0, FLG_ADD_PROBLEM_in, nvl(FLG_ADD_PROBLEM_in, FLG_ADD_PROBLEM)),
ID_CDR_CALL = decode(l_ID_CDR_CALL_n, 0, ID_CDR_CALL_in, nvl(ID_CDR_CALL_in, ID_CDR_CALL)),
DT_INITIAL_DIAG = decode(l_DT_INITIAL_DIAG_n, 0, DT_INITIAL_DIAG_in, nvl(DT_INITIAL_DIAG_in, DT_INITIAL_DIAG)),
ID_DIAG_BASIS = decode(l_ID_DIAG_BASIS_n, 0, ID_DIAG_BASIS_in, nvl(ID_DIAG_BASIS_in, ID_DIAG_BASIS)),
ID_DBASIS_INST_OWNER = decode(l_ID_DBASIS_INST_OWNER_n, 0, ID_DBASIS_INST_OWNER_in, nvl(ID_DBASIS_INST_OWNER_in, ID_DBASIS_INST_OWNER)),
DIAG_BASIS_SPEC = decode(l_DIAG_BASIS_SPEC_n, 0, DIAG_BASIS_SPEC_in, nvl(DIAG_BASIS_SPEC_in, DIAG_BASIS_SPEC)),
FLG_RECURRENCE = decode(l_FLG_RECURRENCE_n, 0, FLG_RECURRENCE_in, nvl(FLG_RECURRENCE_in, FLG_RECURRENCE)),
FLG_MULT_TUMORS = decode(l_FLG_MULT_TUMORS_n, 0, FLG_MULT_TUMORS_in, nvl(FLG_MULT_TUMORS_in, FLG_MULT_TUMORS)),
NUM_PRIMARY_TUMORS = decode(l_NUM_PRIMARY_TUMORS_n, 0, NUM_PRIMARY_TUMORS_in, nvl(NUM_PRIMARY_TUMORS_in, NUM_PRIMARY_TUMORS)),
ID_SUB_ANALYSIS = decode(l_ID_SUB_ANALYSIS_n, 0, ID_SUB_ANALYSIS_in, nvl(ID_SUB_ANALYSIS_in, ID_SUB_ANALYSIS)),
ID_SUBANALY_INST_OWNER = decode(l_ID_SUBANALY_INST_OWNER_n, 0, ID_SUBANALY_INST_OWNER_in, nvl(ID_SUBANALY_INST_OWNER_in, ID_SUBANALY_INST_OWNER)),
ID_ANATOMICAL_AREA = decode(l_ID_ANATOMICAL_AREA_n, 0, ID_ANATOMICAL_AREA_in, nvl(ID_ANATOMICAL_AREA_in, ID_ANATOMICAL_AREA)),
ID_ANATAREA_INST_OWNER = decode(l_ID_ANATAREA_INST_OWNER_n, 0, ID_ANATAREA_INST_OWNER_in, nvl(ID_ANATAREA_INST_OWNER_in, ID_ANATAREA_INST_OWNER)),
ID_ANATOMICAL_SIDE = decode(l_ID_ANATOMICAL_SIDE_n, 0, ID_ANATOMICAL_SIDE_in, nvl(ID_ANATOMICAL_SIDE_in, ID_ANATOMICAL_SIDE)),
ID_ANATSIDE_INST_OWNER = decode(l_ID_ANATSIDE_INST_OWNER_n, 0, ID_ANATSIDE_INST_OWNER_in, nvl(ID_ANATSIDE_INST_OWNER_in, ID_ANATSIDE_INST_OWNER)),
ID_DIAGNOSIS_CONDITION = decode(l_ID_DIAGNOSIS_CONDITION_n, 0, ID_DIAGNOSIS_CONDITION_in, nvl(ID_DIAGNOSIS_CONDITION_in, ID_DIAGNOSIS_CONDITION)),
ID_DIAGCOND_INST_OWNER = decode(l_ID_DIAGCOND_INST_OWNER_n, 0, ID_DIAGCOND_INST_OWNER_in, nvl(ID_DIAGCOND_INST_OWNER_in, ID_DIAGCOND_INST_OWNER)),
ID_LESION_LOCATION = decode(l_ID_LESION_LOCATION_n, 0, ID_LESION_LOCATION_in, nvl(ID_LESION_LOCATION_in, ID_LESION_LOCATION)),
ID_LESION_LOCAT_INST_OWNER = decode(l_ID_LESION_LOCAT_INST_OWNER_n, 0, ID_LESION_LOCAT_INST_OWNER_in, nvl(ID_LESION_LOCAT_INST_OWNER_in, ID_LESION_LOCAT_INST_OWNER)),
ID_LESION_TYPE = decode(l_ID_LESION_TYPE_n, 0, ID_LESION_TYPE_in, nvl(ID_LESION_TYPE_in, ID_LESION_TYPE)),
ID_LESION_TYPE_INST_OWNER = decode(l_ID_LESION_TYPE_INST_OWNER_n, 0, ID_LESION_TYPE_INST_OWNER_in, nvl(ID_LESION_TYPE_INST_OWNER_in, ID_LESION_TYPE_INST_OWNER)),
RANK = decode(l_RANK_n, 0, RANK_in, nvl(RANK_in, RANK))
 WHERE
ID_EPIS_DIAGNOSIS_HIST = ID_EPIS_DIAGNOSIS_HIST_IN
RETURNING ROWID BULK COLLECT INTO l_rows_out;
IF (rows_out IS NULL)
THEN
rows_out := table_varchar();
END IF;
rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end upd;

-- Update any/all columns by primary key. If you pass NULL, then
-- the current column value is set to itself. If you need a more
-- selected UPDATE then use one of the onecol procedures below.
PROCEDURE upd
(
ID_EPIS_DIAGNOSIS_HIST_in IN epis_diagnosis_hist.ID_EPIS_DIAGNOSIS_HIST%TYPE,
ID_EPIS_DIAGNOSIS_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_nin IN BOOLEAN := TRUE,
ID_PROFESSIONAL_in IN EPIS_DIAGNOSIS_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
FLG_STATUS_in IN EPIS_DIAGNOSIS_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_STATUS_nin IN BOOLEAN := TRUE,
FLG_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_TYPE_nin IN BOOLEAN := TRUE,
ADW_LAST_UPDATE_in IN EPIS_DIAGNOSIS_HIST.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
NOTES_in IN EPIS_DIAGNOSIS_HIST.NOTES%TYPE DEFAULT NULL,
NOTES_nin IN BOOLEAN := TRUE,
FLG_FINAL_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_FINAL_TYPE%TYPE DEFAULT NULL,
FLG_FINAL_TYPE_nin IN BOOLEAN := TRUE,
ID_EPIS_DIAGNOSIS_NOTES_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS_NOTES%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_NOTES_nin IN BOOLEAN := TRUE,
DT_CREATION_TSTZ_in IN EPIS_DIAGNOSIS_HIST.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
DT_CREATION_TSTZ_nin IN BOOLEAN := TRUE,
ID_CANCEL_REASON_in IN EPIS_DIAGNOSIS_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN EPIS_DIAGNOSIS_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN EPIS_DIAGNOSIS_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN EPIS_DIAGNOSIS_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN EPIS_DIAGNOSIS_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
ID_EPISODE_ORIGIN_in IN EPIS_DIAGNOSIS_HIST.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
ID_EPISODE_ORIGIN_nin IN BOOLEAN := TRUE,
FLG_ADD_PROBLEM_in IN EPIS_DIAGNOSIS_HIST.FLG_ADD_PROBLEM%TYPE DEFAULT NULL,
FLG_ADD_PROBLEM_nin IN BOOLEAN := TRUE,
ID_CDR_CALL_in IN EPIS_DIAGNOSIS_HIST.ID_CDR_CALL%TYPE DEFAULT NULL,
ID_CDR_CALL_nin IN BOOLEAN := TRUE,
DT_INITIAL_DIAG_in IN EPIS_DIAGNOSIS_HIST.DT_INITIAL_DIAG%TYPE DEFAULT NULL,
DT_INITIAL_DIAG_nin IN BOOLEAN := TRUE,
ID_DIAG_BASIS_in IN EPIS_DIAGNOSIS_HIST.ID_DIAG_BASIS%TYPE DEFAULT NULL,
ID_DIAG_BASIS_nin IN BOOLEAN := TRUE,
ID_DBASIS_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DBASIS_INST_OWNER%TYPE DEFAULT NULL,
ID_DBASIS_INST_OWNER_nin IN BOOLEAN := TRUE,
DIAG_BASIS_SPEC_in IN EPIS_DIAGNOSIS_HIST.DIAG_BASIS_SPEC%TYPE DEFAULT NULL,
DIAG_BASIS_SPEC_nin IN BOOLEAN := TRUE,
FLG_RECURRENCE_in IN EPIS_DIAGNOSIS_HIST.FLG_RECURRENCE%TYPE DEFAULT NULL,
FLG_RECURRENCE_nin IN BOOLEAN := TRUE,
FLG_MULT_TUMORS_in IN EPIS_DIAGNOSIS_HIST.FLG_MULT_TUMORS%TYPE DEFAULT NULL,
FLG_MULT_TUMORS_nin IN BOOLEAN := TRUE,
NUM_PRIMARY_TUMORS_in IN EPIS_DIAGNOSIS_HIST.NUM_PRIMARY_TUMORS%TYPE DEFAULT NULL,
NUM_PRIMARY_TUMORS_nin IN BOOLEAN := TRUE,
ID_SUB_ANALYSIS_in IN EPIS_DIAGNOSIS_HIST.ID_SUB_ANALYSIS%TYPE DEFAULT NULL,
ID_SUB_ANALYSIS_nin IN BOOLEAN := TRUE,
ID_SUBANALY_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_SUBANALY_INST_OWNER%TYPE DEFAULT NULL,
ID_SUBANALY_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_ANATOMICAL_AREA_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_AREA%TYPE DEFAULT NULL,
ID_ANATOMICAL_AREA_nin IN BOOLEAN := TRUE,
ID_ANATAREA_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATAREA_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATAREA_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_ANATOMICAL_SIDE_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_SIDE%TYPE DEFAULT NULL,
ID_ANATOMICAL_SIDE_nin IN BOOLEAN := TRUE,
ID_ANATSIDE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATSIDE_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATSIDE_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_DIAGNOSIS_CONDITION_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGNOSIS_CONDITION%TYPE DEFAULT NULL,
ID_DIAGNOSIS_CONDITION_nin IN BOOLEAN := TRUE,
ID_DIAGCOND_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGCOND_INST_OWNER%TYPE DEFAULT NULL,
ID_DIAGCOND_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_LESION_LOCATION_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCATION%TYPE DEFAULT NULL,
ID_LESION_LOCATION_nin IN BOOLEAN := TRUE,
ID_LESION_LOCAT_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCAT_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_LOCAT_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_LESION_TYPE_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE%TYPE DEFAULT NULL,
ID_LESION_TYPE_nin IN BOOLEAN := TRUE,
ID_LESION_TYPE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_TYPE_INST_OWNER_nin IN BOOLEAN := TRUE,
RANK_in IN EPIS_DIAGNOSIS_HIST.RANK%TYPE DEFAULT NULL,
RANK_nin IN BOOLEAN := TRUE,
handle_error_in        IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
upd(
ID_EPIS_DIAGNOSIS_HIST_IN => ID_EPIS_DIAGNOSIS_HIST_IN,
ID_EPIS_DIAGNOSIS_IN => ID_EPIS_DIAGNOSIS_IN,
ID_EPIS_DIAGNOSIS_NIN => ID_EPIS_DIAGNOSIS_NIN,
ID_PROFESSIONAL_IN => ID_PROFESSIONAL_IN,
ID_PROFESSIONAL_NIN => ID_PROFESSIONAL_NIN,
FLG_STATUS_IN => FLG_STATUS_IN,
FLG_STATUS_NIN => FLG_STATUS_NIN,
FLG_TYPE_IN => FLG_TYPE_IN,
FLG_TYPE_NIN => FLG_TYPE_NIN,
ADW_LAST_UPDATE_IN => ADW_LAST_UPDATE_IN,
ADW_LAST_UPDATE_NIN => ADW_LAST_UPDATE_NIN,
NOTES_IN => NOTES_IN,
NOTES_NIN => NOTES_NIN,
FLG_FINAL_TYPE_IN => FLG_FINAL_TYPE_IN,
FLG_FINAL_TYPE_NIN => FLG_FINAL_TYPE_NIN,
ID_EPIS_DIAGNOSIS_NOTES_IN => ID_EPIS_DIAGNOSIS_NOTES_IN,
ID_EPIS_DIAGNOSIS_NOTES_NIN => ID_EPIS_DIAGNOSIS_NOTES_NIN,
DT_CREATION_TSTZ_IN => DT_CREATION_TSTZ_IN,
DT_CREATION_TSTZ_NIN => DT_CREATION_TSTZ_NIN,
ID_CANCEL_REASON_IN => ID_CANCEL_REASON_IN,
ID_CANCEL_REASON_NIN => ID_CANCEL_REASON_NIN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_USER_NIN => CREATE_USER_NIN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_TIME_NIN => CREATE_TIME_NIN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
CREATE_INSTITUTION_NIN => CREATE_INSTITUTION_NIN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_USER_NIN => UPDATE_USER_NIN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_TIME_NIN => UPDATE_TIME_NIN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
UPDATE_INSTITUTION_NIN => UPDATE_INSTITUTION_NIN,
ID_EPISODE_ORIGIN_IN => ID_EPISODE_ORIGIN_IN,
ID_EPISODE_ORIGIN_NIN => ID_EPISODE_ORIGIN_NIN,
FLG_ADD_PROBLEM_IN => FLG_ADD_PROBLEM_IN,
FLG_ADD_PROBLEM_NIN => FLG_ADD_PROBLEM_NIN,
ID_CDR_CALL_IN => ID_CDR_CALL_IN,
ID_CDR_CALL_NIN => ID_CDR_CALL_NIN,
DT_INITIAL_DIAG_IN => DT_INITIAL_DIAG_IN,
DT_INITIAL_DIAG_NIN => DT_INITIAL_DIAG_NIN,
ID_DIAG_BASIS_IN => ID_DIAG_BASIS_IN,
ID_DIAG_BASIS_NIN => ID_DIAG_BASIS_NIN,
ID_DBASIS_INST_OWNER_IN => ID_DBASIS_INST_OWNER_IN,
ID_DBASIS_INST_OWNER_NIN => ID_DBASIS_INST_OWNER_NIN,
DIAG_BASIS_SPEC_IN => DIAG_BASIS_SPEC_IN,
DIAG_BASIS_SPEC_NIN => DIAG_BASIS_SPEC_NIN,
FLG_RECURRENCE_IN => FLG_RECURRENCE_IN,
FLG_RECURRENCE_NIN => FLG_RECURRENCE_NIN,
FLG_MULT_TUMORS_IN => FLG_MULT_TUMORS_IN,
FLG_MULT_TUMORS_NIN => FLG_MULT_TUMORS_NIN,
NUM_PRIMARY_TUMORS_IN => NUM_PRIMARY_TUMORS_IN,
NUM_PRIMARY_TUMORS_NIN => NUM_PRIMARY_TUMORS_NIN,
ID_SUB_ANALYSIS_IN => ID_SUB_ANALYSIS_IN,
ID_SUB_ANALYSIS_NIN => ID_SUB_ANALYSIS_NIN,
ID_SUBANALY_INST_OWNER_IN => ID_SUBANALY_INST_OWNER_IN,
ID_SUBANALY_INST_OWNER_NIN => ID_SUBANALY_INST_OWNER_NIN,
ID_ANATOMICAL_AREA_IN => ID_ANATOMICAL_AREA_IN,
ID_ANATOMICAL_AREA_NIN => ID_ANATOMICAL_AREA_NIN,
ID_ANATAREA_INST_OWNER_IN => ID_ANATAREA_INST_OWNER_IN,
ID_ANATAREA_INST_OWNER_NIN => ID_ANATAREA_INST_OWNER_NIN,
ID_ANATOMICAL_SIDE_IN => ID_ANATOMICAL_SIDE_IN,
ID_ANATOMICAL_SIDE_NIN => ID_ANATOMICAL_SIDE_NIN,
ID_ANATSIDE_INST_OWNER_IN => ID_ANATSIDE_INST_OWNER_IN,
ID_ANATSIDE_INST_OWNER_NIN => ID_ANATSIDE_INST_OWNER_NIN,
ID_DIAGNOSIS_CONDITION_IN => ID_DIAGNOSIS_CONDITION_IN,
ID_DIAGNOSIS_CONDITION_NIN => ID_DIAGNOSIS_CONDITION_NIN,
ID_DIAGCOND_INST_OWNER_IN => ID_DIAGCOND_INST_OWNER_IN,
ID_DIAGCOND_INST_OWNER_NIN => ID_DIAGCOND_INST_OWNER_NIN,
ID_LESION_LOCATION_IN => ID_LESION_LOCATION_IN,
ID_LESION_LOCATION_NIN => ID_LESION_LOCATION_NIN,
ID_LESION_LOCAT_INST_OWNER_IN => ID_LESION_LOCAT_INST_OWNER_IN,
ID_LESION_LOCAT_INST_OWNER_NIN => ID_LESION_LOCAT_INST_OWNER_NIN,
ID_LESION_TYPE_IN => ID_LESION_TYPE_IN,
ID_LESION_TYPE_NIN => ID_LESION_TYPE_NIN,
ID_LESION_TYPE_INST_OWNER_IN => ID_LESION_TYPE_INST_OWNER_IN,
ID_LESION_TYPE_INST_OWNER_NIN => ID_LESION_TYPE_INST_OWNER_NIN,
RANK_IN => RANK_IN,
RANK_NIN => RANK_NIN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end upd;

--Update any/all columns by dynamic WHERE
-- If you pass NULL, then the current column value is set to itself
PROCEDURE upd
(
ID_EPIS_DIAGNOSIS_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_nin IN BOOLEAN := TRUE,
ID_PROFESSIONAL_in IN EPIS_DIAGNOSIS_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
FLG_STATUS_in IN EPIS_DIAGNOSIS_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_STATUS_nin IN BOOLEAN := TRUE,
FLG_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_TYPE_nin IN BOOLEAN := TRUE,
ADW_LAST_UPDATE_in IN EPIS_DIAGNOSIS_HIST.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
NOTES_in IN EPIS_DIAGNOSIS_HIST.NOTES%TYPE DEFAULT NULL,
NOTES_nin IN BOOLEAN := TRUE,
FLG_FINAL_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_FINAL_TYPE%TYPE DEFAULT NULL,
FLG_FINAL_TYPE_nin IN BOOLEAN := TRUE,
ID_EPIS_DIAGNOSIS_NOTES_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS_NOTES%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_NOTES_nin IN BOOLEAN := TRUE,
DT_CREATION_TSTZ_in IN EPIS_DIAGNOSIS_HIST.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
DT_CREATION_TSTZ_nin IN BOOLEAN := TRUE,
ID_CANCEL_REASON_in IN EPIS_DIAGNOSIS_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN EPIS_DIAGNOSIS_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN EPIS_DIAGNOSIS_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN EPIS_DIAGNOSIS_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN EPIS_DIAGNOSIS_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
ID_EPISODE_ORIGIN_in IN EPIS_DIAGNOSIS_HIST.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
ID_EPISODE_ORIGIN_nin IN BOOLEAN := TRUE,
FLG_ADD_PROBLEM_in IN EPIS_DIAGNOSIS_HIST.FLG_ADD_PROBLEM%TYPE DEFAULT NULL,
FLG_ADD_PROBLEM_nin IN BOOLEAN := TRUE,
ID_CDR_CALL_in IN EPIS_DIAGNOSIS_HIST.ID_CDR_CALL%TYPE DEFAULT NULL,
ID_CDR_CALL_nin IN BOOLEAN := TRUE,
DT_INITIAL_DIAG_in IN EPIS_DIAGNOSIS_HIST.DT_INITIAL_DIAG%TYPE DEFAULT NULL,
DT_INITIAL_DIAG_nin IN BOOLEAN := TRUE,
ID_DIAG_BASIS_in IN EPIS_DIAGNOSIS_HIST.ID_DIAG_BASIS%TYPE DEFAULT NULL,
ID_DIAG_BASIS_nin IN BOOLEAN := TRUE,
ID_DBASIS_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DBASIS_INST_OWNER%TYPE DEFAULT NULL,
ID_DBASIS_INST_OWNER_nin IN BOOLEAN := TRUE,
DIAG_BASIS_SPEC_in IN EPIS_DIAGNOSIS_HIST.DIAG_BASIS_SPEC%TYPE DEFAULT NULL,
DIAG_BASIS_SPEC_nin IN BOOLEAN := TRUE,
FLG_RECURRENCE_in IN EPIS_DIAGNOSIS_HIST.FLG_RECURRENCE%TYPE DEFAULT NULL,
FLG_RECURRENCE_nin IN BOOLEAN := TRUE,
FLG_MULT_TUMORS_in IN EPIS_DIAGNOSIS_HIST.FLG_MULT_TUMORS%TYPE DEFAULT NULL,
FLG_MULT_TUMORS_nin IN BOOLEAN := TRUE,
NUM_PRIMARY_TUMORS_in IN EPIS_DIAGNOSIS_HIST.NUM_PRIMARY_TUMORS%TYPE DEFAULT NULL,
NUM_PRIMARY_TUMORS_nin IN BOOLEAN := TRUE,
ID_SUB_ANALYSIS_in IN EPIS_DIAGNOSIS_HIST.ID_SUB_ANALYSIS%TYPE DEFAULT NULL,
ID_SUB_ANALYSIS_nin IN BOOLEAN := TRUE,
ID_SUBANALY_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_SUBANALY_INST_OWNER%TYPE DEFAULT NULL,
ID_SUBANALY_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_ANATOMICAL_AREA_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_AREA%TYPE DEFAULT NULL,
ID_ANATOMICAL_AREA_nin IN BOOLEAN := TRUE,
ID_ANATAREA_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATAREA_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATAREA_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_ANATOMICAL_SIDE_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_SIDE%TYPE DEFAULT NULL,
ID_ANATOMICAL_SIDE_nin IN BOOLEAN := TRUE,
ID_ANATSIDE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATSIDE_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATSIDE_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_DIAGNOSIS_CONDITION_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGNOSIS_CONDITION%TYPE DEFAULT NULL,
ID_DIAGNOSIS_CONDITION_nin IN BOOLEAN := TRUE,
ID_DIAGCOND_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGCOND_INST_OWNER%TYPE DEFAULT NULL,
ID_DIAGCOND_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_LESION_LOCATION_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCATION%TYPE DEFAULT NULL,
ID_LESION_LOCATION_nin IN BOOLEAN := TRUE,
ID_LESION_LOCAT_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCAT_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_LOCAT_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_LESION_TYPE_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE%TYPE DEFAULT NULL,
ID_LESION_TYPE_nin IN BOOLEAN := TRUE,
ID_LESION_TYPE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_TYPE_INST_OWNER_nin IN BOOLEAN := TRUE,
RANK_in IN EPIS_DIAGNOSIS_HIST.RANK%TYPE DEFAULT NULL,
RANK_nin IN BOOLEAN := TRUE,
where_in               IN VARCHAR2,
handle_error_in        IN BOOLEAN := TRUE,
rows_out               IN OUT table_varchar
)
is
l_sql                  VARCHAR2(32767);
l_rows_out             table_varchar;
l_ID_EPIS_DIAGNOSIS_n number(1) := sys.diutil.bool_to_int(ID_EPIS_DIAGNOSIS_nin);
l_ID_PROFESSIONAL_n number(1) := sys.diutil.bool_to_int(ID_PROFESSIONAL_nin);
l_FLG_STATUS_n number(1) := sys.diutil.bool_to_int(FLG_STATUS_nin);
l_FLG_TYPE_n number(1) := sys.diutil.bool_to_int(FLG_TYPE_nin);
l_ADW_LAST_UPDATE_n number(1) := sys.diutil.bool_to_int(ADW_LAST_UPDATE_nin);
l_NOTES_n number(1) := sys.diutil.bool_to_int(NOTES_nin);
l_FLG_FINAL_TYPE_n number(1) := sys.diutil.bool_to_int(FLG_FINAL_TYPE_nin);
l_ID_EPIS_DIAGNOSIS_NOTES_n number(1) := sys.diutil.bool_to_int(ID_EPIS_DIAGNOSIS_NOTES_nin);
l_DT_CREATION_TSTZ_n number(1) := sys.diutil.bool_to_int(DT_CREATION_TSTZ_nin);
l_ID_CANCEL_REASON_n number(1) := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
l_CREATE_USER_n number(1) := sys.diutil.bool_to_int(CREATE_USER_nin);
l_CREATE_TIME_n number(1) := sys.diutil.bool_to_int(CREATE_TIME_nin);
l_CREATE_INSTITUTION_n number(1) := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
l_UPDATE_USER_n number(1) := sys.diutil.bool_to_int(UPDATE_USER_nin);
l_UPDATE_TIME_n number(1) := sys.diutil.bool_to_int(UPDATE_TIME_nin);
l_UPDATE_INSTITUTION_n number(1) := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
l_ID_EPISODE_ORIGIN_n number(1) := sys.diutil.bool_to_int(ID_EPISODE_ORIGIN_nin);
l_FLG_ADD_PROBLEM_n number(1) := sys.diutil.bool_to_int(FLG_ADD_PROBLEM_nin);
l_ID_CDR_CALL_n number(1) := sys.diutil.bool_to_int(ID_CDR_CALL_nin);
l_DT_INITIAL_DIAG_n number(1) := sys.diutil.bool_to_int(DT_INITIAL_DIAG_nin);
l_ID_DIAG_BASIS_n number(1) := sys.diutil.bool_to_int(ID_DIAG_BASIS_nin);
l_ID_DBASIS_INST_OWNER_n number(1) := sys.diutil.bool_to_int(ID_DBASIS_INST_OWNER_nin);
l_DIAG_BASIS_SPEC_n number(1) := sys.diutil.bool_to_int(DIAG_BASIS_SPEC_nin);
l_FLG_RECURRENCE_n number(1) := sys.diutil.bool_to_int(FLG_RECURRENCE_nin);
l_FLG_MULT_TUMORS_n number(1) := sys.diutil.bool_to_int(FLG_MULT_TUMORS_nin);
l_NUM_PRIMARY_TUMORS_n number(1) := sys.diutil.bool_to_int(NUM_PRIMARY_TUMORS_nin);
l_ID_SUB_ANALYSIS_n number(1) := sys.diutil.bool_to_int(ID_SUB_ANALYSIS_nin);
l_ID_SUBANALY_INST_OWNER_n number(1) := sys.diutil.bool_to_int(ID_SUBANALY_INST_OWNER_nin);
l_ID_ANATOMICAL_AREA_n number(1) := sys.diutil.bool_to_int(ID_ANATOMICAL_AREA_nin);
l_ID_ANATAREA_INST_OWNER_n number(1) := sys.diutil.bool_to_int(ID_ANATAREA_INST_OWNER_nin);
l_ID_ANATOMICAL_SIDE_n number(1) := sys.diutil.bool_to_int(ID_ANATOMICAL_SIDE_nin);
l_ID_ANATSIDE_INST_OWNER_n number(1) := sys.diutil.bool_to_int(ID_ANATSIDE_INST_OWNER_nin);
l_ID_DIAGNOSIS_CONDITION_n number(1) := sys.diutil.bool_to_int(ID_DIAGNOSIS_CONDITION_nin);
l_ID_DIAGCOND_INST_OWNER_n number(1) := sys.diutil.bool_to_int(ID_DIAGCOND_INST_OWNER_nin);
l_ID_LESION_LOCATION_n number(1) := sys.diutil.bool_to_int(ID_LESION_LOCATION_nin);
l_ID_LESION_LOCAT_INST_OWNER_n number(1) := sys.diutil.bool_to_int(ID_LESION_LOCAT_INST_OWNER_nin);
l_ID_LESION_TYPE_n number(1) := sys.diutil.bool_to_int(ID_LESION_TYPE_nin);
l_ID_LESION_TYPE_INST_OWNER_n number(1) := sys.diutil.bool_to_int(ID_LESION_TYPE_INST_OWNER_nin);
l_RANK_n number(1) := sys.diutil.bool_to_int(RANK_nin);
begin
l_ID_EPIS_DIAGNOSIS_n := sys.diutil.bool_to_int(ID_EPIS_DIAGNOSIS_nin);
l_ID_PROFESSIONAL_n := sys.diutil.bool_to_int(ID_PROFESSIONAL_nin);
l_FLG_STATUS_n := sys.diutil.bool_to_int(FLG_STATUS_nin);
l_FLG_TYPE_n := sys.diutil.bool_to_int(FLG_TYPE_nin);
l_ADW_LAST_UPDATE_n := sys.diutil.bool_to_int(ADW_LAST_UPDATE_nin);
l_NOTES_n := sys.diutil.bool_to_int(NOTES_nin);
l_FLG_FINAL_TYPE_n := sys.diutil.bool_to_int(FLG_FINAL_TYPE_nin);
l_ID_EPIS_DIAGNOSIS_NOTES_n := sys.diutil.bool_to_int(ID_EPIS_DIAGNOSIS_NOTES_nin);
l_DT_CREATION_TSTZ_n := sys.diutil.bool_to_int(DT_CREATION_TSTZ_nin);
l_ID_CANCEL_REASON_n := sys.diutil.bool_to_int(ID_CANCEL_REASON_nin);
l_CREATE_USER_n := sys.diutil.bool_to_int(CREATE_USER_nin);
l_CREATE_TIME_n := sys.diutil.bool_to_int(CREATE_TIME_nin);
l_CREATE_INSTITUTION_n := sys.diutil.bool_to_int(CREATE_INSTITUTION_nin);
l_UPDATE_USER_n := sys.diutil.bool_to_int(UPDATE_USER_nin);
l_UPDATE_TIME_n := sys.diutil.bool_to_int(UPDATE_TIME_nin);
l_UPDATE_INSTITUTION_n := sys.diutil.bool_to_int(UPDATE_INSTITUTION_nin);
l_ID_EPISODE_ORIGIN_n := sys.diutil.bool_to_int(ID_EPISODE_ORIGIN_nin);
l_FLG_ADD_PROBLEM_n := sys.diutil.bool_to_int(FLG_ADD_PROBLEM_nin);
l_ID_CDR_CALL_n := sys.diutil.bool_to_int(ID_CDR_CALL_nin);
l_DT_INITIAL_DIAG_n := sys.diutil.bool_to_int(DT_INITIAL_DIAG_nin);
l_ID_DIAG_BASIS_n := sys.diutil.bool_to_int(ID_DIAG_BASIS_nin);
l_ID_DBASIS_INST_OWNER_n := sys.diutil.bool_to_int(ID_DBASIS_INST_OWNER_nin);
l_DIAG_BASIS_SPEC_n := sys.diutil.bool_to_int(DIAG_BASIS_SPEC_nin);
l_FLG_RECURRENCE_n := sys.diutil.bool_to_int(FLG_RECURRENCE_nin);
l_FLG_MULT_TUMORS_n := sys.diutil.bool_to_int(FLG_MULT_TUMORS_nin);
l_NUM_PRIMARY_TUMORS_n := sys.diutil.bool_to_int(NUM_PRIMARY_TUMORS_nin);
l_ID_SUB_ANALYSIS_n := sys.diutil.bool_to_int(ID_SUB_ANALYSIS_nin);
l_ID_SUBANALY_INST_OWNER_n := sys.diutil.bool_to_int(ID_SUBANALY_INST_OWNER_nin);
l_ID_ANATOMICAL_AREA_n := sys.diutil.bool_to_int(ID_ANATOMICAL_AREA_nin);
l_ID_ANATAREA_INST_OWNER_n := sys.diutil.bool_to_int(ID_ANATAREA_INST_OWNER_nin);
l_ID_ANATOMICAL_SIDE_n := sys.diutil.bool_to_int(ID_ANATOMICAL_SIDE_nin);
l_ID_ANATSIDE_INST_OWNER_n := sys.diutil.bool_to_int(ID_ANATSIDE_INST_OWNER_nin);
l_ID_DIAGNOSIS_CONDITION_n := sys.diutil.bool_to_int(ID_DIAGNOSIS_CONDITION_nin);
l_ID_DIAGCOND_INST_OWNER_n := sys.diutil.bool_to_int(ID_DIAGCOND_INST_OWNER_nin);
l_ID_LESION_LOCATION_n := sys.diutil.bool_to_int(ID_LESION_LOCATION_nin);
l_ID_LESION_LOCAT_INST_OWNER_n := sys.diutil.bool_to_int(ID_LESION_LOCAT_INST_OWNER_nin);
l_ID_LESION_TYPE_n := sys.diutil.bool_to_int(ID_LESION_TYPE_nin);
l_ID_LESION_TYPE_INST_OWNER_n := sys.diutil.bool_to_int(ID_LESION_TYPE_INST_OWNER_nin);
l_RANK_n := sys.diutil.bool_to_int(RANK_nin);
l_sql := 'UPDATE epis_diagnosis_hist SET' ||
' ID_EPIS_DIAGNOSIS = decode (' || l_ID_EPIS_DIAGNOSIS_n || ',0,:ID_EPIS_DIAGNOSIS_in, NVL (:ID_EPIS_DIAGNOSIS_in, ID_EPIS_DIAGNOSIS)) ' ||',' ||
' ID_PROFESSIONAL = decode (' || l_ID_PROFESSIONAL_n || ',0,:ID_PROFESSIONAL_in, NVL (:ID_PROFESSIONAL_in, ID_PROFESSIONAL)) ' ||',' ||
' FLG_STATUS = decode (' || l_FLG_STATUS_n || ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' ||',' ||
' FLG_TYPE = decode (' || l_FLG_TYPE_n || ',0,:FLG_TYPE_in, NVL (:FLG_TYPE_in, FLG_TYPE)) ' ||',' ||
' ADW_LAST_UPDATE = decode (' || l_ADW_LAST_UPDATE_n || ',0,:ADW_LAST_UPDATE_in, NVL (:ADW_LAST_UPDATE_in, ADW_LAST_UPDATE)) ' ||',' ||
' NOTES = decode (' || l_NOTES_n || ',0,:NOTES_in, NVL (:NOTES_in, NOTES)) ' ||',' ||
' FLG_FINAL_TYPE = decode (' || l_FLG_FINAL_TYPE_n || ',0,:FLG_FINAL_TYPE_in, NVL (:FLG_FINAL_TYPE_in, FLG_FINAL_TYPE)) ' ||',' ||
' ID_EPIS_DIAGNOSIS_NOTES = decode (' || l_ID_EPIS_DIAGNOSIS_NOTES_n || ',0,:ID_EPIS_DIAGNOSIS_NOTES_in, NVL (:ID_EPIS_DIAGNOSIS_NOTES_in, ID_EPIS_DIAGNOSIS_NOTES)) ' ||',' ||
' DT_CREATION_TSTZ = decode (' || l_DT_CREATION_TSTZ_n || ',0,:DT_CREATION_TSTZ_in, NVL (:DT_CREATION_TSTZ_in, DT_CREATION_TSTZ)) ' ||',' ||
' ID_CANCEL_REASON = decode (' || l_ID_CANCEL_REASON_n || ',0,:ID_CANCEL_REASON_in, NVL (:ID_CANCEL_REASON_in, ID_CANCEL_REASON)) ' ||',' ||
' CREATE_USER = decode (' || l_CREATE_USER_n || ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' ||',' ||
' CREATE_TIME = decode (' || l_CREATE_TIME_n || ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' ||',' ||
' CREATE_INSTITUTION = decode (' || l_CREATE_INSTITUTION_n || ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' ||',' ||
' UPDATE_USER = decode (' || l_UPDATE_USER_n || ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' ||',' ||
' UPDATE_TIME = decode (' || l_UPDATE_TIME_n || ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' ||',' ||
' UPDATE_INSTITUTION = decode (' || l_UPDATE_INSTITUTION_n || ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' ||',' ||
' ID_EPISODE_ORIGIN = decode (' || l_ID_EPISODE_ORIGIN_n || ',0,:ID_EPISODE_ORIGIN_in, NVL (:ID_EPISODE_ORIGIN_in, ID_EPISODE_ORIGIN)) ' ||',' ||
' FLG_ADD_PROBLEM = decode (' || l_FLG_ADD_PROBLEM_n || ',0,:FLG_ADD_PROBLEM_in, NVL (:FLG_ADD_PROBLEM_in, FLG_ADD_PROBLEM)) ' ||',' ||
' ID_CDR_CALL = decode (' || l_ID_CDR_CALL_n || ',0,:ID_CDR_CALL_in, NVL (:ID_CDR_CALL_in, ID_CDR_CALL)) ' ||',' ||
' DT_INITIAL_DIAG = decode (' || l_DT_INITIAL_DIAG_n || ',0,:DT_INITIAL_DIAG_in, NVL (:DT_INITIAL_DIAG_in, DT_INITIAL_DIAG)) ' ||',' ||
' ID_DIAG_BASIS = decode (' || l_ID_DIAG_BASIS_n || ',0,:ID_DIAG_BASIS_in, NVL (:ID_DIAG_BASIS_in, ID_DIAG_BASIS)) ' ||',' ||
' ID_DBASIS_INST_OWNER = decode (' || l_ID_DBASIS_INST_OWNER_n || ',0,:ID_DBASIS_INST_OWNER_in, NVL (:ID_DBASIS_INST_OWNER_in, ID_DBASIS_INST_OWNER)) ' ||',' ||
' DIAG_BASIS_SPEC = decode (' || l_DIAG_BASIS_SPEC_n || ',0,:DIAG_BASIS_SPEC_in, NVL (:DIAG_BASIS_SPEC_in, DIAG_BASIS_SPEC)) ' ||',' ||
' FLG_RECURRENCE = decode (' || l_FLG_RECURRENCE_n || ',0,:FLG_RECURRENCE_in, NVL (:FLG_RECURRENCE_in, FLG_RECURRENCE)) ' ||',' ||
' FLG_MULT_TUMORS = decode (' || l_FLG_MULT_TUMORS_n || ',0,:FLG_MULT_TUMORS_in, NVL (:FLG_MULT_TUMORS_in, FLG_MULT_TUMORS)) ' ||',' ||
' NUM_PRIMARY_TUMORS = decode (' || l_NUM_PRIMARY_TUMORS_n || ',0,:NUM_PRIMARY_TUMORS_in, NVL (:NUM_PRIMARY_TUMORS_in, NUM_PRIMARY_TUMORS)) ' ||',' ||
' ID_SUB_ANALYSIS = decode (' || l_ID_SUB_ANALYSIS_n || ',0,:ID_SUB_ANALYSIS_in, NVL (:ID_SUB_ANALYSIS_in, ID_SUB_ANALYSIS)) ' ||',' ||
' ID_SUBANALY_INST_OWNER = decode (' || l_ID_SUBANALY_INST_OWNER_n || ',0,:ID_SUBANALY_INST_OWNER_in, NVL (:ID_SUBANALY_INST_OWNER_in, ID_SUBANALY_INST_OWNER)) ' ||',' ||
' ID_ANATOMICAL_AREA = decode (' || l_ID_ANATOMICAL_AREA_n || ',0,:ID_ANATOMICAL_AREA_in, NVL (:ID_ANATOMICAL_AREA_in, ID_ANATOMICAL_AREA)) ' ||',' ||
' ID_ANATAREA_INST_OWNER = decode (' || l_ID_ANATAREA_INST_OWNER_n || ',0,:ID_ANATAREA_INST_OWNER_in, NVL (:ID_ANATAREA_INST_OWNER_in, ID_ANATAREA_INST_OWNER)) ' ||',' ||
' ID_ANATOMICAL_SIDE = decode (' || l_ID_ANATOMICAL_SIDE_n || ',0,:ID_ANATOMICAL_SIDE_in, NVL (:ID_ANATOMICAL_SIDE_in, ID_ANATOMICAL_SIDE)) ' ||',' ||
' ID_ANATSIDE_INST_OWNER = decode (' || l_ID_ANATSIDE_INST_OWNER_n || ',0,:ID_ANATSIDE_INST_OWNER_in, NVL (:ID_ANATSIDE_INST_OWNER_in, ID_ANATSIDE_INST_OWNER)) ' ||',' ||
' ID_DIAGNOSIS_CONDITION = decode (' || l_ID_DIAGNOSIS_CONDITION_n || ',0,:ID_DIAGNOSIS_CONDITION_in, NVL (:ID_DIAGNOSIS_CONDITION_in, ID_DIAGNOSIS_CONDITION)) ' ||',' ||
' ID_DIAGCOND_INST_OWNER = decode (' || l_ID_DIAGCOND_INST_OWNER_n || ',0,:ID_DIAGCOND_INST_OWNER_in, NVL (:ID_DIAGCOND_INST_OWNER_in, ID_DIAGCOND_INST_OWNER)) ' ||',' ||
' ID_LESION_LOCATION = decode (' || l_ID_LESION_LOCATION_n || ',0,:ID_LESION_LOCATION_in, NVL (:ID_LESION_LOCATION_in, ID_LESION_LOCATION)) ' ||',' ||
' ID_LESION_LOCAT_INST_OWNER = decode (' || l_ID_LESION_LOCAT_INST_OWNER_n || ',0,:ID_LESION_LOCAT_INST_OWNER_in, NVL (:ID_LESION_LOCAT_INST_OWNER_in, ID_LESION_LOCAT_INST_OWNER)) ' ||',' ||
' ID_LESION_TYPE = decode (' || l_ID_LESION_TYPE_n || ',0,:ID_LESION_TYPE_in, NVL (:ID_LESION_TYPE_in, ID_LESION_TYPE)) ' ||',' ||
' ID_LESION_TYPE_INST_OWNER = decode (' || l_ID_LESION_TYPE_INST_OWNER_n || ',0,:ID_LESION_TYPE_INST_OWNER_in, NVL (:ID_LESION_TYPE_INST_OWNER_in, ID_LESION_TYPE_INST_OWNER)) ' ||',' ||
' RANK = decode (' || l_RANK_n || ',0,:RANK_in, NVL (:RANK_in, RANK)) ' ||
' where ' || nvl(where_in, '(1=1)') || ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
USING IN
ID_EPIS_DIAGNOSIS_IN,
ID_PROFESSIONAL_IN,
FLG_STATUS_IN,
FLG_TYPE_IN,
ADW_LAST_UPDATE_IN,
NOTES_IN,
FLG_FINAL_TYPE_IN,
ID_EPIS_DIAGNOSIS_NOTES_IN,
DT_CREATION_TSTZ_IN,
ID_CANCEL_REASON_IN,
CREATE_USER_IN,
CREATE_TIME_IN,
CREATE_INSTITUTION_IN,
UPDATE_USER_IN,
UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN,
ID_EPISODE_ORIGIN_IN,
FLG_ADD_PROBLEM_IN,
ID_CDR_CALL_IN,
DT_INITIAL_DIAG_IN,
ID_DIAG_BASIS_IN,
ID_DBASIS_INST_OWNER_IN,
DIAG_BASIS_SPEC_IN,
FLG_RECURRENCE_IN,
FLG_MULT_TUMORS_IN,
NUM_PRIMARY_TUMORS_IN,
ID_SUB_ANALYSIS_IN,
ID_SUBANALY_INST_OWNER_IN,
ID_ANATOMICAL_AREA_IN,
ID_ANATAREA_INST_OWNER_IN,
ID_ANATOMICAL_SIDE_IN,
ID_ANATSIDE_INST_OWNER_IN,
ID_DIAGNOSIS_CONDITION_IN,
ID_DIAGCOND_INST_OWNER_IN,
ID_LESION_LOCATION_IN,
ID_LESION_LOCAT_INST_OWNER_IN,
ID_LESION_TYPE_IN,
ID_LESION_TYPE_INST_OWNER_IN,
RANK_IN,
OUT l_rows_out;
IF (rows_out IS NULL)
THEN
rows_out := table_varchar();
END IF;
rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end upd;

--Update any/all columns by dynamic WHERE
-- If you pass NULL, then the current column value is set to itself
PROCEDURE upd
(
ID_EPIS_DIAGNOSIS_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_nin IN BOOLEAN := TRUE,
ID_PROFESSIONAL_in IN EPIS_DIAGNOSIS_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
ID_PROFESSIONAL_nin IN BOOLEAN := TRUE,
FLG_STATUS_in IN EPIS_DIAGNOSIS_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_STATUS_nin IN BOOLEAN := TRUE,
FLG_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_TYPE%TYPE DEFAULT NULL,
FLG_TYPE_nin IN BOOLEAN := TRUE,
ADW_LAST_UPDATE_in IN EPIS_DIAGNOSIS_HIST.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
ADW_LAST_UPDATE_nin IN BOOLEAN := TRUE,
NOTES_in IN EPIS_DIAGNOSIS_HIST.NOTES%TYPE DEFAULT NULL,
NOTES_nin IN BOOLEAN := TRUE,
FLG_FINAL_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_FINAL_TYPE%TYPE DEFAULT NULL,
FLG_FINAL_TYPE_nin IN BOOLEAN := TRUE,
ID_EPIS_DIAGNOSIS_NOTES_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS_NOTES%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_NOTES_nin IN BOOLEAN := TRUE,
DT_CREATION_TSTZ_in IN EPIS_DIAGNOSIS_HIST.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
DT_CREATION_TSTZ_nin IN BOOLEAN := TRUE,
ID_CANCEL_REASON_in IN EPIS_DIAGNOSIS_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
ID_CANCEL_REASON_nin IN BOOLEAN := TRUE,
CREATE_USER_in IN EPIS_DIAGNOSIS_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_USER_nin IN BOOLEAN := TRUE,
CREATE_TIME_in IN EPIS_DIAGNOSIS_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_TIME_nin IN BOOLEAN := TRUE,
CREATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
CREATE_INSTITUTION_nin IN BOOLEAN := TRUE,
UPDATE_USER_in IN EPIS_DIAGNOSIS_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_USER_nin IN BOOLEAN := TRUE,
UPDATE_TIME_in IN EPIS_DIAGNOSIS_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_TIME_nin IN BOOLEAN := TRUE,
UPDATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_nin IN BOOLEAN := TRUE,
ID_EPISODE_ORIGIN_in IN EPIS_DIAGNOSIS_HIST.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
ID_EPISODE_ORIGIN_nin IN BOOLEAN := TRUE,
FLG_ADD_PROBLEM_in IN EPIS_DIAGNOSIS_HIST.FLG_ADD_PROBLEM%TYPE DEFAULT NULL,
FLG_ADD_PROBLEM_nin IN BOOLEAN := TRUE,
ID_CDR_CALL_in IN EPIS_DIAGNOSIS_HIST.ID_CDR_CALL%TYPE DEFAULT NULL,
ID_CDR_CALL_nin IN BOOLEAN := TRUE,
DT_INITIAL_DIAG_in IN EPIS_DIAGNOSIS_HIST.DT_INITIAL_DIAG%TYPE DEFAULT NULL,
DT_INITIAL_DIAG_nin IN BOOLEAN := TRUE,
ID_DIAG_BASIS_in IN EPIS_DIAGNOSIS_HIST.ID_DIAG_BASIS%TYPE DEFAULT NULL,
ID_DIAG_BASIS_nin IN BOOLEAN := TRUE,
ID_DBASIS_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DBASIS_INST_OWNER%TYPE DEFAULT NULL,
ID_DBASIS_INST_OWNER_nin IN BOOLEAN := TRUE,
DIAG_BASIS_SPEC_in IN EPIS_DIAGNOSIS_HIST.DIAG_BASIS_SPEC%TYPE DEFAULT NULL,
DIAG_BASIS_SPEC_nin IN BOOLEAN := TRUE,
FLG_RECURRENCE_in IN EPIS_DIAGNOSIS_HIST.FLG_RECURRENCE%TYPE DEFAULT NULL,
FLG_RECURRENCE_nin IN BOOLEAN := TRUE,
FLG_MULT_TUMORS_in IN EPIS_DIAGNOSIS_HIST.FLG_MULT_TUMORS%TYPE DEFAULT NULL,
FLG_MULT_TUMORS_nin IN BOOLEAN := TRUE,
NUM_PRIMARY_TUMORS_in IN EPIS_DIAGNOSIS_HIST.NUM_PRIMARY_TUMORS%TYPE DEFAULT NULL,
NUM_PRIMARY_TUMORS_nin IN BOOLEAN := TRUE,
ID_SUB_ANALYSIS_in IN EPIS_DIAGNOSIS_HIST.ID_SUB_ANALYSIS%TYPE DEFAULT NULL,
ID_SUB_ANALYSIS_nin IN BOOLEAN := TRUE,
ID_SUBANALY_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_SUBANALY_INST_OWNER%TYPE DEFAULT NULL,
ID_SUBANALY_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_ANATOMICAL_AREA_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_AREA%TYPE DEFAULT NULL,
ID_ANATOMICAL_AREA_nin IN BOOLEAN := TRUE,
ID_ANATAREA_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATAREA_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATAREA_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_ANATOMICAL_SIDE_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_SIDE%TYPE DEFAULT NULL,
ID_ANATOMICAL_SIDE_nin IN BOOLEAN := TRUE,
ID_ANATSIDE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATSIDE_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATSIDE_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_DIAGNOSIS_CONDITION_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGNOSIS_CONDITION%TYPE DEFAULT NULL,
ID_DIAGNOSIS_CONDITION_nin IN BOOLEAN := TRUE,
ID_DIAGCOND_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGCOND_INST_OWNER%TYPE DEFAULT NULL,
ID_DIAGCOND_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_LESION_LOCATION_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCATION%TYPE DEFAULT NULL,
ID_LESION_LOCATION_nin IN BOOLEAN := TRUE,
ID_LESION_LOCAT_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCAT_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_LOCAT_INST_OWNER_nin IN BOOLEAN := TRUE,
ID_LESION_TYPE_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE%TYPE DEFAULT NULL,
ID_LESION_TYPE_nin IN BOOLEAN := TRUE,
ID_LESION_TYPE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_TYPE_INST_OWNER_nin IN BOOLEAN := TRUE,
RANK_in IN EPIS_DIAGNOSIS_HIST.RANK%TYPE DEFAULT NULL,
RANK_nin IN BOOLEAN := TRUE,
where_in               IN VARCHAR2,
handle_error_in        IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
upd(
ID_EPIS_DIAGNOSIS_IN => ID_EPIS_DIAGNOSIS_IN,
ID_EPIS_DIAGNOSIS_NIN => ID_EPIS_DIAGNOSIS_NIN,
ID_PROFESSIONAL_IN => ID_PROFESSIONAL_IN,
ID_PROFESSIONAL_NIN => ID_PROFESSIONAL_NIN,
FLG_STATUS_IN => FLG_STATUS_IN,
FLG_STATUS_NIN => FLG_STATUS_NIN,
FLG_TYPE_IN => FLG_TYPE_IN,
FLG_TYPE_NIN => FLG_TYPE_NIN,
ADW_LAST_UPDATE_IN => ADW_LAST_UPDATE_IN,
ADW_LAST_UPDATE_NIN => ADW_LAST_UPDATE_NIN,
NOTES_IN => NOTES_IN,
NOTES_NIN => NOTES_NIN,
FLG_FINAL_TYPE_IN => FLG_FINAL_TYPE_IN,
FLG_FINAL_TYPE_NIN => FLG_FINAL_TYPE_NIN,
ID_EPIS_DIAGNOSIS_NOTES_IN => ID_EPIS_DIAGNOSIS_NOTES_IN,
ID_EPIS_DIAGNOSIS_NOTES_NIN => ID_EPIS_DIAGNOSIS_NOTES_NIN,
DT_CREATION_TSTZ_IN => DT_CREATION_TSTZ_IN,
DT_CREATION_TSTZ_NIN => DT_CREATION_TSTZ_NIN,
ID_CANCEL_REASON_IN => ID_CANCEL_REASON_IN,
ID_CANCEL_REASON_NIN => ID_CANCEL_REASON_NIN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_USER_NIN => CREATE_USER_NIN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_TIME_NIN => CREATE_TIME_NIN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
CREATE_INSTITUTION_NIN => CREATE_INSTITUTION_NIN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_USER_NIN => UPDATE_USER_NIN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_TIME_NIN => UPDATE_TIME_NIN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
UPDATE_INSTITUTION_NIN => UPDATE_INSTITUTION_NIN,
ID_EPISODE_ORIGIN_IN => ID_EPISODE_ORIGIN_IN,
ID_EPISODE_ORIGIN_NIN => ID_EPISODE_ORIGIN_NIN,
FLG_ADD_PROBLEM_IN => FLG_ADD_PROBLEM_IN,
FLG_ADD_PROBLEM_NIN => FLG_ADD_PROBLEM_NIN,
ID_CDR_CALL_IN => ID_CDR_CALL_IN,
ID_CDR_CALL_NIN => ID_CDR_CALL_NIN,
DT_INITIAL_DIAG_IN => DT_INITIAL_DIAG_IN,
DT_INITIAL_DIAG_NIN => DT_INITIAL_DIAG_NIN,
ID_DIAG_BASIS_IN => ID_DIAG_BASIS_IN,
ID_DIAG_BASIS_NIN => ID_DIAG_BASIS_NIN,
ID_DBASIS_INST_OWNER_IN => ID_DBASIS_INST_OWNER_IN,
ID_DBASIS_INST_OWNER_NIN => ID_DBASIS_INST_OWNER_NIN,
DIAG_BASIS_SPEC_IN => DIAG_BASIS_SPEC_IN,
DIAG_BASIS_SPEC_NIN => DIAG_BASIS_SPEC_NIN,
FLG_RECURRENCE_IN => FLG_RECURRENCE_IN,
FLG_RECURRENCE_NIN => FLG_RECURRENCE_NIN,
FLG_MULT_TUMORS_IN => FLG_MULT_TUMORS_IN,
FLG_MULT_TUMORS_NIN => FLG_MULT_TUMORS_NIN,
NUM_PRIMARY_TUMORS_IN => NUM_PRIMARY_TUMORS_IN,
NUM_PRIMARY_TUMORS_NIN => NUM_PRIMARY_TUMORS_NIN,
ID_SUB_ANALYSIS_IN => ID_SUB_ANALYSIS_IN,
ID_SUB_ANALYSIS_NIN => ID_SUB_ANALYSIS_NIN,
ID_SUBANALY_INST_OWNER_IN => ID_SUBANALY_INST_OWNER_IN,
ID_SUBANALY_INST_OWNER_NIN => ID_SUBANALY_INST_OWNER_NIN,
ID_ANATOMICAL_AREA_IN => ID_ANATOMICAL_AREA_IN,
ID_ANATOMICAL_AREA_NIN => ID_ANATOMICAL_AREA_NIN,
ID_ANATAREA_INST_OWNER_IN => ID_ANATAREA_INST_OWNER_IN,
ID_ANATAREA_INST_OWNER_NIN => ID_ANATAREA_INST_OWNER_NIN,
ID_ANATOMICAL_SIDE_IN => ID_ANATOMICAL_SIDE_IN,
ID_ANATOMICAL_SIDE_NIN => ID_ANATOMICAL_SIDE_NIN,
ID_ANATSIDE_INST_OWNER_IN => ID_ANATSIDE_INST_OWNER_IN,
ID_ANATSIDE_INST_OWNER_NIN => ID_ANATSIDE_INST_OWNER_NIN,
ID_DIAGNOSIS_CONDITION_IN => ID_DIAGNOSIS_CONDITION_IN,
ID_DIAGNOSIS_CONDITION_NIN => ID_DIAGNOSIS_CONDITION_NIN,
ID_DIAGCOND_INST_OWNER_IN => ID_DIAGCOND_INST_OWNER_IN,
ID_DIAGCOND_INST_OWNER_NIN => ID_DIAGCOND_INST_OWNER_NIN,
ID_LESION_LOCATION_IN => ID_LESION_LOCATION_IN,
ID_LESION_LOCATION_NIN => ID_LESION_LOCATION_NIN,
ID_LESION_LOCAT_INST_OWNER_IN => ID_LESION_LOCAT_INST_OWNER_IN,
ID_LESION_LOCAT_INST_OWNER_NIN => ID_LESION_LOCAT_INST_OWNER_NIN,
ID_LESION_TYPE_IN => ID_LESION_TYPE_IN,
ID_LESION_TYPE_NIN => ID_LESION_TYPE_NIN,
ID_LESION_TYPE_INST_OWNER_IN => ID_LESION_TYPE_INST_OWNER_IN,
ID_LESION_TYPE_INST_OWNER_NIN => ID_LESION_TYPE_INST_OWNER_NIN,
RANK_IN => RANK_IN,
RANK_NIN => RANK_NIN,
where_in               => where_in,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end upd;

--Update/insert columns (with rows_out)
PROCEDURE upd_ins
(
ID_EPIS_DIAGNOSIS_HIST_in IN epis_diagnosis_hist.ID_EPIS_DIAGNOSIS_HIST%TYPE,
ID_EPIS_DIAGNOSIS_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
ID_PROFESSIONAL_in IN EPIS_DIAGNOSIS_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_DIAGNOSIS_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_TYPE%TYPE DEFAULT NULL,
ADW_LAST_UPDATE_in IN EPIS_DIAGNOSIS_HIST.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
NOTES_in IN EPIS_DIAGNOSIS_HIST.NOTES%TYPE DEFAULT NULL,
FLG_FINAL_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_FINAL_TYPE%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_NOTES_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS_NOTES%TYPE DEFAULT NULL,
DT_CREATION_TSTZ_in IN EPIS_DIAGNOSIS_HIST.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
ID_CANCEL_REASON_in IN EPIS_DIAGNOSIS_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_DIAGNOSIS_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_DIAGNOSIS_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_DIAGNOSIS_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_DIAGNOSIS_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
ID_EPISODE_ORIGIN_in IN EPIS_DIAGNOSIS_HIST.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
FLG_ADD_PROBLEM_in IN EPIS_DIAGNOSIS_HIST.FLG_ADD_PROBLEM%TYPE DEFAULT NULL,
ID_CDR_CALL_in IN EPIS_DIAGNOSIS_HIST.ID_CDR_CALL%TYPE DEFAULT NULL,
DT_INITIAL_DIAG_in IN EPIS_DIAGNOSIS_HIST.DT_INITIAL_DIAG%TYPE DEFAULT NULL,
ID_DIAG_BASIS_in IN EPIS_DIAGNOSIS_HIST.ID_DIAG_BASIS%TYPE DEFAULT NULL,
ID_DBASIS_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DBASIS_INST_OWNER%TYPE DEFAULT NULL,
DIAG_BASIS_SPEC_in IN EPIS_DIAGNOSIS_HIST.DIAG_BASIS_SPEC%TYPE DEFAULT NULL,
FLG_RECURRENCE_in IN EPIS_DIAGNOSIS_HIST.FLG_RECURRENCE%TYPE DEFAULT NULL,
FLG_MULT_TUMORS_in IN EPIS_DIAGNOSIS_HIST.FLG_MULT_TUMORS%TYPE DEFAULT NULL,
NUM_PRIMARY_TUMORS_in IN EPIS_DIAGNOSIS_HIST.NUM_PRIMARY_TUMORS%TYPE DEFAULT NULL,
ID_SUB_ANALYSIS_in IN EPIS_DIAGNOSIS_HIST.ID_SUB_ANALYSIS%TYPE DEFAULT NULL,
ID_SUBANALY_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_SUBANALY_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_AREA_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_AREA%TYPE DEFAULT NULL,
ID_ANATAREA_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATAREA_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_SIDE_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_SIDE%TYPE DEFAULT NULL,
ID_ANATSIDE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATSIDE_INST_OWNER%TYPE DEFAULT NULL,
ID_DIAGNOSIS_CONDITION_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGNOSIS_CONDITION%TYPE DEFAULT NULL,
ID_DIAGCOND_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGCOND_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_LOCATION_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCATION%TYPE DEFAULT NULL,
ID_LESION_LOCAT_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCAT_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_TYPE_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE%TYPE DEFAULT NULL,
ID_LESION_TYPE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE_INST_OWNER%TYPE DEFAULT NULL,
RANK_in IN EPIS_DIAGNOSIS_HIST.RANK%TYPE DEFAULT NULL,
handle_error_in        IN BOOLEAN := TRUE,
rows_out               IN OUT table_varchar
)
is
begin
upd(
ID_EPIS_DIAGNOSIS_HIST_IN => ID_EPIS_DIAGNOSIS_HIST_IN,
ID_EPIS_DIAGNOSIS_IN => ID_EPIS_DIAGNOSIS_IN,
ID_PROFESSIONAL_IN => ID_PROFESSIONAL_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
ADW_LAST_UPDATE_IN => ADW_LAST_UPDATE_IN,
NOTES_IN => NOTES_IN,
FLG_FINAL_TYPE_IN => FLG_FINAL_TYPE_IN,
ID_EPIS_DIAGNOSIS_NOTES_IN => ID_EPIS_DIAGNOSIS_NOTES_IN,
DT_CREATION_TSTZ_IN => DT_CREATION_TSTZ_IN,
ID_CANCEL_REASON_IN => ID_CANCEL_REASON_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
ID_EPISODE_ORIGIN_IN => ID_EPISODE_ORIGIN_IN,
FLG_ADD_PROBLEM_IN => FLG_ADD_PROBLEM_IN,
ID_CDR_CALL_IN => ID_CDR_CALL_IN,
DT_INITIAL_DIAG_IN => DT_INITIAL_DIAG_IN,
ID_DIAG_BASIS_IN => ID_DIAG_BASIS_IN,
ID_DBASIS_INST_OWNER_IN => ID_DBASIS_INST_OWNER_IN,
DIAG_BASIS_SPEC_IN => DIAG_BASIS_SPEC_IN,
FLG_RECURRENCE_IN => FLG_RECURRENCE_IN,
FLG_MULT_TUMORS_IN => FLG_MULT_TUMORS_IN,
NUM_PRIMARY_TUMORS_IN => NUM_PRIMARY_TUMORS_IN,
ID_SUB_ANALYSIS_IN => ID_SUB_ANALYSIS_IN,
ID_SUBANALY_INST_OWNER_IN => ID_SUBANALY_INST_OWNER_IN,
ID_ANATOMICAL_AREA_IN => ID_ANATOMICAL_AREA_IN,
ID_ANATAREA_INST_OWNER_IN => ID_ANATAREA_INST_OWNER_IN,
ID_ANATOMICAL_SIDE_IN => ID_ANATOMICAL_SIDE_IN,
ID_ANATSIDE_INST_OWNER_IN => ID_ANATSIDE_INST_OWNER_IN,
ID_DIAGNOSIS_CONDITION_IN => ID_DIAGNOSIS_CONDITION_IN,
ID_DIAGCOND_INST_OWNER_IN => ID_DIAGCOND_INST_OWNER_IN,
ID_LESION_LOCATION_IN => ID_LESION_LOCATION_IN,
ID_LESION_LOCAT_INST_OWNER_IN => ID_LESION_LOCAT_INST_OWNER_IN,
ID_LESION_TYPE_IN => ID_LESION_TYPE_IN,
ID_LESION_TYPE_INST_OWNER_IN => ID_LESION_TYPE_INST_OWNER_IN,
RANK_IN => RANK_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
IF SQL%ROWCOUNT = 0
THEN
ins(
ID_EPIS_DIAGNOSIS_HIST_IN => ID_EPIS_DIAGNOSIS_HIST_IN,
ID_EPIS_DIAGNOSIS_IN => ID_EPIS_DIAGNOSIS_IN,
ID_PROFESSIONAL_IN => ID_PROFESSIONAL_IN,
FLG_STATUS_IN => FLG_STATUS_IN,
FLG_TYPE_IN => FLG_TYPE_IN,
ADW_LAST_UPDATE_IN => ADW_LAST_UPDATE_IN,
NOTES_IN => NOTES_IN,
FLG_FINAL_TYPE_IN => FLG_FINAL_TYPE_IN,
ID_EPIS_DIAGNOSIS_NOTES_IN => ID_EPIS_DIAGNOSIS_NOTES_IN,
DT_CREATION_TSTZ_IN => DT_CREATION_TSTZ_IN,
ID_CANCEL_REASON_IN => ID_CANCEL_REASON_IN,
CREATE_USER_IN => CREATE_USER_IN,
CREATE_TIME_IN => CREATE_TIME_IN,
CREATE_INSTITUTION_IN => CREATE_INSTITUTION_IN,
UPDATE_USER_IN => UPDATE_USER_IN,
UPDATE_TIME_IN => UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN => UPDATE_INSTITUTION_IN,
ID_EPISODE_ORIGIN_IN => ID_EPISODE_ORIGIN_IN,
FLG_ADD_PROBLEM_IN => FLG_ADD_PROBLEM_IN,
ID_CDR_CALL_IN => ID_CDR_CALL_IN,
DT_INITIAL_DIAG_IN => DT_INITIAL_DIAG_IN,
ID_DIAG_BASIS_IN => ID_DIAG_BASIS_IN,
ID_DBASIS_INST_OWNER_IN => ID_DBASIS_INST_OWNER_IN,
DIAG_BASIS_SPEC_IN => DIAG_BASIS_SPEC_IN,
FLG_RECURRENCE_IN => FLG_RECURRENCE_IN,
FLG_MULT_TUMORS_IN => FLG_MULT_TUMORS_IN,
NUM_PRIMARY_TUMORS_IN => NUM_PRIMARY_TUMORS_IN,
ID_SUB_ANALYSIS_IN => ID_SUB_ANALYSIS_IN,
ID_SUBANALY_INST_OWNER_IN => ID_SUBANALY_INST_OWNER_IN,
ID_ANATOMICAL_AREA_IN => ID_ANATOMICAL_AREA_IN,
ID_ANATAREA_INST_OWNER_IN => ID_ANATAREA_INST_OWNER_IN,
ID_ANATOMICAL_SIDE_IN => ID_ANATOMICAL_SIDE_IN,
ID_ANATSIDE_INST_OWNER_IN => ID_ANATSIDE_INST_OWNER_IN,
ID_DIAGNOSIS_CONDITION_IN => ID_DIAGNOSIS_CONDITION_IN,
ID_DIAGCOND_INST_OWNER_IN => ID_DIAGCOND_INST_OWNER_IN,
ID_LESION_LOCATION_IN => ID_LESION_LOCATION_IN,
ID_LESION_LOCAT_INST_OWNER_IN => ID_LESION_LOCAT_INST_OWNER_IN,
ID_LESION_TYPE_IN => ID_LESION_TYPE_IN,
ID_LESION_TYPE_INST_OWNER_IN => ID_LESION_TYPE_INST_OWNER_IN,
RANK_IN => RANK_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
END IF;
end upd_ins;

--Update/insert columns (without rows_out)
PROCEDURE upd_ins
(
ID_EPIS_DIAGNOSIS_HIST_in IN epis_diagnosis_hist.ID_EPIS_DIAGNOSIS_HIST%TYPE,
ID_EPIS_DIAGNOSIS_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS%TYPE DEFAULT NULL,
ID_PROFESSIONAL_in IN EPIS_DIAGNOSIS_HIST.ID_PROFESSIONAL%TYPE DEFAULT NULL,
FLG_STATUS_in IN EPIS_DIAGNOSIS_HIST.FLG_STATUS%TYPE DEFAULT NULL,
FLG_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_TYPE%TYPE DEFAULT NULL,
ADW_LAST_UPDATE_in IN EPIS_DIAGNOSIS_HIST.ADW_LAST_UPDATE%TYPE DEFAULT NULL,
NOTES_in IN EPIS_DIAGNOSIS_HIST.NOTES%TYPE DEFAULT NULL,
FLG_FINAL_TYPE_in IN EPIS_DIAGNOSIS_HIST.FLG_FINAL_TYPE%TYPE DEFAULT NULL,
ID_EPIS_DIAGNOSIS_NOTES_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS_NOTES%TYPE DEFAULT NULL,
DT_CREATION_TSTZ_in IN EPIS_DIAGNOSIS_HIST.DT_CREATION_TSTZ%TYPE DEFAULT NULL,
ID_CANCEL_REASON_in IN EPIS_DIAGNOSIS_HIST.ID_CANCEL_REASON%TYPE DEFAULT NULL,
CREATE_USER_in IN EPIS_DIAGNOSIS_HIST.CREATE_USER%TYPE DEFAULT NULL,
CREATE_TIME_in IN EPIS_DIAGNOSIS_HIST.CREATE_TIME%TYPE DEFAULT NULL,
CREATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.CREATE_INSTITUTION%TYPE DEFAULT NULL,
UPDATE_USER_in IN EPIS_DIAGNOSIS_HIST.UPDATE_USER%TYPE DEFAULT NULL,
UPDATE_TIME_in IN EPIS_DIAGNOSIS_HIST.UPDATE_TIME%TYPE DEFAULT NULL,
UPDATE_INSTITUTION_in IN EPIS_DIAGNOSIS_HIST.UPDATE_INSTITUTION%TYPE DEFAULT NULL,
ID_EPISODE_ORIGIN_in IN EPIS_DIAGNOSIS_HIST.ID_EPISODE_ORIGIN%TYPE DEFAULT NULL,
FLG_ADD_PROBLEM_in IN EPIS_DIAGNOSIS_HIST.FLG_ADD_PROBLEM%TYPE DEFAULT NULL,
ID_CDR_CALL_in IN EPIS_DIAGNOSIS_HIST.ID_CDR_CALL%TYPE DEFAULT NULL,
DT_INITIAL_DIAG_in IN EPIS_DIAGNOSIS_HIST.DT_INITIAL_DIAG%TYPE DEFAULT NULL,
ID_DIAG_BASIS_in IN EPIS_DIAGNOSIS_HIST.ID_DIAG_BASIS%TYPE DEFAULT NULL,
ID_DBASIS_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DBASIS_INST_OWNER%TYPE DEFAULT NULL,
DIAG_BASIS_SPEC_in IN EPIS_DIAGNOSIS_HIST.DIAG_BASIS_SPEC%TYPE DEFAULT NULL,
FLG_RECURRENCE_in IN EPIS_DIAGNOSIS_HIST.FLG_RECURRENCE%TYPE DEFAULT NULL,
FLG_MULT_TUMORS_in IN EPIS_DIAGNOSIS_HIST.FLG_MULT_TUMORS%TYPE DEFAULT NULL,
NUM_PRIMARY_TUMORS_in IN EPIS_DIAGNOSIS_HIST.NUM_PRIMARY_TUMORS%TYPE DEFAULT NULL,
ID_SUB_ANALYSIS_in IN EPIS_DIAGNOSIS_HIST.ID_SUB_ANALYSIS%TYPE DEFAULT NULL,
ID_SUBANALY_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_SUBANALY_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_AREA_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_AREA%TYPE DEFAULT NULL,
ID_ANATAREA_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATAREA_INST_OWNER%TYPE DEFAULT NULL,
ID_ANATOMICAL_SIDE_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_SIDE%TYPE DEFAULT NULL,
ID_ANATSIDE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATSIDE_INST_OWNER%TYPE DEFAULT NULL,
ID_DIAGNOSIS_CONDITION_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGNOSIS_CONDITION%TYPE DEFAULT NULL,
ID_DIAGCOND_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGCOND_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_LOCATION_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCATION%TYPE DEFAULT NULL,
ID_LESION_LOCAT_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCAT_INST_OWNER%TYPE DEFAULT NULL,
ID_LESION_TYPE_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE%TYPE DEFAULT NULL,
ID_LESION_TYPE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE_INST_OWNER%TYPE DEFAULT NULL,
RANK_in IN EPIS_DIAGNOSIS_HIST.RANK%TYPE DEFAULT NULL,
handle_error_in        IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
upd_ins(
ID_EPIS_DIAGNOSIS_HIST_IN,
ID_EPIS_DIAGNOSIS_IN,
ID_PROFESSIONAL_IN,
FLG_STATUS_IN,
FLG_TYPE_IN,
ADW_LAST_UPDATE_IN,
NOTES_IN,
FLG_FINAL_TYPE_IN,
ID_EPIS_DIAGNOSIS_NOTES_IN,
DT_CREATION_TSTZ_IN,
ID_CANCEL_REASON_IN,
CREATE_USER_IN,
CREATE_TIME_IN,
CREATE_INSTITUTION_IN,
UPDATE_USER_IN,
UPDATE_TIME_IN,
UPDATE_INSTITUTION_IN,
ID_EPISODE_ORIGIN_IN,
FLG_ADD_PROBLEM_IN,
ID_CDR_CALL_IN,
DT_INITIAL_DIAG_IN,
ID_DIAG_BASIS_IN,
ID_DBASIS_INST_OWNER_IN,
DIAG_BASIS_SPEC_IN,
FLG_RECURRENCE_IN,
FLG_MULT_TUMORS_IN,
NUM_PRIMARY_TUMORS_IN,
ID_SUB_ANALYSIS_IN,
ID_SUBANALY_INST_OWNER_IN,
ID_ANATOMICAL_AREA_IN,
ID_ANATAREA_INST_OWNER_IN,
ID_ANATOMICAL_SIDE_IN,
ID_ANATSIDE_INST_OWNER_IN,
ID_DIAGNOSIS_CONDITION_IN,
ID_DIAGCOND_INST_OWNER_IN,
ID_LESION_LOCATION_IN,
ID_LESION_LOCAT_INST_OWNER_IN,
ID_LESION_TYPE_IN,
ID_LESION_TYPE_INST_OWNER_IN,
RANK_IN,
handle_error_in,
rows_out);
end upd_ins;

--Update by record (with rows_out)
PROCEDURE upd
(
rec_in          IN epis_diagnosis_hist%ROWTYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        IN OUT table_varchar
)
is
begin
upd(
ID_EPIS_DIAGNOSIS_HIST_IN => rec_in.ID_EPIS_DIAGNOSIS_HIST,
ID_EPIS_DIAGNOSIS_IN => rec_in.ID_EPIS_DIAGNOSIS,
ID_PROFESSIONAL_IN => rec_in.ID_PROFESSIONAL,
FLG_STATUS_IN => rec_in.FLG_STATUS,
FLG_TYPE_IN => rec_in.FLG_TYPE,
ADW_LAST_UPDATE_IN => rec_in.ADW_LAST_UPDATE,
NOTES_IN => rec_in.NOTES,
FLG_FINAL_TYPE_IN => rec_in.FLG_FINAL_TYPE,
ID_EPIS_DIAGNOSIS_NOTES_IN => rec_in.ID_EPIS_DIAGNOSIS_NOTES,
DT_CREATION_TSTZ_IN => rec_in.DT_CREATION_TSTZ,
ID_CANCEL_REASON_IN => rec_in.ID_CANCEL_REASON,
CREATE_USER_IN => rec_in.CREATE_USER,
CREATE_TIME_IN => rec_in.CREATE_TIME,
CREATE_INSTITUTION_IN => rec_in.CREATE_INSTITUTION,
UPDATE_USER_IN => rec_in.UPDATE_USER,
UPDATE_TIME_IN => rec_in.UPDATE_TIME,
UPDATE_INSTITUTION_IN => rec_in.UPDATE_INSTITUTION,
ID_EPISODE_ORIGIN_IN => rec_in.ID_EPISODE_ORIGIN,
FLG_ADD_PROBLEM_IN => rec_in.FLG_ADD_PROBLEM,
ID_CDR_CALL_IN => rec_in.ID_CDR_CALL,
DT_INITIAL_DIAG_IN => rec_in.DT_INITIAL_DIAG,
ID_DIAG_BASIS_IN => rec_in.ID_DIAG_BASIS,
ID_DBASIS_INST_OWNER_IN => rec_in.ID_DBASIS_INST_OWNER,
DIAG_BASIS_SPEC_IN => rec_in.DIAG_BASIS_SPEC,
FLG_RECURRENCE_IN => rec_in.FLG_RECURRENCE,
FLG_MULT_TUMORS_IN => rec_in.FLG_MULT_TUMORS,
NUM_PRIMARY_TUMORS_IN => rec_in.NUM_PRIMARY_TUMORS,
ID_SUB_ANALYSIS_IN => rec_in.ID_SUB_ANALYSIS,
ID_SUBANALY_INST_OWNER_IN => rec_in.ID_SUBANALY_INST_OWNER,
ID_ANATOMICAL_AREA_IN => rec_in.ID_ANATOMICAL_AREA,
ID_ANATAREA_INST_OWNER_IN => rec_in.ID_ANATAREA_INST_OWNER,
ID_ANATOMICAL_SIDE_IN => rec_in.ID_ANATOMICAL_SIDE,
ID_ANATSIDE_INST_OWNER_IN => rec_in.ID_ANATSIDE_INST_OWNER,
ID_DIAGNOSIS_CONDITION_IN => rec_in.ID_DIAGNOSIS_CONDITION,
ID_DIAGCOND_INST_OWNER_IN => rec_in.ID_DIAGCOND_INST_OWNER,
ID_LESION_LOCATION_IN => rec_in.ID_LESION_LOCATION,
ID_LESION_LOCAT_INST_OWNER_IN => rec_in.ID_LESION_LOCAT_INST_OWNER,
ID_LESION_TYPE_IN => rec_in.ID_LESION_TYPE,
ID_LESION_TYPE_INST_OWNER_IN => rec_in.ID_LESION_TYPE_INST_OWNER,
RANK_IN => rec_in.RANK,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end upd;

--Update by record (without rows_out)
PROCEDURE upd
(
rec_in          IN epis_diagnosis_hist%ROWTYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
upd(
ID_EPIS_DIAGNOSIS_HIST_IN => rec_in.ID_EPIS_DIAGNOSIS_HIST,
ID_EPIS_DIAGNOSIS_IN => rec_in.ID_EPIS_DIAGNOSIS,
ID_PROFESSIONAL_IN => rec_in.ID_PROFESSIONAL,
FLG_STATUS_IN => rec_in.FLG_STATUS,
FLG_TYPE_IN => rec_in.FLG_TYPE,
ADW_LAST_UPDATE_IN => rec_in.ADW_LAST_UPDATE,
NOTES_IN => rec_in.NOTES,
FLG_FINAL_TYPE_IN => rec_in.FLG_FINAL_TYPE,
ID_EPIS_DIAGNOSIS_NOTES_IN => rec_in.ID_EPIS_DIAGNOSIS_NOTES,
DT_CREATION_TSTZ_IN => rec_in.DT_CREATION_TSTZ,
ID_CANCEL_REASON_IN => rec_in.ID_CANCEL_REASON,
CREATE_USER_IN => rec_in.CREATE_USER,
CREATE_TIME_IN => rec_in.CREATE_TIME,
CREATE_INSTITUTION_IN => rec_in.CREATE_INSTITUTION,
UPDATE_USER_IN => rec_in.UPDATE_USER,
UPDATE_TIME_IN => rec_in.UPDATE_TIME,
UPDATE_INSTITUTION_IN => rec_in.UPDATE_INSTITUTION,
ID_EPISODE_ORIGIN_IN => rec_in.ID_EPISODE_ORIGIN,
FLG_ADD_PROBLEM_IN => rec_in.FLG_ADD_PROBLEM,
ID_CDR_CALL_IN => rec_in.ID_CDR_CALL,
DT_INITIAL_DIAG_IN => rec_in.DT_INITIAL_DIAG,
ID_DIAG_BASIS_IN => rec_in.ID_DIAG_BASIS,
ID_DBASIS_INST_OWNER_IN => rec_in.ID_DBASIS_INST_OWNER,
DIAG_BASIS_SPEC_IN => rec_in.DIAG_BASIS_SPEC,
FLG_RECURRENCE_IN => rec_in.FLG_RECURRENCE,
FLG_MULT_TUMORS_IN => rec_in.FLG_MULT_TUMORS,
NUM_PRIMARY_TUMORS_IN => rec_in.NUM_PRIMARY_TUMORS,
ID_SUB_ANALYSIS_IN => rec_in.ID_SUB_ANALYSIS,
ID_SUBANALY_INST_OWNER_IN => rec_in.ID_SUBANALY_INST_OWNER,
ID_ANATOMICAL_AREA_IN => rec_in.ID_ANATOMICAL_AREA,
ID_ANATAREA_INST_OWNER_IN => rec_in.ID_ANATAREA_INST_OWNER,
ID_ANATOMICAL_SIDE_IN => rec_in.ID_ANATOMICAL_SIDE,
ID_ANATSIDE_INST_OWNER_IN => rec_in.ID_ANATSIDE_INST_OWNER,
ID_DIAGNOSIS_CONDITION_IN => rec_in.ID_DIAGNOSIS_CONDITION,
ID_DIAGCOND_INST_OWNER_IN => rec_in.ID_DIAGCOND_INST_OWNER,
ID_LESION_LOCATION_IN => rec_in.ID_LESION_LOCATION,
ID_LESION_LOCAT_INST_OWNER_IN => rec_in.ID_LESION_LOCAT_INST_OWNER,
ID_LESION_TYPE_IN => rec_in.ID_LESION_TYPE,
ID_LESION_TYPE_INST_OWNER_IN => rec_in.ID_LESION_TYPE_INST_OWNER,
RANK_IN => rec_in.RANK,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end upd;

--Update with collection (with rows_out)
PROCEDURE upd
(
col_in            IN epis_diagnosis_hist_tc,
ignore_if_null_in IN BOOLEAN := TRUE,
handle_error_in   IN BOOLEAN := TRUE,
rows_out          IN OUT table_varchar
)
is
l_ID_EPIS_DIAGNOSIS_HIST ID_EPIS_DIAGNOSIS_HIST_CC;
l_ID_EPIS_DIAGNOSIS ID_EPIS_DIAGNOSIS_CC;
l_ID_PROFESSIONAL ID_PROFESSIONAL_CC;
l_FLG_STATUS FLG_STATUS_CC;
l_FLG_TYPE FLG_TYPE_CC;
l_ADW_LAST_UPDATE ADW_LAST_UPDATE_CC;
l_NOTES NOTES_CC;
l_FLG_FINAL_TYPE FLG_FINAL_TYPE_CC;
l_ID_EPIS_DIAGNOSIS_NOTES ID_EPIS_DIAGNOSIS_NOTES_CC;
l_DT_CREATION_TSTZ DT_CREATION_TSTZ_CC;
l_ID_CANCEL_REASON ID_CANCEL_REASON_CC;
l_CREATE_USER CREATE_USER_CC;
l_CREATE_TIME CREATE_TIME_CC;
l_CREATE_INSTITUTION CREATE_INSTITUTION_CC;
l_UPDATE_USER UPDATE_USER_CC;
l_UPDATE_TIME UPDATE_TIME_CC;
l_UPDATE_INSTITUTION UPDATE_INSTITUTION_CC;
l_ID_EPISODE_ORIGIN ID_EPISODE_ORIGIN_CC;
l_FLG_ADD_PROBLEM FLG_ADD_PROBLEM_CC;
l_ID_CDR_CALL ID_CDR_CALL_CC;
l_DT_INITIAL_DIAG DT_INITIAL_DIAG_CC;
l_ID_DIAG_BASIS ID_DIAG_BASIS_CC;
l_ID_DBASIS_INST_OWNER ID_DBASIS_INST_OWNER_CC;
l_DIAG_BASIS_SPEC DIAG_BASIS_SPEC_CC;
l_FLG_RECURRENCE FLG_RECURRENCE_CC;
l_FLG_MULT_TUMORS FLG_MULT_TUMORS_CC;
l_NUM_PRIMARY_TUMORS NUM_PRIMARY_TUMORS_CC;
l_ID_SUB_ANALYSIS ID_SUB_ANALYSIS_CC;
l_ID_SUBANALY_INST_OWNER ID_SUBANALY_INST_OWNER_CC;
l_ID_ANATOMICAL_AREA ID_ANATOMICAL_AREA_CC;
l_ID_ANATAREA_INST_OWNER ID_ANATAREA_INST_OWNER_CC;
l_ID_ANATOMICAL_SIDE ID_ANATOMICAL_SIDE_CC;
l_ID_ANATSIDE_INST_OWNER ID_ANATSIDE_INST_OWNER_CC;
l_ID_DIAGNOSIS_CONDITION ID_DIAGNOSIS_CONDITION_CC;
l_ID_DIAGCOND_INST_OWNER ID_DIAGCOND_INST_OWNER_CC;
l_ID_LESION_LOCATION ID_LESION_LOCATION_CC;
l_ID_LESION_LOCAT_INST_OWNER ID_LESION_LOCAT_INST_OWNER_CC;
l_ID_LESION_TYPE ID_LESION_TYPE_CC;
l_ID_LESION_TYPE_INST_OWNER ID_LESION_TYPE_INST_OWNER_CC;
l_RANK RANK_CC;
begin
FOR i IN col_in.FIRST .. col_in.LAST
LOOP
l_ID_EPIS_DIAGNOSIS_HIST(i) := col_in(i).ID_EPIS_DIAGNOSIS_HIST;
l_ID_EPIS_DIAGNOSIS(i) := col_in(i).ID_EPIS_DIAGNOSIS;
l_ID_PROFESSIONAL(i) := col_in(i).ID_PROFESSIONAL;
l_FLG_STATUS(i) := col_in(i).FLG_STATUS;
l_FLG_TYPE(i) := col_in(i).FLG_TYPE;
l_ADW_LAST_UPDATE(i) := col_in(i).ADW_LAST_UPDATE;
l_NOTES(i) := col_in(i).NOTES;
l_FLG_FINAL_TYPE(i) := col_in(i).FLG_FINAL_TYPE;
l_ID_EPIS_DIAGNOSIS_NOTES(i) := col_in(i).ID_EPIS_DIAGNOSIS_NOTES;
l_DT_CREATION_TSTZ(i) := col_in(i).DT_CREATION_TSTZ;
l_ID_CANCEL_REASON(i) := col_in(i).ID_CANCEL_REASON;
l_CREATE_USER(i) := col_in(i).CREATE_USER;
l_CREATE_TIME(i) := col_in(i).CREATE_TIME;
l_CREATE_INSTITUTION(i) := col_in(i).CREATE_INSTITUTION;
l_UPDATE_USER(i) := col_in(i).UPDATE_USER;
l_UPDATE_TIME(i) := col_in(i).UPDATE_TIME;
l_UPDATE_INSTITUTION(i) := col_in(i).UPDATE_INSTITUTION;
l_ID_EPISODE_ORIGIN(i) := col_in(i).ID_EPISODE_ORIGIN;
l_FLG_ADD_PROBLEM(i) := col_in(i).FLG_ADD_PROBLEM;
l_ID_CDR_CALL(i) := col_in(i).ID_CDR_CALL;
l_DT_INITIAL_DIAG(i) := col_in(i).DT_INITIAL_DIAG;
l_ID_DIAG_BASIS(i) := col_in(i).ID_DIAG_BASIS;
l_ID_DBASIS_INST_OWNER(i) := col_in(i).ID_DBASIS_INST_OWNER;
l_DIAG_BASIS_SPEC(i) := col_in(i).DIAG_BASIS_SPEC;
l_FLG_RECURRENCE(i) := col_in(i).FLG_RECURRENCE;
l_FLG_MULT_TUMORS(i) := col_in(i).FLG_MULT_TUMORS;
l_NUM_PRIMARY_TUMORS(i) := col_in(i).NUM_PRIMARY_TUMORS;
l_ID_SUB_ANALYSIS(i) := col_in(i).ID_SUB_ANALYSIS;
l_ID_SUBANALY_INST_OWNER(i) := col_in(i).ID_SUBANALY_INST_OWNER;
l_ID_ANATOMICAL_AREA(i) := col_in(i).ID_ANATOMICAL_AREA;
l_ID_ANATAREA_INST_OWNER(i) := col_in(i).ID_ANATAREA_INST_OWNER;
l_ID_ANATOMICAL_SIDE(i) := col_in(i).ID_ANATOMICAL_SIDE;
l_ID_ANATSIDE_INST_OWNER(i) := col_in(i).ID_ANATSIDE_INST_OWNER;
l_ID_DIAGNOSIS_CONDITION(i) := col_in(i).ID_DIAGNOSIS_CONDITION;
l_ID_DIAGCOND_INST_OWNER(i) := col_in(i).ID_DIAGCOND_INST_OWNER;
l_ID_LESION_LOCATION(i) := col_in(i).ID_LESION_LOCATION;
l_ID_LESION_LOCAT_INST_OWNER(i) := col_in(i).ID_LESION_LOCAT_INST_OWNER;
l_ID_LESION_TYPE(i) := col_in(i).ID_LESION_TYPE;
l_ID_LESION_TYPE_INST_OWNER(i) := col_in(i).ID_LESION_TYPE_INST_OWNER;
l_RANK(i) := col_in(i).RANK;
END LOOP;
IF nvl(ignore_if_null_in, FALSE)
THEN
-- Set any columns to their current values
-- if incoming value is NULL.
-- Put WHEN clause on column-level triggers!
FORALL i IN col_in.FIRST .. col_in.LAST
UPDATE epis_diagnosis_hist
SET 
ID_EPIS_DIAGNOSIS = nvl(l_ID_EPIS_DIAGNOSIS(i), ID_EPIS_DIAGNOSIS),
ID_PROFESSIONAL = nvl(l_ID_PROFESSIONAL(i), ID_PROFESSIONAL),
FLG_STATUS = nvl(l_FLG_STATUS(i), FLG_STATUS),
FLG_TYPE = nvl(l_FLG_TYPE(i), FLG_TYPE),
ADW_LAST_UPDATE = nvl(l_ADW_LAST_UPDATE(i), ADW_LAST_UPDATE),
NOTES = nvl(l_NOTES(i), NOTES),
FLG_FINAL_TYPE = nvl(l_FLG_FINAL_TYPE(i), FLG_FINAL_TYPE),
ID_EPIS_DIAGNOSIS_NOTES = nvl(l_ID_EPIS_DIAGNOSIS_NOTES(i), ID_EPIS_DIAGNOSIS_NOTES),
DT_CREATION_TSTZ = nvl(l_DT_CREATION_TSTZ(i), DT_CREATION_TSTZ),
ID_CANCEL_REASON = nvl(l_ID_CANCEL_REASON(i), ID_CANCEL_REASON),
CREATE_USER = nvl(l_CREATE_USER(i), CREATE_USER),
CREATE_TIME = nvl(l_CREATE_TIME(i), CREATE_TIME),
CREATE_INSTITUTION = nvl(l_CREATE_INSTITUTION(i), CREATE_INSTITUTION),
UPDATE_USER = nvl(l_UPDATE_USER(i), UPDATE_USER),
UPDATE_TIME = nvl(l_UPDATE_TIME(i), UPDATE_TIME),
UPDATE_INSTITUTION = nvl(l_UPDATE_INSTITUTION(i), UPDATE_INSTITUTION),
ID_EPISODE_ORIGIN = nvl(l_ID_EPISODE_ORIGIN(i), ID_EPISODE_ORIGIN),
FLG_ADD_PROBLEM = nvl(l_FLG_ADD_PROBLEM(i), FLG_ADD_PROBLEM),
ID_CDR_CALL = nvl(l_ID_CDR_CALL(i), ID_CDR_CALL),
DT_INITIAL_DIAG = nvl(l_DT_INITIAL_DIAG(i), DT_INITIAL_DIAG),
ID_DIAG_BASIS = nvl(l_ID_DIAG_BASIS(i), ID_DIAG_BASIS),
ID_DBASIS_INST_OWNER = nvl(l_ID_DBASIS_INST_OWNER(i), ID_DBASIS_INST_OWNER),
DIAG_BASIS_SPEC = nvl(l_DIAG_BASIS_SPEC(i), DIAG_BASIS_SPEC),
FLG_RECURRENCE = nvl(l_FLG_RECURRENCE(i), FLG_RECURRENCE),
FLG_MULT_TUMORS = nvl(l_FLG_MULT_TUMORS(i), FLG_MULT_TUMORS),
NUM_PRIMARY_TUMORS = nvl(l_NUM_PRIMARY_TUMORS(i), NUM_PRIMARY_TUMORS),
ID_SUB_ANALYSIS = nvl(l_ID_SUB_ANALYSIS(i), ID_SUB_ANALYSIS),
ID_SUBANALY_INST_OWNER = nvl(l_ID_SUBANALY_INST_OWNER(i), ID_SUBANALY_INST_OWNER),
ID_ANATOMICAL_AREA = nvl(l_ID_ANATOMICAL_AREA(i), ID_ANATOMICAL_AREA),
ID_ANATAREA_INST_OWNER = nvl(l_ID_ANATAREA_INST_OWNER(i), ID_ANATAREA_INST_OWNER),
ID_ANATOMICAL_SIDE = nvl(l_ID_ANATOMICAL_SIDE(i), ID_ANATOMICAL_SIDE),
ID_ANATSIDE_INST_OWNER = nvl(l_ID_ANATSIDE_INST_OWNER(i), ID_ANATSIDE_INST_OWNER),
ID_DIAGNOSIS_CONDITION = nvl(l_ID_DIAGNOSIS_CONDITION(i), ID_DIAGNOSIS_CONDITION),
ID_DIAGCOND_INST_OWNER = nvl(l_ID_DIAGCOND_INST_OWNER(i), ID_DIAGCOND_INST_OWNER),
ID_LESION_LOCATION = nvl(l_ID_LESION_LOCATION(i), ID_LESION_LOCATION),
ID_LESION_LOCAT_INST_OWNER = nvl(l_ID_LESION_LOCAT_INST_OWNER(i), ID_LESION_LOCAT_INST_OWNER),
ID_LESION_TYPE = nvl(l_ID_LESION_TYPE(i), ID_LESION_TYPE),
ID_LESION_TYPE_INST_OWNER = nvl(l_ID_LESION_TYPE_INST_OWNER(i), ID_LESION_TYPE_INST_OWNER),
RANK = nvl(l_RANK(i), RANK)
 WHERE 
ID_EPIS_DIAGNOSIS_HIST = l_ID_EPIS_DIAGNOSIS_HIST(i)
 returning rowid bulk collect into rows_out;
ELSE
FORALL i IN col_in.FIRST .. col_in.LAST
UPDATE epis_diagnosis_hist
SET 
ID_EPIS_DIAGNOSIS = l_ID_EPIS_DIAGNOSIS(i),
ID_PROFESSIONAL = l_ID_PROFESSIONAL(i),
FLG_STATUS = l_FLG_STATUS(i),
FLG_TYPE = l_FLG_TYPE(i),
ADW_LAST_UPDATE = l_ADW_LAST_UPDATE(i),
NOTES = l_NOTES(i),
FLG_FINAL_TYPE = l_FLG_FINAL_TYPE(i),
ID_EPIS_DIAGNOSIS_NOTES = l_ID_EPIS_DIAGNOSIS_NOTES(i),
DT_CREATION_TSTZ = l_DT_CREATION_TSTZ(i),
ID_CANCEL_REASON = l_ID_CANCEL_REASON(i),
CREATE_USER = l_CREATE_USER(i),
CREATE_TIME = l_CREATE_TIME(i),
CREATE_INSTITUTION = l_CREATE_INSTITUTION(i),
UPDATE_USER = l_UPDATE_USER(i),
UPDATE_TIME = l_UPDATE_TIME(i),
UPDATE_INSTITUTION = l_UPDATE_INSTITUTION(i),
ID_EPISODE_ORIGIN = l_ID_EPISODE_ORIGIN(i),
FLG_ADD_PROBLEM = l_FLG_ADD_PROBLEM(i),
ID_CDR_CALL = l_ID_CDR_CALL(i),
DT_INITIAL_DIAG = l_DT_INITIAL_DIAG(i),
ID_DIAG_BASIS = l_ID_DIAG_BASIS(i),
ID_DBASIS_INST_OWNER = l_ID_DBASIS_INST_OWNER(i),
DIAG_BASIS_SPEC = l_DIAG_BASIS_SPEC(i),
FLG_RECURRENCE = l_FLG_RECURRENCE(i),
FLG_MULT_TUMORS = l_FLG_MULT_TUMORS(i),
NUM_PRIMARY_TUMORS = l_NUM_PRIMARY_TUMORS(i),
ID_SUB_ANALYSIS = l_ID_SUB_ANALYSIS(i),
ID_SUBANALY_INST_OWNER = l_ID_SUBANALY_INST_OWNER(i),
ID_ANATOMICAL_AREA = l_ID_ANATOMICAL_AREA(i),
ID_ANATAREA_INST_OWNER = l_ID_ANATAREA_INST_OWNER(i),
ID_ANATOMICAL_SIDE = l_ID_ANATOMICAL_SIDE(i),
ID_ANATSIDE_INST_OWNER = l_ID_ANATSIDE_INST_OWNER(i),
ID_DIAGNOSIS_CONDITION = l_ID_DIAGNOSIS_CONDITION(i),
ID_DIAGCOND_INST_OWNER = l_ID_DIAGCOND_INST_OWNER(i),
ID_LESION_LOCATION = l_ID_LESION_LOCATION(i),
ID_LESION_LOCAT_INST_OWNER = l_ID_LESION_LOCAT_INST_OWNER(i),
ID_LESION_TYPE = l_ID_LESION_TYPE(i),
ID_LESION_TYPE_INST_OWNER = l_ID_LESION_TYPE_INST_OWNER(i),
RANK = l_RANK(i)
 WHERE 
ID_EPIS_DIAGNOSIS_HIST = l_ID_EPIS_DIAGNOSIS_HIST(i)
 returning rowid bulk collect into rows_out;
END IF;

EXCEPTION
WHEN e_forall_error THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
LOOP
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END LOOP;
END IF;
WHEN OTHERS THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end upd;

--Update with collection (without rows_out)
PROCEDURE upd
(
col_in            IN epis_diagnosis_hist_tc,
ignore_if_null_in IN BOOLEAN := TRUE,
handle_error_in   IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
end upd;

--Dynamic update string
FUNCTION dynupdstr
(
colname_in IN all_tab_columns.column_name%TYPE,
where_in   IN VARCHAR2 := NULL
)
RETURN VARCHAR2 IS
BEGIN
RETURN 'BEGIN UPDATE epis_diagnosis_hist
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
END dynupdstr;

-- Use Native Dynamic SQL increment a single NUMBER column
-- for all rows specified by the dynamic WHERE clause (with rows_out)
PROCEDURE increment_onecol
(
colname_in         IN all_tab_columns.column_name%TYPE,
where_in           IN VARCHAR2,
increment_value_in IN NUMBER DEFAULT 1,
handle_error_in    IN BOOLEAN := TRUE,
rows_out           OUT table_varchar
)
is
begin
EXECUTE IMMEDIATE 'BEGIN UPDATE epis_diagnosis_hist
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in,1) ||
' WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
USING OUT rows_out;
end increment_onecol;

-- Use Native Dynamic SQL increment a single NUMBER column
-- for all rows specified by the dynamic WHERE clause (without rows_out)
PROCEDURE increment_onecol
(
colname_in         IN all_tab_columns.column_name%TYPE,
where_in           IN VARCHAR2,
increment_value_in IN NUMBER DEFAULT 1,
handle_error_in    IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
EXECUTE IMMEDIATE 'UPDATE epis_diagnosis_hist
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in,1) ||
' WHERE ' || nvl(where_in, '1=1');
end increment_onecol;

-- Delete one row by primary key
PROCEDURE del
(
ID_EPIS_DIAGNOSIS_HIST_in IN epis_diagnosis_hist.ID_EPIS_DIAGNOSIS_HIST%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM epis_diagnosis_hist
 WHERE
ID_EPIS_DIAGNOSIS_HIST = ID_EPIS_DIAGNOSIS_HIST_IN
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del;

-- Delete one row by primary key
PROCEDURE del
(
ID_EPIS_DIAGNOSIS_HIST_in IN epis_diagnosis_hist.ID_EPIS_DIAGNOSIS_HIST%TYPE,
handle_error_in        IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
del(
ID_EPIS_DIAGNOSIS_HIST_IN => ID_EPIS_DIAGNOSIS_HIST_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del;

-- Delete all rows for this EDH_CNCPTTR_FK foreign key value
PROCEDURE del_EDH_CNCPTTR_FK
(
ID_DIAG_BASIS_in IN EPIS_DIAGNOSIS_HIST.ID_DIAG_BASIS%TYPE,
ID_DBASIS_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DBASIS_INST_OWNER%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM epis_diagnosis_hist
 WHERE
ID_DIAG_BASIS = ID_DIAG_BASIS_in AND 
ID_DBASIS_INST_OWNER = ID_DBASIS_INST_OWNER_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_EDH_CNCPTTR_FK;

-- Delete all rows for this EDH_CRE_FK foreign key value
PROCEDURE del_EDH_CRE_FK
(
ID_CANCEL_REASON_in IN EPIS_DIAGNOSIS_HIST.ID_CANCEL_REASON%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM epis_diagnosis_hist
 WHERE
ID_CANCEL_REASON = ID_CANCEL_REASON_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_EDH_CRE_FK;

-- Delete all rows for this EDH_EDS_FK foreign key value
PROCEDURE del_EDH_EDS_FK
(
ID_EPIS_DIAGNOSIS_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM epis_diagnosis_hist
 WHERE
ID_EPIS_DIAGNOSIS = ID_EPIS_DIAGNOSIS_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_EDH_EDS_FK;

-- Delete all rows for this EDH_EPIS_ORI_FK foreign key value
PROCEDURE del_EDH_EPIS_ORI_FK
(
ID_EPISODE_ORIGIN_in IN EPIS_DIAGNOSIS_HIST.ID_EPISODE_ORIGIN%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM epis_diagnosis_hist
 WHERE
ID_EPISODE_ORIGIN = ID_EPISODE_ORIGIN_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_EDH_EPIS_ORI_FK;

-- Delete all rows for this EDH_ICC_FK foreign key value
PROCEDURE del_EDH_ICC_FK
(
ID_CDR_CALL_in IN EPIS_DIAGNOSIS_HIST.ID_CDR_CALL%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM epis_diagnosis_hist
 WHERE
ID_CDR_CALL = ID_CDR_CALL_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_EDH_ICC_FK;

-- Delete all rows for this EDH_PROF_FK foreign key value
PROCEDURE del_EDH_PROF_FK
(
ID_PROFESSIONAL_in IN EPIS_DIAGNOSIS_HIST.ID_PROFESSIONAL%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM epis_diagnosis_hist
 WHERE
ID_PROFESSIONAL = ID_PROFESSIONAL_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_EDH_PROF_FK;

-- Delete all rows for this EDSH_ANAT_AREA_FK foreign key value
PROCEDURE del_EDSH_ANAT_AREA_FK
(
ID_ANATOMICAL_AREA_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_AREA%TYPE,
ID_ANATAREA_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATAREA_INST_OWNER%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM epis_diagnosis_hist
 WHERE
ID_ANATOMICAL_AREA = ID_ANATOMICAL_AREA_in AND 
ID_ANATAREA_INST_OWNER = ID_ANATAREA_INST_OWNER_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_EDSH_ANAT_AREA_FK;

-- Delete all rows for this EDSH_ANAT_SIDE_FK foreign key value
PROCEDURE del_EDSH_ANAT_SIDE_FK
(
ID_ANATOMICAL_SIDE_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_SIDE%TYPE,
ID_ANATSIDE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATSIDE_INST_OWNER%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM epis_diagnosis_hist
 WHERE
ID_ANATOMICAL_SIDE = ID_ANATOMICAL_SIDE_in AND 
ID_ANATSIDE_INST_OWNER = ID_ANATSIDE_INST_OWNER_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_EDSH_ANAT_SIDE_FK;

-- Delete all rows for this EDSH_DIAG_COND_FK foreign key value
PROCEDURE del_EDSH_DIAG_COND_FK
(
ID_DIAGNOSIS_CONDITION_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGNOSIS_CONDITION%TYPE,
ID_DIAGCOND_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGCOND_INST_OWNER%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM epis_diagnosis_hist
 WHERE
ID_DIAGNOSIS_CONDITION = ID_DIAGNOSIS_CONDITION_in AND 
ID_DIAGCOND_INST_OWNER = ID_DIAGCOND_INST_OWNER_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_EDSH_DIAG_COND_FK;

-- Delete all rows for this EDSH_LES_LOC_FK foreign key value
PROCEDURE del_EDSH_LES_LOC_FK
(
ID_LESION_LOCATION_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCATION%TYPE,
ID_LESION_LOCAT_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCAT_INST_OWNER%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM epis_diagnosis_hist
 WHERE
ID_LESION_LOCATION = ID_LESION_LOCATION_in AND 
ID_LESION_LOCAT_INST_OWNER = ID_LESION_LOCAT_INST_OWNER_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_EDSH_LES_LOC_FK;

-- Delete all rows for this EDSH_LES_TYP_FK foreign key value
PROCEDURE del_EDSH_LES_TYP_FK
(
ID_LESION_TYPE_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE%TYPE,
ID_LESION_TYPE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE_INST_OWNER%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM epis_diagnosis_hist
 WHERE
ID_LESION_TYPE = ID_LESION_TYPE_in AND 
ID_LESION_TYPE_INST_OWNER = ID_LESION_TYPE_INST_OWNER_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_EDSH_LES_TYP_FK;

-- Delete all rows for this EDSH_SUB_ANALY_FK foreign key value
PROCEDURE del_EDSH_SUB_ANALY_FK
(
ID_SUB_ANALYSIS_in IN EPIS_DIAGNOSIS_HIST.ID_SUB_ANALYSIS%TYPE,
ID_SUBANALY_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_SUBANALY_INST_OWNER%TYPE,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
DELETE FROM epis_diagnosis_hist
 WHERE
ID_SUB_ANALYSIS = ID_SUB_ANALYSIS_in AND 
ID_SUBANALY_INST_OWNER = ID_SUBANALY_INST_OWNER_in
 RETURNING ROWID BULK COLLECT INTO rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_EDSH_SUB_ANALY_FK;

-- Delete all rows for this EDH_CNCPTTR_FK foreign key value
PROCEDURE del_EDH_CNCPTTR_FK
(
ID_DIAG_BASIS_in IN EPIS_DIAGNOSIS_HIST.ID_DIAG_BASIS%TYPE,
ID_DBASIS_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DBASIS_INST_OWNER%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_EDH_CNCPTTR_FK(
ID_DIAG_BASIS_IN => ID_DIAG_BASIS_IN,
ID_DBASIS_INST_OWNER_IN => ID_DBASIS_INST_OWNER_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_EDH_CNCPTTR_FK;

-- Delete all rows for this EDH_CRE_FK foreign key value
PROCEDURE del_EDH_CRE_FK
(
ID_CANCEL_REASON_in IN EPIS_DIAGNOSIS_HIST.ID_CANCEL_REASON%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_EDH_CRE_FK(
ID_CANCEL_REASON_IN => ID_CANCEL_REASON_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_EDH_CRE_FK;

-- Delete all rows for this EDH_EDS_FK foreign key value
PROCEDURE del_EDH_EDS_FK
(
ID_EPIS_DIAGNOSIS_in IN EPIS_DIAGNOSIS_HIST.ID_EPIS_DIAGNOSIS%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_EDH_EDS_FK(
ID_EPIS_DIAGNOSIS_IN => ID_EPIS_DIAGNOSIS_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_EDH_EDS_FK;

-- Delete all rows for this EDH_EPIS_ORI_FK foreign key value
PROCEDURE del_EDH_EPIS_ORI_FK
(
ID_EPISODE_ORIGIN_in IN EPIS_DIAGNOSIS_HIST.ID_EPISODE_ORIGIN%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_EDH_EPIS_ORI_FK(
ID_EPISODE_ORIGIN_IN => ID_EPISODE_ORIGIN_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_EDH_EPIS_ORI_FK;

-- Delete all rows for this EDH_ICC_FK foreign key value
PROCEDURE del_EDH_ICC_FK
(
ID_CDR_CALL_in IN EPIS_DIAGNOSIS_HIST.ID_CDR_CALL%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_EDH_ICC_FK(
ID_CDR_CALL_IN => ID_CDR_CALL_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_EDH_ICC_FK;

-- Delete all rows for this EDH_PROF_FK foreign key value
PROCEDURE del_EDH_PROF_FK
(
ID_PROFESSIONAL_in IN EPIS_DIAGNOSIS_HIST.ID_PROFESSIONAL%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_EDH_PROF_FK(
ID_PROFESSIONAL_IN => ID_PROFESSIONAL_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_EDH_PROF_FK;

-- Delete all rows for this EDSH_ANAT_AREA_FK foreign key value
PROCEDURE del_EDSH_ANAT_AREA_FK
(
ID_ANATOMICAL_AREA_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_AREA%TYPE,
ID_ANATAREA_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATAREA_INST_OWNER%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_EDSH_ANAT_AREA_FK(
ID_ANATOMICAL_AREA_IN => ID_ANATOMICAL_AREA_IN,
ID_ANATAREA_INST_OWNER_IN => ID_ANATAREA_INST_OWNER_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_EDSH_ANAT_AREA_FK;

-- Delete all rows for this EDSH_ANAT_SIDE_FK foreign key value
PROCEDURE del_EDSH_ANAT_SIDE_FK
(
ID_ANATOMICAL_SIDE_in IN EPIS_DIAGNOSIS_HIST.ID_ANATOMICAL_SIDE%TYPE,
ID_ANATSIDE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_ANATSIDE_INST_OWNER%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_EDSH_ANAT_SIDE_FK(
ID_ANATOMICAL_SIDE_IN => ID_ANATOMICAL_SIDE_IN,
ID_ANATSIDE_INST_OWNER_IN => ID_ANATSIDE_INST_OWNER_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_EDSH_ANAT_SIDE_FK;

-- Delete all rows for this EDSH_DIAG_COND_FK foreign key value
PROCEDURE del_EDSH_DIAG_COND_FK
(
ID_DIAGNOSIS_CONDITION_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGNOSIS_CONDITION%TYPE,
ID_DIAGCOND_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_DIAGCOND_INST_OWNER%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_EDSH_DIAG_COND_FK(
ID_DIAGNOSIS_CONDITION_IN => ID_DIAGNOSIS_CONDITION_IN,
ID_DIAGCOND_INST_OWNER_IN => ID_DIAGCOND_INST_OWNER_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_EDSH_DIAG_COND_FK;

-- Delete all rows for this EDSH_LES_LOC_FK foreign key value
PROCEDURE del_EDSH_LES_LOC_FK
(
ID_LESION_LOCATION_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCATION%TYPE,
ID_LESION_LOCAT_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_LOCAT_INST_OWNER%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_EDSH_LES_LOC_FK(
ID_LESION_LOCATION_IN => ID_LESION_LOCATION_IN,
ID_LESION_LOCAT_INST_OWNER_IN => ID_LESION_LOCAT_INST_OWNER_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_EDSH_LES_LOC_FK;

-- Delete all rows for this EDSH_LES_TYP_FK foreign key value
PROCEDURE del_EDSH_LES_TYP_FK
(
ID_LESION_TYPE_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE%TYPE,
ID_LESION_TYPE_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_LESION_TYPE_INST_OWNER%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_EDSH_LES_TYP_FK(
ID_LESION_TYPE_IN => ID_LESION_TYPE_IN,
ID_LESION_TYPE_INST_OWNER_IN => ID_LESION_TYPE_INST_OWNER_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_EDSH_LES_TYP_FK;

-- Delete all rows for this EDSH_SUB_ANALY_FK foreign key value
PROCEDURE del_EDSH_SUB_ANALY_FK
(
ID_SUB_ANALYSIS_in IN EPIS_DIAGNOSIS_HIST.ID_SUB_ANALYSIS%TYPE,
ID_SUBANALY_INST_OWNER_in IN EPIS_DIAGNOSIS_HIST.ID_SUBANALY_INST_OWNER%TYPE,
handle_error_in IN BOOLEAN := TRUE
)
is
rows_out table_varchar;
begin
 del_EDSH_SUB_ANALY_FK(
ID_SUB_ANALYSIS_IN => ID_SUB_ANALYSIS_IN,
ID_SUBANALY_INST_OWNER_IN => ID_SUBANALY_INST_OWNER_IN,
handle_error_in        => handle_error_in,
rows_out               => rows_out);
end del_EDSH_SUB_ANALY_FK;

-- Deletions using dynamic SQL
FUNCTION dyndelstr
(
where_in IN VARCHAR2
)
 RETURN VARCHAR2 is 
begin
IF where_in IS NULL
THEN
RETURN 'DELETE FROM epis_diagnosis_hist';
ELSE
RETURN 'DELETE FROM epis_diagnosis_hist WHERE ' || where_in;
END IF;
end dyndelstr;
-- Delete all rows specified by dynamic WHERE clause
PROCEDURE del_by
(
where_clause_in IN VARCHAR2,
handle_error_in IN BOOLEAN := TRUE,
rows_out        OUT table_varchar
)
is
begin
EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr (where_clause_in) || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;' using OUT rows_out;

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_by;

-- Delete all rows specified by dynamic WHERE clause
PROCEDURE del_by
(
where_clause_in IN VARCHAR2,
handle_error_in IN BOOLEAN := TRUE
)
is
begin
EXECUTE IMMEDIATE dyndelstr (where_clause_in);

EXCEPTION
WHEN e_null_column_value
OR e_existing_fky_reference
OR e_check_constraint_failure
OR e_no_parent_key
OR e_child_record_found
OR e_forall_error
OR e_integ_constraint_failure THEN
IF NOT handle_error_in
THEN
RAISE;
ELSE
pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
END IF;

end del_by;

-- Initialize a record with default values for columns in the table (prc)
PROCEDURE initrec(epis_diagnosis_hist_inout IN OUT epis_diagnosis_hist%ROWTYPE)
is
begin
epis_diagnosis_hist_inout.ID_EPIS_DIAGNOSIS_HIST := NULL;
epis_diagnosis_hist_inout.ID_EPIS_DIAGNOSIS := NULL;
epis_diagnosis_hist_inout.ID_PROFESSIONAL := NULL;
epis_diagnosis_hist_inout.FLG_STATUS := NULL;
epis_diagnosis_hist_inout.FLG_TYPE := NULL;
epis_diagnosis_hist_inout.ADW_LAST_UPDATE := NULL;
epis_diagnosis_hist_inout.NOTES := NULL;
epis_diagnosis_hist_inout.FLG_FINAL_TYPE := NULL;
epis_diagnosis_hist_inout.ID_EPIS_DIAGNOSIS_NOTES := NULL;
epis_diagnosis_hist_inout.DT_CREATION_TSTZ := NULL;
epis_diagnosis_hist_inout.ID_CANCEL_REASON := NULL;
epis_diagnosis_hist_inout.CREATE_USER := NULL;
epis_diagnosis_hist_inout.CREATE_TIME := NULL;
epis_diagnosis_hist_inout.CREATE_INSTITUTION := NULL;
epis_diagnosis_hist_inout.UPDATE_USER := NULL;
epis_diagnosis_hist_inout.UPDATE_TIME := NULL;
epis_diagnosis_hist_inout.UPDATE_INSTITUTION := NULL;
epis_diagnosis_hist_inout.ID_EPISODE_ORIGIN := NULL;
epis_diagnosis_hist_inout.FLG_ADD_PROBLEM := NULL;
epis_diagnosis_hist_inout.ID_CDR_CALL := NULL;
epis_diagnosis_hist_inout.DT_INITIAL_DIAG := NULL;
epis_diagnosis_hist_inout.ID_DIAG_BASIS := NULL;
epis_diagnosis_hist_inout.ID_DBASIS_INST_OWNER := NULL;
epis_diagnosis_hist_inout.DIAG_BASIS_SPEC := NULL;
epis_diagnosis_hist_inout.FLG_RECURRENCE := NULL;
epis_diagnosis_hist_inout.FLG_MULT_TUMORS := NULL;
epis_diagnosis_hist_inout.NUM_PRIMARY_TUMORS := NULL;
epis_diagnosis_hist_inout.ID_SUB_ANALYSIS := NULL;
epis_diagnosis_hist_inout.ID_SUBANALY_INST_OWNER := NULL;
epis_diagnosis_hist_inout.ID_ANATOMICAL_AREA := NULL;
epis_diagnosis_hist_inout.ID_ANATAREA_INST_OWNER := NULL;
epis_diagnosis_hist_inout.ID_ANATOMICAL_SIDE := NULL;
epis_diagnosis_hist_inout.ID_ANATSIDE_INST_OWNER := NULL;
epis_diagnosis_hist_inout.ID_DIAGNOSIS_CONDITION := NULL;
epis_diagnosis_hist_inout.ID_DIAGCOND_INST_OWNER := NULL;
epis_diagnosis_hist_inout.ID_LESION_LOCATION := NULL;
epis_diagnosis_hist_inout.ID_LESION_LOCAT_INST_OWNER := NULL;
epis_diagnosis_hist_inout.ID_LESION_TYPE := NULL;
epis_diagnosis_hist_inout.ID_LESION_TYPE_INST_OWNER := NULL;
epis_diagnosis_hist_inout.RANK := NULL;
end initrec;

-- Initialize a record with default values for columns in the table (fnc)
FUNCTION initrec RETURN epis_diagnosis_hist%ROWTYPE
is
l_epis_diagnosis_hist epis_diagnosis_hist%ROWTYPE;
begin
return l_epis_diagnosis_hist;
end initrec;

--get data from rowid
FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN epis_diagnosis_hist_tc
is
data epis_diagnosis_hist_tc;
begin
select * bulk collect into data from epis_diagnosis_hist
 WHERE rowid in (select /*+opt_estimate(table,t,scale_rows=0.0000001))*/ * from table(rows_in) t);
return data;
end get_data_rowid;

--get data from rowid (pragma autonomous transacion)
FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN epis_diagnosis_hist_tc
is
data epis_diagnosis_hist_tc;
PRAGMA AUTONOMOUS_TRANSACTION;
begin
data := get_data_rowid(rows_in);
commit;
return data;

EXCEPTION
WHEN others
THEN
pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
ROLLBACK;

end get_data_rowid_pat;

BEGIN
NULL;
END ts_epis_diagnosis_hist;
/
