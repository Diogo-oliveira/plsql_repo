/*-- Last Change Revision: $Rev: 1769547 $*/
/*-- Last Change by: $Author: carlos.ferreira $*/
/*-- Date of last change: $Date: 2017-01-31 17:13:07 +0000 (ter, 31 jan 2017) $*/
CREATE OR REPLACE PACKAGE BODY ts_discharge_newborn
/*
| Generated by or retrieved - DO NOT MODIFY!
| Created On: 2017-01-31 16:12:36
| Created By: ALERT
*/
 IS

    e_null_column_value EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_null_column_value, -1400);

    e_existing_fky_reference EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_existing_fky_reference, -2266);

    e_check_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_check_constraint_failure, -2290);

    e_no_parent_key EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_no_parent_key, -2291);

    e_child_record_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_child_record_found, -2292);

    e_forall_error EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_forall_error, -24381);

    -- Defined for backward compatibilty.
    e_integ_constraint_failure EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_integ_constraint_failure, -2291);

    PROCEDURE ins
    (
        id_episode_in          IN discharge_newborn.id_episode%TYPE,
        id_discharge_in        IN discharge_newborn.id_discharge%TYPE,
        id_pat_pregnancy_in    IN discharge_newborn.id_pat_pregnancy%TYPE,
        flg_condition_in       IN discharge_newborn.flg_condition%TYPE DEFAULT NULL,
        flg_status_in          IN discharge_newborn.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in      IN discharge_newborn.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN discharge_newborn.dt_create%TYPE DEFAULT NULL,
        id_prof_last_update_in IN discharge_newborn.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN discharge_newborn.dt_last_update%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN discharge_newborn.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN discharge_newborn.dt_cancel%TYPE DEFAULT NULL,
        create_user_in         IN discharge_newborn.create_user%TYPE DEFAULT NULL,
        create_time_in         IN discharge_newborn.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN discharge_newborn.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN discharge_newborn.update_user%TYPE DEFAULT NULL,
        update_time_in         IN discharge_newborn.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN discharge_newborn.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               OUT table_varchar
    ) IS
    BEGIN
        INSERT INTO discharge_newborn
            (id_episode,
             id_discharge,
             id_pat_pregnancy,
             flg_condition,
             flg_status,
             id_prof_create,
             dt_create,
             id_prof_last_update,
             dt_last_update,
             id_prof_cancel,
             dt_cancel,
             create_user,
             create_time,
             create_institution,
             update_user,
             update_time,
             update_institution)
        VALUES
            (id_episode_in,
             id_discharge_in,
             id_pat_pregnancy_in,
             flg_condition_in,
             flg_status_in,
             id_prof_create_in,
             dt_create_in,
             id_prof_last_update_in,
             dt_last_update_in,
             id_prof_cancel_in,
             dt_cancel_in,
             create_user_in,
             create_time_in,
             create_institution_in,
             update_user_in,
             update_time_in,
             update_institution_in)
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    PROCEDURE ins
    (
        id_episode_in          IN discharge_newborn.id_episode%TYPE,
        id_discharge_in        IN discharge_newborn.id_discharge%TYPE,
        id_pat_pregnancy_in    IN discharge_newborn.id_pat_pregnancy%TYPE,
        flg_condition_in       IN discharge_newborn.flg_condition%TYPE DEFAULT NULL,
        flg_status_in          IN discharge_newborn.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in      IN discharge_newborn.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN discharge_newborn.dt_create%TYPE DEFAULT NULL,
        id_prof_last_update_in IN discharge_newborn.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN discharge_newborn.dt_last_update%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN discharge_newborn.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN discharge_newborn.dt_cancel%TYPE DEFAULT NULL,
        create_user_in         IN discharge_newborn.create_user%TYPE DEFAULT NULL,
        create_time_in         IN discharge_newborn.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN discharge_newborn.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN discharge_newborn.update_user%TYPE DEFAULT NULL,
        update_time_in         IN discharge_newborn.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN discharge_newborn.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(id_episode_in          => id_episode_in,
            id_discharge_in        => id_discharge_in,
            id_pat_pregnancy_in    => id_pat_pregnancy_in,
            flg_condition_in       => flg_condition_in,
            flg_status_in          => flg_status_in,
            id_prof_create_in      => id_prof_create_in,
            dt_create_in           => dt_create_in,
            id_prof_last_update_in => id_prof_last_update_in,
            dt_last_update_in      => dt_last_update_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN discharge_newborn%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
        l_rec discharge_newborn%ROWTYPE := rec_in;
    BEGIN
    
        ins(id_episode_in          => l_rec.id_episode,
            id_discharge_in        => l_rec.id_discharge,
            id_pat_pregnancy_in    => l_rec.id_pat_pregnancy,
            flg_condition_in       => l_rec.flg_condition,
            flg_status_in          => l_rec.flg_status,
            id_prof_create_in      => l_rec.id_prof_create,
            dt_create_in           => l_rec.dt_create,
            id_prof_last_update_in => l_rec.id_prof_last_update,
            dt_last_update_in      => l_rec.dt_last_update,
            id_prof_cancel_in      => l_rec.id_prof_cancel,
            dt_cancel_in           => l_rec.dt_cancel,
            create_user_in         => l_rec.create_user,
            create_time_in         => l_rec.create_time,
            create_institution_in  => l_rec.create_institution,
            update_user_in         => l_rec.update_user,
            update_time_in         => l_rec.update_time,
            update_institution_in  => l_rec.update_institution,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END ins;

    PROCEDURE ins
    (
        rec_in          IN discharge_newborn%ROWTYPE,
        gen_pky_in      IN BOOLEAN DEFAULT FALSE,
        sequence_in     IN VARCHAR2 := NULL,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rec_in          => rec_in,
            gen_pky_in      => gen_pky_in,
            sequence_in     => sequence_in,
            handle_error_in => handle_error_in,
            rows_out        => rows_out);
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN discharge_newborn_tc,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        IF rows_in.count = 0
        THEN
            NULL;
        ELSE
            FORALL indx IN rows_in.first .. rows_in.last SAVE EXCEPTIONS
                INSERT INTO discharge_newborn
                VALUES rows_in
                    (indx)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END ins;

    -- Insert a collection of rows using FORALL; all primary key values
    -- must have already been generated, or are handled in triggers
    PROCEDURE ins
    (
        rows_in         IN discharge_newborn_tc,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        ins(rows_in => rows_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END ins;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_episode_in           IN discharge_newborn.id_episode%TYPE,
        id_discharge_in         IN discharge_newborn.id_discharge%TYPE,
        id_pat_pregnancy_in     IN discharge_newborn.id_pat_pregnancy%TYPE,
        flg_condition_in        IN discharge_newborn.flg_condition%TYPE DEFAULT NULL,
        flg_condition_nin       IN BOOLEAN := TRUE,
        flg_status_in           IN discharge_newborn.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        id_prof_create_in       IN discharge_newborn.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin      IN BOOLEAN := TRUE,
        dt_create_in            IN discharge_newborn.dt_create%TYPE DEFAULT NULL,
        dt_create_nin           IN BOOLEAN := TRUE,
        id_prof_last_update_in  IN discharge_newborn.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin IN BOOLEAN := TRUE,
        dt_last_update_in       IN discharge_newborn.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin      IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN discharge_newborn.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        dt_cancel_in            IN discharge_newborn.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin           IN BOOLEAN := TRUE,
        create_user_in          IN discharge_newborn.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN discharge_newborn.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN discharge_newborn.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN discharge_newborn.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN discharge_newborn.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN discharge_newborn.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_rows_out              table_varchar;
        l_flg_condition_n       NUMBER(1) := sys.diutil.bool_to_int(flg_condition_nin);
        l_flg_status_n          NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_create_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_create_n           NUMBER(1) := sys.diutil.bool_to_int(dt_create_nin);
        l_id_prof_last_update_n NUMBER(1) := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_n      NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_nin);
        l_id_prof_cancel_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_dt_cancel_n           NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_nin);
        l_create_user_n         NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
    BEGIN
    
        UPDATE discharge_newborn
           SET flg_condition       = decode(l_flg_condition_n, 0, flg_condition_in, nvl(flg_condition_in, flg_condition)),
               flg_status          = decode(l_flg_status_n, 0, flg_status_in, nvl(flg_status_in, flg_status)),
               id_prof_create      = decode(l_id_prof_create_n,
                                            0,
                                            id_prof_create_in,
                                            nvl(id_prof_create_in, id_prof_create)),
               dt_create           = decode(l_dt_create_n, 0, dt_create_in, nvl(dt_create_in, dt_create)),
               id_prof_last_update = decode(l_id_prof_last_update_n,
                                            0,
                                            id_prof_last_update_in,
                                            nvl(id_prof_last_update_in, id_prof_last_update)),
               dt_last_update      = decode(l_dt_last_update_n,
                                            0,
                                            dt_last_update_in,
                                            nvl(dt_last_update_in, dt_last_update)),
               id_prof_cancel      = decode(l_id_prof_cancel_n,
                                            0,
                                            id_prof_cancel_in,
                                            nvl(id_prof_cancel_in, id_prof_cancel)),
               dt_cancel           = decode(l_dt_cancel_n, 0, dt_cancel_in, nvl(dt_cancel_in, dt_cancel)),
               create_user         = decode(l_create_user_n, 0, create_user_in, nvl(create_user_in, create_user)),
               create_time         = decode(l_create_time_n, 0, create_time_in, nvl(create_time_in, create_time)),
               create_institution  = decode(l_create_institution_n,
                                            0,
                                            create_institution_in,
                                            nvl(create_institution_in, create_institution)),
               update_user         = decode(l_update_user_n, 0, update_user_in, nvl(update_user_in, update_user)),
               update_time         = decode(l_update_time_n, 0, update_time_in, nvl(update_time_in, update_time)),
               update_institution  = decode(l_update_institution_n,
                                            0,
                                            update_institution_in,
                                            nvl(update_institution_in, update_institution))
         WHERE id_episode = id_episode_in
           AND id_discharge = id_discharge_in
           AND id_pat_pregnancy = id_pat_pregnancy_in
        RETURNING ROWID BULK COLLECT INTO l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    -- Update any/all columns by primary key. If you pass NULL, then
    -- the current column value is set to itself. If you need a more
    -- selected UPDATE then use one of the onecol procedures below.
    PROCEDURE upd
    (
        id_episode_in           IN discharge_newborn.id_episode%TYPE,
        id_discharge_in         IN discharge_newborn.id_discharge%TYPE,
        id_pat_pregnancy_in     IN discharge_newborn.id_pat_pregnancy%TYPE,
        flg_condition_in        IN discharge_newborn.flg_condition%TYPE DEFAULT NULL,
        flg_condition_nin       IN BOOLEAN := TRUE,
        flg_status_in           IN discharge_newborn.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        id_prof_create_in       IN discharge_newborn.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin      IN BOOLEAN := TRUE,
        dt_create_in            IN discharge_newborn.dt_create%TYPE DEFAULT NULL,
        dt_create_nin           IN BOOLEAN := TRUE,
        id_prof_last_update_in  IN discharge_newborn.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin IN BOOLEAN := TRUE,
        dt_last_update_in       IN discharge_newborn.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin      IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN discharge_newborn.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        dt_cancel_in            IN discharge_newborn.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin           IN BOOLEAN := TRUE,
        create_user_in          IN discharge_newborn.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN discharge_newborn.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN discharge_newborn.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN discharge_newborn.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN discharge_newborn.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN discharge_newborn.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in           => id_episode_in,
            id_discharge_in         => id_discharge_in,
            id_pat_pregnancy_in     => id_pat_pregnancy_in,
            flg_condition_in        => flg_condition_in,
            flg_condition_nin       => flg_condition_nin,
            flg_status_in           => flg_status_in,
            flg_status_nin          => flg_status_nin,
            id_prof_create_in       => id_prof_create_in,
            id_prof_create_nin      => id_prof_create_nin,
            dt_create_in            => dt_create_in,
            dt_create_nin           => dt_create_nin,
            id_prof_last_update_in  => id_prof_last_update_in,
            id_prof_last_update_nin => id_prof_last_update_nin,
            dt_last_update_in       => dt_last_update_in,
            dt_last_update_nin      => dt_last_update_nin,
            id_prof_cancel_in       => id_prof_cancel_in,
            id_prof_cancel_nin      => id_prof_cancel_nin,
            dt_cancel_in            => dt_cancel_in,
            dt_cancel_nin           => dt_cancel_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        flg_condition_in        IN discharge_newborn.flg_condition%TYPE DEFAULT NULL,
        flg_condition_nin       IN BOOLEAN := TRUE,
        flg_status_in           IN discharge_newborn.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        id_prof_create_in       IN discharge_newborn.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin      IN BOOLEAN := TRUE,
        dt_create_in            IN discharge_newborn.dt_create%TYPE DEFAULT NULL,
        dt_create_nin           IN BOOLEAN := TRUE,
        id_prof_last_update_in  IN discharge_newborn.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin IN BOOLEAN := TRUE,
        dt_last_update_in       IN discharge_newborn.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin      IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN discharge_newborn.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        dt_cancel_in            IN discharge_newborn.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin           IN BOOLEAN := TRUE,
        create_user_in          IN discharge_newborn.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN discharge_newborn.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN discharge_newborn.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN discharge_newborn.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN discharge_newborn.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN discharge_newborn.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        where_in                IN VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE,
        rows_out                IN OUT table_varchar
    ) IS
        l_sql                   VARCHAR2(32767);
        l_rows_out              table_varchar;
        l_flg_condition_n       NUMBER(1) := sys.diutil.bool_to_int(flg_condition_nin);
        l_flg_status_n          NUMBER(1) := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_create_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_create_n           NUMBER(1) := sys.diutil.bool_to_int(dt_create_nin);
        l_id_prof_last_update_n NUMBER(1) := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_n      NUMBER(1) := sys.diutil.bool_to_int(dt_last_update_nin);
        l_id_prof_cancel_n      NUMBER(1) := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_dt_cancel_n           NUMBER(1) := sys.diutil.bool_to_int(dt_cancel_nin);
        l_create_user_n         NUMBER(1) := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         NUMBER(1) := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  NUMBER(1) := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         NUMBER(1) := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         NUMBER(1) := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  NUMBER(1) := sys.diutil.bool_to_int(update_institution_nin);
    BEGIN
        l_flg_condition_n       := sys.diutil.bool_to_int(flg_condition_nin);
        l_flg_status_n          := sys.diutil.bool_to_int(flg_status_nin);
        l_id_prof_create_n      := sys.diutil.bool_to_int(id_prof_create_nin);
        l_dt_create_n           := sys.diutil.bool_to_int(dt_create_nin);
        l_id_prof_last_update_n := sys.diutil.bool_to_int(id_prof_last_update_nin);
        l_dt_last_update_n      := sys.diutil.bool_to_int(dt_last_update_nin);
        l_id_prof_cancel_n      := sys.diutil.bool_to_int(id_prof_cancel_nin);
        l_dt_cancel_n           := sys.diutil.bool_to_int(dt_cancel_nin);
        l_create_user_n         := sys.diutil.bool_to_int(create_user_nin);
        l_create_time_n         := sys.diutil.bool_to_int(create_time_nin);
        l_create_institution_n  := sys.diutil.bool_to_int(create_institution_nin);
        l_update_user_n         := sys.diutil.bool_to_int(update_user_nin);
        l_update_time_n         := sys.diutil.bool_to_int(update_time_nin);
        l_update_institution_n  := sys.diutil.bool_to_int(update_institution_nin);
        l_sql                   := 'UPDATE discharge_newborn SET' || ' FLG_CONDITION = decode (' || l_flg_condition_n ||
                                   ',0,:FLG_CONDITION_in, NVL (:FLG_CONDITION_in, FLG_CONDITION)) ' || ',' ||
                                   ' FLG_STATUS = decode (' || l_flg_status_n ||
                                   ',0,:FLG_STATUS_in, NVL (:FLG_STATUS_in, FLG_STATUS)) ' || ',' ||
                                   ' ID_PROF_CREATE = decode (' || l_id_prof_create_n ||
                                   ',0,:ID_PROF_CREATE_in, NVL (:ID_PROF_CREATE_in, ID_PROF_CREATE)) ' || ',' ||
                                   ' DT_CREATE = decode (' || l_dt_create_n ||
                                   ',0,:DT_CREATE_in, NVL (:DT_CREATE_in, DT_CREATE)) ' || ',' ||
                                   ' ID_PROF_LAST_UPDATE = decode (' || l_id_prof_last_update_n ||
                                   ',0,:ID_PROF_LAST_UPDATE_in, NVL (:ID_PROF_LAST_UPDATE_in, ID_PROF_LAST_UPDATE)) ' || ',' ||
                                   ' DT_LAST_UPDATE = decode (' || l_dt_last_update_n ||
                                   ',0,:DT_LAST_UPDATE_in, NVL (:DT_LAST_UPDATE_in, DT_LAST_UPDATE)) ' || ',' ||
                                   ' ID_PROF_CANCEL = decode (' || l_id_prof_cancel_n ||
                                   ',0,:ID_PROF_CANCEL_in, NVL (:ID_PROF_CANCEL_in, ID_PROF_CANCEL)) ' || ',' ||
                                   ' DT_CANCEL = decode (' || l_dt_cancel_n ||
                                   ',0,:DT_CANCEL_in, NVL (:DT_CANCEL_in, DT_CANCEL)) ' || ',' ||
                                   ' CREATE_USER = decode (' || l_create_user_n ||
                                   ',0,:CREATE_USER_in, NVL (:CREATE_USER_in, CREATE_USER)) ' || ',' ||
                                   ' CREATE_TIME = decode (' || l_create_time_n ||
                                   ',0,:CREATE_TIME_in, NVL (:CREATE_TIME_in, CREATE_TIME)) ' || ',' ||
                                   ' CREATE_INSTITUTION = decode (' || l_create_institution_n ||
                                   ',0,:CREATE_INSTITUTION_in, NVL (:CREATE_INSTITUTION_in, CREATE_INSTITUTION)) ' || ',' ||
                                   ' UPDATE_USER = decode (' || l_update_user_n ||
                                   ',0,:UPDATE_USER_in, NVL (:UPDATE_USER_in, UPDATE_USER)) ' || ',' ||
                                   ' UPDATE_TIME = decode (' || l_update_time_n ||
                                   ',0,:UPDATE_TIME_in, NVL (:UPDATE_TIME_in, UPDATE_TIME)) ' || ',' ||
                                   ' UPDATE_INSTITUTION = decode (' || l_update_institution_n ||
                                   ',0,:UPDATE_INSTITUTION_in, NVL (:UPDATE_INSTITUTION_in, UPDATE_INSTITUTION)) ' ||
                                   ' where ' || nvl(where_in, '(1=1)') ||
                                   ' RETURNING ROWID BULK COLLECT INTO :l_rows_out';
        EXECUTE IMMEDIATE 'BEGIN ' || l_sql || '; END;'
            USING IN flg_condition_in, flg_status_in, id_prof_create_in, dt_create_in, id_prof_last_update_in, dt_last_update_in, id_prof_cancel_in, dt_cancel_in, create_user_in, create_time_in, create_institution_in, update_user_in, update_time_in, update_institution_in, OUT l_rows_out;
        IF (rows_out IS NULL)
        THEN
            rows_out := table_varchar();
        END IF;
        rows_out := rows_out MULTISET UNION DISTINCT l_rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update any/all columns by dynamic WHERE
    -- If you pass NULL, then the current column value is set to itself
    PROCEDURE upd
    (
        flg_condition_in        IN discharge_newborn.flg_condition%TYPE DEFAULT NULL,
        flg_condition_nin       IN BOOLEAN := TRUE,
        flg_status_in           IN discharge_newborn.flg_status%TYPE DEFAULT NULL,
        flg_status_nin          IN BOOLEAN := TRUE,
        id_prof_create_in       IN discharge_newborn.id_prof_create%TYPE DEFAULT NULL,
        id_prof_create_nin      IN BOOLEAN := TRUE,
        dt_create_in            IN discharge_newborn.dt_create%TYPE DEFAULT NULL,
        dt_create_nin           IN BOOLEAN := TRUE,
        id_prof_last_update_in  IN discharge_newborn.id_prof_last_update%TYPE DEFAULT NULL,
        id_prof_last_update_nin IN BOOLEAN := TRUE,
        dt_last_update_in       IN discharge_newborn.dt_last_update%TYPE DEFAULT NULL,
        dt_last_update_nin      IN BOOLEAN := TRUE,
        id_prof_cancel_in       IN discharge_newborn.id_prof_cancel%TYPE DEFAULT NULL,
        id_prof_cancel_nin      IN BOOLEAN := TRUE,
        dt_cancel_in            IN discharge_newborn.dt_cancel%TYPE DEFAULT NULL,
        dt_cancel_nin           IN BOOLEAN := TRUE,
        create_user_in          IN discharge_newborn.create_user%TYPE DEFAULT NULL,
        create_user_nin         IN BOOLEAN := TRUE,
        create_time_in          IN discharge_newborn.create_time%TYPE DEFAULT NULL,
        create_time_nin         IN BOOLEAN := TRUE,
        create_institution_in   IN discharge_newborn.create_institution%TYPE DEFAULT NULL,
        create_institution_nin  IN BOOLEAN := TRUE,
        update_user_in          IN discharge_newborn.update_user%TYPE DEFAULT NULL,
        update_user_nin         IN BOOLEAN := TRUE,
        update_time_in          IN discharge_newborn.update_time%TYPE DEFAULT NULL,
        update_time_nin         IN BOOLEAN := TRUE,
        update_institution_in   IN discharge_newborn.update_institution%TYPE DEFAULT NULL,
        update_institution_nin  IN BOOLEAN := TRUE,
        where_in                IN VARCHAR2,
        handle_error_in         IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(flg_condition_in        => flg_condition_in,
            flg_condition_nin       => flg_condition_nin,
            flg_status_in           => flg_status_in,
            flg_status_nin          => flg_status_nin,
            id_prof_create_in       => id_prof_create_in,
            id_prof_create_nin      => id_prof_create_nin,
            dt_create_in            => dt_create_in,
            dt_create_nin           => dt_create_nin,
            id_prof_last_update_in  => id_prof_last_update_in,
            id_prof_last_update_nin => id_prof_last_update_nin,
            dt_last_update_in       => dt_last_update_in,
            dt_last_update_nin      => dt_last_update_nin,
            id_prof_cancel_in       => id_prof_cancel_in,
            id_prof_cancel_nin      => id_prof_cancel_nin,
            dt_cancel_in            => dt_cancel_in,
            dt_cancel_nin           => dt_cancel_nin,
            create_user_in          => create_user_in,
            create_user_nin         => create_user_nin,
            create_time_in          => create_time_in,
            create_time_nin         => create_time_nin,
            create_institution_in   => create_institution_in,
            create_institution_nin  => create_institution_nin,
            update_user_in          => update_user_in,
            update_user_nin         => update_user_nin,
            update_time_in          => update_time_in,
            update_time_nin         => update_time_nin,
            update_institution_in   => update_institution_in,
            update_institution_nin  => update_institution_nin,
            where_in                => where_in,
            handle_error_in         => handle_error_in,
            rows_out                => rows_out);
    END upd;

    --Update/insert columns (with rows_out)
    PROCEDURE upd_ins
    (
        id_episode_in          IN discharge_newborn.id_episode%TYPE,
        id_discharge_in        IN discharge_newborn.id_discharge%TYPE,
        id_pat_pregnancy_in    IN discharge_newborn.id_pat_pregnancy%TYPE,
        flg_condition_in       IN discharge_newborn.flg_condition%TYPE DEFAULT NULL,
        flg_status_in          IN discharge_newborn.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in      IN discharge_newborn.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN discharge_newborn.dt_create%TYPE DEFAULT NULL,
        id_prof_last_update_in IN discharge_newborn.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN discharge_newborn.dt_last_update%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN discharge_newborn.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN discharge_newborn.dt_cancel%TYPE DEFAULT NULL,
        create_user_in         IN discharge_newborn.create_user%TYPE DEFAULT NULL,
        create_time_in         IN discharge_newborn.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN discharge_newborn.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN discharge_newborn.update_user%TYPE DEFAULT NULL,
        update_time_in         IN discharge_newborn.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN discharge_newborn.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE,
        rows_out               IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_episode_in          => id_episode_in,
            id_discharge_in        => id_discharge_in,
            id_pat_pregnancy_in    => id_pat_pregnancy_in,
            flg_condition_in       => flg_condition_in,
            flg_status_in          => flg_status_in,
            id_prof_create_in      => id_prof_create_in,
            dt_create_in           => dt_create_in,
            id_prof_last_update_in => id_prof_last_update_in,
            dt_last_update_in      => dt_last_update_in,
            id_prof_cancel_in      => id_prof_cancel_in,
            dt_cancel_in           => dt_cancel_in,
            create_user_in         => create_user_in,
            create_time_in         => create_time_in,
            create_institution_in  => create_institution_in,
            update_user_in         => update_user_in,
            update_time_in         => update_time_in,
            update_institution_in  => update_institution_in,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
        IF SQL%ROWCOUNT = 0
        THEN
            ins(id_episode_in          => id_episode_in,
                id_discharge_in        => id_discharge_in,
                id_pat_pregnancy_in    => id_pat_pregnancy_in,
                flg_condition_in       => flg_condition_in,
                flg_status_in          => flg_status_in,
                id_prof_create_in      => id_prof_create_in,
                dt_create_in           => dt_create_in,
                id_prof_last_update_in => id_prof_last_update_in,
                dt_last_update_in      => dt_last_update_in,
                id_prof_cancel_in      => id_prof_cancel_in,
                dt_cancel_in           => dt_cancel_in,
                create_user_in         => create_user_in,
                create_time_in         => create_time_in,
                create_institution_in  => create_institution_in,
                update_user_in         => update_user_in,
                update_time_in         => update_time_in,
                update_institution_in  => update_institution_in,
                handle_error_in        => handle_error_in,
                rows_out               => rows_out);
        END IF;
    END upd_ins;

    --Update/insert columns (without rows_out)
    PROCEDURE upd_ins
    (
        id_episode_in          IN discharge_newborn.id_episode%TYPE,
        id_discharge_in        IN discharge_newborn.id_discharge%TYPE,
        id_pat_pregnancy_in    IN discharge_newborn.id_pat_pregnancy%TYPE,
        flg_condition_in       IN discharge_newborn.flg_condition%TYPE DEFAULT NULL,
        flg_status_in          IN discharge_newborn.flg_status%TYPE DEFAULT NULL,
        id_prof_create_in      IN discharge_newborn.id_prof_create%TYPE DEFAULT NULL,
        dt_create_in           IN discharge_newborn.dt_create%TYPE DEFAULT NULL,
        id_prof_last_update_in IN discharge_newborn.id_prof_last_update%TYPE DEFAULT NULL,
        dt_last_update_in      IN discharge_newborn.dt_last_update%TYPE DEFAULT NULL,
        id_prof_cancel_in      IN discharge_newborn.id_prof_cancel%TYPE DEFAULT NULL,
        dt_cancel_in           IN discharge_newborn.dt_cancel%TYPE DEFAULT NULL,
        create_user_in         IN discharge_newborn.create_user%TYPE DEFAULT NULL,
        create_time_in         IN discharge_newborn.create_time%TYPE DEFAULT NULL,
        create_institution_in  IN discharge_newborn.create_institution%TYPE DEFAULT NULL,
        update_user_in         IN discharge_newborn.update_user%TYPE DEFAULT NULL,
        update_time_in         IN discharge_newborn.update_time%TYPE DEFAULT NULL,
        update_institution_in  IN discharge_newborn.update_institution%TYPE DEFAULT NULL,
        handle_error_in        IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd_ins(id_episode_in,
                id_discharge_in,
                id_pat_pregnancy_in,
                flg_condition_in,
                flg_status_in,
                id_prof_create_in,
                dt_create_in,
                id_prof_last_update_in,
                dt_last_update_in,
                id_prof_cancel_in,
                dt_cancel_in,
                create_user_in,
                create_time_in,
                create_institution_in,
                update_user_in,
                update_time_in,
                update_institution_in,
                handle_error_in,
                rows_out);
    END upd_ins;

    --Update by record (with rows_out)
    PROCEDURE upd
    (
        rec_in          IN discharge_newborn%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        IN OUT table_varchar
    ) IS
    BEGIN
        upd(id_episode_in          => rec_in.id_episode,
            id_discharge_in        => rec_in.id_discharge,
            id_pat_pregnancy_in    => rec_in.id_pat_pregnancy,
            flg_condition_in       => rec_in.flg_condition,
            flg_status_in          => rec_in.flg_status,
            id_prof_create_in      => rec_in.id_prof_create,
            dt_create_in           => rec_in.dt_create,
            id_prof_last_update_in => rec_in.id_prof_last_update,
            dt_last_update_in      => rec_in.dt_last_update,
            id_prof_cancel_in      => rec_in.id_prof_cancel,
            dt_cancel_in           => rec_in.dt_cancel,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update by record (without rows_out)
    PROCEDURE upd
    (
        rec_in          IN discharge_newborn%ROWTYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(id_episode_in          => rec_in.id_episode,
            id_discharge_in        => rec_in.id_discharge,
            id_pat_pregnancy_in    => rec_in.id_pat_pregnancy,
            flg_condition_in       => rec_in.flg_condition,
            flg_status_in          => rec_in.flg_status,
            id_prof_create_in      => rec_in.id_prof_create,
            dt_create_in           => rec_in.dt_create,
            id_prof_last_update_in => rec_in.id_prof_last_update,
            dt_last_update_in      => rec_in.dt_last_update,
            id_prof_cancel_in      => rec_in.id_prof_cancel,
            dt_cancel_in           => rec_in.dt_cancel,
            create_user_in         => rec_in.create_user,
            create_time_in         => rec_in.create_time,
            create_institution_in  => rec_in.create_institution,
            update_user_in         => rec_in.update_user,
            update_time_in         => rec_in.update_time,
            update_institution_in  => rec_in.update_institution,
            handle_error_in        => handle_error_in,
            rows_out               => rows_out);
    END upd;

    --Update with collection (with rows_out)
    PROCEDURE upd
    (
        col_in            IN discharge_newborn_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE,
        rows_out          IN OUT table_varchar
    ) IS
        l_id_episode          id_episode_cc;
        l_id_discharge        id_discharge_cc;
        l_id_pat_pregnancy    id_pat_pregnancy_cc;
        l_flg_condition       flg_condition_cc;
        l_flg_status          flg_status_cc;
        l_id_prof_create      id_prof_create_cc;
        l_dt_create           dt_create_cc;
        l_id_prof_last_update id_prof_last_update_cc;
        l_dt_last_update      dt_last_update_cc;
        l_id_prof_cancel      id_prof_cancel_cc;
        l_dt_cancel           dt_cancel_cc;
        l_create_user         create_user_cc;
        l_create_time         create_time_cc;
        l_create_institution  create_institution_cc;
        l_update_user         update_user_cc;
        l_update_time         update_time_cc;
        l_update_institution  update_institution_cc;
    BEGIN
        FOR i IN col_in.first .. col_in.last
        LOOP
            l_id_episode(i) := col_in(i).id_episode;
            l_id_discharge(i) := col_in(i).id_discharge;
            l_id_pat_pregnancy(i) := col_in(i).id_pat_pregnancy;
            l_flg_condition(i) := col_in(i).flg_condition;
            l_flg_status(i) := col_in(i).flg_status;
            l_id_prof_create(i) := col_in(i).id_prof_create;
            l_dt_create(i) := col_in(i).dt_create;
            l_id_prof_last_update(i) := col_in(i).id_prof_last_update;
            l_dt_last_update(i) := col_in(i).dt_last_update;
            l_id_prof_cancel(i) := col_in(i).id_prof_cancel;
            l_dt_cancel(i) := col_in(i).dt_cancel;
            l_create_user(i) := col_in(i).create_user;
            l_create_time(i) := col_in(i).create_time;
            l_create_institution(i) := col_in(i).create_institution;
            l_update_user(i) := col_in(i).update_user;
            l_update_time(i) := col_in(i).update_time;
            l_update_institution(i) := col_in(i).update_institution;
        END LOOP;
        IF nvl(ignore_if_null_in, FALSE)
        THEN
            -- Set any columns to their current values
            -- if incoming value is NULL.
            -- Put WHEN clause on column-level triggers!
            FORALL i IN col_in.first .. col_in.last
                UPDATE discharge_newborn
                   SET flg_condition       = nvl(l_flg_condition(i), flg_condition),
                       flg_status          = nvl(l_flg_status(i), flg_status),
                       id_prof_create      = nvl(l_id_prof_create(i), id_prof_create),
                       dt_create           = nvl(l_dt_create(i), dt_create),
                       id_prof_last_update = nvl(l_id_prof_last_update(i), id_prof_last_update),
                       dt_last_update      = nvl(l_dt_last_update(i), dt_last_update),
                       id_prof_cancel      = nvl(l_id_prof_cancel(i), id_prof_cancel),
                       dt_cancel           = nvl(l_dt_cancel(i), dt_cancel),
                       create_user         = nvl(l_create_user(i), create_user),
                       create_time         = nvl(l_create_time(i), create_time),
                       create_institution  = nvl(l_create_institution(i), create_institution),
                       update_user         = nvl(l_update_user(i), update_user),
                       update_time         = nvl(l_update_time(i), update_time),
                       update_institution  = nvl(l_update_institution(i), update_institution)
                 WHERE id_episode = l_id_episode(i)
                   AND id_discharge = l_id_discharge(i)
                   AND id_pat_pregnancy = l_id_pat_pregnancy(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        ELSE
            FORALL i IN col_in.first .. col_in.last
                UPDATE discharge_newborn
                   SET flg_condition       = l_flg_condition(i),
                       flg_status          = l_flg_status(i),
                       id_prof_create      = l_id_prof_create(i),
                       dt_create           = l_dt_create(i),
                       id_prof_last_update = l_id_prof_last_update(i),
                       dt_last_update      = l_dt_last_update(i),
                       id_prof_cancel      = l_id_prof_cancel(i),
                       dt_cancel           = l_dt_cancel(i),
                       create_user         = l_create_user(i),
                       create_time         = l_create_time(i),
                       create_institution  = l_create_institution(i),
                       update_user         = l_update_user(i),
                       update_time         = l_update_time(i),
                       update_institution  = l_update_institution(i)
                 WHERE id_episode = l_id_episode(i)
                   AND id_discharge = l_id_discharge(i)
                   AND id_pat_pregnancy = l_id_pat_pregnancy(i)
                RETURNING ROWID BULK COLLECT INTO rows_out;
        END IF;
    
    EXCEPTION
        WHEN e_forall_error THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                FOR indx IN 1 .. SQL%bulk_exceptions.count
                LOOP
                    pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
                END LOOP;
            END IF;
        WHEN OTHERS THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END upd;

    --Update with collection (without rows_out)
    PROCEDURE upd
    (
        col_in            IN discharge_newborn_tc,
        ignore_if_null_in IN BOOLEAN := TRUE,
        handle_error_in   IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        upd(col_in, ignore_if_null_in, handle_error_in, rows_out);
    END upd;

    --Dynamic update string
    FUNCTION dynupdstr
    (
        colname_in IN all_tab_columns.column_name%TYPE,
        where_in   IN VARCHAR2 := NULL
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN 'BEGIN UPDATE discharge_newborn
SET ' || colname_in || ' = :value
 WHERE ' || nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;';
    END dynupdstr;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (with rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE,
        rows_out           OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN UPDATE discharge_newborn
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1') || ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    END increment_onecol;

    -- Use Native Dynamic SQL increment a single NUMBER column
    -- for all rows specified by the dynamic WHERE clause (without rows_out)
    PROCEDURE increment_onecol
    (
        colname_in         IN all_tab_columns.column_name%TYPE,
        where_in           IN VARCHAR2,
        increment_value_in IN NUMBER DEFAULT 1,
        handle_error_in    IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE discharge_newborn
SET ' || colname_in || '=' || colname_in || '+' || nvl(increment_value_in, 1) || ' WHERE ' ||
                          nvl(where_in, '1=1');
    END increment_onecol;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_episode_in       IN discharge_newborn.id_episode%TYPE,
        id_discharge_in     IN discharge_newborn.id_discharge%TYPE,
        id_pat_pregnancy_in IN discharge_newborn.id_pat_pregnancy%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM discharge_newborn
         WHERE id_episode = id_episode_in
           AND id_discharge = id_discharge_in
           AND id_pat_pregnancy = id_pat_pregnancy_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del;

    -- Delete one row by primary key
    PROCEDURE del
    (
        id_episode_in       IN discharge_newborn.id_episode%TYPE,
        id_discharge_in     IN discharge_newborn.id_discharge%TYPE,
        id_pat_pregnancy_in IN discharge_newborn.id_pat_pregnancy%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del(id_episode_in       => id_episode_in,
            id_discharge_in     => id_discharge_in,
            id_pat_pregnancy_in => id_pat_pregnancy_in,
            handle_error_in     => handle_error_in,
            rows_out            => rows_out);
    END del;

    -- Delete all rows for this DNB_DISCH_FK foreign key value
    PROCEDURE del_dnb_disch_fk
    (
        id_discharge_in IN discharge_newborn.id_discharge%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM discharge_newborn
         WHERE id_discharge = id_discharge_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_dnb_disch_fk;

    -- Delete all rows for this DNB_EPIS_FK foreign key value
    PROCEDURE del_dnb_epis_fk
    (
        id_episode_in   IN discharge_newborn.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM discharge_newborn
         WHERE id_episode = id_episode_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_dnb_epis_fk;

    -- Delete all rows for this DNB_PPRENG_FK foreign key value
    PROCEDURE del_dnb_ppreng_fk
    (
        id_pat_pregnancy_in IN discharge_newborn.id_pat_pregnancy%TYPE,
        handle_error_in     IN BOOLEAN := TRUE,
        rows_out            OUT table_varchar
    ) IS
    BEGIN
        DELETE FROM discharge_newborn
         WHERE id_pat_pregnancy = id_pat_pregnancy_in
        RETURNING ROWID BULK COLLECT INTO rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_dnb_ppreng_fk;

    -- Delete all rows for this DNB_DISCH_FK foreign key value
    PROCEDURE del_dnb_disch_fk
    (
        id_discharge_in IN discharge_newborn.id_discharge%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dnb_disch_fk(id_discharge_in => id_discharge_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_dnb_disch_fk;

    -- Delete all rows for this DNB_EPIS_FK foreign key value
    PROCEDURE del_dnb_epis_fk
    (
        id_episode_in   IN discharge_newborn.id_episode%TYPE,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dnb_epis_fk(id_episode_in => id_episode_in, handle_error_in => handle_error_in, rows_out => rows_out);
    END del_dnb_epis_fk;

    -- Delete all rows for this DNB_PPRENG_FK foreign key value
    PROCEDURE del_dnb_ppreng_fk
    (
        id_pat_pregnancy_in IN discharge_newborn.id_pat_pregnancy%TYPE,
        handle_error_in     IN BOOLEAN := TRUE
    ) IS
        rows_out table_varchar;
    BEGIN
        del_dnb_ppreng_fk(id_pat_pregnancy_in => id_pat_pregnancy_in,
                          handle_error_in     => handle_error_in,
                          rows_out            => rows_out);
    END del_dnb_ppreng_fk;

    -- Deletions using dynamic SQL
    FUNCTION dyndelstr(where_in IN VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        IF where_in IS NULL
        THEN
            RETURN 'DELETE FROM discharge_newborn';
        ELSE
            RETURN 'DELETE FROM discharge_newborn WHERE ' || where_in;
        END IF;
    END dyndelstr;
    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE,
        rows_out        OUT table_varchar
    ) IS
    BEGIN
        EXECUTE IMMEDIATE 'BEGIN ' || dyndelstr(where_clause_in) ||
                          ' RETURNING ROWID BULK COLLECT INTO :rows_out; END;'
            USING OUT rows_out;
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Delete all rows specified by dynamic WHERE clause
    PROCEDURE del_by
    (
        where_clause_in IN VARCHAR2,
        handle_error_in IN BOOLEAN := TRUE
    ) IS
    BEGIN
        EXECUTE IMMEDIATE dyndelstr(where_clause_in);
    
    EXCEPTION
        WHEN e_null_column_value
             OR e_existing_fky_reference
             OR e_check_constraint_failure
             OR e_no_parent_key
             OR e_child_record_found
             OR e_forall_error
             OR e_integ_constraint_failure THEN
            IF NOT handle_error_in
            THEN
                RAISE;
            ELSE
                pk_alertlog.log_info('DML error ignored: ' || SQLCODE || ': ' || SQLERRM);
            END IF;
        
    END del_by;

    -- Initialize a record with default values for columns in the table (prc)
    PROCEDURE initrec(discharge_newborn_inout IN OUT discharge_newborn%ROWTYPE) IS
    BEGIN
        discharge_newborn_inout.id_episode          := NULL;
        discharge_newborn_inout.id_discharge        := NULL;
        discharge_newborn_inout.id_pat_pregnancy    := NULL;
        discharge_newborn_inout.flg_condition       := NULL;
        discharge_newborn_inout.flg_status          := NULL;
        discharge_newborn_inout.id_prof_create      := NULL;
        discharge_newborn_inout.dt_create           := NULL;
        discharge_newborn_inout.id_prof_last_update := NULL;
        discharge_newborn_inout.dt_last_update      := NULL;
        discharge_newborn_inout.id_prof_cancel      := NULL;
        discharge_newborn_inout.dt_cancel           := NULL;
        discharge_newborn_inout.create_user         := NULL;
        discharge_newborn_inout.create_time         := NULL;
        discharge_newborn_inout.create_institution  := NULL;
        discharge_newborn_inout.update_user         := NULL;
        discharge_newborn_inout.update_time         := NULL;
        discharge_newborn_inout.update_institution  := NULL;
    END initrec;

    -- Initialize a record with default values for columns in the table (fnc)
    FUNCTION initrec RETURN discharge_newborn%ROWTYPE IS
        l_discharge_newborn discharge_newborn%ROWTYPE;
    BEGIN
        RETURN l_discharge_newborn;
    END initrec;

    --get data from rowid
    FUNCTION get_data_rowid(rows_in IN table_varchar) RETURN discharge_newborn_tc IS
        data discharge_newborn_tc;
    BEGIN
        SELECT * BULK COLLECT
          INTO data
          FROM discharge_newborn
         WHERE ROWID IN (SELECT /*+opt_estimate(table,t,scale_rows=0.0000001))*/
                          *
                           FROM TABLE(rows_in) t);
        RETURN data;
    END get_data_rowid;

    --get data from rowid (pragma autonomous transacion)
    FUNCTION get_data_rowid_pat(rows_in IN table_varchar) RETURN discharge_newborn_tc IS
        data discharge_newborn_tc;
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        data := get_data_rowid(rows_in);
        COMMIT;
        RETURN data;
    
    EXCEPTION
        WHEN OTHERS THEN
            pk_alert_exceptions.raise_error(error_name_in => 'get_data_rowid_pat');
            ROLLBACK;
        
    END get_data_rowid_pat;

BEGIN
    NULL;
END ts_discharge_newborn;
/
